### YamlMime:ManagedReference
items:
- uid: Discord.EmoteProperties
  commentId: T:Discord.EmoteProperties
  id: EmoteProperties
  parent: Discord
  children:
  - Discord.EmoteProperties.Name
  - Discord.EmoteProperties.Roles
  langs:
  - csharp
  - vb
  name: EmoteProperties
  nameWithType: EmoteProperties
  fullName: Discord.EmoteProperties
  type: Class
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Emotes/EmoteProperties.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: EmoteProperties
    path: ../src/Discord.Net.Core/Entities/Emotes/EmoteProperties.cs
    startLine: 8
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nProvides properties that are used to modify an <xref href=\"Discord.Emote\" data-throw-if-not-resolved=\"false\"></xref> with the specified changes.\n"
  example: []
  syntax:
    content: 'public class EmoteProperties : object'
    content.vb: >-
      Public Class EmoteProperties
          Inherits Object
  seealso:
  - linkId: Discord.IGuild.ModifyEmoteAsync(Discord.GuildEmote,Action{Discord.EmoteProperties},Discord.RequestOptions)
    commentId: M:Discord.IGuild.ModifyEmoteAsync(Discord.GuildEmote,Action{Discord.EmoteProperties},Discord.RequestOptions)
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.EmoteProperties.Name
  commentId: P:Discord.EmoteProperties.Name
  id: Name
  parent: Discord.EmoteProperties
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: EmoteProperties.Name
  fullName: Discord.EmoteProperties.Name
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Emotes/EmoteProperties.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Name
    path: ../src/Discord.Net.Core/Entities/Emotes/EmoteProperties.cs
    startLine: 13
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets or sets the name of the <xref href=\"Discord.Emote\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Optional<string> Name { get; set; }
    parameters: []
    return:
      type: Discord.Optional{System.String}
    content.vb: 'Public Property Name As '
  overload: Discord.EmoteProperties.Name*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Discord.EmoteProperties.Roles
  commentId: P:Discord.EmoteProperties.Roles
  id: Roles
  parent: Discord.EmoteProperties
  langs:
  - csharp
  - vb
  name: Roles
  nameWithType: EmoteProperties.Roles
  fullName: Discord.EmoteProperties.Roles
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Emotes/EmoteProperties.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Roles
    path: ../src/Discord.Net.Core/Entities/Emotes/EmoteProperties.cs
    startLine: 17
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets or sets the roles that can access this <xref href=\"Discord.Emote\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Optional<IEnumerable<IRole>> Roles { get; set; }
    parameters: []
    return:
      type: Discord.Optional{IEnumerable{Discord.IRole}}
    content.vb: 'Public Property Roles As '
  overload: Discord.EmoteProperties.Roles*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Discord.Emote
  commentId: T:Discord.Emote
  parent: Discord
  name: Emote
  nameWithType: Emote
  fullName: Discord.Emote
- uid: Discord.IGuild.ModifyEmoteAsync(Discord.GuildEmote,Action{Discord.EmoteProperties},Discord.RequestOptions)
  commentId: M:Discord.IGuild.ModifyEmoteAsync(Discord.GuildEmote,Action{Discord.EmoteProperties},Discord.RequestOptions)
  isExternal: true
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.EmoteProperties.Name*
  commentId: Overload:Discord.EmoteProperties.Name
  name: Name
  nameWithType: EmoteProperties.Name
  fullName: Discord.EmoteProperties.Name
- uid: Discord.Optional{System.String}
  commentId: T:Discord.Optional{System.String}
  parent: Discord
  definition: Discord.Optional`1
  name: Optional<String>
  nameWithType: Optional<String>
  fullName: Discord.Optional<System.String>
  nameWithType.vb: Optional(Of String)
  fullName.vb: Discord.Optional(Of System.String)
  name.vb: Optional(Of String)
  spec.csharp:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Optional`1
  commentId: T:Discord.Optional`1
  parent: Discord
  name: Optional<T>
  nameWithType: Optional<T>
  fullName: Discord.Optional<T>
  nameWithType.vb: Optional(Of T)
  fullName.vb: Discord.Optional(Of T)
  name.vb: Optional(Of T)
  spec.csharp:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.EmoteProperties.Roles*
  commentId: Overload:Discord.EmoteProperties.Roles
  name: Roles
  nameWithType: EmoteProperties.Roles
  fullName: Discord.EmoteProperties.Roles
- uid: Discord.Optional{IEnumerable{Discord.IRole}}
  commentId: T:Discord.Optional{IEnumerable{Discord.IRole}}
  parent: Discord
  definition: Discord.Optional`1
  name: Optional<IEnumerable<IRole>>
  nameWithType: Optional<IEnumerable<IRole>>
  fullName: Discord.Optional<IEnumerable<Discord.IRole>>
  nameWithType.vb: Optional(Of IEnumerable(Of IRole))
  fullName.vb: Discord.Optional(Of IEnumerable(Of Discord.IRole))
  name.vb: Optional(Of IEnumerable(Of IRole))
  spec.csharp:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: <
    nameWithType: <
    fullName: <
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
