### YamlMime:ManagedReference
items:
- uid: Discord.WebSocket.SocketTextChannel
  commentId: T:Discord.WebSocket.SocketTextChannel
  id: SocketTextChannel
  parent: Discord.WebSocket
  children:
  - Discord.WebSocket.SocketTextChannel.CachedMessages
  - Discord.WebSocket.SocketTextChannel.Category
  - Discord.WebSocket.SocketTextChannel.CategoryId
  - Discord.WebSocket.SocketTextChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{Discord.IMessage},Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{System.UInt64},Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.Discord#IGuildChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.Discord#IGuildChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetPinnedMessagesAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  - Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  - Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.Discord#INestedChannel#GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.Discord#ITextChannel#CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.Discord#ITextChannel#GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.Discord#ITextChannel#GetWebhooksAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.EnterTypingState(Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.GetCachedMessage(System.UInt64)
  - Discord.WebSocket.SocketTextChannel.GetCachedMessages(Discord.IMessage,Discord.Direction,System.Int32)
  - Discord.WebSocket.SocketTextChannel.GetCachedMessages(System.Int32)
  - Discord.WebSocket.SocketTextChannel.GetCachedMessages(System.UInt64,Discord.Direction,System.Int32)
  - Discord.WebSocket.SocketTextChannel.GetInvitesAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.GetUser(System.UInt64)
  - Discord.WebSocket.SocketTextChannel.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.GetWebhooksAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.IsNsfw
  - Discord.WebSocket.SocketTextChannel.Mention
  - Discord.WebSocket.SocketTextChannel.ModifyAsync(System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  - Discord.WebSocket.SocketTextChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  - Discord.WebSocket.SocketTextChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.SlowModeInterval
  - Discord.WebSocket.SocketTextChannel.SyncPermissionsAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.Topic
  - Discord.WebSocket.SocketTextChannel.TriggerTypingAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.Users
  langs:
  - csharp
  - vb
  name: SocketTextChannel
  nameWithType: SocketTextChannel
  fullName: Discord.WebSocket.SocketTextChannel
  type: Class
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SocketTextChannel
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 15
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nRepresents a WebSocket-based channel in a guild that can send and receive messages.\n"
  example: []
  syntax:
    content: 'public class SocketTextChannel : SocketGuildChannel, ITextChannel, IMentionable, INestedChannel, IGuildChannel, IDeletable, ISocketMessageChannel, IMessageChannel, IChannel, ISnowflakeEntity, IEntity<ulong>'
    content.vb: >-
      Public Class SocketTextChannel
          Inherits SocketGuildChannel
          Implements ITextChannel, IMentionable, INestedChannel, IGuildChannel, IDeletable, ISocketMessageChannel, IMessageChannel, IChannel, ISnowflakeEntity, IEntity(Of ULong)
  inheritance:
  - System.Object
  - Discord.WebSocket.SocketEntity{System.UInt64}
  - Discord.WebSocket.SocketChannel
  - Discord.WebSocket.SocketGuildChannel
  derivedClasses:
  - Discord.WebSocket.SocketNewsChannel
  implements:
  - Discord.ITextChannel
  - Discord.IMentionable
  - Discord.INestedChannel
  - Discord.IGuildChannel
  - Discord.IDeletable
  - Discord.WebSocket.ISocketMessageChannel
  - Discord.IMessageChannel
  - Discord.IChannel
  - Discord.ISnowflakeEntity
  - Discord.IEntity{System.UInt64}
  inheritedMembers:
  - Discord.WebSocket.SocketGuildChannel.Guild
  - Discord.WebSocket.SocketGuildChannel.Name
  - Discord.WebSocket.SocketGuildChannel.Position
  - Discord.WebSocket.SocketGuildChannel.PermissionOverwrites
  - Discord.WebSocket.SocketGuildChannel.ModifyAsync(System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  - Discord.WebSocket.SocketGuildChannel.DeleteAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite(Discord.IUser)
  - Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite(Discord.IRole)
  - Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuildChannel.ToString
  - Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#Guild
  - Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#GuildId
  - Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IRole)
  - Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IUser)
  - Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuildChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuildChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  - Discord.WebSocket.SocketChannel.CreatedAt
  - Discord.WebSocket.SocketChannel.Discord#IChannel#Name
  - Discord.WebSocket.SocketEntity{System.UInt64}.Id
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.WebSocket.SocketTextChannel.Topic
  commentId: P:Discord.WebSocket.SocketTextChannel.Topic
  id: Topic
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: Topic
  nameWithType: SocketTextChannel.Topic
  fullName: Discord.WebSocket.SocketTextChannel.Topic
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Topic
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 21
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the current topic for this text channel.\n"
  example: []
  syntax:
    content: public string Topic { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA string representing the topic set in the channel; <code>null</code> if none is set.\n"
    content.vb: Public ReadOnly Property Topic As String
  overload: Discord.WebSocket.SocketTextChannel.Topic*
  implements:
  - Discord.ITextChannel.Topic
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketTextChannel.SlowModeInterval
  commentId: P:Discord.WebSocket.SocketTextChannel.SlowModeInterval
  id: SlowModeInterval
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: SlowModeInterval
  nameWithType: SocketTextChannel.SlowModeInterval
  fullName: Discord.WebSocket.SocketTextChannel.SlowModeInterval
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SlowModeInterval
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 23
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the current slow-mode delay for this channel.\n"
  example: []
  syntax:
    content: public virtual int SlowModeInterval { get; }
    parameters: []
    return:
      type: System.Int32
      description: "\nAn <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> representing the time in seconds required before the user can send another\nmessage; <code>0</code> if disabled.\n"
    content.vb: Public Overridable ReadOnly Property SlowModeInterval As Integer
  overload: Discord.WebSocket.SocketTextChannel.SlowModeInterval*
  implements:
  - Discord.ITextChannel.SlowModeInterval
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.WebSocket.SocketTextChannel.CategoryId
  commentId: P:Discord.WebSocket.SocketTextChannel.CategoryId
  id: CategoryId
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: CategoryId
  nameWithType: SocketTextChannel.CategoryId
  fullName: Discord.WebSocket.SocketTextChannel.CategoryId
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CategoryId
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 25
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the parent (category) ID of this channel in the guild&apos;s channel list.\n"
  example: []
  syntax:
    content: public ulong? CategoryId { get; }
    parameters: []
    return:
      type: System.Nullable{System.UInt64}
      description: "\nA <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> representing the snowflake identifier of the parent of this channel; \n<code>null</code> if none is set.\n"
    content.vb: Public ReadOnly Property CategoryId As ULong?
  overload: Discord.WebSocket.SocketTextChannel.CategoryId*
  implements:
  - Discord.INestedChannel.CategoryId
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketTextChannel.Category
  commentId: P:Discord.WebSocket.SocketTextChannel.Category
  id: Category
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: Category
  nameWithType: SocketTextChannel.Category
  fullName: Discord.WebSocket.SocketTextChannel.Category
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Category
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 32
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the parent (category) of this channel in the guild&apos;s channel list.\n"
  example: []
  syntax:
    content: public ICategoryChannel Category { get; }
    parameters: []
    return:
      type: Discord.ICategoryChannel
      description: "\nAn <xref href=\"Discord.ICategoryChannel\" data-throw-if-not-resolved=\"false\"></xref> representing the parent of this channel; <code>null</code> if none is set.\n"
    content.vb: Public ReadOnly Property Category As ICategoryChannel
  overload: Discord.WebSocket.SocketTextChannel.Category*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketTextChannel.SyncPermissionsAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.SyncPermissionsAsync(Discord.RequestOptions)
  id: SyncPermissionsAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: SyncPermissionsAsync(RequestOptions)
  nameWithType: SocketTextChannel.SyncPermissionsAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.SyncPermissionsAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SyncPermissionsAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 35
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nSyncs the permissions of this nested channel with its parent&apos;s.\n"
  example: []
  syntax:
    content: public virtual Task SyncPermissionsAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous operation for syncing channel permissions with its parent&apos;s.\n"
    content.vb: Public Overridable Function SyncPermissionsAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketTextChannel.SyncPermissionsAsync*
  implements:
  - Discord.INestedChannel.SyncPermissionsAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Discord.WebSocket.SocketTextChannel.IsNsfw
  commentId: P:Discord.WebSocket.SocketTextChannel.IsNsfw
  id: IsNsfw
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: IsNsfw
  nameWithType: SocketTextChannel.IsNsfw
  fullName: Discord.WebSocket.SocketTextChannel.IsNsfw
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsNsfw
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 40
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a value that indicates whether the channel is NSFW.\n"
  example: []
  syntax:
    content: public bool IsNsfw { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the channel has the NSFW flag enabled; otherwise <code>false</code>.\n"
    content.vb: Public ReadOnly Property IsNsfw As Boolean
  overload: Discord.WebSocket.SocketTextChannel.IsNsfw*
  implements:
  - Discord.ITextChannel.IsNsfw
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketTextChannel.Mention
  commentId: P:Discord.WebSocket.SocketTextChannel.Mention
  id: Mention
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: Mention
  nameWithType: SocketTextChannel.Mention
  fullName: Discord.WebSocket.SocketTextChannel.Mention
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Mention
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 43
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nReturns a special string used to mention this object.\n"
  example: []
  syntax:
    content: public string Mention { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA string that is recognized by Discord as a mention (e.g. &lt;@168693960628371456>).\n"
    content.vb: Public ReadOnly Property Mention As String
  overload: Discord.WebSocket.SocketTextChannel.Mention*
  implements:
  - Discord.IMentionable.Mention
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketTextChannel.CachedMessages
  commentId: P:Discord.WebSocket.SocketTextChannel.CachedMessages
  id: CachedMessages
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: CachedMessages
  nameWithType: SocketTextChannel.CachedMessages
  fullName: Discord.WebSocket.SocketTextChannel.CachedMessages
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CachedMessages
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 45
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets all messages in this channel&apos;s cache.\n"
  example: []
  syntax:
    content: public IReadOnlyCollection<SocketMessage> CachedMessages { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketMessage}
      description: "\nA read-only collection of WebSocket-based messages.\n"
    content.vb: Public ReadOnly Property CachedMessages As IReadOnlyCollection(Of SocketMessage)
  overload: Discord.WebSocket.SocketTextChannel.CachedMessages*
  implements:
  - Discord.WebSocket.ISocketMessageChannel.CachedMessages
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketTextChannel.Users
  commentId: P:Discord.WebSocket.SocketTextChannel.Users
  id: Users
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: Users
  nameWithType: SocketTextChannel.Users
  fullName: Discord.WebSocket.SocketTextChannel.Users
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Users
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 47
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of users that are able to view the channel.\n"
  example: []
  syntax:
    content: public override IReadOnlyCollection<SocketGuildUser> Users { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketGuildUser}
      description: "\nA read-only collection of users that can access the channel (i.e. the users seen in the user list).\n"
    content.vb: Public Overrides ReadOnly Property Users As IReadOnlyCollection(Of SocketGuildUser)
  overridden: Discord.WebSocket.SocketGuildChannel.Users
  overload: Discord.WebSocket.SocketTextChannel.Users*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.WebSocket.SocketTextChannel.ModifyAsync(System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.ModifyAsync(System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
  id: ModifyAsync(System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: ModifyAsync(Action<TextChannelProperties>, RequestOptions)
  nameWithType: SocketTextChannel.ModifyAsync(Action<TextChannelProperties>, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.ModifyAsync(System.Action<Discord.TextChannelProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ModifyAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 74
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nModifies this text channel.\n"
  example: []
  syntax:
    content: public Task ModifyAsync(Action<TextChannelProperties> func, RequestOptions options = null)
    parameters:
    - id: func
      type: System.Action{Discord.TextChannelProperties}
      description: The delegate containing the properties to modify the channel with.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous modification operation.\n"
    content.vb: Public Function ModifyAsync(func As Action(Of TextChannelProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketTextChannel.ModifyAsync*
  seealso:
  - linkId: Discord.TextChannelProperties
    commentId: T:Discord.TextChannelProperties
  implements:
  - Discord.ITextChannel.ModifyAsync(System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
  nameWithType.vb: SocketTextChannel.ModifyAsync(Action(Of TextChannelProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketTextChannel.ModifyAsync(System.Action(Of Discord.TextChannelProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of TextChannelProperties), RequestOptions)
- uid: Discord.WebSocket.SocketTextChannel.GetCachedMessage(System.UInt64)
  commentId: M:Discord.WebSocket.SocketTextChannel.GetCachedMessage(System.UInt64)
  id: GetCachedMessage(System.UInt64)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: GetCachedMessage(UInt64)
  nameWithType: SocketTextChannel.GetCachedMessage(UInt64)
  fullName: Discord.WebSocket.SocketTextChannel.GetCachedMessage(System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetCachedMessage
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 79
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a cached message from this channel.\n"
  remarks: "\n<div class=\"WARNING\"><h5>warning</h5><p>\n    This method requires the use of cache, which is not enabled by default; if caching is not enabled,\n    this method will always return <code>null</code>. Please refer to\n<xref href=\"Discord.WebSocket.DiscordSocketConfig.MessageCacheSize\" data-throw-if-not-resolved=\"false\"></xref> for more details.\n</p></div>\n<p>\n    This method retrieves the message from the local WebSocket cache and does not send any additional\n    request to Discord. This message may be a message that has been deleted.\n</p>\n"
  example: []
  syntax:
    content: public SocketMessage GetCachedMessage(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the message.
    return:
      type: Discord.WebSocket.SocketMessage
      description: "\nA WebSocket-based message object; <code>null</code> if it does not exist in the cache or if caching is not\nenabled.\n"
    content.vb: Public Function GetCachedMessage(id As ULong) As SocketMessage
  overload: Discord.WebSocket.SocketTextChannel.GetCachedMessage*
  implements:
  - Discord.WebSocket.ISocketMessageChannel.GetCachedMessage(System.UInt64)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
  id: GetMessageAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: GetMessageAsync(UInt64, RequestOptions)
  nameWithType: SocketTextChannel.GetMessageAsync(UInt64, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.GetMessageAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetMessageAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 94
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a message from this message channel.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IMessageChannel.GetMessageAsync(System.UInt64%2cDiscord.CacheMode%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public Task<IMessage> GetMessageAsync(ulong id, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the message.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IMessage}
      description: "\nA task that represents an asynchronous get operation for retrieving the message. The task result contains\nthe retrieved message; <code>null</code> if no message is found with the specified identifier.\n"
    content.vb: Public Function GetMessageAsync(id As ULong, options As RequestOptions = Nothing) As Task(Of IMessage)
  overload: Discord.WebSocket.SocketTextChannel.GetMessageAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
  id: GetMessagesAsync(System.Int32,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: GetMessagesAsync(Int32, RequestOptions)
  nameWithType: SocketTextChannel.GetMessagesAsync(Int32, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.GetMessagesAsync(System.Int32, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetMessagesAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 114
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the last N messages from this message channel.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IMessageChannel.GetMessagesAsync(System.Int32%2cDiscord.CacheMode%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(int limit = 100, RequestOptions options = null)
    parameters:
    - id: limit
      type: System.Int32
      description: The numbers of message to be gotten from.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IMessage}}
      description: "\nPaged collection of messages.\n"
    content.vb: Public Function GetMessagesAsync(limit As Integer = 100, options As RequestOptions = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of IMessage))
  overload: Discord.WebSocket.SocketTextChannel.GetMessagesAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
  id: GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: GetMessagesAsync(UInt64, Direction, Int32, RequestOptions)
  nameWithType: SocketTextChannel.GetMessagesAsync(UInt64, Direction, Int32, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.GetMessagesAsync(System.UInt64, Discord.Direction, System.Int32, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetMessagesAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 130
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of messages in this channel.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IMessageChannel.GetMessagesAsync(System.UInt64%2cDiscord.Direction%2cSystem.Int32%2cDiscord.CacheMode%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(ulong fromMessageId, Direction dir, int limit = 100, RequestOptions options = null)
    parameters:
    - id: fromMessageId
      type: System.UInt64
      description: The ID of the starting message to get the messages from.
    - id: dir
      type: Discord.Direction
      description: The direction of the messages to be gotten from.
    - id: limit
      type: System.Int32
      description: The numbers of message to be gotten from.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IMessage}}
      description: "\nPaged collection of messages.\n"
    content.vb: Public Function GetMessagesAsync(fromMessageId As ULong, dir As Direction, limit As Integer = 100, options As RequestOptions = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of IMessage))
  overload: Discord.WebSocket.SocketTextChannel.GetMessagesAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
  id: GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: GetMessagesAsync(IMessage, Direction, Int32, RequestOptions)
  nameWithType: SocketTextChannel.GetMessagesAsync(IMessage, Direction, Int32, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.GetMessagesAsync(Discord.IMessage, Discord.Direction, System.Int32, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetMessagesAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 146
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of messages in this channel.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage%2cDiscord.Direction%2cSystem.Int32%2cDiscord.CacheMode%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(IMessage fromMessage, Direction dir, int limit = 100, RequestOptions options = null)
    parameters:
    - id: fromMessage
      type: Discord.IMessage
      description: The starting message to get the messages from.
    - id: dir
      type: Discord.Direction
      description: The direction of the messages to be gotten from.
    - id: limit
      type: System.Int32
      description: The numbers of message to be gotten from.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IMessage}}
      description: "\nPaged collection of messages.\n"
    content.vb: Public Function GetMessagesAsync(fromMessage As IMessage, dir As Direction, limit As Integer = 100, options As RequestOptions = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of IMessage))
  overload: Discord.WebSocket.SocketTextChannel.GetMessagesAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.GetCachedMessages(System.Int32)
  commentId: M:Discord.WebSocket.SocketTextChannel.GetCachedMessages(System.Int32)
  id: GetCachedMessages(System.Int32)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: GetCachedMessages(Int32)
  nameWithType: SocketTextChannel.GetCachedMessages(Int32)
  fullName: Discord.WebSocket.SocketTextChannel.GetCachedMessages(System.Int32)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetCachedMessages
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 149
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the last N cached messages from this message channel.\n"
  remarks: "\n<div class=\"WARNING\"><h5>warning</h5><p>\n    This method requires the use of cache, which is not enabled by default; if caching is not enabled,\n    this method will always return an empty collection. Please refer to\n<xref href=\"Discord.WebSocket.DiscordSocketConfig.MessageCacheSize\" data-throw-if-not-resolved=\"false\"></xref> for more details.\n</p></div>\n<p>\n    This method retrieves the message(s) from the local WebSocket cache and does not send any additional\n    request to Discord. This read-only collection may include messages that have been deleted. The\n    maximum number of messages that can be retrieved from this method depends on the\n<xref href=\"Discord.WebSocket.DiscordSocketConfig.MessageCacheSize\" data-throw-if-not-resolved=\"false\"></xref> set.\n</p>\n"
  example: []
  syntax:
    content: public IReadOnlyCollection<SocketMessage> GetCachedMessages(int limit = 100)
    parameters:
    - id: limit
      type: System.Int32
      description: The number of messages to get.
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketMessage}
      description: "\nA read-only collection of WebSocket-based messages.\n"
    content.vb: Public Function GetCachedMessages(limit As Integer = 100) As IReadOnlyCollection(Of SocketMessage)
  overload: Discord.WebSocket.SocketTextChannel.GetCachedMessages*
  implements:
  - Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.GetCachedMessages(System.UInt64,Discord.Direction,System.Int32)
  commentId: M:Discord.WebSocket.SocketTextChannel.GetCachedMessages(System.UInt64,Discord.Direction,System.Int32)
  id: GetCachedMessages(System.UInt64,Discord.Direction,System.Int32)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: GetCachedMessages(UInt64, Direction, Int32)
  nameWithType: SocketTextChannel.GetCachedMessages(UInt64, Direction, Int32)
  fullName: Discord.WebSocket.SocketTextChannel.GetCachedMessages(System.UInt64, Discord.Direction, System.Int32)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetCachedMessages
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 152
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the last N cached messages starting from a certain message in this message channel.\n"
  remarks: "\n<div class=\"WARNING\"><h5>warning</h5><p>\n    This method requires the use of cache, which is not enabled by default; if caching is not enabled,\n    this method will always return an empty collection. Please refer to\n<xref href=\"Discord.WebSocket.DiscordSocketConfig.MessageCacheSize\" data-throw-if-not-resolved=\"false\"></xref> for more details.\n</p></div>\n<p>\n    This method retrieves the message(s) from the local WebSocket cache and does not send any additional\n    request to Discord. This read-only collection may include messages that have been deleted. The\n    maximum number of messages that can be retrieved from this method depends on the\n<xref href=\"Discord.WebSocket.DiscordSocketConfig.MessageCacheSize\" data-throw-if-not-resolved=\"false\"></xref> set.\n</p>\n"
  example: []
  syntax:
    content: public IReadOnlyCollection<SocketMessage> GetCachedMessages(ulong fromMessageId, Direction dir, int limit = 100)
    parameters:
    - id: fromMessageId
      type: System.UInt64
      description: The message ID to start the fetching from.
    - id: dir
      type: Discord.Direction
      description: The direction of which the message should be gotten from.
    - id: limit
      type: System.Int32
      description: The number of messages to get.
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketMessage}
      description: "\nA read-only collection of WebSocket-based messages.\n"
    content.vb: Public Function GetCachedMessages(fromMessageId As ULong, dir As Direction, limit As Integer = 100) As IReadOnlyCollection(Of SocketMessage)
  overload: Discord.WebSocket.SocketTextChannel.GetCachedMessages*
  implements:
  - Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.UInt64,Discord.Direction,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.GetCachedMessages(Discord.IMessage,Discord.Direction,System.Int32)
  commentId: M:Discord.WebSocket.SocketTextChannel.GetCachedMessages(Discord.IMessage,Discord.Direction,System.Int32)
  id: GetCachedMessages(Discord.IMessage,Discord.Direction,System.Int32)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: GetCachedMessages(IMessage, Direction, Int32)
  nameWithType: SocketTextChannel.GetCachedMessages(IMessage, Direction, Int32)
  fullName: Discord.WebSocket.SocketTextChannel.GetCachedMessages(Discord.IMessage, Discord.Direction, System.Int32)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetCachedMessages
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 155
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the last N cached messages starting from a certain message in this message channel.\n"
  remarks: "\n<div class=\"WARNING\"><h5>warning</h5><p>\n    This method requires the use of cache, which is not enabled by default; if caching is not enabled,\n    this method will always return an empty collection. Please refer to\n<xref href=\"Discord.WebSocket.DiscordSocketConfig.MessageCacheSize\" data-throw-if-not-resolved=\"false\"></xref> for more details.\n</p></div>\n<p>\n    This method retrieves the message(s) from the local WebSocket cache and does not send any additional\n    request to Discord. This read-only collection may include messages that have been deleted. The\n    maximum number of messages that can be retrieved from this method depends on the\n<xref href=\"Discord.WebSocket.DiscordSocketConfig.MessageCacheSize\" data-throw-if-not-resolved=\"false\"></xref> set.\n</p>\n"
  example: []
  syntax:
    content: public IReadOnlyCollection<SocketMessage> GetCachedMessages(IMessage fromMessage, Direction dir, int limit = 100)
    parameters:
    - id: fromMessage
      type: Discord.IMessage
      description: The message to start the fetching from.
    - id: dir
      type: Discord.Direction
      description: The direction of which the message should be gotten from.
    - id: limit
      type: System.Int32
      description: The number of messages to get.
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketMessage}
      description: "\nA read-only collection of WebSocket-based messages.\n"
    content.vb: Public Function GetCachedMessages(fromMessage As IMessage, dir As Direction, limit As Integer = 100) As IReadOnlyCollection(Of SocketMessage)
  overload: Discord.WebSocket.SocketTextChannel.GetCachedMessages*
  implements:
  - Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(Discord.IMessage,Discord.Direction,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  id: GetPinnedMessagesAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: GetPinnedMessagesAsync(RequestOptions)
  nameWithType: SocketTextChannel.GetPinnedMessagesAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetPinnedMessagesAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 158
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a read-only collection of pinned messages in this channel.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<RestMessage>> GetPinnedMessagesAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestMessage}}
      description: "\nA task that represents the asynchronous get operation for retrieving pinned messages in this channel.\nThe task result contains a read-only collection of messages found in the pinned messages.\n"
    content.vb: Public Function GetPinnedMessagesAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestMessage))
  overload: Discord.WebSocket.SocketTextChannel.GetPinnedMessagesAsync*
  implements:
  - Discord.WebSocket.ISocketMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  id: SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: SendMessageAsync(String, Boolean, Embed, RequestOptions)
  nameWithType: SocketTextChannel.SendMessageAsync(String, Boolean, Embed, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.SendMessageAsync(System.String, System.Boolean, Discord.Embed, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SendMessageAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 163
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nSends a message to this message channel.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IMessageChannel.SendMessageAsync(System.String%2cSystem.Boolean%2cDiscord.Embed%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public Task<RestUserMessage> SendMessageAsync(string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null)
    parameters:
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Determines whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Public Function SendMessageAsync(text As String = Nothing, isTTS As Boolean = False, embed As Embed = Nothing, options As RequestOptions = Nothing) As Task(Of RestUserMessage)
  overload: Discord.WebSocket.SocketTextChannel.SendMessageAsync*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Message content is too long, length must be less or equal to <xref href="Discord.DiscordConfig.MaxMessageSize" data-throw-if-not-resolved="false"></xref>.
  implements:
  - Discord.WebSocket.ISocketMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.WebSocket.SocketTextChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  id: SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: SocketTextChannel.SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.WebSocket.SocketTextChannel.SendFileAsync(System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SendFileAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 167
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nSends a file to this message channel with an optional caption.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IMessageChannel.SendFileAsync(System.String%2cSystem.String%2cSystem.Boolean%2cDiscord.Embed%2cDiscord.RequestOptions%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public Task<RestUserMessage> SendFileAsync(string filePath, string text, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false)
    parameters:
    - id: filePath
      type: System.String
      description: The file path of the file.
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    - id: isSpoiler
      type: System.Boolean
      description: Whether the message attachment should be hidden as a spoiler.
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Public Function SendFileAsync(filePath As String, text As String, isTTS As Boolean = False, embed As Embed = Nothing, options As RequestOptions = Nothing, isSpoiler As Boolean = False) As Task(Of RestUserMessage)
  overload: Discord.WebSocket.SocketTextChannel.SendFileAsync*
  implements:
  - Discord.WebSocket.ISocketMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.WebSocket.SocketTextChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  id: SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: SocketTextChannel.SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.WebSocket.SocketTextChannel.SendFileAsync(System.IO.Stream, System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SendFileAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 172
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nSends a file to this message channel with an optional caption.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IMessageChannel.SendFileAsync(System.IO.Stream%2cSystem.String%2cSystem.String%2cSystem.Boolean%2cDiscord.Embed%2cDiscord.RequestOptions%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public Task<RestUserMessage> SendFileAsync(Stream stream, string filename, string text, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref> of the file to be sent.
    - id: filename
      type: System.String
      description: The name of the attachment.
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    - id: isSpoiler
      type: System.Boolean
      description: Whether the message attachment should be hidden as a spoiler.
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Public Function SendFileAsync(stream As Stream, filename As String, text As String, isTTS As Boolean = False, embed As Embed = Nothing, options As RequestOptions = Nothing, isSpoiler As Boolean = False) As Task(Of RestUserMessage)
  overload: Discord.WebSocket.SocketTextChannel.SendFileAsync*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Message content is too long, length must be less or equal to <xref href="Discord.DiscordConfig.MaxMessageSize" data-throw-if-not-resolved="false"></xref>.
  implements:
  - Discord.WebSocket.ISocketMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{Discord.IMessage},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{Discord.IMessage},Discord.RequestOptions)
  id: DeleteMessagesAsync(System.Collections.Generic.IEnumerable{Discord.IMessage},Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: DeleteMessagesAsync(IEnumerable<IMessage>, RequestOptions)
  nameWithType: SocketTextChannel.DeleteMessagesAsync(IEnumerable<IMessage>, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable<Discord.IMessage>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteMessagesAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 176
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nBulk-deletes multiple messages.\n"
  remarks: "\nThis method attempts to remove the messages specified in bulk.\n<div class=\"IMPORTANT\"><h5>important</h5><p>\n    Due to the limitation set by Discord, this method can only remove messages that are posted within 14 days!\n</p></div>\n"
  example: []
  syntax:
    content: public Task DeleteMessagesAsync(IEnumerable<IMessage> messages, RequestOptions options = null)
    parameters:
    - id: messages
      type: System.Collections.Generic.IEnumerable{Discord.IMessage}
      description: The messages to be bulk-deleted.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous bulk-removal operation.\n"
    content.vb: Public Function DeleteMessagesAsync(messages As IEnumerable(Of IMessage), options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync*
  implements:
  - Discord.ITextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{Discord.IMessage},Discord.RequestOptions)
  nameWithType.vb: SocketTextChannel.DeleteMessagesAsync(IEnumerable(Of IMessage), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable(Of Discord.IMessage), Discord.RequestOptions)
  name.vb: DeleteMessagesAsync(IEnumerable(Of IMessage), RequestOptions)
- uid: Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{System.UInt64},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{System.UInt64},Discord.RequestOptions)
  id: DeleteMessagesAsync(System.Collections.Generic.IEnumerable{System.UInt64},Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: DeleteMessagesAsync(IEnumerable<UInt64>, RequestOptions)
  nameWithType: SocketTextChannel.DeleteMessagesAsync(IEnumerable<UInt64>, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable<System.UInt64>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteMessagesAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 179
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nBulk-deletes multiple messages.\n"
  remarks: "\nThis method attempts to remove the messages specified in bulk.\n<div class=\"IMPORTANT\"><h5>important</h5><p>\n    Due to the limitation set by Discord, this method can only remove messages that are posted within 14 days!\n</p></div>\n"
  example: []
  syntax:
    content: public Task DeleteMessagesAsync(IEnumerable<ulong> messageIds, RequestOptions options = null)
    parameters:
    - id: messageIds
      type: System.Collections.Generic.IEnumerable{System.UInt64}
      description: The snowflake identifier of the messages to be bulk-deleted.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous bulk-removal operation.\n"
    content.vb: Public Function DeleteMessagesAsync(messageIds As IEnumerable(Of ULong), options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync*
  implements:
  - Discord.ITextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{System.UInt64},Discord.RequestOptions)
  nameWithType.vb: SocketTextChannel.DeleteMessagesAsync(IEnumerable(Of UInt64), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable(Of System.UInt64), Discord.RequestOptions)
  name.vb: DeleteMessagesAsync(IEnumerable(Of UInt64), RequestOptions)
- uid: Discord.WebSocket.SocketTextChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  id: DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: DeleteMessageAsync(UInt64, RequestOptions)
  nameWithType: SocketTextChannel.DeleteMessageAsync(UInt64, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.DeleteMessageAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteMessageAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 183
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nDeletes a message.\n"
  example: []
  syntax:
    content: public Task DeleteMessageAsync(ulong messageId, RequestOptions options = null)
    parameters:
    - id: messageId
      type: System.UInt64
      description: The snowflake identifier of the message that would be removed.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous removal operation.\n"
    content.vb: Public Function DeleteMessageAsync(messageId As ULong, options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketTextChannel.DeleteMessageAsync*
  implements:
  - Discord.IMessageChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  id: DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: DeleteMessageAsync(IMessage, RequestOptions)
  nameWithType: SocketTextChannel.DeleteMessageAsync(IMessage, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.DeleteMessageAsync(Discord.IMessage, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteMessageAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 186
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Deletes a message based on the provided message in this channel. '
  example: []
  syntax:
    content: public Task DeleteMessageAsync(IMessage message, RequestOptions options = null)
    parameters:
    - id: message
      type: Discord.IMessage
      description: The message that would be removed.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous removal operation.\n"
    content.vb: Public Function DeleteMessageAsync(message As IMessage, options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketTextChannel.DeleteMessageAsync*
  implements:
  - Discord.IMessageChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.TriggerTypingAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.TriggerTypingAsync(Discord.RequestOptions)
  id: TriggerTypingAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: TriggerTypingAsync(RequestOptions)
  nameWithType: SocketTextChannel.TriggerTypingAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.TriggerTypingAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: TriggerTypingAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 190
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nBroadcasts the &quot;user is typing&quot; message to all users in this channel, lasting 10 seconds.\n"
  example: []
  syntax:
    content: public Task TriggerTypingAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous operation that triggers the broadcast.\n"
    content.vb: Public Function TriggerTypingAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketTextChannel.TriggerTypingAsync*
  implements:
  - Discord.IMessageChannel.TriggerTypingAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.EnterTypingState(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.EnterTypingState(Discord.RequestOptions)
  id: EnterTypingState(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: EnterTypingState(RequestOptions)
  nameWithType: SocketTextChannel.EnterTypingState(RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.EnterTypingState(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: EnterTypingState
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 193
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nContinuously broadcasts the &quot;user is typing&quot; message to all users in this channel until the returned\nobject is disposed.\n"
  example: []
  syntax:
    content: public IDisposable EnterTypingState(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.IDisposable
      description: "\nA disposable object that, upon its disposal, will stop the client from broadcasting its typing state in\nthis channel.\n"
    content.vb: Public Function EnterTypingState(options As RequestOptions = Nothing) As IDisposable
  overload: Discord.WebSocket.SocketTextChannel.EnterTypingState*
  implements:
  - Discord.IMessageChannel.EnterTypingState(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.GetUser(System.UInt64)
  commentId: M:Discord.WebSocket.SocketTextChannel.GetUser(System.UInt64)
  id: GetUser(System.UInt64)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: GetUser(UInt64)
  nameWithType: SocketTextChannel.GetUser(UInt64)
  fullName: Discord.WebSocket.SocketTextChannel.GetUser(System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetUser
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 203
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public override SocketGuildUser GetUser(ulong id)
    parameters:
    - id: id
      type: System.UInt64
    return:
      type: Discord.WebSocket.SocketGuildUser
    content.vb: Public Overrides Function GetUser(id As ULong) As SocketGuildUser
  overridden: Discord.WebSocket.SocketGuildChannel.GetUser(System.UInt64)
  overload: Discord.WebSocket.SocketTextChannel.GetUser*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.WebSocket.SocketTextChannel.CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)
  id: CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: CreateWebhookAsync(String, Stream, RequestOptions)
  nameWithType: SocketTextChannel.CreateWebhookAsync(String, Stream, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.CreateWebhookAsync(System.String, System.IO.Stream, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreateWebhookAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 227
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nCreates a webhook in this text channel.\n"
  example: []
  syntax:
    content: public Task<RestWebhook> CreateWebhookAsync(string name, Stream avatar = null, RequestOptions options = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the webhook.
    - id: avatar
      type: System.IO.Stream
      description: The avatar of the webhook.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestWebhook}
      description: "\nA task that represents the asynchronous creation operation. The task result contains the newly created\nwebhook.\n"
    content.vb: Public Function CreateWebhookAsync(name As String, avatar As Stream = Nothing, options As RequestOptions = Nothing) As Task(Of RestWebhook)
  overload: Discord.WebSocket.SocketTextChannel.CreateWebhookAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  id: GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: GetWebhookAsync(UInt64, RequestOptions)
  nameWithType: SocketTextChannel.GetWebhookAsync(UInt64, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.GetWebhookAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetWebhookAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 238
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a webhook available in this text channel.\n"
  example: []
  syntax:
    content: public Task<RestWebhook> GetWebhookAsync(ulong id, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
      description: The identifier of the webhook.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestWebhook}
      description: "\nA task that represents the asynchronous get operation. The task result contains a webhook associated\nwith the identifier; <code>null</code> if the webhook is not found.\n"
    content.vb: Public Function GetWebhookAsync(id As ULong, options As RequestOptions = Nothing) As Task(Of RestWebhook)
  overload: Discord.WebSocket.SocketTextChannel.GetWebhookAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.GetWebhooksAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.GetWebhooksAsync(Discord.RequestOptions)
  id: GetWebhooksAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: GetWebhooksAsync(RequestOptions)
  nameWithType: SocketTextChannel.GetWebhooksAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.GetWebhooksAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetWebhooksAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 248
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the webhooks available in this text channel.\n"
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<RestWebhook>> GetWebhooksAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestWebhook}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection\nof webhooks that is available in this channel.\n"
    content.vb: Public Function GetWebhooksAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestWebhook))
  overload: Discord.WebSocket.SocketTextChannel.GetWebhooksAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
  id: CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: CreateInviteAsync(Nullable<Int32>, Nullable<Int32>, Boolean, Boolean, RequestOptions)
  nameWithType: SocketTextChannel.CreateInviteAsync(Nullable<Int32>, Nullable<Int32>, Boolean, Boolean, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.CreateInviteAsync(System.Nullable<System.Int32>, System.Nullable<System.Int32>, System.Boolean, System.Boolean, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreateInviteAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 253
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nCreates a new invite to this channel.\n"
  example: []
  syntax:
    content: public Task<IInviteMetadata> CreateInviteAsync(int? maxAge, int? maxUses = default(int? ), bool isTemporary = false, bool isUnique = false, RequestOptions options = null)
    parameters:
    - id: maxAge
      type: System.Nullable{System.Int32}
      description: The time (in seconds) until the invite expires. Set to <code>null</code> to never expire.
    - id: maxUses
      type: System.Nullable{System.Int32}
      description: The max amount of times this invite may be used. Set to <code>null</code> to have unlimited uses.
    - id: isTemporary
      type: System.Boolean
      description: If <code>true</code>, the user accepting this invite will be kicked from the guild after closing their client.
    - id: isUnique
      type: System.Boolean
      description: If <code>true</code>, don&apos;t try to reuse a similar invite (useful for creating many unique one time use invites).
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IInviteMetadata}
      description: "\nA task that represents the asynchronous invite creation operation. The task result contains an invite\nmetadata object containing information for the created invite.\n"
    content.vb: Public Function CreateInviteAsync(maxAge As Integer?, maxUses As Integer? = Nothing, isTemporary As Boolean = False, isUnique As Boolean = False, options As RequestOptions = Nothing) As Task(Of IInviteMetadata)
  overload: Discord.WebSocket.SocketTextChannel.CreateInviteAsync*
  implements:
  - Discord.INestedChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
  nameWithType.vb: SocketTextChannel.CreateInviteAsync(Nullable(Of Int32), Nullable(Of Int32), Boolean, Boolean, RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketTextChannel.CreateInviteAsync(System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), System.Boolean, System.Boolean, Discord.RequestOptions)
  name.vb: CreateInviteAsync(Nullable(Of Int32), Nullable(Of Int32), Boolean, Boolean, RequestOptions)
- uid: Discord.WebSocket.SocketTextChannel.GetInvitesAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.GetInvitesAsync(Discord.RequestOptions)
  id: GetInvitesAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: GetInvitesAsync(RequestOptions)
  nameWithType: SocketTextChannel.GetInvitesAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.GetInvitesAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetInvitesAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 256
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all invites to this channel.\n"
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<IInviteMetadata>> GetInvitesAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IInviteMetadata}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection\nof invite metadata that are created for this channel.\n"
    content.vb: Public Function GetInvitesAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of IInviteMetadata))
  overload: Discord.WebSocket.SocketTextChannel.GetInvitesAsync*
  implements:
  - Discord.INestedChannel.GetInvitesAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.Discord#ITextChannel#CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.Discord#ITextChannel#CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)
  id: Discord#ITextChannel#CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: ITextChannel.CreateWebhookAsync(String, Stream, RequestOptions)
  nameWithType: SocketTextChannel.ITextChannel.CreateWebhookAsync(String, Stream, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.Discord.ITextChannel.CreateWebhookAsync(System.String, System.IO.Stream, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.ITextChannel.CreateWebhookAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 264
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nCreates a webhook in this text channel.\n"
  example: []
  syntax:
    content: Task<IWebhook> ITextChannel.CreateWebhookAsync(string name, Stream avatar, RequestOptions options)
    parameters:
    - id: name
      type: System.String
      description: The name of the webhook.
    - id: avatar
      type: System.IO.Stream
      description: The avatar of the webhook.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IWebhook}
      description: "\nA task that represents the asynchronous creation operation. The task result contains the newly created\nwebhook.\n"
    content.vb: Function Discord.ITextChannel.CreateWebhookAsync(name As String, avatar As Stream, options As RequestOptions) As Task(Of IWebhook) Implements ITextChannel.CreateWebhookAsync
  overload: Discord.WebSocket.SocketTextChannel.Discord#ITextChannel#CreateWebhookAsync*
  implements:
  - Discord.ITextChannel.CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)
  nameWithType.vb: SocketTextChannel.Discord.ITextChannel.CreateWebhookAsync(String, Stream, RequestOptions)
  name.vb: Discord.ITextChannel.CreateWebhookAsync(String, Stream, RequestOptions)
- uid: Discord.WebSocket.SocketTextChannel.Discord#ITextChannel#GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.Discord#ITextChannel#GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  id: Discord#ITextChannel#GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: ITextChannel.GetWebhookAsync(UInt64, RequestOptions)
  nameWithType: SocketTextChannel.ITextChannel.GetWebhookAsync(UInt64, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.Discord.ITextChannel.GetWebhookAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.ITextChannel.GetWebhookAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 267
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a webhook available in this text channel.\n"
  example: []
  syntax:
    content: Task<IWebhook> ITextChannel.GetWebhookAsync(ulong id, RequestOptions options)
    parameters:
    - id: id
      type: System.UInt64
      description: The identifier of the webhook.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IWebhook}
      description: "\nA task that represents the asynchronous get operation. The task result contains a webhook associated\nwith the identifier; <code>null</code> if the webhook is not found.\n"
    content.vb: Function Discord.ITextChannel.GetWebhookAsync(id As ULong, options As RequestOptions) As Task(Of IWebhook) Implements ITextChannel.GetWebhookAsync
  overload: Discord.WebSocket.SocketTextChannel.Discord#ITextChannel#GetWebhookAsync*
  implements:
  - Discord.ITextChannel.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  nameWithType.vb: SocketTextChannel.Discord.ITextChannel.GetWebhookAsync(UInt64, RequestOptions)
  name.vb: Discord.ITextChannel.GetWebhookAsync(UInt64, RequestOptions)
- uid: Discord.WebSocket.SocketTextChannel.Discord#ITextChannel#GetWebhooksAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.Discord#ITextChannel#GetWebhooksAsync(Discord.RequestOptions)
  id: Discord#ITextChannel#GetWebhooksAsync(Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: ITextChannel.GetWebhooksAsync(RequestOptions)
  nameWithType: SocketTextChannel.ITextChannel.GetWebhooksAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.Discord.ITextChannel.GetWebhooksAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.ITextChannel.GetWebhooksAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 270
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the webhooks available in this text channel.\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<IWebhook>> ITextChannel.GetWebhooksAsync(RequestOptions options)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IWebhook}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection\nof webhooks that is available in this channel.\n"
    content.vb: Function Discord.ITextChannel.GetWebhooksAsync(options As RequestOptions) As Task(Of IReadOnlyCollection(Of IWebhook)) Implements ITextChannel.GetWebhooksAsync
  overload: Discord.WebSocket.SocketTextChannel.Discord#ITextChannel#GetWebhooksAsync*
  implements:
  - Discord.ITextChannel.GetWebhooksAsync(Discord.RequestOptions)
  nameWithType.vb: SocketTextChannel.Discord.ITextChannel.GetWebhooksAsync(RequestOptions)
  name.vb: Discord.ITextChannel.GetWebhooksAsync(RequestOptions)
- uid: Discord.WebSocket.SocketTextChannel.Discord#IGuildChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.Discord#IGuildChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IGuildChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: IGuildChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: SocketTextChannel.IGuildChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.Discord.IGuildChannel.GetUserAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuildChannel.GetUserAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 275
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a user in this channel.\n"
  example: []
  syntax:
    content: Task<IGuildUser> IGuildChannel.GetUserAsync(ulong id, CacheMode mode, RequestOptions options)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the user.
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IGuildUser}
      description: "\nA task representing the asynchronous get operation. The task result contains a guild user object that\nrepresents the user; <code>null</code> if none is found.\n"
    content.vb: Function Discord.IGuildChannel.GetUserAsync(id As ULong, mode As CacheMode, options As RequestOptions) As Task(Of IGuildUser) Implements IGuildChannel.GetUserAsync
  overload: Discord.WebSocket.SocketTextChannel.Discord#IGuildChannel#GetUserAsync*
  implements:
  - Discord.IGuildChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: SocketTextChannel.Discord.IGuildChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  name.vb: Discord.IGuildChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
- uid: Discord.WebSocket.SocketTextChannel.Discord#IGuildChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.Discord#IGuildChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IGuildChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: IGuildChannel.GetUsersAsync(CacheMode, RequestOptions)
  nameWithType: SocketTextChannel.IGuildChannel.GetUsersAsync(CacheMode, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuildChannel.GetUsersAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 278
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of users that are able to view the channel or are currently in this channel.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IChannel.GetUsersAsync(Discord.CacheMode%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> IGuildChannel.GetUsersAsync(CacheMode mode, RequestOptions options)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IGuildUser}}
      description: "\nPaged collection of users.\n"
    content.vb: Function Discord.IGuildChannel.GetUsersAsync(mode As CacheMode, options As RequestOptions) As IAsyncEnumerable(Of IReadOnlyCollection(Of IGuildUser)) Implements IGuildChannel.GetUsersAsync
  overload: Discord.WebSocket.SocketTextChannel.Discord#IGuildChannel#GetUsersAsync*
  implements:
  - Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: SocketTextChannel.Discord.IGuildChannel.GetUsersAsync(CacheMode, RequestOptions)
  name.vb: Discord.IGuildChannel.GetUsersAsync(CacheMode, RequestOptions)
- uid: Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IMessageChannel#GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: IMessageChannel.GetMessageAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: SocketTextChannel.IMessageChannel.GetMessageAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.Discord.IMessageChannel.GetMessageAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessageChannel.GetMessageAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 283
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a message from this message channel.\n"
  example: []
  syntax:
    content: Task<IMessage> IMessageChannel.GetMessageAsync(ulong id, CacheMode mode, RequestOptions options)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the message.
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IMessage}
      description: "\nA task that represents an asynchronous get operation for retrieving the message. The task result contains\nthe retrieved message; <code>null</code> if no message is found with the specified identifier.\n"
    content.vb: Function Discord.IMessageChannel.GetMessageAsync(id As ULong, mode As CacheMode, options As RequestOptions) As Task(Of IMessage) Implements IMessageChannel.GetMessageAsync
  overload: Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetMessageAsync*
  implements:
  - Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: SocketTextChannel.Discord.IMessageChannel.GetMessageAsync(UInt64, CacheMode, RequestOptions)
  name.vb: Discord.IMessageChannel.GetMessageAsync(UInt64, CacheMode, RequestOptions)
- uid: Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IMessageChannel#GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: IMessageChannel.GetMessagesAsync(Int32, CacheMode, RequestOptions)
  nameWithType: SocketTextChannel.IMessageChannel.GetMessagesAsync(Int32, CacheMode, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.Discord.IMessageChannel.GetMessagesAsync(System.Int32, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessageChannel.GetMessagesAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 291
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the last N messages from this message channel.\n"
  remarks: "\n<div class=\"IMPORTANT\"><h5>important</h5><p>\n    The returned collection is an asynchronous enumerable object; one must call \n<xref href=\"Discord.AsyncEnumerableExtensions.FlattenAsync%60%601(System.Collections.Generic.IAsyncEnumerable%7bSystem.Collections.Generic.IEnumerable%7b%60%600%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref> to access the individual messages as a\ncollection.\n</p></div>\n<div class=\"WARNING\"><h5>warning</h5><p>\n    Do not fetch too many messages at once! This may cause unwanted preemptive rate limit or even actual\n    rate limit, causing your bot to freeze!\n</p></div>\nThis method will attempt to fetch the number of messages specified under <code data-dev-comment-type=\"paramref\" class=\"paramref\">limit</code>. The\nlibrary will attempt to split up the requests according to your <code data-dev-comment-type=\"paramref\" class=\"paramref\">limit</code> and \n<xref href=\"Discord.DiscordConfig.MaxMessagesPerBatch\" data-throw-if-not-resolved=\"false\"></xref>. In other words, should the user request 500 messages,\nand the <xref href=\"Discord.DiscordConfig.MaxMessagesPerBatch\" data-throw-if-not-resolved=\"false\"></xref> constant is <code>100</code>, the request will\nbe split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need\nof flattening.\n"
  example: []
  syntax:
    content: IAsyncEnumerable<IReadOnlyCollection<IMessage>> IMessageChannel.GetMessagesAsync(int limit, CacheMode mode, RequestOptions options)
    parameters:
    - id: limit
      type: System.Int32
      description: The numbers of message to be gotten from.
    - id: mode
      type: Discord.CacheMode
      description: >-
        The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from

        cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IMessage}}
      description: "\nPaged collection of messages.\n"
    content.vb: Function Discord.IMessageChannel.GetMessagesAsync(limit As Integer, mode As CacheMode, options As RequestOptions) As IAsyncEnumerable(Of IReadOnlyCollection(Of IMessage)) Implements IMessageChannel.GetMessagesAsync
  overload: Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetMessagesAsync*
  implements:
  - Discord.IMessageChannel.GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: SocketTextChannel.Discord.IMessageChannel.GetMessagesAsync(Int32, CacheMode, RequestOptions)
  name.vb: Discord.IMessageChannel.GetMessagesAsync(Int32, CacheMode, RequestOptions)
- uid: Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IMessageChannel#GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: IMessageChannel.GetMessagesAsync(UInt64, Direction, Int32, CacheMode, RequestOptions)
  nameWithType: SocketTextChannel.IMessageChannel.GetMessagesAsync(UInt64, Direction, Int32, CacheMode, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.Discord.IMessageChannel.GetMessagesAsync(System.UInt64, Discord.Direction, System.Int32, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessageChannel.GetMessagesAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 294
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of messages in this channel.\n"
  remarks: "\n<div class=\"IMPORTANT\"><h5>important</h5><p>\n    The returned collection is an asynchronous enumerable object; one must call \n<xref href=\"Discord.AsyncEnumerableExtensions.FlattenAsync%60%601(System.Collections.Generic.IAsyncEnumerable%7bSystem.Collections.Generic.IEnumerable%7b%60%600%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref> to access the individual messages as a\ncollection.\n</p></div>\n<div class=\"WARNING\"><h5>warning</h5><p>\n    Do not fetch too many messages at once! This may cause unwanted preemptive rate limit or even actual\n    rate limit, causing your bot to freeze!\n</p></div>\nThis method will attempt to fetch the number of messages specified under <code data-dev-comment-type=\"paramref\" class=\"paramref\">limit</code> around\nthe message <code data-dev-comment-type=\"paramref\" class=\"paramref\">fromMessageId</code> depending on the <code data-dev-comment-type=\"paramref\" class=\"paramref\">dir</code>. The library will\nattempt to split up the requests according to your <code data-dev-comment-type=\"paramref\" class=\"paramref\">limit</code> and \n<xref href=\"Discord.DiscordConfig.MaxMessagesPerBatch\" data-throw-if-not-resolved=\"false\"></xref>. In other words, should the user request 500 messages,\nand the <xref href=\"Discord.DiscordConfig.MaxMessagesPerBatch\" data-throw-if-not-resolved=\"false\"></xref> constant is <code>100</code>, the request will\nbe split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need\nof flattening.\n"
  example: []
  syntax:
    content: IAsyncEnumerable<IReadOnlyCollection<IMessage>> IMessageChannel.GetMessagesAsync(ulong fromMessageId, Direction dir, int limit, CacheMode mode, RequestOptions options)
    parameters:
    - id: fromMessageId
      type: System.UInt64
      description: The ID of the starting message to get the messages from.
    - id: dir
      type: Discord.Direction
      description: The direction of the messages to be gotten from.
    - id: limit
      type: System.Int32
      description: The numbers of message to be gotten from.
    - id: mode
      type: Discord.CacheMode
      description: >-
        The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from

        cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IMessage}}
      description: "\nPaged collection of messages.\n"
    content.vb: Function Discord.IMessageChannel.GetMessagesAsync(fromMessageId As ULong, dir As Direction, limit As Integer, mode As CacheMode, options As RequestOptions) As IAsyncEnumerable(Of IReadOnlyCollection(Of IMessage)) Implements IMessageChannel.GetMessagesAsync
  overload: Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetMessagesAsync*
  implements:
  - Discord.IMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: SocketTextChannel.Discord.IMessageChannel.GetMessagesAsync(UInt64, Direction, Int32, CacheMode, RequestOptions)
  name.vb: Discord.IMessageChannel.GetMessagesAsync(UInt64, Direction, Int32, CacheMode, RequestOptions)
- uid: Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IMessageChannel#GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: IMessageChannel.GetMessagesAsync(IMessage, Direction, Int32, CacheMode, RequestOptions)
  nameWithType: SocketTextChannel.IMessageChannel.GetMessagesAsync(IMessage, Direction, Int32, CacheMode, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage, Discord.Direction, System.Int32, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessageChannel.GetMessagesAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 297
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of messages in this channel.\n"
  remarks: "\n<div class=\"IMPORTANT\"><h5>important</h5><p>\n    The returned collection is an asynchronous enumerable object; one must call \n<xref href=\"Discord.AsyncEnumerableExtensions.FlattenAsync%60%601(System.Collections.Generic.IAsyncEnumerable%7bSystem.Collections.Generic.IEnumerable%7b%60%600%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref> to access the individual messages as a\ncollection.\n</p></div>\n<div class=\"WARNING\"><h5>warning</h5><p>\n    Do not fetch too many messages at once! This may cause unwanted preemptive rate limit or even actual\n    rate limit, causing your bot to freeze!\n</p></div>\nThis method will attempt to fetch the number of messages specified under <code data-dev-comment-type=\"paramref\" class=\"paramref\">limit</code> around\nthe message <code data-dev-comment-type=\"paramref\" class=\"paramref\">fromMessage</code> depending on the <code data-dev-comment-type=\"paramref\" class=\"paramref\">dir</code>. The library will\nattempt to split up the requests according to your <code data-dev-comment-type=\"paramref\" class=\"paramref\">limit</code> and \n<xref href=\"Discord.DiscordConfig.MaxMessagesPerBatch\" data-throw-if-not-resolved=\"false\"></xref>. In other words, should the user request 500 messages,\nand the <xref href=\"Discord.DiscordConfig.MaxMessagesPerBatch\" data-throw-if-not-resolved=\"false\"></xref> constant is <code>100</code>, the request will\nbe split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need\nof flattening.\n"
  example: []
  syntax:
    content: IAsyncEnumerable<IReadOnlyCollection<IMessage>> IMessageChannel.GetMessagesAsync(IMessage fromMessage, Direction dir, int limit, CacheMode mode, RequestOptions options)
    parameters:
    - id: fromMessage
      type: Discord.IMessage
      description: The starting message to get the messages from.
    - id: dir
      type: Discord.Direction
      description: The direction of the messages to be gotten from.
    - id: limit
      type: System.Int32
      description: The numbers of message to be gotten from.
    - id: mode
      type: Discord.CacheMode
      description: >-
        The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from

        cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IMessage}}
      description: "\nPaged collection of messages.\n"
    content.vb: Function Discord.IMessageChannel.GetMessagesAsync(fromMessage As IMessage, dir As Direction, limit As Integer, mode As CacheMode, options As RequestOptions) As IAsyncEnumerable(Of IReadOnlyCollection(Of IMessage)) Implements IMessageChannel.GetMessagesAsync
  overload: Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetMessagesAsync*
  implements:
  - Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: SocketTextChannel.Discord.IMessageChannel.GetMessagesAsync(IMessage, Direction, Int32, CacheMode, RequestOptions)
  name.vb: Discord.IMessageChannel.GetMessagesAsync(IMessage, Direction, Int32, CacheMode, RequestOptions)
- uid: Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetPinnedMessagesAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetPinnedMessagesAsync(Discord.RequestOptions)
  id: Discord#IMessageChannel#GetPinnedMessagesAsync(Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: IMessageChannel.GetPinnedMessagesAsync(RequestOptions)
  nameWithType: SocketTextChannel.IMessageChannel.GetPinnedMessagesAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessageChannel.GetPinnedMessagesAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 300
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of pinned messages in this channel.\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<IMessage>> IMessageChannel.GetPinnedMessagesAsync(RequestOptions options)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IMessage}}
      description: "\nA task that represents the asynchronous get operation for retrieving pinned messages in this channel.\nThe task result contains a collection of messages found in the pinned messages.\n"
    content.vb: Function Discord.IMessageChannel.GetPinnedMessagesAsync(options As RequestOptions) As Task(Of IReadOnlyCollection(Of IMessage)) Implements IMessageChannel.GetPinnedMessagesAsync
  overload: Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetPinnedMessagesAsync*
  implements:
  - Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  nameWithType.vb: SocketTextChannel.Discord.IMessageChannel.GetPinnedMessagesAsync(RequestOptions)
  name.vb: Discord.IMessageChannel.GetPinnedMessagesAsync(RequestOptions)
- uid: Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  id: Discord#IMessageChannel#SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  isEii: true
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: IMessageChannel.SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: SocketTextChannel.IMessageChannel.SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.WebSocket.SocketTextChannel.Discord.IMessageChannel.SendFileAsync(System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessageChannel.SendFileAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 304
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nSends a file to this message channel with an optional caption.\n"
  remarks: "\nThis method sends a file as if you are uploading an attachment directly from your Discord client.\n<div class=\"NOTE\"><h5>note</h5><p>\n    If you wish to upload an image and have it embedded in a <xref href=\"Discord.EmbedType.Rich\" data-throw-if-not-resolved=\"false\"></xref> embed,\n    you may upload the file and refer to the file with &quot;attachment://filename.ext&quot; in the\n<xref href=\"Discord.EmbedBuilder.ImageUrl\" data-throw-if-not-resolved=\"false\"></xref>. See the example section for its usage.\n</p></div>\n"
  example: []
  syntax:
    content: Task<IUserMessage> IMessageChannel.SendFileAsync(string filePath, string text, bool isTTS, Embed embed, RequestOptions options, bool isSpoiler)
    parameters:
    - id: filePath
      type: System.String
      description: The file path of the file.
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    - id: isSpoiler
      type: System.Boolean
      description: Whether the message attachment should be hidden as a spoiler.
    return:
      type: System.Threading.Tasks.Task{Discord.IUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Function Discord.IMessageChannel.SendFileAsync(filePath As String, text As String, isTTS As Boolean, embed As Embed, options As RequestOptions, isSpoiler As Boolean) As Task(Of IUserMessage) Implements IMessageChannel.SendFileAsync
  overload: Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#SendFileAsync*
  implements:
  - Discord.IMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  nameWithType.vb: SocketTextChannel.Discord.IMessageChannel.SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  name.vb: Discord.IMessageChannel.SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
- uid: Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  id: Discord#IMessageChannel#SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  isEii: true
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: IMessageChannel.SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: SocketTextChannel.IMessageChannel.SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.WebSocket.SocketTextChannel.Discord.IMessageChannel.SendFileAsync(System.IO.Stream, System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessageChannel.SendFileAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 307
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nSends a file to this message channel with an optional caption.\n"
  remarks: "\nThis method sends a file as if you are uploading an attachment directly from your Discord client.\n<div class=\"NOTE\"><h5>note</h5><p>\n    If you wish to upload an image and have it embedded in a <xref href=\"Discord.EmbedType.Rich\" data-throw-if-not-resolved=\"false\"></xref> embed,\n    you may upload the file and refer to the file with &quot;attachment://filename.ext&quot; in the\n<xref href=\"Discord.EmbedBuilder.ImageUrl\" data-throw-if-not-resolved=\"false\"></xref>. See the example section for its usage.\n</p></div>\n"
  example: []
  syntax:
    content: Task<IUserMessage> IMessageChannel.SendFileAsync(Stream stream, string filename, string text, bool isTTS, Embed embed, RequestOptions options, bool isSpoiler)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref> of the file to be sent.
    - id: filename
      type: System.String
      description: The name of the attachment.
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    - id: isSpoiler
      type: System.Boolean
      description: Whether the message attachment should be hidden as a spoiler.
    return:
      type: System.Threading.Tasks.Task{Discord.IUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Function Discord.IMessageChannel.SendFileAsync(stream As Stream, filename As String, text As String, isTTS As Boolean, embed As Embed, options As RequestOptions, isSpoiler As Boolean) As Task(Of IUserMessage) Implements IMessageChannel.SendFileAsync
  overload: Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#SendFileAsync*
  implements:
  - Discord.IMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  nameWithType.vb: SocketTextChannel.Discord.IMessageChannel.SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  name.vb: Discord.IMessageChannel.SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
- uid: Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  id: Discord#IMessageChannel#SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: IMessageChannel.SendMessageAsync(String, Boolean, Embed, RequestOptions)
  nameWithType: SocketTextChannel.IMessageChannel.SendMessageAsync(String, Boolean, Embed, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.Discord.IMessageChannel.SendMessageAsync(System.String, System.Boolean, Discord.Embed, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessageChannel.SendMessageAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 310
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nSends a message to this message channel.\n"
  example: []
  syntax:
    content: Task<IUserMessage> IMessageChannel.SendMessageAsync(string text, bool isTTS, Embed embed, RequestOptions options)
    parameters:
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Determines whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Function Discord.IMessageChannel.SendMessageAsync(text As String, isTTS As Boolean, embed As Embed, options As RequestOptions) As Task(Of IUserMessage) Implements IMessageChannel.SendMessageAsync
  overload: Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#SendMessageAsync*
  implements:
  - Discord.IMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  nameWithType.vb: SocketTextChannel.Discord.IMessageChannel.SendMessageAsync(String, Boolean, Embed, RequestOptions)
  name.vb: Discord.IMessageChannel.SendMessageAsync(String, Boolean, Embed, RequestOptions)
- uid: Discord.WebSocket.SocketTextChannel.Discord#INestedChannel#GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.Discord#INestedChannel#GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)
  id: Discord#INestedChannel#GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: INestedChannel.GetCategoryAsync(CacheMode, RequestOptions)
  nameWithType: SocketTextChannel.INestedChannel.GetCategoryAsync(CacheMode, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.Discord.INestedChannel.GetCategoryAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.INestedChannel.GetCategoryAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 315
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the parent (category) channel of this channel.\n"
  example: []
  syntax:
    content: Task<ICategoryChannel> INestedChannel.GetCategoryAsync(CacheMode mode, RequestOptions options)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.ICategoryChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains the category channel\nrepresenting the parent of this channel; <code>null</code> if none is set.\n"
    content.vb: Function Discord.INestedChannel.GetCategoryAsync(mode As CacheMode, options As RequestOptions) As Task(Of ICategoryChannel) Implements INestedChannel.GetCategoryAsync
  overload: Discord.WebSocket.SocketTextChannel.Discord#INestedChannel#GetCategoryAsync*
  implements:
  - Discord.INestedChannel.GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: SocketTextChannel.Discord.INestedChannel.GetCategoryAsync(CacheMode, RequestOptions)
  name.vb: Discord.INestedChannel.GetCategoryAsync(CacheMode, RequestOptions)
references:
- uid: Discord.WebSocket
  commentId: N:Discord.WebSocket
  name: Discord.WebSocket
  nameWithType: Discord.WebSocket
  fullName: Discord.WebSocket
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.WebSocket.SocketEntity{System.UInt64}
  commentId: T:Discord.WebSocket.SocketEntity{System.UInt64}
  parent: Discord.WebSocket
  definition: Discord.WebSocket.SocketEntity`1
  name: SocketEntity<UInt64>
  nameWithType: SocketEntity<UInt64>
  fullName: Discord.WebSocket.SocketEntity<System.UInt64>
  nameWithType.vb: SocketEntity(Of UInt64)
  fullName.vb: Discord.WebSocket.SocketEntity(Of System.UInt64)
  name.vb: SocketEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.WebSocket.SocketEntity`1
    name: SocketEntity
    nameWithType: SocketEntity
    fullName: Discord.WebSocket.SocketEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.WebSocket.SocketEntity`1
    name: SocketEntity
    nameWithType: SocketEntity
    fullName: Discord.WebSocket.SocketEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketChannel
  commentId: T:Discord.WebSocket.SocketChannel
  parent: Discord.WebSocket
  name: SocketChannel
  nameWithType: SocketChannel
  fullName: Discord.WebSocket.SocketChannel
- uid: Discord.WebSocket.SocketGuildChannel
  commentId: T:Discord.WebSocket.SocketGuildChannel
  parent: Discord.WebSocket
  name: SocketGuildChannel
  nameWithType: SocketGuildChannel
  fullName: Discord.WebSocket.SocketGuildChannel
- uid: Discord.ITextChannel
  commentId: T:Discord.ITextChannel
  parent: Discord
  name: ITextChannel
  nameWithType: ITextChannel
  fullName: Discord.ITextChannel
- uid: Discord.IMentionable
  commentId: T:Discord.IMentionable
  parent: Discord
  name: IMentionable
  nameWithType: IMentionable
  fullName: Discord.IMentionable
- uid: Discord.INestedChannel
  commentId: T:Discord.INestedChannel
  parent: Discord
  name: INestedChannel
  nameWithType: INestedChannel
  fullName: Discord.INestedChannel
- uid: Discord.IGuildChannel
  commentId: T:Discord.IGuildChannel
  parent: Discord
  name: IGuildChannel
  nameWithType: IGuildChannel
  fullName: Discord.IGuildChannel
- uid: Discord.IDeletable
  commentId: T:Discord.IDeletable
  parent: Discord
  name: IDeletable
  nameWithType: IDeletable
  fullName: Discord.IDeletable
- uid: Discord.WebSocket.ISocketMessageChannel
  commentId: T:Discord.WebSocket.ISocketMessageChannel
  parent: Discord.WebSocket
  name: ISocketMessageChannel
  nameWithType: ISocketMessageChannel
  fullName: Discord.WebSocket.ISocketMessageChannel
- uid: Discord.IMessageChannel
  commentId: T:Discord.IMessageChannel
  parent: Discord
  name: IMessageChannel
  nameWithType: IMessageChannel
  fullName: Discord.IMessageChannel
- uid: Discord.IChannel
  commentId: T:Discord.IChannel
  parent: Discord
  name: IChannel
  nameWithType: IChannel
  fullName: Discord.IChannel
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuildChannel.Guild
  commentId: P:Discord.WebSocket.SocketGuildChannel.Guild
  parent: Discord.WebSocket.SocketGuildChannel
  name: Guild
  nameWithType: SocketGuildChannel.Guild
  fullName: Discord.WebSocket.SocketGuildChannel.Guild
- uid: Discord.WebSocket.SocketGuildChannel.Name
  commentId: P:Discord.WebSocket.SocketGuildChannel.Name
  parent: Discord.WebSocket.SocketGuildChannel
  name: Name
  nameWithType: SocketGuildChannel.Name
  fullName: Discord.WebSocket.SocketGuildChannel.Name
- uid: Discord.WebSocket.SocketGuildChannel.Position
  commentId: P:Discord.WebSocket.SocketGuildChannel.Position
  parent: Discord.WebSocket.SocketGuildChannel
  name: Position
  nameWithType: SocketGuildChannel.Position
  fullName: Discord.WebSocket.SocketGuildChannel.Position
- uid: Discord.WebSocket.SocketGuildChannel.PermissionOverwrites
  commentId: P:Discord.WebSocket.SocketGuildChannel.PermissionOverwrites
  parent: Discord.WebSocket.SocketGuildChannel
  name: PermissionOverwrites
  nameWithType: SocketGuildChannel.PermissionOverwrites
  fullName: Discord.WebSocket.SocketGuildChannel.PermissionOverwrites
- uid: Discord.WebSocket.SocketGuildChannel.ModifyAsync(System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuildChannel.ModifyAsync(System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuildChannel
  isExternal: true
  name: ModifyAsync(Action<GuildChannelProperties>, RequestOptions)
  nameWithType: SocketGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions)
  fullName: Discord.WebSocket.SocketGuildChannel.ModifyAsync(System.Action<Discord.GuildChannelProperties>, Discord.RequestOptions)
  nameWithType.vb: SocketGuildChannel.ModifyAsync(Action(Of GuildChannelProperties), RequestOptions)
  fullName.vb: Discord.WebSocket.SocketGuildChannel.ModifyAsync(System.Action(Of Discord.GuildChannelProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of GuildChannelProperties), RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.SocketGuildChannel.ModifyAsync(System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: SocketGuildChannel.ModifyAsync
    fullName: Discord.WebSocket.SocketGuildChannel.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildChannelProperties
    name: GuildChannelProperties
    nameWithType: GuildChannelProperties
    fullName: Discord.GuildChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketGuildChannel.ModifyAsync(System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: SocketGuildChannel.ModifyAsync
    fullName: Discord.WebSocket.SocketGuildChannel.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildChannelProperties
    name: GuildChannelProperties
    nameWithType: GuildChannelProperties
    fullName: Discord.GuildChannelProperties
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuildChannel.DeleteAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuildChannel.DeleteAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuildChannel
  name: DeleteAsync(RequestOptions)
  nameWithType: SocketGuildChannel.DeleteAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketGuildChannel.DeleteAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.SocketGuildChannel.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: SocketGuildChannel.DeleteAsync
    fullName: Discord.WebSocket.SocketGuildChannel.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketGuildChannel.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: SocketGuildChannel.DeleteAsync
    fullName: Discord.WebSocket.SocketGuildChannel.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite(Discord.IUser)
  commentId: M:Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite(Discord.IUser)
  parent: Discord.WebSocket.SocketGuildChannel
  name: GetPermissionOverwrite(IUser)
  nameWithType: SocketGuildChannel.GetPermissionOverwrite(IUser)
  fullName: Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite(Discord.IUser)
  spec.csharp:
  - uid: Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite(Discord.IUser)
    name: GetPermissionOverwrite
    nameWithType: SocketGuildChannel.GetPermissionOverwrite
    fullName: Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite(Discord.IUser)
    name: GetPermissionOverwrite
    nameWithType: SocketGuildChannel.GetPermissionOverwrite
    fullName: Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite(Discord.IRole)
  commentId: M:Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite(Discord.IRole)
  parent: Discord.WebSocket.SocketGuildChannel
  name: GetPermissionOverwrite(IRole)
  nameWithType: SocketGuildChannel.GetPermissionOverwrite(IRole)
  fullName: Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite(Discord.IRole)
  spec.csharp:
  - uid: Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite(Discord.IRole)
    name: GetPermissionOverwrite
    nameWithType: SocketGuildChannel.GetPermissionOverwrite
    fullName: Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite(Discord.IRole)
    name: GetPermissionOverwrite
    nameWithType: SocketGuildChannel.GetPermissionOverwrite
    fullName: Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuildChannel
  name: AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  nameWithType: SocketGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  fullName: Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync(Discord.IUser, Discord.OverwritePermissions, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
    name: AddPermissionOverwriteAsync
    nameWithType: SocketGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
    name: AddPermissionOverwriteAsync
    nameWithType: SocketGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuildChannel
  name: AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  nameWithType: SocketGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  fullName: Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync(Discord.IRole, Discord.OverwritePermissions, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
    name: AddPermissionOverwriteAsync
    nameWithType: SocketGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
    name: AddPermissionOverwriteAsync
    nameWithType: SocketGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuildChannel
  name: RemovePermissionOverwriteAsync(IUser, RequestOptions)
  nameWithType: SocketGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions)
  fullName: Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
    name: RemovePermissionOverwriteAsync
    nameWithType: SocketGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
    name: RemovePermissionOverwriteAsync
    nameWithType: SocketGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuildChannel
  name: RemovePermissionOverwriteAsync(IRole, RequestOptions)
  nameWithType: SocketGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions)
  fullName: Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
    name: RemovePermissionOverwriteAsync
    nameWithType: SocketGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
    name: RemovePermissionOverwriteAsync
    nameWithType: SocketGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuildChannel.ToString
  commentId: M:Discord.WebSocket.SocketGuildChannel.ToString
  parent: Discord.WebSocket.SocketGuildChannel
  name: ToString()
  nameWithType: SocketGuildChannel.ToString()
  fullName: Discord.WebSocket.SocketGuildChannel.ToString()
  spec.csharp:
  - uid: Discord.WebSocket.SocketGuildChannel.ToString
    name: ToString
    nameWithType: SocketGuildChannel.ToString
    fullName: Discord.WebSocket.SocketGuildChannel.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketGuildChannel.ToString
    name: ToString
    nameWithType: SocketGuildChannel.ToString
    fullName: Discord.WebSocket.SocketGuildChannel.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#Guild
  commentId: P:Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#Guild
  parent: Discord.WebSocket.SocketGuildChannel
  name: IGuildChannel.Guild
  nameWithType: SocketGuildChannel.IGuildChannel.Guild
  fullName: Discord.WebSocket.SocketGuildChannel.Discord.IGuildChannel.Guild
  nameWithType.vb: SocketGuildChannel.Discord.IGuildChannel.Guild
  name.vb: Discord.IGuildChannel.Guild
- uid: Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#GuildId
  commentId: P:Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#GuildId
  parent: Discord.WebSocket.SocketGuildChannel
  name: IGuildChannel.GuildId
  nameWithType: SocketGuildChannel.IGuildChannel.GuildId
  fullName: Discord.WebSocket.SocketGuildChannel.Discord.IGuildChannel.GuildId
  nameWithType.vb: SocketGuildChannel.Discord.IGuildChannel.GuildId
  name.vb: Discord.IGuildChannel.GuildId
- uid: Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IRole)
  commentId: M:Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IRole)
  parent: Discord.WebSocket.SocketGuildChannel
  name: IGuildChannel.GetPermissionOverwrite(IRole)
  nameWithType: SocketGuildChannel.IGuildChannel.GetPermissionOverwrite(IRole)
  fullName: Discord.WebSocket.SocketGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite(Discord.IRole)
  nameWithType.vb: SocketGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite(IRole)
  name.vb: Discord.IGuildChannel.GetPermissionOverwrite(IRole)
  spec.csharp:
  - uid: Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IRole)
    name: IGuildChannel.GetPermissionOverwrite
    nameWithType: SocketGuildChannel.IGuildChannel.GetPermissionOverwrite
    fullName: Discord.WebSocket.SocketGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IRole)
    name: Discord.IGuildChannel.GetPermissionOverwrite
    nameWithType: SocketGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite
    fullName: Discord.WebSocket.SocketGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IUser)
  commentId: M:Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IUser)
  parent: Discord.WebSocket.SocketGuildChannel
  name: IGuildChannel.GetPermissionOverwrite(IUser)
  nameWithType: SocketGuildChannel.IGuildChannel.GetPermissionOverwrite(IUser)
  fullName: Discord.WebSocket.SocketGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite(Discord.IUser)
  nameWithType.vb: SocketGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite(IUser)
  name.vb: Discord.IGuildChannel.GetPermissionOverwrite(IUser)
  spec.csharp:
  - uid: Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IUser)
    name: IGuildChannel.GetPermissionOverwrite
    nameWithType: SocketGuildChannel.IGuildChannel.GetPermissionOverwrite
    fullName: Discord.WebSocket.SocketGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IUser)
    name: Discord.IGuildChannel.GetPermissionOverwrite
    nameWithType: SocketGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite
    fullName: Discord.WebSocket.SocketGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuildChannel
  name: IGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  nameWithType: SocketGuildChannel.IGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  fullName: Discord.WebSocket.SocketGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync(Discord.IRole, Discord.OverwritePermissions, Discord.RequestOptions)
  nameWithType.vb: SocketGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  name.vb: Discord.IGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
    name: IGuildChannel.AddPermissionOverwriteAsync
    nameWithType: SocketGuildChannel.IGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.WebSocket.SocketGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
    name: Discord.IGuildChannel.AddPermissionOverwriteAsync
    nameWithType: SocketGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.WebSocket.SocketGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuildChannel
  name: IGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  nameWithType: SocketGuildChannel.IGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  fullName: Discord.WebSocket.SocketGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync(Discord.IUser, Discord.OverwritePermissions, Discord.RequestOptions)
  nameWithType.vb: SocketGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  name.vb: Discord.IGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
    name: IGuildChannel.AddPermissionOverwriteAsync
    nameWithType: SocketGuildChannel.IGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.WebSocket.SocketGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
    name: Discord.IGuildChannel.AddPermissionOverwriteAsync
    nameWithType: SocketGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.WebSocket.SocketGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuildChannel
  name: IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions)
  nameWithType: SocketGuildChannel.IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions)
  fullName: Discord.WebSocket.SocketGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole, Discord.RequestOptions)
  nameWithType.vb: SocketGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions)
  name.vb: Discord.IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
    name: IGuildChannel.RemovePermissionOverwriteAsync
    nameWithType: SocketGuildChannel.IGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.WebSocket.SocketGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
    name: Discord.IGuildChannel.RemovePermissionOverwriteAsync
    nameWithType: SocketGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.WebSocket.SocketGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuildChannel
  name: IGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions)
  nameWithType: SocketGuildChannel.IGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions)
  fullName: Discord.WebSocket.SocketGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser, Discord.RequestOptions)
  nameWithType.vb: SocketGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions)
  name.vb: Discord.IGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
    name: IGuildChannel.RemovePermissionOverwriteAsync
    nameWithType: SocketGuildChannel.IGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.WebSocket.SocketGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
    name: Discord.IGuildChannel.RemovePermissionOverwriteAsync
    nameWithType: SocketGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.WebSocket.SocketGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuildChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuildChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuildChannel
  name: IChannel.GetUsersAsync(CacheMode, RequestOptions)
  nameWithType: SocketGuildChannel.IChannel.GetUsersAsync(CacheMode, RequestOptions)
  fullName: Discord.WebSocket.SocketGuildChannel.Discord.IChannel.GetUsersAsync(Discord.CacheMode, Discord.RequestOptions)
  nameWithType.vb: SocketGuildChannel.Discord.IChannel.GetUsersAsync(CacheMode, RequestOptions)
  name.vb: Discord.IChannel.GetUsersAsync(CacheMode, RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.SocketGuildChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
    name: IChannel.GetUsersAsync
    nameWithType: SocketGuildChannel.IChannel.GetUsersAsync
    fullName: Discord.WebSocket.SocketGuildChannel.Discord.IChannel.GetUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketGuildChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
    name: Discord.IChannel.GetUsersAsync
    nameWithType: SocketGuildChannel.Discord.IChannel.GetUsersAsync
    fullName: Discord.WebSocket.SocketGuildChannel.Discord.IChannel.GetUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuildChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuildChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuildChannel
  isExternal: true
  name: IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: SocketGuildChannel.IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.WebSocket.SocketGuildChannel.Discord.IChannel.GetUserAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  nameWithType.vb: SocketGuildChannel.Discord.IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  name.vb: Discord.IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.SocketGuildChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: IChannel.GetUserAsync
    nameWithType: SocketGuildChannel.IChannel.GetUserAsync
    fullName: Discord.WebSocket.SocketGuildChannel.Discord.IChannel.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketGuildChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: Discord.IChannel.GetUserAsync
    nameWithType: SocketGuildChannel.Discord.IChannel.GetUserAsync
    fullName: Discord.WebSocket.SocketGuildChannel.Discord.IChannel.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketChannel.CreatedAt
  commentId: P:Discord.WebSocket.SocketChannel.CreatedAt
  parent: Discord.WebSocket.SocketChannel
  name: CreatedAt
  nameWithType: SocketChannel.CreatedAt
  fullName: Discord.WebSocket.SocketChannel.CreatedAt
- uid: Discord.WebSocket.SocketChannel.Discord#IChannel#Name
  commentId: P:Discord.WebSocket.SocketChannel.Discord#IChannel#Name
  parent: Discord.WebSocket.SocketChannel
  name: IChannel.Name
  nameWithType: SocketChannel.IChannel.Name
  fullName: Discord.WebSocket.SocketChannel.Discord.IChannel.Name
  nameWithType.vb: SocketChannel.Discord.IChannel.Name
  name.vb: Discord.IChannel.Name
- uid: Discord.WebSocket.SocketEntity{System.UInt64}.Id
  commentId: P:Discord.WebSocket.SocketEntity{System.UInt64}.Id
  parent: Discord.WebSocket.SocketEntity{System.UInt64}
  definition: Discord.WebSocket.SocketEntity`1.Id
  name: Id
  nameWithType: SocketEntity<UInt64>.Id
  fullName: Discord.WebSocket.SocketEntity<System.UInt64>.Id
  nameWithType.vb: SocketEntity(Of UInt64).Id
  fullName.vb: Discord.WebSocket.SocketEntity(Of System.UInt64).Id
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.WebSocket.SocketEntity`1
  commentId: T:Discord.WebSocket.SocketEntity`1
  name: SocketEntity<T>
  nameWithType: SocketEntity<T>
  fullName: Discord.WebSocket.SocketEntity<T>
  nameWithType.vb: SocketEntity(Of T)
  fullName.vb: Discord.WebSocket.SocketEntity(Of T)
  name.vb: SocketEntity(Of T)
  spec.csharp:
  - uid: Discord.WebSocket.SocketEntity`1
    name: SocketEntity
    nameWithType: SocketEntity
    fullName: Discord.WebSocket.SocketEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.WebSocket.SocketEntity`1
    name: SocketEntity
    nameWithType: SocketEntity
    fullName: Discord.WebSocket.SocketEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketEntity`1.Id
  commentId: P:Discord.WebSocket.SocketEntity`1.Id
  name: Id
  nameWithType: SocketEntity<T>.Id
  fullName: Discord.WebSocket.SocketEntity<T>.Id
  nameWithType.vb: SocketEntity(Of T).Id
  fullName.vb: Discord.WebSocket.SocketEntity(Of T).Id
- uid: Discord.WebSocket.SocketTextChannel.Topic*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.Topic
  name: Topic
  nameWithType: SocketTextChannel.Topic
  fullName: Discord.WebSocket.SocketTextChannel.Topic
- uid: Discord.ITextChannel.Topic
  commentId: P:Discord.ITextChannel.Topic
  parent: Discord.ITextChannel
  name: Topic
  nameWithType: ITextChannel.Topic
  fullName: Discord.ITextChannel.Topic
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.WebSocket.SocketTextChannel.SlowModeInterval*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.SlowModeInterval
  name: SlowModeInterval
  nameWithType: SocketTextChannel.SlowModeInterval
  fullName: Discord.WebSocket.SocketTextChannel.SlowModeInterval
- uid: Discord.ITextChannel.SlowModeInterval
  commentId: P:Discord.ITextChannel.SlowModeInterval
  parent: Discord.ITextChannel
  name: SlowModeInterval
  nameWithType: ITextChannel.SlowModeInterval
  fullName: Discord.ITextChannel.SlowModeInterval
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Discord.WebSocket.SocketTextChannel.CategoryId*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.CategoryId
  name: CategoryId
  nameWithType: SocketTextChannel.CategoryId
  fullName: Discord.WebSocket.SocketTextChannel.CategoryId
- uid: Discord.INestedChannel.CategoryId
  commentId: P:Discord.INestedChannel.CategoryId
  parent: Discord.INestedChannel
  name: CategoryId
  nameWithType: INestedChannel.CategoryId
  fullName: Discord.INestedChannel.CategoryId
- uid: System.Nullable{System.UInt64}
  commentId: T:System.Nullable{System.UInt64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<UInt64>
  nameWithType: Nullable<UInt64>
  fullName: System.Nullable<System.UInt64>
  nameWithType.vb: Nullable(Of UInt64)
  fullName.vb: System.Nullable(Of System.UInt64)
  name.vb: Nullable(Of UInt64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.ICategoryChannel
  commentId: T:Discord.ICategoryChannel
  parent: Discord
  name: ICategoryChannel
  nameWithType: ICategoryChannel
  fullName: Discord.ICategoryChannel
- uid: Discord.WebSocket.SocketTextChannel.Category*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.Category
  name: Category
  nameWithType: SocketTextChannel.Category
  fullName: Discord.WebSocket.SocketTextChannel.Category
- uid: Discord.WebSocket.SocketTextChannel.SyncPermissionsAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.SyncPermissionsAsync
  name: SyncPermissionsAsync
  nameWithType: SocketTextChannel.SyncPermissionsAsync
  fullName: Discord.WebSocket.SocketTextChannel.SyncPermissionsAsync
- uid: Discord.INestedChannel.SyncPermissionsAsync(Discord.RequestOptions)
  commentId: M:Discord.INestedChannel.SyncPermissionsAsync(Discord.RequestOptions)
  parent: Discord.INestedChannel
  name: SyncPermissionsAsync(RequestOptions)
  nameWithType: INestedChannel.SyncPermissionsAsync(RequestOptions)
  fullName: Discord.INestedChannel.SyncPermissionsAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.INestedChannel.SyncPermissionsAsync(Discord.RequestOptions)
    name: SyncPermissionsAsync
    nameWithType: INestedChannel.SyncPermissionsAsync
    fullName: Discord.INestedChannel.SyncPermissionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.INestedChannel.SyncPermissionsAsync(Discord.RequestOptions)
    name: SyncPermissionsAsync
    nameWithType: INestedChannel.SyncPermissionsAsync
    fullName: Discord.INestedChannel.SyncPermissionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Discord.WebSocket.SocketTextChannel.IsNsfw*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.IsNsfw
  name: IsNsfw
  nameWithType: SocketTextChannel.IsNsfw
  fullName: Discord.WebSocket.SocketTextChannel.IsNsfw
- uid: Discord.ITextChannel.IsNsfw
  commentId: P:Discord.ITextChannel.IsNsfw
  parent: Discord.ITextChannel
  name: IsNsfw
  nameWithType: ITextChannel.IsNsfw
  fullName: Discord.ITextChannel.IsNsfw
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.WebSocket.SocketTextChannel.Mention*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.Mention
  name: Mention
  nameWithType: SocketTextChannel.Mention
  fullName: Discord.WebSocket.SocketTextChannel.Mention
- uid: Discord.IMentionable.Mention
  commentId: P:Discord.IMentionable.Mention
  parent: Discord.IMentionable
  name: Mention
  nameWithType: IMentionable.Mention
  fullName: Discord.IMentionable.Mention
- uid: Discord.WebSocket.SocketTextChannel.CachedMessages*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.CachedMessages
  name: CachedMessages
  nameWithType: SocketTextChannel.CachedMessages
  fullName: Discord.WebSocket.SocketTextChannel.CachedMessages
- uid: Discord.WebSocket.ISocketMessageChannel.CachedMessages
  commentId: P:Discord.WebSocket.ISocketMessageChannel.CachedMessages
  parent: Discord.WebSocket.ISocketMessageChannel
  name: CachedMessages
  nameWithType: ISocketMessageChannel.CachedMessages
  fullName: Discord.WebSocket.ISocketMessageChannel.CachedMessages
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketMessage}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketMessage}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<SocketMessage>
  nameWithType: IReadOnlyCollection<SocketMessage>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.WebSocket.SocketMessage>
  nameWithType.vb: IReadOnlyCollection(Of SocketMessage)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.WebSocket.SocketMessage)
  name.vb: IReadOnlyCollection(Of SocketMessage)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketMessage
    name: SocketMessage
    nameWithType: SocketMessage
    fullName: Discord.WebSocket.SocketMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketMessage
    name: SocketMessage
    nameWithType: SocketMessage
    fullName: Discord.WebSocket.SocketMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Discord.WebSocket.SocketGuildChannel.Users
  commentId: P:Discord.WebSocket.SocketGuildChannel.Users
  parent: Discord.WebSocket.SocketGuildChannel
  name: Users
  nameWithType: SocketGuildChannel.Users
  fullName: Discord.WebSocket.SocketGuildChannel.Users
- uid: Discord.WebSocket.SocketTextChannel.Users*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.Users
  name: Users
  nameWithType: SocketTextChannel.Users
  fullName: Discord.WebSocket.SocketTextChannel.Users
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketGuildUser}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketGuildUser}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<SocketGuildUser>
  nameWithType: IReadOnlyCollection<SocketGuildUser>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.WebSocket.SocketGuildUser>
  nameWithType.vb: IReadOnlyCollection(Of SocketGuildUser)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.WebSocket.SocketGuildUser)
  name.vb: IReadOnlyCollection(Of SocketGuildUser)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketGuildUser
    name: SocketGuildUser
    nameWithType: SocketGuildUser
    fullName: Discord.WebSocket.SocketGuildUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketGuildUser
    name: SocketGuildUser
    nameWithType: SocketGuildUser
    fullName: Discord.WebSocket.SocketGuildUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.ModifyAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.ModifyAsync
  name: ModifyAsync
  nameWithType: SocketTextChannel.ModifyAsync
  fullName: Discord.WebSocket.SocketTextChannel.ModifyAsync
- uid: Discord.ITextChannel.ModifyAsync(System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.ITextChannel.ModifyAsync(System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
  parent: Discord.ITextChannel
  isExternal: true
  name: ModifyAsync(Action<TextChannelProperties>, RequestOptions)
  nameWithType: ITextChannel.ModifyAsync(Action<TextChannelProperties>, RequestOptions)
  fullName: Discord.ITextChannel.ModifyAsync(System.Action<Discord.TextChannelProperties>, Discord.RequestOptions)
  nameWithType.vb: ITextChannel.ModifyAsync(Action(Of TextChannelProperties), RequestOptions)
  fullName.vb: Discord.ITextChannel.ModifyAsync(System.Action(Of Discord.TextChannelProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of TextChannelProperties), RequestOptions)
  spec.csharp:
  - uid: Discord.ITextChannel.ModifyAsync(System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: ITextChannel.ModifyAsync
    fullName: Discord.ITextChannel.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.TextChannelProperties
    name: TextChannelProperties
    nameWithType: TextChannelProperties
    fullName: Discord.TextChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.ITextChannel.ModifyAsync(System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: ITextChannel.ModifyAsync
    fullName: Discord.ITextChannel.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.TextChannelProperties
    name: TextChannelProperties
    nameWithType: TextChannelProperties
    fullName: Discord.TextChannelProperties
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.TextChannelProperties
  commentId: T:Discord.TextChannelProperties
  name: TextChannelProperties
  nameWithType: TextChannelProperties
  fullName: Discord.TextChannelProperties
- uid: System.Action{Discord.TextChannelProperties}
  commentId: T:System.Action{Discord.TextChannelProperties}
  parent: System
  definition: System.Action`1
  name: Action<TextChannelProperties>
  nameWithType: Action<TextChannelProperties>
  fullName: System.Action<Discord.TextChannelProperties>
  nameWithType.vb: Action(Of TextChannelProperties)
  fullName.vb: System.Action(Of Discord.TextChannelProperties)
  name.vb: Action(Of TextChannelProperties)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.TextChannelProperties
    name: TextChannelProperties
    nameWithType: TextChannelProperties
    fullName: Discord.TextChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.TextChannelProperties
    name: TextChannelProperties
    nameWithType: TextChannelProperties
    fullName: Discord.TextChannelProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.GetCachedMessage*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.GetCachedMessage
  name: GetCachedMessage
  nameWithType: SocketTextChannel.GetCachedMessage
  fullName: Discord.WebSocket.SocketTextChannel.GetCachedMessage
- uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessage(System.UInt64)
  commentId: M:Discord.WebSocket.ISocketMessageChannel.GetCachedMessage(System.UInt64)
  parent: Discord.WebSocket.ISocketMessageChannel
  isExternal: true
  name: GetCachedMessage(UInt64)
  nameWithType: ISocketMessageChannel.GetCachedMessage(UInt64)
  fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessage(System.UInt64)
  spec.csharp:
  - uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessage(System.UInt64)
    name: GetCachedMessage
    nameWithType: ISocketMessageChannel.GetCachedMessage
    fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessage(System.UInt64)
    name: GetCachedMessage
    nameWithType: ISocketMessageChannel.GetCachedMessage
    fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Discord.WebSocket.SocketMessage
  commentId: T:Discord.WebSocket.SocketMessage
  parent: Discord.WebSocket
  name: SocketMessage
  nameWithType: SocketMessage
  fullName: Discord.WebSocket.SocketMessage
- uid: Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  isExternal: true
  name: GetMessageAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: IMessageChannel.GetMessageAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.IMessageChannel.GetMessageAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessageAsync
    nameWithType: IMessageChannel.GetMessageAsync
    fullName: Discord.IMessageChannel.GetMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessageAsync
    nameWithType: IMessageChannel.GetMessageAsync
    fullName: Discord.IMessageChannel.GetMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.GetMessageAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.GetMessageAsync
  name: GetMessageAsync
  nameWithType: SocketTextChannel.GetMessageAsync
  fullName: Discord.WebSocket.SocketTextChannel.GetMessageAsync
- uid: System.Threading.Tasks.Task{Discord.IMessage}
  commentId: T:System.Threading.Tasks.Task{Discord.IMessage}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IMessage>
  nameWithType: Task<IMessage>
  fullName: System.Threading.Tasks.Task<Discord.IMessage>
  nameWithType.vb: Task(Of IMessage)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IMessage)
  name.vb: Task(Of IMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessageChannel.GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  isExternal: true
  name: GetMessagesAsync(Int32, CacheMode, RequestOptions)
  nameWithType: IMessageChannel.GetMessagesAsync(Int32, CacheMode, RequestOptions)
  fullName: Discord.IMessageChannel.GetMessagesAsync(System.Int32, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IMessageChannel.GetMessagesAsync
    fullName: Discord.IMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IMessageChannel.GetMessagesAsync
    fullName: Discord.IMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.GetMessagesAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.GetMessagesAsync
  name: GetMessagesAsync
  nameWithType: SocketTextChannel.GetMessagesAsync
  fullName: Discord.WebSocket.SocketTextChannel.GetMessagesAsync
- uid: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IMessage}}
  commentId: T:System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IMessage}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IAsyncEnumerable`1
  name: IAsyncEnumerable<IReadOnlyCollection<IMessage>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<IMessage>>
  fullName: System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyCollection<Discord.IMessage>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IMessage))
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IMessage))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IMessage))
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IAsyncEnumerable`1
  commentId: T:System.Collections.Generic.IAsyncEnumerable`1
  isExternal: true
  name: IAsyncEnumerable<T>
  nameWithType: IAsyncEnumerable<T>
  fullName: System.Collections.Generic.IAsyncEnumerable<T>
  nameWithType.vb: IAsyncEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of T)
  name.vb: IAsyncEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  isExternal: true
  name: GetMessagesAsync(UInt64, Direction, Int32, CacheMode, RequestOptions)
  nameWithType: IMessageChannel.GetMessagesAsync(UInt64, Direction, Int32, CacheMode, RequestOptions)
  fullName: Discord.IMessageChannel.GetMessagesAsync(System.UInt64, Discord.Direction, System.Int32, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IMessageChannel.GetMessagesAsync
    fullName: Discord.IMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IMessageChannel.GetMessagesAsync
    fullName: Discord.IMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Direction
  commentId: T:Discord.Direction
  parent: Discord
  name: Direction
  nameWithType: Direction
  fullName: Discord.Direction
- uid: Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  isExternal: true
  name: GetMessagesAsync(IMessage, Direction, Int32, CacheMode, RequestOptions)
  nameWithType: IMessageChannel.GetMessagesAsync(IMessage, Direction, Int32, CacheMode, RequestOptions)
  fullName: Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage, Discord.Direction, System.Int32, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IMessageChannel.GetMessagesAsync
    fullName: Discord.IMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IMessageChannel.GetMessagesAsync
    fullName: Discord.IMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessage
  commentId: T:Discord.IMessage
  parent: Discord
  name: IMessage
  nameWithType: IMessage
  fullName: Discord.IMessage
- uid: Discord.WebSocket.SocketTextChannel.GetCachedMessages*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.GetCachedMessages
  name: GetCachedMessages
  nameWithType: SocketTextChannel.GetCachedMessages
  fullName: Discord.WebSocket.SocketTextChannel.GetCachedMessages
- uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.Int32)
  commentId: M:Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.Int32)
  parent: Discord.WebSocket.ISocketMessageChannel
  isExternal: true
  name: GetCachedMessages(Int32)
  nameWithType: ISocketMessageChannel.GetCachedMessages(Int32)
  fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.Int32)
  spec.csharp:
  - uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.Int32)
    name: GetCachedMessages
    nameWithType: ISocketMessageChannel.GetCachedMessages
    fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.Int32)
    name: GetCachedMessages
    nameWithType: ISocketMessageChannel.GetCachedMessages
    fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.UInt64,Discord.Direction,System.Int32)
  commentId: M:Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.UInt64,Discord.Direction,System.Int32)
  parent: Discord.WebSocket.ISocketMessageChannel
  isExternal: true
  name: GetCachedMessages(UInt64, Direction, Int32)
  nameWithType: ISocketMessageChannel.GetCachedMessages(UInt64, Direction, Int32)
  fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.UInt64, Discord.Direction, System.Int32)
  spec.csharp:
  - uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.UInt64,Discord.Direction,System.Int32)
    name: GetCachedMessages
    nameWithType: ISocketMessageChannel.GetCachedMessages
    fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.UInt64,Discord.Direction,System.Int32)
    name: GetCachedMessages
    nameWithType: ISocketMessageChannel.GetCachedMessages
    fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(Discord.IMessage,Discord.Direction,System.Int32)
  commentId: M:Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(Discord.IMessage,Discord.Direction,System.Int32)
  parent: Discord.WebSocket.ISocketMessageChannel
  isExternal: true
  name: GetCachedMessages(IMessage, Direction, Int32)
  nameWithType: ISocketMessageChannel.GetCachedMessages(IMessage, Direction, Int32)
  fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(Discord.IMessage, Discord.Direction, System.Int32)
  spec.csharp:
  - uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(Discord.IMessage,Discord.Direction,System.Int32)
    name: GetCachedMessages
    nameWithType: ISocketMessageChannel.GetCachedMessages
    fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(Discord.IMessage,Discord.Direction,System.Int32)
    name: GetCachedMessages
    nameWithType: ISocketMessageChannel.GetCachedMessages
    fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.GetPinnedMessagesAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.GetPinnedMessagesAsync
  name: GetPinnedMessagesAsync
  nameWithType: SocketTextChannel.GetPinnedMessagesAsync
  fullName: Discord.WebSocket.SocketTextChannel.GetPinnedMessagesAsync
- uid: Discord.WebSocket.ISocketMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.ISocketMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.ISocketMessageChannel
  name: GetPinnedMessagesAsync(RequestOptions)
  nameWithType: ISocketMessageChannel.GetPinnedMessagesAsync(RequestOptions)
  fullName: Discord.WebSocket.ISocketMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.ISocketMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
    name: GetPinnedMessagesAsync
    nameWithType: ISocketMessageChannel.GetPinnedMessagesAsync
    fullName: Discord.WebSocket.ISocketMessageChannel.GetPinnedMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.ISocketMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
    name: GetPinnedMessagesAsync
    nameWithType: ISocketMessageChannel.GetPinnedMessagesAsync
    fullName: Discord.WebSocket.ISocketMessageChannel.GetPinnedMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestMessage}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestMessage}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<RestMessage>>
  nameWithType: Task<IReadOnlyCollection<RestMessage>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.Rest.RestMessage>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestMessage))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.Rest.RestMessage))
  name.vb: Task(Of IReadOnlyCollection(Of RestMessage))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestMessage
    name: RestMessage
    nameWithType: RestMessage
    fullName: Discord.Rest.RestMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestMessage
    name: RestMessage
    nameWithType: RestMessage
    fullName: Discord.Rest.RestMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.DiscordConfig.MaxMessageSize
  commentId: F:Discord.DiscordConfig.MaxMessageSize
  parent: Discord.DiscordConfig
  name: MaxMessageSize
  nameWithType: DiscordConfig.MaxMessageSize
  fullName: Discord.DiscordConfig.MaxMessageSize
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
- uid: Discord.WebSocket.SocketTextChannel.SendMessageAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.SendMessageAsync
  name: SendMessageAsync
  nameWithType: SocketTextChannel.SendMessageAsync
  fullName: Discord.WebSocket.SocketTextChannel.SendMessageAsync
- uid: Discord.WebSocket.ISocketMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.ISocketMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  parent: Discord.WebSocket.ISocketMessageChannel
  isExternal: true
  name: SendMessageAsync(String, Boolean, Embed, RequestOptions)
  nameWithType: ISocketMessageChannel.SendMessageAsync(String, Boolean, Embed, RequestOptions)
  fullName: Discord.WebSocket.ISocketMessageChannel.SendMessageAsync(System.String, System.Boolean, Discord.Embed, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.ISocketMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
    name: SendMessageAsync
    nameWithType: ISocketMessageChannel.SendMessageAsync
    fullName: Discord.WebSocket.ISocketMessageChannel.SendMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.ISocketMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
    name: SendMessageAsync
    nameWithType: ISocketMessageChannel.SendMessageAsync
    fullName: Discord.WebSocket.ISocketMessageChannel.SendMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Embed
  commentId: T:Discord.Embed
  parent: Discord
  name: Embed
  nameWithType: Embed
  fullName: Discord.Embed
- uid: System.Threading.Tasks.Task{Discord.Rest.RestUserMessage}
  commentId: T:System.Threading.Tasks.Task{Discord.Rest.RestUserMessage}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RestUserMessage>
  nameWithType: Task<RestUserMessage>
  fullName: System.Threading.Tasks.Task<Discord.Rest.RestUserMessage>
  nameWithType.vb: Task(Of RestUserMessage)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.Rest.RestUserMessage)
  name.vb: Task(Of RestUserMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestUserMessage
    name: RestUserMessage
    nameWithType: RestUserMessage
    fullName: Discord.Rest.RestUserMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestUserMessage
    name: RestUserMessage
    nameWithType: RestUserMessage
    fullName: Discord.Rest.RestUserMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.DiscordConfig
  commentId: T:Discord.DiscordConfig
  parent: Discord
  name: DiscordConfig
  nameWithType: DiscordConfig
  fullName: Discord.DiscordConfig
- uid: Discord.WebSocket.SocketTextChannel.SendFileAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.SendFileAsync
  name: SendFileAsync
  nameWithType: SocketTextChannel.SendFileAsync
  fullName: Discord.WebSocket.SocketTextChannel.SendFileAsync
- uid: Discord.WebSocket.ISocketMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.WebSocket.ISocketMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.WebSocket.ISocketMessageChannel
  isExternal: true
  name: SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: ISocketMessageChannel.SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.WebSocket.ISocketMessageChannel.SendFileAsync(System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  spec.csharp:
  - uid: Discord.WebSocket.ISocketMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: ISocketMessageChannel.SendFileAsync
    fullName: Discord.WebSocket.ISocketMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.ISocketMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: ISocketMessageChannel.SendFileAsync
    fullName: Discord.WebSocket.ISocketMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.ISocketMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.WebSocket.ISocketMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.WebSocket.ISocketMessageChannel
  isExternal: true
  name: SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: ISocketMessageChannel.SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.WebSocket.ISocketMessageChannel.SendFileAsync(System.IO.Stream, System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  spec.csharp:
  - uid: Discord.WebSocket.ISocketMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: ISocketMessageChannel.SendFileAsync
    fullName: Discord.WebSocket.ISocketMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.ISocketMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: ISocketMessageChannel.SendFileAsync
    fullName: Discord.WebSocket.ISocketMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync
  name: DeleteMessagesAsync
  nameWithType: SocketTextChannel.DeleteMessagesAsync
  fullName: Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync
- uid: Discord.ITextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{Discord.IMessage},Discord.RequestOptions)
  commentId: M:Discord.ITextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{Discord.IMessage},Discord.RequestOptions)
  parent: Discord.ITextChannel
  isExternal: true
  name: DeleteMessagesAsync(IEnumerable<IMessage>, RequestOptions)
  nameWithType: ITextChannel.DeleteMessagesAsync(IEnumerable<IMessage>, RequestOptions)
  fullName: Discord.ITextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable<Discord.IMessage>, Discord.RequestOptions)
  nameWithType.vb: ITextChannel.DeleteMessagesAsync(IEnumerable(Of IMessage), RequestOptions)
  fullName.vb: Discord.ITextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable(Of Discord.IMessage), Discord.RequestOptions)
  name.vb: DeleteMessagesAsync(IEnumerable(Of IMessage), RequestOptions)
  spec.csharp:
  - uid: Discord.ITextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{Discord.IMessage},Discord.RequestOptions)
    name: DeleteMessagesAsync
    nameWithType: ITextChannel.DeleteMessagesAsync
    fullName: Discord.ITextChannel.DeleteMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.ITextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{Discord.IMessage},Discord.RequestOptions)
    name: DeleteMessagesAsync
    nameWithType: ITextChannel.DeleteMessagesAsync
    fullName: Discord.ITextChannel.DeleteMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Discord.IMessage}
  commentId: T:System.Collections.Generic.IEnumerable{Discord.IMessage}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IMessage>
  nameWithType: IEnumerable<IMessage>
  fullName: System.Collections.Generic.IEnumerable<Discord.IMessage>
  nameWithType.vb: IEnumerable(Of IMessage)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Discord.IMessage)
  name.vb: IEnumerable(Of IMessage)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.ITextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{System.UInt64},Discord.RequestOptions)
  commentId: M:Discord.ITextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{System.UInt64},Discord.RequestOptions)
  parent: Discord.ITextChannel
  isExternal: true
  name: DeleteMessagesAsync(IEnumerable<UInt64>, RequestOptions)
  nameWithType: ITextChannel.DeleteMessagesAsync(IEnumerable<UInt64>, RequestOptions)
  fullName: Discord.ITextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable<System.UInt64>, Discord.RequestOptions)
  nameWithType.vb: ITextChannel.DeleteMessagesAsync(IEnumerable(Of UInt64), RequestOptions)
  fullName.vb: Discord.ITextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable(Of System.UInt64), Discord.RequestOptions)
  name.vb: DeleteMessagesAsync(IEnumerable(Of UInt64), RequestOptions)
  spec.csharp:
  - uid: Discord.ITextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{System.UInt64},Discord.RequestOptions)
    name: DeleteMessagesAsync
    nameWithType: ITextChannel.DeleteMessagesAsync
    fullName: Discord.ITextChannel.DeleteMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.ITextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{System.UInt64},Discord.RequestOptions)
    name: DeleteMessagesAsync
    nameWithType: ITextChannel.DeleteMessagesAsync
    fullName: Discord.ITextChannel.DeleteMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.UInt64}
  commentId: T:System.Collections.Generic.IEnumerable{System.UInt64}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<UInt64>
  nameWithType: IEnumerable<UInt64>
  fullName: System.Collections.Generic.IEnumerable<System.UInt64>
  nameWithType.vb: IEnumerable(Of UInt64)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.UInt64)
  name.vb: IEnumerable(Of UInt64)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.DeleteMessageAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.DeleteMessageAsync
  name: DeleteMessageAsync
  nameWithType: SocketTextChannel.DeleteMessageAsync
  fullName: Discord.WebSocket.SocketTextChannel.DeleteMessageAsync
- uid: Discord.IMessageChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  isExternal: true
  name: DeleteMessageAsync(UInt64, RequestOptions)
  nameWithType: IMessageChannel.DeleteMessageAsync(UInt64, RequestOptions)
  fullName: Discord.IMessageChannel.DeleteMessageAsync(System.UInt64, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
    name: DeleteMessageAsync
    nameWithType: IMessageChannel.DeleteMessageAsync
    fullName: Discord.IMessageChannel.DeleteMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
    name: DeleteMessageAsync
    nameWithType: IMessageChannel.DeleteMessageAsync
    fullName: Discord.IMessageChannel.DeleteMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessageChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  name: DeleteMessageAsync(IMessage, RequestOptions)
  nameWithType: IMessageChannel.DeleteMessageAsync(IMessage, RequestOptions)
  fullName: Discord.IMessageChannel.DeleteMessageAsync(Discord.IMessage, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
    name: DeleteMessageAsync
    nameWithType: IMessageChannel.DeleteMessageAsync
    fullName: Discord.IMessageChannel.DeleteMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
    name: DeleteMessageAsync
    nameWithType: IMessageChannel.DeleteMessageAsync
    fullName: Discord.IMessageChannel.DeleteMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.TriggerTypingAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.TriggerTypingAsync
  name: TriggerTypingAsync
  nameWithType: SocketTextChannel.TriggerTypingAsync
  fullName: Discord.WebSocket.SocketTextChannel.TriggerTypingAsync
- uid: Discord.IMessageChannel.TriggerTypingAsync(Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.TriggerTypingAsync(Discord.RequestOptions)
  parent: Discord.IMessageChannel
  name: TriggerTypingAsync(RequestOptions)
  nameWithType: IMessageChannel.TriggerTypingAsync(RequestOptions)
  fullName: Discord.IMessageChannel.TriggerTypingAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.TriggerTypingAsync(Discord.RequestOptions)
    name: TriggerTypingAsync
    nameWithType: IMessageChannel.TriggerTypingAsync
    fullName: Discord.IMessageChannel.TriggerTypingAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.TriggerTypingAsync(Discord.RequestOptions)
    name: TriggerTypingAsync
    nameWithType: IMessageChannel.TriggerTypingAsync
    fullName: Discord.IMessageChannel.TriggerTypingAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.EnterTypingState*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.EnterTypingState
  name: EnterTypingState
  nameWithType: SocketTextChannel.EnterTypingState
  fullName: Discord.WebSocket.SocketTextChannel.EnterTypingState
- uid: Discord.IMessageChannel.EnterTypingState(Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.EnterTypingState(Discord.RequestOptions)
  parent: Discord.IMessageChannel
  name: EnterTypingState(RequestOptions)
  nameWithType: IMessageChannel.EnterTypingState(RequestOptions)
  fullName: Discord.IMessageChannel.EnterTypingState(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.EnterTypingState(Discord.RequestOptions)
    name: EnterTypingState
    nameWithType: IMessageChannel.EnterTypingState
    fullName: Discord.IMessageChannel.EnterTypingState
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.EnterTypingState(Discord.RequestOptions)
    name: EnterTypingState
    nameWithType: IMessageChannel.EnterTypingState
    fullName: Discord.IMessageChannel.EnterTypingState
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Discord.WebSocket.SocketGuildChannel.GetUser(System.UInt64)
  commentId: M:Discord.WebSocket.SocketGuildChannel.GetUser(System.UInt64)
  parent: Discord.WebSocket.SocketGuildChannel
  isExternal: true
  name: GetUser(UInt64)
  nameWithType: SocketGuildChannel.GetUser(UInt64)
  fullName: Discord.WebSocket.SocketGuildChannel.GetUser(System.UInt64)
  spec.csharp:
  - uid: Discord.WebSocket.SocketGuildChannel.GetUser(System.UInt64)
    name: GetUser
    nameWithType: SocketGuildChannel.GetUser
    fullName: Discord.WebSocket.SocketGuildChannel.GetUser
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketGuildChannel.GetUser(System.UInt64)
    name: GetUser
    nameWithType: SocketGuildChannel.GetUser
    fullName: Discord.WebSocket.SocketGuildChannel.GetUser
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.GetUser*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.GetUser
  name: GetUser
  nameWithType: SocketTextChannel.GetUser
  fullName: Discord.WebSocket.SocketTextChannel.GetUser
- uid: Discord.WebSocket.SocketGuildUser
  commentId: T:Discord.WebSocket.SocketGuildUser
  parent: Discord.WebSocket
  name: SocketGuildUser
  nameWithType: SocketGuildUser
  fullName: Discord.WebSocket.SocketGuildUser
- uid: Discord.WebSocket.SocketTextChannel.CreateWebhookAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.CreateWebhookAsync
  name: CreateWebhookAsync
  nameWithType: SocketTextChannel.CreateWebhookAsync
  fullName: Discord.WebSocket.SocketTextChannel.CreateWebhookAsync
- uid: System.Threading.Tasks.Task{Discord.Rest.RestWebhook}
  commentId: T:System.Threading.Tasks.Task{Discord.Rest.RestWebhook}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RestWebhook>
  nameWithType: Task<RestWebhook>
  fullName: System.Threading.Tasks.Task<Discord.Rest.RestWebhook>
  nameWithType.vb: Task(Of RestWebhook)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.Rest.RestWebhook)
  name.vb: Task(Of RestWebhook)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestWebhook
    name: RestWebhook
    nameWithType: RestWebhook
    fullName: Discord.Rest.RestWebhook
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestWebhook
    name: RestWebhook
    nameWithType: RestWebhook
    fullName: Discord.Rest.RestWebhook
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.GetWebhookAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.GetWebhookAsync
  name: GetWebhookAsync
  nameWithType: SocketTextChannel.GetWebhookAsync
  fullName: Discord.WebSocket.SocketTextChannel.GetWebhookAsync
- uid: Discord.WebSocket.SocketTextChannel.GetWebhooksAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.GetWebhooksAsync
  name: GetWebhooksAsync
  nameWithType: SocketTextChannel.GetWebhooksAsync
  fullName: Discord.WebSocket.SocketTextChannel.GetWebhooksAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestWebhook}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestWebhook}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<RestWebhook>>
  nameWithType: Task<IReadOnlyCollection<RestWebhook>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.Rest.RestWebhook>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestWebhook))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.Rest.RestWebhook))
  name.vb: Task(Of IReadOnlyCollection(Of RestWebhook))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestWebhook
    name: RestWebhook
    nameWithType: RestWebhook
    fullName: Discord.Rest.RestWebhook
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestWebhook
    name: RestWebhook
    nameWithType: RestWebhook
    fullName: Discord.Rest.RestWebhook
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.CreateInviteAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.CreateInviteAsync
  name: CreateInviteAsync
  nameWithType: SocketTextChannel.CreateInviteAsync
  fullName: Discord.WebSocket.SocketTextChannel.CreateInviteAsync
- uid: Discord.INestedChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
  commentId: M:Discord.INestedChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
  parent: Discord.INestedChannel
  isExternal: true
  name: CreateInviteAsync(Nullable<Int32>, Nullable<Int32>, Boolean, Boolean, RequestOptions)
  nameWithType: INestedChannel.CreateInviteAsync(Nullable<Int32>, Nullable<Int32>, Boolean, Boolean, RequestOptions)
  fullName: Discord.INestedChannel.CreateInviteAsync(System.Nullable<System.Int32>, System.Nullable<System.Int32>, System.Boolean, System.Boolean, Discord.RequestOptions)
  nameWithType.vb: INestedChannel.CreateInviteAsync(Nullable(Of Int32), Nullable(Of Int32), Boolean, Boolean, RequestOptions)
  fullName.vb: Discord.INestedChannel.CreateInviteAsync(System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), System.Boolean, System.Boolean, Discord.RequestOptions)
  name.vb: CreateInviteAsync(Nullable(Of Int32), Nullable(Of Int32), Boolean, Boolean, RequestOptions)
  spec.csharp:
  - uid: Discord.INestedChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
    name: CreateInviteAsync
    nameWithType: INestedChannel.CreateInviteAsync
    fullName: Discord.INestedChannel.CreateInviteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.INestedChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
    name: CreateInviteAsync
    nameWithType: INestedChannel.CreateInviteAsync
    fullName: Discord.INestedChannel.CreateInviteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.IInviteMetadata}
  commentId: T:System.Threading.Tasks.Task{Discord.IInviteMetadata}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IInviteMetadata>
  nameWithType: Task<IInviteMetadata>
  fullName: System.Threading.Tasks.Task<Discord.IInviteMetadata>
  nameWithType.vb: Task(Of IInviteMetadata)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IInviteMetadata)
  name.vb: Task(Of IInviteMetadata)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IInviteMetadata
    name: IInviteMetadata
    nameWithType: IInviteMetadata
    fullName: Discord.IInviteMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IInviteMetadata
    name: IInviteMetadata
    nameWithType: IInviteMetadata
    fullName: Discord.IInviteMetadata
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.GetInvitesAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.GetInvitesAsync
  name: GetInvitesAsync
  nameWithType: SocketTextChannel.GetInvitesAsync
  fullName: Discord.WebSocket.SocketTextChannel.GetInvitesAsync
- uid: Discord.INestedChannel.GetInvitesAsync(Discord.RequestOptions)
  commentId: M:Discord.INestedChannel.GetInvitesAsync(Discord.RequestOptions)
  parent: Discord.INestedChannel
  name: GetInvitesAsync(RequestOptions)
  nameWithType: INestedChannel.GetInvitesAsync(RequestOptions)
  fullName: Discord.INestedChannel.GetInvitesAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.INestedChannel.GetInvitesAsync(Discord.RequestOptions)
    name: GetInvitesAsync
    nameWithType: INestedChannel.GetInvitesAsync
    fullName: Discord.INestedChannel.GetInvitesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.INestedChannel.GetInvitesAsync(Discord.RequestOptions)
    name: GetInvitesAsync
    nameWithType: INestedChannel.GetInvitesAsync
    fullName: Discord.INestedChannel.GetInvitesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IInviteMetadata}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IInviteMetadata}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<IInviteMetadata>>
  nameWithType: Task<IReadOnlyCollection<IInviteMetadata>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.IInviteMetadata>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IInviteMetadata))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IInviteMetadata))
  name.vb: Task(Of IReadOnlyCollection(Of IInviteMetadata))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IInviteMetadata
    name: IInviteMetadata
    nameWithType: IInviteMetadata
    fullName: Discord.IInviteMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IInviteMetadata
    name: IInviteMetadata
    nameWithType: IInviteMetadata
    fullName: Discord.IInviteMetadata
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.Discord#ITextChannel#CreateWebhookAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.Discord#ITextChannel#CreateWebhookAsync
  name: ITextChannel.CreateWebhookAsync
  nameWithType: SocketTextChannel.ITextChannel.CreateWebhookAsync
  fullName: Discord.WebSocket.SocketTextChannel.Discord.ITextChannel.CreateWebhookAsync
  nameWithType.vb: SocketTextChannel.Discord.ITextChannel.CreateWebhookAsync
  name.vb: Discord.ITextChannel.CreateWebhookAsync
- uid: Discord.ITextChannel.CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)
  commentId: M:Discord.ITextChannel.CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)
  parent: Discord.ITextChannel
  isExternal: true
  name: CreateWebhookAsync(String, Stream, RequestOptions)
  nameWithType: ITextChannel.CreateWebhookAsync(String, Stream, RequestOptions)
  fullName: Discord.ITextChannel.CreateWebhookAsync(System.String, System.IO.Stream, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.ITextChannel.CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)
    name: CreateWebhookAsync
    nameWithType: ITextChannel.CreateWebhookAsync
    fullName: Discord.ITextChannel.CreateWebhookAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.ITextChannel.CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)
    name: CreateWebhookAsync
    nameWithType: ITextChannel.CreateWebhookAsync
    fullName: Discord.ITextChannel.CreateWebhookAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.IWebhook}
  commentId: T:System.Threading.Tasks.Task{Discord.IWebhook}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IWebhook>
  nameWithType: Task<IWebhook>
  fullName: System.Threading.Tasks.Task<Discord.IWebhook>
  nameWithType.vb: Task(Of IWebhook)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IWebhook)
  name.vb: Task(Of IWebhook)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IWebhook
    name: IWebhook
    nameWithType: IWebhook
    fullName: Discord.IWebhook
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IWebhook
    name: IWebhook
    nameWithType: IWebhook
    fullName: Discord.IWebhook
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.Discord#ITextChannel#GetWebhookAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.Discord#ITextChannel#GetWebhookAsync
  name: ITextChannel.GetWebhookAsync
  nameWithType: SocketTextChannel.ITextChannel.GetWebhookAsync
  fullName: Discord.WebSocket.SocketTextChannel.Discord.ITextChannel.GetWebhookAsync
  nameWithType.vb: SocketTextChannel.Discord.ITextChannel.GetWebhookAsync
  name.vb: Discord.ITextChannel.GetWebhookAsync
- uid: Discord.ITextChannel.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.ITextChannel.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.ITextChannel
  isExternal: true
  name: GetWebhookAsync(UInt64, RequestOptions)
  nameWithType: ITextChannel.GetWebhookAsync(UInt64, RequestOptions)
  fullName: Discord.ITextChannel.GetWebhookAsync(System.UInt64, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.ITextChannel.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
    name: GetWebhookAsync
    nameWithType: ITextChannel.GetWebhookAsync
    fullName: Discord.ITextChannel.GetWebhookAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.ITextChannel.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
    name: GetWebhookAsync
    nameWithType: ITextChannel.GetWebhookAsync
    fullName: Discord.ITextChannel.GetWebhookAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.Discord#ITextChannel#GetWebhooksAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.Discord#ITextChannel#GetWebhooksAsync
  name: ITextChannel.GetWebhooksAsync
  nameWithType: SocketTextChannel.ITextChannel.GetWebhooksAsync
  fullName: Discord.WebSocket.SocketTextChannel.Discord.ITextChannel.GetWebhooksAsync
  nameWithType.vb: SocketTextChannel.Discord.ITextChannel.GetWebhooksAsync
  name.vb: Discord.ITextChannel.GetWebhooksAsync
- uid: Discord.ITextChannel.GetWebhooksAsync(Discord.RequestOptions)
  commentId: M:Discord.ITextChannel.GetWebhooksAsync(Discord.RequestOptions)
  parent: Discord.ITextChannel
  name: GetWebhooksAsync(RequestOptions)
  nameWithType: ITextChannel.GetWebhooksAsync(RequestOptions)
  fullName: Discord.ITextChannel.GetWebhooksAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.ITextChannel.GetWebhooksAsync(Discord.RequestOptions)
    name: GetWebhooksAsync
    nameWithType: ITextChannel.GetWebhooksAsync
    fullName: Discord.ITextChannel.GetWebhooksAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.ITextChannel.GetWebhooksAsync(Discord.RequestOptions)
    name: GetWebhooksAsync
    nameWithType: ITextChannel.GetWebhooksAsync
    fullName: Discord.ITextChannel.GetWebhooksAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IWebhook}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IWebhook}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<IWebhook>>
  nameWithType: Task<IReadOnlyCollection<IWebhook>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.IWebhook>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IWebhook))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IWebhook))
  name.vb: Task(Of IReadOnlyCollection(Of IWebhook))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IWebhook
    name: IWebhook
    nameWithType: IWebhook
    fullName: Discord.IWebhook
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IWebhook
    name: IWebhook
    nameWithType: IWebhook
    fullName: Discord.IWebhook
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.Discord#IGuildChannel#GetUserAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.Discord#IGuildChannel#GetUserAsync
  name: IGuildChannel.GetUserAsync
  nameWithType: SocketTextChannel.IGuildChannel.GetUserAsync
  fullName: Discord.WebSocket.SocketTextChannel.Discord.IGuildChannel.GetUserAsync
  nameWithType.vb: SocketTextChannel.Discord.IGuildChannel.GetUserAsync
  name.vb: Discord.IGuildChannel.GetUserAsync
- uid: Discord.IGuildChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuildChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuildChannel
  isExternal: true
  name: GetUserAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: IGuildChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.IGuildChannel.GetUserAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuildChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetUserAsync
    nameWithType: IGuildChannel.GetUserAsync
    fullName: Discord.IGuildChannel.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuildChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetUserAsync
    nameWithType: IGuildChannel.GetUserAsync
    fullName: Discord.IGuildChannel.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.CacheMode
  commentId: T:Discord.CacheMode
  parent: Discord
  name: CacheMode
  nameWithType: CacheMode
  fullName: Discord.CacheMode
- uid: System.Threading.Tasks.Task{Discord.IGuildUser}
  commentId: T:System.Threading.Tasks.Task{Discord.IGuildUser}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IGuildUser>
  nameWithType: Task<IGuildUser>
  fullName: System.Threading.Tasks.Task<Discord.IGuildUser>
  nameWithType.vb: Task(Of IGuildUser)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IGuildUser)
  name.vb: Task(Of IGuildUser)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IGuildUser
    name: IGuildUser
    nameWithType: IGuildUser
    fullName: Discord.IGuildUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IGuildUser
    name: IGuildUser
    nameWithType: IGuildUser
    fullName: Discord.IGuildUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.Discord#IGuildChannel#GetUsersAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.Discord#IGuildChannel#GetUsersAsync
  name: IGuildChannel.GetUsersAsync
  nameWithType: SocketTextChannel.IGuildChannel.GetUsersAsync
  fullName: Discord.WebSocket.SocketTextChannel.Discord.IGuildChannel.GetUsersAsync
  nameWithType.vb: SocketTextChannel.Discord.IGuildChannel.GetUsersAsync
  name.vb: Discord.IGuildChannel.GetUsersAsync
- uid: Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuildChannel
  name: GetUsersAsync(CacheMode, RequestOptions)
  nameWithType: IGuildChannel.GetUsersAsync(CacheMode, RequestOptions)
  fullName: Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetUsersAsync
    nameWithType: IGuildChannel.GetUsersAsync
    fullName: Discord.IGuildChannel.GetUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetUsersAsync
    nameWithType: IGuildChannel.GetUsersAsync
    fullName: Discord.IGuildChannel.GetUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IGuildUser}}
  commentId: T:System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IGuildUser}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IAsyncEnumerable`1
  name: IAsyncEnumerable<IReadOnlyCollection<IGuildUser>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<IGuildUser>>
  fullName: System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyCollection<Discord.IGuildUser>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IGuildUser))
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IGuildUser))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IGuildUser))
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IGuildUser
    name: IGuildUser
    nameWithType: IGuildUser
    fullName: Discord.IGuildUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IGuildUser
    name: IGuildUser
    nameWithType: IGuildUser
    fullName: Discord.IGuildUser
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetMessageAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetMessageAsync
  name: IMessageChannel.GetMessageAsync
  nameWithType: SocketTextChannel.IMessageChannel.GetMessageAsync
  fullName: Discord.WebSocket.SocketTextChannel.Discord.IMessageChannel.GetMessageAsync
  nameWithType.vb: SocketTextChannel.Discord.IMessageChannel.GetMessageAsync
  name.vb: Discord.IMessageChannel.GetMessageAsync
- uid: Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetMessagesAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetMessagesAsync
  name: IMessageChannel.GetMessagesAsync
  nameWithType: SocketTextChannel.IMessageChannel.GetMessagesAsync
  fullName: Discord.WebSocket.SocketTextChannel.Discord.IMessageChannel.GetMessagesAsync
  nameWithType.vb: SocketTextChannel.Discord.IMessageChannel.GetMessagesAsync
  name.vb: Discord.IMessageChannel.GetMessagesAsync
- uid: Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetPinnedMessagesAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetPinnedMessagesAsync
  name: IMessageChannel.GetPinnedMessagesAsync
  nameWithType: SocketTextChannel.IMessageChannel.GetPinnedMessagesAsync
  fullName: Discord.WebSocket.SocketTextChannel.Discord.IMessageChannel.GetPinnedMessagesAsync
  nameWithType.vb: SocketTextChannel.Discord.IMessageChannel.GetPinnedMessagesAsync
  name.vb: Discord.IMessageChannel.GetPinnedMessagesAsync
- uid: Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  parent: Discord.IMessageChannel
  name: GetPinnedMessagesAsync(RequestOptions)
  nameWithType: IMessageChannel.GetPinnedMessagesAsync(RequestOptions)
  fullName: Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
    name: GetPinnedMessagesAsync
    nameWithType: IMessageChannel.GetPinnedMessagesAsync
    fullName: Discord.IMessageChannel.GetPinnedMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
    name: GetPinnedMessagesAsync
    nameWithType: IMessageChannel.GetPinnedMessagesAsync
    fullName: Discord.IMessageChannel.GetPinnedMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IMessage}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IMessage}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<IMessage>>
  nameWithType: Task<IReadOnlyCollection<IMessage>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.IMessage>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IMessage))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IMessage))
  name.vb: Task(Of IReadOnlyCollection(Of IMessage))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#SendFileAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#SendFileAsync
  name: IMessageChannel.SendFileAsync
  nameWithType: SocketTextChannel.IMessageChannel.SendFileAsync
  fullName: Discord.WebSocket.SocketTextChannel.Discord.IMessageChannel.SendFileAsync
  nameWithType.vb: SocketTextChannel.Discord.IMessageChannel.SendFileAsync
  name.vb: Discord.IMessageChannel.SendFileAsync
- uid: Discord.IMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.IMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.IMessageChannel
  isExternal: true
  name: SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: IMessageChannel.SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.IMessageChannel.SendFileAsync(System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  spec.csharp:
  - uid: Discord.IMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: IMessageChannel.SendFileAsync
    fullName: Discord.IMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: IMessageChannel.SendFileAsync
    fullName: Discord.IMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.IUserMessage}
  commentId: T:System.Threading.Tasks.Task{Discord.IUserMessage}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IUserMessage>
  nameWithType: Task<IUserMessage>
  fullName: System.Threading.Tasks.Task<Discord.IUserMessage>
  nameWithType.vb: Task(Of IUserMessage)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IUserMessage)
  name.vb: Task(Of IUserMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.IMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.IMessageChannel
  isExternal: true
  name: SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: IMessageChannel.SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.IMessageChannel.SendFileAsync(System.IO.Stream, System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  spec.csharp:
  - uid: Discord.IMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: IMessageChannel.SendFileAsync
    fullName: Discord.IMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: IMessageChannel.SendFileAsync
    fullName: Discord.IMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#SendMessageAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#SendMessageAsync
  name: IMessageChannel.SendMessageAsync
  nameWithType: SocketTextChannel.IMessageChannel.SendMessageAsync
  fullName: Discord.WebSocket.SocketTextChannel.Discord.IMessageChannel.SendMessageAsync
  nameWithType.vb: SocketTextChannel.Discord.IMessageChannel.SendMessageAsync
  name.vb: Discord.IMessageChannel.SendMessageAsync
- uid: Discord.IMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  isExternal: true
  name: SendMessageAsync(String, Boolean, Embed, RequestOptions)
  nameWithType: IMessageChannel.SendMessageAsync(String, Boolean, Embed, RequestOptions)
  fullName: Discord.IMessageChannel.SendMessageAsync(System.String, System.Boolean, Discord.Embed, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
    name: SendMessageAsync
    nameWithType: IMessageChannel.SendMessageAsync
    fullName: Discord.IMessageChannel.SendMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
    name: SendMessageAsync
    nameWithType: IMessageChannel.SendMessageAsync
    fullName: Discord.IMessageChannel.SendMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.Discord#INestedChannel#GetCategoryAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.Discord#INestedChannel#GetCategoryAsync
  name: INestedChannel.GetCategoryAsync
  nameWithType: SocketTextChannel.INestedChannel.GetCategoryAsync
  fullName: Discord.WebSocket.SocketTextChannel.Discord.INestedChannel.GetCategoryAsync
  nameWithType.vb: SocketTextChannel.Discord.INestedChannel.GetCategoryAsync
  name.vb: Discord.INestedChannel.GetCategoryAsync
- uid: Discord.INestedChannel.GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.INestedChannel.GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.INestedChannel
  name: GetCategoryAsync(CacheMode, RequestOptions)
  nameWithType: INestedChannel.GetCategoryAsync(CacheMode, RequestOptions)
  fullName: Discord.INestedChannel.GetCategoryAsync(Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.INestedChannel.GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetCategoryAsync
    nameWithType: INestedChannel.GetCategoryAsync
    fullName: Discord.INestedChannel.GetCategoryAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.INestedChannel.GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetCategoryAsync
    nameWithType: INestedChannel.GetCategoryAsync
    fullName: Discord.INestedChannel.GetCategoryAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.ICategoryChannel}
  commentId: T:System.Threading.Tasks.Task{Discord.ICategoryChannel}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ICategoryChannel>
  nameWithType: Task<ICategoryChannel>
  fullName: System.Threading.Tasks.Task<Discord.ICategoryChannel>
  nameWithType.vb: Task(Of ICategoryChannel)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.ICategoryChannel)
  name.vb: Task(Of ICategoryChannel)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ICategoryChannel
    name: ICategoryChannel
    nameWithType: ICategoryChannel
    fullName: Discord.ICategoryChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ICategoryChannel
    name: ICategoryChannel
    nameWithType: ICategoryChannel
    fullName: Discord.ICategoryChannel
  - name: )
    nameWithType: )
    fullName: )
