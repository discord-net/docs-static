### YamlMime:ManagedReference
items:
- uid: Discord.WebSocket.SocketTextChannel
  commentId: T:Discord.WebSocket.SocketTextChannel
  id: SocketTextChannel
  parent: Discord.WebSocket
  children:
  - Discord.WebSocket.SocketTextChannel.CachedMessages
  - Discord.WebSocket.SocketTextChannel.Category
  - Discord.WebSocket.SocketTextChannel.CategoryId
  - Discord.WebSocket.SocketTextChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.CreateWebhookAsync(System.String,Stream,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync(IEnumerable{Discord.IMessage},Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync(IEnumerable{System.UInt64},Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.EnterTypingState(Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.GetCachedMessage(System.UInt64)
  - Discord.WebSocket.SocketTextChannel.GetCachedMessages(Discord.IMessage,Discord.Direction,System.Int32)
  - Discord.WebSocket.SocketTextChannel.GetCachedMessages(System.Int32)
  - Discord.WebSocket.SocketTextChannel.GetCachedMessages(System.UInt64,Discord.Direction,System.Int32)
  - Discord.WebSocket.SocketTextChannel.GetInvitesAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.GetUser(System.UInt64)
  - Discord.WebSocket.SocketTextChannel.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.GetWebhooksAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.IsNsfw
  - Discord.WebSocket.SocketTextChannel.Mention
  - Discord.WebSocket.SocketTextChannel.ModifyAsync(Action{Discord.TextChannelProperties},Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.SendFileAsync(Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  - Discord.WebSocket.SocketTextChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  - Discord.WebSocket.SocketTextChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.SlowModeInterval
  - Discord.WebSocket.SocketTextChannel.SyncPermissionsAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.Topic
  - Discord.WebSocket.SocketTextChannel.TriggerTypingAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketTextChannel.Users
  langs:
  - csharp
  - vb
  name: SocketTextChannel
  nameWithType: SocketTextChannel
  fullName: Discord.WebSocket.SocketTextChannel
  type: Class
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: SocketTextChannel
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 15
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nRepresents a WebSocket-based channel in a guild that can send and receive messages.\n"
  example: []
  syntax:
    content: 'public class SocketTextChannel : SocketGuildChannel, IEntity<ulong>, ITextChannel, IMentionable, INestedChannel, IGuildChannel, IDeletable, ISocketMessageChannel, IMessageChannel, IChannel, ISnowflakeEntity, IEntity<ulong>'
    content.vb: >-
      Public Class SocketTextChannel
          Inherits SocketGuildChannel
          Implements IEntity(Of ULong), ITextChannel, IMentionable, INestedChannel, IGuildChannel, IDeletable, ISocketMessageChannel, IMessageChannel, IChannel, ISnowflakeEntity, IEntity(Of ULong)
  inheritance:
  - System.Object
  - Discord.WebSocket.SocketEntity{System.UInt64}
  - Discord.WebSocket.SocketChannel
  - Discord.WebSocket.SocketGuildChannel
  derivedClasses:
  - Discord.WebSocket.SocketNewsChannel
  implements:
  - Discord.IEntity{System.UInt64}
  - Discord.ITextChannel
  - Discord.IMentionable
  - Discord.INestedChannel
  - Discord.IGuildChannel
  - Discord.IDeletable
  - Discord.WebSocket.ISocketMessageChannel
  - Discord.IMessageChannel
  - Discord.IChannel
  - Discord.ISnowflakeEntity
  - Discord.IEntity{System.UInt64}
  inheritedMembers:
  - Discord.WebSocket.SocketGuildChannel.Guild
  - Discord.WebSocket.SocketGuildChannel.Name
  - Discord.WebSocket.SocketGuildChannel.Position
  - Discord.WebSocket.SocketGuildChannel.PermissionOverwrites
  - Discord.WebSocket.SocketGuildChannel.ModifyAsync(Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  - Discord.WebSocket.SocketGuildChannel.DeleteAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite(Discord.IUser)
  - Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite(Discord.IRole)
  - Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuildChannel.ToString
  - Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#Guild
  - Discord.WebSocket.SocketChannel.CreatedAt
  - Discord.WebSocket.SocketEntity{System.UInt64}.Id
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.WebSocket.SocketTextChannel.Topic
  commentId: P:Discord.WebSocket.SocketTextChannel.Topic
  id: Topic
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: Topic
  nameWithType: SocketTextChannel.Topic
  fullName: Discord.WebSocket.SocketTextChannel.Topic
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Topic
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 21
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public string Topic { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Topic As String
  overload: Discord.WebSocket.SocketTextChannel.Topic*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketTextChannel.SlowModeInterval
  commentId: P:Discord.WebSocket.SocketTextChannel.SlowModeInterval
  id: SlowModeInterval
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: SlowModeInterval
  nameWithType: SocketTextChannel.SlowModeInterval
  fullName: Discord.WebSocket.SocketTextChannel.SlowModeInterval
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: SlowModeInterval
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 23
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public virtual int SlowModeInterval { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Overridable ReadOnly Property SlowModeInterval As Integer
  overload: Discord.WebSocket.SocketTextChannel.SlowModeInterval*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.WebSocket.SocketTextChannel.CategoryId
  commentId: P:Discord.WebSocket.SocketTextChannel.CategoryId
  id: CategoryId
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: CategoryId
  nameWithType: SocketTextChannel.CategoryId
  fullName: Discord.WebSocket.SocketTextChannel.CategoryId
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: CategoryId
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 25
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public ulong? CategoryId { get; }
    parameters: []
    return:
      type: System.Nullable{System.UInt64}
    content.vb: Public ReadOnly Property CategoryId As ULong?
  overload: Discord.WebSocket.SocketTextChannel.CategoryId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketTextChannel.Category
  commentId: P:Discord.WebSocket.SocketTextChannel.Category
  id: Category
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: Category
  nameWithType: SocketTextChannel.Category
  fullName: Discord.WebSocket.SocketTextChannel.Category
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Category
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 32
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the parent (category) of this channel in the guild&apos;s channel list.\n"
  example: []
  syntax:
    content: public ICategoryChannel Category { get; }
    parameters: []
    return:
      type: Discord.ICategoryChannel
      description: "\nAn <xref href=\"Discord.ICategoryChannel\" data-throw-if-not-resolved=\"false\"></xref> representing the parent of this channel; <code>null</code> if none is set.\n"
    content.vb: Public ReadOnly Property Category As ICategoryChannel
  overload: Discord.WebSocket.SocketTextChannel.Category*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketTextChannel.SyncPermissionsAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.SyncPermissionsAsync(Discord.RequestOptions)
  id: SyncPermissionsAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: SyncPermissionsAsync(RequestOptions)
  nameWithType: SocketTextChannel.SyncPermissionsAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.SyncPermissionsAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: SyncPermissionsAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 35
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public virtual Task SyncPermissionsAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Overridable Function SyncPermissionsAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketTextChannel.SyncPermissionsAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Discord.WebSocket.SocketTextChannel.IsNsfw
  commentId: P:Discord.WebSocket.SocketTextChannel.IsNsfw
  id: IsNsfw
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: IsNsfw
  nameWithType: SocketTextChannel.IsNsfw
  fullName: Discord.WebSocket.SocketTextChannel.IsNsfw
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: IsNsfw
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 40
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public bool IsNsfw { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsNsfw As Boolean
  overload: Discord.WebSocket.SocketTextChannel.IsNsfw*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketTextChannel.Mention
  commentId: P:Discord.WebSocket.SocketTextChannel.Mention
  id: Mention
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: Mention
  nameWithType: SocketTextChannel.Mention
  fullName: Discord.WebSocket.SocketTextChannel.Mention
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Mention
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 43
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public string Mention { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Mention As String
  overload: Discord.WebSocket.SocketTextChannel.Mention*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketTextChannel.CachedMessages
  commentId: P:Discord.WebSocket.SocketTextChannel.CachedMessages
  id: CachedMessages
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: CachedMessages
  nameWithType: SocketTextChannel.CachedMessages
  fullName: Discord.WebSocket.SocketTextChannel.CachedMessages
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: CachedMessages
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 45
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets all messages in this channel&apos;s cache.\n"
  example: []
  syntax:
    content: public IReadOnlyCollection<SocketMessage> CachedMessages { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.WebSocket.SocketMessage}
      description: "\nA read-only collection of WebSocket-based messages.\n"
    content.vb: Public ReadOnly Property CachedMessages As IReadOnlyCollection(Of SocketMessage)
  overload: Discord.WebSocket.SocketTextChannel.CachedMessages*
  implements:
  - Discord.WebSocket.ISocketMessageChannel.CachedMessages
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketTextChannel.Users
  commentId: P:Discord.WebSocket.SocketTextChannel.Users
  id: Users
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: Users
  nameWithType: SocketTextChannel.Users
  fullName: Discord.WebSocket.SocketTextChannel.Users
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Users
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 47
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of users that are able to view the channel.\n"
  example: []
  syntax:
    content: public override IReadOnlyCollection<SocketGuildUser> Users { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.WebSocket.SocketGuildUser}
      description: "\nA read-only collection of users that can access the channel (i.e. the users seen in the user list).\n"
    content.vb: Public Overrides ReadOnly Property Users As IReadOnlyCollection(Of SocketGuildUser)
  overridden: Discord.WebSocket.SocketGuildChannel.Users
  overload: Discord.WebSocket.SocketTextChannel.Users*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.WebSocket.SocketTextChannel.ModifyAsync(Action{Discord.TextChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.ModifyAsync(Action{Discord.TextChannelProperties},Discord.RequestOptions)
  id: ModifyAsync(Action{Discord.TextChannelProperties},Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: ModifyAsync(Action<TextChannelProperties>, RequestOptions)
  nameWithType: SocketTextChannel.ModifyAsync(Action<TextChannelProperties>, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.ModifyAsync(Action<Discord.TextChannelProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ModifyAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 74
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public Task ModifyAsync(Action<TextChannelProperties> func, RequestOptions options = null)
    parameters:
    - id: func
      type: Action{Discord.TextChannelProperties}
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function ModifyAsync(func As Action(Of TextChannelProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketTextChannel.ModifyAsync*
  nameWithType.vb: SocketTextChannel.ModifyAsync(Action(Of TextChannelProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketTextChannel.ModifyAsync(Action(Of Discord.TextChannelProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of TextChannelProperties), RequestOptions)
- uid: Discord.WebSocket.SocketTextChannel.GetCachedMessage(System.UInt64)
  commentId: M:Discord.WebSocket.SocketTextChannel.GetCachedMessage(System.UInt64)
  id: GetCachedMessage(System.UInt64)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: GetCachedMessage(UInt64)
  nameWithType: SocketTextChannel.GetCachedMessage(UInt64)
  fullName: Discord.WebSocket.SocketTextChannel.GetCachedMessage(System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetCachedMessage
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 79
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a cached message from this channel.\n"
  remarks: "\n<div class=\"WARNING\"><h5>warning</h5><p>\n    This method requires the use of cache, which is not enabled by default; if caching is not enabled,\n    this method will always return <code>null</code>. Please refer to\n<xref href=\"Discord.WebSocket.DiscordSocketConfig.MessageCacheSize\" data-throw-if-not-resolved=\"false\"></xref> for more details.\n</p></div>\n<p>\n    This method retrieves the message from the local WebSocket cache and does not send any additional\n    request to Discord. This message may be a message that has been deleted.\n</p>\n"
  example: []
  syntax:
    content: public SocketMessage GetCachedMessage(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the message.
    return:
      type: Discord.WebSocket.SocketMessage
      description: "\nA WebSocket-based message object; <code>null</code> if it does not exist in the cache or if caching is not\nenabled.\n"
    content.vb: Public Function GetCachedMessage(id As ULong) As SocketMessage
  overload: Discord.WebSocket.SocketTextChannel.GetCachedMessage*
  implements:
  - Discord.WebSocket.ISocketMessageChannel.GetCachedMessage(System.UInt64)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
  id: GetMessageAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: GetMessageAsync(UInt64, RequestOptions)
  nameWithType: SocketTextChannel.GetMessageAsync(UInt64, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.GetMessageAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetMessageAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 94
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a message from this message channel.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IMessageChannel.GetMessageAsync(System.UInt64%2cDiscord.CacheMode%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public Task<IMessage> GetMessageAsync(ulong id, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the message.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.IMessage}
      description: "\nA task that represents an asynchronous get operation for retrieving the message. The task result contains\nthe retrieved message; <code>null</code> if no message is found with the specified identifier.\n"
    content.vb: Public Function GetMessageAsync(id As ULong, options As RequestOptions = Nothing) As Task(Of IMessage)
  overload: Discord.WebSocket.SocketTextChannel.GetMessageAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
  id: GetMessagesAsync(System.Int32,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: GetMessagesAsync(Int32, RequestOptions)
  nameWithType: SocketTextChannel.GetMessagesAsync(Int32, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.GetMessagesAsync(System.Int32, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetMessagesAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 114
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the last N messages from this message channel.\n"
  remarks: "\nThis method follows the same behavior as described in <see cref=\"!:IMessageChannel.GetMessagesAsync(int, CacheMode, RequestOptions)\"></see>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(int limit = null, RequestOptions options = null)
    parameters:
    - id: limit
      type: System.Int32
      description: The numbers of message to be gotten from.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: IAsyncEnumerable{IReadOnlyCollection{Discord.IMessage}}
      description: "\nPaged collection of messages.\n"
    content.vb: Public Function GetMessagesAsync(limit As Integer = Nothing, options As RequestOptions = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of IMessage))
  overload: Discord.WebSocket.SocketTextChannel.GetMessagesAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
  id: GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: GetMessagesAsync(UInt64, Direction, Int32, RequestOptions)
  nameWithType: SocketTextChannel.GetMessagesAsync(UInt64, Direction, Int32, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.GetMessagesAsync(System.UInt64, Discord.Direction, System.Int32, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetMessagesAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 130
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of messages in this channel.\n"
  remarks: "\nThis method follows the same behavior as described in <see cref=\"!:IMessageChannel.GetMessagesAsync(ulong, Direction, int, CacheMode, RequestOptions)\"></see>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(ulong fromMessageId, Direction dir, int limit = null, RequestOptions options = null)
    parameters:
    - id: fromMessageId
      type: System.UInt64
      description: The ID of the starting message to get the messages from.
    - id: dir
      type: Discord.Direction
      description: The direction of the messages to be gotten from.
    - id: limit
      type: System.Int32
      description: The numbers of message to be gotten from.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: IAsyncEnumerable{IReadOnlyCollection{Discord.IMessage}}
      description: "\nPaged collection of messages.\n"
    content.vb: Public Function GetMessagesAsync(fromMessageId As ULong, dir As Direction, limit As Integer = Nothing, options As RequestOptions = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of IMessage))
  overload: Discord.WebSocket.SocketTextChannel.GetMessagesAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
  id: GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: GetMessagesAsync(IMessage, Direction, Int32, RequestOptions)
  nameWithType: SocketTextChannel.GetMessagesAsync(IMessage, Direction, Int32, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.GetMessagesAsync(Discord.IMessage, Discord.Direction, System.Int32, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetMessagesAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 146
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of messages in this channel.\n"
  remarks: "\nThis method follows the same behavior as described in <see cref=\"!:IMessageChannel.GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions)\"></see>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(IMessage fromMessage, Direction dir, int limit = null, RequestOptions options = null)
    parameters:
    - id: fromMessage
      type: Discord.IMessage
      description: The starting message to get the messages from.
    - id: dir
      type: Discord.Direction
      description: The direction of the messages to be gotten from.
    - id: limit
      type: System.Int32
      description: The numbers of message to be gotten from.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: IAsyncEnumerable{IReadOnlyCollection{Discord.IMessage}}
      description: "\nPaged collection of messages.\n"
    content.vb: Public Function GetMessagesAsync(fromMessage As IMessage, dir As Direction, limit As Integer = Nothing, options As RequestOptions = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of IMessage))
  overload: Discord.WebSocket.SocketTextChannel.GetMessagesAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.GetCachedMessages(System.Int32)
  commentId: M:Discord.WebSocket.SocketTextChannel.GetCachedMessages(System.Int32)
  id: GetCachedMessages(System.Int32)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: GetCachedMessages(Int32)
  nameWithType: SocketTextChannel.GetCachedMessages(Int32)
  fullName: Discord.WebSocket.SocketTextChannel.GetCachedMessages(System.Int32)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetCachedMessages
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 149
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the last N cached messages from this message channel.\n"
  remarks: "\n<div class=\"WARNING\"><h5>warning</h5><p>\n    This method requires the use of cache, which is not enabled by default; if caching is not enabled,\n    this method will always return an empty collection. Please refer to\n<xref href=\"Discord.WebSocket.DiscordSocketConfig.MessageCacheSize\" data-throw-if-not-resolved=\"false\"></xref> for more details.\n</p></div>\n<p>\n    This method retrieves the message(s) from the local WebSocket cache and does not send any additional\n    request to Discord. This read-only collection may include messages that have been deleted. The\n    maximum number of messages that can be retrieved from this method depends on the\n<xref href=\"Discord.WebSocket.DiscordSocketConfig.MessageCacheSize\" data-throw-if-not-resolved=\"false\"></xref> set.\n</p>\n"
  example: []
  syntax:
    content: public IReadOnlyCollection<SocketMessage> GetCachedMessages(int limit = null)
    parameters:
    - id: limit
      type: System.Int32
      description: The number of messages to get.
    return:
      type: IReadOnlyCollection{Discord.WebSocket.SocketMessage}
      description: "\nA read-only collection of WebSocket-based messages.\n"
    content.vb: Public Function GetCachedMessages(limit As Integer = Nothing) As IReadOnlyCollection(Of SocketMessage)
  overload: Discord.WebSocket.SocketTextChannel.GetCachedMessages*
  implements:
  - Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.GetCachedMessages(System.UInt64,Discord.Direction,System.Int32)
  commentId: M:Discord.WebSocket.SocketTextChannel.GetCachedMessages(System.UInt64,Discord.Direction,System.Int32)
  id: GetCachedMessages(System.UInt64,Discord.Direction,System.Int32)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: GetCachedMessages(UInt64, Direction, Int32)
  nameWithType: SocketTextChannel.GetCachedMessages(UInt64, Direction, Int32)
  fullName: Discord.WebSocket.SocketTextChannel.GetCachedMessages(System.UInt64, Discord.Direction, System.Int32)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetCachedMessages
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 152
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the last N cached messages starting from a certain message in this message channel.\n"
  remarks: "\n<div class=\"WARNING\"><h5>warning</h5><p>\n    This method requires the use of cache, which is not enabled by default; if caching is not enabled,\n    this method will always return an empty collection. Please refer to\n<xref href=\"Discord.WebSocket.DiscordSocketConfig.MessageCacheSize\" data-throw-if-not-resolved=\"false\"></xref> for more details.\n</p></div>\n<p>\n    This method retrieves the message(s) from the local WebSocket cache and does not send any additional\n    request to Discord. This read-only collection may include messages that have been deleted. The\n    maximum number of messages that can be retrieved from this method depends on the\n<xref href=\"Discord.WebSocket.DiscordSocketConfig.MessageCacheSize\" data-throw-if-not-resolved=\"false\"></xref> set.\n</p>\n"
  example: []
  syntax:
    content: public IReadOnlyCollection<SocketMessage> GetCachedMessages(ulong fromMessageId, Direction dir, int limit = null)
    parameters:
    - id: fromMessageId
      type: System.UInt64
      description: The message ID to start the fetching from.
    - id: dir
      type: Discord.Direction
      description: The direction of which the message should be gotten from.
    - id: limit
      type: System.Int32
      description: The number of messages to get.
    return:
      type: IReadOnlyCollection{Discord.WebSocket.SocketMessage}
      description: "\nA read-only collection of WebSocket-based messages.\n"
    content.vb: Public Function GetCachedMessages(fromMessageId As ULong, dir As Direction, limit As Integer = Nothing) As IReadOnlyCollection(Of SocketMessage)
  overload: Discord.WebSocket.SocketTextChannel.GetCachedMessages*
  implements:
  - Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.UInt64,Discord.Direction,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.GetCachedMessages(Discord.IMessage,Discord.Direction,System.Int32)
  commentId: M:Discord.WebSocket.SocketTextChannel.GetCachedMessages(Discord.IMessage,Discord.Direction,System.Int32)
  id: GetCachedMessages(Discord.IMessage,Discord.Direction,System.Int32)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: GetCachedMessages(IMessage, Direction, Int32)
  nameWithType: SocketTextChannel.GetCachedMessages(IMessage, Direction, Int32)
  fullName: Discord.WebSocket.SocketTextChannel.GetCachedMessages(Discord.IMessage, Discord.Direction, System.Int32)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetCachedMessages
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 155
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the last N cached messages starting from a certain message in this message channel.\n"
  remarks: "\n<div class=\"WARNING\"><h5>warning</h5><p>\n    This method requires the use of cache, which is not enabled by default; if caching is not enabled,\n    this method will always return an empty collection. Please refer to\n<xref href=\"Discord.WebSocket.DiscordSocketConfig.MessageCacheSize\" data-throw-if-not-resolved=\"false\"></xref> for more details.\n</p></div>\n<p>\n    This method retrieves the message(s) from the local WebSocket cache and does not send any additional\n    request to Discord. This read-only collection may include messages that have been deleted. The\n    maximum number of messages that can be retrieved from this method depends on the\n<xref href=\"Discord.WebSocket.DiscordSocketConfig.MessageCacheSize\" data-throw-if-not-resolved=\"false\"></xref> set.\n</p>\n"
  example: []
  syntax:
    content: public IReadOnlyCollection<SocketMessage> GetCachedMessages(IMessage fromMessage, Direction dir, int limit = null)
    parameters:
    - id: fromMessage
      type: Discord.IMessage
      description: The message to start the fetching from.
    - id: dir
      type: Discord.Direction
      description: The direction of which the message should be gotten from.
    - id: limit
      type: System.Int32
      description: The number of messages to get.
    return:
      type: IReadOnlyCollection{Discord.WebSocket.SocketMessage}
      description: "\nA read-only collection of WebSocket-based messages.\n"
    content.vb: Public Function GetCachedMessages(fromMessage As IMessage, dir As Direction, limit As Integer = Nothing) As IReadOnlyCollection(Of SocketMessage)
  overload: Discord.WebSocket.SocketTextChannel.GetCachedMessages*
  implements:
  - Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(Discord.IMessage,Discord.Direction,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  id: GetPinnedMessagesAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: GetPinnedMessagesAsync(RequestOptions)
  nameWithType: SocketTextChannel.GetPinnedMessagesAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetPinnedMessagesAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 158
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a read-only collection of pinned messages in this channel.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<RestMessage>> GetPinnedMessagesAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{IReadOnlyCollection{Discord.Rest.RestMessage}}
      description: "\nA task that represents the asynchronous get operation for retrieving pinned messages in this channel.\nThe task result contains a read-only collection of messages found in the pinned messages.\n"
    content.vb: Public Function GetPinnedMessagesAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestMessage))
  overload: Discord.WebSocket.SocketTextChannel.GetPinnedMessagesAsync*
  implements:
  - Discord.WebSocket.ISocketMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  id: SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: SendMessageAsync(String, Boolean, Embed, RequestOptions)
  nameWithType: SocketTextChannel.SendMessageAsync(String, Boolean, Embed, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.SendMessageAsync(System.String, System.Boolean, Discord.Embed, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: SendMessageAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 163
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nSends a message to this message channel.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IMessageChannel.SendMessageAsync(System.String%2cSystem.Boolean%2cDiscord.Embed%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public Task<RestUserMessage> SendMessageAsync(string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null)
    parameters:
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Determines whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Public Function SendMessageAsync(text As String = Nothing, isTTS As Boolean = False, embed As Embed = Nothing, options As RequestOptions = Nothing) As Task(Of RestUserMessage)
  overload: Discord.WebSocket.SocketTextChannel.SendMessageAsync*
  implements:
  - Discord.WebSocket.ISocketMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.WebSocket.SocketTextChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  id: SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: SocketTextChannel.SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.WebSocket.SocketTextChannel.SendFileAsync(System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: SendFileAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 167
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nSends a file to this message channel with an optional caption.\n"
  remarks: "\nThis method follows the same behavior as described in <see cref=\"!:IMessageChannel.SendFileAsync(string, string, bool, Embed, RequestOptions, bool)\"></see>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public Task<RestUserMessage> SendFileAsync(string filePath, string text, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false)
    parameters:
    - id: filePath
      type: System.String
      description: The file path of the file.
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    - id: isSpoiler
      type: System.Boolean
      description: Whether the message attachment should be hidden as a spoiler.
    return:
      type: Task{Discord.Rest.RestUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Public Function SendFileAsync(filePath As String, text As String, isTTS As Boolean = False, embed As Embed = Nothing, options As RequestOptions = Nothing, isSpoiler As Boolean = False) As Task(Of RestUserMessage)
  overload: Discord.WebSocket.SocketTextChannel.SendFileAsync*
  implements:
  - Discord.WebSocket.ISocketMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.SendFileAsync(Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.WebSocket.SocketTextChannel.SendFileAsync(Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  id: SendFileAsync(Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: SocketTextChannel.SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.WebSocket.SocketTextChannel.SendFileAsync(Stream, System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: SendFileAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 172
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nSends a file to this message channel with an optional caption.\n"
  remarks: "\nThis method follows the same behavior as described in <see cref=\"!:IMessageChannel.SendFileAsync(Stream, string, string, bool, Embed, RequestOptions, bool)\"></see>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public Task<RestUserMessage> SendFileAsync(Stream stream, string filename, string text, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false)
    parameters:
    - id: stream
      type: Stream
      description: The <see cref="!:Stream"></see> of the file to be sent.
    - id: filename
      type: System.String
      description: The name of the attachment.
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    - id: isSpoiler
      type: System.Boolean
      description: Whether the message attachment should be hidden as a spoiler.
    return:
      type: Task{Discord.Rest.RestUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Public Function SendFileAsync(stream As Stream, filename As String, text As String, isTTS As Boolean = False, embed As Embed = Nothing, options As RequestOptions = Nothing, isSpoiler As Boolean = False) As Task(Of RestUserMessage)
  overload: Discord.WebSocket.SocketTextChannel.SendFileAsync*
  implements:
  - Discord.WebSocket.ISocketMessageChannel.SendFileAsync(Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync(IEnumerable{Discord.IMessage},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync(IEnumerable{Discord.IMessage},Discord.RequestOptions)
  id: DeleteMessagesAsync(IEnumerable{Discord.IMessage},Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: DeleteMessagesAsync(IEnumerable<IMessage>, RequestOptions)
  nameWithType: SocketTextChannel.DeleteMessagesAsync(IEnumerable<IMessage>, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync(IEnumerable<Discord.IMessage>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteMessagesAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 176
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public Task DeleteMessagesAsync(IEnumerable<IMessage> messages, RequestOptions options = null)
    parameters:
    - id: messages
      type: IEnumerable{Discord.IMessage}
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function DeleteMessagesAsync(messages As IEnumerable(Of IMessage), options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync*
  nameWithType.vb: SocketTextChannel.DeleteMessagesAsync(IEnumerable(Of IMessage), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync(IEnumerable(Of Discord.IMessage), Discord.RequestOptions)
  name.vb: DeleteMessagesAsync(IEnumerable(Of IMessage), RequestOptions)
- uid: Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync(IEnumerable{System.UInt64},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync(IEnumerable{System.UInt64},Discord.RequestOptions)
  id: DeleteMessagesAsync(IEnumerable{System.UInt64},Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: DeleteMessagesAsync(IEnumerable<UInt64>, RequestOptions)
  nameWithType: SocketTextChannel.DeleteMessagesAsync(IEnumerable<UInt64>, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync(IEnumerable<System.UInt64>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteMessagesAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 179
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public Task DeleteMessagesAsync(IEnumerable<ulong> messageIds, RequestOptions options = null)
    parameters:
    - id: messageIds
      type: IEnumerable{System.UInt64}
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function DeleteMessagesAsync(messageIds As IEnumerable(Of ULong), options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync*
  nameWithType.vb: SocketTextChannel.DeleteMessagesAsync(IEnumerable(Of UInt64), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync(IEnumerable(Of System.UInt64), Discord.RequestOptions)
  name.vb: DeleteMessagesAsync(IEnumerable(Of UInt64), RequestOptions)
- uid: Discord.WebSocket.SocketTextChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  id: DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: DeleteMessageAsync(UInt64, RequestOptions)
  nameWithType: SocketTextChannel.DeleteMessageAsync(UInt64, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.DeleteMessageAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteMessageAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 183
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public Task DeleteMessageAsync(ulong messageId, RequestOptions options = null)
    parameters:
    - id: messageId
      type: System.UInt64
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function DeleteMessageAsync(messageId As ULong, options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketTextChannel.DeleteMessageAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  id: DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: DeleteMessageAsync(IMessage, RequestOptions)
  nameWithType: SocketTextChannel.DeleteMessageAsync(IMessage, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.DeleteMessageAsync(Discord.IMessage, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteMessageAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 186
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public Task DeleteMessageAsync(IMessage message, RequestOptions options = null)
    parameters:
    - id: message
      type: Discord.IMessage
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function DeleteMessageAsync(message As IMessage, options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketTextChannel.DeleteMessageAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.TriggerTypingAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.TriggerTypingAsync(Discord.RequestOptions)
  id: TriggerTypingAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: TriggerTypingAsync(RequestOptions)
  nameWithType: SocketTextChannel.TriggerTypingAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.TriggerTypingAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: TriggerTypingAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 190
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public Task TriggerTypingAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function TriggerTypingAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketTextChannel.TriggerTypingAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.EnterTypingState(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.EnterTypingState(Discord.RequestOptions)
  id: EnterTypingState(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: EnterTypingState(RequestOptions)
  nameWithType: SocketTextChannel.EnterTypingState(RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.EnterTypingState(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: EnterTypingState
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 193
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public IDisposable EnterTypingState(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: IDisposable
    content.vb: Public Function EnterTypingState(options As RequestOptions = Nothing) As IDisposable
  overload: Discord.WebSocket.SocketTextChannel.EnterTypingState*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.GetUser(System.UInt64)
  commentId: M:Discord.WebSocket.SocketTextChannel.GetUser(System.UInt64)
  id: GetUser(System.UInt64)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: GetUser(UInt64)
  nameWithType: SocketTextChannel.GetUser(UInt64)
  fullName: Discord.WebSocket.SocketTextChannel.GetUser(System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetUser
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 203
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public override SocketGuildUser GetUser(ulong id)
    parameters:
    - id: id
      type: System.UInt64
    return:
      type: Discord.WebSocket.SocketGuildUser
    content.vb: Public Overrides Function GetUser(id As ULong) As SocketGuildUser
  overridden: Discord.WebSocket.SocketGuildChannel.GetUser(System.UInt64)
  overload: Discord.WebSocket.SocketTextChannel.GetUser*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.WebSocket.SocketTextChannel.CreateWebhookAsync(System.String,Stream,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.CreateWebhookAsync(System.String,Stream,Discord.RequestOptions)
  id: CreateWebhookAsync(System.String,Stream,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: CreateWebhookAsync(String, Stream, RequestOptions)
  nameWithType: SocketTextChannel.CreateWebhookAsync(String, Stream, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.CreateWebhookAsync(System.String, Stream, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: CreateWebhookAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 227
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nCreates a webhook in this text channel.\n"
  example: []
  syntax:
    content: public Task<RestWebhook> CreateWebhookAsync(string name, Stream avatar = null, RequestOptions options = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the webhook.
    - id: avatar
      type: Stream
      description: The avatar of the webhook.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestWebhook}
      description: "\nA task that represents the asynchronous creation operation. The task result contains the newly created\nwebhook.\n"
    content.vb: Public Function CreateWebhookAsync(name As String, avatar As Stream = Nothing, options As RequestOptions = Nothing) As Task(Of RestWebhook)
  overload: Discord.WebSocket.SocketTextChannel.CreateWebhookAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  id: GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: GetWebhookAsync(UInt64, RequestOptions)
  nameWithType: SocketTextChannel.GetWebhookAsync(UInt64, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.GetWebhookAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetWebhookAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 238
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a webhook available in this text channel.\n"
  example: []
  syntax:
    content: public Task<RestWebhook> GetWebhookAsync(ulong id, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
      description: The identifier of the webhook.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestWebhook}
      description: "\nA task that represents the asynchronous get operation. The task result contains a webhook associated\nwith the identifier; <code>null</code> if the webhook is not found.\n"
    content.vb: Public Function GetWebhookAsync(id As ULong, options As RequestOptions = Nothing) As Task(Of RestWebhook)
  overload: Discord.WebSocket.SocketTextChannel.GetWebhookAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.GetWebhooksAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.GetWebhooksAsync(Discord.RequestOptions)
  id: GetWebhooksAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: GetWebhooksAsync(RequestOptions)
  nameWithType: SocketTextChannel.GetWebhooksAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.GetWebhooksAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetWebhooksAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 248
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the webhooks available in this text channel.\n"
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<RestWebhook>> GetWebhooksAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{IReadOnlyCollection{Discord.Rest.RestWebhook}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection\nof webhooks that is available in this channel.\n"
    content.vb: Public Function GetWebhooksAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestWebhook))
  overload: Discord.WebSocket.SocketTextChannel.GetWebhooksAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketTextChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
  id: CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: CreateInviteAsync(Nullable<Int32>, Nullable<Int32>, Boolean, Boolean, RequestOptions)
  nameWithType: SocketTextChannel.CreateInviteAsync(Nullable<Int32>, Nullable<Int32>, Boolean, Boolean, RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.CreateInviteAsync(System.Nullable<System.Int32>, System.Nullable<System.Int32>, System.Boolean, System.Boolean, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: CreateInviteAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 253
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public Task<IInviteMetadata> CreateInviteAsync(int? maxAge, int? maxUses = null, bool isTemporary = false, bool isUnique = false, RequestOptions options = null)
    parameters:
    - id: maxAge
      type: System.Nullable{System.Int32}
    - id: maxUses
      type: System.Nullable{System.Int32}
    - id: isTemporary
      type: System.Boolean
    - id: isUnique
      type: System.Boolean
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task{Discord.IInviteMetadata}
    content.vb: Public Function CreateInviteAsync(maxAge As Integer?, maxUses As Integer? = Nothing, isTemporary As Boolean = False, isUnique As Boolean = False, options As RequestOptions = Nothing) As Task(Of IInviteMetadata)
  overload: Discord.WebSocket.SocketTextChannel.CreateInviteAsync*
  nameWithType.vb: SocketTextChannel.CreateInviteAsync(Nullable(Of Int32), Nullable(Of Int32), Boolean, Boolean, RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketTextChannel.CreateInviteAsync(System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), System.Boolean, System.Boolean, Discord.RequestOptions)
  name.vb: CreateInviteAsync(Nullable(Of Int32), Nullable(Of Int32), Boolean, Boolean, RequestOptions)
- uid: Discord.WebSocket.SocketTextChannel.GetInvitesAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketTextChannel.GetInvitesAsync(Discord.RequestOptions)
  id: GetInvitesAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketTextChannel
  langs:
  - csharp
  - vb
  name: GetInvitesAsync(RequestOptions)
  nameWithType: SocketTextChannel.GetInvitesAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketTextChannel.GetInvitesAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetInvitesAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/SocketTextChannel.cs
    startLine: 256
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<IInviteMetadata>> GetInvitesAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task{IReadOnlyCollection{Discord.IInviteMetadata}}
    content.vb: Public Function GetInvitesAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of IInviteMetadata))
  overload: Discord.WebSocket.SocketTextChannel.GetInvitesAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Discord.WebSocket
  commentId: N:Discord.WebSocket
  name: Discord.WebSocket
  nameWithType: Discord.WebSocket
  fullName: Discord.WebSocket
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.WebSocket.SocketEntity{System.UInt64}
  commentId: T:Discord.WebSocket.SocketEntity{System.UInt64}
  parent: Discord.WebSocket
  definition: Discord.WebSocket.SocketEntity`1
  name: SocketEntity<UInt64>
  nameWithType: SocketEntity<UInt64>
  fullName: Discord.WebSocket.SocketEntity<System.UInt64>
  nameWithType.vb: SocketEntity(Of UInt64)
  fullName.vb: Discord.WebSocket.SocketEntity(Of System.UInt64)
  name.vb: SocketEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.WebSocket.SocketEntity`1
    name: SocketEntity
    nameWithType: SocketEntity
    fullName: Discord.WebSocket.SocketEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.WebSocket.SocketEntity`1
    name: SocketEntity
    nameWithType: SocketEntity
    fullName: Discord.WebSocket.SocketEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketChannel
  commentId: T:Discord.WebSocket.SocketChannel
  parent: Discord.WebSocket
  name: SocketChannel
  nameWithType: SocketChannel
  fullName: Discord.WebSocket.SocketChannel
- uid: Discord.WebSocket.SocketGuildChannel
  commentId: T:Discord.WebSocket.SocketGuildChannel
  parent: Discord.WebSocket
  name: SocketGuildChannel
  nameWithType: SocketGuildChannel
  fullName: Discord.WebSocket.SocketGuildChannel
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.ITextChannel
  commentId: T:Discord.ITextChannel
  parent: Discord
  name: ITextChannel
  nameWithType: ITextChannel
  fullName: Discord.ITextChannel
- uid: Discord.IMentionable
  commentId: T:Discord.IMentionable
  parent: Discord
  name: IMentionable
  nameWithType: IMentionable
  fullName: Discord.IMentionable
- uid: Discord.INestedChannel
  commentId: T:Discord.INestedChannel
  parent: Discord
  name: INestedChannel
  nameWithType: INestedChannel
  fullName: Discord.INestedChannel
- uid: Discord.IGuildChannel
  commentId: T:Discord.IGuildChannel
  parent: Discord
  name: IGuildChannel
  nameWithType: IGuildChannel
  fullName: Discord.IGuildChannel
- uid: Discord.IDeletable
  commentId: T:Discord.IDeletable
  parent: Discord
  name: IDeletable
  nameWithType: IDeletable
  fullName: Discord.IDeletable
- uid: Discord.WebSocket.ISocketMessageChannel
  commentId: T:Discord.WebSocket.ISocketMessageChannel
  parent: Discord.WebSocket
  name: ISocketMessageChannel
  nameWithType: ISocketMessageChannel
  fullName: Discord.WebSocket.ISocketMessageChannel
- uid: Discord.IMessageChannel
  commentId: T:Discord.IMessageChannel
  parent: Discord
  name: IMessageChannel
  nameWithType: IMessageChannel
  fullName: Discord.IMessageChannel
- uid: Discord.IChannel
  commentId: T:Discord.IChannel
  parent: Discord
  name: IChannel
  nameWithType: IChannel
  fullName: Discord.IChannel
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.WebSocket.SocketGuildChannel.Guild
  commentId: P:Discord.WebSocket.SocketGuildChannel.Guild
  parent: Discord.WebSocket.SocketGuildChannel
  name: Guild
  nameWithType: SocketGuildChannel.Guild
  fullName: Discord.WebSocket.SocketGuildChannel.Guild
- uid: Discord.WebSocket.SocketGuildChannel.Name
  commentId: P:Discord.WebSocket.SocketGuildChannel.Name
  parent: Discord.WebSocket.SocketGuildChannel
  name: Name
  nameWithType: SocketGuildChannel.Name
  fullName: Discord.WebSocket.SocketGuildChannel.Name
- uid: Discord.WebSocket.SocketGuildChannel.Position
  commentId: P:Discord.WebSocket.SocketGuildChannel.Position
  parent: Discord.WebSocket.SocketGuildChannel
  name: Position
  nameWithType: SocketGuildChannel.Position
  fullName: Discord.WebSocket.SocketGuildChannel.Position
- uid: Discord.WebSocket.SocketGuildChannel.PermissionOverwrites
  commentId: P:Discord.WebSocket.SocketGuildChannel.PermissionOverwrites
  parent: Discord.WebSocket.SocketGuildChannel
  name: PermissionOverwrites
  nameWithType: SocketGuildChannel.PermissionOverwrites
  fullName: Discord.WebSocket.SocketGuildChannel.PermissionOverwrites
- uid: Discord.WebSocket.SocketGuildChannel.ModifyAsync(Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuildChannel.ModifyAsync(Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuildChannel
  isExternal: true
  name: ModifyAsync(Action<GuildChannelProperties>, RequestOptions)
  nameWithType: SocketGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions)
  fullName: Discord.WebSocket.SocketGuildChannel.ModifyAsync(Action<Discord.GuildChannelProperties>, Discord.RequestOptions)
  nameWithType.vb: SocketGuildChannel.ModifyAsync(Action(Of GuildChannelProperties), RequestOptions)
  fullName.vb: Discord.WebSocket.SocketGuildChannel.ModifyAsync(Action(Of Discord.GuildChannelProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of GuildChannelProperties), RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.SocketGuildChannel.ModifyAsync(Action{Discord.GuildChannelProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: SocketGuildChannel.ModifyAsync
    fullName: Discord.WebSocket.SocketGuildChannel.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildChannelProperties
    name: GuildChannelProperties
    nameWithType: GuildChannelProperties
    fullName: Discord.GuildChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketGuildChannel.ModifyAsync(Action{Discord.GuildChannelProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: SocketGuildChannel.ModifyAsync
    fullName: Discord.WebSocket.SocketGuildChannel.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildChannelProperties
    name: GuildChannelProperties
    nameWithType: GuildChannelProperties
    fullName: Discord.GuildChannelProperties
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuildChannel.DeleteAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuildChannel.DeleteAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuildChannel
  name: DeleteAsync(RequestOptions)
  nameWithType: SocketGuildChannel.DeleteAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketGuildChannel.DeleteAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.SocketGuildChannel.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: SocketGuildChannel.DeleteAsync
    fullName: Discord.WebSocket.SocketGuildChannel.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketGuildChannel.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: SocketGuildChannel.DeleteAsync
    fullName: Discord.WebSocket.SocketGuildChannel.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite(Discord.IUser)
  commentId: M:Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite(Discord.IUser)
  parent: Discord.WebSocket.SocketGuildChannel
  name: GetPermissionOverwrite(IUser)
  nameWithType: SocketGuildChannel.GetPermissionOverwrite(IUser)
  fullName: Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite(Discord.IUser)
  spec.csharp:
  - uid: Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite(Discord.IUser)
    name: GetPermissionOverwrite
    nameWithType: SocketGuildChannel.GetPermissionOverwrite
    fullName: Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite(Discord.IUser)
    name: GetPermissionOverwrite
    nameWithType: SocketGuildChannel.GetPermissionOverwrite
    fullName: Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite(Discord.IRole)
  commentId: M:Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite(Discord.IRole)
  parent: Discord.WebSocket.SocketGuildChannel
  name: GetPermissionOverwrite(IRole)
  nameWithType: SocketGuildChannel.GetPermissionOverwrite(IRole)
  fullName: Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite(Discord.IRole)
  spec.csharp:
  - uid: Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite(Discord.IRole)
    name: GetPermissionOverwrite
    nameWithType: SocketGuildChannel.GetPermissionOverwrite
    fullName: Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite(Discord.IRole)
    name: GetPermissionOverwrite
    nameWithType: SocketGuildChannel.GetPermissionOverwrite
    fullName: Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuildChannel
  name: AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  nameWithType: SocketGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  fullName: Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync(Discord.IUser, Discord.OverwritePermissions, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
    name: AddPermissionOverwriteAsync
    nameWithType: SocketGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
    name: AddPermissionOverwriteAsync
    nameWithType: SocketGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuildChannel
  name: AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  nameWithType: SocketGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  fullName: Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync(Discord.IRole, Discord.OverwritePermissions, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
    name: AddPermissionOverwriteAsync
    nameWithType: SocketGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
    name: AddPermissionOverwriteAsync
    nameWithType: SocketGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuildChannel
  name: RemovePermissionOverwriteAsync(IUser, RequestOptions)
  nameWithType: SocketGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions)
  fullName: Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
    name: RemovePermissionOverwriteAsync
    nameWithType: SocketGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
    name: RemovePermissionOverwriteAsync
    nameWithType: SocketGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuildChannel
  name: RemovePermissionOverwriteAsync(IRole, RequestOptions)
  nameWithType: SocketGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions)
  fullName: Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
    name: RemovePermissionOverwriteAsync
    nameWithType: SocketGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
    name: RemovePermissionOverwriteAsync
    nameWithType: SocketGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuildChannel.ToString
  commentId: M:Discord.WebSocket.SocketGuildChannel.ToString
  parent: Discord.WebSocket.SocketGuildChannel
  name: ToString()
  nameWithType: SocketGuildChannel.ToString()
  fullName: Discord.WebSocket.SocketGuildChannel.ToString()
  spec.csharp:
  - uid: Discord.WebSocket.SocketGuildChannel.ToString
    name: ToString
    nameWithType: SocketGuildChannel.ToString
    fullName: Discord.WebSocket.SocketGuildChannel.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketGuildChannel.ToString
    name: ToString
    nameWithType: SocketGuildChannel.ToString
    fullName: Discord.WebSocket.SocketGuildChannel.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#Guild
  commentId: P:Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#Guild
  parent: Discord.WebSocket.SocketGuildChannel
  name: IGuildChannel.Guild
  nameWithType: SocketGuildChannel.IGuildChannel.Guild
  fullName: Discord.WebSocket.SocketGuildChannel.Discord.IGuildChannel.Guild
  nameWithType.vb: SocketGuildChannel.Discord.IGuildChannel.Guild
  name.vb: Discord.IGuildChannel.Guild
- uid: Discord.WebSocket.SocketChannel.CreatedAt
  commentId: P:Discord.WebSocket.SocketChannel.CreatedAt
  parent: Discord.WebSocket.SocketChannel
  name: CreatedAt
  nameWithType: SocketChannel.CreatedAt
  fullName: Discord.WebSocket.SocketChannel.CreatedAt
- uid: Discord.WebSocket.SocketEntity{System.UInt64}.Id
  commentId: P:Discord.WebSocket.SocketEntity{System.UInt64}.Id
  parent: Discord.WebSocket.SocketEntity{System.UInt64}
  definition: Discord.WebSocket.SocketEntity`1.Id
  name: Id
  nameWithType: SocketEntity<UInt64>.Id
  fullName: Discord.WebSocket.SocketEntity<System.UInt64>.Id
  nameWithType.vb: SocketEntity(Of UInt64).Id
  fullName.vb: Discord.WebSocket.SocketEntity(Of System.UInt64).Id
- uid: Discord.WebSocket.SocketEntity`1
  commentId: T:Discord.WebSocket.SocketEntity`1
  name: SocketEntity<T>
  nameWithType: SocketEntity<T>
  fullName: Discord.WebSocket.SocketEntity<T>
  nameWithType.vb: SocketEntity(Of T)
  fullName.vb: Discord.WebSocket.SocketEntity(Of T)
  name.vb: SocketEntity(Of T)
  spec.csharp:
  - uid: Discord.WebSocket.SocketEntity`1
    name: SocketEntity
    nameWithType: SocketEntity
    fullName: Discord.WebSocket.SocketEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.WebSocket.SocketEntity`1
    name: SocketEntity
    nameWithType: SocketEntity
    fullName: Discord.WebSocket.SocketEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.WebSocket.SocketEntity`1.Id
  commentId: P:Discord.WebSocket.SocketEntity`1.Id
  name: Id
  nameWithType: SocketEntity<T>.Id
  fullName: Discord.WebSocket.SocketEntity<T>.Id
  nameWithType.vb: SocketEntity(Of T).Id
  fullName.vb: Discord.WebSocket.SocketEntity(Of T).Id
- uid: Discord.WebSocket.SocketTextChannel.Topic*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.Topic
  name: Topic
  nameWithType: SocketTextChannel.Topic
  fullName: Discord.WebSocket.SocketTextChannel.Topic
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.WebSocket.SocketTextChannel.SlowModeInterval*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.SlowModeInterval
  name: SlowModeInterval
  nameWithType: SocketTextChannel.SlowModeInterval
  fullName: Discord.WebSocket.SocketTextChannel.SlowModeInterval
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Discord.WebSocket.SocketTextChannel.CategoryId*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.CategoryId
  name: CategoryId
  nameWithType: SocketTextChannel.CategoryId
  fullName: Discord.WebSocket.SocketTextChannel.CategoryId
- uid: System.Nullable{System.UInt64}
  commentId: '!:System.Nullable{System.UInt64}'
  definition: System.Nullable`1
  name: Nullable<UInt64>
  nameWithType: Nullable<UInt64>
  fullName: System.Nullable<System.UInt64>
  nameWithType.vb: Nullable(Of UInt64)
  fullName.vb: System.Nullable(Of System.UInt64)
  name.vb: Nullable(Of UInt64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.ICategoryChannel
  commentId: T:Discord.ICategoryChannel
  parent: Discord
  name: ICategoryChannel
  nameWithType: ICategoryChannel
  fullName: Discord.ICategoryChannel
- uid: Discord.WebSocket.SocketTextChannel.Category*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.Category
  name: Category
  nameWithType: SocketTextChannel.Category
  fullName: Discord.WebSocket.SocketTextChannel.Category
- uid: Discord.WebSocket.SocketTextChannel.SyncPermissionsAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.SyncPermissionsAsync
  name: SyncPermissionsAsync
  nameWithType: SocketTextChannel.SyncPermissionsAsync
  fullName: Discord.WebSocket.SocketTextChannel.SyncPermissionsAsync
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Discord.WebSocket.SocketTextChannel.IsNsfw*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.IsNsfw
  name: IsNsfw
  nameWithType: SocketTextChannel.IsNsfw
  fullName: Discord.WebSocket.SocketTextChannel.IsNsfw
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.WebSocket.SocketTextChannel.Mention*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.Mention
  name: Mention
  nameWithType: SocketTextChannel.Mention
  fullName: Discord.WebSocket.SocketTextChannel.Mention
- uid: Discord.WebSocket.SocketTextChannel.CachedMessages*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.CachedMessages
  name: CachedMessages
  nameWithType: SocketTextChannel.CachedMessages
  fullName: Discord.WebSocket.SocketTextChannel.CachedMessages
- uid: Discord.WebSocket.ISocketMessageChannel.CachedMessages
  commentId: P:Discord.WebSocket.ISocketMessageChannel.CachedMessages
  parent: Discord.WebSocket.ISocketMessageChannel
  name: CachedMessages
  nameWithType: ISocketMessageChannel.CachedMessages
  fullName: Discord.WebSocket.ISocketMessageChannel.CachedMessages
- uid: IReadOnlyCollection{Discord.WebSocket.SocketMessage}
  commentId: '!:IReadOnlyCollection{Discord.WebSocket.SocketMessage}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<SocketMessage>
  nameWithType: IReadOnlyCollection<SocketMessage>
  fullName: IReadOnlyCollection<Discord.WebSocket.SocketMessage>
  nameWithType.vb: IReadOnlyCollection(Of SocketMessage)
  fullName.vb: IReadOnlyCollection(Of Discord.WebSocket.SocketMessage)
  name.vb: IReadOnlyCollection(Of SocketMessage)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketMessage
    name: SocketMessage
    nameWithType: SocketMessage
    fullName: Discord.WebSocket.SocketMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketMessage
    name: SocketMessage
    nameWithType: SocketMessage
    fullName: Discord.WebSocket.SocketMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<>
  nameWithType: IReadOnlyCollection<>
  fullName: IReadOnlyCollection<>
  nameWithType.vb: IReadOnlyCollection(Of )
  fullName.vb: IReadOnlyCollection(Of )
  name.vb: IReadOnlyCollection(Of )
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuildChannel.Users
  commentId: P:Discord.WebSocket.SocketGuildChannel.Users
  parent: Discord.WebSocket.SocketGuildChannel
  name: Users
  nameWithType: SocketGuildChannel.Users
  fullName: Discord.WebSocket.SocketGuildChannel.Users
- uid: Discord.WebSocket.SocketTextChannel.Users*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.Users
  name: Users
  nameWithType: SocketTextChannel.Users
  fullName: Discord.WebSocket.SocketTextChannel.Users
- uid: IReadOnlyCollection{Discord.WebSocket.SocketGuildUser}
  commentId: '!:IReadOnlyCollection{Discord.WebSocket.SocketGuildUser}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<SocketGuildUser>
  nameWithType: IReadOnlyCollection<SocketGuildUser>
  fullName: IReadOnlyCollection<Discord.WebSocket.SocketGuildUser>
  nameWithType.vb: IReadOnlyCollection(Of SocketGuildUser)
  fullName.vb: IReadOnlyCollection(Of Discord.WebSocket.SocketGuildUser)
  name.vb: IReadOnlyCollection(Of SocketGuildUser)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketGuildUser
    name: SocketGuildUser
    nameWithType: SocketGuildUser
    fullName: Discord.WebSocket.SocketGuildUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketGuildUser
    name: SocketGuildUser
    nameWithType: SocketGuildUser
    fullName: Discord.WebSocket.SocketGuildUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.ModifyAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.ModifyAsync
  name: ModifyAsync
  nameWithType: SocketTextChannel.ModifyAsync
  fullName: Discord.WebSocket.SocketTextChannel.ModifyAsync
- uid: Action{Discord.TextChannelProperties}
  commentId: '!:Action{Discord.TextChannelProperties}'
  definition: Action`1
  name: Action<TextChannelProperties>
  nameWithType: Action<TextChannelProperties>
  fullName: Action<Discord.TextChannelProperties>
  nameWithType.vb: Action(Of TextChannelProperties)
  fullName.vb: Action(Of Discord.TextChannelProperties)
  name.vb: Action(Of TextChannelProperties)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.TextChannelProperties
    name: TextChannelProperties
    nameWithType: TextChannelProperties
    fullName: Discord.TextChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.TextChannelProperties
    name: TextChannelProperties
    nameWithType: TextChannelProperties
    fullName: Discord.TextChannelProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.GetCachedMessage*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.GetCachedMessage
  name: GetCachedMessage
  nameWithType: SocketTextChannel.GetCachedMessage
  fullName: Discord.WebSocket.SocketTextChannel.GetCachedMessage
- uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessage(System.UInt64)
  commentId: M:Discord.WebSocket.ISocketMessageChannel.GetCachedMessage(System.UInt64)
  parent: Discord.WebSocket.ISocketMessageChannel
  isExternal: true
  name: GetCachedMessage(UInt64)
  nameWithType: ISocketMessageChannel.GetCachedMessage(UInt64)
  fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessage(System.UInt64)
  spec.csharp:
  - uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessage(System.UInt64)
    name: GetCachedMessage
    nameWithType: ISocketMessageChannel.GetCachedMessage
    fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessage(System.UInt64)
    name: GetCachedMessage
    nameWithType: ISocketMessageChannel.GetCachedMessage
    fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessage
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.UInt64
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Discord.WebSocket.SocketMessage
  commentId: T:Discord.WebSocket.SocketMessage
  parent: Discord.WebSocket
  name: SocketMessage
  nameWithType: SocketMessage
  fullName: Discord.WebSocket.SocketMessage
- uid: Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  isExternal: true
  name: GetMessageAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: IMessageChannel.GetMessageAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.IMessageChannel.GetMessageAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessageAsync
    nameWithType: IMessageChannel.GetMessageAsync
    fullName: Discord.IMessageChannel.GetMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessageAsync
    nameWithType: IMessageChannel.GetMessageAsync
    fullName: Discord.IMessageChannel.GetMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.GetMessageAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.GetMessageAsync
  name: GetMessageAsync
  nameWithType: SocketTextChannel.GetMessageAsync
  fullName: Discord.WebSocket.SocketTextChannel.GetMessageAsync
- uid: Task{Discord.IMessage}
  commentId: '!:Task{Discord.IMessage}'
  definition: Task`1
  name: Task<IMessage>
  nameWithType: Task<IMessage>
  fullName: Task<Discord.IMessage>
  nameWithType.vb: Task(Of IMessage)
  fullName.vb: Task(Of Discord.IMessage)
  name.vb: Task(Of IMessage)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.GetMessagesAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.GetMessagesAsync
  name: GetMessagesAsync
  nameWithType: SocketTextChannel.GetMessagesAsync
  fullName: Discord.WebSocket.SocketTextChannel.GetMessagesAsync
- uid: IAsyncEnumerable{IReadOnlyCollection{Discord.IMessage}}
  commentId: '!:IAsyncEnumerable{IReadOnlyCollection{Discord.IMessage}}'
  definition: IAsyncEnumerable`1
  name: IAsyncEnumerable<IReadOnlyCollection<IMessage>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<IMessage>>
  fullName: IAsyncEnumerable<IReadOnlyCollection<Discord.IMessage>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IMessage))
  fullName.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of Discord.IMessage))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IMessage))
  spec.csharp:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IAsyncEnumerable`1
  isExternal: true
  name: IAsyncEnumerable<>
  nameWithType: IAsyncEnumerable<>
  fullName: IAsyncEnumerable<>
  nameWithType.vb: IAsyncEnumerable(Of )
  fullName.vb: IAsyncEnumerable(Of )
  name.vb: IAsyncEnumerable(Of )
  spec.csharp:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Direction
  commentId: T:Discord.Direction
  parent: Discord
  name: Direction
  nameWithType: Direction
  fullName: Discord.Direction
- uid: Discord.IMessage
  commentId: T:Discord.IMessage
  parent: Discord
  name: IMessage
  nameWithType: IMessage
  fullName: Discord.IMessage
- uid: Discord.WebSocket.SocketTextChannel.GetCachedMessages*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.GetCachedMessages
  name: GetCachedMessages
  nameWithType: SocketTextChannel.GetCachedMessages
  fullName: Discord.WebSocket.SocketTextChannel.GetCachedMessages
- uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.Int32)
  commentId: M:Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.Int32)
  parent: Discord.WebSocket.ISocketMessageChannel
  isExternal: true
  name: GetCachedMessages(Int32)
  nameWithType: ISocketMessageChannel.GetCachedMessages(Int32)
  fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.Int32)
  spec.csharp:
  - uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.Int32)
    name: GetCachedMessages
    nameWithType: ISocketMessageChannel.GetCachedMessages
    fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.Int32)
    name: GetCachedMessages
    nameWithType: ISocketMessageChannel.GetCachedMessages
    fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.UInt64,Discord.Direction,System.Int32)
  commentId: M:Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.UInt64,Discord.Direction,System.Int32)
  parent: Discord.WebSocket.ISocketMessageChannel
  isExternal: true
  name: GetCachedMessages(UInt64, Direction, Int32)
  nameWithType: ISocketMessageChannel.GetCachedMessages(UInt64, Direction, Int32)
  fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.UInt64, Discord.Direction, System.Int32)
  spec.csharp:
  - uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.UInt64,Discord.Direction,System.Int32)
    name: GetCachedMessages
    nameWithType: ISocketMessageChannel.GetCachedMessages
    fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.UInt64,Discord.Direction,System.Int32)
    name: GetCachedMessages
    nameWithType: ISocketMessageChannel.GetCachedMessages
    fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(Discord.IMessage,Discord.Direction,System.Int32)
  commentId: M:Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(Discord.IMessage,Discord.Direction,System.Int32)
  parent: Discord.WebSocket.ISocketMessageChannel
  isExternal: true
  name: GetCachedMessages(IMessage, Direction, Int32)
  nameWithType: ISocketMessageChannel.GetCachedMessages(IMessage, Direction, Int32)
  fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(Discord.IMessage, Discord.Direction, System.Int32)
  spec.csharp:
  - uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(Discord.IMessage,Discord.Direction,System.Int32)
    name: GetCachedMessages
    nameWithType: ISocketMessageChannel.GetCachedMessages
    fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(Discord.IMessage,Discord.Direction,System.Int32)
    name: GetCachedMessages
    nameWithType: ISocketMessageChannel.GetCachedMessages
    fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.GetPinnedMessagesAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.GetPinnedMessagesAsync
  name: GetPinnedMessagesAsync
  nameWithType: SocketTextChannel.GetPinnedMessagesAsync
  fullName: Discord.WebSocket.SocketTextChannel.GetPinnedMessagesAsync
- uid: Discord.WebSocket.ISocketMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.ISocketMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.ISocketMessageChannel
  name: GetPinnedMessagesAsync(RequestOptions)
  nameWithType: ISocketMessageChannel.GetPinnedMessagesAsync(RequestOptions)
  fullName: Discord.WebSocket.ISocketMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.ISocketMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
    name: GetPinnedMessagesAsync
    nameWithType: ISocketMessageChannel.GetPinnedMessagesAsync
    fullName: Discord.WebSocket.ISocketMessageChannel.GetPinnedMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.ISocketMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
    name: GetPinnedMessagesAsync
    nameWithType: ISocketMessageChannel.GetPinnedMessagesAsync
    fullName: Discord.WebSocket.ISocketMessageChannel.GetPinnedMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{IReadOnlyCollection{Discord.Rest.RestMessage}}
  commentId: '!:Task{IReadOnlyCollection{Discord.Rest.RestMessage}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<RestMessage>>
  nameWithType: Task<IReadOnlyCollection<RestMessage>>
  fullName: Task<IReadOnlyCollection<Discord.Rest.RestMessage>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestMessage))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.Rest.RestMessage))
  name.vb: Task(Of IReadOnlyCollection(Of RestMessage))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestMessage
    name: RestMessage
    nameWithType: RestMessage
    fullName: Discord.Rest.RestMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestMessage
    name: RestMessage
    nameWithType: RestMessage
    fullName: Discord.Rest.RestMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.DiscordConfig.MaxMessageSize
  commentId: F:Discord.DiscordConfig.MaxMessageSize
  parent: Discord.DiscordConfig
  name: MaxMessageSize
  nameWithType: DiscordConfig.MaxMessageSize
  fullName: Discord.DiscordConfig.MaxMessageSize
- uid: Discord.WebSocket.SocketTextChannel.SendMessageAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.SendMessageAsync
  name: SendMessageAsync
  nameWithType: SocketTextChannel.SendMessageAsync
  fullName: Discord.WebSocket.SocketTextChannel.SendMessageAsync
- uid: Discord.WebSocket.ISocketMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.ISocketMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  parent: Discord.WebSocket.ISocketMessageChannel
  isExternal: true
  name: SendMessageAsync(String, Boolean, Embed, RequestOptions)
  nameWithType: ISocketMessageChannel.SendMessageAsync(String, Boolean, Embed, RequestOptions)
  fullName: Discord.WebSocket.ISocketMessageChannel.SendMessageAsync(System.String, System.Boolean, Discord.Embed, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.ISocketMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
    name: SendMessageAsync
    nameWithType: ISocketMessageChannel.SendMessageAsync
    fullName: Discord.WebSocket.ISocketMessageChannel.SendMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.ISocketMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
    name: SendMessageAsync
    nameWithType: ISocketMessageChannel.SendMessageAsync
    fullName: Discord.WebSocket.ISocketMessageChannel.SendMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Embed
  commentId: T:Discord.Embed
  parent: Discord
  name: Embed
  nameWithType: Embed
  fullName: Discord.Embed
- uid: Task{Discord.Rest.RestUserMessage}
  commentId: '!:Task{Discord.Rest.RestUserMessage}'
  definition: Task`1
  name: Task<RestUserMessage>
  nameWithType: Task<RestUserMessage>
  fullName: Task<Discord.Rest.RestUserMessage>
  nameWithType.vb: Task(Of RestUserMessage)
  fullName.vb: Task(Of Discord.Rest.RestUserMessage)
  name.vb: Task(Of RestUserMessage)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestUserMessage
    name: RestUserMessage
    nameWithType: RestUserMessage
    fullName: Discord.Rest.RestUserMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestUserMessage
    name: RestUserMessage
    nameWithType: RestUserMessage
    fullName: Discord.Rest.RestUserMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.DiscordConfig
  commentId: T:Discord.DiscordConfig
  parent: Discord
  name: DiscordConfig
  nameWithType: DiscordConfig
  fullName: Discord.DiscordConfig
- uid: Discord.WebSocket.SocketTextChannel.SendFileAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.SendFileAsync
  name: SendFileAsync
  nameWithType: SocketTextChannel.SendFileAsync
  fullName: Discord.WebSocket.SocketTextChannel.SendFileAsync
- uid: Discord.WebSocket.ISocketMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.WebSocket.ISocketMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.WebSocket.ISocketMessageChannel
  isExternal: true
  name: SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: ISocketMessageChannel.SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.WebSocket.ISocketMessageChannel.SendFileAsync(System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  spec.csharp:
  - uid: Discord.WebSocket.ISocketMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: ISocketMessageChannel.SendFileAsync
    fullName: Discord.WebSocket.ISocketMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.ISocketMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: ISocketMessageChannel.SendFileAsync
    fullName: Discord.WebSocket.ISocketMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.ISocketMessageChannel.SendFileAsync(Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.WebSocket.ISocketMessageChannel.SendFileAsync(Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.WebSocket.ISocketMessageChannel
  isExternal: true
  name: SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: ISocketMessageChannel.SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.WebSocket.ISocketMessageChannel.SendFileAsync(Stream, System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  spec.csharp:
  - uid: Discord.WebSocket.ISocketMessageChannel.SendFileAsync(Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: ISocketMessageChannel.SendFileAsync
    fullName: Discord.WebSocket.ISocketMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Stream
    name: Stream
    nameWithType: Stream
    fullName: Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.ISocketMessageChannel.SendFileAsync(Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: ISocketMessageChannel.SendFileAsync
    fullName: Discord.WebSocket.ISocketMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Stream
    name: Stream
    nameWithType: Stream
    fullName: Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Stream
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: Stream
- uid: Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync
  name: DeleteMessagesAsync
  nameWithType: SocketTextChannel.DeleteMessagesAsync
  fullName: Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync
- uid: IEnumerable{Discord.IMessage}
  commentId: '!:IEnumerable{Discord.IMessage}'
  definition: IEnumerable`1
  name: IEnumerable<IMessage>
  nameWithType: IEnumerable<IMessage>
  fullName: IEnumerable<Discord.IMessage>
  nameWithType.vb: IEnumerable(Of IMessage)
  fullName.vb: IEnumerable(Of Discord.IMessage)
  name.vb: IEnumerable(Of IMessage)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable{System.UInt64}
  commentId: '!:IEnumerable{System.UInt64}'
  definition: IEnumerable`1
  name: IEnumerable<UInt64>
  nameWithType: IEnumerable<UInt64>
  fullName: IEnumerable<System.UInt64>
  nameWithType.vb: IEnumerable(Of UInt64)
  fullName.vb: IEnumerable(Of System.UInt64)
  name.vb: IEnumerable(Of UInt64)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.DeleteMessageAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.DeleteMessageAsync
  name: DeleteMessageAsync
  nameWithType: SocketTextChannel.DeleteMessageAsync
  fullName: Discord.WebSocket.SocketTextChannel.DeleteMessageAsync
- uid: Discord.WebSocket.SocketTextChannel.TriggerTypingAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.TriggerTypingAsync
  name: TriggerTypingAsync
  nameWithType: SocketTextChannel.TriggerTypingAsync
  fullName: Discord.WebSocket.SocketTextChannel.TriggerTypingAsync
- uid: Discord.WebSocket.SocketTextChannel.EnterTypingState*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.EnterTypingState
  name: EnterTypingState
  nameWithType: SocketTextChannel.EnterTypingState
  fullName: Discord.WebSocket.SocketTextChannel.EnterTypingState
- uid: IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: IDisposable
- uid: Discord.WebSocket.SocketGuildChannel.GetUser(System.UInt64)
  commentId: M:Discord.WebSocket.SocketGuildChannel.GetUser(System.UInt64)
  parent: Discord.WebSocket.SocketGuildChannel
  isExternal: true
  name: GetUser(UInt64)
  nameWithType: SocketGuildChannel.GetUser(UInt64)
  fullName: Discord.WebSocket.SocketGuildChannel.GetUser(System.UInt64)
  spec.csharp:
  - uid: Discord.WebSocket.SocketGuildChannel.GetUser(System.UInt64)
    name: GetUser
    nameWithType: SocketGuildChannel.GetUser
    fullName: Discord.WebSocket.SocketGuildChannel.GetUser
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketGuildChannel.GetUser(System.UInt64)
    name: GetUser
    nameWithType: SocketGuildChannel.GetUser
    fullName: Discord.WebSocket.SocketGuildChannel.GetUser
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.GetUser*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.GetUser
  name: GetUser
  nameWithType: SocketTextChannel.GetUser
  fullName: Discord.WebSocket.SocketTextChannel.GetUser
- uid: Discord.WebSocket.SocketGuildUser
  commentId: T:Discord.WebSocket.SocketGuildUser
  parent: Discord.WebSocket
  name: SocketGuildUser
  nameWithType: SocketGuildUser
  fullName: Discord.WebSocket.SocketGuildUser
- uid: Discord.WebSocket.SocketTextChannel.CreateWebhookAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.CreateWebhookAsync
  name: CreateWebhookAsync
  nameWithType: SocketTextChannel.CreateWebhookAsync
  fullName: Discord.WebSocket.SocketTextChannel.CreateWebhookAsync
- uid: Task{Discord.Rest.RestWebhook}
  commentId: '!:Task{Discord.Rest.RestWebhook}'
  definition: Task`1
  name: Task<RestWebhook>
  nameWithType: Task<RestWebhook>
  fullName: Task<Discord.Rest.RestWebhook>
  nameWithType.vb: Task(Of RestWebhook)
  fullName.vb: Task(Of Discord.Rest.RestWebhook)
  name.vb: Task(Of RestWebhook)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestWebhook
    name: RestWebhook
    nameWithType: RestWebhook
    fullName: Discord.Rest.RestWebhook
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestWebhook
    name: RestWebhook
    nameWithType: RestWebhook
    fullName: Discord.Rest.RestWebhook
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.GetWebhookAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.GetWebhookAsync
  name: GetWebhookAsync
  nameWithType: SocketTextChannel.GetWebhookAsync
  fullName: Discord.WebSocket.SocketTextChannel.GetWebhookAsync
- uid: Discord.WebSocket.SocketTextChannel.GetWebhooksAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.GetWebhooksAsync
  name: GetWebhooksAsync
  nameWithType: SocketTextChannel.GetWebhooksAsync
  fullName: Discord.WebSocket.SocketTextChannel.GetWebhooksAsync
- uid: Task{IReadOnlyCollection{Discord.Rest.RestWebhook}}
  commentId: '!:Task{IReadOnlyCollection{Discord.Rest.RestWebhook}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<RestWebhook>>
  nameWithType: Task<IReadOnlyCollection<RestWebhook>>
  fullName: Task<IReadOnlyCollection<Discord.Rest.RestWebhook>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestWebhook))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.Rest.RestWebhook))
  name.vb: Task(Of IReadOnlyCollection(Of RestWebhook))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestWebhook
    name: RestWebhook
    nameWithType: RestWebhook
    fullName: Discord.Rest.RestWebhook
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestWebhook
    name: RestWebhook
    nameWithType: RestWebhook
    fullName: Discord.Rest.RestWebhook
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.CreateInviteAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.CreateInviteAsync
  name: CreateInviteAsync
  nameWithType: SocketTextChannel.CreateInviteAsync
  fullName: Discord.WebSocket.SocketTextChannel.CreateInviteAsync
- uid: System.Nullable{System.Int32}
  commentId: '!:System.Nullable{System.Int32}'
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{Discord.IInviteMetadata}
  commentId: '!:Task{Discord.IInviteMetadata}'
  definition: Task`1
  name: Task<IInviteMetadata>
  nameWithType: Task<IInviteMetadata>
  fullName: Task<Discord.IInviteMetadata>
  nameWithType.vb: Task(Of IInviteMetadata)
  fullName.vb: Task(Of Discord.IInviteMetadata)
  name.vb: Task(Of IInviteMetadata)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IInviteMetadata
    name: IInviteMetadata
    nameWithType: IInviteMetadata
    fullName: Discord.IInviteMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IInviteMetadata
    name: IInviteMetadata
    nameWithType: IInviteMetadata
    fullName: Discord.IInviteMetadata
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketTextChannel.GetInvitesAsync*
  commentId: Overload:Discord.WebSocket.SocketTextChannel.GetInvitesAsync
  name: GetInvitesAsync
  nameWithType: SocketTextChannel.GetInvitesAsync
  fullName: Discord.WebSocket.SocketTextChannel.GetInvitesAsync
- uid: Task{IReadOnlyCollection{Discord.IInviteMetadata}}
  commentId: '!:Task{IReadOnlyCollection{Discord.IInviteMetadata}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<IInviteMetadata>>
  nameWithType: Task<IReadOnlyCollection<IInviteMetadata>>
  fullName: Task<IReadOnlyCollection<Discord.IInviteMetadata>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IInviteMetadata))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.IInviteMetadata))
  name.vb: Task(Of IReadOnlyCollection(Of IInviteMetadata))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IInviteMetadata
    name: IInviteMetadata
    nameWithType: IInviteMetadata
    fullName: Discord.IInviteMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IInviteMetadata
    name: IInviteMetadata
    nameWithType: IInviteMetadata
    fullName: Discord.IInviteMetadata
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
