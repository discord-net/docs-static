### YamlMime:ManagedReference
items:
- uid: Discord.Audio.Streams.BufferedWriteStream
  commentId: T:Discord.Audio.Streams.BufferedWriteStream
  id: BufferedWriteStream
  parent: Discord.Audio.Streams
  children:
  - Discord.Audio.Streams.BufferedWriteStream.#ctor(Discord.Audio.AudioStream,Discord.Audio.IAudioClient,System.Int32,CancellationToken,System.Int32)
  - Discord.Audio.Streams.BufferedWriteStream.ClearAsync(CancellationToken)
  - Discord.Audio.Streams.BufferedWriteStream.Dispose(System.Boolean)
  - Discord.Audio.Streams.BufferedWriteStream.FlushAsync(CancellationToken)
  - Discord.Audio.Streams.BufferedWriteStream.WriteAsync(System.Byte[],System.Int32,System.Int32,CancellationToken)
  - Discord.Audio.Streams.BufferedWriteStream.WriteHeader(System.UInt16,System.UInt32,System.Boolean)
  langs:
  - csharp
  - vb
  name: BufferedWriteStream
  nameWithType: BufferedWriteStream
  fullName: Discord.Audio.Streams.BufferedWriteStream
  type: Class
  source:
    remote:
      path: src/Discord.Net.WebSocket/Audio/Streams/BufferedWriteStream.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: BufferedWriteStream
    path: ../src/Discord.Net.WebSocket/Audio/Streams/BufferedWriteStream.cs
    startLine: 9
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.Audio.Streams
  summary: 'Wraps another stream with a timed buffer. '
  example: []
  syntax:
    content: 'public class BufferedWriteStream : AudioOutStream'
    content.vb: >-
      Public Class BufferedWriteStream
          Inherits AudioOutStream
  inheritance:
  - System.Object
  - Discord.Audio.AudioStream
  - Discord.Audio.AudioOutStream
  inheritedMembers:
  - Discord.Audio.AudioOutStream.CanWrite
  - Discord.Audio.AudioOutStream.Read(System.Byte[],System.Int32,System.Int32)
  - Discord.Audio.AudioOutStream.SetLength(System.Int64)
  - Discord.Audio.AudioOutStream.Seek(System.Int64,SeekOrigin)
  - Discord.Audio.AudioStream.CanRead
  - Discord.Audio.AudioStream.CanSeek
  - Discord.Audio.AudioStream.Write(System.Byte[],System.Int32,System.Int32)
  - Discord.Audio.AudioStream.Flush
  - Discord.Audio.AudioStream.Clear
  - Discord.Audio.AudioStream.Length
  - Discord.Audio.AudioStream.Position
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.Audio.Streams.BufferedWriteStream.#ctor(Discord.Audio.AudioStream,Discord.Audio.IAudioClient,System.Int32,CancellationToken,System.Int32)
  commentId: M:Discord.Audio.Streams.BufferedWriteStream.#ctor(Discord.Audio.AudioStream,Discord.Audio.IAudioClient,System.Int32,CancellationToken,System.Int32)
  id: '#ctor(Discord.Audio.AudioStream,Discord.Audio.IAudioClient,System.Int32,CancellationToken,System.Int32)'
  parent: Discord.Audio.Streams.BufferedWriteStream
  langs:
  - csharp
  - vb
  name: BufferedWriteStream(AudioStream, IAudioClient, Int32, CancellationToken, Int32)
  nameWithType: BufferedWriteStream.BufferedWriteStream(AudioStream, IAudioClient, Int32, CancellationToken, Int32)
  fullName: Discord.Audio.Streams.BufferedWriteStream.BufferedWriteStream(Discord.Audio.AudioStream, Discord.Audio.IAudioClient, System.Int32, CancellationToken, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/Discord.Net.WebSocket/Audio/Streams/BufferedWriteStream.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: .ctor
    path: ../src/Discord.Net.WebSocket/Audio/Streams/BufferedWriteStream.cs
    startLine: 40
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.Audio.Streams
  syntax:
    content: public BufferedWriteStream(AudioStream next, IAudioClient client, int bufferMillis, CancellationToken cancelToken, int maxFrameSize = 1500)
    parameters:
    - id: next
      type: Discord.Audio.AudioStream
    - id: client
      type: Discord.Audio.IAudioClient
    - id: bufferMillis
      type: System.Int32
    - id: cancelToken
      type: CancellationToken
    - id: maxFrameSize
      type: System.Int32
    content.vb: Public Sub New(next As AudioStream, client As IAudioClient, bufferMillis As Integer, cancelToken As CancellationToken, maxFrameSize As Integer = 1500)
  overload: Discord.Audio.Streams.BufferedWriteStream.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Audio.Streams.BufferedWriteStream.Dispose(System.Boolean)
  commentId: M:Discord.Audio.Streams.BufferedWriteStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Discord.Audio.Streams.BufferedWriteStream
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: BufferedWriteStream.Dispose(Boolean)
  fullName: Discord.Audio.Streams.BufferedWriteStream.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Audio/Streams/BufferedWriteStream.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Dispose
    path: ../src/Discord.Net.WebSocket/Audio/Streams/BufferedWriteStream.cs
    startLine: 63
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.Audio.Streams
  syntax:
    content: protected override void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
  overload: Discord.Audio.Streams.BufferedWriteStream.Dispose*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Discord.Audio.Streams.BufferedWriteStream.WriteHeader(System.UInt16,System.UInt32,System.Boolean)
  commentId: M:Discord.Audio.Streams.BufferedWriteStream.WriteHeader(System.UInt16,System.UInt32,System.Boolean)
  id: WriteHeader(System.UInt16,System.UInt32,System.Boolean)
  parent: Discord.Audio.Streams.BufferedWriteStream
  langs:
  - csharp
  - vb
  name: WriteHeader(UInt16, UInt32, Boolean)
  nameWithType: BufferedWriteStream.WriteHeader(UInt16, UInt32, Boolean)
  fullName: Discord.Audio.Streams.BufferedWriteStream.WriteHeader(System.UInt16, System.UInt32, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Audio/Streams/BufferedWriteStream.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: WriteHeader
    path: ../src/Discord.Net.WebSocket/Audio/Streams/BufferedWriteStream.cs
    startLine: 136
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.Audio.Streams
  syntax:
    content: public override void WriteHeader(ushort seq, uint timestamp, bool missed)
    parameters:
    - id: seq
      type: System.UInt16
    - id: timestamp
      type: System.UInt32
    - id: missed
      type: System.Boolean
    content.vb: Public Overrides Sub WriteHeader(seq As UShort, timestamp As UInteger, missed As Boolean)
  overload: Discord.Audio.Streams.BufferedWriteStream.WriteHeader*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.Audio.Streams.BufferedWriteStream.WriteAsync(System.Byte[],System.Int32,System.Int32,CancellationToken)
  commentId: M:Discord.Audio.Streams.BufferedWriteStream.WriteAsync(System.Byte[],System.Int32,System.Int32,CancellationToken)
  id: WriteAsync(System.Byte[],System.Int32,System.Int32,CancellationToken)
  parent: Discord.Audio.Streams.BufferedWriteStream
  langs:
  - csharp
  - vb
  name: WriteAsync(Byte[], Int32, Int32, CancellationToken)
  nameWithType: BufferedWriteStream.WriteAsync(Byte[], Int32, Int32, CancellationToken)
  fullName: Discord.Audio.Streams.BufferedWriteStream.WriteAsync(System.Byte[], System.Int32, System.Int32, CancellationToken)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Audio/Streams/BufferedWriteStream.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: WriteAsync
    path: ../src/Discord.Net.WebSocket/Audio/Streams/BufferedWriteStream.cs
    startLine: 137
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.Audio.Streams
  syntax:
    content: public override Task WriteAsync(byte[] data, int offset, int count, CancellationToken cancelToken)
    parameters:
    - id: data
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: count
      type: System.Int32
    - id: cancelToken
      type: CancellationToken
    return:
      type: Task
    content.vb: Public Overrides Function WriteAsync(data As Byte(), offset As Integer, count As Integer, cancelToken As CancellationToken) As Task
  overload: Discord.Audio.Streams.BufferedWriteStream.WriteAsync*
  nameWithType.vb: BufferedWriteStream.WriteAsync(Byte(), Int32, Int32, CancellationToken)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Discord.Audio.Streams.BufferedWriteStream.WriteAsync(System.Byte(), System.Int32, System.Int32, CancellationToken)
  name.vb: WriteAsync(Byte(), Int32, Int32, CancellationToken)
- uid: Discord.Audio.Streams.BufferedWriteStream.FlushAsync(CancellationToken)
  commentId: M:Discord.Audio.Streams.BufferedWriteStream.FlushAsync(CancellationToken)
  id: FlushAsync(CancellationToken)
  parent: Discord.Audio.Streams.BufferedWriteStream
  langs:
  - csharp
  - vb
  name: FlushAsync(CancellationToken)
  nameWithType: BufferedWriteStream.FlushAsync(CancellationToken)
  fullName: Discord.Audio.Streams.BufferedWriteStream.FlushAsync(CancellationToken)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Audio/Streams/BufferedWriteStream.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: FlushAsync
    path: ../src/Discord.Net.WebSocket/Audio/Streams/BufferedWriteStream.cs
    startLine: 171
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.Audio.Streams
  syntax:
    content: public override Task FlushAsync(CancellationToken cancelToken)
    parameters:
    - id: cancelToken
      type: CancellationToken
    return:
      type: Task
    content.vb: Public Overrides Function FlushAsync(cancelToken As CancellationToken) As Task
  overload: Discord.Audio.Streams.BufferedWriteStream.FlushAsync*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.Audio.Streams.BufferedWriteStream.ClearAsync(CancellationToken)
  commentId: M:Discord.Audio.Streams.BufferedWriteStream.ClearAsync(CancellationToken)
  id: ClearAsync(CancellationToken)
  parent: Discord.Audio.Streams.BufferedWriteStream
  langs:
  - csharp
  - vb
  name: ClearAsync(CancellationToken)
  nameWithType: BufferedWriteStream.ClearAsync(CancellationToken)
  fullName: Discord.Audio.Streams.BufferedWriteStream.ClearAsync(CancellationToken)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Audio/Streams/BufferedWriteStream.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ClearAsync
    path: ../src/Discord.Net.WebSocket/Audio/Streams/BufferedWriteStream.cs
    startLine: 181
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.Audio.Streams
  syntax:
    content: public override Task ClearAsync(CancellationToken cancelToken)
    parameters:
    - id: cancelToken
      type: CancellationToken
    return:
      type: Task
    content.vb: Public Overrides Function ClearAsync(cancelToken As CancellationToken) As Task
  overload: Discord.Audio.Streams.BufferedWriteStream.ClearAsync*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Discord.Audio.Streams
  commentId: N:Discord.Audio.Streams
  name: Discord.Audio.Streams
  nameWithType: Discord.Audio.Streams
  fullName: Discord.Audio.Streams
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Audio.AudioStream
  commentId: T:Discord.Audio.AudioStream
  parent: Discord.Audio
  name: AudioStream
  nameWithType: AudioStream
  fullName: Discord.Audio.AudioStream
- uid: Discord.Audio.AudioOutStream
  commentId: T:Discord.Audio.AudioOutStream
  parent: Discord.Audio
  name: AudioOutStream
  nameWithType: AudioOutStream
  fullName: Discord.Audio.AudioOutStream
- uid: Discord.Audio.AudioOutStream.CanWrite
  commentId: P:Discord.Audio.AudioOutStream.CanWrite
  parent: Discord.Audio.AudioOutStream
  name: CanWrite
  nameWithType: AudioOutStream.CanWrite
  fullName: Discord.Audio.AudioOutStream.CanWrite
- uid: Discord.Audio.AudioOutStream.Read(System.Byte[],System.Int32,System.Int32)
  commentId: M:Discord.Audio.AudioOutStream.Read(System.Byte[],System.Int32,System.Int32)
  parent: Discord.Audio.AudioOutStream
  isExternal: true
  name: Read(Byte[], Int32, Int32)
  nameWithType: AudioOutStream.Read(Byte[], Int32, Int32)
  fullName: Discord.Audio.AudioOutStream.Read(System.Byte[], System.Int32, System.Int32)
  nameWithType.vb: AudioOutStream.Read(Byte(), Int32, Int32)
  fullName.vb: Discord.Audio.AudioOutStream.Read(System.Byte(), System.Int32, System.Int32)
  name.vb: Read(Byte(), Int32, Int32)
  spec.csharp:
  - uid: Discord.Audio.AudioOutStream.Read(System.Byte[],System.Int32,System.Int32)
    name: Read
    nameWithType: AudioOutStream.Read
    fullName: Discord.Audio.AudioOutStream.Read
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Audio.AudioOutStream.Read(System.Byte[],System.Int32,System.Int32)
    name: Read
    nameWithType: AudioOutStream.Read
    fullName: Discord.Audio.AudioOutStream.Read
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Audio.AudioOutStream.SetLength(System.Int64)
  commentId: M:Discord.Audio.AudioOutStream.SetLength(System.Int64)
  parent: Discord.Audio.AudioOutStream
  isExternal: true
  name: SetLength(Int64)
  nameWithType: AudioOutStream.SetLength(Int64)
  fullName: Discord.Audio.AudioOutStream.SetLength(System.Int64)
  spec.csharp:
  - uid: Discord.Audio.AudioOutStream.SetLength(System.Int64)
    name: SetLength
    nameWithType: AudioOutStream.SetLength
    fullName: Discord.Audio.AudioOutStream.SetLength
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Audio.AudioOutStream.SetLength(System.Int64)
    name: SetLength
    nameWithType: AudioOutStream.SetLength
    fullName: Discord.Audio.AudioOutStream.SetLength
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Audio.AudioOutStream.Seek(System.Int64,SeekOrigin)
  commentId: M:Discord.Audio.AudioOutStream.Seek(System.Int64,SeekOrigin)
  parent: Discord.Audio.AudioOutStream
  isExternal: true
  name: Seek(Int64, SeekOrigin)
  nameWithType: AudioOutStream.Seek(Int64, SeekOrigin)
  fullName: Discord.Audio.AudioOutStream.Seek(System.Int64, SeekOrigin)
  spec.csharp:
  - uid: Discord.Audio.AudioOutStream.Seek(System.Int64,SeekOrigin)
    name: Seek
    nameWithType: AudioOutStream.Seek
    fullName: Discord.Audio.AudioOutStream.Seek
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SeekOrigin
    name: SeekOrigin
    nameWithType: SeekOrigin
    fullName: SeekOrigin
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Audio.AudioOutStream.Seek(System.Int64,SeekOrigin)
    name: Seek
    nameWithType: AudioOutStream.Seek
    fullName: Discord.Audio.AudioOutStream.Seek
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SeekOrigin
    name: SeekOrigin
    nameWithType: SeekOrigin
    fullName: SeekOrigin
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Audio.AudioStream.CanRead
  commentId: P:Discord.Audio.AudioStream.CanRead
  parent: Discord.Audio.AudioStream
  name: CanRead
  nameWithType: AudioStream.CanRead
  fullName: Discord.Audio.AudioStream.CanRead
- uid: Discord.Audio.AudioStream.CanSeek
  commentId: P:Discord.Audio.AudioStream.CanSeek
  parent: Discord.Audio.AudioStream
  name: CanSeek
  nameWithType: AudioStream.CanSeek
  fullName: Discord.Audio.AudioStream.CanSeek
- uid: Discord.Audio.AudioStream.Write(System.Byte[],System.Int32,System.Int32)
  commentId: M:Discord.Audio.AudioStream.Write(System.Byte[],System.Int32,System.Int32)
  parent: Discord.Audio.AudioStream
  isExternal: true
  name: Write(Byte[], Int32, Int32)
  nameWithType: AudioStream.Write(Byte[], Int32, Int32)
  fullName: Discord.Audio.AudioStream.Write(System.Byte[], System.Int32, System.Int32)
  nameWithType.vb: AudioStream.Write(Byte(), Int32, Int32)
  fullName.vb: Discord.Audio.AudioStream.Write(System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Byte(), Int32, Int32)
  spec.csharp:
  - uid: Discord.Audio.AudioStream.Write(System.Byte[],System.Int32,System.Int32)
    name: Write
    nameWithType: AudioStream.Write
    fullName: Discord.Audio.AudioStream.Write
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Audio.AudioStream.Write(System.Byte[],System.Int32,System.Int32)
    name: Write
    nameWithType: AudioStream.Write
    fullName: Discord.Audio.AudioStream.Write
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Audio.AudioStream.Flush
  commentId: M:Discord.Audio.AudioStream.Flush
  parent: Discord.Audio.AudioStream
  name: Flush()
  nameWithType: AudioStream.Flush()
  fullName: Discord.Audio.AudioStream.Flush()
  spec.csharp:
  - uid: Discord.Audio.AudioStream.Flush
    name: Flush
    nameWithType: AudioStream.Flush
    fullName: Discord.Audio.AudioStream.Flush
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Audio.AudioStream.Flush
    name: Flush
    nameWithType: AudioStream.Flush
    fullName: Discord.Audio.AudioStream.Flush
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Audio.AudioStream.Clear
  commentId: M:Discord.Audio.AudioStream.Clear
  parent: Discord.Audio.AudioStream
  name: Clear()
  nameWithType: AudioStream.Clear()
  fullName: Discord.Audio.AudioStream.Clear()
  spec.csharp:
  - uid: Discord.Audio.AudioStream.Clear
    name: Clear
    nameWithType: AudioStream.Clear
    fullName: Discord.Audio.AudioStream.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Audio.AudioStream.Clear
    name: Clear
    nameWithType: AudioStream.Clear
    fullName: Discord.Audio.AudioStream.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Audio.AudioStream.Length
  commentId: P:Discord.Audio.AudioStream.Length
  parent: Discord.Audio.AudioStream
  name: Length
  nameWithType: AudioStream.Length
  fullName: Discord.Audio.AudioStream.Length
- uid: Discord.Audio.AudioStream.Position
  commentId: P:Discord.Audio.AudioStream.Position
  parent: Discord.Audio.AudioStream
  name: Position
  nameWithType: AudioStream.Position
  fullName: Discord.Audio.AudioStream.Position
- uid: Discord.Audio
  commentId: N:Discord.Audio
  name: Discord.Audio
  nameWithType: Discord.Audio
  fullName: Discord.Audio
- uid: Discord.Audio.Streams.BufferedWriteStream.#ctor*
  commentId: Overload:Discord.Audio.Streams.BufferedWriteStream.#ctor
  name: BufferedWriteStream
  nameWithType: BufferedWriteStream.BufferedWriteStream
  fullName: Discord.Audio.Streams.BufferedWriteStream.BufferedWriteStream
- uid: Discord.Audio.IAudioClient
  commentId: T:Discord.Audio.IAudioClient
  parent: Discord.Audio
  name: IAudioClient
  nameWithType: IAudioClient
  fullName: Discord.Audio.IAudioClient
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: CancellationToken
- uid: Discord.Audio.Streams.BufferedWriteStream.Dispose*
  commentId: Overload:Discord.Audio.Streams.BufferedWriteStream.Dispose
  name: Dispose
  nameWithType: BufferedWriteStream.Dispose
  fullName: Discord.Audio.Streams.BufferedWriteStream.Dispose
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.Audio.Streams.BufferedWriteStream.WriteHeader*
  commentId: Overload:Discord.Audio.Streams.BufferedWriteStream.WriteHeader
  name: WriteHeader
  nameWithType: BufferedWriteStream.WriteHeader
  fullName: Discord.Audio.Streams.BufferedWriteStream.WriteHeader
- uid: System.UInt16
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.UInt32
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: Discord.Audio.Streams.BufferedWriteStream.WriteAsync*
  commentId: Overload:Discord.Audio.Streams.BufferedWriteStream.WriteAsync
  name: WriteAsync
  nameWithType: BufferedWriteStream.WriteAsync
  fullName: Discord.Audio.Streams.BufferedWriteStream.WriteAsync
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Discord.Audio.Streams.BufferedWriteStream.FlushAsync*
  commentId: Overload:Discord.Audio.Streams.BufferedWriteStream.FlushAsync
  name: FlushAsync
  nameWithType: BufferedWriteStream.FlushAsync
  fullName: Discord.Audio.Streams.BufferedWriteStream.FlushAsync
- uid: Discord.Audio.Streams.BufferedWriteStream.ClearAsync*
  commentId: Overload:Discord.Audio.Streams.BufferedWriteStream.ClearAsync
  name: ClearAsync
  nameWithType: BufferedWriteStream.ClearAsync
  fullName: Discord.Audio.Streams.BufferedWriteStream.ClearAsync
