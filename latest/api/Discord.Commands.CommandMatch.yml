### YamlMime:ManagedReference
items:
- uid: Discord.Commands.CommandMatch
  commentId: T:Discord.Commands.CommandMatch
  id: CommandMatch
  parent: Discord.Commands
  children:
  - Discord.Commands.CommandMatch.#ctor(Discord.Commands.CommandInfo,System.String)
  - Discord.Commands.CommandMatch.Alias
  - Discord.Commands.CommandMatch.CheckPreconditionsAsync(Discord.Commands.ICommandContext,System.IServiceProvider)
  - Discord.Commands.CommandMatch.Command
  - Discord.Commands.CommandMatch.ExecuteAsync(Discord.Commands.ICommandContext,Discord.Commands.ParseResult,System.IServiceProvider)
  - Discord.Commands.CommandMatch.ExecuteAsync(Discord.Commands.ICommandContext,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object},System.IServiceProvider)
  - Discord.Commands.CommandMatch.ParseAsync(Discord.Commands.ICommandContext,Discord.Commands.SearchResult,Discord.Commands.PreconditionResult,System.IServiceProvider)
  langs:
  - csharp
  - vb
  name: CommandMatch
  nameWithType: CommandMatch
  fullName: Discord.Commands.CommandMatch
  type: Struct
  source:
    remote:
      path: src/Discord.Net.Commands/CommandMatch.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CommandMatch
    path: ../src/Discord.Net.Commands/CommandMatch.cs
    startLine: 6
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public struct CommandMatch
    content.vb: Public Structure CommandMatch
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Discord.Commands.CommandMatch.Command
  commentId: P:Discord.Commands.CommandMatch.Command
  id: Command
  parent: Discord.Commands.CommandMatch
  langs:
  - csharp
  - vb
  name: Command
  nameWithType: CommandMatch.Command
  fullName: Discord.Commands.CommandMatch.Command
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/CommandMatch.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Command
    path: ../src/Discord.Net.Commands/CommandMatch.cs
    startLine: 9
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: 'The command that matches the search result. '
  example: []
  syntax:
    content: public CommandInfo Command { get; }
    parameters: []
    return:
      type: Discord.Commands.CommandInfo
    content.vb: Public ReadOnly Property Command As CommandInfo
  overload: Discord.Commands.CommandMatch.Command*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.CommandMatch.Alias
  commentId: P:Discord.Commands.CommandMatch.Alias
  id: Alias
  parent: Discord.Commands.CommandMatch
  langs:
  - csharp
  - vb
  name: Alias
  nameWithType: CommandMatch.Alias
  fullName: Discord.Commands.CommandMatch.Alias
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/CommandMatch.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Alias
    path: ../src/Discord.Net.Commands/CommandMatch.cs
    startLine: 11
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: 'The alias of the command. '
  example: []
  syntax:
    content: public string Alias { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Alias As String
  overload: Discord.Commands.CommandMatch.Alias*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.CommandMatch.#ctor(Discord.Commands.CommandInfo,System.String)
  commentId: M:Discord.Commands.CommandMatch.#ctor(Discord.Commands.CommandInfo,System.String)
  id: '#ctor(Discord.Commands.CommandInfo,System.String)'
  parent: Discord.Commands.CommandMatch
  langs:
  - csharp
  - vb
  name: CommandMatch(CommandInfo, String)
  nameWithType: CommandMatch.CommandMatch(CommandInfo, String)
  fullName: Discord.Commands.CommandMatch.CommandMatch(Discord.Commands.CommandInfo, System.String)
  type: Constructor
  source:
    remote:
      path: src/Discord.Net.Commands/CommandMatch.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: .ctor
    path: ../src/Discord.Net.Commands/CommandMatch.cs
    startLine: 13
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public CommandMatch(CommandInfo command, string alias)
    parameters:
    - id: command
      type: Discord.Commands.CommandInfo
    - id: alias
      type: System.String
    content.vb: Public Sub New(command As CommandInfo, alias As String)
  overload: Discord.Commands.CommandMatch.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Commands.CommandMatch.CheckPreconditionsAsync(Discord.Commands.ICommandContext,System.IServiceProvider)
  commentId: M:Discord.Commands.CommandMatch.CheckPreconditionsAsync(Discord.Commands.ICommandContext,System.IServiceProvider)
  id: CheckPreconditionsAsync(Discord.Commands.ICommandContext,System.IServiceProvider)
  parent: Discord.Commands.CommandMatch
  langs:
  - csharp
  - vb
  name: CheckPreconditionsAsync(ICommandContext, IServiceProvider)
  nameWithType: CommandMatch.CheckPreconditionsAsync(ICommandContext, IServiceProvider)
  fullName: Discord.Commands.CommandMatch.CheckPreconditionsAsync(Discord.Commands.ICommandContext, System.IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/CommandMatch.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CheckPreconditionsAsync
    path: ../src/Discord.Net.Commands/CommandMatch.cs
    startLine: 19
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public Task<PreconditionResult> CheckPreconditionsAsync(ICommandContext context, IServiceProvider services = null)
    parameters:
    - id: context
      type: Discord.Commands.ICommandContext
    - id: services
      type: System.IServiceProvider
    return:
      type: System.Threading.Tasks.Task{Discord.Commands.PreconditionResult}
    content.vb: Public Function CheckPreconditionsAsync(context As ICommandContext, services As IServiceProvider = Nothing) As Task(Of PreconditionResult)
  overload: Discord.Commands.CommandMatch.CheckPreconditionsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Commands.CommandMatch.ParseAsync(Discord.Commands.ICommandContext,Discord.Commands.SearchResult,Discord.Commands.PreconditionResult,System.IServiceProvider)
  commentId: M:Discord.Commands.CommandMatch.ParseAsync(Discord.Commands.ICommandContext,Discord.Commands.SearchResult,Discord.Commands.PreconditionResult,System.IServiceProvider)
  id: ParseAsync(Discord.Commands.ICommandContext,Discord.Commands.SearchResult,Discord.Commands.PreconditionResult,System.IServiceProvider)
  parent: Discord.Commands.CommandMatch
  langs:
  - csharp
  - vb
  name: ParseAsync(ICommandContext, SearchResult, PreconditionResult, IServiceProvider)
  nameWithType: CommandMatch.ParseAsync(ICommandContext, SearchResult, PreconditionResult, IServiceProvider)
  fullName: Discord.Commands.CommandMatch.ParseAsync(Discord.Commands.ICommandContext, Discord.Commands.SearchResult, Discord.Commands.PreconditionResult, System.IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/CommandMatch.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ParseAsync
    path: ../src/Discord.Net.Commands/CommandMatch.cs
    startLine: 21
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public Task<ParseResult> ParseAsync(ICommandContext context, SearchResult searchResult, PreconditionResult preconditionResult = null, IServiceProvider services = null)
    parameters:
    - id: context
      type: Discord.Commands.ICommandContext
    - id: searchResult
      type: Discord.Commands.SearchResult
    - id: preconditionResult
      type: Discord.Commands.PreconditionResult
    - id: services
      type: System.IServiceProvider
    return:
      type: System.Threading.Tasks.Task{Discord.Commands.ParseResult}
    content.vb: Public Function ParseAsync(context As ICommandContext, searchResult As SearchResult, preconditionResult As PreconditionResult = Nothing, services As IServiceProvider = Nothing) As Task(Of ParseResult)
  overload: Discord.Commands.CommandMatch.ParseAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Commands.CommandMatch.ExecuteAsync(Discord.Commands.ICommandContext,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object},System.IServiceProvider)
  commentId: M:Discord.Commands.CommandMatch.ExecuteAsync(Discord.Commands.ICommandContext,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object},System.IServiceProvider)
  id: ExecuteAsync(Discord.Commands.ICommandContext,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object},System.IServiceProvider)
  parent: Discord.Commands.CommandMatch
  langs:
  - csharp
  - vb
  name: ExecuteAsync(ICommandContext, IEnumerable<Object>, IEnumerable<Object>, IServiceProvider)
  nameWithType: CommandMatch.ExecuteAsync(ICommandContext, IEnumerable<Object>, IEnumerable<Object>, IServiceProvider)
  fullName: Discord.Commands.CommandMatch.ExecuteAsync(Discord.Commands.ICommandContext, System.Collections.Generic.IEnumerable<System.Object>, System.Collections.Generic.IEnumerable<System.Object>, System.IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/CommandMatch.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ExecuteAsync
    path: ../src/Discord.Net.Commands/CommandMatch.cs
    startLine: 23
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public Task<IResult> ExecuteAsync(ICommandContext context, IEnumerable<object> argList, IEnumerable<object> paramList, IServiceProvider services)
    parameters:
    - id: context
      type: Discord.Commands.ICommandContext
    - id: argList
      type: System.Collections.Generic.IEnumerable{System.Object}
    - id: paramList
      type: System.Collections.Generic.IEnumerable{System.Object}
    - id: services
      type: System.IServiceProvider
    return:
      type: System.Threading.Tasks.Task{Discord.Commands.IResult}
    content.vb: Public Function ExecuteAsync(context As ICommandContext, argList As IEnumerable(Of Object), paramList As IEnumerable(Of Object), services As IServiceProvider) As Task(Of IResult)
  overload: Discord.Commands.CommandMatch.ExecuteAsync*
  nameWithType.vb: CommandMatch.ExecuteAsync(ICommandContext, IEnumerable(Of Object), IEnumerable(Of Object), IServiceProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Commands.CommandMatch.ExecuteAsync(Discord.Commands.ICommandContext, System.Collections.Generic.IEnumerable(Of System.Object), System.Collections.Generic.IEnumerable(Of System.Object), System.IServiceProvider)
  name.vb: ExecuteAsync(ICommandContext, IEnumerable(Of Object), IEnumerable(Of Object), IServiceProvider)
- uid: Discord.Commands.CommandMatch.ExecuteAsync(Discord.Commands.ICommandContext,Discord.Commands.ParseResult,System.IServiceProvider)
  commentId: M:Discord.Commands.CommandMatch.ExecuteAsync(Discord.Commands.ICommandContext,Discord.Commands.ParseResult,System.IServiceProvider)
  id: ExecuteAsync(Discord.Commands.ICommandContext,Discord.Commands.ParseResult,System.IServiceProvider)
  parent: Discord.Commands.CommandMatch
  langs:
  - csharp
  - vb
  name: ExecuteAsync(ICommandContext, ParseResult, IServiceProvider)
  nameWithType: CommandMatch.ExecuteAsync(ICommandContext, ParseResult, IServiceProvider)
  fullName: Discord.Commands.CommandMatch.ExecuteAsync(Discord.Commands.ICommandContext, Discord.Commands.ParseResult, System.IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/CommandMatch.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ExecuteAsync
    path: ../src/Discord.Net.Commands/CommandMatch.cs
    startLine: 25
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public Task<IResult> ExecuteAsync(ICommandContext context, ParseResult parseResult, IServiceProvider services)
    parameters:
    - id: context
      type: Discord.Commands.ICommandContext
    - id: parseResult
      type: Discord.Commands.ParseResult
    - id: services
      type: System.IServiceProvider
    return:
      type: System.Threading.Tasks.Task{Discord.Commands.IResult}
    content.vb: Public Function ExecuteAsync(context As ICommandContext, parseResult As ParseResult, services As IServiceProvider) As Task(Of IResult)
  overload: Discord.Commands.CommandMatch.ExecuteAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Discord.Commands
  commentId: N:Discord.Commands
  name: Discord.Commands
  nameWithType: Discord.Commands
  fullName: Discord.Commands
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Commands.CommandMatch.Command*
  commentId: Overload:Discord.Commands.CommandMatch.Command
  name: Command
  nameWithType: CommandMatch.Command
  fullName: Discord.Commands.CommandMatch.Command
- uid: Discord.Commands.CommandInfo
  commentId: T:Discord.Commands.CommandInfo
  parent: Discord.Commands
  name: CommandInfo
  nameWithType: CommandInfo
  fullName: Discord.Commands.CommandInfo
- uid: Discord.Commands.CommandMatch.Alias*
  commentId: Overload:Discord.Commands.CommandMatch.Alias
  name: Alias
  nameWithType: CommandMatch.Alias
  fullName: Discord.Commands.CommandMatch.Alias
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.Commands.CommandMatch.#ctor*
  commentId: Overload:Discord.Commands.CommandMatch.#ctor
  name: CommandMatch
  nameWithType: CommandMatch.CommandMatch
  fullName: Discord.Commands.CommandMatch.CommandMatch
- uid: Discord.Commands.CommandMatch.CheckPreconditionsAsync*
  commentId: Overload:Discord.Commands.CommandMatch.CheckPreconditionsAsync
  name: CheckPreconditionsAsync
  nameWithType: CommandMatch.CheckPreconditionsAsync
  fullName: Discord.Commands.CommandMatch.CheckPreconditionsAsync
- uid: Discord.Commands.ICommandContext
  commentId: T:Discord.Commands.ICommandContext
  parent: Discord.Commands
  name: ICommandContext
  nameWithType: ICommandContext
  fullName: Discord.Commands.ICommandContext
- uid: System.IServiceProvider
  commentId: T:System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.Threading.Tasks.Task{Discord.Commands.PreconditionResult}
  commentId: T:System.Threading.Tasks.Task{Discord.Commands.PreconditionResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<PreconditionResult>
  nameWithType: Task<PreconditionResult>
  fullName: System.Threading.Tasks.Task<Discord.Commands.PreconditionResult>
  nameWithType.vb: Task(Of PreconditionResult)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.Commands.PreconditionResult)
  name.vb: Task(Of PreconditionResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.PreconditionResult
    name: PreconditionResult
    nameWithType: PreconditionResult
    fullName: Discord.Commands.PreconditionResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.PreconditionResult
    name: PreconditionResult
    nameWithType: PreconditionResult
    fullName: Discord.Commands.PreconditionResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Discord.Commands.CommandMatch.ParseAsync*
  commentId: Overload:Discord.Commands.CommandMatch.ParseAsync
  name: ParseAsync
  nameWithType: CommandMatch.ParseAsync
  fullName: Discord.Commands.CommandMatch.ParseAsync
- uid: Discord.Commands.SearchResult
  commentId: T:Discord.Commands.SearchResult
  parent: Discord.Commands
  name: SearchResult
  nameWithType: SearchResult
  fullName: Discord.Commands.SearchResult
- uid: Discord.Commands.PreconditionResult
  commentId: T:Discord.Commands.PreconditionResult
  parent: Discord.Commands
  name: PreconditionResult
  nameWithType: PreconditionResult
  fullName: Discord.Commands.PreconditionResult
- uid: System.Threading.Tasks.Task{Discord.Commands.ParseResult}
  commentId: T:System.Threading.Tasks.Task{Discord.Commands.ParseResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ParseResult>
  nameWithType: Task<ParseResult>
  fullName: System.Threading.Tasks.Task<Discord.Commands.ParseResult>
  nameWithType.vb: Task(Of ParseResult)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.Commands.ParseResult)
  name.vb: Task(Of ParseResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.ParseResult
    name: ParseResult
    nameWithType: ParseResult
    fullName: Discord.Commands.ParseResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.ParseResult
    name: ParseResult
    nameWithType: ParseResult
    fullName: Discord.Commands.ParseResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.CommandMatch.ExecuteAsync*
  commentId: Overload:Discord.Commands.CommandMatch.ExecuteAsync
  name: ExecuteAsync
  nameWithType: CommandMatch.ExecuteAsync
  fullName: Discord.Commands.CommandMatch.ExecuteAsync
- uid: System.Collections.Generic.IEnumerable{System.Object}
  commentId: T:System.Collections.Generic.IEnumerable{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Object>
  nameWithType: IEnumerable<Object>
  fullName: System.Collections.Generic.IEnumerable<System.Object>
  nameWithType.vb: IEnumerable(Of Object)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Object)
  name.vb: IEnumerable(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.Commands.IResult}
  commentId: T:System.Threading.Tasks.Task{Discord.Commands.IResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IResult>
  nameWithType: Task<IResult>
  fullName: System.Threading.Tasks.Task<Discord.Commands.IResult>
  nameWithType.vb: Task(Of IResult)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.Commands.IResult)
  name.vb: Task(Of IResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.IResult
    name: IResult
    nameWithType: IResult
    fullName: Discord.Commands.IResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.IResult
    name: IResult
    nameWithType: IResult
    fullName: Discord.Commands.IResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Discord.Commands.ParseResult
  commentId: T:Discord.Commands.ParseResult
  parent: Discord.Commands
  name: ParseResult
  nameWithType: ParseResult
  fullName: Discord.Commands.ParseResult
