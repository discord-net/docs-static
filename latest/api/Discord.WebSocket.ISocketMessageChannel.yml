### YamlMime:ManagedReference
items:
- uid: Discord.WebSocket.ISocketMessageChannel
  commentId: T:Discord.WebSocket.ISocketMessageChannel
  id: ISocketMessageChannel
  parent: Discord.WebSocket
  children:
  - Discord.WebSocket.ISocketMessageChannel.CachedMessages
  - Discord.WebSocket.ISocketMessageChannel.GetCachedMessage(System.UInt64)
  - Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(Discord.IMessage,Discord.Direction,System.Int32)
  - Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.Int32)
  - Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.UInt64,Discord.Direction,System.Int32)
  - Discord.WebSocket.ISocketMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  - Discord.WebSocket.ISocketMessageChannel.SendFileAsync(Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  - Discord.WebSocket.ISocketMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  - Discord.WebSocket.ISocketMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  langs:
  - csharp
  - vb
  name: ISocketMessageChannel
  nameWithType: ISocketMessageChannel
  fullName: Discord.WebSocket.ISocketMessageChannel
  type: Interface
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/ISocketMessageChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ISocketMessageChannel
    path: ../src/Discord.Net.WebSocket/Entities/Channels/ISocketMessageChannel.cs
    startLine: 10
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nRepresents a generic WebSocket-based channel that can send and receive messages.\n"
  example: []
  syntax:
    content: 'public interface ISocketMessageChannel : IMessageChannel, IChannel, ISnowflakeEntity, IEntity<ulong>'
    content.vb: >-
      Public Interface ISocketMessageChannel
          Inherits IMessageChannel
  inheritedMembers:
  - Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  - Discord.IMessageChannel.GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  - Discord.IMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  - Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  - Discord.IMessageChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  - Discord.IMessageChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  - Discord.IMessageChannel.TriggerTypingAsync(Discord.RequestOptions)
  - Discord.IMessageChannel.EnterTypingState(Discord.RequestOptions)
  - Discord.IChannel.Name
  - Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  - Discord.ISnowflakeEntity.CreatedAt
  - Discord.IEntity{System.UInt64}.Id
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Discord.WebSocket.ISocketMessageChannel.CachedMessages
  commentId: P:Discord.WebSocket.ISocketMessageChannel.CachedMessages
  id: CachedMessages
  parent: Discord.WebSocket.ISocketMessageChannel
  langs:
  - csharp
  - vb
  name: CachedMessages
  nameWithType: ISocketMessageChannel.CachedMessages
  fullName: Discord.WebSocket.ISocketMessageChannel.CachedMessages
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/ISocketMessageChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: CachedMessages
    path: ../src/Discord.Net.WebSocket/Entities/Channels/ISocketMessageChannel.cs
    startLine: 18
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets all messages in this channel&apos;s cache.\n"
  example: []
  syntax:
    content: IReadOnlyCollection<SocketMessage> CachedMessages { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.WebSocket.SocketMessage}
      description: "\nA read-only collection of WebSocket-based messages.\n"
    content.vb: ReadOnly Property CachedMessages As IReadOnlyCollection(Of SocketMessage)
  overload: Discord.WebSocket.ISocketMessageChannel.CachedMessages*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.WebSocket.ISocketMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.ISocketMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  id: SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  parent: Discord.WebSocket.ISocketMessageChannel
  langs:
  - csharp
  - vb
  name: SendMessageAsync(String, Boolean, Embed, RequestOptions)
  nameWithType: ISocketMessageChannel.SendMessageAsync(String, Boolean, Embed, RequestOptions)
  fullName: Discord.WebSocket.ISocketMessageChannel.SendMessageAsync(System.String, System.Boolean, Discord.Embed, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/ISocketMessageChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: SendMessageAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/ISocketMessageChannel.cs
    startLine: 35
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nSends a message to this message channel.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IMessageChannel.SendMessageAsync(System.String%2cSystem.Boolean%2cDiscord.Embed%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: Task<RestUserMessage> SendMessageAsync(string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null)
    parameters:
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Determines whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Function SendMessageAsync(text As String = Nothing, isTTS As Boolean = False, embed As Embed = Nothing, options As RequestOptions = Nothing) As Task(Of RestUserMessage)
  overload: Discord.WebSocket.ISocketMessageChannel.SendMessageAsync*
- uid: Discord.WebSocket.ISocketMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.WebSocket.ISocketMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  id: SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.WebSocket.ISocketMessageChannel
  langs:
  - csharp
  - vb
  name: SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: ISocketMessageChannel.SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.WebSocket.ISocketMessageChannel.SendFileAsync(System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/ISocketMessageChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: SendFileAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/ISocketMessageChannel.cs
    startLine: 53
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nSends a file to this message channel with an optional caption.\n"
  remarks: "\nThis method follows the same behavior as described in <see cref=\"!:IMessageChannel.SendFileAsync(string, string, bool, Embed, RequestOptions, bool)\"></see>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: Task<RestUserMessage> SendFileAsync(string filePath, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false)
    parameters:
    - id: filePath
      type: System.String
      description: The file path of the file.
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    - id: isSpoiler
      type: System.Boolean
      description: Whether the message attachment should be hidden as a spoiler.
    return:
      type: Task{Discord.Rest.RestUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Function SendFileAsync(filePath As String, text As String = Nothing, isTTS As Boolean = False, embed As Embed = Nothing, options As RequestOptions = Nothing, isSpoiler As Boolean = False) As Task(Of RestUserMessage)
  overload: Discord.WebSocket.ISocketMessageChannel.SendFileAsync*
- uid: Discord.WebSocket.ISocketMessageChannel.SendFileAsync(Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.WebSocket.ISocketMessageChannel.SendFileAsync(Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  id: SendFileAsync(Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.WebSocket.ISocketMessageChannel
  langs:
  - csharp
  - vb
  name: SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: ISocketMessageChannel.SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.WebSocket.ISocketMessageChannel.SendFileAsync(Stream, System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/ISocketMessageChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: SendFileAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/ISocketMessageChannel.cs
    startLine: 72
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nSends a file to this message channel with an optional caption.\n"
  remarks: "\nThis method follows the same behavior as described in <see cref=\"!:IMessageChannel.SendFileAsync(Stream, string, string, bool, Embed, RequestOptions, bool)\"></see>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: Task<RestUserMessage> SendFileAsync(Stream stream, string filename, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false)
    parameters:
    - id: stream
      type: Stream
      description: The <see cref="!:Stream"></see> of the file to be sent.
    - id: filename
      type: System.String
      description: The name of the attachment.
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    - id: isSpoiler
      type: System.Boolean
      description: Whether the message attachment should be hidden as a spoiler.
    return:
      type: Task{Discord.Rest.RestUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Function SendFileAsync(stream As Stream, filename As String, text As String = Nothing, isTTS As Boolean = False, embed As Embed = Nothing, options As RequestOptions = Nothing, isSpoiler As Boolean = False) As Task(Of RestUserMessage)
  overload: Discord.WebSocket.ISocketMessageChannel.SendFileAsync*
- uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessage(System.UInt64)
  commentId: M:Discord.WebSocket.ISocketMessageChannel.GetCachedMessage(System.UInt64)
  id: GetCachedMessage(System.UInt64)
  parent: Discord.WebSocket.ISocketMessageChannel
  langs:
  - csharp
  - vb
  name: GetCachedMessage(UInt64)
  nameWithType: ISocketMessageChannel.GetCachedMessage(UInt64)
  fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessage(System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/ISocketMessageChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetCachedMessage
    path: ../src/Discord.Net.WebSocket/Entities/Channels/ISocketMessageChannel.cs
    startLine: 93
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a cached message from this channel.\n"
  remarks: "\n<div class=\"WARNING\"><h5>warning</h5><p>\n    This method requires the use of cache, which is not enabled by default; if caching is not enabled,\n    this method will always return <code>null</code>. Please refer to\n<xref href=\"Discord.WebSocket.DiscordSocketConfig.MessageCacheSize\" data-throw-if-not-resolved=\"false\"></xref> for more details.\n</p></div>\n<p>\n    This method retrieves the message from the local WebSocket cache and does not send any additional\n    request to Discord. This message may be a message that has been deleted.\n</p>\n"
  example: []
  syntax:
    content: SocketMessage GetCachedMessage(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the message.
    return:
      type: Discord.WebSocket.SocketMessage
      description: "\nA WebSocket-based message object; <code>null</code> if it does not exist in the cache or if caching is not\nenabled.\n"
    content.vb: Function GetCachedMessage(id As ULong) As SocketMessage
  overload: Discord.WebSocket.ISocketMessageChannel.GetCachedMessage*
- uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.Int32)
  commentId: M:Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.Int32)
  id: GetCachedMessages(System.Int32)
  parent: Discord.WebSocket.ISocketMessageChannel
  langs:
  - csharp
  - vb
  name: GetCachedMessages(Int32)
  nameWithType: ISocketMessageChannel.GetCachedMessages(Int32)
  fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.Int32)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/ISocketMessageChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetCachedMessages
    path: ../src/Discord.Net.WebSocket/Entities/Channels/ISocketMessageChannel.cs
    startLine: 114
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the last N cached messages from this message channel.\n"
  remarks: "\n<div class=\"WARNING\"><h5>warning</h5><p>\n    This method requires the use of cache, which is not enabled by default; if caching is not enabled,\n    this method will always return an empty collection. Please refer to\n<xref href=\"Discord.WebSocket.DiscordSocketConfig.MessageCacheSize\" data-throw-if-not-resolved=\"false\"></xref> for more details.\n</p></div>\n<p>\n    This method retrieves the message(s) from the local WebSocket cache and does not send any additional\n    request to Discord. This read-only collection may include messages that have been deleted. The\n    maximum number of messages that can be retrieved from this method depends on the\n<xref href=\"Discord.WebSocket.DiscordSocketConfig.MessageCacheSize\" data-throw-if-not-resolved=\"false\"></xref> set.\n</p>\n"
  example: []
  syntax:
    content: IReadOnlyCollection<SocketMessage> GetCachedMessages(int limit = null)
    parameters:
    - id: limit
      type: System.Int32
      description: The number of messages to get.
    return:
      type: IReadOnlyCollection{Discord.WebSocket.SocketMessage}
      description: "\nA read-only collection of WebSocket-based messages.\n"
    content.vb: Function GetCachedMessages(limit As Integer = Nothing) As IReadOnlyCollection(Of SocketMessage)
  overload: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages*
- uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.UInt64,Discord.Direction,System.Int32)
  commentId: M:Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.UInt64,Discord.Direction,System.Int32)
  id: GetCachedMessages(System.UInt64,Discord.Direction,System.Int32)
  parent: Discord.WebSocket.ISocketMessageChannel
  langs:
  - csharp
  - vb
  name: GetCachedMessages(UInt64, Direction, Int32)
  nameWithType: ISocketMessageChannel.GetCachedMessages(UInt64, Direction, Int32)
  fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.UInt64, Discord.Direction, System.Int32)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/ISocketMessageChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetCachedMessages
    path: ../src/Discord.Net.WebSocket/Entities/Channels/ISocketMessageChannel.cs
    startLine: 138
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the last N cached messages starting from a certain message in this message channel.\n"
  remarks: "\n<div class=\"WARNING\"><h5>warning</h5><p>\n    This method requires the use of cache, which is not enabled by default; if caching is not enabled,\n    this method will always return an empty collection. Please refer to\n<xref href=\"Discord.WebSocket.DiscordSocketConfig.MessageCacheSize\" data-throw-if-not-resolved=\"false\"></xref> for more details.\n</p></div>\n<p>\n    This method retrieves the message(s) from the local WebSocket cache and does not send any additional\n    request to Discord. This read-only collection may include messages that have been deleted. The\n    maximum number of messages that can be retrieved from this method depends on the\n<xref href=\"Discord.WebSocket.DiscordSocketConfig.MessageCacheSize\" data-throw-if-not-resolved=\"false\"></xref> set.\n</p>\n"
  example: []
  syntax:
    content: IReadOnlyCollection<SocketMessage> GetCachedMessages(ulong fromMessageId, Direction dir, int limit = null)
    parameters:
    - id: fromMessageId
      type: System.UInt64
      description: The message ID to start the fetching from.
    - id: dir
      type: Discord.Direction
      description: The direction of which the message should be gotten from.
    - id: limit
      type: System.Int32
      description: The number of messages to get.
    return:
      type: IReadOnlyCollection{Discord.WebSocket.SocketMessage}
      description: "\nA read-only collection of WebSocket-based messages.\n"
    content.vb: Function GetCachedMessages(fromMessageId As ULong, dir As Direction, limit As Integer = Nothing) As IReadOnlyCollection(Of SocketMessage)
  overload: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages*
- uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(Discord.IMessage,Discord.Direction,System.Int32)
  commentId: M:Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(Discord.IMessage,Discord.Direction,System.Int32)
  id: GetCachedMessages(Discord.IMessage,Discord.Direction,System.Int32)
  parent: Discord.WebSocket.ISocketMessageChannel
  langs:
  - csharp
  - vb
  name: GetCachedMessages(IMessage, Direction, Int32)
  nameWithType: ISocketMessageChannel.GetCachedMessages(IMessage, Direction, Int32)
  fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(Discord.IMessage, Discord.Direction, System.Int32)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/ISocketMessageChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetCachedMessages
    path: ../src/Discord.Net.WebSocket/Entities/Channels/ISocketMessageChannel.cs
    startLine: 161
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the last N cached messages starting from a certain message in this message channel.\n"
  remarks: "\n<div class=\"WARNING\"><h5>warning</h5><p>\n    This method requires the use of cache, which is not enabled by default; if caching is not enabled,\n    this method will always return an empty collection. Please refer to\n<xref href=\"Discord.WebSocket.DiscordSocketConfig.MessageCacheSize\" data-throw-if-not-resolved=\"false\"></xref> for more details.\n</p></div>\n<p>\n    This method retrieves the message(s) from the local WebSocket cache and does not send any additional\n    request to Discord. This read-only collection may include messages that have been deleted. The\n    maximum number of messages that can be retrieved from this method depends on the\n<xref href=\"Discord.WebSocket.DiscordSocketConfig.MessageCacheSize\" data-throw-if-not-resolved=\"false\"></xref> set.\n</p>\n"
  example: []
  syntax:
    content: IReadOnlyCollection<SocketMessage> GetCachedMessages(IMessage fromMessage, Direction dir, int limit = null)
    parameters:
    - id: fromMessage
      type: Discord.IMessage
      description: The message to start the fetching from.
    - id: dir
      type: Discord.Direction
      description: The direction of which the message should be gotten from.
    - id: limit
      type: System.Int32
      description: The number of messages to get.
    return:
      type: IReadOnlyCollection{Discord.WebSocket.SocketMessage}
      description: "\nA read-only collection of WebSocket-based messages.\n"
    content.vb: Function GetCachedMessages(fromMessage As IMessage, dir As Direction, limit As Integer = Nothing) As IReadOnlyCollection(Of SocketMessage)
  overload: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages*
- uid: Discord.WebSocket.ISocketMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.ISocketMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  id: GetPinnedMessagesAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.ISocketMessageChannel
  langs:
  - csharp
  - vb
  name: GetPinnedMessagesAsync(RequestOptions)
  nameWithType: ISocketMessageChannel.GetPinnedMessagesAsync(RequestOptions)
  fullName: Discord.WebSocket.ISocketMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Channels/ISocketMessageChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetPinnedMessagesAsync
    path: ../src/Discord.Net.WebSocket/Entities/Channels/ISocketMessageChannel.cs
    startLine: 174
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a read-only collection of pinned messages in this channel.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<RestMessage>> GetPinnedMessagesAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{IReadOnlyCollection{Discord.Rest.RestMessage}}
      description: "\nA task that represents the asynchronous get operation for retrieving pinned messages in this channel.\nThe task result contains a read-only collection of messages found in the pinned messages.\n"
    content.vb: Function GetPinnedMessagesAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestMessage))
  overload: Discord.WebSocket.ISocketMessageChannel.GetPinnedMessagesAsync*
references:
- uid: Discord.WebSocket
  commentId: N:Discord.WebSocket
  name: Discord.WebSocket
  nameWithType: Discord.WebSocket
  fullName: Discord.WebSocket
- uid: Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  isExternal: true
  name: GetMessageAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: IMessageChannel.GetMessageAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.IMessageChannel.GetMessageAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessageAsync
    nameWithType: IMessageChannel.GetMessageAsync
    fullName: Discord.IMessageChannel.GetMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessageAsync
    nameWithType: IMessageChannel.GetMessageAsync
    fullName: Discord.IMessageChannel.GetMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessageChannel.GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  isExternal: true
  name: GetMessagesAsync(Int32, CacheMode, RequestOptions)
  nameWithType: IMessageChannel.GetMessagesAsync(Int32, CacheMode, RequestOptions)
  fullName: Discord.IMessageChannel.GetMessagesAsync(System.Int32, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IMessageChannel.GetMessagesAsync
    fullName: Discord.IMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IMessageChannel.GetMessagesAsync
    fullName: Discord.IMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  isExternal: true
  name: GetMessagesAsync(UInt64, Direction, Int32, CacheMode, RequestOptions)
  nameWithType: IMessageChannel.GetMessagesAsync(UInt64, Direction, Int32, CacheMode, RequestOptions)
  fullName: Discord.IMessageChannel.GetMessagesAsync(System.UInt64, Discord.Direction, System.Int32, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IMessageChannel.GetMessagesAsync
    fullName: Discord.IMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IMessageChannel.GetMessagesAsync
    fullName: Discord.IMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  isExternal: true
  name: GetMessagesAsync(IMessage, Direction, Int32, CacheMode, RequestOptions)
  nameWithType: IMessageChannel.GetMessagesAsync(IMessage, Direction, Int32, CacheMode, RequestOptions)
  fullName: Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage, Discord.Direction, System.Int32, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IMessageChannel.GetMessagesAsync
    fullName: Discord.IMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IMessageChannel.GetMessagesAsync
    fullName: Discord.IMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessageChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  isExternal: true
  name: DeleteMessageAsync(UInt64, RequestOptions)
  nameWithType: IMessageChannel.DeleteMessageAsync(UInt64, RequestOptions)
  fullName: Discord.IMessageChannel.DeleteMessageAsync(System.UInt64, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
    name: DeleteMessageAsync
    nameWithType: IMessageChannel.DeleteMessageAsync
    fullName: Discord.IMessageChannel.DeleteMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
    name: DeleteMessageAsync
    nameWithType: IMessageChannel.DeleteMessageAsync
    fullName: Discord.IMessageChannel.DeleteMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessageChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  name: DeleteMessageAsync(IMessage, RequestOptions)
  nameWithType: IMessageChannel.DeleteMessageAsync(IMessage, RequestOptions)
  fullName: Discord.IMessageChannel.DeleteMessageAsync(Discord.IMessage, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
    name: DeleteMessageAsync
    nameWithType: IMessageChannel.DeleteMessageAsync
    fullName: Discord.IMessageChannel.DeleteMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
    name: DeleteMessageAsync
    nameWithType: IMessageChannel.DeleteMessageAsync
    fullName: Discord.IMessageChannel.DeleteMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessageChannel.TriggerTypingAsync(Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.TriggerTypingAsync(Discord.RequestOptions)
  parent: Discord.IMessageChannel
  name: TriggerTypingAsync(RequestOptions)
  nameWithType: IMessageChannel.TriggerTypingAsync(RequestOptions)
  fullName: Discord.IMessageChannel.TriggerTypingAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.TriggerTypingAsync(Discord.RequestOptions)
    name: TriggerTypingAsync
    nameWithType: IMessageChannel.TriggerTypingAsync
    fullName: Discord.IMessageChannel.TriggerTypingAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.TriggerTypingAsync(Discord.RequestOptions)
    name: TriggerTypingAsync
    nameWithType: IMessageChannel.TriggerTypingAsync
    fullName: Discord.IMessageChannel.TriggerTypingAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessageChannel.EnterTypingState(Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.EnterTypingState(Discord.RequestOptions)
  parent: Discord.IMessageChannel
  name: EnterTypingState(RequestOptions)
  nameWithType: IMessageChannel.EnterTypingState(RequestOptions)
  fullName: Discord.IMessageChannel.EnterTypingState(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.EnterTypingState(Discord.RequestOptions)
    name: EnterTypingState
    nameWithType: IMessageChannel.EnterTypingState
    fullName: Discord.IMessageChannel.EnterTypingState
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.EnterTypingState(Discord.RequestOptions)
    name: EnterTypingState
    nameWithType: IMessageChannel.EnterTypingState
    fullName: Discord.IMessageChannel.EnterTypingState
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IChannel.Name
  commentId: P:Discord.IChannel.Name
  parent: Discord.IChannel
  name: Name
  nameWithType: IChannel.Name
  fullName: Discord.IChannel.Name
- uid: Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IChannel
  name: GetUsersAsync(CacheMode, RequestOptions)
  nameWithType: IChannel.GetUsersAsync(CacheMode, RequestOptions)
  fullName: Discord.IChannel.GetUsersAsync(Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetUsersAsync
    nameWithType: IChannel.GetUsersAsync
    fullName: Discord.IChannel.GetUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetUsersAsync
    nameWithType: IChannel.GetUsersAsync
    fullName: Discord.IChannel.GetUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IChannel
  isExternal: true
  name: GetUserAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.IChannel.GetUserAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetUserAsync
    nameWithType: IChannel.GetUserAsync
    fullName: Discord.IChannel.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetUserAsync
    nameWithType: IChannel.GetUserAsync
    fullName: Discord.IChannel.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.ISnowflakeEntity.CreatedAt
  commentId: P:Discord.ISnowflakeEntity.CreatedAt
  parent: Discord.ISnowflakeEntity
  name: CreatedAt
  nameWithType: ISnowflakeEntity.CreatedAt
  fullName: Discord.ISnowflakeEntity.CreatedAt
- uid: Discord.IEntity{System.UInt64}.Id
  commentId: P:Discord.IEntity{System.UInt64}.Id
  parent: Discord.IEntity{System.UInt64}
  definition: Discord.IEntity`1.Id
  name: Id
  nameWithType: IEntity<UInt64>.Id
  fullName: Discord.IEntity<System.UInt64>.Id
  nameWithType.vb: IEntity(Of UInt64).Id
  fullName.vb: Discord.IEntity(Of System.UInt64).Id
- uid: Discord.IMessageChannel
  commentId: T:Discord.IMessageChannel
  parent: Discord
  name: IMessageChannel
  nameWithType: IMessageChannel
  fullName: Discord.IMessageChannel
- uid: Discord.IChannel
  commentId: T:Discord.IChannel
  parent: Discord
  name: IChannel
  nameWithType: IChannel
  fullName: Discord.IChannel
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IEntity`1.Id
  commentId: P:Discord.IEntity`1.Id
  name: Id
  nameWithType: IEntity<TId>.Id
  fullName: Discord.IEntity<TId>.Id
  nameWithType.vb: IEntity(Of TId).Id
  fullName.vb: Discord.IEntity(Of TId).Id
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.ISocketMessageChannel.CachedMessages*
  commentId: Overload:Discord.WebSocket.ISocketMessageChannel.CachedMessages
  name: CachedMessages
  nameWithType: ISocketMessageChannel.CachedMessages
  fullName: Discord.WebSocket.ISocketMessageChannel.CachedMessages
- uid: IReadOnlyCollection{Discord.WebSocket.SocketMessage}
  commentId: '!:IReadOnlyCollection{Discord.WebSocket.SocketMessage}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<SocketMessage>
  nameWithType: IReadOnlyCollection<SocketMessage>
  fullName: IReadOnlyCollection<Discord.WebSocket.SocketMessage>
  nameWithType.vb: IReadOnlyCollection(Of SocketMessage)
  fullName.vb: IReadOnlyCollection(Of Discord.WebSocket.SocketMessage)
  name.vb: IReadOnlyCollection(Of SocketMessage)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketMessage
    name: SocketMessage
    nameWithType: SocketMessage
    fullName: Discord.WebSocket.SocketMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketMessage
    name: SocketMessage
    nameWithType: SocketMessage
    fullName: Discord.WebSocket.SocketMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<>
  nameWithType: IReadOnlyCollection<>
  fullName: IReadOnlyCollection<>
  nameWithType.vb: IReadOnlyCollection(Of )
  fullName.vb: IReadOnlyCollection(Of )
  name.vb: IReadOnlyCollection(Of )
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  isExternal: true
  name: SendMessageAsync(String, Boolean, Embed, RequestOptions)
  nameWithType: IMessageChannel.SendMessageAsync(String, Boolean, Embed, RequestOptions)
  fullName: Discord.IMessageChannel.SendMessageAsync(System.String, System.Boolean, Discord.Embed, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
    name: SendMessageAsync
    nameWithType: IMessageChannel.SendMessageAsync
    fullName: Discord.IMessageChannel.SendMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
    name: SendMessageAsync
    nameWithType: IMessageChannel.SendMessageAsync
    fullName: Discord.IMessageChannel.SendMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.EmbedType.Rich
  commentId: F:Discord.EmbedType.Rich
  isExternal: true
- uid: Discord.Embed
  commentId: T:Discord.Embed
  parent: Discord
  name: Embed
  nameWithType: Embed
  fullName: Discord.Embed
- uid: Discord.WebSocket.ISocketMessageChannel.SendMessageAsync*
  commentId: Overload:Discord.WebSocket.ISocketMessageChannel.SendMessageAsync
  name: SendMessageAsync
  nameWithType: ISocketMessageChannel.SendMessageAsync
  fullName: Discord.WebSocket.ISocketMessageChannel.SendMessageAsync
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: Task{Discord.Rest.RestUserMessage}
  commentId: '!:Task{Discord.Rest.RestUserMessage}'
  definition: Task`1
  name: Task<RestUserMessage>
  nameWithType: Task<RestUserMessage>
  fullName: Task<Discord.Rest.RestUserMessage>
  nameWithType.vb: Task(Of RestUserMessage)
  fullName.vb: Task(Of Discord.Rest.RestUserMessage)
  name.vb: Task(Of RestUserMessage)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestUserMessage
    name: RestUserMessage
    nameWithType: RestUserMessage
    fullName: Discord.Rest.RestUserMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestUserMessage
    name: RestUserMessage
    nameWithType: RestUserMessage
    fullName: Discord.Rest.RestUserMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.ISocketMessageChannel.SendFileAsync*
  commentId: Overload:Discord.WebSocket.ISocketMessageChannel.SendFileAsync
  name: SendFileAsync
  nameWithType: ISocketMessageChannel.SendFileAsync
  fullName: Discord.WebSocket.ISocketMessageChannel.SendFileAsync
- uid: Stream
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: Stream
- uid: Discord.WebSocket.DiscordSocketConfig.MessageCacheSize
  commentId: P:Discord.WebSocket.DiscordSocketConfig.MessageCacheSize
  isExternal: true
- uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessage*
  commentId: Overload:Discord.WebSocket.ISocketMessageChannel.GetCachedMessage
  name: GetCachedMessage
  nameWithType: ISocketMessageChannel.GetCachedMessage
  fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessage
- uid: System.UInt64
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Discord.WebSocket.SocketMessage
  commentId: T:Discord.WebSocket.SocketMessage
  parent: Discord.WebSocket
  name: SocketMessage
  nameWithType: SocketMessage
  fullName: Discord.WebSocket.SocketMessage
- uid: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages*
  commentId: Overload:Discord.WebSocket.ISocketMessageChannel.GetCachedMessages
  name: GetCachedMessages
  nameWithType: ISocketMessageChannel.GetCachedMessages
  fullName: Discord.WebSocket.ISocketMessageChannel.GetCachedMessages
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Discord.Direction
  commentId: T:Discord.Direction
  parent: Discord
  name: Direction
  nameWithType: Direction
  fullName: Discord.Direction
- uid: Discord.IMessage
  commentId: T:Discord.IMessage
  parent: Discord
  name: IMessage
  nameWithType: IMessage
  fullName: Discord.IMessage
- uid: Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  parent: Discord.IMessageChannel
  name: GetPinnedMessagesAsync(RequestOptions)
  nameWithType: IMessageChannel.GetPinnedMessagesAsync(RequestOptions)
  fullName: Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
    name: GetPinnedMessagesAsync
    nameWithType: IMessageChannel.GetPinnedMessagesAsync
    fullName: Discord.IMessageChannel.GetPinnedMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
    name: GetPinnedMessagesAsync
    nameWithType: IMessageChannel.GetPinnedMessagesAsync
    fullName: Discord.IMessageChannel.GetPinnedMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.ISocketMessageChannel.GetPinnedMessagesAsync*
  commentId: Overload:Discord.WebSocket.ISocketMessageChannel.GetPinnedMessagesAsync
  name: GetPinnedMessagesAsync
  nameWithType: ISocketMessageChannel.GetPinnedMessagesAsync
  fullName: Discord.WebSocket.ISocketMessageChannel.GetPinnedMessagesAsync
- uid: Task{IReadOnlyCollection{Discord.Rest.RestMessage}}
  commentId: '!:Task{IReadOnlyCollection{Discord.Rest.RestMessage}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<RestMessage>>
  nameWithType: Task<IReadOnlyCollection<RestMessage>>
  fullName: Task<IReadOnlyCollection<Discord.Rest.RestMessage>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestMessage))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.Rest.RestMessage))
  name.vb: Task(Of IReadOnlyCollection(Of RestMessage))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestMessage
    name: RestMessage
    nameWithType: RestMessage
    fullName: Discord.Rest.RestMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestMessage
    name: RestMessage
    nameWithType: RestMessage
    fullName: Discord.Rest.RestMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
