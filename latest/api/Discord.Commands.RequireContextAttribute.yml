### YamlMime:ManagedReference
items:
- uid: Discord.Commands.RequireContextAttribute
  commentId: T:Discord.Commands.RequireContextAttribute
  id: RequireContextAttribute
  parent: Discord.Commands
  children:
  - Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
  - Discord.Commands.RequireContextAttribute.CheckPermissionsAsync(Discord.Commands.ICommandContext,Discord.Commands.CommandInfo,System.IServiceProvider)
  - Discord.Commands.RequireContextAttribute.Contexts
  - Discord.Commands.RequireContextAttribute.ErrorMessage
  langs:
  - csharp
  - vb
  name: RequireContextAttribute
  nameWithType: RequireContextAttribute
  fullName: Discord.Commands.RequireContextAttribute
  type: Class
  source:
    remote:
      path: src/Discord.Net.Commands/Attributes/Preconditions/RequireContextAttribute.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RequireContextAttribute
    path: ../src/Discord.Net.Commands/Attributes/Preconditions/RequireContextAttribute.cs
    startLine: 28
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nRequires the command to be invoked in a specified context (e.g. in guild, DM).\n"
  example: []
  syntax:
    content: >-
      [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true, Inherited = true)]

      public class RequireContextAttribute : PreconditionAttribute
    content.vb: >-
      <AttributeUsage(AttributeTargets.Class Or AttributeTargets.Method, AllowMultiple:=True, Inherited:=True)>

      Public Class RequireContextAttribute
          Inherits PreconditionAttribute
  inheritance:
  - System.Object
  - System.Attribute
  - Discord.Commands.PreconditionAttribute
  inheritedMembers:
  - Discord.Commands.PreconditionAttribute.Group
  - System.Attribute.Equals(System.Object)
  - System.Attribute.GetHashCode
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.AttributeUsageAttribute
    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
    arguments:
    - type: System.AttributeTargets
      value: 68
    namedArguments:
    - name: AllowMultiple
      type: System.Boolean
      value: true
    - name: Inherited
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.Commands.RequireContextAttribute.Contexts
  commentId: P:Discord.Commands.RequireContextAttribute.Contexts
  id: Contexts
  parent: Discord.Commands.RequireContextAttribute
  langs:
  - csharp
  - vb
  name: Contexts
  nameWithType: RequireContextAttribute.Contexts
  fullName: Discord.Commands.RequireContextAttribute.Contexts
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Attributes/Preconditions/RequireContextAttribute.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Contexts
    path: ../src/Discord.Net.Commands/Attributes/Preconditions/RequireContextAttribute.cs
    startLine: 34
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets the context required to execute the command.\n"
  example: []
  syntax:
    content: public ContextType Contexts { get; }
    parameters: []
    return:
      type: Discord.Commands.ContextType
    content.vb: Public ReadOnly Property Contexts As ContextType
  overload: Discord.Commands.RequireContextAttribute.Contexts*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.RequireContextAttribute.ErrorMessage
  commentId: P:Discord.Commands.RequireContextAttribute.ErrorMessage
  id: ErrorMessage
  parent: Discord.Commands.RequireContextAttribute
  langs:
  - csharp
  - vb
  name: ErrorMessage
  nameWithType: RequireContextAttribute.ErrorMessage
  fullName: Discord.Commands.RequireContextAttribute.ErrorMessage
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Attributes/Preconditions/RequireContextAttribute.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ErrorMessage
    path: ../src/Discord.Net.Commands/Attributes/Preconditions/RequireContextAttribute.cs
    startLine: 36
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nWhen overridden in a derived class, uses the supplied string\nas the error message if the precondition doesn&apos;t pass.\nSetting this for a class that doesn&apos;t override\nthis property is a no-op.\n"
  example: []
  syntax:
    content: public override string ErrorMessage { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overrides Property ErrorMessage As String
  overridden: Discord.Commands.PreconditionAttribute.ErrorMessage
  overload: Discord.Commands.RequireContextAttribute.ErrorMessage*
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
  commentId: M:Discord.Commands.RequireContextAttribute.#ctor(Discord.Commands.ContextType)
  id: '#ctor(Discord.Commands.ContextType)'
  parent: Discord.Commands.RequireContextAttribute
  langs:
  - csharp
  - vb
  name: RequireContextAttribute(ContextType)
  nameWithType: RequireContextAttribute.RequireContextAttribute(ContextType)
  fullName: Discord.Commands.RequireContextAttribute.RequireContextAttribute(Discord.Commands.ContextType)
  type: Constructor
  source:
    remote:
      path: src/Discord.Net.Commands/Attributes/Preconditions/RequireContextAttribute.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: .ctor
    path: ../src/Discord.Net.Commands/Attributes/Preconditions/RequireContextAttribute.cs
    startLine: 50
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: 'Requires the command to be invoked in the specified context. '
  example:
  - "\n<pre><code class=\"lang-cs\">    [Command(&quot;secret&quot;)]\n    [RequireContext(ContextType.DM | ContextType.Group)]\n    public Task PrivateOnlyAsync()\n    {\n        return ReplyAsync(&quot;shh, this command is a secret&quot;);\n    }</code></pre>\n"
  syntax:
    content: public RequireContextAttribute(ContextType contexts)
    parameters:
    - id: contexts
      type: Discord.Commands.ContextType
      description: The type of context the command can be invoked in. Multiple contexts can be specified by ORing the contexts together.
    content.vb: Public Sub New(contexts As ContextType)
  overload: Discord.Commands.RequireContextAttribute.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Commands.RequireContextAttribute.CheckPermissionsAsync(Discord.Commands.ICommandContext,Discord.Commands.CommandInfo,System.IServiceProvider)
  commentId: M:Discord.Commands.RequireContextAttribute.CheckPermissionsAsync(Discord.Commands.ICommandContext,Discord.Commands.CommandInfo,System.IServiceProvider)
  id: CheckPermissionsAsync(Discord.Commands.ICommandContext,Discord.Commands.CommandInfo,System.IServiceProvider)
  parent: Discord.Commands.RequireContextAttribute
  langs:
  - csharp
  - vb
  name: CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider)
  nameWithType: RequireContextAttribute.CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider)
  fullName: Discord.Commands.RequireContextAttribute.CheckPermissionsAsync(Discord.Commands.ICommandContext, Discord.Commands.CommandInfo, System.IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Attributes/Preconditions/RequireContextAttribute.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CheckPermissionsAsync
    path: ../src/Discord.Net.Commands/Attributes/Preconditions/RequireContextAttribute.cs
    startLine: 56
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nChecks if the <code data-dev-comment-type=\"paramref\" class=\"paramref\">command</code> has the sufficient permission to be executed.\n"
  example: []
  syntax:
    content: public override Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services)
    parameters:
    - id: context
      type: Discord.Commands.ICommandContext
      description: The context of the command.
    - id: command
      type: Discord.Commands.CommandInfo
      description: The command being executed.
    - id: services
      type: System.IServiceProvider
      description: The service collection used for dependency injection.
    return:
      type: System.Threading.Tasks.Task{Discord.Commands.PreconditionResult}
    content.vb: Public Overrides Function CheckPermissionsAsync(context As ICommandContext, command As CommandInfo, services As IServiceProvider) As Task(Of PreconditionResult)
  overridden: Discord.Commands.PreconditionAttribute.CheckPermissionsAsync(Discord.Commands.ICommandContext,Discord.Commands.CommandInfo,System.IServiceProvider)
  overload: Discord.Commands.RequireContextAttribute.CheckPermissionsAsync*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Discord.Commands
  commentId: N:Discord.Commands
  name: Discord.Commands
  nameWithType: Discord.Commands
  fullName: Discord.Commands
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Attribute
  commentId: T:System.Attribute
  parent: System
  isExternal: true
  name: Attribute
  nameWithType: Attribute
  fullName: System.Attribute
- uid: Discord.Commands.PreconditionAttribute
  commentId: T:Discord.Commands.PreconditionAttribute
  parent: Discord.Commands
  name: PreconditionAttribute
  nameWithType: PreconditionAttribute
  fullName: Discord.Commands.PreconditionAttribute
- uid: Discord.Commands.PreconditionAttribute.Group
  commentId: P:Discord.Commands.PreconditionAttribute.Group
  parent: Discord.Commands.PreconditionAttribute
  name: Group
  nameWithType: PreconditionAttribute.Group
  fullName: Discord.Commands.PreconditionAttribute.Group
- uid: System.Attribute.Equals(System.Object)
  commentId: M:System.Attribute.Equals(System.Object)
  parent: System.Attribute
  isExternal: true
  name: Equals(Object)
  nameWithType: Attribute.Equals(Object)
  fullName: System.Attribute.Equals(System.Object)
  spec.csharp:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    nameWithType: Attribute.Equals
    fullName: System.Attribute.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    nameWithType: Attribute.Equals
    fullName: System.Attribute.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.GetHashCode
  commentId: M:System.Attribute.GetHashCode
  parent: System.Attribute
  isExternal: true
  name: GetHashCode()
  nameWithType: Attribute.GetHashCode()
  fullName: System.Attribute.GetHashCode()
  spec.csharp:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    nameWithType: Attribute.GetHashCode
    fullName: System.Attribute.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    nameWithType: Attribute.GetHashCode
    fullName: System.Attribute.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Commands.RequireContextAttribute.Contexts*
  commentId: Overload:Discord.Commands.RequireContextAttribute.Contexts
  name: Contexts
  nameWithType: RequireContextAttribute.Contexts
  fullName: Discord.Commands.RequireContextAttribute.Contexts
- uid: Discord.Commands.ContextType
  commentId: T:Discord.Commands.ContextType
  parent: Discord.Commands
  name: ContextType
  nameWithType: ContextType
  fullName: Discord.Commands.ContextType
- uid: Discord.Commands.PreconditionAttribute.ErrorMessage
  commentId: P:Discord.Commands.PreconditionAttribute.ErrorMessage
  parent: Discord.Commands.PreconditionAttribute
  name: ErrorMessage
  nameWithType: PreconditionAttribute.ErrorMessage
  fullName: Discord.Commands.PreconditionAttribute.ErrorMessage
- uid: Discord.Commands.RequireContextAttribute.ErrorMessage*
  commentId: Overload:Discord.Commands.RequireContextAttribute.ErrorMessage
  name: ErrorMessage
  nameWithType: RequireContextAttribute.ErrorMessage
  fullName: Discord.Commands.RequireContextAttribute.ErrorMessage
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.Commands.RequireContextAttribute.#ctor*
  commentId: Overload:Discord.Commands.RequireContextAttribute.#ctor
  name: RequireContextAttribute
  nameWithType: RequireContextAttribute.RequireContextAttribute
  fullName: Discord.Commands.RequireContextAttribute.RequireContextAttribute
- uid: Discord.Commands.PreconditionAttribute.CheckPermissionsAsync(Discord.Commands.ICommandContext,Discord.Commands.CommandInfo,System.IServiceProvider)
  commentId: M:Discord.Commands.PreconditionAttribute.CheckPermissionsAsync(Discord.Commands.ICommandContext,Discord.Commands.CommandInfo,System.IServiceProvider)
  parent: Discord.Commands.PreconditionAttribute
  isExternal: true
  name: CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider)
  nameWithType: PreconditionAttribute.CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider)
  fullName: Discord.Commands.PreconditionAttribute.CheckPermissionsAsync(Discord.Commands.ICommandContext, Discord.Commands.CommandInfo, System.IServiceProvider)
  spec.csharp:
  - uid: Discord.Commands.PreconditionAttribute.CheckPermissionsAsync(Discord.Commands.ICommandContext,Discord.Commands.CommandInfo,System.IServiceProvider)
    name: CheckPermissionsAsync
    nameWithType: PreconditionAttribute.CheckPermissionsAsync
    fullName: Discord.Commands.PreconditionAttribute.CheckPermissionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.Commands.ICommandContext
    name: ICommandContext
    nameWithType: ICommandContext
    fullName: Discord.Commands.ICommandContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    nameWithType: CommandInfo
    fullName: Discord.Commands.CommandInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.PreconditionAttribute.CheckPermissionsAsync(Discord.Commands.ICommandContext,Discord.Commands.CommandInfo,System.IServiceProvider)
    name: CheckPermissionsAsync
    nameWithType: PreconditionAttribute.CheckPermissionsAsync
    fullName: Discord.Commands.PreconditionAttribute.CheckPermissionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.Commands.ICommandContext
    name: ICommandContext
    nameWithType: ICommandContext
    fullName: Discord.Commands.ICommandContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    nameWithType: CommandInfo
    fullName: Discord.Commands.CommandInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.RequireContextAttribute.CheckPermissionsAsync*
  commentId: Overload:Discord.Commands.RequireContextAttribute.CheckPermissionsAsync
  name: CheckPermissionsAsync
  nameWithType: RequireContextAttribute.CheckPermissionsAsync
  fullName: Discord.Commands.RequireContextAttribute.CheckPermissionsAsync
- uid: Discord.Commands.ICommandContext
  commentId: T:Discord.Commands.ICommandContext
  parent: Discord.Commands
  name: ICommandContext
  nameWithType: ICommandContext
  fullName: Discord.Commands.ICommandContext
- uid: Discord.Commands.CommandInfo
  commentId: T:Discord.Commands.CommandInfo
  parent: Discord.Commands
  name: CommandInfo
  nameWithType: CommandInfo
  fullName: Discord.Commands.CommandInfo
- uid: System.IServiceProvider
  commentId: T:System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.Threading.Tasks.Task{Discord.Commands.PreconditionResult}
  commentId: T:System.Threading.Tasks.Task{Discord.Commands.PreconditionResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<PreconditionResult>
  nameWithType: Task<PreconditionResult>
  fullName: System.Threading.Tasks.Task<Discord.Commands.PreconditionResult>
  nameWithType.vb: Task(Of PreconditionResult)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.Commands.PreconditionResult)
  name.vb: Task(Of PreconditionResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.PreconditionResult
    name: PreconditionResult
    nameWithType: PreconditionResult
    fullName: Discord.Commands.PreconditionResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.PreconditionResult
    name: PreconditionResult
    nameWithType: PreconditionResult
    fullName: Discord.Commands.PreconditionResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
