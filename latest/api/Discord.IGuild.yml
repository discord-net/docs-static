### YamlMime:ManagedReference
items:
- uid: Discord.IGuild
  commentId: T:Discord.IGuild
  id: IGuild
  parent: Discord
  children:
  - Discord.IGuild.AddBanAsync(Discord.IUser,System.Int32,System.String,Discord.RequestOptions)
  - Discord.IGuild.AddBanAsync(System.UInt64,System.Int32,System.String,Discord.RequestOptions)
  - Discord.IGuild.AddGuildUserAsync(System.UInt64,System.String,Action{Discord.AddGuildUserProperties},Discord.RequestOptions)
  - Discord.IGuild.AFKChannelId
  - Discord.IGuild.AFKTimeout
  - Discord.IGuild.ApplicationId
  - Discord.IGuild.AudioClient
  - Discord.IGuild.Available
  - Discord.IGuild.BannerId
  - Discord.IGuild.BannerUrl
  - Discord.IGuild.CreateCategoryAsync(System.String,Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  - Discord.IGuild.CreateEmoteAsync(System.String,Discord.Image,Discord.Optional{IEnumerable{Discord.IRole}},Discord.RequestOptions)
  - Discord.IGuild.CreateIntegrationAsync(System.UInt64,System.String,Discord.RequestOptions)
  - Discord.IGuild.CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)
  - Discord.IGuild.CreateTextChannelAsync(System.String,Action{Discord.TextChannelProperties},Discord.RequestOptions)
  - Discord.IGuild.CreateVoiceChannelAsync(System.String,Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  - Discord.IGuild.DefaultChannelId
  - Discord.IGuild.DefaultMessageNotifications
  - Discord.IGuild.DeleteEmoteAsync(Discord.GuildEmote,Discord.RequestOptions)
  - Discord.IGuild.Description
  - Discord.IGuild.DownloadUsersAsync
  - Discord.IGuild.EmbedChannelId
  - Discord.IGuild.Emotes
  - Discord.IGuild.EveryoneRole
  - Discord.IGuild.ExplicitContentFilter
  - Discord.IGuild.Features
  - Discord.IGuild.GetAFKChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.IGuild.GetAuditLogsAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  - Discord.IGuild.GetBanAsync(Discord.IUser,Discord.RequestOptions)
  - Discord.IGuild.GetBanAsync(System.UInt64,Discord.RequestOptions)
  - Discord.IGuild.GetBansAsync(Discord.RequestOptions)
  - Discord.IGuild.GetCategoriesAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.IGuild.GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  - Discord.IGuild.GetChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.IGuild.GetCurrentUserAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.IGuild.GetDefaultChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.IGuild.GetEmbedChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.IGuild.GetEmoteAsync(System.UInt64,Discord.RequestOptions)
  - Discord.IGuild.GetIntegrationsAsync(Discord.RequestOptions)
  - Discord.IGuild.GetInvitesAsync(Discord.RequestOptions)
  - Discord.IGuild.GetOwnerAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.IGuild.GetRole(System.UInt64)
  - Discord.IGuild.GetSystemChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.IGuild.GetTextChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  - Discord.IGuild.GetTextChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.IGuild.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  - Discord.IGuild.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.IGuild.GetVanityInviteAsync(Discord.RequestOptions)
  - Discord.IGuild.GetVoiceChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  - Discord.IGuild.GetVoiceChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.IGuild.GetVoiceRegionsAsync(Discord.RequestOptions)
  - Discord.IGuild.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  - Discord.IGuild.GetWebhooksAsync(Discord.RequestOptions)
  - Discord.IGuild.IconId
  - Discord.IGuild.IconUrl
  - Discord.IGuild.IsEmbeddable
  - Discord.IGuild.LeaveAsync(Discord.RequestOptions)
  - Discord.IGuild.MfaLevel
  - Discord.IGuild.ModifyAsync(Action{Discord.GuildProperties},Discord.RequestOptions)
  - Discord.IGuild.ModifyEmbedAsync(Action{Discord.GuildEmbedProperties},Discord.RequestOptions)
  - Discord.IGuild.ModifyEmoteAsync(Discord.GuildEmote,Action{Discord.EmoteProperties},Discord.RequestOptions)
  - Discord.IGuild.Name
  - Discord.IGuild.OwnerId
  - Discord.IGuild.PremiumSubscriptionCount
  - Discord.IGuild.PremiumTier
  - Discord.IGuild.PruneUsersAsync(System.Int32,System.Boolean,Discord.RequestOptions)
  - Discord.IGuild.RemoveBanAsync(Discord.IUser,Discord.RequestOptions)
  - Discord.IGuild.RemoveBanAsync(System.UInt64,Discord.RequestOptions)
  - Discord.IGuild.ReorderChannelsAsync(IEnumerable{Discord.ReorderChannelProperties},Discord.RequestOptions)
  - Discord.IGuild.ReorderRolesAsync(IEnumerable{Discord.ReorderRoleProperties},Discord.RequestOptions)
  - Discord.IGuild.Roles
  - Discord.IGuild.SplashId
  - Discord.IGuild.SplashUrl
  - Discord.IGuild.SystemChannelFlags
  - Discord.IGuild.SystemChannelId
  - Discord.IGuild.VanityURLCode
  - Discord.IGuild.VerificationLevel
  - Discord.IGuild.VoiceRegionId
  langs:
  - csharp
  - vb
  name: IGuild
  nameWithType: IGuild
  fullName: Discord.IGuild
  type: Interface
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: IGuild
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 10
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nRepresents a generic guild/server.\n"
  example: []
  syntax:
    content: 'public interface IGuild : IDeletable, ISnowflakeEntity, IEntity<ulong>'
    content.vb: >-
      Public Interface IGuild
          Inherits IDeletable, ISnowflakeEntity
  inheritedMembers:
  - Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  - Discord.ISnowflakeEntity.CreatedAt
  - Discord.IEntity{System.UInt64}.Id
  extensionMethods:
  - Discord.IGuild.Discord.GuildExtensions.GetWelcomeMessagesEnabled
  - Discord.IGuild.Discord.GuildExtensions.GetGuildBoostMessagesEnabled
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Discord.IGuild.Name
  commentId: P:Discord.IGuild.Name
  id: Name
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: IGuild.Name
  fullName: Discord.IGuild.Name
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Name
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 18
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the name of this guild.\n"
  example: []
  syntax:
    content: string Name { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA string containing the name of this guild.\n"
    content.vb: ReadOnly Property Name As String
  overload: Discord.IGuild.Name*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.AFKTimeout
  commentId: P:Discord.IGuild.AFKTimeout
  id: AFKTimeout
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: AFKTimeout
  nameWithType: IGuild.AFKTimeout
  fullName: Discord.IGuild.AFKTimeout
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: AFKTimeout
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 27
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the amount of time (in seconds) a user must be inactive in a voice channel for until they are\nautomatically moved to the AFK voice channel.\n"
  example: []
  syntax:
    content: int AFKTimeout { get; }
    parameters: []
    return:
      type: System.Int32
      description: "\nAn <see cref=\"!:System.Int32\"></see> representing the amount of time in seconds for a user to be marked as inactive\nand moved into the AFK voice channel.\n"
    content.vb: ReadOnly Property AFKTimeout As Integer
  overload: Discord.IGuild.AFKTimeout*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.IsEmbeddable
  commentId: P:Discord.IGuild.IsEmbeddable
  id: IsEmbeddable
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: IsEmbeddable
  nameWithType: IGuild.IsEmbeddable
  fullName: Discord.IGuild.IsEmbeddable
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: IsEmbeddable
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 34
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a value that indicates whether this guild is embeddable (i.e. can use widget).\n"
  example: []
  syntax:
    content: bool IsEmbeddable { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this guild can be embedded via widgets; otherwise <code>false</code>.\n"
    content.vb: ReadOnly Property IsEmbeddable As Boolean
  overload: Discord.IGuild.IsEmbeddable*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.DefaultMessageNotifications
  commentId: P:Discord.IGuild.DefaultMessageNotifications
  id: DefaultMessageNotifications
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: DefaultMessageNotifications
  nameWithType: IGuild.DefaultMessageNotifications
  fullName: Discord.IGuild.DefaultMessageNotifications
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: DefaultMessageNotifications
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 38
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the default message notifications for users who haven&apos;t explicitly set their notification settings.\n"
  example: []
  syntax:
    content: DefaultMessageNotifications DefaultMessageNotifications { get; }
    parameters: []
    return:
      type: Discord.DefaultMessageNotifications
    content.vb: ReadOnly Property DefaultMessageNotifications As DefaultMessageNotifications
  overload: Discord.IGuild.DefaultMessageNotifications*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.MfaLevel
  commentId: P:Discord.IGuild.MfaLevel
  id: MfaLevel
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: MfaLevel
  nameWithType: IGuild.MfaLevel
  fullName: Discord.IGuild.MfaLevel
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: MfaLevel
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 46
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the level of Multi-Factor Authentication requirements a user must fulfill before being allowed to\nperform administrative actions in this guild.\n"
  example: []
  syntax:
    content: MfaLevel MfaLevel { get; }
    parameters: []
    return:
      type: Discord.MfaLevel
      description: "\nThe level of MFA requirement.\n"
    content.vb: ReadOnly Property MfaLevel As MfaLevel
  overload: Discord.IGuild.MfaLevel*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.VerificationLevel
  commentId: P:Discord.IGuild.VerificationLevel
  id: VerificationLevel
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: VerificationLevel
  nameWithType: IGuild.VerificationLevel
  fullName: Discord.IGuild.VerificationLevel
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: VerificationLevel
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 53
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the level of requirements a user must fulfill before being allowed to post messages in this guild.\n"
  example: []
  syntax:
    content: VerificationLevel VerificationLevel { get; }
    parameters: []
    return:
      type: Discord.VerificationLevel
      description: "\nThe level of requirements.\n"
    content.vb: ReadOnly Property VerificationLevel As VerificationLevel
  overload: Discord.IGuild.VerificationLevel*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.ExplicitContentFilter
  commentId: P:Discord.IGuild.ExplicitContentFilter
  id: ExplicitContentFilter
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: ExplicitContentFilter
  nameWithType: IGuild.ExplicitContentFilter
  fullName: Discord.IGuild.ExplicitContentFilter
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ExplicitContentFilter
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 60
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the level of content filtering applied to user&apos;s content in a Guild.\n"
  example: []
  syntax:
    content: ExplicitContentFilterLevel ExplicitContentFilter { get; }
    parameters: []
    return:
      type: Discord.ExplicitContentFilterLevel
      description: "\nThe level of explicit content filtering.\n"
    content.vb: ReadOnly Property ExplicitContentFilter As ExplicitContentFilterLevel
  overload: Discord.IGuild.ExplicitContentFilter*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.IconId
  commentId: P:Discord.IGuild.IconId
  id: IconId
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: IconId
  nameWithType: IGuild.IconId
  fullName: Discord.IGuild.IconId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: IconId
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 67
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the ID of this guild&apos;s icon.\n"
  example: []
  syntax:
    content: string IconId { get; }
    parameters: []
    return:
      type: System.String
      description: "\nAn identifier for the splash image; <code>null</code> if none is set.\n"
    content.vb: ReadOnly Property IconId As String
  overload: Discord.IGuild.IconId*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.IconUrl
  commentId: P:Discord.IGuild.IconUrl
  id: IconUrl
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: IconUrl
  nameWithType: IGuild.IconUrl
  fullName: Discord.IGuild.IconUrl
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: IconUrl
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 74
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the URL of this guild&apos;s icon.\n"
  example: []
  syntax:
    content: string IconUrl { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA URL pointing to the guild&apos;s icon; <code>null</code> if none is set.\n"
    content.vb: ReadOnly Property IconUrl As String
  overload: Discord.IGuild.IconUrl*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.SplashId
  commentId: P:Discord.IGuild.SplashId
  id: SplashId
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: SplashId
  nameWithType: IGuild.SplashId
  fullName: Discord.IGuild.SplashId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: SplashId
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 81
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the ID of this guild&apos;s splash image.\n"
  example: []
  syntax:
    content: string SplashId { get; }
    parameters: []
    return:
      type: System.String
      description: "\nAn identifier for the splash image; <code>null</code> if none is set.\n"
    content.vb: ReadOnly Property SplashId As String
  overload: Discord.IGuild.SplashId*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.SplashUrl
  commentId: P:Discord.IGuild.SplashUrl
  id: SplashUrl
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: SplashUrl
  nameWithType: IGuild.SplashUrl
  fullName: Discord.IGuild.SplashUrl
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: SplashUrl
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 88
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the URL of this guild&apos;s splash image.\n"
  example: []
  syntax:
    content: string SplashUrl { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA URL pointing to the guild&apos;s splash image; <code>null</code> if none is set.\n"
    content.vb: ReadOnly Property SplashUrl As String
  overload: Discord.IGuild.SplashUrl*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.Available
  commentId: P:Discord.IGuild.Available
  id: Available
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: Available
  nameWithType: IGuild.Available
  fullName: Discord.IGuild.Available
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Available
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 101
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nDetermines if this guild is currently connected and ready to be used.\n"
  remarks: "\n<div class=\"NOTE\"><h5>note</h5><p>\n    This property only applies to a WebSocket-based client.\n</p></div>\nThis boolean is used to determine if the guild is currently connected to the WebSocket and is ready to be used/accessed.\n"
  example: []
  syntax:
    content: bool Available { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this guild is currently connected and ready to be used; otherwise <code>false</code>.\n"
    content.vb: ReadOnly Property Available As Boolean
  overload: Discord.IGuild.Available*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.AFKChannelId
  commentId: P:Discord.IGuild.AFKChannelId
  id: AFKChannelId
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: AFKChannelId
  nameWithType: IGuild.AFKChannelId
  fullName: Discord.IGuild.AFKChannelId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: AFKChannelId
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 110
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the ID of the AFK voice channel for this guild.\n"
  example: []
  syntax:
    content: ulong? AFKChannelId { get; }
    parameters: []
    return:
      type: System.Nullable{System.UInt64}
      description: "\nA <see cref=\"!:System.UInt64\"></see> representing the snowflake identifier of the AFK voice channel; <code>null</code> if\nnone is set.\n"
    content.vb: ReadOnly Property AFKChannelId As ULong?
  overload: Discord.IGuild.AFKChannelId*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.DefaultChannelId
  commentId: P:Discord.IGuild.DefaultChannelId
  id: DefaultChannelId
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: DefaultChannelId
  nameWithType: IGuild.DefaultChannelId
  fullName: Discord.IGuild.DefaultChannelId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: DefaultChannelId
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 125
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the ID of the default channel for this guild.\n"
  remarks: "\nThis property retrieves the snowflake identifier of the first viewable text channel for this guild.\n<div class=\"WARNING\"><h5>warning</h5><p>\n    This channel does not guarantee the user can send message to it, as it only looks for the first viewable\n    text channel.\n</p></div>\n"
  example: []
  syntax:
    content: ulong DefaultChannelId { get; }
    parameters: []
    return:
      type: System.UInt64
      description: "\nA <see cref=\"!:System.UInt64\"></see> representing the snowflake identifier of the default text channel; <code>0</code> if\nnone can be found.\n"
    content.vb: ReadOnly Property DefaultChannelId As ULong
  overload: Discord.IGuild.DefaultChannelId*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.EmbedChannelId
  commentId: P:Discord.IGuild.EmbedChannelId
  id: EmbedChannelId
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: EmbedChannelId
  nameWithType: IGuild.EmbedChannelId
  fullName: Discord.IGuild.EmbedChannelId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: EmbedChannelId
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 133
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the ID of the widget embed channel of this guild.\n"
  example: []
  syntax:
    content: ulong? EmbedChannelId { get; }
    parameters: []
    return:
      type: System.Nullable{System.UInt64}
      description: "\nA <see cref=\"!:System.UInt64\"></see> representing the snowflake identifier of the embedded channel found within the\nwidget settings of this guild; <code>null</code> if none is set.\n"
    content.vb: ReadOnly Property EmbedChannelId As ULong?
  overload: Discord.IGuild.EmbedChannelId*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.SystemChannelId
  commentId: P:Discord.IGuild.SystemChannelId
  id: SystemChannelId
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: SystemChannelId
  nameWithType: IGuild.SystemChannelId
  fullName: Discord.IGuild.SystemChannelId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: SystemChannelId
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 141
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the ID of the channel where randomized welcome messages are sent.\n"
  example: []
  syntax:
    content: ulong? SystemChannelId { get; }
    parameters: []
    return:
      type: System.Nullable{System.UInt64}
      description: "\nA <see cref=\"!:System.UInt64\"></see> representing the snowflake identifier of the system channel where randomized\nwelcome messages are sent; <code>null</code> if none is set.\n"
    content.vb: ReadOnly Property SystemChannelId As ULong?
  overload: Discord.IGuild.SystemChannelId*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.OwnerId
  commentId: P:Discord.IGuild.OwnerId
  id: OwnerId
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: OwnerId
  nameWithType: IGuild.OwnerId
  fullName: Discord.IGuild.OwnerId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: OwnerId
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 148
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the ID of the user that owns this guild.\n"
  example: []
  syntax:
    content: ulong OwnerId { get; }
    parameters: []
    return:
      type: System.UInt64
      description: "\nA <see cref=\"!:System.UInt64\"></see> representing the snowflake identifier of the user that owns this guild.\n"
    content.vb: ReadOnly Property OwnerId As ULong
  overload: Discord.IGuild.OwnerId*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.ApplicationId
  commentId: P:Discord.IGuild.ApplicationId
  id: ApplicationId
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: ApplicationId
  nameWithType: IGuild.ApplicationId
  fullName: Discord.IGuild.ApplicationId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ApplicationId
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 155
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the application ID of the guild creator if it is bot-created.\n"
  example: []
  syntax:
    content: ulong? ApplicationId { get; }
    parameters: []
    return:
      type: System.Nullable{System.UInt64}
      description: "\nA <see cref=\"!:System.UInt64\"></see> representing the snowflake identifier of the application ID that created this guild, or <code>null</code> if it was not bot-created.\n"
    content.vb: ReadOnly Property ApplicationId As ULong?
  overload: Discord.IGuild.ApplicationId*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.VoiceRegionId
  commentId: P:Discord.IGuild.VoiceRegionId
  id: VoiceRegionId
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: VoiceRegionId
  nameWithType: IGuild.VoiceRegionId
  fullName: Discord.IGuild.VoiceRegionId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: VoiceRegionId
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 162
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the ID of the region hosting this guild&apos;s voice channels.\n"
  example: []
  syntax:
    content: string VoiceRegionId { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA string containing the identifier for the voice region that this guild uses (e.g. <code>eu-central</code>).\n"
    content.vb: ReadOnly Property VoiceRegionId As String
  overload: Discord.IGuild.VoiceRegionId*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.AudioClient
  commentId: P:Discord.IGuild.AudioClient
  id: AudioClient
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: AudioClient
  nameWithType: IGuild.AudioClient
  fullName: Discord.IGuild.AudioClient
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: AudioClient
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 169
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the <xref href=\"Discord.Audio.IAudioClient\" data-throw-if-not-resolved=\"false\"></xref> currently associated with this guild.\n"
  example: []
  syntax:
    content: IAudioClient AudioClient { get; }
    parameters: []
    return:
      type: Discord.Audio.IAudioClient
      description: "\nAn <xref href=\"Discord.Audio.IAudioClient\" data-throw-if-not-resolved=\"false\"></xref> currently associated with this guild.\n"
    content.vb: ReadOnly Property AudioClient As IAudioClient
  overload: Discord.IGuild.AudioClient*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.EveryoneRole
  commentId: P:Discord.IGuild.EveryoneRole
  id: EveryoneRole
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: EveryoneRole
  nameWithType: IGuild.EveryoneRole
  fullName: Discord.IGuild.EveryoneRole
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: EveryoneRole
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 176
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the built-in role containing all users in this guild.\n"
  example: []
  syntax:
    content: IRole EveryoneRole { get; }
    parameters: []
    return:
      type: Discord.IRole
      description: "\nA role object that represents an <code>@everyone</code> role in this guild.\n"
    content.vb: ReadOnly Property EveryoneRole As IRole
  overload: Discord.IGuild.EveryoneRole*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.Emotes
  commentId: P:Discord.IGuild.Emotes
  id: Emotes
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: Emotes
  nameWithType: IGuild.Emotes
  fullName: Discord.IGuild.Emotes
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Emotes
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 183
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a collection of all custom emotes for this guild.\n"
  example: []
  syntax:
    content: IReadOnlyCollection<GuildEmote> Emotes { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.GuildEmote}
      description: "\nA read-only collection of all custom emotes for this guild.\n"
    content.vb: ReadOnly Property Emotes As IReadOnlyCollection(Of GuildEmote)
  overload: Discord.IGuild.Emotes*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.Features
  commentId: P:Discord.IGuild.Features
  id: Features
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: Features
  nameWithType: IGuild.Features
  fullName: Discord.IGuild.Features
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Features
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 190
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a collection of all extra features added to this guild.\n"
  example: []
  syntax:
    content: IReadOnlyCollection<string> Features { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{System.String}
      description: "\nA read-only collection of enabled features in this guild.\n"
    content.vb: ReadOnly Property Features As IReadOnlyCollection(Of String)
  overload: Discord.IGuild.Features*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.Roles
  commentId: P:Discord.IGuild.Roles
  id: Roles
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: Roles
  nameWithType: IGuild.Roles
  fullName: Discord.IGuild.Roles
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Roles
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 197
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a collection of all roles in this guild.\n"
  example: []
  syntax:
    content: IReadOnlyCollection<IRole> Roles { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.IRole}
      description: "\nA read-only collection of roles found within this guild.\n"
    content.vb: ReadOnly Property Roles As IReadOnlyCollection(Of IRole)
  overload: Discord.IGuild.Roles*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.PremiumTier
  commentId: P:Discord.IGuild.PremiumTier
  id: PremiumTier
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: PremiumTier
  nameWithType: IGuild.PremiumTier
  fullName: Discord.IGuild.PremiumTier
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: PremiumTier
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 204
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the tier of guild boosting in this guild.\n"
  example: []
  syntax:
    content: PremiumTier PremiumTier { get; }
    parameters: []
    return:
      type: Discord.PremiumTier
      description: "\nThe tier of guild boosting in this guild.\n"
    content.vb: ReadOnly Property PremiumTier As PremiumTier
  overload: Discord.IGuild.PremiumTier*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.BannerId
  commentId: P:Discord.IGuild.BannerId
  id: BannerId
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: BannerId
  nameWithType: IGuild.BannerId
  fullName: Discord.IGuild.BannerId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: BannerId
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 211
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the identifier for this guilds banner image.\n"
  example: []
  syntax:
    content: string BannerId { get; }
    parameters: []
    return:
      type: System.String
      description: "\nAn identifier for the banner image; <code>null</code> if none is set.\n"
    content.vb: ReadOnly Property BannerId As String
  overload: Discord.IGuild.BannerId*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.BannerUrl
  commentId: P:Discord.IGuild.BannerUrl
  id: BannerUrl
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: BannerUrl
  nameWithType: IGuild.BannerUrl
  fullName: Discord.IGuild.BannerUrl
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: BannerUrl
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 218
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the URL of this guild&apos;s banner image.\n"
  example: []
  syntax:
    content: string BannerUrl { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA URL pointing to the guild&apos;s banner image; <code>null</code> if none is set.\n"
    content.vb: ReadOnly Property BannerUrl As String
  overload: Discord.IGuild.BannerUrl*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.VanityURLCode
  commentId: P:Discord.IGuild.VanityURLCode
  id: VanityURLCode
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: VanityURLCode
  nameWithType: IGuild.VanityURLCode
  fullName: Discord.IGuild.VanityURLCode
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: VanityURLCode
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 225
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the code for this guild&apos;s vanity invite URL.\n"
  example: []
  syntax:
    content: string VanityURLCode { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA string containing the vanity invite code for this guild; <code>null</code> if none is set.\n"
    content.vb: ReadOnly Property VanityURLCode As String
  overload: Discord.IGuild.VanityURLCode*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.SystemChannelFlags
  commentId: P:Discord.IGuild.SystemChannelFlags
  id: SystemChannelFlags
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: SystemChannelFlags
  nameWithType: IGuild.SystemChannelFlags
  fullName: Discord.IGuild.SystemChannelFlags
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: SystemChannelFlags
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 232
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the flags for the types of system channel messages that are disabled.\n"
  example: []
  syntax:
    content: SystemChannelMessageDeny SystemChannelFlags { get; }
    parameters: []
    return:
      type: Discord.SystemChannelMessageDeny
      description: "\nThe flags for the types of system channel messages that are disabled.\n"
    content.vb: ReadOnly Property SystemChannelFlags As SystemChannelMessageDeny
  overload: Discord.IGuild.SystemChannelFlags*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.Description
  commentId: P:Discord.IGuild.Description
  id: Description
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: IGuild.Description
  fullName: Discord.IGuild.Description
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Description
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 239
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the description for the guild.\n"
  example: []
  syntax:
    content: string Description { get; }
    parameters: []
    return:
      type: System.String
      description: "\nThe description for the guild; <code>null</code> if none is set.\n"
    content.vb: ReadOnly Property Description As String
  overload: Discord.IGuild.Description*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.PremiumSubscriptionCount
  commentId: P:Discord.IGuild.PremiumSubscriptionCount
  id: PremiumSubscriptionCount
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: PremiumSubscriptionCount
  nameWithType: IGuild.PremiumSubscriptionCount
  fullName: Discord.IGuild.PremiumSubscriptionCount
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: PremiumSubscriptionCount
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 249
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the number of premium subscribers of this guild.\n"
  remarks: "\nThis is the number of users who have boosted this guild.\n"
  example: []
  syntax:
    content: int PremiumSubscriptionCount { get; }
    parameters: []
    return:
      type: System.Int32
      description: "\nThe number of premium subscribers of this guild.\n"
    content.vb: ReadOnly Property PremiumSubscriptionCount As Integer
  overload: Discord.IGuild.PremiumSubscriptionCount*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuild.ModifyAsync(Action{Discord.GuildProperties},Discord.RequestOptions)
  commentId: M:Discord.IGuild.ModifyAsync(Action{Discord.GuildProperties},Discord.RequestOptions)
  id: ModifyAsync(Action{Discord.GuildProperties},Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: ModifyAsync(Action<GuildProperties>, RequestOptions)
  nameWithType: IGuild.ModifyAsync(Action<GuildProperties>, RequestOptions)
  fullName: Discord.IGuild.ModifyAsync(Action<Discord.GuildProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ModifyAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 259
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nModifies this guild.\n"
  example: []
  syntax:
    content: Task ModifyAsync(Action<GuildProperties> func, RequestOptions options = null)
    parameters:
    - id: func
      type: Action{Discord.GuildProperties}
      description: The delegate containing the properties to modify the guild with.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task
      description: "\nA task that represents the asynchronous modification operation.\n"
    content.vb: Function ModifyAsync(func As Action(Of GuildProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.IGuild.ModifyAsync*
  nameWithType.vb: IGuild.ModifyAsync(Action(Of GuildProperties), RequestOptions)
  fullName.vb: Discord.IGuild.ModifyAsync(Action(Of Discord.GuildProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of GuildProperties), RequestOptions)
- uid: Discord.IGuild.ModifyEmbedAsync(Action{Discord.GuildEmbedProperties},Discord.RequestOptions)
  commentId: M:Discord.IGuild.ModifyEmbedAsync(Action{Discord.GuildEmbedProperties},Discord.RequestOptions)
  id: ModifyEmbedAsync(Action{Discord.GuildEmbedProperties},Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: ModifyEmbedAsync(Action<GuildEmbedProperties>, RequestOptions)
  nameWithType: IGuild.ModifyEmbedAsync(Action<GuildEmbedProperties>, RequestOptions)
  fullName: Discord.IGuild.ModifyEmbedAsync(Action<Discord.GuildEmbedProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ModifyEmbedAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 268
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nModifies this guild&apos;s embed channel.\n"
  example: []
  syntax:
    content: Task ModifyEmbedAsync(Action<GuildEmbedProperties> func, RequestOptions options = null)
    parameters:
    - id: func
      type: Action{Discord.GuildEmbedProperties}
      description: The delegate containing the properties to modify the guild widget with.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task
      description: "\nA task that represents the asynchronous modification operation.\n"
    content.vb: Function ModifyEmbedAsync(func As Action(Of GuildEmbedProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.IGuild.ModifyEmbedAsync*
  nameWithType.vb: IGuild.ModifyEmbedAsync(Action(Of GuildEmbedProperties), RequestOptions)
  fullName.vb: Discord.IGuild.ModifyEmbedAsync(Action(Of Discord.GuildEmbedProperties), Discord.RequestOptions)
  name.vb: ModifyEmbedAsync(Action(Of GuildEmbedProperties), RequestOptions)
- uid: Discord.IGuild.ReorderChannelsAsync(IEnumerable{Discord.ReorderChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.IGuild.ReorderChannelsAsync(IEnumerable{Discord.ReorderChannelProperties},Discord.RequestOptions)
  id: ReorderChannelsAsync(IEnumerable{Discord.ReorderChannelProperties},Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: ReorderChannelsAsync(IEnumerable<ReorderChannelProperties>, RequestOptions)
  nameWithType: IGuild.ReorderChannelsAsync(IEnumerable<ReorderChannelProperties>, RequestOptions)
  fullName: Discord.IGuild.ReorderChannelsAsync(IEnumerable<Discord.ReorderChannelProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ReorderChannelsAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 277
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nBulk-modifies the order of channels in this guild.\n"
  example: []
  syntax:
    content: Task ReorderChannelsAsync(IEnumerable<ReorderChannelProperties> args, RequestOptions options = null)
    parameters:
    - id: args
      type: IEnumerable{Discord.ReorderChannelProperties}
      description: The properties used to modify the channel positions with.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task
      description: "\nA task that represents the asynchronous reorder operation.\n"
    content.vb: Function ReorderChannelsAsync(args As IEnumerable(Of ReorderChannelProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.IGuild.ReorderChannelsAsync*
  nameWithType.vb: IGuild.ReorderChannelsAsync(IEnumerable(Of ReorderChannelProperties), RequestOptions)
  fullName.vb: Discord.IGuild.ReorderChannelsAsync(IEnumerable(Of Discord.ReorderChannelProperties), Discord.RequestOptions)
  name.vb: ReorderChannelsAsync(IEnumerable(Of ReorderChannelProperties), RequestOptions)
- uid: Discord.IGuild.ReorderRolesAsync(IEnumerable{Discord.ReorderRoleProperties},Discord.RequestOptions)
  commentId: M:Discord.IGuild.ReorderRolesAsync(IEnumerable{Discord.ReorderRoleProperties},Discord.RequestOptions)
  id: ReorderRolesAsync(IEnumerable{Discord.ReorderRoleProperties},Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: ReorderRolesAsync(IEnumerable<ReorderRoleProperties>, RequestOptions)
  nameWithType: IGuild.ReorderRolesAsync(IEnumerable<ReorderRoleProperties>, RequestOptions)
  fullName: Discord.IGuild.ReorderRolesAsync(IEnumerable<Discord.ReorderRoleProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ReorderRolesAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 286
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nBulk-modifies the order of roles in this guild.\n"
  example: []
  syntax:
    content: Task ReorderRolesAsync(IEnumerable<ReorderRoleProperties> args, RequestOptions options = null)
    parameters:
    - id: args
      type: IEnumerable{Discord.ReorderRoleProperties}
      description: The properties used to modify the role positions with.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task
      description: "\nA task that represents the asynchronous reorder operation.\n"
    content.vb: Function ReorderRolesAsync(args As IEnumerable(Of ReorderRoleProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.IGuild.ReorderRolesAsync*
  nameWithType.vb: IGuild.ReorderRolesAsync(IEnumerable(Of ReorderRoleProperties), RequestOptions)
  fullName.vb: Discord.IGuild.ReorderRolesAsync(IEnumerable(Of Discord.ReorderRoleProperties), Discord.RequestOptions)
  name.vb: ReorderRolesAsync(IEnumerable(Of ReorderRoleProperties), RequestOptions)
- uid: Discord.IGuild.LeaveAsync(Discord.RequestOptions)
  commentId: M:Discord.IGuild.LeaveAsync(Discord.RequestOptions)
  id: LeaveAsync(Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: LeaveAsync(RequestOptions)
  nameWithType: IGuild.LeaveAsync(RequestOptions)
  fullName: Discord.IGuild.LeaveAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: LeaveAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 300
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nLeaves this guild.\n"
  remarks: "\nThis method will make the currently logged-in user leave the guild.\n<div class=\"NOTE\"><h5>note</h5><p>\n    If the user is the owner of this guild, use <xref href=\"Discord.IDeletable.DeleteAsync(Discord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref> instead.\n</p></div>\n"
  example: []
  syntax:
    content: Task LeaveAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task
      description: "\nA task that represents the asynchronous leave operation.\n"
    content.vb: Function LeaveAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.IGuild.LeaveAsync*
- uid: Discord.IGuild.GetBansAsync(Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetBansAsync(Discord.RequestOptions)
  id: GetBansAsync(Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: GetBansAsync(RequestOptions)
  nameWithType: IGuild.GetBansAsync(RequestOptions)
  fullName: Discord.IGuild.GetBansAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetBansAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 311
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a collection of all users banned in this guild.\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<IBan>> GetBansAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{IReadOnlyCollection{Discord.IBan}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection of\nban objects that this guild currently possesses, with each object containing the user banned and reason\nbehind the ban.\n"
    content.vb: Function GetBansAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of IBan))
  overload: Discord.IGuild.GetBansAsync*
- uid: Discord.IGuild.GetBanAsync(Discord.IUser,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetBanAsync(Discord.IUser,Discord.RequestOptions)
  id: GetBanAsync(Discord.IUser,Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: GetBanAsync(IUser, RequestOptions)
  nameWithType: IGuild.GetBanAsync(IUser, RequestOptions)
  fullName: Discord.IGuild.GetBanAsync(Discord.IUser, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetBanAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 321
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a ban object for a banned user.\n"
  example: []
  syntax:
    content: Task<IBan> GetBanAsync(IUser user, RequestOptions options = null)
    parameters:
    - id: user
      type: Discord.IUser
      description: The banned user.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.IBan}
      description: "\nA task that represents the asynchronous get operation. The task result contains a ban object, which\ncontains the user information and the reason for the ban; <code>null</code> if the ban entry cannot be found.\n"
    content.vb: Function GetBanAsync(user As IUser, options As RequestOptions = Nothing) As Task(Of IBan)
  overload: Discord.IGuild.GetBanAsync*
- uid: Discord.IGuild.GetBanAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetBanAsync(System.UInt64,Discord.RequestOptions)
  id: GetBanAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: GetBanAsync(UInt64, RequestOptions)
  nameWithType: IGuild.GetBanAsync(UInt64, RequestOptions)
  fullName: Discord.IGuild.GetBanAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetBanAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 331
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a ban object for a banned user.\n"
  example: []
  syntax:
    content: Task<IBan> GetBanAsync(ulong userId, RequestOptions options = null)
    parameters:
    - id: userId
      type: System.UInt64
      description: The snowflake identifier for the banned user.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.IBan}
      description: "\nA task that represents the asynchronous get operation. The task result contains a ban object, which\ncontains the user information and the reason for the ban; <code>null</code> if the ban entry cannot be found.\n"
    content.vb: Function GetBanAsync(userId As ULong, options As RequestOptions = Nothing) As Task(Of IBan)
  overload: Discord.IGuild.GetBanAsync*
- uid: Discord.IGuild.AddBanAsync(Discord.IUser,System.Int32,System.String,Discord.RequestOptions)
  commentId: M:Discord.IGuild.AddBanAsync(Discord.IUser,System.Int32,System.String,Discord.RequestOptions)
  id: AddBanAsync(Discord.IUser,System.Int32,System.String,Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: AddBanAsync(IUser, Int32, String, RequestOptions)
  nameWithType: IGuild.AddBanAsync(IUser, Int32, String, RequestOptions)
  fullName: Discord.IGuild.AddBanAsync(Discord.IUser, System.Int32, System.String, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: AddBanAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 343
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nBans the user from this guild and optionally prunes their recent messages.\n"
  example: []
  syntax:
    content: Task AddBanAsync(IUser user, int pruneDays = 0, string reason = null, RequestOptions options = null)
    parameters:
    - id: user
      type: Discord.IUser
      description: The user to ban.
    - id: pruneDays
      type: System.Int32
      description: The number of days to remove messages from this user for, and this number must be between [0, 7].
    - id: reason
      type: System.String
      description: The reason of the ban to be written in the audit log.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task
      description: "\nA task that represents the asynchronous add operation for the ban.\n"
    content.vb: Function AddBanAsync(user As IUser, pruneDays As Integer = 0, reason As String = Nothing, options As RequestOptions = Nothing) As Task
  overload: Discord.IGuild.AddBanAsync*
- uid: Discord.IGuild.AddBanAsync(System.UInt64,System.Int32,System.String,Discord.RequestOptions)
  commentId: M:Discord.IGuild.AddBanAsync(System.UInt64,System.Int32,System.String,Discord.RequestOptions)
  id: AddBanAsync(System.UInt64,System.Int32,System.String,Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: AddBanAsync(UInt64, Int32, String, RequestOptions)
  nameWithType: IGuild.AddBanAsync(UInt64, Int32, String, RequestOptions)
  fullName: Discord.IGuild.AddBanAsync(System.UInt64, System.Int32, System.String, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: AddBanAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 355
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nBans the user from this guild and optionally prunes their recent messages.\n"
  example: []
  syntax:
    content: Task AddBanAsync(ulong userId, int pruneDays = 0, string reason = null, RequestOptions options = null)
    parameters:
    - id: userId
      type: System.UInt64
      description: The snowflake ID of the user to ban.
    - id: pruneDays
      type: System.Int32
      description: The number of days to remove messages from this user for, and this number must be between [0, 7].
    - id: reason
      type: System.String
      description: The reason of the ban to be written in the audit log.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task
      description: "\nA task that represents the asynchronous add operation for the ban.\n"
    content.vb: Function AddBanAsync(userId As ULong, pruneDays As Integer = 0, reason As String = Nothing, options As RequestOptions = Nothing) As Task
  overload: Discord.IGuild.AddBanAsync*
- uid: Discord.IGuild.RemoveBanAsync(Discord.IUser,Discord.RequestOptions)
  commentId: M:Discord.IGuild.RemoveBanAsync(Discord.IUser,Discord.RequestOptions)
  id: RemoveBanAsync(Discord.IUser,Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: RemoveBanAsync(IUser, RequestOptions)
  nameWithType: IGuild.RemoveBanAsync(IUser, RequestOptions)
  fullName: Discord.IGuild.RemoveBanAsync(Discord.IUser, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: RemoveBanAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 364
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nUnbans the user if they are currently banned.\n"
  example: []
  syntax:
    content: Task RemoveBanAsync(IUser user, RequestOptions options = null)
    parameters:
    - id: user
      type: Discord.IUser
      description: The user to be unbanned.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task
      description: "\nA task that represents the asynchronous removal operation for the ban.\n"
    content.vb: Function RemoveBanAsync(user As IUser, options As RequestOptions = Nothing) As Task
  overload: Discord.IGuild.RemoveBanAsync*
- uid: Discord.IGuild.RemoveBanAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.IGuild.RemoveBanAsync(System.UInt64,Discord.RequestOptions)
  id: RemoveBanAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: RemoveBanAsync(UInt64, RequestOptions)
  nameWithType: IGuild.RemoveBanAsync(UInt64, RequestOptions)
  fullName: Discord.IGuild.RemoveBanAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: RemoveBanAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 373
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nUnbans the user if they are currently banned.\n"
  example: []
  syntax:
    content: Task RemoveBanAsync(ulong userId, RequestOptions options = null)
    parameters:
    - id: userId
      type: System.UInt64
      description: The snowflake identifier of the user to be unbanned.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task
      description: "\nA task that represents the asynchronous removal operation for the ban.\n"
    content.vb: Function RemoveBanAsync(userId As ULong, options As RequestOptions = Nothing) As Task
  overload: Discord.IGuild.RemoveBanAsync*
- uid: Discord.IGuild.GetChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  id: GetChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: GetChannelsAsync(CacheMode, RequestOptions)
  nameWithType: IGuild.GetChannelsAsync(CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetChannelsAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetChannelsAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 384
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a collection of all channels in this guild.\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<IGuildChannel>> GetChannelsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{IReadOnlyCollection{Discord.IGuildChannel}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection of\ngeneric channels found within this guild.\n"
    content.vb: Function GetChannelsAsync(mode As CacheMode = CacheMode.AllowDownload, options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of IGuildChannel))
  overload: Discord.IGuild.GetChannelsAsync*
- uid: Discord.IGuild.GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  id: GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: GetChannelAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: IGuild.GetChannelAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetChannelAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetChannelAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 395
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a channel in this guild.\n"
  example: []
  syntax:
    content: Task<IGuildChannel> GetChannelAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier for the channel.
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.IGuildChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains the generic channel\nassociated with the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Function GetChannelAsync(id As ULong, mode As CacheMode = CacheMode.AllowDownload, options As RequestOptions = Nothing) As Task(Of IGuildChannel)
  overload: Discord.IGuild.GetChannelAsync*
- uid: Discord.IGuild.GetTextChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetTextChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  id: GetTextChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: GetTextChannelsAsync(CacheMode, RequestOptions)
  nameWithType: IGuild.GetTextChannelsAsync(CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetTextChannelsAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetTextChannelsAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 405
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a collection of all text channels in this guild.\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<ITextChannel>> GetTextChannelsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{IReadOnlyCollection{Discord.ITextChannel}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection of\nmessage channels found within this guild.\n"
    content.vb: Function GetTextChannelsAsync(mode As CacheMode = CacheMode.AllowDownload, options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of ITextChannel))
  overload: Discord.IGuild.GetTextChannelsAsync*
- uid: Discord.IGuild.GetTextChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetTextChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  id: GetTextChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: GetTextChannelAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: IGuild.GetTextChannelAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetTextChannelAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetTextChannelAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 416
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a text channel in this guild.\n"
  example: []
  syntax:
    content: Task<ITextChannel> GetTextChannelAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier for the text channel.
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.ITextChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains the text channel\nassociated with the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Function GetTextChannelAsync(id As ULong, mode As CacheMode = CacheMode.AllowDownload, options As RequestOptions = Nothing) As Task(Of ITextChannel)
  overload: Discord.IGuild.GetTextChannelAsync*
- uid: Discord.IGuild.GetVoiceChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetVoiceChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  id: GetVoiceChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: GetVoiceChannelsAsync(CacheMode, RequestOptions)
  nameWithType: IGuild.GetVoiceChannelsAsync(CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetVoiceChannelsAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetVoiceChannelsAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 426
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a collection of all voice channels in this guild.\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<IVoiceChannel>> GetVoiceChannelsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{IReadOnlyCollection{Discord.IVoiceChannel}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection of\nvoice channels found within this guild.\n"
    content.vb: Function GetVoiceChannelsAsync(mode As CacheMode = CacheMode.AllowDownload, options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of IVoiceChannel))
  overload: Discord.IGuild.GetVoiceChannelsAsync*
- uid: Discord.IGuild.GetCategoriesAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetCategoriesAsync(Discord.CacheMode,Discord.RequestOptions)
  id: GetCategoriesAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: GetCategoriesAsync(CacheMode, RequestOptions)
  nameWithType: IGuild.GetCategoriesAsync(CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetCategoriesAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetCategoriesAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 436
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a collection of all category channels in this guild.\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<ICategoryChannel>> GetCategoriesAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{IReadOnlyCollection{Discord.ICategoryChannel}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection of\ncategory channels found within this guild.\n"
    content.vb: Function GetCategoriesAsync(mode As CacheMode = CacheMode.AllowDownload, options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of ICategoryChannel))
  overload: Discord.IGuild.GetCategoriesAsync*
- uid: Discord.IGuild.GetVoiceChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetVoiceChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  id: GetVoiceChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: GetVoiceChannelAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: IGuild.GetVoiceChannelAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetVoiceChannelAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetVoiceChannelAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 447
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a voice channel in this guild.\n"
  example: []
  syntax:
    content: Task<IVoiceChannel> GetVoiceChannelAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier for the voice channel.
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.IVoiceChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains the voice channel associated\nwith the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Function GetVoiceChannelAsync(id As ULong, mode As CacheMode = CacheMode.AllowDownload, options As RequestOptions = Nothing) As Task(Of IVoiceChannel)
  overload: Discord.IGuild.GetVoiceChannelAsync*
- uid: Discord.IGuild.GetAFKChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetAFKChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  id: GetAFKChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: GetAFKChannelAsync(CacheMode, RequestOptions)
  nameWithType: IGuild.GetAFKChannelAsync(CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetAFKChannelAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetAFKChannelAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 457
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the AFK voice channel in this guild.\n"
  example: []
  syntax:
    content: Task<IVoiceChannel> GetAFKChannelAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.IVoiceChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains the voice channel that the\nAFK users will be moved to after they have idled for too long; <code>null</code> if none is set.\n"
    content.vb: Function GetAFKChannelAsync(mode As CacheMode = CacheMode.AllowDownload, options As RequestOptions = Nothing) As Task(Of IVoiceChannel)
  overload: Discord.IGuild.GetAFKChannelAsync*
- uid: Discord.IGuild.GetSystemChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetSystemChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  id: GetSystemChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: GetSystemChannelAsync(CacheMode, RequestOptions)
  nameWithType: IGuild.GetSystemChannelAsync(CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetSystemChannelAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetSystemChannelAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 467
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the system channel where randomized welcome messages are sent in this guild.\n"
  example: []
  syntax:
    content: Task<ITextChannel> GetSystemChannelAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.ITextChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains the text channel where\nrandomized welcome messages will be sent to; <code>null</code> if none is set.\n"
    content.vb: Function GetSystemChannelAsync(mode As CacheMode = CacheMode.AllowDownload, options As RequestOptions = Nothing) As Task(Of ITextChannel)
  overload: Discord.IGuild.GetSystemChannelAsync*
- uid: Discord.IGuild.GetDefaultChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetDefaultChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  id: GetDefaultChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: GetDefaultChannelAsync(CacheMode, RequestOptions)
  nameWithType: IGuild.GetDefaultChannelAsync(CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetDefaultChannelAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetDefaultChannelAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 477
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the first viewable text channel in this guild.\n"
  example: []
  syntax:
    content: Task<ITextChannel> GetDefaultChannelAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.ITextChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains the first viewable text\nchannel in this guild; <code>null</code> if none is found.\n"
    content.vb: Function GetDefaultChannelAsync(mode As CacheMode = CacheMode.AllowDownload, options As RequestOptions = Nothing) As Task(Of ITextChannel)
  overload: Discord.IGuild.GetDefaultChannelAsync*
- uid: Discord.IGuild.GetEmbedChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetEmbedChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  id: GetEmbedChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: GetEmbedChannelAsync(CacheMode, RequestOptions)
  nameWithType: IGuild.GetEmbedChannelAsync(CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetEmbedChannelAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetEmbedChannelAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 487
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the embed channel (i.e. the channel set in the guild&apos;s widget settings) in this guild.\n"
  example: []
  syntax:
    content: Task<IGuildChannel> GetEmbedChannelAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.IGuildChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains the embed channel set\nwithin the server&apos;s widget settings; <code>null</code> if none is set.\n"
    content.vb: Function GetEmbedChannelAsync(mode As CacheMode = CacheMode.AllowDownload, options As RequestOptions = Nothing) As Task(Of IGuildChannel)
  overload: Discord.IGuild.GetEmbedChannelAsync*
- uid: Discord.IGuild.CreateTextChannelAsync(System.String,Action{Discord.TextChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.IGuild.CreateTextChannelAsync(System.String,Action{Discord.TextChannelProperties},Discord.RequestOptions)
  id: CreateTextChannelAsync(System.String,Action{Discord.TextChannelProperties},Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: CreateTextChannelAsync(String, Action<TextChannelProperties>, RequestOptions)
  nameWithType: IGuild.CreateTextChannelAsync(String, Action<TextChannelProperties>, RequestOptions)
  fullName: Discord.IGuild.CreateTextChannelAsync(System.String, Action<Discord.TextChannelProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: CreateTextChannelAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 504
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nCreates a new text channel in this guild.\n"
  example:
  - "\n    The following example creates a new text channel under an existing category named <code>Wumpus</code> with a set topic.\n<pre><code class=\"lang-cs\" region=\"CreateTextChannelAsync\" source=\"..\\..\\..\\Discord.Net.Examples\\Core\\Entities\\Guilds\\IGuild.Examples.cs\">        public async Task CreateTextChannelUnderWumpus(IGuild guild, string name)\n{\n    var categories = await guild.GetCategoriesAsync();\n    var targetCategory = categories.FirstOrDefault(x => x.Name == &quot;wumpus&quot;);\n    if (targetCategory == null) return;\n    await guild.CreateTextChannelAsync(name, x =>\n    {\n        x.CategoryId = targetCategory.Id;\n        x.Topic = $&quot;This channel was created at {DateTimeOffset.UtcNow}.&quot;;\n    });\n}</code></pre>\n"
  syntax:
    content: Task<ITextChannel> CreateTextChannelAsync(string name, Action<TextChannelProperties> func = null, RequestOptions options = null)
    parameters:
    - id: name
      type: System.String
      description: The new name for the text channel.
    - id: func
      type: Action{Discord.TextChannelProperties}
      description: The delegate containing the properties to be applied to the channel upon its creation.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.ITextChannel}
      description: "\nA task that represents the asynchronous creation operation. The task result contains the newly created\ntext channel.\n"
    content.vb: Function CreateTextChannelAsync(name As String, func As Action(Of TextChannelProperties) = Nothing, options As RequestOptions = Nothing) As Task(Of ITextChannel)
  overload: Discord.IGuild.CreateTextChannelAsync*
  nameWithType.vb: IGuild.CreateTextChannelAsync(String, Action(Of TextChannelProperties), RequestOptions)
  fullName.vb: Discord.IGuild.CreateTextChannelAsync(System.String, Action(Of Discord.TextChannelProperties), Discord.RequestOptions)
  name.vb: CreateTextChannelAsync(String, Action(Of TextChannelProperties), RequestOptions)
- uid: Discord.IGuild.CreateVoiceChannelAsync(System.String,Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.IGuild.CreateVoiceChannelAsync(System.String,Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  id: CreateVoiceChannelAsync(System.String,Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: CreateVoiceChannelAsync(String, Action<VoiceChannelProperties>, RequestOptions)
  nameWithType: IGuild.CreateVoiceChannelAsync(String, Action<VoiceChannelProperties>, RequestOptions)
  fullName: Discord.IGuild.CreateVoiceChannelAsync(System.String, Action<Discord.VoiceChannelProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: CreateVoiceChannelAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 515
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nCreates a new voice channel in this guild.\n"
  example: []
  syntax:
    content: Task<IVoiceChannel> CreateVoiceChannelAsync(string name, Action<VoiceChannelProperties> func = null, RequestOptions options = null)
    parameters:
    - id: name
      type: System.String
      description: The new name for the voice channel.
    - id: func
      type: Action{Discord.VoiceChannelProperties}
      description: The delegate containing the properties to be applied to the channel upon its creation.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.IVoiceChannel}
      description: "\nA task that represents the asynchronous creation operation. The task result contains the newly created\nvoice channel.\n"
    content.vb: Function CreateVoiceChannelAsync(name As String, func As Action(Of VoiceChannelProperties) = Nothing, options As RequestOptions = Nothing) As Task(Of IVoiceChannel)
  overload: Discord.IGuild.CreateVoiceChannelAsync*
  nameWithType.vb: IGuild.CreateVoiceChannelAsync(String, Action(Of VoiceChannelProperties), RequestOptions)
  fullName.vb: Discord.IGuild.CreateVoiceChannelAsync(System.String, Action(Of Discord.VoiceChannelProperties), Discord.RequestOptions)
  name.vb: CreateVoiceChannelAsync(String, Action(Of VoiceChannelProperties), RequestOptions)
- uid: Discord.IGuild.CreateCategoryAsync(System.String,Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.IGuild.CreateCategoryAsync(System.String,Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  id: CreateCategoryAsync(System.String,Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: CreateCategoryAsync(String, Action<GuildChannelProperties>, RequestOptions)
  nameWithType: IGuild.CreateCategoryAsync(String, Action<GuildChannelProperties>, RequestOptions)
  fullName: Discord.IGuild.CreateCategoryAsync(System.String, Action<Discord.GuildChannelProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: CreateCategoryAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 526
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nCreates a new channel category in this guild.\n"
  example: []
  syntax:
    content: Task<ICategoryChannel> CreateCategoryAsync(string name, Action<GuildChannelProperties> func = null, RequestOptions options = null)
    parameters:
    - id: name
      type: System.String
      description: The new name for the category.
    - id: func
      type: Action{Discord.GuildChannelProperties}
      description: The delegate containing the properties to be applied to the channel upon its creation.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.ICategoryChannel}
      description: "\nA task that represents the asynchronous creation operation. The task result contains the newly created\ncategory channel.\n"
    content.vb: Function CreateCategoryAsync(name As String, func As Action(Of GuildChannelProperties) = Nothing, options As RequestOptions = Nothing) As Task(Of ICategoryChannel)
  overload: Discord.IGuild.CreateCategoryAsync*
  nameWithType.vb: IGuild.CreateCategoryAsync(String, Action(Of GuildChannelProperties), RequestOptions)
  fullName.vb: Discord.IGuild.CreateCategoryAsync(System.String, Action(Of Discord.GuildChannelProperties), Discord.RequestOptions)
  name.vb: CreateCategoryAsync(String, Action(Of GuildChannelProperties), RequestOptions)
- uid: Discord.IGuild.GetVoiceRegionsAsync(Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetVoiceRegionsAsync(Discord.RequestOptions)
  id: GetVoiceRegionsAsync(Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: GetVoiceRegionsAsync(RequestOptions)
  nameWithType: IGuild.GetVoiceRegionsAsync(RequestOptions)
  fullName: Discord.IGuild.GetVoiceRegionsAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetVoiceRegionsAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 536
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a collection of all the voice regions this guild can access.\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<IVoiceRegion>> GetVoiceRegionsAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{IReadOnlyCollection{Discord.IVoiceRegion}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection of\nvoice regions the guild can access.\n"
    content.vb: Function GetVoiceRegionsAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of IVoiceRegion))
  overload: Discord.IGuild.GetVoiceRegionsAsync*
- uid: Discord.IGuild.GetIntegrationsAsync(Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetIntegrationsAsync(Discord.RequestOptions)
  id: GetIntegrationsAsync(Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: GetIntegrationsAsync(RequestOptions)
  nameWithType: IGuild.GetIntegrationsAsync(RequestOptions)
  fullName: Discord.IGuild.GetIntegrationsAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetIntegrationsAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 538
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  syntax:
    content: Task<IReadOnlyCollection<IGuildIntegration>> GetIntegrationsAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task{IReadOnlyCollection{Discord.IGuildIntegration}}
    content.vb: Function GetIntegrationsAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of IGuildIntegration))
  overload: Discord.IGuild.GetIntegrationsAsync*
- uid: Discord.IGuild.CreateIntegrationAsync(System.UInt64,System.String,Discord.RequestOptions)
  commentId: M:Discord.IGuild.CreateIntegrationAsync(System.UInt64,System.String,Discord.RequestOptions)
  id: CreateIntegrationAsync(System.UInt64,System.String,Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: CreateIntegrationAsync(UInt64, String, RequestOptions)
  nameWithType: IGuild.CreateIntegrationAsync(UInt64, String, RequestOptions)
  fullName: Discord.IGuild.CreateIntegrationAsync(System.UInt64, System.String, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: CreateIntegrationAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 539
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  syntax:
    content: Task<IGuildIntegration> CreateIntegrationAsync(ulong id, string type, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
    - id: type
      type: System.String
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task{Discord.IGuildIntegration}
    content.vb: Function CreateIntegrationAsync(id As ULong, type As String, options As RequestOptions = Nothing) As Task(Of IGuildIntegration)
  overload: Discord.IGuild.CreateIntegrationAsync*
- uid: Discord.IGuild.GetInvitesAsync(Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetInvitesAsync(Discord.RequestOptions)
  id: GetInvitesAsync(Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: GetInvitesAsync(RequestOptions)
  nameWithType: IGuild.GetInvitesAsync(RequestOptions)
  fullName: Discord.IGuild.GetInvitesAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetInvitesAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 549
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a collection of all invites in this guild.\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<IInviteMetadata>> GetInvitesAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{IReadOnlyCollection{Discord.IInviteMetadata}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection of\ninvite metadata, each representing information for an invite found within this guild.\n"
    content.vb: Function GetInvitesAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of IInviteMetadata))
  overload: Discord.IGuild.GetInvitesAsync*
- uid: Discord.IGuild.GetVanityInviteAsync(Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetVanityInviteAsync(Discord.RequestOptions)
  id: GetVanityInviteAsync(Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: GetVanityInviteAsync(RequestOptions)
  nameWithType: IGuild.GetVanityInviteAsync(RequestOptions)
  fullName: Discord.IGuild.GetVanityInviteAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetVanityInviteAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 558
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the vanity invite URL of this guild.\n"
  example: []
  syntax:
    content: Task<IInviteMetadata> GetVanityInviteAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.IInviteMetadata}
      description: "\nA task that represents the asynchronous get operation. The task result contains the partial metadata of\nthe vanity invite found within this guild; <code>null</code> if none is found.\n"
    content.vb: Function GetVanityInviteAsync(options As RequestOptions = Nothing) As Task(Of IInviteMetadata)
  overload: Discord.IGuild.GetVanityInviteAsync*
- uid: Discord.IGuild.GetRole(System.UInt64)
  commentId: M:Discord.IGuild.GetRole(System.UInt64)
  id: GetRole(System.UInt64)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: GetRole(UInt64)
  nameWithType: IGuild.GetRole(UInt64)
  fullName: Discord.IGuild.GetRole(System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetRole
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 567
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a role in this guild.\n"
  example: []
  syntax:
    content: IRole GetRole(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier for the role.
    return:
      type: Discord.IRole
      description: "\nA role that is associated with the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Function GetRole(id As ULong) As IRole
  overload: Discord.IGuild.GetRole*
- uid: Discord.IGuild.CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)
  commentId: M:Discord.IGuild.CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)
  id: CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: CreateRoleAsync(String, Nullable<GuildPermissions>, Nullable<Color>, Boolean, RequestOptions)
  nameWithType: IGuild.CreateRoleAsync(String, Nullable<GuildPermissions>, Nullable<Color>, Boolean, RequestOptions)
  fullName: Discord.IGuild.CreateRoleAsync(System.String, System.Nullable<Discord.GuildPermissions>, System.Nullable<Discord.Color>, System.Boolean, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: CreateRoleAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 580
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nCreates a new role with the provided name.\n"
  example: []
  syntax:
    content: Task<IRole> CreateRoleAsync(string name, GuildPermissions? permissions = null, Color? color = null, bool isHoisted = false, RequestOptions options = null)
    parameters:
    - id: name
      type: System.String
      description: The new name for the role.
    - id: permissions
      type: System.Nullable{Discord.GuildPermissions}
      description: The guild permission that the role should possess.
    - id: color
      type: System.Nullable{Discord.Color}
      description: The color of the role.
    - id: isHoisted
      type: System.Boolean
      description: Whether the role is separated from others on the sidebar.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.IRole}
      description: "\nA task that represents the asynchronous creation operation. The task result contains the newly created\nrole.\n"
    content.vb: Function CreateRoleAsync(name As String, permissions As GuildPermissions? = Nothing, color As Color? = Nothing, isHoisted As Boolean = False, options As RequestOptions = Nothing) As Task(Of IRole)
  overload: Discord.IGuild.CreateRoleAsync*
  nameWithType.vb: IGuild.CreateRoleAsync(String, Nullable(Of GuildPermissions), Nullable(Of Color), Boolean, RequestOptions)
  fullName.vb: Discord.IGuild.CreateRoleAsync(System.String, System.Nullable(Of Discord.GuildPermissions), System.Nullable(Of Discord.Color), System.Boolean, Discord.RequestOptions)
  name.vb: CreateRoleAsync(String, Nullable(Of GuildPermissions), Nullable(Of Color), Boolean, RequestOptions)
- uid: Discord.IGuild.AddGuildUserAsync(System.UInt64,System.String,Action{Discord.AddGuildUserProperties},Discord.RequestOptions)
  commentId: M:Discord.IGuild.AddGuildUserAsync(System.UInt64,System.String,Action{Discord.AddGuildUserProperties},Discord.RequestOptions)
  id: AddGuildUserAsync(System.UInt64,System.String,Action{Discord.AddGuildUserProperties},Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: AddGuildUserAsync(UInt64, String, Action<AddGuildUserProperties>, RequestOptions)
  nameWithType: IGuild.AddGuildUserAsync(UInt64, String, Action<AddGuildUserProperties>, RequestOptions)
  fullName: Discord.IGuild.AddGuildUserAsync(System.UInt64, System.String, Action<Discord.AddGuildUserProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: AddGuildUserAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 593
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nAdds a user to this guild.\n"
  remarks: "\nThis method requires you have an OAuth2 access token for the user, requested with the guilds.join scope, and that the bot have the MANAGE_INVITES permission in the guild.\n"
  example: []
  syntax:
    content: Task<IGuildUser> AddGuildUserAsync(ulong userId, string accessToken, Action<AddGuildUserProperties> func = null, RequestOptions options = null)
    parameters:
    - id: userId
      type: System.UInt64
    - id: accessToken
      type: System.String
      description: The OAuth2 access token for the user, requested with the guilds.join scope.
    - id: func
      type: Action{Discord.AddGuildUserProperties}
      description: The delegate containing the properties to be applied to the user upon being added to the guild.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.IGuildUser}
      description: A guild user associated with the specified <code data-dev-comment-type="paramref" class="paramref">id</code>; <code>null</code> if the user is already in the guild.
    content.vb: Function AddGuildUserAsync(userId As ULong, accessToken As String, func As Action(Of AddGuildUserProperties) = Nothing, options As RequestOptions = Nothing) As Task(Of IGuildUser)
  overload: Discord.IGuild.AddGuildUserAsync*
  nameWithType.vb: IGuild.AddGuildUserAsync(UInt64, String, Action(Of AddGuildUserProperties), RequestOptions)
  fullName.vb: Discord.IGuild.AddGuildUserAsync(System.UInt64, System.String, Action(Of Discord.AddGuildUserProperties), Discord.RequestOptions)
  name.vb: AddGuildUserAsync(UInt64, String, Action(Of AddGuildUserProperties), RequestOptions)
- uid: Discord.IGuild.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  id: GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: GetUsersAsync(CacheMode, RequestOptions)
  nameWithType: IGuild.GetUsersAsync(CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetUsersAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetUsersAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 610
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a collection of all users in this guild.\n"
  remarks: "\nThis method retrieves all users found within this guild.\n<div class=\"NOTE\"><h5>note</h5><p>\n    This may return an incomplete collection in the WebSocket implementation due to how Discord does not\n    send a complete user list for large guilds.\n</p></div>\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<IGuildUser>> GetUsersAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{IReadOnlyCollection{Discord.IGuildUser}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a collection of guild\nusers found within this guild.\n"
    content.vb: Function GetUsersAsync(mode As CacheMode = CacheMode.AllowDownload, options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of IGuildUser))
  overload: Discord.IGuild.GetUsersAsync*
- uid: Discord.IGuild.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  id: GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: GetUserAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: IGuild.GetUserAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetUserAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetUserAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 628
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a user from this guild.\n"
  remarks: "\nThis method retrieves a user found within this guild.\n<div class=\"NOTE\"><h5>note</h5><p>\n    This may return <code>null</code> in the WebSocket implementation due to incomplete user collection in\n    large guilds.\n</p></div>\n"
  example: []
  syntax:
    content: Task<IGuildUser> GetUserAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the user.
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.IGuildUser}
      description: "\nA task that represents the asynchronous get operation. The task result contains the guild user\nassociated with the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Function GetUserAsync(id As ULong, mode As CacheMode = CacheMode.AllowDownload, options As RequestOptions = Nothing) As Task(Of IGuildUser)
  overload: Discord.IGuild.GetUserAsync*
- uid: Discord.IGuild.GetCurrentUserAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetCurrentUserAsync(Discord.CacheMode,Discord.RequestOptions)
  id: GetCurrentUserAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: GetCurrentUserAsync(CacheMode, RequestOptions)
  nameWithType: IGuild.GetCurrentUserAsync(CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetCurrentUserAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetCurrentUserAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 638
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the current user for this guild.\n"
  example: []
  syntax:
    content: Task<IGuildUser> GetCurrentUserAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.IGuildUser}
      description: "\nA task that represents the asynchronous get operation. The task result contains the currently logged-in\nuser within this guild.\n"
    content.vb: Function GetCurrentUserAsync(mode As CacheMode = CacheMode.AllowDownload, options As RequestOptions = Nothing) As Task(Of IGuildUser)
  overload: Discord.IGuild.GetCurrentUserAsync*
- uid: Discord.IGuild.GetOwnerAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetOwnerAsync(Discord.CacheMode,Discord.RequestOptions)
  id: GetOwnerAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: GetOwnerAsync(CacheMode, RequestOptions)
  nameWithType: IGuild.GetOwnerAsync(CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetOwnerAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetOwnerAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 647
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the owner of this guild.\n"
  example: []
  syntax:
    content: Task<IGuildUser> GetOwnerAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.IGuildUser}
      description: "\nA task that represents the asynchronous get operation. The task result contains the owner of this guild.\n"
    content.vb: Function GetOwnerAsync(mode As CacheMode = CacheMode.AllowDownload, options As RequestOptions = Nothing) As Task(Of IGuildUser)
  overload: Discord.IGuild.GetOwnerAsync*
- uid: Discord.IGuild.DownloadUsersAsync
  commentId: M:Discord.IGuild.DownloadUsersAsync
  id: DownloadUsersAsync
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: DownloadUsersAsync()
  nameWithType: IGuild.DownloadUsersAsync()
  fullName: Discord.IGuild.DownloadUsersAsync()
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: DownloadUsersAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 654
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nDownloads all users for this guild if the current list is incomplete.\n"
  example: []
  syntax:
    content: Task DownloadUsersAsync()
    return:
      type: Task
      description: "\nA task that represents the asynchronous download operation.\n"
    content.vb: Function DownloadUsersAsync As Task
  overload: Discord.IGuild.DownloadUsersAsync*
- uid: Discord.IGuild.PruneUsersAsync(System.Int32,System.Boolean,Discord.RequestOptions)
  commentId: M:Discord.IGuild.PruneUsersAsync(System.Int32,System.Boolean,Discord.RequestOptions)
  id: PruneUsersAsync(System.Int32,System.Boolean,Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: PruneUsersAsync(Int32, Boolean, RequestOptions)
  nameWithType: IGuild.PruneUsersAsync(Int32, Boolean, RequestOptions)
  fullName: Discord.IGuild.PruneUsersAsync(System.Int32, System.Boolean, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: PruneUsersAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 674
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nPrunes inactive users.\n"
  remarks: "\n<p>\n    This method removes all users that have not logged on in the provided number of <code data-dev-comment-type=\"paramref\" class=\"paramref\">days</code>.\n</p>\n<p>\n    If <code data-dev-comment-type=\"paramref\" class=\"paramref\">simulate</code> is <code>true</code>, this method will only return the number of users that\n    would be removed without kicking the users.\n</p>\n"
  example: []
  syntax:
    content: Task<int> PruneUsersAsync(int days = 30, bool simulate = false, RequestOptions options = null)
    parameters:
    - id: days
      type: System.Int32
      description: The number of days required for the users to be kicked.
    - id: simulate
      type: System.Boolean
      description: Whether this prune action is a simulation.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{System.Int32}
      description: "\nA task that represents the asynchronous prune operation. The task result contains the number of users to\nbe or has been removed from this guild.\n"
    content.vb: Function PruneUsersAsync(days As Integer = 30, simulate As Boolean = False, options As RequestOptions = Nothing) As Task(Of Integer)
  overload: Discord.IGuild.PruneUsersAsync*
- uid: Discord.IGuild.GetAuditLogsAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetAuditLogsAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  id: GetAuditLogsAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: GetAuditLogsAsync(Int32, CacheMode, RequestOptions)
  nameWithType: IGuild.GetAuditLogsAsync(Int32, CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetAuditLogsAsync(System.Int32, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetAuditLogsAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 686
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the specified number of audit log entries for this guild.\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<IAuditLogEntry>> GetAuditLogsAsync(int limit = null, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null)
    parameters:
    - id: limit
      type: System.Int32
      description: The number of audit log entries to fetch.
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{IReadOnlyCollection{Discord.IAuditLogEntry}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection\nof the requested audit log entries.\n"
    content.vb: Function GetAuditLogsAsync(limit As Integer = Nothing, mode As CacheMode = CacheMode.AllowDownload, options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of IAuditLogEntry))
  overload: Discord.IGuild.GetAuditLogsAsync*
- uid: Discord.IGuild.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  id: GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: GetWebhookAsync(UInt64, RequestOptions)
  nameWithType: IGuild.GetWebhookAsync(UInt64, RequestOptions)
  fullName: Discord.IGuild.GetWebhookAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetWebhookAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 698
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a webhook found within this guild.\n"
  example: []
  syntax:
    content: Task<IWebhook> GetWebhookAsync(ulong id, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
      description: The identifier for the webhook.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.IWebhook}
      description: "\nA task that represents the asynchronous get operation. The task result contains the webhook with the\nspecified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Function GetWebhookAsync(id As ULong, options As RequestOptions = Nothing) As Task(Of IWebhook)
  overload: Discord.IGuild.GetWebhookAsync*
- uid: Discord.IGuild.GetWebhooksAsync(Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetWebhooksAsync(Discord.RequestOptions)
  id: GetWebhooksAsync(Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: GetWebhooksAsync(RequestOptions)
  nameWithType: IGuild.GetWebhooksAsync(RequestOptions)
  fullName: Discord.IGuild.GetWebhooksAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetWebhooksAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 707
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a collection of all webhook from this guild.\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<IWebhook>> GetWebhooksAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{IReadOnlyCollection{Discord.IWebhook}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection\nof webhooks found within the guild.\n"
    content.vb: Function GetWebhooksAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of IWebhook))
  overload: Discord.IGuild.GetWebhooksAsync*
- uid: Discord.IGuild.GetEmoteAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetEmoteAsync(System.UInt64,Discord.RequestOptions)
  id: GetEmoteAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: GetEmoteAsync(UInt64, RequestOptions)
  nameWithType: IGuild.GetEmoteAsync(UInt64, RequestOptions)
  fullName: Discord.IGuild.GetEmoteAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetEmoteAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 718
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a specific emote from this guild.\n"
  example: []
  syntax:
    content: Task<GuildEmote> GetEmoteAsync(ulong id, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier for the guild emote.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.GuildEmote}
      description: "\nA task that represents the asynchronous get operation. The task result contains the emote found with the\nspecified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Function GetEmoteAsync(id As ULong, options As RequestOptions = Nothing) As Task(Of GuildEmote)
  overload: Discord.IGuild.GetEmoteAsync*
- uid: Discord.IGuild.CreateEmoteAsync(System.String,Discord.Image,Discord.Optional{IEnumerable{Discord.IRole}},Discord.RequestOptions)
  commentId: M:Discord.IGuild.CreateEmoteAsync(System.String,Discord.Image,Discord.Optional{IEnumerable{Discord.IRole}},Discord.RequestOptions)
  id: CreateEmoteAsync(System.String,Discord.Image,Discord.Optional{IEnumerable{Discord.IRole}},Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: CreateEmoteAsync(String, Image, Optional<IEnumerable<IRole>>, RequestOptions)
  nameWithType: IGuild.CreateEmoteAsync(String, Image, Optional<IEnumerable<IRole>>, RequestOptions)
  fullName: Discord.IGuild.CreateEmoteAsync(System.String, Discord.Image, Discord.Optional<IEnumerable<Discord.IRole>>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: CreateEmoteAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 729
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nCreates a new <xref href=\"Discord.GuildEmote\" data-throw-if-not-resolved=\"false\"></xref> in this guild.\n"
  example: []
  syntax:
    content: Task<GuildEmote> CreateEmoteAsync(string name, Image image, Optional<IEnumerable<IRole>> roles = default(Optional<IEnumerable<IRole>>), RequestOptions options = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the guild emote.
    - id: image
      type: Discord.Image
      description: The image of the new emote.
    - id: roles
      type: Discord.Optional{IEnumerable{Discord.IRole}}
      description: The roles to limit the emote usage to.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.GuildEmote}
      description: "\nA task that represents the asynchronous creation operation. The task result contains the created emote.\n"
    content.vb: Function CreateEmoteAsync(name As String, image As Image, roles As  Optional  (Of IEnumerable(Of IRole))  = Nothing, options As RequestOptions = Nothing) As Task(Of GuildEmote)
  overload: Discord.IGuild.CreateEmoteAsync*
  nameWithType.vb: IGuild.CreateEmoteAsync(String, Image, Optional(Of IEnumerable(Of IRole)), RequestOptions)
  fullName.vb: Discord.IGuild.CreateEmoteAsync(System.String, Discord.Image, Discord.Optional(Of IEnumerable(Of Discord.IRole)), Discord.RequestOptions)
  name.vb: CreateEmoteAsync(String, Image, Optional(Of IEnumerable(Of IRole)), RequestOptions)
- uid: Discord.IGuild.ModifyEmoteAsync(Discord.GuildEmote,Action{Discord.EmoteProperties},Discord.RequestOptions)
  commentId: M:Discord.IGuild.ModifyEmoteAsync(Discord.GuildEmote,Action{Discord.EmoteProperties},Discord.RequestOptions)
  id: ModifyEmoteAsync(Discord.GuildEmote,Action{Discord.EmoteProperties},Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: ModifyEmoteAsync(GuildEmote, Action<EmoteProperties>, RequestOptions)
  nameWithType: IGuild.ModifyEmoteAsync(GuildEmote, Action<EmoteProperties>, RequestOptions)
  fullName: Discord.IGuild.ModifyEmoteAsync(Discord.GuildEmote, Action<Discord.EmoteProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ModifyEmoteAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 741
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nModifies an existing <xref href=\"Discord.GuildEmote\" data-throw-if-not-resolved=\"false\"></xref> in this guild.\n"
  example: []
  syntax:
    content: Task<GuildEmote> ModifyEmoteAsync(GuildEmote emote, Action<EmoteProperties> func, RequestOptions options = null)
    parameters:
    - id: emote
      type: Discord.GuildEmote
      description: The emote to be modified.
    - id: func
      type: Action{Discord.EmoteProperties}
      description: The delegate containing the properties to modify the emote with.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.GuildEmote}
      description: "\nA task that represents the asynchronous modification operation. The task result contains the modified\nemote.\n"
    content.vb: Function ModifyEmoteAsync(emote As GuildEmote, func As Action(Of EmoteProperties), options As RequestOptions = Nothing) As Task(Of GuildEmote)
  overload: Discord.IGuild.ModifyEmoteAsync*
  nameWithType.vb: IGuild.ModifyEmoteAsync(GuildEmote, Action(Of EmoteProperties), RequestOptions)
  fullName.vb: Discord.IGuild.ModifyEmoteAsync(Discord.GuildEmote, Action(Of Discord.EmoteProperties), Discord.RequestOptions)
  name.vb: ModifyEmoteAsync(GuildEmote, Action(Of EmoteProperties), RequestOptions)
- uid: Discord.IGuild.DeleteEmoteAsync(Discord.GuildEmote,Discord.RequestOptions)
  commentId: M:Discord.IGuild.DeleteEmoteAsync(Discord.GuildEmote,Discord.RequestOptions)
  id: DeleteEmoteAsync(Discord.GuildEmote,Discord.RequestOptions)
  parent: Discord.IGuild
  langs:
  - csharp
  - vb
  name: DeleteEmoteAsync(GuildEmote, RequestOptions)
  nameWithType: IGuild.DeleteEmoteAsync(GuildEmote, RequestOptions)
  fullName: Discord.IGuild.DeleteEmoteAsync(Discord.GuildEmote, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuild.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteEmoteAsync
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuild.cs
    startLine: 750
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nDeletes an existing <xref href=\"Discord.GuildEmote\" data-throw-if-not-resolved=\"false\"></xref> from this guild.\n"
  example: []
  syntax:
    content: Task DeleteEmoteAsync(GuildEmote emote, RequestOptions options = null)
    parameters:
    - id: emote
      type: Discord.GuildEmote
      description: The emote to delete.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task
      description: "\nA task that represents the asynchronous removal operation.\n"
    content.vb: Function DeleteEmoteAsync(emote As GuildEmote, options As RequestOptions = Nothing) As Task
  overload: Discord.IGuild.DeleteEmoteAsync*
references:
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  commentId: M:Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  parent: Discord.IDeletable
  name: DeleteAsync(RequestOptions)
  nameWithType: IDeletable.DeleteAsync(RequestOptions)
  fullName: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: IDeletable.DeleteAsync
    fullName: Discord.IDeletable.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: IDeletable.DeleteAsync
    fullName: Discord.IDeletable.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.ISnowflakeEntity.CreatedAt
  commentId: P:Discord.ISnowflakeEntity.CreatedAt
  parent: Discord.ISnowflakeEntity
  name: CreatedAt
  nameWithType: ISnowflakeEntity.CreatedAt
  fullName: Discord.ISnowflakeEntity.CreatedAt
- uid: Discord.IEntity{System.UInt64}.Id
  commentId: P:Discord.IEntity{System.UInt64}.Id
  parent: Discord.IEntity{System.UInt64}
  definition: Discord.IEntity`1.Id
  name: Id
  nameWithType: IEntity<UInt64>.Id
  fullName: Discord.IEntity<System.UInt64>.Id
  nameWithType.vb: IEntity(Of UInt64).Id
  fullName.vb: Discord.IEntity(Of System.UInt64).Id
- uid: Discord.IGuild.Discord.GuildExtensions.GetWelcomeMessagesEnabled
  commentId: M:Discord.GuildExtensions.GetWelcomeMessagesEnabled(Discord.IGuild)
  parent: Discord.GuildExtensions
  definition: Discord.GuildExtensions.GetWelcomeMessagesEnabled(Discord.IGuild)
  name: GetWelcomeMessagesEnabled()
  nameWithType: GuildExtensions.GetWelcomeMessagesEnabled()
  fullName: Discord.GuildExtensions.GetWelcomeMessagesEnabled()
  spec.csharp:
  - uid: Discord.GuildExtensions.GetWelcomeMessagesEnabled
    name: GetWelcomeMessagesEnabled
    nameWithType: GuildExtensions.GetWelcomeMessagesEnabled
    fullName: Discord.GuildExtensions.GetWelcomeMessagesEnabled
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.GuildExtensions.GetWelcomeMessagesEnabled
    name: GetWelcomeMessagesEnabled
    nameWithType: GuildExtensions.GetWelcomeMessagesEnabled
    fullName: Discord.GuildExtensions.GetWelcomeMessagesEnabled
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.Discord.GuildExtensions.GetGuildBoostMessagesEnabled
  commentId: M:Discord.GuildExtensions.GetGuildBoostMessagesEnabled(Discord.IGuild)
  parent: Discord.GuildExtensions
  definition: Discord.GuildExtensions.GetGuildBoostMessagesEnabled(Discord.IGuild)
  name: GetGuildBoostMessagesEnabled()
  nameWithType: GuildExtensions.GetGuildBoostMessagesEnabled()
  fullName: Discord.GuildExtensions.GetGuildBoostMessagesEnabled()
  spec.csharp:
  - uid: Discord.GuildExtensions.GetGuildBoostMessagesEnabled
    name: GetGuildBoostMessagesEnabled
    nameWithType: GuildExtensions.GetGuildBoostMessagesEnabled
    fullName: Discord.GuildExtensions.GetGuildBoostMessagesEnabled
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.GuildExtensions.GetGuildBoostMessagesEnabled
    name: GetGuildBoostMessagesEnabled
    nameWithType: GuildExtensions.GetGuildBoostMessagesEnabled
    fullName: Discord.GuildExtensions.GetGuildBoostMessagesEnabled
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IDeletable
  commentId: T:Discord.IDeletable
  parent: Discord
  name: IDeletable
  nameWithType: IDeletable
  fullName: Discord.IDeletable
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IEntity`1.Id
  commentId: P:Discord.IEntity`1.Id
  name: Id
  nameWithType: IEntity<TId>.Id
  fullName: Discord.IEntity<TId>.Id
  nameWithType.vb: IEntity(Of TId).Id
  fullName.vb: Discord.IEntity(Of TId).Id
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.GuildExtensions.GetWelcomeMessagesEnabled(Discord.IGuild)
  commentId: M:Discord.GuildExtensions.GetWelcomeMessagesEnabled(Discord.IGuild)
  name: GetWelcomeMessagesEnabled(IGuild)
  nameWithType: GuildExtensions.GetWelcomeMessagesEnabled(IGuild)
  fullName: Discord.GuildExtensions.GetWelcomeMessagesEnabled(Discord.IGuild)
  spec.csharp:
  - uid: Discord.GuildExtensions.GetWelcomeMessagesEnabled(Discord.IGuild)
    name: GetWelcomeMessagesEnabled
    nameWithType: GuildExtensions.GetWelcomeMessagesEnabled
    fullName: Discord.GuildExtensions.GetWelcomeMessagesEnabled
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IGuild
    name: IGuild
    nameWithType: IGuild
    fullName: Discord.IGuild
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.GuildExtensions.GetWelcomeMessagesEnabled(Discord.IGuild)
    name: GetWelcomeMessagesEnabled
    nameWithType: GuildExtensions.GetWelcomeMessagesEnabled
    fullName: Discord.GuildExtensions.GetWelcomeMessagesEnabled
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IGuild
    name: IGuild
    nameWithType: IGuild
    fullName: Discord.IGuild
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.GuildExtensions
  commentId: T:Discord.GuildExtensions
  parent: Discord
  name: GuildExtensions
  nameWithType: GuildExtensions
  fullName: Discord.GuildExtensions
- uid: Discord.GuildExtensions.GetGuildBoostMessagesEnabled(Discord.IGuild)
  commentId: M:Discord.GuildExtensions.GetGuildBoostMessagesEnabled(Discord.IGuild)
  name: GetGuildBoostMessagesEnabled(IGuild)
  nameWithType: GuildExtensions.GetGuildBoostMessagesEnabled(IGuild)
  fullName: Discord.GuildExtensions.GetGuildBoostMessagesEnabled(Discord.IGuild)
  spec.csharp:
  - uid: Discord.GuildExtensions.GetGuildBoostMessagesEnabled(Discord.IGuild)
    name: GetGuildBoostMessagesEnabled
    nameWithType: GuildExtensions.GetGuildBoostMessagesEnabled
    fullName: Discord.GuildExtensions.GetGuildBoostMessagesEnabled
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IGuild
    name: IGuild
    nameWithType: IGuild
    fullName: Discord.IGuild
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.GuildExtensions.GetGuildBoostMessagesEnabled(Discord.IGuild)
    name: GetGuildBoostMessagesEnabled
    nameWithType: GuildExtensions.GetGuildBoostMessagesEnabled
    fullName: Discord.GuildExtensions.GetGuildBoostMessagesEnabled
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IGuild
    name: IGuild
    nameWithType: IGuild
    fullName: Discord.IGuild
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.Name*
  commentId: Overload:Discord.IGuild.Name
  name: Name
  nameWithType: IGuild.Name
  fullName: Discord.IGuild.Name
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.IGuild.AFKTimeout*
  commentId: Overload:Discord.IGuild.AFKTimeout
  name: AFKTimeout
  nameWithType: IGuild.AFKTimeout
  fullName: Discord.IGuild.AFKTimeout
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Discord.IGuild.IsEmbeddable*
  commentId: Overload:Discord.IGuild.IsEmbeddable
  name: IsEmbeddable
  nameWithType: IGuild.IsEmbeddable
  fullName: Discord.IGuild.IsEmbeddable
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.IGuild.DefaultMessageNotifications*
  commentId: Overload:Discord.IGuild.DefaultMessageNotifications
  name: DefaultMessageNotifications
  nameWithType: IGuild.DefaultMessageNotifications
  fullName: Discord.IGuild.DefaultMessageNotifications
- uid: Discord.DefaultMessageNotifications
  commentId: T:Discord.DefaultMessageNotifications
  parent: Discord
  name: DefaultMessageNotifications
  nameWithType: DefaultMessageNotifications
  fullName: Discord.DefaultMessageNotifications
- uid: Discord.IGuild.MfaLevel*
  commentId: Overload:Discord.IGuild.MfaLevel
  name: MfaLevel
  nameWithType: IGuild.MfaLevel
  fullName: Discord.IGuild.MfaLevel
- uid: Discord.MfaLevel
  commentId: T:Discord.MfaLevel
  parent: Discord
  name: MfaLevel
  nameWithType: MfaLevel
  fullName: Discord.MfaLevel
- uid: Discord.IGuild.VerificationLevel*
  commentId: Overload:Discord.IGuild.VerificationLevel
  name: VerificationLevel
  nameWithType: IGuild.VerificationLevel
  fullName: Discord.IGuild.VerificationLevel
- uid: Discord.VerificationLevel
  commentId: T:Discord.VerificationLevel
  parent: Discord
  name: VerificationLevel
  nameWithType: VerificationLevel
  fullName: Discord.VerificationLevel
- uid: Discord.IGuild.ExplicitContentFilter*
  commentId: Overload:Discord.IGuild.ExplicitContentFilter
  name: ExplicitContentFilter
  nameWithType: IGuild.ExplicitContentFilter
  fullName: Discord.IGuild.ExplicitContentFilter
- uid: Discord.ExplicitContentFilterLevel
  commentId: T:Discord.ExplicitContentFilterLevel
  parent: Discord
  name: ExplicitContentFilterLevel
  nameWithType: ExplicitContentFilterLevel
  fullName: Discord.ExplicitContentFilterLevel
- uid: Discord.IGuild.IconId*
  commentId: Overload:Discord.IGuild.IconId
  name: IconId
  nameWithType: IGuild.IconId
  fullName: Discord.IGuild.IconId
- uid: Discord.IGuild.IconUrl*
  commentId: Overload:Discord.IGuild.IconUrl
  name: IconUrl
  nameWithType: IGuild.IconUrl
  fullName: Discord.IGuild.IconUrl
- uid: Discord.IGuild.SplashId*
  commentId: Overload:Discord.IGuild.SplashId
  name: SplashId
  nameWithType: IGuild.SplashId
  fullName: Discord.IGuild.SplashId
- uid: Discord.IGuild.SplashUrl*
  commentId: Overload:Discord.IGuild.SplashUrl
  name: SplashUrl
  nameWithType: IGuild.SplashUrl
  fullName: Discord.IGuild.SplashUrl
- uid: Discord.IGuild.Available*
  commentId: Overload:Discord.IGuild.Available
  name: Available
  nameWithType: IGuild.Available
  fullName: Discord.IGuild.Available
- uid: Discord.IGuild.AFKChannelId*
  commentId: Overload:Discord.IGuild.AFKChannelId
  name: AFKChannelId
  nameWithType: IGuild.AFKChannelId
  fullName: Discord.IGuild.AFKChannelId
- uid: System.Nullable{System.UInt64}
  commentId: '!:System.Nullable{System.UInt64}'
  definition: System.Nullable`1
  name: Nullable<UInt64>
  nameWithType: Nullable<UInt64>
  fullName: System.Nullable<System.UInt64>
  nameWithType.vb: Nullable(Of UInt64)
  fullName.vb: System.Nullable(Of System.UInt64)
  name.vb: Nullable(Of UInt64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.DefaultChannelId*
  commentId: Overload:Discord.IGuild.DefaultChannelId
  name: DefaultChannelId
  nameWithType: IGuild.DefaultChannelId
  fullName: Discord.IGuild.DefaultChannelId
- uid: System.UInt64
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Discord.IGuild.EmbedChannelId*
  commentId: Overload:Discord.IGuild.EmbedChannelId
  name: EmbedChannelId
  nameWithType: IGuild.EmbedChannelId
  fullName: Discord.IGuild.EmbedChannelId
- uid: Discord.IGuild.SystemChannelId*
  commentId: Overload:Discord.IGuild.SystemChannelId
  name: SystemChannelId
  nameWithType: IGuild.SystemChannelId
  fullName: Discord.IGuild.SystemChannelId
- uid: Discord.IGuild.OwnerId*
  commentId: Overload:Discord.IGuild.OwnerId
  name: OwnerId
  nameWithType: IGuild.OwnerId
  fullName: Discord.IGuild.OwnerId
- uid: Discord.IGuild.ApplicationId*
  commentId: Overload:Discord.IGuild.ApplicationId
  name: ApplicationId
  nameWithType: IGuild.ApplicationId
  fullName: Discord.IGuild.ApplicationId
- uid: Discord.IGuild.VoiceRegionId*
  commentId: Overload:Discord.IGuild.VoiceRegionId
  name: VoiceRegionId
  nameWithType: IGuild.VoiceRegionId
  fullName: Discord.IGuild.VoiceRegionId
- uid: Discord.Audio.IAudioClient
  commentId: T:Discord.Audio.IAudioClient
  parent: Discord.Audio
  name: IAudioClient
  nameWithType: IAudioClient
  fullName: Discord.Audio.IAudioClient
- uid: Discord.IGuild.AudioClient*
  commentId: Overload:Discord.IGuild.AudioClient
  name: AudioClient
  nameWithType: IGuild.AudioClient
  fullName: Discord.IGuild.AudioClient
- uid: Discord.Audio
  commentId: N:Discord.Audio
  name: Discord.Audio
  nameWithType: Discord.Audio
  fullName: Discord.Audio
- uid: Discord.IGuild.EveryoneRole*
  commentId: Overload:Discord.IGuild.EveryoneRole
  name: EveryoneRole
  nameWithType: IGuild.EveryoneRole
  fullName: Discord.IGuild.EveryoneRole
- uid: Discord.IRole
  commentId: T:Discord.IRole
  parent: Discord
  name: IRole
  nameWithType: IRole
  fullName: Discord.IRole
- uid: Discord.IGuild.Emotes*
  commentId: Overload:Discord.IGuild.Emotes
  name: Emotes
  nameWithType: IGuild.Emotes
  fullName: Discord.IGuild.Emotes
- uid: IReadOnlyCollection{Discord.GuildEmote}
  commentId: '!:IReadOnlyCollection{Discord.GuildEmote}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<GuildEmote>
  nameWithType: IReadOnlyCollection<GuildEmote>
  fullName: IReadOnlyCollection<Discord.GuildEmote>
  nameWithType.vb: IReadOnlyCollection(Of GuildEmote)
  fullName.vb: IReadOnlyCollection(Of Discord.GuildEmote)
  name.vb: IReadOnlyCollection(Of GuildEmote)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildEmote
    name: GuildEmote
    nameWithType: GuildEmote
    fullName: Discord.GuildEmote
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildEmote
    name: GuildEmote
    nameWithType: GuildEmote
    fullName: Discord.GuildEmote
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<>
  nameWithType: IReadOnlyCollection<>
  fullName: IReadOnlyCollection<>
  nameWithType.vb: IReadOnlyCollection(Of )
  fullName.vb: IReadOnlyCollection(Of )
  name.vb: IReadOnlyCollection(Of )
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.Features*
  commentId: Overload:Discord.IGuild.Features
  name: Features
  nameWithType: IGuild.Features
  fullName: Discord.IGuild.Features
- uid: IReadOnlyCollection{System.String}
  commentId: '!:IReadOnlyCollection{System.String}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<String>
  nameWithType: IReadOnlyCollection<String>
  fullName: IReadOnlyCollection<System.String>
  nameWithType.vb: IReadOnlyCollection(Of String)
  fullName.vb: IReadOnlyCollection(Of System.String)
  name.vb: IReadOnlyCollection(Of String)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.Roles*
  commentId: Overload:Discord.IGuild.Roles
  name: Roles
  nameWithType: IGuild.Roles
  fullName: Discord.IGuild.Roles
- uid: IReadOnlyCollection{Discord.IRole}
  commentId: '!:IReadOnlyCollection{Discord.IRole}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<IRole>
  nameWithType: IReadOnlyCollection<IRole>
  fullName: IReadOnlyCollection<Discord.IRole>
  nameWithType.vb: IReadOnlyCollection(Of IRole)
  fullName.vb: IReadOnlyCollection(Of Discord.IRole)
  name.vb: IReadOnlyCollection(Of IRole)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.PremiumTier*
  commentId: Overload:Discord.IGuild.PremiumTier
  name: PremiumTier
  nameWithType: IGuild.PremiumTier
  fullName: Discord.IGuild.PremiumTier
- uid: Discord.PremiumTier
  commentId: T:Discord.PremiumTier
  parent: Discord
  name: PremiumTier
  nameWithType: PremiumTier
  fullName: Discord.PremiumTier
- uid: Discord.IGuild.BannerId*
  commentId: Overload:Discord.IGuild.BannerId
  name: BannerId
  nameWithType: IGuild.BannerId
  fullName: Discord.IGuild.BannerId
- uid: Discord.IGuild.BannerUrl*
  commentId: Overload:Discord.IGuild.BannerUrl
  name: BannerUrl
  nameWithType: IGuild.BannerUrl
  fullName: Discord.IGuild.BannerUrl
- uid: Discord.IGuild.VanityURLCode*
  commentId: Overload:Discord.IGuild.VanityURLCode
  name: VanityURLCode
  nameWithType: IGuild.VanityURLCode
  fullName: Discord.IGuild.VanityURLCode
- uid: Discord.IGuild.SystemChannelFlags*
  commentId: Overload:Discord.IGuild.SystemChannelFlags
  name: SystemChannelFlags
  nameWithType: IGuild.SystemChannelFlags
  fullName: Discord.IGuild.SystemChannelFlags
- uid: Discord.SystemChannelMessageDeny
  commentId: T:Discord.SystemChannelMessageDeny
  parent: Discord
  name: SystemChannelMessageDeny
  nameWithType: SystemChannelMessageDeny
  fullName: Discord.SystemChannelMessageDeny
- uid: Discord.IGuild.Description*
  commentId: Overload:Discord.IGuild.Description
  name: Description
  nameWithType: IGuild.Description
  fullName: Discord.IGuild.Description
- uid: Discord.IGuild.PremiumSubscriptionCount*
  commentId: Overload:Discord.IGuild.PremiumSubscriptionCount
  name: PremiumSubscriptionCount
  nameWithType: IGuild.PremiumSubscriptionCount
  fullName: Discord.IGuild.PremiumSubscriptionCount
- uid: Discord.IGuild.ModifyAsync*
  commentId: Overload:Discord.IGuild.ModifyAsync
  name: ModifyAsync
  nameWithType: IGuild.ModifyAsync
  fullName: Discord.IGuild.ModifyAsync
- uid: Action{Discord.GuildProperties}
  commentId: '!:Action{Discord.GuildProperties}'
  definition: Action`1
  name: Action<GuildProperties>
  nameWithType: Action<GuildProperties>
  fullName: Action<Discord.GuildProperties>
  nameWithType.vb: Action(Of GuildProperties)
  fullName.vb: Action(Of Discord.GuildProperties)
  name.vb: Action(Of GuildProperties)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildProperties
    name: GuildProperties
    nameWithType: GuildProperties
    fullName: Discord.GuildProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildProperties
    name: GuildProperties
    nameWithType: GuildProperties
    fullName: Discord.GuildProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.ModifyEmbedAsync*
  commentId: Overload:Discord.IGuild.ModifyEmbedAsync
  name: ModifyEmbedAsync
  nameWithType: IGuild.ModifyEmbedAsync
  fullName: Discord.IGuild.ModifyEmbedAsync
- uid: Action{Discord.GuildEmbedProperties}
  commentId: '!:Action{Discord.GuildEmbedProperties}'
  definition: Action`1
  name: Action<GuildEmbedProperties>
  nameWithType: Action<GuildEmbedProperties>
  fullName: Action<Discord.GuildEmbedProperties>
  nameWithType.vb: Action(Of GuildEmbedProperties)
  fullName.vb: Action(Of Discord.GuildEmbedProperties)
  name.vb: Action(Of GuildEmbedProperties)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildEmbedProperties
    name: GuildEmbedProperties
    nameWithType: GuildEmbedProperties
    fullName: Discord.GuildEmbedProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildEmbedProperties
    name: GuildEmbedProperties
    nameWithType: GuildEmbedProperties
    fullName: Discord.GuildEmbedProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.ReorderChannelsAsync*
  commentId: Overload:Discord.IGuild.ReorderChannelsAsync
  name: ReorderChannelsAsync
  nameWithType: IGuild.ReorderChannelsAsync
  fullName: Discord.IGuild.ReorderChannelsAsync
- uid: IEnumerable{Discord.ReorderChannelProperties}
  commentId: '!:IEnumerable{Discord.ReorderChannelProperties}'
  definition: IEnumerable`1
  name: IEnumerable<ReorderChannelProperties>
  nameWithType: IEnumerable<ReorderChannelProperties>
  fullName: IEnumerable<Discord.ReorderChannelProperties>
  nameWithType.vb: IEnumerable(Of ReorderChannelProperties)
  fullName.vb: IEnumerable(Of Discord.ReorderChannelProperties)
  name.vb: IEnumerable(Of ReorderChannelProperties)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ReorderChannelProperties
    name: ReorderChannelProperties
    nameWithType: ReorderChannelProperties
    fullName: Discord.ReorderChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ReorderChannelProperties
    name: ReorderChannelProperties
    nameWithType: ReorderChannelProperties
    fullName: Discord.ReorderChannelProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.ReorderRolesAsync*
  commentId: Overload:Discord.IGuild.ReorderRolesAsync
  name: ReorderRolesAsync
  nameWithType: IGuild.ReorderRolesAsync
  fullName: Discord.IGuild.ReorderRolesAsync
- uid: IEnumerable{Discord.ReorderRoleProperties}
  commentId: '!:IEnumerable{Discord.ReorderRoleProperties}'
  definition: IEnumerable`1
  name: IEnumerable<ReorderRoleProperties>
  nameWithType: IEnumerable<ReorderRoleProperties>
  fullName: IEnumerable<Discord.ReorderRoleProperties>
  nameWithType.vb: IEnumerable(Of ReorderRoleProperties)
  fullName.vb: IEnumerable(Of Discord.ReorderRoleProperties)
  name.vb: IEnumerable(Of ReorderRoleProperties)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ReorderRoleProperties
    name: ReorderRoleProperties
    nameWithType: ReorderRoleProperties
    fullName: Discord.ReorderRoleProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ReorderRoleProperties
    name: ReorderRoleProperties
    nameWithType: ReorderRoleProperties
    fullName: Discord.ReorderRoleProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.LeaveAsync*
  commentId: Overload:Discord.IGuild.LeaveAsync
  name: LeaveAsync
  nameWithType: IGuild.LeaveAsync
  fullName: Discord.IGuild.LeaveAsync
- uid: Discord.IGuild.GetBansAsync*
  commentId: Overload:Discord.IGuild.GetBansAsync
  name: GetBansAsync
  nameWithType: IGuild.GetBansAsync
  fullName: Discord.IGuild.GetBansAsync
- uid: Task{IReadOnlyCollection{Discord.IBan}}
  commentId: '!:Task{IReadOnlyCollection{Discord.IBan}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<IBan>>
  nameWithType: Task<IReadOnlyCollection<IBan>>
  fullName: Task<IReadOnlyCollection<Discord.IBan>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IBan))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.IBan))
  name.vb: Task(Of IReadOnlyCollection(Of IBan))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IBan
    name: IBan
    nameWithType: IBan
    fullName: Discord.IBan
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IBan
    name: IBan
    nameWithType: IBan
    fullName: Discord.IBan
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.GetBanAsync*
  commentId: Overload:Discord.IGuild.GetBanAsync
  name: GetBanAsync
  nameWithType: IGuild.GetBanAsync
  fullName: Discord.IGuild.GetBanAsync
- uid: Discord.IUser
  commentId: T:Discord.IUser
  parent: Discord
  name: IUser
  nameWithType: IUser
  fullName: Discord.IUser
- uid: Task{Discord.IBan}
  commentId: '!:Task{Discord.IBan}'
  definition: Task`1
  name: Task<IBan>
  nameWithType: Task<IBan>
  fullName: Task<Discord.IBan>
  nameWithType.vb: Task(Of IBan)
  fullName.vb: Task(Of Discord.IBan)
  name.vb: Task(Of IBan)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IBan
    name: IBan
    nameWithType: IBan
    fullName: Discord.IBan
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IBan
    name: IBan
    nameWithType: IBan
    fullName: Discord.IBan
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.AddBanAsync*
  commentId: Overload:Discord.IGuild.AddBanAsync
  name: AddBanAsync
  nameWithType: IGuild.AddBanAsync
  fullName: Discord.IGuild.AddBanAsync
- uid: Discord.IGuild.RemoveBanAsync*
  commentId: Overload:Discord.IGuild.RemoveBanAsync
  name: RemoveBanAsync
  nameWithType: IGuild.RemoveBanAsync
  fullName: Discord.IGuild.RemoveBanAsync
- uid: Discord.CacheMode
  commentId: T:Discord.CacheMode
  parent: Discord
  name: CacheMode
  nameWithType: CacheMode
  fullName: Discord.CacheMode
- uid: Discord.IGuild.GetChannelsAsync*
  commentId: Overload:Discord.IGuild.GetChannelsAsync
  name: GetChannelsAsync
  nameWithType: IGuild.GetChannelsAsync
  fullName: Discord.IGuild.GetChannelsAsync
- uid: Task{IReadOnlyCollection{Discord.IGuildChannel}}
  commentId: '!:Task{IReadOnlyCollection{Discord.IGuildChannel}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<IGuildChannel>>
  nameWithType: Task<IReadOnlyCollection<IGuildChannel>>
  fullName: Task<IReadOnlyCollection<Discord.IGuildChannel>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IGuildChannel))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.IGuildChannel))
  name.vb: Task(Of IReadOnlyCollection(Of IGuildChannel))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IGuildChannel
    name: IGuildChannel
    nameWithType: IGuildChannel
    fullName: Discord.IGuildChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IGuildChannel
    name: IGuildChannel
    nameWithType: IGuildChannel
    fullName: Discord.IGuildChannel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.GetChannelAsync*
  commentId: Overload:Discord.IGuild.GetChannelAsync
  name: GetChannelAsync
  nameWithType: IGuild.GetChannelAsync
  fullName: Discord.IGuild.GetChannelAsync
- uid: Task{Discord.IGuildChannel}
  commentId: '!:Task{Discord.IGuildChannel}'
  definition: Task`1
  name: Task<IGuildChannel>
  nameWithType: Task<IGuildChannel>
  fullName: Task<Discord.IGuildChannel>
  nameWithType.vb: Task(Of IGuildChannel)
  fullName.vb: Task(Of Discord.IGuildChannel)
  name.vb: Task(Of IGuildChannel)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IGuildChannel
    name: IGuildChannel
    nameWithType: IGuildChannel
    fullName: Discord.IGuildChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IGuildChannel
    name: IGuildChannel
    nameWithType: IGuildChannel
    fullName: Discord.IGuildChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.GetTextChannelsAsync*
  commentId: Overload:Discord.IGuild.GetTextChannelsAsync
  name: GetTextChannelsAsync
  nameWithType: IGuild.GetTextChannelsAsync
  fullName: Discord.IGuild.GetTextChannelsAsync
- uid: Task{IReadOnlyCollection{Discord.ITextChannel}}
  commentId: '!:Task{IReadOnlyCollection{Discord.ITextChannel}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<ITextChannel>>
  nameWithType: Task<IReadOnlyCollection<ITextChannel>>
  fullName: Task<IReadOnlyCollection<Discord.ITextChannel>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of ITextChannel))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.ITextChannel))
  name.vb: Task(Of IReadOnlyCollection(Of ITextChannel))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ITextChannel
    name: ITextChannel
    nameWithType: ITextChannel
    fullName: Discord.ITextChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ITextChannel
    name: ITextChannel
    nameWithType: ITextChannel
    fullName: Discord.ITextChannel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.GetTextChannelAsync*
  commentId: Overload:Discord.IGuild.GetTextChannelAsync
  name: GetTextChannelAsync
  nameWithType: IGuild.GetTextChannelAsync
  fullName: Discord.IGuild.GetTextChannelAsync
- uid: Task{Discord.ITextChannel}
  commentId: '!:Task{Discord.ITextChannel}'
  definition: Task`1
  name: Task<ITextChannel>
  nameWithType: Task<ITextChannel>
  fullName: Task<Discord.ITextChannel>
  nameWithType.vb: Task(Of ITextChannel)
  fullName.vb: Task(Of Discord.ITextChannel)
  name.vb: Task(Of ITextChannel)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ITextChannel
    name: ITextChannel
    nameWithType: ITextChannel
    fullName: Discord.ITextChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ITextChannel
    name: ITextChannel
    nameWithType: ITextChannel
    fullName: Discord.ITextChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.GetVoiceChannelsAsync*
  commentId: Overload:Discord.IGuild.GetVoiceChannelsAsync
  name: GetVoiceChannelsAsync
  nameWithType: IGuild.GetVoiceChannelsAsync
  fullName: Discord.IGuild.GetVoiceChannelsAsync
- uid: Task{IReadOnlyCollection{Discord.IVoiceChannel}}
  commentId: '!:Task{IReadOnlyCollection{Discord.IVoiceChannel}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<IVoiceChannel>>
  nameWithType: Task<IReadOnlyCollection<IVoiceChannel>>
  fullName: Task<IReadOnlyCollection<Discord.IVoiceChannel>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IVoiceChannel))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.IVoiceChannel))
  name.vb: Task(Of IReadOnlyCollection(Of IVoiceChannel))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IVoiceChannel
    name: IVoiceChannel
    nameWithType: IVoiceChannel
    fullName: Discord.IVoiceChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IVoiceChannel
    name: IVoiceChannel
    nameWithType: IVoiceChannel
    fullName: Discord.IVoiceChannel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.GetCategoriesAsync*
  commentId: Overload:Discord.IGuild.GetCategoriesAsync
  name: GetCategoriesAsync
  nameWithType: IGuild.GetCategoriesAsync
  fullName: Discord.IGuild.GetCategoriesAsync
- uid: Task{IReadOnlyCollection{Discord.ICategoryChannel}}
  commentId: '!:Task{IReadOnlyCollection{Discord.ICategoryChannel}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<ICategoryChannel>>
  nameWithType: Task<IReadOnlyCollection<ICategoryChannel>>
  fullName: Task<IReadOnlyCollection<Discord.ICategoryChannel>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of ICategoryChannel))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.ICategoryChannel))
  name.vb: Task(Of IReadOnlyCollection(Of ICategoryChannel))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ICategoryChannel
    name: ICategoryChannel
    nameWithType: ICategoryChannel
    fullName: Discord.ICategoryChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ICategoryChannel
    name: ICategoryChannel
    nameWithType: ICategoryChannel
    fullName: Discord.ICategoryChannel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.GetVoiceChannelAsync*
  commentId: Overload:Discord.IGuild.GetVoiceChannelAsync
  name: GetVoiceChannelAsync
  nameWithType: IGuild.GetVoiceChannelAsync
  fullName: Discord.IGuild.GetVoiceChannelAsync
- uid: Task{Discord.IVoiceChannel}
  commentId: '!:Task{Discord.IVoiceChannel}'
  definition: Task`1
  name: Task<IVoiceChannel>
  nameWithType: Task<IVoiceChannel>
  fullName: Task<Discord.IVoiceChannel>
  nameWithType.vb: Task(Of IVoiceChannel)
  fullName.vb: Task(Of Discord.IVoiceChannel)
  name.vb: Task(Of IVoiceChannel)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IVoiceChannel
    name: IVoiceChannel
    nameWithType: IVoiceChannel
    fullName: Discord.IVoiceChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IVoiceChannel
    name: IVoiceChannel
    nameWithType: IVoiceChannel
    fullName: Discord.IVoiceChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.GetAFKChannelAsync*
  commentId: Overload:Discord.IGuild.GetAFKChannelAsync
  name: GetAFKChannelAsync
  nameWithType: IGuild.GetAFKChannelAsync
  fullName: Discord.IGuild.GetAFKChannelAsync
- uid: Discord.IGuild.GetSystemChannelAsync*
  commentId: Overload:Discord.IGuild.GetSystemChannelAsync
  name: GetSystemChannelAsync
  nameWithType: IGuild.GetSystemChannelAsync
  fullName: Discord.IGuild.GetSystemChannelAsync
- uid: Discord.IGuild.GetDefaultChannelAsync*
  commentId: Overload:Discord.IGuild.GetDefaultChannelAsync
  name: GetDefaultChannelAsync
  nameWithType: IGuild.GetDefaultChannelAsync
  fullName: Discord.IGuild.GetDefaultChannelAsync
- uid: Discord.IGuild.GetEmbedChannelAsync*
  commentId: Overload:Discord.IGuild.GetEmbedChannelAsync
  name: GetEmbedChannelAsync
  nameWithType: IGuild.GetEmbedChannelAsync
  fullName: Discord.IGuild.GetEmbedChannelAsync
- uid: Discord.IGuild.CreateTextChannelAsync*
  commentId: Overload:Discord.IGuild.CreateTextChannelAsync
  name: CreateTextChannelAsync
  nameWithType: IGuild.CreateTextChannelAsync
  fullName: Discord.IGuild.CreateTextChannelAsync
- uid: Action{Discord.TextChannelProperties}
  commentId: '!:Action{Discord.TextChannelProperties}'
  definition: Action`1
  name: Action<TextChannelProperties>
  nameWithType: Action<TextChannelProperties>
  fullName: Action<Discord.TextChannelProperties>
  nameWithType.vb: Action(Of TextChannelProperties)
  fullName.vb: Action(Of Discord.TextChannelProperties)
  name.vb: Action(Of TextChannelProperties)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.TextChannelProperties
    name: TextChannelProperties
    nameWithType: TextChannelProperties
    fullName: Discord.TextChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.TextChannelProperties
    name: TextChannelProperties
    nameWithType: TextChannelProperties
    fullName: Discord.TextChannelProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.CreateVoiceChannelAsync*
  commentId: Overload:Discord.IGuild.CreateVoiceChannelAsync
  name: CreateVoiceChannelAsync
  nameWithType: IGuild.CreateVoiceChannelAsync
  fullName: Discord.IGuild.CreateVoiceChannelAsync
- uid: Action{Discord.VoiceChannelProperties}
  commentId: '!:Action{Discord.VoiceChannelProperties}'
  definition: Action`1
  name: Action<VoiceChannelProperties>
  nameWithType: Action<VoiceChannelProperties>
  fullName: Action<Discord.VoiceChannelProperties>
  nameWithType.vb: Action(Of VoiceChannelProperties)
  fullName.vb: Action(Of Discord.VoiceChannelProperties)
  name.vb: Action(Of VoiceChannelProperties)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.VoiceChannelProperties
    name: VoiceChannelProperties
    nameWithType: VoiceChannelProperties
    fullName: Discord.VoiceChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.VoiceChannelProperties
    name: VoiceChannelProperties
    nameWithType: VoiceChannelProperties
    fullName: Discord.VoiceChannelProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.CreateCategoryAsync*
  commentId: Overload:Discord.IGuild.CreateCategoryAsync
  name: CreateCategoryAsync
  nameWithType: IGuild.CreateCategoryAsync
  fullName: Discord.IGuild.CreateCategoryAsync
- uid: Action{Discord.GuildChannelProperties}
  commentId: '!:Action{Discord.GuildChannelProperties}'
  definition: Action`1
  name: Action<GuildChannelProperties>
  nameWithType: Action<GuildChannelProperties>
  fullName: Action<Discord.GuildChannelProperties>
  nameWithType.vb: Action(Of GuildChannelProperties)
  fullName.vb: Action(Of Discord.GuildChannelProperties)
  name.vb: Action(Of GuildChannelProperties)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildChannelProperties
    name: GuildChannelProperties
    nameWithType: GuildChannelProperties
    fullName: Discord.GuildChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildChannelProperties
    name: GuildChannelProperties
    nameWithType: GuildChannelProperties
    fullName: Discord.GuildChannelProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{Discord.ICategoryChannel}
  commentId: '!:Task{Discord.ICategoryChannel}'
  definition: Task`1
  name: Task<ICategoryChannel>
  nameWithType: Task<ICategoryChannel>
  fullName: Task<Discord.ICategoryChannel>
  nameWithType.vb: Task(Of ICategoryChannel)
  fullName.vb: Task(Of Discord.ICategoryChannel)
  name.vb: Task(Of ICategoryChannel)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ICategoryChannel
    name: ICategoryChannel
    nameWithType: ICategoryChannel
    fullName: Discord.ICategoryChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ICategoryChannel
    name: ICategoryChannel
    nameWithType: ICategoryChannel
    fullName: Discord.ICategoryChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.GetVoiceRegionsAsync*
  commentId: Overload:Discord.IGuild.GetVoiceRegionsAsync
  name: GetVoiceRegionsAsync
  nameWithType: IGuild.GetVoiceRegionsAsync
  fullName: Discord.IGuild.GetVoiceRegionsAsync
- uid: Task{IReadOnlyCollection{Discord.IVoiceRegion}}
  commentId: '!:Task{IReadOnlyCollection{Discord.IVoiceRegion}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<IVoiceRegion>>
  nameWithType: Task<IReadOnlyCollection<IVoiceRegion>>
  fullName: Task<IReadOnlyCollection<Discord.IVoiceRegion>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IVoiceRegion))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.IVoiceRegion))
  name.vb: Task(Of IReadOnlyCollection(Of IVoiceRegion))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IVoiceRegion
    name: IVoiceRegion
    nameWithType: IVoiceRegion
    fullName: Discord.IVoiceRegion
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IVoiceRegion
    name: IVoiceRegion
    nameWithType: IVoiceRegion
    fullName: Discord.IVoiceRegion
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.GetIntegrationsAsync*
  commentId: Overload:Discord.IGuild.GetIntegrationsAsync
  name: GetIntegrationsAsync
  nameWithType: IGuild.GetIntegrationsAsync
  fullName: Discord.IGuild.GetIntegrationsAsync
- uid: Task{IReadOnlyCollection{Discord.IGuildIntegration}}
  commentId: '!:Task{IReadOnlyCollection{Discord.IGuildIntegration}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<IGuildIntegration>>
  nameWithType: Task<IReadOnlyCollection<IGuildIntegration>>
  fullName: Task<IReadOnlyCollection<Discord.IGuildIntegration>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IGuildIntegration))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.IGuildIntegration))
  name.vb: Task(Of IReadOnlyCollection(Of IGuildIntegration))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IGuildIntegration
    name: IGuildIntegration
    nameWithType: IGuildIntegration
    fullName: Discord.IGuildIntegration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IGuildIntegration
    name: IGuildIntegration
    nameWithType: IGuildIntegration
    fullName: Discord.IGuildIntegration
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.CreateIntegrationAsync*
  commentId: Overload:Discord.IGuild.CreateIntegrationAsync
  name: CreateIntegrationAsync
  nameWithType: IGuild.CreateIntegrationAsync
  fullName: Discord.IGuild.CreateIntegrationAsync
- uid: Task{Discord.IGuildIntegration}
  commentId: '!:Task{Discord.IGuildIntegration}'
  definition: Task`1
  name: Task<IGuildIntegration>
  nameWithType: Task<IGuildIntegration>
  fullName: Task<Discord.IGuildIntegration>
  nameWithType.vb: Task(Of IGuildIntegration)
  fullName.vb: Task(Of Discord.IGuildIntegration)
  name.vb: Task(Of IGuildIntegration)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IGuildIntegration
    name: IGuildIntegration
    nameWithType: IGuildIntegration
    fullName: Discord.IGuildIntegration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IGuildIntegration
    name: IGuildIntegration
    nameWithType: IGuildIntegration
    fullName: Discord.IGuildIntegration
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.GetInvitesAsync*
  commentId: Overload:Discord.IGuild.GetInvitesAsync
  name: GetInvitesAsync
  nameWithType: IGuild.GetInvitesAsync
  fullName: Discord.IGuild.GetInvitesAsync
- uid: Task{IReadOnlyCollection{Discord.IInviteMetadata}}
  commentId: '!:Task{IReadOnlyCollection{Discord.IInviteMetadata}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<IInviteMetadata>>
  nameWithType: Task<IReadOnlyCollection<IInviteMetadata>>
  fullName: Task<IReadOnlyCollection<Discord.IInviteMetadata>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IInviteMetadata))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.IInviteMetadata))
  name.vb: Task(Of IReadOnlyCollection(Of IInviteMetadata))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IInviteMetadata
    name: IInviteMetadata
    nameWithType: IInviteMetadata
    fullName: Discord.IInviteMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IInviteMetadata
    name: IInviteMetadata
    nameWithType: IInviteMetadata
    fullName: Discord.IInviteMetadata
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.GetVanityInviteAsync*
  commentId: Overload:Discord.IGuild.GetVanityInviteAsync
  name: GetVanityInviteAsync
  nameWithType: IGuild.GetVanityInviteAsync
  fullName: Discord.IGuild.GetVanityInviteAsync
- uid: Task{Discord.IInviteMetadata}
  commentId: '!:Task{Discord.IInviteMetadata}'
  definition: Task`1
  name: Task<IInviteMetadata>
  nameWithType: Task<IInviteMetadata>
  fullName: Task<Discord.IInviteMetadata>
  nameWithType.vb: Task(Of IInviteMetadata)
  fullName.vb: Task(Of Discord.IInviteMetadata)
  name.vb: Task(Of IInviteMetadata)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IInviteMetadata
    name: IInviteMetadata
    nameWithType: IInviteMetadata
    fullName: Discord.IInviteMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IInviteMetadata
    name: IInviteMetadata
    nameWithType: IInviteMetadata
    fullName: Discord.IInviteMetadata
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.GetRole*
  commentId: Overload:Discord.IGuild.GetRole
  name: GetRole
  nameWithType: IGuild.GetRole
  fullName: Discord.IGuild.GetRole
- uid: Discord.IGuild.CreateRoleAsync*
  commentId: Overload:Discord.IGuild.CreateRoleAsync
  name: CreateRoleAsync
  nameWithType: IGuild.CreateRoleAsync
  fullName: Discord.IGuild.CreateRoleAsync
- uid: System.Nullable{Discord.GuildPermissions}
  commentId: '!:System.Nullable{Discord.GuildPermissions}'
  definition: System.Nullable`1
  name: Nullable<GuildPermissions>
  nameWithType: Nullable<GuildPermissions>
  fullName: System.Nullable<Discord.GuildPermissions>
  nameWithType.vb: Nullable(Of GuildPermissions)
  fullName.vb: System.Nullable(Of Discord.GuildPermissions)
  name.vb: Nullable(Of GuildPermissions)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildPermissions
    name: GuildPermissions
    nameWithType: GuildPermissions
    fullName: Discord.GuildPermissions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildPermissions
    name: GuildPermissions
    nameWithType: GuildPermissions
    fullName: Discord.GuildPermissions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{Discord.Color}
  commentId: '!:System.Nullable{Discord.Color}'
  definition: System.Nullable`1
  name: Nullable<Color>
  nameWithType: Nullable<Color>
  fullName: System.Nullable<Discord.Color>
  nameWithType.vb: Nullable(Of Color)
  fullName.vb: System.Nullable(Of Discord.Color)
  name.vb: Nullable(Of Color)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Color
    name: Color
    nameWithType: Color
    fullName: Discord.Color
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Color
    name: Color
    nameWithType: Color
    fullName: Discord.Color
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{Discord.IRole}
  commentId: '!:Task{Discord.IRole}'
  definition: Task`1
  name: Task<IRole>
  nameWithType: Task<IRole>
  fullName: Task<Discord.IRole>
  nameWithType.vb: Task(Of IRole)
  fullName.vb: Task(Of Discord.IRole)
  name.vb: Task(Of IRole)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.AddGuildUserAsync*
  commentId: Overload:Discord.IGuild.AddGuildUserAsync
  name: AddGuildUserAsync
  nameWithType: IGuild.AddGuildUserAsync
  fullName: Discord.IGuild.AddGuildUserAsync
- uid: Action{Discord.AddGuildUserProperties}
  commentId: '!:Action{Discord.AddGuildUserProperties}'
  definition: Action`1
  name: Action<AddGuildUserProperties>
  nameWithType: Action<AddGuildUserProperties>
  fullName: Action<Discord.AddGuildUserProperties>
  nameWithType.vb: Action(Of AddGuildUserProperties)
  fullName.vb: Action(Of Discord.AddGuildUserProperties)
  name.vb: Action(Of AddGuildUserProperties)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.AddGuildUserProperties
    name: AddGuildUserProperties
    nameWithType: AddGuildUserProperties
    fullName: Discord.AddGuildUserProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.AddGuildUserProperties
    name: AddGuildUserProperties
    nameWithType: AddGuildUserProperties
    fullName: Discord.AddGuildUserProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{Discord.IGuildUser}
  commentId: '!:Task{Discord.IGuildUser}'
  definition: Task`1
  name: Task<IGuildUser>
  nameWithType: Task<IGuildUser>
  fullName: Task<Discord.IGuildUser>
  nameWithType.vb: Task(Of IGuildUser)
  fullName.vb: Task(Of Discord.IGuildUser)
  name.vb: Task(Of IGuildUser)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IGuildUser
    name: IGuildUser
    nameWithType: IGuildUser
    fullName: Discord.IGuildUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IGuildUser
    name: IGuildUser
    nameWithType: IGuildUser
    fullName: Discord.IGuildUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.GetUsersAsync*
  commentId: Overload:Discord.IGuild.GetUsersAsync
  name: GetUsersAsync
  nameWithType: IGuild.GetUsersAsync
  fullName: Discord.IGuild.GetUsersAsync
- uid: Task{IReadOnlyCollection{Discord.IGuildUser}}
  commentId: '!:Task{IReadOnlyCollection{Discord.IGuildUser}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<IGuildUser>>
  nameWithType: Task<IReadOnlyCollection<IGuildUser>>
  fullName: Task<IReadOnlyCollection<Discord.IGuildUser>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IGuildUser))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.IGuildUser))
  name.vb: Task(Of IReadOnlyCollection(Of IGuildUser))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IGuildUser
    name: IGuildUser
    nameWithType: IGuildUser
    fullName: Discord.IGuildUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IGuildUser
    name: IGuildUser
    nameWithType: IGuildUser
    fullName: Discord.IGuildUser
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.GetUserAsync*
  commentId: Overload:Discord.IGuild.GetUserAsync
  name: GetUserAsync
  nameWithType: IGuild.GetUserAsync
  fullName: Discord.IGuild.GetUserAsync
- uid: Discord.IGuild.GetCurrentUserAsync*
  commentId: Overload:Discord.IGuild.GetCurrentUserAsync
  name: GetCurrentUserAsync
  nameWithType: IGuild.GetCurrentUserAsync
  fullName: Discord.IGuild.GetCurrentUserAsync
- uid: Discord.IGuild.GetOwnerAsync*
  commentId: Overload:Discord.IGuild.GetOwnerAsync
  name: GetOwnerAsync
  nameWithType: IGuild.GetOwnerAsync
  fullName: Discord.IGuild.GetOwnerAsync
- uid: Discord.IGuild.DownloadUsersAsync*
  commentId: Overload:Discord.IGuild.DownloadUsersAsync
  name: DownloadUsersAsync
  nameWithType: IGuild.DownloadUsersAsync
  fullName: Discord.IGuild.DownloadUsersAsync
- uid: Discord.IGuild.PruneUsersAsync*
  commentId: Overload:Discord.IGuild.PruneUsersAsync
  name: PruneUsersAsync
  nameWithType: IGuild.PruneUsersAsync
  fullName: Discord.IGuild.PruneUsersAsync
- uid: Task{System.Int32}
  commentId: '!:Task{System.Int32}'
  definition: Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.GetAuditLogsAsync*
  commentId: Overload:Discord.IGuild.GetAuditLogsAsync
  name: GetAuditLogsAsync
  nameWithType: IGuild.GetAuditLogsAsync
  fullName: Discord.IGuild.GetAuditLogsAsync
- uid: Task{IReadOnlyCollection{Discord.IAuditLogEntry}}
  commentId: '!:Task{IReadOnlyCollection{Discord.IAuditLogEntry}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<IAuditLogEntry>>
  nameWithType: Task<IReadOnlyCollection<IAuditLogEntry>>
  fullName: Task<IReadOnlyCollection<Discord.IAuditLogEntry>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IAuditLogEntry))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.IAuditLogEntry))
  name.vb: Task(Of IReadOnlyCollection(Of IAuditLogEntry))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IAuditLogEntry
    name: IAuditLogEntry
    nameWithType: IAuditLogEntry
    fullName: Discord.IAuditLogEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IAuditLogEntry
    name: IAuditLogEntry
    nameWithType: IAuditLogEntry
    fullName: Discord.IAuditLogEntry
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.GetWebhookAsync*
  commentId: Overload:Discord.IGuild.GetWebhookAsync
  name: GetWebhookAsync
  nameWithType: IGuild.GetWebhookAsync
  fullName: Discord.IGuild.GetWebhookAsync
- uid: Task{Discord.IWebhook}
  commentId: '!:Task{Discord.IWebhook}'
  definition: Task`1
  name: Task<IWebhook>
  nameWithType: Task<IWebhook>
  fullName: Task<Discord.IWebhook>
  nameWithType.vb: Task(Of IWebhook)
  fullName.vb: Task(Of Discord.IWebhook)
  name.vb: Task(Of IWebhook)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IWebhook
    name: IWebhook
    nameWithType: IWebhook
    fullName: Discord.IWebhook
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IWebhook
    name: IWebhook
    nameWithType: IWebhook
    fullName: Discord.IWebhook
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.GetWebhooksAsync*
  commentId: Overload:Discord.IGuild.GetWebhooksAsync
  name: GetWebhooksAsync
  nameWithType: IGuild.GetWebhooksAsync
  fullName: Discord.IGuild.GetWebhooksAsync
- uid: Task{IReadOnlyCollection{Discord.IWebhook}}
  commentId: '!:Task{IReadOnlyCollection{Discord.IWebhook}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<IWebhook>>
  nameWithType: Task<IReadOnlyCollection<IWebhook>>
  fullName: Task<IReadOnlyCollection<Discord.IWebhook>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IWebhook))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.IWebhook))
  name.vb: Task(Of IReadOnlyCollection(Of IWebhook))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IWebhook
    name: IWebhook
    nameWithType: IWebhook
    fullName: Discord.IWebhook
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IWebhook
    name: IWebhook
    nameWithType: IWebhook
    fullName: Discord.IWebhook
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.GetEmoteAsync*
  commentId: Overload:Discord.IGuild.GetEmoteAsync
  name: GetEmoteAsync
  nameWithType: IGuild.GetEmoteAsync
  fullName: Discord.IGuild.GetEmoteAsync
- uid: Task{Discord.GuildEmote}
  commentId: '!:Task{Discord.GuildEmote}'
  definition: Task`1
  name: Task<GuildEmote>
  nameWithType: Task<GuildEmote>
  fullName: Task<Discord.GuildEmote>
  nameWithType.vb: Task(Of GuildEmote)
  fullName.vb: Task(Of Discord.GuildEmote)
  name.vb: Task(Of GuildEmote)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildEmote
    name: GuildEmote
    nameWithType: GuildEmote
    fullName: Discord.GuildEmote
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildEmote
    name: GuildEmote
    nameWithType: GuildEmote
    fullName: Discord.GuildEmote
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.GuildEmote
  commentId: T:Discord.GuildEmote
  parent: Discord
  name: GuildEmote
  nameWithType: GuildEmote
  fullName: Discord.GuildEmote
- uid: Discord.IGuild.CreateEmoteAsync*
  commentId: Overload:Discord.IGuild.CreateEmoteAsync
  name: CreateEmoteAsync
  nameWithType: IGuild.CreateEmoteAsync
  fullName: Discord.IGuild.CreateEmoteAsync
- uid: Discord.Image
  commentId: T:Discord.Image
  parent: Discord
  name: Image
  nameWithType: Image
  fullName: Discord.Image
- uid: Discord.Optional{IEnumerable{Discord.IRole}}
  commentId: T:Discord.Optional{IEnumerable{Discord.IRole}}
  parent: Discord
  definition: Discord.Optional`1
  name: Optional<IEnumerable<IRole>>
  nameWithType: Optional<IEnumerable<IRole>>
  fullName: Discord.Optional<IEnumerable<Discord.IRole>>
  nameWithType.vb: Optional(Of IEnumerable(Of IRole))
  fullName.vb: Discord.Optional(Of IEnumerable(Of Discord.IRole))
  name.vb: Optional(Of IEnumerable(Of IRole))
  spec.csharp:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: <
    nameWithType: <
    fullName: <
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Optional`1
  commentId: T:Discord.Optional`1
  parent: Discord
  name: Optional<T>
  nameWithType: Optional<T>
  fullName: Discord.Optional<T>
  nameWithType.vb: Optional(Of T)
  fullName.vb: Discord.Optional(Of T)
  name.vb: Optional(Of T)
  spec.csharp:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.ModifyEmoteAsync*
  commentId: Overload:Discord.IGuild.ModifyEmoteAsync
  name: ModifyEmoteAsync
  nameWithType: IGuild.ModifyEmoteAsync
  fullName: Discord.IGuild.ModifyEmoteAsync
- uid: Action{Discord.EmoteProperties}
  commentId: '!:Action{Discord.EmoteProperties}'
  definition: Action`1
  name: Action<EmoteProperties>
  nameWithType: Action<EmoteProperties>
  fullName: Action<Discord.EmoteProperties>
  nameWithType.vb: Action(Of EmoteProperties)
  fullName.vb: Action(Of Discord.EmoteProperties)
  name.vb: Action(Of EmoteProperties)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.EmoteProperties
    name: EmoteProperties
    nameWithType: EmoteProperties
    fullName: Discord.EmoteProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.EmoteProperties
    name: EmoteProperties
    nameWithType: EmoteProperties
    fullName: Discord.EmoteProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.DeleteEmoteAsync*
  commentId: Overload:Discord.IGuild.DeleteEmoteAsync
  name: DeleteEmoteAsync
  nameWithType: IGuild.DeleteEmoteAsync
  fullName: Discord.IGuild.DeleteEmoteAsync
