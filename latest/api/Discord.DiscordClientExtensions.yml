### YamlMime:ManagedReference
items:
- uid: Discord.DiscordClientExtensions
  commentId: T:Discord.DiscordClientExtensions
  id: DiscordClientExtensions
  parent: Discord
  children:
  - Discord.DiscordClientExtensions.GetDMChannelAsync(Discord.IDiscordClient,System.UInt64)
  - Discord.DiscordClientExtensions.GetDMChannelsAsync(Discord.IDiscordClient)
  - Discord.DiscordClientExtensions.GetGroupChannelAsync(Discord.IDiscordClient,System.UInt64)
  - Discord.DiscordClientExtensions.GetGroupChannelsAsync(Discord.IDiscordClient)
  - Discord.DiscordClientExtensions.GetOptimalVoiceRegionAsync(Discord.IDiscordClient)
  - Discord.DiscordClientExtensions.GetPrivateChannelAsync(Discord.IDiscordClient,System.UInt64)
  langs:
  - csharp
  - vb
  name: DiscordClientExtensions
  nameWithType: DiscordClientExtensions
  fullName: Discord.DiscordClientExtensions
  type: Class
  source:
    remote:
      path: src/Discord.Net.Core/Extensions/DiscordClientExtensions.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DiscordClientExtensions
    path: ../src/Discord.Net.Core/Extensions/DiscordClientExtensions.cs
    startLine: 7
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: 'An extension class for the Discord client. '
  example: []
  syntax:
    content: public static class DiscordClientExtensions
    content.vb: Public Module DiscordClientExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Discord.DiscordClientExtensions.GetPrivateChannelAsync(Discord.IDiscordClient,System.UInt64)
  commentId: M:Discord.DiscordClientExtensions.GetPrivateChannelAsync(Discord.IDiscordClient,System.UInt64)
  id: GetPrivateChannelAsync(Discord.IDiscordClient,System.UInt64)
  isExtensionMethod: true
  parent: Discord.DiscordClientExtensions
  langs:
  - csharp
  - vb
  name: GetPrivateChannelAsync(IDiscordClient, UInt64)
  nameWithType: DiscordClientExtensions.GetPrivateChannelAsync(IDiscordClient, UInt64)
  fullName: Discord.DiscordClientExtensions.GetPrivateChannelAsync(Discord.IDiscordClient, System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Extensions/DiscordClientExtensions.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetPrivateChannelAsync
    path: ../src/Discord.Net.Core/Extensions/DiscordClientExtensions.cs
    startLine: 10
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: 'Gets the private channel with the provided ID. '
  example: []
  syntax:
    content: public static Task<IPrivateChannel> GetPrivateChannelAsync(this IDiscordClient client, ulong id)
    parameters:
    - id: client
      type: Discord.IDiscordClient
    - id: id
      type: System.UInt64
    return:
      type: System.Threading.Tasks.Task{Discord.IPrivateChannel}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetPrivateChannelAsync(client As IDiscordClient, id As ULong) As Task(Of IPrivateChannel)
  overload: Discord.DiscordClientExtensions.GetPrivateChannelAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Discord.DiscordClientExtensions.GetDMChannelAsync(Discord.IDiscordClient,System.UInt64)
  commentId: M:Discord.DiscordClientExtensions.GetDMChannelAsync(Discord.IDiscordClient,System.UInt64)
  id: GetDMChannelAsync(Discord.IDiscordClient,System.UInt64)
  isExtensionMethod: true
  parent: Discord.DiscordClientExtensions
  langs:
  - csharp
  - vb
  name: GetDMChannelAsync(IDiscordClient, UInt64)
  nameWithType: DiscordClientExtensions.GetDMChannelAsync(IDiscordClient, UInt64)
  fullName: Discord.DiscordClientExtensions.GetDMChannelAsync(Discord.IDiscordClient, System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Extensions/DiscordClientExtensions.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetDMChannelAsync
    path: ../src/Discord.Net.Core/Extensions/DiscordClientExtensions.cs
    startLine: 14
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: 'Gets the DM channel with the provided ID. '
  example: []
  syntax:
    content: public static Task<IDMChannel> GetDMChannelAsync(this IDiscordClient client, ulong id)
    parameters:
    - id: client
      type: Discord.IDiscordClient
    - id: id
      type: System.UInt64
    return:
      type: System.Threading.Tasks.Task{Discord.IDMChannel}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDMChannelAsync(client As IDiscordClient, id As ULong) As Task(Of IDMChannel)
  overload: Discord.DiscordClientExtensions.GetDMChannelAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Discord.DiscordClientExtensions.GetDMChannelsAsync(Discord.IDiscordClient)
  commentId: M:Discord.DiscordClientExtensions.GetDMChannelsAsync(Discord.IDiscordClient)
  id: GetDMChannelsAsync(Discord.IDiscordClient)
  isExtensionMethod: true
  parent: Discord.DiscordClientExtensions
  langs:
  - csharp
  - vb
  name: GetDMChannelsAsync(IDiscordClient)
  nameWithType: DiscordClientExtensions.GetDMChannelsAsync(IDiscordClient)
  fullName: Discord.DiscordClientExtensions.GetDMChannelsAsync(Discord.IDiscordClient)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Extensions/DiscordClientExtensions.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetDMChannelsAsync
    path: ../src/Discord.Net.Core/Extensions/DiscordClientExtensions.cs
    startLine: 17
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: 'Gets all available DM channels for the client. '
  example: []
  syntax:
    content: public static Task<IEnumerable<IDMChannel>> GetDMChannelsAsync(this IDiscordClient client)
    parameters:
    - id: client
      type: Discord.IDiscordClient
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Discord.IDMChannel}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDMChannelsAsync(client As IDiscordClient) As Task(Of IEnumerable(Of IDMChannel))
  overload: Discord.DiscordClientExtensions.GetDMChannelsAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Discord.DiscordClientExtensions.GetGroupChannelAsync(Discord.IDiscordClient,System.UInt64)
  commentId: M:Discord.DiscordClientExtensions.GetGroupChannelAsync(Discord.IDiscordClient,System.UInt64)
  id: GetGroupChannelAsync(Discord.IDiscordClient,System.UInt64)
  isExtensionMethod: true
  parent: Discord.DiscordClientExtensions
  langs:
  - csharp
  - vb
  name: GetGroupChannelAsync(IDiscordClient, UInt64)
  nameWithType: DiscordClientExtensions.GetGroupChannelAsync(IDiscordClient, UInt64)
  fullName: Discord.DiscordClientExtensions.GetGroupChannelAsync(Discord.IDiscordClient, System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Extensions/DiscordClientExtensions.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetGroupChannelAsync
    path: ../src/Discord.Net.Core/Extensions/DiscordClientExtensions.cs
    startLine: 21
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: 'Gets the group channel with the provided ID. '
  example: []
  syntax:
    content: public static Task<IGroupChannel> GetGroupChannelAsync(this IDiscordClient client, ulong id)
    parameters:
    - id: client
      type: Discord.IDiscordClient
    - id: id
      type: System.UInt64
    return:
      type: System.Threading.Tasks.Task{Discord.IGroupChannel}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetGroupChannelAsync(client As IDiscordClient, id As ULong) As Task(Of IGroupChannel)
  overload: Discord.DiscordClientExtensions.GetGroupChannelAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Discord.DiscordClientExtensions.GetGroupChannelsAsync(Discord.IDiscordClient)
  commentId: M:Discord.DiscordClientExtensions.GetGroupChannelsAsync(Discord.IDiscordClient)
  id: GetGroupChannelsAsync(Discord.IDiscordClient)
  isExtensionMethod: true
  parent: Discord.DiscordClientExtensions
  langs:
  - csharp
  - vb
  name: GetGroupChannelsAsync(IDiscordClient)
  nameWithType: DiscordClientExtensions.GetGroupChannelsAsync(IDiscordClient)
  fullName: Discord.DiscordClientExtensions.GetGroupChannelsAsync(Discord.IDiscordClient)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Extensions/DiscordClientExtensions.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetGroupChannelsAsync
    path: ../src/Discord.Net.Core/Extensions/DiscordClientExtensions.cs
    startLine: 24
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: 'Gets all available group channels for the client. '
  example: []
  syntax:
    content: public static Task<IEnumerable<IGroupChannel>> GetGroupChannelsAsync(this IDiscordClient client)
    parameters:
    - id: client
      type: Discord.IDiscordClient
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Discord.IGroupChannel}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetGroupChannelsAsync(client As IDiscordClient) As Task(Of IEnumerable(Of IGroupChannel))
  overload: Discord.DiscordClientExtensions.GetGroupChannelsAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Discord.DiscordClientExtensions.GetOptimalVoiceRegionAsync(Discord.IDiscordClient)
  commentId: M:Discord.DiscordClientExtensions.GetOptimalVoiceRegionAsync(Discord.IDiscordClient)
  id: GetOptimalVoiceRegionAsync(Discord.IDiscordClient)
  isExtensionMethod: true
  parent: Discord.DiscordClientExtensions
  langs:
  - csharp
  - vb
  name: GetOptimalVoiceRegionAsync(IDiscordClient)
  nameWithType: DiscordClientExtensions.GetOptimalVoiceRegionAsync(IDiscordClient)
  fullName: Discord.DiscordClientExtensions.GetOptimalVoiceRegionAsync(Discord.IDiscordClient)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Extensions/DiscordClientExtensions.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetOptimalVoiceRegionAsync
    path: ../src/Discord.Net.Core/Extensions/DiscordClientExtensions.cs
    startLine: 28
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: 'Gets the most optimal voice region for the client. '
  example: []
  syntax:
    content: public static Task<IVoiceRegion> GetOptimalVoiceRegionAsync(this IDiscordClient discord)
    parameters:
    - id: discord
      type: Discord.IDiscordClient
    return:
      type: System.Threading.Tasks.Task{Discord.IVoiceRegion}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetOptimalVoiceRegionAsync(discord As IDiscordClient) As Task(Of IVoiceRegion)
  overload: Discord.DiscordClientExtensions.GetOptimalVoiceRegionAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.DiscordClientExtensions.GetPrivateChannelAsync*
  commentId: Overload:Discord.DiscordClientExtensions.GetPrivateChannelAsync
  name: GetPrivateChannelAsync
  nameWithType: DiscordClientExtensions.GetPrivateChannelAsync
  fullName: Discord.DiscordClientExtensions.GetPrivateChannelAsync
- uid: Discord.IDiscordClient
  commentId: T:Discord.IDiscordClient
  parent: Discord
  name: IDiscordClient
  nameWithType: IDiscordClient
  fullName: Discord.IDiscordClient
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.Threading.Tasks.Task{Discord.IPrivateChannel}
  commentId: T:System.Threading.Tasks.Task{Discord.IPrivateChannel}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IPrivateChannel>
  nameWithType: Task<IPrivateChannel>
  fullName: System.Threading.Tasks.Task<Discord.IPrivateChannel>
  nameWithType.vb: Task(Of IPrivateChannel)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IPrivateChannel)
  name.vb: Task(Of IPrivateChannel)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IPrivateChannel
    name: IPrivateChannel
    nameWithType: IPrivateChannel
    fullName: Discord.IPrivateChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IPrivateChannel
    name: IPrivateChannel
    nameWithType: IPrivateChannel
    fullName: Discord.IPrivateChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Discord.DiscordClientExtensions.GetDMChannelAsync*
  commentId: Overload:Discord.DiscordClientExtensions.GetDMChannelAsync
  name: GetDMChannelAsync
  nameWithType: DiscordClientExtensions.GetDMChannelAsync
  fullName: Discord.DiscordClientExtensions.GetDMChannelAsync
- uid: System.Threading.Tasks.Task{Discord.IDMChannel}
  commentId: T:System.Threading.Tasks.Task{Discord.IDMChannel}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IDMChannel>
  nameWithType: Task<IDMChannel>
  fullName: System.Threading.Tasks.Task<Discord.IDMChannel>
  nameWithType.vb: Task(Of IDMChannel)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IDMChannel)
  name.vb: Task(Of IDMChannel)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IDMChannel
    name: IDMChannel
    nameWithType: IDMChannel
    fullName: Discord.IDMChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IDMChannel
    name: IDMChannel
    nameWithType: IDMChannel
    fullName: Discord.IDMChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.DiscordClientExtensions.GetDMChannelsAsync*
  commentId: Overload:Discord.DiscordClientExtensions.GetDMChannelsAsync
  name: GetDMChannelsAsync
  nameWithType: DiscordClientExtensions.GetDMChannelsAsync
  fullName: Discord.DiscordClientExtensions.GetDMChannelsAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Discord.IDMChannel}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Discord.IDMChannel}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<IDMChannel>>
  nameWithType: Task<IEnumerable<IDMChannel>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Discord.IDMChannel>>
  nameWithType.vb: Task(Of IEnumerable(Of IDMChannel))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Discord.IDMChannel))
  name.vb: Task(Of IEnumerable(Of IDMChannel))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IDMChannel
    name: IDMChannel
    nameWithType: IDMChannel
    fullName: Discord.IDMChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IDMChannel
    name: IDMChannel
    nameWithType: IDMChannel
    fullName: Discord.IDMChannel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.DiscordClientExtensions.GetGroupChannelAsync*
  commentId: Overload:Discord.DiscordClientExtensions.GetGroupChannelAsync
  name: GetGroupChannelAsync
  nameWithType: DiscordClientExtensions.GetGroupChannelAsync
  fullName: Discord.DiscordClientExtensions.GetGroupChannelAsync
- uid: System.Threading.Tasks.Task{Discord.IGroupChannel}
  commentId: T:System.Threading.Tasks.Task{Discord.IGroupChannel}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IGroupChannel>
  nameWithType: Task<IGroupChannel>
  fullName: System.Threading.Tasks.Task<Discord.IGroupChannel>
  nameWithType.vb: Task(Of IGroupChannel)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IGroupChannel)
  name.vb: Task(Of IGroupChannel)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IGroupChannel
    name: IGroupChannel
    nameWithType: IGroupChannel
    fullName: Discord.IGroupChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IGroupChannel
    name: IGroupChannel
    nameWithType: IGroupChannel
    fullName: Discord.IGroupChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.DiscordClientExtensions.GetGroupChannelsAsync*
  commentId: Overload:Discord.DiscordClientExtensions.GetGroupChannelsAsync
  name: GetGroupChannelsAsync
  nameWithType: DiscordClientExtensions.GetGroupChannelsAsync
  fullName: Discord.DiscordClientExtensions.GetGroupChannelsAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Discord.IGroupChannel}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Discord.IGroupChannel}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<IGroupChannel>>
  nameWithType: Task<IEnumerable<IGroupChannel>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Discord.IGroupChannel>>
  nameWithType.vb: Task(Of IEnumerable(Of IGroupChannel))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Discord.IGroupChannel))
  name.vb: Task(Of IEnumerable(Of IGroupChannel))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IGroupChannel
    name: IGroupChannel
    nameWithType: IGroupChannel
    fullName: Discord.IGroupChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IGroupChannel
    name: IGroupChannel
    nameWithType: IGroupChannel
    fullName: Discord.IGroupChannel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.DiscordClientExtensions.GetOptimalVoiceRegionAsync*
  commentId: Overload:Discord.DiscordClientExtensions.GetOptimalVoiceRegionAsync
  name: GetOptimalVoiceRegionAsync
  nameWithType: DiscordClientExtensions.GetOptimalVoiceRegionAsync
  fullName: Discord.DiscordClientExtensions.GetOptimalVoiceRegionAsync
- uid: System.Threading.Tasks.Task{Discord.IVoiceRegion}
  commentId: T:System.Threading.Tasks.Task{Discord.IVoiceRegion}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IVoiceRegion>
  nameWithType: Task<IVoiceRegion>
  fullName: System.Threading.Tasks.Task<Discord.IVoiceRegion>
  nameWithType.vb: Task(Of IVoiceRegion)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IVoiceRegion)
  name.vb: Task(Of IVoiceRegion)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IVoiceRegion
    name: IVoiceRegion
    nameWithType: IVoiceRegion
    fullName: Discord.IVoiceRegion
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IVoiceRegion
    name: IVoiceRegion
    nameWithType: IVoiceRegion
    fullName: Discord.IVoiceRegion
  - name: )
    nameWithType: )
    fullName: )
