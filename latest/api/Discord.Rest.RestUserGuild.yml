### YamlMime:ManagedReference
items:
- uid: Discord.Rest.RestUserGuild
  commentId: T:Discord.Rest.RestUserGuild
  id: RestUserGuild
  parent: Discord.Rest
  children:
  - Discord.Rest.RestUserGuild.CreatedAt
  - Discord.Rest.RestUserGuild.DeleteAsync(Discord.RequestOptions)
  - Discord.Rest.RestUserGuild.IconUrl
  - Discord.Rest.RestUserGuild.IsOwner
  - Discord.Rest.RestUserGuild.LeaveAsync(Discord.RequestOptions)
  - Discord.Rest.RestUserGuild.Name
  - Discord.Rest.RestUserGuild.Permissions
  - Discord.Rest.RestUserGuild.ToString
  langs:
  - csharp
  - vb
  name: RestUserGuild
  nameWithType: RestUserGuild
  fullName: Discord.Rest.RestUserGuild
  type: Class
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestUserGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RestUserGuild
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestUserGuild.cs
    startLine: 7
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  syntax:
    content: 'public class RestUserGuild : RestEntity<ulong>, IUserGuild, IDeletable, ISnowflakeEntity, IEntity<ulong>'
    content.vb: >-
      Public Class RestUserGuild
          Inherits RestEntity(Of ULong)
          Implements IUserGuild, IDeletable, ISnowflakeEntity, IEntity(Of ULong)
  inheritance:
  - System.Object
  - Discord.Rest.RestEntity{System.UInt64}
  implements:
  - Discord.IUserGuild
  - Discord.IDeletable
  - Discord.ISnowflakeEntity
  - Discord.IEntity{System.UInt64}
  inheritedMembers:
  - Discord.Rest.RestEntity{System.UInt64}.Id
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.Rest.RestUserGuild.Name
  commentId: P:Discord.Rest.RestUserGuild.Name
  id: Name
  parent: Discord.Rest.RestUserGuild
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: RestUserGuild.Name
  fullName: Discord.Rest.RestUserGuild.Name
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestUserGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Name
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestUserGuild.cs
    startLine: 13
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the name of this guild.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Discord.Rest.RestUserGuild.Name*
  implements:
  - Discord.IUserGuild.Name
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestUserGuild.IsOwner
  commentId: P:Discord.Rest.RestUserGuild.IsOwner
  id: IsOwner
  parent: Discord.Rest.RestUserGuild
  langs:
  - csharp
  - vb
  name: IsOwner
  nameWithType: RestUserGuild.IsOwner
  fullName: Discord.Rest.RestUserGuild.IsOwner
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestUserGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsOwner
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestUserGuild.cs
    startLine: 15
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nReturns <code>true</code> if the current user owns this guild.\n"
  example: []
  syntax:
    content: public bool IsOwner { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsOwner As Boolean
  overload: Discord.Rest.RestUserGuild.IsOwner*
  implements:
  - Discord.IUserGuild.IsOwner
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestUserGuild.Permissions
  commentId: P:Discord.Rest.RestUserGuild.Permissions
  id: Permissions
  parent: Discord.Rest.RestUserGuild
  langs:
  - csharp
  - vb
  name: Permissions
  nameWithType: RestUserGuild.Permissions
  fullName: Discord.Rest.RestUserGuild.Permissions
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestUserGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Permissions
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestUserGuild.cs
    startLine: 17
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nReturns the current user&apos;s permissions for this guild.\n"
  example: []
  syntax:
    content: public GuildPermissions Permissions { get; }
    parameters: []
    return:
      type: Discord.GuildPermissions
    content.vb: Public ReadOnly Property Permissions As GuildPermissions
  overload: Discord.Rest.RestUserGuild.Permissions*
  implements:
  - Discord.IUserGuild.Permissions
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestUserGuild.CreatedAt
  commentId: P:Discord.Rest.RestUserGuild.CreatedAt
  id: CreatedAt
  parent: Discord.Rest.RestUserGuild
  langs:
  - csharp
  - vb
  name: CreatedAt
  nameWithType: RestUserGuild.CreatedAt
  fullName: Discord.Rest.RestUserGuild.CreatedAt
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestUserGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreatedAt
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestUserGuild.cs
    startLine: 20
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets when the snowflake was created.\n"
  example: []
  syntax:
    content: public DateTimeOffset CreatedAt { get; }
    parameters: []
    return:
      type: System.DateTimeOffset
      description: "\nA <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> representing when the entity was first created.\n"
    content.vb: Public ReadOnly Property CreatedAt As DateTimeOffset
  overload: Discord.Rest.RestUserGuild.CreatedAt*
  implements:
  - Discord.ISnowflakeEntity.CreatedAt
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestUserGuild.IconUrl
  commentId: P:Discord.Rest.RestUserGuild.IconUrl
  id: IconUrl
  parent: Discord.Rest.RestUserGuild
  langs:
  - csharp
  - vb
  name: IconUrl
  nameWithType: RestUserGuild.IconUrl
  fullName: Discord.Rest.RestUserGuild.IconUrl
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestUserGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IconUrl
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestUserGuild.cs
    startLine: 22
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the icon URL associated with this guild, or <code>null</code> if one is not set.\n"
  example: []
  syntax:
    content: public string IconUrl { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property IconUrl As String
  overload: Discord.Rest.RestUserGuild.IconUrl*
  implements:
  - Discord.IUserGuild.IconUrl
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestUserGuild.LeaveAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestUserGuild.LeaveAsync(Discord.RequestOptions)
  id: LeaveAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestUserGuild
  langs:
  - csharp
  - vb
  name: LeaveAsync(RequestOptions)
  nameWithType: RestUserGuild.LeaveAsync(RequestOptions)
  fullName: Discord.Rest.RestUserGuild.LeaveAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestUserGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: LeaveAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestUserGuild.cs
    startLine: 43
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  syntax:
    content: public Task LeaveAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function LeaveAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestUserGuild.LeaveAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestUserGuild.DeleteAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestUserGuild.DeleteAsync(Discord.RequestOptions)
  id: DeleteAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestUserGuild
  langs:
  - csharp
  - vb
  name: DeleteAsync(RequestOptions)
  nameWithType: RestUserGuild.DeleteAsync(RequestOptions)
  fullName: Discord.Rest.RestUserGuild.DeleteAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestUserGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestUserGuild.cs
    startLine: 48
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nDeletes this object and all its children.\n"
  example: []
  syntax:
    content: public Task DeleteAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function DeleteAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestUserGuild.DeleteAsync*
  implements:
  - Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestUserGuild.ToString
  commentId: M:Discord.Rest.RestUserGuild.ToString
  id: ToString
  parent: Discord.Rest.RestUserGuild
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: RestUserGuild.ToString()
  fullName: Discord.Rest.RestUserGuild.ToString()
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestUserGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ToString
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestUserGuild.cs
    startLine: 53
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Discord.Rest.RestUserGuild.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Discord.Rest
  commentId: N:Discord.Rest
  name: Discord.Rest
  nameWithType: Discord.Rest
  fullName: Discord.Rest
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Rest.RestEntity{System.UInt64}
  commentId: T:Discord.Rest.RestEntity{System.UInt64}
  parent: Discord.Rest
  definition: Discord.Rest.RestEntity`1
  name: RestEntity<UInt64>
  nameWithType: RestEntity<UInt64>
  fullName: Discord.Rest.RestEntity<System.UInt64>
  nameWithType.vb: RestEntity(Of UInt64)
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64)
  name.vb: RestEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IUserGuild
  commentId: T:Discord.IUserGuild
  parent: Discord
  name: IUserGuild
  nameWithType: IUserGuild
  fullName: Discord.IUserGuild
- uid: Discord.IDeletable
  commentId: T:Discord.IDeletable
  parent: Discord
  name: IDeletable
  nameWithType: IDeletable
  fullName: Discord.IDeletable
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestEntity{System.UInt64}.Id
  commentId: P:Discord.Rest.RestEntity{System.UInt64}.Id
  parent: Discord.Rest.RestEntity{System.UInt64}
  definition: Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<UInt64>.Id
  fullName: Discord.Rest.RestEntity<System.UInt64>.Id
  nameWithType.vb: RestEntity(Of UInt64).Id
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64).Id
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Rest.RestEntity`1
  commentId: T:Discord.Rest.RestEntity`1
  name: RestEntity<T>
  nameWithType: RestEntity<T>
  fullName: Discord.Rest.RestEntity<T>
  nameWithType.vb: RestEntity(Of T)
  fullName.vb: Discord.Rest.RestEntity(Of T)
  name.vb: RestEntity(Of T)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestEntity`1.Id
  commentId: P:Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<T>.Id
  fullName: Discord.Rest.RestEntity<T>.Id
  nameWithType.vb: RestEntity(Of T).Id
  fullName.vb: Discord.Rest.RestEntity(Of T).Id
- uid: Discord.Rest.RestUserGuild.Name*
  commentId: Overload:Discord.Rest.RestUserGuild.Name
  name: Name
  nameWithType: RestUserGuild.Name
  fullName: Discord.Rest.RestUserGuild.Name
- uid: Discord.IUserGuild.Name
  commentId: P:Discord.IUserGuild.Name
  parent: Discord.IUserGuild
  name: Name
  nameWithType: IUserGuild.Name
  fullName: Discord.IUserGuild.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.Rest.RestUserGuild.IsOwner*
  commentId: Overload:Discord.Rest.RestUserGuild.IsOwner
  name: IsOwner
  nameWithType: RestUserGuild.IsOwner
  fullName: Discord.Rest.RestUserGuild.IsOwner
- uid: Discord.IUserGuild.IsOwner
  commentId: P:Discord.IUserGuild.IsOwner
  parent: Discord.IUserGuild
  name: IsOwner
  nameWithType: IUserGuild.IsOwner
  fullName: Discord.IUserGuild.IsOwner
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.Rest.RestUserGuild.Permissions*
  commentId: Overload:Discord.Rest.RestUserGuild.Permissions
  name: Permissions
  nameWithType: RestUserGuild.Permissions
  fullName: Discord.Rest.RestUserGuild.Permissions
- uid: Discord.IUserGuild.Permissions
  commentId: P:Discord.IUserGuild.Permissions
  parent: Discord.IUserGuild
  name: Permissions
  nameWithType: IUserGuild.Permissions
  fullName: Discord.IUserGuild.Permissions
- uid: Discord.GuildPermissions
  commentId: T:Discord.GuildPermissions
  parent: Discord
  name: GuildPermissions
  nameWithType: GuildPermissions
  fullName: Discord.GuildPermissions
- uid: Discord.Rest.RestUserGuild.CreatedAt*
  commentId: Overload:Discord.Rest.RestUserGuild.CreatedAt
  name: CreatedAt
  nameWithType: RestUserGuild.CreatedAt
  fullName: Discord.Rest.RestUserGuild.CreatedAt
- uid: Discord.ISnowflakeEntity.CreatedAt
  commentId: P:Discord.ISnowflakeEntity.CreatedAt
  parent: Discord.ISnowflakeEntity
  name: CreatedAt
  nameWithType: ISnowflakeEntity.CreatedAt
  fullName: Discord.ISnowflakeEntity.CreatedAt
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: Discord.Rest.RestUserGuild.IconUrl*
  commentId: Overload:Discord.Rest.RestUserGuild.IconUrl
  name: IconUrl
  nameWithType: RestUserGuild.IconUrl
  fullName: Discord.Rest.RestUserGuild.IconUrl
- uid: Discord.IUserGuild.IconUrl
  commentId: P:Discord.IUserGuild.IconUrl
  parent: Discord.IUserGuild
  name: IconUrl
  nameWithType: IUserGuild.IconUrl
  fullName: Discord.IUserGuild.IconUrl
- uid: Discord.Rest.RestUserGuild.LeaveAsync*
  commentId: Overload:Discord.Rest.RestUserGuild.LeaveAsync
  name: LeaveAsync
  nameWithType: RestUserGuild.LeaveAsync
  fullName: Discord.Rest.RestUserGuild.LeaveAsync
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Discord.Rest.RestUserGuild.DeleteAsync*
  commentId: Overload:Discord.Rest.RestUserGuild.DeleteAsync
  name: DeleteAsync
  nameWithType: RestUserGuild.DeleteAsync
  fullName: Discord.Rest.RestUserGuild.DeleteAsync
- uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  commentId: M:Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  parent: Discord.IDeletable
  name: DeleteAsync(RequestOptions)
  nameWithType: IDeletable.DeleteAsync(RequestOptions)
  fullName: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: IDeletable.DeleteAsync
    fullName: Discord.IDeletable.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: IDeletable.DeleteAsync
    fullName: Discord.IDeletable.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestUserGuild.ToString*
  commentId: Overload:Discord.Rest.RestUserGuild.ToString
  name: ToString
  nameWithType: RestUserGuild.ToString
  fullName: Discord.Rest.RestUserGuild.ToString
