### YamlMime:ManagedReference
items:
- uid: Discord.Commands.AliasAttribute
  commentId: T:Discord.Commands.AliasAttribute
  id: AliasAttribute
  parent: Discord.Commands
  children:
  - Discord.Commands.AliasAttribute.#ctor(System.String[])
  - Discord.Commands.AliasAttribute.Aliases
  langs:
  - csharp
  - vb
  name: AliasAttribute
  nameWithType: AliasAttribute
  fullName: Discord.Commands.AliasAttribute
  type: Class
  source:
    remote:
      path: src/Discord.Net.Commands/Attributes/AliasAttribute.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: AliasAttribute
    path: ../src/Discord.Net.Commands/Attributes/AliasAttribute.cs
    startLine: 24
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nMarks the aliases for a command.\n"
  remarks: "\nThis attribute allows a command to have one or multiple aliases. In other words, the base command can have\nmultiple aliases when triggering the command itself, giving the end-user more freedom of choices when giving\nhot-words to trigger the desired command. See the example for a better illustration.\n"
  example:
  - "\nIn the following example, the command can be triggered with the base name, &quot;stats&quot;, or either &quot;stat&quot; or\n&quot;info&quot;.\n<pre><code class=\"lang-cs\">[Command(&quot;stats&quot;)]\n[Alias(&quot;stat&quot;, &quot;info&quot;)]\npublic async Task GetStatsAsync(IUser user)\n{\n    // ...pull stats\n}</code></pre>\n"
  syntax:
    content: >-
      [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = false, Inherited = true)]

      public class AliasAttribute : Attribute
    content.vb: >-
      <AttributeUsage(AttributeTargets.Class Or AttributeTargets.Method, AllowMultiple:=False, Inherited:=True)>

      Public Class AliasAttribute
          Inherits Attribute
  inheritance:
  - System.Object
  - System.Attribute
  inheritedMembers:
  - System.Attribute.Equals(System.Object)
  - System.Attribute.GetHashCode
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.AttributeUsageAttribute
    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
    arguments:
    - type: System.AttributeTargets
      value: 68
    namedArguments:
    - name: AllowMultiple
      type: System.Boolean
      value: false
    - name: Inherited
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.Commands.AliasAttribute.Aliases
  commentId: P:Discord.Commands.AliasAttribute.Aliases
  id: Aliases
  parent: Discord.Commands.AliasAttribute
  langs:
  - csharp
  - vb
  name: Aliases
  nameWithType: AliasAttribute.Aliases
  fullName: Discord.Commands.AliasAttribute.Aliases
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Attributes/AliasAttribute.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Aliases
    path: ../src/Discord.Net.Commands/Attributes/AliasAttribute.cs
    startLine: 30
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets the aliases which have been defined for the command.\n"
  example: []
  syntax:
    content: public string[] Aliases { get; }
    parameters: []
    return:
      type: System.String[]
    content.vb: Public ReadOnly Property Aliases As String()
  overload: Discord.Commands.AliasAttribute.Aliases*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.AliasAttribute.#ctor(System.String[])
  commentId: M:Discord.Commands.AliasAttribute.#ctor(System.String[])
  id: '#ctor(System.String[])'
  parent: Discord.Commands.AliasAttribute
  langs:
  - csharp
  - vb
  name: AliasAttribute(String[])
  nameWithType: AliasAttribute.AliasAttribute(String[])
  fullName: Discord.Commands.AliasAttribute.AliasAttribute(System.String[])
  type: Constructor
  source:
    remote:
      path: src/Discord.Net.Commands/Attributes/AliasAttribute.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: .ctor
    path: ../src/Discord.Net.Commands/Attributes/AliasAttribute.cs
    startLine: 35
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nCreates a new <xref href=\"Discord.Commands.AliasAttribute\" data-throw-if-not-resolved=\"false\"></xref> with the given aliases.\n"
  example: []
  syntax:
    content: public AliasAttribute(params string[] aliases)
    parameters:
    - id: aliases
      type: System.String[]
    content.vb: Public Sub New(ParamArray aliases As String())
  overload: Discord.Commands.AliasAttribute.#ctor*
  nameWithType.vb: AliasAttribute.AliasAttribute(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Commands.AliasAttribute.AliasAttribute(System.String())
  name.vb: AliasAttribute(String())
references:
- uid: Discord.Commands
  commentId: N:Discord.Commands
  name: Discord.Commands
  nameWithType: Discord.Commands
  fullName: Discord.Commands
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Attribute
  commentId: T:System.Attribute
  parent: System
  isExternal: true
  name: Attribute
  nameWithType: Attribute
  fullName: System.Attribute
- uid: System.Attribute.Equals(System.Object)
  commentId: M:System.Attribute.Equals(System.Object)
  parent: System.Attribute
  isExternal: true
  name: Equals(Object)
  nameWithType: Attribute.Equals(Object)
  fullName: System.Attribute.Equals(System.Object)
  spec.csharp:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    nameWithType: Attribute.Equals
    fullName: System.Attribute.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    nameWithType: Attribute.Equals
    fullName: System.Attribute.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Attribute.GetHashCode
  commentId: M:System.Attribute.GetHashCode
  parent: System.Attribute
  isExternal: true
  name: GetHashCode()
  nameWithType: Attribute.GetHashCode()
  fullName: System.Attribute.GetHashCode()
  spec.csharp:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    nameWithType: Attribute.GetHashCode
    fullName: System.Attribute.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    nameWithType: Attribute.GetHashCode
    fullName: System.Attribute.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Commands.AliasAttribute.Aliases*
  commentId: Overload:Discord.Commands.AliasAttribute.Aliases
  name: Aliases
  nameWithType: AliasAttribute.Aliases
  fullName: Discord.Commands.AliasAttribute.Aliases
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Discord.Commands.AliasAttribute
  commentId: T:Discord.Commands.AliasAttribute
  name: AliasAttribute
  nameWithType: AliasAttribute
  fullName: Discord.Commands.AliasAttribute
- uid: Discord.Commands.AliasAttribute.#ctor*
  commentId: Overload:Discord.Commands.AliasAttribute.#ctor
  name: AliasAttribute
  nameWithType: AliasAttribute.AliasAttribute
  fullName: Discord.Commands.AliasAttribute.AliasAttribute
