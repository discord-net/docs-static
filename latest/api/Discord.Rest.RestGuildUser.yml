### YamlMime:ManagedReference
items:
- uid: Discord.Rest.RestGuildUser
  commentId: T:Discord.Rest.RestGuildUser
  id: RestGuildUser
  parent: Discord.Rest
  children:
  - Discord.Rest.RestGuildUser.AddRoleAsync(Discord.IRole,Discord.RequestOptions)
  - Discord.Rest.RestGuildUser.AddRolesAsync(IEnumerable{Discord.IRole},Discord.RequestOptions)
  - Discord.Rest.RestGuildUser.Discord#IGuildUser#Guild
  - Discord.Rest.RestGuildUser.Discord#IVoiceState#VoiceChannel
  - Discord.Rest.RestGuildUser.GetPermissions(Discord.IGuildChannel)
  - Discord.Rest.RestGuildUser.GuildId
  - Discord.Rest.RestGuildUser.GuildPermissions
  - Discord.Rest.RestGuildUser.IsDeafened
  - Discord.Rest.RestGuildUser.IsMuted
  - Discord.Rest.RestGuildUser.JoinedAt
  - Discord.Rest.RestGuildUser.KickAsync(System.String,Discord.RequestOptions)
  - Discord.Rest.RestGuildUser.ModifyAsync(Action{Discord.GuildUserProperties},Discord.RequestOptions)
  - Discord.Rest.RestGuildUser.Nickname
  - Discord.Rest.RestGuildUser.PremiumSince
  - Discord.Rest.RestGuildUser.RemoveRoleAsync(Discord.IRole,Discord.RequestOptions)
  - Discord.Rest.RestGuildUser.RemoveRolesAsync(IEnumerable{Discord.IRole},Discord.RequestOptions)
  - Discord.Rest.RestGuildUser.RoleIds
  - Discord.Rest.RestGuildUser.UpdateAsync(Discord.RequestOptions)
  langs:
  - csharp
  - vb
  name: RestGuildUser
  nameWithType: RestGuildUser
  fullName: Discord.Rest.RestGuildUser
  type: Class
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: RestGuildUser
    path: ../src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
    startLine: 13
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nRepresents a REST-based guild user.\n"
  example: []
  syntax:
    content: 'public class RestGuildUser : RestUser, IEntity<ulong>, IUpdateable, IGuildUser, IUser, ISnowflakeEntity, IEntity<ulong>, IMentionable, IPresence, IVoiceState'
    content.vb: >-
      Public Class RestGuildUser
          Inherits RestUser
          Implements IEntity(Of ULong), IUpdateable, IGuildUser, IUser, ISnowflakeEntity, IEntity(Of ULong), IMentionable, IPresence, IVoiceState
  inheritance:
  - System.Object
  - Discord.Rest.RestEntity{System.UInt64}
  - Discord.Rest.RestUser
  implements:
  - Discord.IEntity{System.UInt64}
  - Discord.IUpdateable
  - Discord.IGuildUser
  - Discord.IUser
  - Discord.ISnowflakeEntity
  - Discord.IEntity{System.UInt64}
  - Discord.IMentionable
  - Discord.IPresence
  - Discord.IVoiceState
  inheritedMembers:
  - Discord.Rest.RestUser.IsBot
  - Discord.Rest.RestUser.Username
  - Discord.Rest.RestUser.DiscriminatorValue
  - Discord.Rest.RestUser.AvatarId
  - Discord.Rest.RestUser.CreatedAt
  - Discord.Rest.RestUser.Discriminator
  - Discord.Rest.RestUser.Mention
  - Discord.Rest.RestUser.Activity
  - Discord.Rest.RestUser.Status
  - Discord.Rest.RestUser.ActiveClients
  - Discord.Rest.RestUser.IsWebhook
  - Discord.Rest.RestUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
  - Discord.Rest.RestUser.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
  - Discord.Rest.RestUser.GetDefaultAvatarUrl
  - Discord.Rest.RestUser.ToString
  - Discord.Rest.RestEntity{System.UInt64}.Id
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.Rest.RestGuildUser.Nickname
  commentId: P:Discord.Rest.RestGuildUser.Nickname
  id: Nickname
  parent: Discord.Rest.RestGuildUser
  langs:
  - csharp
  - vb
  name: Nickname
  nameWithType: RestGuildUser.Nickname
  fullName: Discord.Rest.RestGuildUser.Nickname
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Nickname
    path: ../src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
    startLine: 21
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public string Nickname { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Nickname As String
  overload: Discord.Rest.RestGuildUser.Nickname*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuildUser.IsDeafened
  commentId: P:Discord.Rest.RestGuildUser.IsDeafened
  id: IsDeafened
  parent: Discord.Rest.RestGuildUser
  langs:
  - csharp
  - vb
  name: IsDeafened
  nameWithType: RestGuildUser.IsDeafened
  fullName: Discord.Rest.RestGuildUser.IsDeafened
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: IsDeafened
    path: ../src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
    startLine: 24
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public bool IsDeafened { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsDeafened As Boolean
  overload: Discord.Rest.RestGuildUser.IsDeafened*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuildUser.IsMuted
  commentId: P:Discord.Rest.RestGuildUser.IsMuted
  id: IsMuted
  parent: Discord.Rest.RestGuildUser
  langs:
  - csharp
  - vb
  name: IsMuted
  nameWithType: RestGuildUser.IsMuted
  fullName: Discord.Rest.RestGuildUser.IsMuted
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: IsMuted
    path: ../src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
    startLine: 26
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public bool IsMuted { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsMuted As Boolean
  overload: Discord.Rest.RestGuildUser.IsMuted*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuildUser.PremiumSince
  commentId: P:Discord.Rest.RestGuildUser.PremiumSince
  id: PremiumSince
  parent: Discord.Rest.RestGuildUser
  langs:
  - csharp
  - vb
  name: PremiumSince
  nameWithType: RestGuildUser.PremiumSince
  fullName: Discord.Rest.RestGuildUser.PremiumSince
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: PremiumSince
    path: ../src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
    startLine: 28
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public DateTimeOffset? PremiumSince { get; }
    parameters: []
    return:
      type: System.Nullable{DateTimeOffset}
    content.vb: Public ReadOnly Property PremiumSince As DateTimeOffset?
  overload: Discord.Rest.RestGuildUser.PremiumSince*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuildUser.GuildId
  commentId: P:Discord.Rest.RestGuildUser.GuildId
  id: GuildId
  parent: Discord.Rest.RestGuildUser
  langs:
  - csharp
  - vb
  name: GuildId
  nameWithType: RestGuildUser.GuildId
  fullName: Discord.Rest.RestGuildUser.GuildId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GuildId
    path: ../src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
    startLine: 30
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public ulong GuildId { get; }
    parameters: []
    return:
      type: System.UInt64
    content.vb: Public ReadOnly Property GuildId As ULong
  overload: Discord.Rest.RestGuildUser.GuildId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuildUser.GuildPermissions
  commentId: P:Discord.Rest.RestGuildUser.GuildPermissions
  id: GuildPermissions
  parent: Discord.Rest.RestGuildUser
  langs:
  - csharp
  - vb
  name: GuildPermissions
  nameWithType: RestGuildUser.GuildPermissions
  fullName: Discord.Rest.RestGuildUser.GuildPermissions
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GuildPermissions
    path: ../src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
    startLine: 34
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the guild-level permissions for this user.\n"
  example: []
  syntax:
    content: public GuildPermissions GuildPermissions { get; }
    parameters: []
    return:
      type: Discord.GuildPermissions
      description: "\nA <xref href=\"Discord.GuildPermissions\" data-throw-if-not-resolved=\"false\"></xref> structure for this user, representing what\npermissions this user has in the guild.\n"
    content.vb: Public ReadOnly Property GuildPermissions As GuildPermissions
  overload: Discord.Rest.RestGuildUser.GuildPermissions*
  implements:
  - Discord.IGuildUser.GuildPermissions
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuildUser.RoleIds
  commentId: P:Discord.Rest.RestGuildUser.RoleIds
  id: RoleIds
  parent: Discord.Rest.RestGuildUser
  langs:
  - csharp
  - vb
  name: RoleIds
  nameWithType: RestGuildUser.RoleIds
  fullName: Discord.Rest.RestGuildUser.RoleIds
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: RoleIds
    path: ../src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
    startLine: 44
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public IReadOnlyCollection<ulong> RoleIds { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{System.UInt64}
    content.vb: Public ReadOnly Property RoleIds As IReadOnlyCollection(Of ULong)
  overload: Discord.Rest.RestGuildUser.RoleIds*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuildUser.JoinedAt
  commentId: P:Discord.Rest.RestGuildUser.JoinedAt
  id: JoinedAt
  parent: Discord.Rest.RestGuildUser
  langs:
  - csharp
  - vb
  name: JoinedAt
  nameWithType: RestGuildUser.JoinedAt
  fullName: Discord.Rest.RestGuildUser.JoinedAt
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: JoinedAt
    path: ../src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
    startLine: 47
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public DateTimeOffset? JoinedAt { get; }
    parameters: []
    return:
      type: System.Nullable{DateTimeOffset}
    content.vb: Public ReadOnly Property JoinedAt As DateTimeOffset?
  overload: Discord.Rest.RestGuildUser.JoinedAt*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuildUser.UpdateAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildUser.UpdateAsync(Discord.RequestOptions)
  id: UpdateAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestGuildUser
  langs:
  - csharp
  - vb
  name: UpdateAsync(RequestOptions)
  nameWithType: RestGuildUser.UpdateAsync(RequestOptions)
  fullName: Discord.Rest.RestGuildUser.UpdateAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: UpdateAsync
    path: ../src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
    startLine: 86
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public override Task UpdateAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Overrides Function UpdateAsync(options As RequestOptions = Nothing) As Task
  overridden: Discord.Rest.RestUser.UpdateAsync(Discord.RequestOptions)
  overload: Discord.Rest.RestGuildUser.UpdateAsync*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.Rest.RestGuildUser.ModifyAsync(Action{Discord.GuildUserProperties},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildUser.ModifyAsync(Action{Discord.GuildUserProperties},Discord.RequestOptions)
  id: ModifyAsync(Action{Discord.GuildUserProperties},Discord.RequestOptions)
  parent: Discord.Rest.RestGuildUser
  langs:
  - csharp
  - vb
  name: ModifyAsync(Action<GuildUserProperties>, RequestOptions)
  nameWithType: RestGuildUser.ModifyAsync(Action<GuildUserProperties>, RequestOptions)
  fullName: Discord.Rest.RestGuildUser.ModifyAsync(Action<Discord.GuildUserProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ModifyAsync
    path: ../src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
    startLine: 92
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task ModifyAsync(Action<GuildUserProperties> func, RequestOptions options = null)
    parameters:
    - id: func
      type: Action{Discord.GuildUserProperties}
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function ModifyAsync(func As Action(Of GuildUserProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestGuildUser.ModifyAsync*
  nameWithType.vb: RestGuildUser.ModifyAsync(Action(Of GuildUserProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestGuildUser.ModifyAsync(Action(Of Discord.GuildUserProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of GuildUserProperties), RequestOptions)
- uid: Discord.Rest.RestGuildUser.KickAsync(System.String,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildUser.KickAsync(System.String,Discord.RequestOptions)
  id: KickAsync(System.String,Discord.RequestOptions)
  parent: Discord.Rest.RestGuildUser
  langs:
  - csharp
  - vb
  name: KickAsync(String, RequestOptions)
  nameWithType: RestGuildUser.KickAsync(String, RequestOptions)
  fullName: Discord.Rest.RestGuildUser.KickAsync(System.String, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: KickAsync
    path: ../src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
    startLine: 107
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task KickAsync(string reason = null, RequestOptions options = null)
    parameters:
    - id: reason
      type: System.String
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function KickAsync(reason As String = Nothing, options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestGuildUser.KickAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuildUser.AddRoleAsync(Discord.IRole,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildUser.AddRoleAsync(Discord.IRole,Discord.RequestOptions)
  id: AddRoleAsync(Discord.IRole,Discord.RequestOptions)
  parent: Discord.Rest.RestGuildUser
  langs:
  - csharp
  - vb
  name: AddRoleAsync(IRole, RequestOptions)
  nameWithType: RestGuildUser.AddRoleAsync(IRole, RequestOptions)
  fullName: Discord.Rest.RestGuildUser.AddRoleAsync(Discord.IRole, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: AddRoleAsync
    path: ../src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
    startLine: 110
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task AddRoleAsync(IRole role, RequestOptions options = null)
    parameters:
    - id: role
      type: Discord.IRole
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function AddRoleAsync(role As IRole, options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestGuildUser.AddRoleAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuildUser.AddRolesAsync(IEnumerable{Discord.IRole},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildUser.AddRolesAsync(IEnumerable{Discord.IRole},Discord.RequestOptions)
  id: AddRolesAsync(IEnumerable{Discord.IRole},Discord.RequestOptions)
  parent: Discord.Rest.RestGuildUser
  langs:
  - csharp
  - vb
  name: AddRolesAsync(IEnumerable<IRole>, RequestOptions)
  nameWithType: RestGuildUser.AddRolesAsync(IEnumerable<IRole>, RequestOptions)
  fullName: Discord.Rest.RestGuildUser.AddRolesAsync(IEnumerable<Discord.IRole>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: AddRolesAsync
    path: ../src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
    startLine: 113
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task AddRolesAsync(IEnumerable<IRole> roles, RequestOptions options = null)
    parameters:
    - id: roles
      type: IEnumerable{Discord.IRole}
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function AddRolesAsync(roles As IEnumerable(Of IRole), options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestGuildUser.AddRolesAsync*
  nameWithType.vb: RestGuildUser.AddRolesAsync(IEnumerable(Of IRole), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestGuildUser.AddRolesAsync(IEnumerable(Of Discord.IRole), Discord.RequestOptions)
  name.vb: AddRolesAsync(IEnumerable(Of IRole), RequestOptions)
- uid: Discord.Rest.RestGuildUser.RemoveRoleAsync(Discord.IRole,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildUser.RemoveRoleAsync(Discord.IRole,Discord.RequestOptions)
  id: RemoveRoleAsync(Discord.IRole,Discord.RequestOptions)
  parent: Discord.Rest.RestGuildUser
  langs:
  - csharp
  - vb
  name: RemoveRoleAsync(IRole, RequestOptions)
  nameWithType: RestGuildUser.RemoveRoleAsync(IRole, RequestOptions)
  fullName: Discord.Rest.RestGuildUser.RemoveRoleAsync(Discord.IRole, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: RemoveRoleAsync
    path: ../src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
    startLine: 116
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task RemoveRoleAsync(IRole role, RequestOptions options = null)
    parameters:
    - id: role
      type: Discord.IRole
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function RemoveRoleAsync(role As IRole, options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestGuildUser.RemoveRoleAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuildUser.RemoveRolesAsync(IEnumerable{Discord.IRole},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildUser.RemoveRolesAsync(IEnumerable{Discord.IRole},Discord.RequestOptions)
  id: RemoveRolesAsync(IEnumerable{Discord.IRole},Discord.RequestOptions)
  parent: Discord.Rest.RestGuildUser
  langs:
  - csharp
  - vb
  name: RemoveRolesAsync(IEnumerable<IRole>, RequestOptions)
  nameWithType: RestGuildUser.RemoveRolesAsync(IEnumerable<IRole>, RequestOptions)
  fullName: Discord.Rest.RestGuildUser.RemoveRolesAsync(IEnumerable<Discord.IRole>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: RemoveRolesAsync
    path: ../src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
    startLine: 119
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task RemoveRolesAsync(IEnumerable<IRole> roles, RequestOptions options = null)
    parameters:
    - id: roles
      type: IEnumerable{Discord.IRole}
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function RemoveRolesAsync(roles As IEnumerable(Of IRole), options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestGuildUser.RemoveRolesAsync*
  nameWithType.vb: RestGuildUser.RemoveRolesAsync(IEnumerable(Of IRole), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestGuildUser.RemoveRolesAsync(IEnumerable(Of Discord.IRole), Discord.RequestOptions)
  name.vb: RemoveRolesAsync(IEnumerable(Of IRole), RequestOptions)
- uid: Discord.Rest.RestGuildUser.GetPermissions(Discord.IGuildChannel)
  commentId: M:Discord.Rest.RestGuildUser.GetPermissions(Discord.IGuildChannel)
  id: GetPermissions(Discord.IGuildChannel)
  parent: Discord.Rest.RestGuildUser
  langs:
  - csharp
  - vb
  name: GetPermissions(IGuildChannel)
  nameWithType: RestGuildUser.GetPermissions(IGuildChannel)
  fullName: Discord.Rest.RestGuildUser.GetPermissions(Discord.IGuildChannel)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetPermissions
    path: ../src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
    startLine: 124
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the level permissions granted to this user to a given channel.\n"
  example: []
  syntax:
    content: public ChannelPermissions GetPermissions(IGuildChannel channel)
    parameters:
    - id: channel
      type: Discord.IGuildChannel
      description: The channel to get the permission from.
    return:
      type: Discord.ChannelPermissions
      description: "\nA <xref href=\"Discord.ChannelPermissions\" data-throw-if-not-resolved=\"false\"></xref> structure representing the permissions that a user has in the\nspecified channel.\n"
    content.vb: Public Function GetPermissions(channel As IGuildChannel) As ChannelPermissions
  overload: Discord.Rest.RestGuildUser.GetPermissions*
  implements:
  - Discord.IGuildUser.GetPermissions(Discord.IGuildChannel)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuildUser.Discord#IGuildUser#Guild
  commentId: P:Discord.Rest.RestGuildUser.Discord#IGuildUser#Guild
  id: Discord#IGuildUser#Guild
  isEii: true
  parent: Discord.Rest.RestGuildUser
  langs:
  - csharp
  - vb
  name: IGuildUser.Guild
  nameWithType: RestGuildUser.IGuildUser.Guild
  fullName: Discord.Rest.RestGuildUser.Discord.IGuildUser.Guild
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuildUser.Guild
    path: ../src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
    startLine: 132
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the guild for this user.\n"
  example: []
  syntax:
    content: IGuild IGuildUser.Guild { get; }
    parameters: []
    return:
      type: Discord.IGuild
      description: "\nA guild object that this user belongs to.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IGuildUser.Guild As IGuild Implements IGuildUser.Guild
  overload: Discord.Rest.RestGuildUser.Discord#IGuildUser#Guild*
  implements:
  - Discord.IGuildUser.Guild
  nameWithType.vb: RestGuildUser.Discord.IGuildUser.Guild
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IGuildUser.Guild
- uid: Discord.Rest.RestGuildUser.Discord#IVoiceState#VoiceChannel
  commentId: P:Discord.Rest.RestGuildUser.Discord#IVoiceState#VoiceChannel
  id: Discord#IVoiceState#VoiceChannel
  isEii: true
  parent: Discord.Rest.RestGuildUser
  langs:
  - csharp
  - vb
  name: IVoiceState.VoiceChannel
  nameWithType: RestGuildUser.IVoiceState.VoiceChannel
  fullName: Discord.Rest.RestGuildUser.Discord.IVoiceState.VoiceChannel
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IVoiceState.VoiceChannel
    path: ../src/Discord.Net.Rest/Entities/Users/RestGuildUser.cs
    startLine: 150
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the voice channel this user is currently in.\n"
  example: []
  syntax:
    content: IVoiceChannel IVoiceState.VoiceChannel { get; }
    parameters: []
    return:
      type: Discord.IVoiceChannel
      description: "\nA generic voice channel object representing the voice channel that the user is currently in; <code>null</code>\nif none.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IVoiceState.VoiceChannel As IVoiceChannel Implements IVoiceState.VoiceChannel
  overload: Discord.Rest.RestGuildUser.Discord#IVoiceState#VoiceChannel*
  implements:
  - Discord.IVoiceState.VoiceChannel
  nameWithType.vb: RestGuildUser.Discord.IVoiceState.VoiceChannel
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IVoiceState.VoiceChannel
references:
- uid: Discord.Rest
  commentId: N:Discord.Rest
  name: Discord.Rest
  nameWithType: Discord.Rest
  fullName: Discord.Rest
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Rest.RestEntity{System.UInt64}
  commentId: T:Discord.Rest.RestEntity{System.UInt64}
  parent: Discord.Rest
  definition: Discord.Rest.RestEntity`1
  name: RestEntity<UInt64>
  nameWithType: RestEntity<UInt64>
  fullName: Discord.Rest.RestEntity<System.UInt64>
  nameWithType.vb: RestEntity(Of UInt64)
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64)
  name.vb: RestEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestUser
  commentId: T:Discord.Rest.RestUser
  parent: Discord.Rest
  name: RestUser
  nameWithType: RestUser
  fullName: Discord.Rest.RestUser
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IUpdateable
  commentId: T:Discord.IUpdateable
  parent: Discord
  name: IUpdateable
  nameWithType: IUpdateable
  fullName: Discord.IUpdateable
- uid: Discord.IGuildUser
  commentId: T:Discord.IGuildUser
  parent: Discord
  name: IGuildUser
  nameWithType: IGuildUser
  fullName: Discord.IGuildUser
- uid: Discord.IUser
  commentId: T:Discord.IUser
  parent: Discord
  name: IUser
  nameWithType: IUser
  fullName: Discord.IUser
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IMentionable
  commentId: T:Discord.IMentionable
  parent: Discord
  name: IMentionable
  nameWithType: IMentionable
  fullName: Discord.IMentionable
- uid: Discord.IPresence
  commentId: T:Discord.IPresence
  parent: Discord
  name: IPresence
  nameWithType: IPresence
  fullName: Discord.IPresence
- uid: Discord.IVoiceState
  commentId: T:Discord.IVoiceState
  parent: Discord
  name: IVoiceState
  nameWithType: IVoiceState
  fullName: Discord.IVoiceState
- uid: Discord.Rest.RestUser.IsBot
  commentId: P:Discord.Rest.RestUser.IsBot
  parent: Discord.Rest.RestUser
  name: IsBot
  nameWithType: RestUser.IsBot
  fullName: Discord.Rest.RestUser.IsBot
- uid: Discord.Rest.RestUser.Username
  commentId: P:Discord.Rest.RestUser.Username
  parent: Discord.Rest.RestUser
  name: Username
  nameWithType: RestUser.Username
  fullName: Discord.Rest.RestUser.Username
- uid: Discord.Rest.RestUser.DiscriminatorValue
  commentId: P:Discord.Rest.RestUser.DiscriminatorValue
  parent: Discord.Rest.RestUser
  name: DiscriminatorValue
  nameWithType: RestUser.DiscriminatorValue
  fullName: Discord.Rest.RestUser.DiscriminatorValue
- uid: Discord.Rest.RestUser.AvatarId
  commentId: P:Discord.Rest.RestUser.AvatarId
  parent: Discord.Rest.RestUser
  name: AvatarId
  nameWithType: RestUser.AvatarId
  fullName: Discord.Rest.RestUser.AvatarId
- uid: Discord.Rest.RestUser.CreatedAt
  commentId: P:Discord.Rest.RestUser.CreatedAt
  parent: Discord.Rest.RestUser
  name: CreatedAt
  nameWithType: RestUser.CreatedAt
  fullName: Discord.Rest.RestUser.CreatedAt
- uid: Discord.Rest.RestUser.Discriminator
  commentId: P:Discord.Rest.RestUser.Discriminator
  parent: Discord.Rest.RestUser
  name: Discriminator
  nameWithType: RestUser.Discriminator
  fullName: Discord.Rest.RestUser.Discriminator
- uid: Discord.Rest.RestUser.Mention
  commentId: P:Discord.Rest.RestUser.Mention
  parent: Discord.Rest.RestUser
  name: Mention
  nameWithType: RestUser.Mention
  fullName: Discord.Rest.RestUser.Mention
- uid: Discord.Rest.RestUser.Activity
  commentId: P:Discord.Rest.RestUser.Activity
  parent: Discord.Rest.RestUser
  name: Activity
  nameWithType: RestUser.Activity
  fullName: Discord.Rest.RestUser.Activity
- uid: Discord.Rest.RestUser.Status
  commentId: P:Discord.Rest.RestUser.Status
  parent: Discord.Rest.RestUser
  name: Status
  nameWithType: RestUser.Status
  fullName: Discord.Rest.RestUser.Status
- uid: Discord.Rest.RestUser.ActiveClients
  commentId: P:Discord.Rest.RestUser.ActiveClients
  parent: Discord.Rest.RestUser
  name: ActiveClients
  nameWithType: RestUser.ActiveClients
  fullName: Discord.Rest.RestUser.ActiveClients
- uid: Discord.Rest.RestUser.IsWebhook
  commentId: P:Discord.Rest.RestUser.IsWebhook
  parent: Discord.Rest.RestUser
  name: IsWebhook
  nameWithType: RestUser.IsWebhook
  fullName: Discord.Rest.RestUser.IsWebhook
- uid: Discord.Rest.RestUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestUser
  name: GetOrCreateDMChannelAsync(RequestOptions)
  nameWithType: RestUser.GetOrCreateDMChannelAsync(RequestOptions)
  fullName: Discord.Rest.RestUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
    name: GetOrCreateDMChannelAsync
    nameWithType: RestUser.GetOrCreateDMChannelAsync
    fullName: Discord.Rest.RestUser.GetOrCreateDMChannelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
    name: GetOrCreateDMChannelAsync
    nameWithType: RestUser.GetOrCreateDMChannelAsync
    fullName: Discord.Rest.RestUser.GetOrCreateDMChannelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestUser.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
  commentId: M:Discord.Rest.RestUser.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
  parent: Discord.Rest.RestUser
  isExternal: true
  name: GetAvatarUrl(ImageFormat, UInt16)
  nameWithType: RestUser.GetAvatarUrl(ImageFormat, UInt16)
  fullName: Discord.Rest.RestUser.GetAvatarUrl(Discord.ImageFormat, System.UInt16)
  spec.csharp:
  - uid: Discord.Rest.RestUser.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
    name: GetAvatarUrl
    nameWithType: RestUser.GetAvatarUrl
    fullName: Discord.Rest.RestUser.GetAvatarUrl
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.ImageFormat
    name: ImageFormat
    nameWithType: ImageFormat
    fullName: Discord.ImageFormat
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestUser.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
    name: GetAvatarUrl
    nameWithType: RestUser.GetAvatarUrl
    fullName: Discord.Rest.RestUser.GetAvatarUrl
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.ImageFormat
    name: ImageFormat
    nameWithType: ImageFormat
    fullName: Discord.ImageFormat
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestUser.GetDefaultAvatarUrl
  commentId: M:Discord.Rest.RestUser.GetDefaultAvatarUrl
  parent: Discord.Rest.RestUser
  name: GetDefaultAvatarUrl()
  nameWithType: RestUser.GetDefaultAvatarUrl()
  fullName: Discord.Rest.RestUser.GetDefaultAvatarUrl()
  spec.csharp:
  - uid: Discord.Rest.RestUser.GetDefaultAvatarUrl
    name: GetDefaultAvatarUrl
    nameWithType: RestUser.GetDefaultAvatarUrl
    fullName: Discord.Rest.RestUser.GetDefaultAvatarUrl
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestUser.GetDefaultAvatarUrl
    name: GetDefaultAvatarUrl
    nameWithType: RestUser.GetDefaultAvatarUrl
    fullName: Discord.Rest.RestUser.GetDefaultAvatarUrl
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestUser.ToString
  commentId: M:Discord.Rest.RestUser.ToString
  parent: Discord.Rest.RestUser
  name: ToString()
  nameWithType: RestUser.ToString()
  fullName: Discord.Rest.RestUser.ToString()
  spec.csharp:
  - uid: Discord.Rest.RestUser.ToString
    name: ToString
    nameWithType: RestUser.ToString
    fullName: Discord.Rest.RestUser.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestUser.ToString
    name: ToString
    nameWithType: RestUser.ToString
    fullName: Discord.Rest.RestUser.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestEntity{System.UInt64}.Id
  commentId: P:Discord.Rest.RestEntity{System.UInt64}.Id
  parent: Discord.Rest.RestEntity{System.UInt64}
  definition: Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<UInt64>.Id
  fullName: Discord.Rest.RestEntity<System.UInt64>.Id
  nameWithType.vb: RestEntity(Of UInt64).Id
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64).Id
- uid: Discord.Rest.RestEntity`1
  commentId: T:Discord.Rest.RestEntity`1
  name: RestEntity<T>
  nameWithType: RestEntity<T>
  fullName: Discord.Rest.RestEntity<T>
  nameWithType.vb: RestEntity(Of T)
  fullName.vb: Discord.Rest.RestEntity(Of T)
  name.vb: RestEntity(Of T)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.Rest.RestEntity`1.Id
  commentId: P:Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<T>.Id
  fullName: Discord.Rest.RestEntity<T>.Id
  nameWithType.vb: RestEntity(Of T).Id
  fullName.vb: Discord.Rest.RestEntity(Of T).Id
- uid: Discord.Rest.RestGuildUser.Nickname*
  commentId: Overload:Discord.Rest.RestGuildUser.Nickname
  name: Nickname
  nameWithType: RestGuildUser.Nickname
  fullName: Discord.Rest.RestGuildUser.Nickname
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.Rest.RestGuildUser.IsDeafened*
  commentId: Overload:Discord.Rest.RestGuildUser.IsDeafened
  name: IsDeafened
  nameWithType: RestGuildUser.IsDeafened
  fullName: Discord.Rest.RestGuildUser.IsDeafened
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.Rest.RestGuildUser.IsMuted*
  commentId: Overload:Discord.Rest.RestGuildUser.IsMuted
  name: IsMuted
  nameWithType: RestGuildUser.IsMuted
  fullName: Discord.Rest.RestGuildUser.IsMuted
- uid: Discord.Rest.RestGuildUser.PremiumSince*
  commentId: Overload:Discord.Rest.RestGuildUser.PremiumSince
  name: PremiumSince
  nameWithType: RestGuildUser.PremiumSince
  fullName: Discord.Rest.RestGuildUser.PremiumSince
- uid: System.Nullable{DateTimeOffset}
  commentId: '!:System.Nullable{DateTimeOffset}'
  definition: System.Nullable`1
  name: Nullable<DateTimeOffset>
  nameWithType: Nullable<DateTimeOffset>
  fullName: System.Nullable<DateTimeOffset>
  nameWithType.vb: Nullable(Of DateTimeOffset)
  fullName.vb: System.Nullable(Of DateTimeOffset)
  name.vb: Nullable(Of DateTimeOffset)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildUser.GuildId*
  commentId: Overload:Discord.Rest.RestGuildUser.GuildId
  name: GuildId
  nameWithType: RestGuildUser.GuildId
  fullName: Discord.Rest.RestGuildUser.GuildId
- uid: System.UInt64
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Discord.Rest.RestGuildUser.GuildPermissions*
  commentId: Overload:Discord.Rest.RestGuildUser.GuildPermissions
  name: GuildPermissions
  nameWithType: RestGuildUser.GuildPermissions
  fullName: Discord.Rest.RestGuildUser.GuildPermissions
- uid: Discord.IGuildUser.GuildPermissions
  commentId: P:Discord.IGuildUser.GuildPermissions
  parent: Discord.IGuildUser
  name: GuildPermissions
  nameWithType: IGuildUser.GuildPermissions
  fullName: Discord.IGuildUser.GuildPermissions
- uid: Discord.GuildPermissions
  commentId: T:Discord.GuildPermissions
  parent: Discord
  name: GuildPermissions
  nameWithType: GuildPermissions
  fullName: Discord.GuildPermissions
- uid: Discord.Rest.RestGuildUser.RoleIds*
  commentId: Overload:Discord.Rest.RestGuildUser.RoleIds
  name: RoleIds
  nameWithType: RestGuildUser.RoleIds
  fullName: Discord.Rest.RestGuildUser.RoleIds
- uid: IReadOnlyCollection{System.UInt64}
  commentId: '!:IReadOnlyCollection{System.UInt64}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<UInt64>
  nameWithType: IReadOnlyCollection<UInt64>
  fullName: IReadOnlyCollection<System.UInt64>
  nameWithType.vb: IReadOnlyCollection(Of UInt64)
  fullName.vb: IReadOnlyCollection(Of System.UInt64)
  name.vb: IReadOnlyCollection(Of UInt64)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<>
  nameWithType: IReadOnlyCollection<>
  fullName: IReadOnlyCollection<>
  nameWithType.vb: IReadOnlyCollection(Of )
  fullName.vb: IReadOnlyCollection(Of )
  name.vb: IReadOnlyCollection(Of )
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildUser.JoinedAt*
  commentId: Overload:Discord.Rest.RestGuildUser.JoinedAt
  name: JoinedAt
  nameWithType: RestGuildUser.JoinedAt
  fullName: Discord.Rest.RestGuildUser.JoinedAt
- uid: Discord.Rest.RestUser.UpdateAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestUser.UpdateAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestUser
  name: UpdateAsync(RequestOptions)
  nameWithType: RestUser.UpdateAsync(RequestOptions)
  fullName: Discord.Rest.RestUser.UpdateAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestUser.UpdateAsync(Discord.RequestOptions)
    name: UpdateAsync
    nameWithType: RestUser.UpdateAsync
    fullName: Discord.Rest.RestUser.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestUser.UpdateAsync(Discord.RequestOptions)
    name: UpdateAsync
    nameWithType: RestUser.UpdateAsync
    fullName: Discord.Rest.RestUser.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildUser.UpdateAsync*
  commentId: Overload:Discord.Rest.RestGuildUser.UpdateAsync
  name: UpdateAsync
  nameWithType: RestGuildUser.UpdateAsync
  fullName: Discord.Rest.RestGuildUser.UpdateAsync
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Discord.Rest.RestGuildUser.ModifyAsync*
  commentId: Overload:Discord.Rest.RestGuildUser.ModifyAsync
  name: ModifyAsync
  nameWithType: RestGuildUser.ModifyAsync
  fullName: Discord.Rest.RestGuildUser.ModifyAsync
- uid: Action{Discord.GuildUserProperties}
  commentId: '!:Action{Discord.GuildUserProperties}'
  definition: Action`1
  name: Action<GuildUserProperties>
  nameWithType: Action<GuildUserProperties>
  fullName: Action<Discord.GuildUserProperties>
  nameWithType.vb: Action(Of GuildUserProperties)
  fullName.vb: Action(Of Discord.GuildUserProperties)
  name.vb: Action(Of GuildUserProperties)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildUserProperties
    name: GuildUserProperties
    nameWithType: GuildUserProperties
    fullName: Discord.GuildUserProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildUserProperties
    name: GuildUserProperties
    nameWithType: GuildUserProperties
    fullName: Discord.GuildUserProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildUser.KickAsync*
  commentId: Overload:Discord.Rest.RestGuildUser.KickAsync
  name: KickAsync
  nameWithType: RestGuildUser.KickAsync
  fullName: Discord.Rest.RestGuildUser.KickAsync
- uid: Discord.Rest.RestGuildUser.AddRoleAsync*
  commentId: Overload:Discord.Rest.RestGuildUser.AddRoleAsync
  name: AddRoleAsync
  nameWithType: RestGuildUser.AddRoleAsync
  fullName: Discord.Rest.RestGuildUser.AddRoleAsync
- uid: Discord.IRole
  commentId: T:Discord.IRole
  parent: Discord
  name: IRole
  nameWithType: IRole
  fullName: Discord.IRole
- uid: Discord.Rest.RestGuildUser.AddRolesAsync*
  commentId: Overload:Discord.Rest.RestGuildUser.AddRolesAsync
  name: AddRolesAsync
  nameWithType: RestGuildUser.AddRolesAsync
  fullName: Discord.Rest.RestGuildUser.AddRolesAsync
- uid: IEnumerable{Discord.IRole}
  commentId: '!:IEnumerable{Discord.IRole}'
  definition: IEnumerable`1
  name: IEnumerable<IRole>
  nameWithType: IEnumerable<IRole>
  fullName: IEnumerable<Discord.IRole>
  nameWithType.vb: IEnumerable(Of IRole)
  fullName.vb: IEnumerable(Of Discord.IRole)
  name.vb: IEnumerable(Of IRole)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildUser.RemoveRoleAsync*
  commentId: Overload:Discord.Rest.RestGuildUser.RemoveRoleAsync
  name: RemoveRoleAsync
  nameWithType: RestGuildUser.RemoveRoleAsync
  fullName: Discord.Rest.RestGuildUser.RemoveRoleAsync
- uid: Discord.Rest.RestGuildUser.RemoveRolesAsync*
  commentId: Overload:Discord.Rest.RestGuildUser.RemoveRolesAsync
  name: RemoveRolesAsync
  nameWithType: RestGuildUser.RemoveRolesAsync
  fullName: Discord.Rest.RestGuildUser.RemoveRolesAsync
- uid: Discord.Rest.RestGuildUser.GetPermissions*
  commentId: Overload:Discord.Rest.RestGuildUser.GetPermissions
  name: GetPermissions
  nameWithType: RestGuildUser.GetPermissions
  fullName: Discord.Rest.RestGuildUser.GetPermissions
- uid: Discord.IGuildUser.GetPermissions(Discord.IGuildChannel)
  commentId: M:Discord.IGuildUser.GetPermissions(Discord.IGuildChannel)
  parent: Discord.IGuildUser
  name: GetPermissions(IGuildChannel)
  nameWithType: IGuildUser.GetPermissions(IGuildChannel)
  fullName: Discord.IGuildUser.GetPermissions(Discord.IGuildChannel)
  spec.csharp:
  - uid: Discord.IGuildUser.GetPermissions(Discord.IGuildChannel)
    name: GetPermissions
    nameWithType: IGuildUser.GetPermissions
    fullName: Discord.IGuildUser.GetPermissions
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IGuildChannel
    name: IGuildChannel
    nameWithType: IGuildChannel
    fullName: Discord.IGuildChannel
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuildUser.GetPermissions(Discord.IGuildChannel)
    name: GetPermissions
    nameWithType: IGuildUser.GetPermissions
    fullName: Discord.IGuildUser.GetPermissions
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IGuildChannel
    name: IGuildChannel
    nameWithType: IGuildChannel
    fullName: Discord.IGuildChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuildChannel
  commentId: T:Discord.IGuildChannel
  parent: Discord
  name: IGuildChannel
  nameWithType: IGuildChannel
  fullName: Discord.IGuildChannel
- uid: Discord.ChannelPermissions
  commentId: T:Discord.ChannelPermissions
  parent: Discord
  name: ChannelPermissions
  nameWithType: ChannelPermissions
  fullName: Discord.ChannelPermissions
- uid: Discord.Rest.RestGuildUser.Discord#IGuildUser#Guild*
  commentId: Overload:Discord.Rest.RestGuildUser.Discord#IGuildUser#Guild
  name: IGuildUser.Guild
  nameWithType: RestGuildUser.IGuildUser.Guild
  fullName: Discord.Rest.RestGuildUser.Discord.IGuildUser.Guild
  nameWithType.vb: RestGuildUser.Discord.IGuildUser.Guild
  name.vb: Discord.IGuildUser.Guild
- uid: Discord.IGuildUser.Guild
  commentId: P:Discord.IGuildUser.Guild
  parent: Discord.IGuildUser
  name: Guild
  nameWithType: IGuildUser.Guild
  fullName: Discord.IGuildUser.Guild
- uid: Discord.IGuild
  commentId: T:Discord.IGuild
  parent: Discord
  name: IGuild
  nameWithType: IGuild
  fullName: Discord.IGuild
- uid: Discord.Rest.RestGuildUser.Discord#IVoiceState#VoiceChannel*
  commentId: Overload:Discord.Rest.RestGuildUser.Discord#IVoiceState#VoiceChannel
  name: IVoiceState.VoiceChannel
  nameWithType: RestGuildUser.IVoiceState.VoiceChannel
  fullName: Discord.Rest.RestGuildUser.Discord.IVoiceState.VoiceChannel
  nameWithType.vb: RestGuildUser.Discord.IVoiceState.VoiceChannel
  name.vb: Discord.IVoiceState.VoiceChannel
- uid: Discord.IVoiceState.VoiceChannel
  commentId: P:Discord.IVoiceState.VoiceChannel
  parent: Discord.IVoiceState
  name: VoiceChannel
  nameWithType: IVoiceState.VoiceChannel
  fullName: Discord.IVoiceState.VoiceChannel
- uid: Discord.IVoiceChannel
  commentId: T:Discord.IVoiceChannel
  parent: Discord
  name: IVoiceChannel
  nameWithType: IVoiceChannel
  fullName: Discord.IVoiceChannel
