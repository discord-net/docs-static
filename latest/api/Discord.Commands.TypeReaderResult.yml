### YamlMime:ManagedReference
items:
- uid: Discord.Commands.TypeReaderResult
  commentId: T:Discord.Commands.TypeReaderResult
  id: TypeReaderResult
  parent: Discord.Commands
  children:
  - Discord.Commands.TypeReaderResult.BestMatch
  - Discord.Commands.TypeReaderResult.Error
  - Discord.Commands.TypeReaderResult.ErrorReason
  - Discord.Commands.TypeReaderResult.FromError(Discord.Commands.CommandError,System.String)
  - Discord.Commands.TypeReaderResult.FromError(Discord.Commands.IResult)
  - Discord.Commands.TypeReaderResult.FromError(System.Exception)
  - Discord.Commands.TypeReaderResult.FromSuccess(Discord.Commands.TypeReaderValue)
  - Discord.Commands.TypeReaderResult.FromSuccess(System.Collections.Generic.IReadOnlyCollection{Discord.Commands.TypeReaderValue})
  - Discord.Commands.TypeReaderResult.FromSuccess(System.Object)
  - Discord.Commands.TypeReaderResult.IsSuccess
  - Discord.Commands.TypeReaderResult.ToString
  - Discord.Commands.TypeReaderResult.Values
  langs:
  - csharp
  - vb
  name: TypeReaderResult
  nameWithType: TypeReaderResult
  fullName: Discord.Commands.TypeReaderResult
  type: Struct
  source:
    remote:
      path: src/Discord.Net.Commands/Results/TypeReaderResult.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: TypeReaderResult
    path: ../src/Discord.Net.Commands/Results/TypeReaderResult.cs
    startLine: 24
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: 'public struct TypeReaderResult : IResult'
    content.vb: >-
      Public Structure TypeReaderResult
          Implements IResult
  implements:
  - Discord.Commands.IResult
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Discord.Commands.TypeReaderResult.Values
  commentId: P:Discord.Commands.TypeReaderResult.Values
  id: Values
  parent: Discord.Commands.TypeReaderResult
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: TypeReaderResult.Values
  fullName: Discord.Commands.TypeReaderResult.Values
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Results/TypeReaderResult.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Values
    path: ../src/Discord.Net.Commands/Results/TypeReaderResult.cs
    startLine: 27
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public IReadOnlyCollection<TypeReaderValue> Values { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.Commands.TypeReaderValue}
    content.vb: Public ReadOnly Property Values As IReadOnlyCollection(Of TypeReaderValue)
  overload: Discord.Commands.TypeReaderResult.Values*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.TypeReaderResult.Error
  commentId: P:Discord.Commands.TypeReaderResult.Error
  id: Error
  parent: Discord.Commands.TypeReaderResult
  langs:
  - csharp
  - vb
  name: Error
  nameWithType: TypeReaderResult.Error
  fullName: Discord.Commands.TypeReaderResult.Error
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Results/TypeReaderResult.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Error
    path: ../src/Discord.Net.Commands/Results/TypeReaderResult.cs
    startLine: 30
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nDescribes the error type that may have occurred during the operation.\n"
  example: []
  syntax:
    content: public CommandError? Error { get; }
    parameters: []
    return:
      type: System.Nullable{Discord.Commands.CommandError}
      description: "\nA <xref href=\"Discord.Commands.CommandError\" data-throw-if-not-resolved=\"false\"></xref> indicating the type of error that may have occurred during the operation; \n<code>null</code> if the operation was successful.\n"
    content.vb: Public ReadOnly Property Error As CommandError?
  overload: Discord.Commands.TypeReaderResult.Error*
  implements:
  - Discord.Commands.IResult.Error
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.TypeReaderResult.ErrorReason
  commentId: P:Discord.Commands.TypeReaderResult.ErrorReason
  id: ErrorReason
  parent: Discord.Commands.TypeReaderResult
  langs:
  - csharp
  - vb
  name: ErrorReason
  nameWithType: TypeReaderResult.ErrorReason
  fullName: Discord.Commands.TypeReaderResult.ErrorReason
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Results/TypeReaderResult.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ErrorReason
    path: ../src/Discord.Net.Commands/Results/TypeReaderResult.cs
    startLine: 32
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nDescribes the reason for the error.\n"
  example: []
  syntax:
    content: public string ErrorReason { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA string containing the error reason.\n"
    content.vb: Public ReadOnly Property ErrorReason As String
  overload: Discord.Commands.TypeReaderResult.ErrorReason*
  implements:
  - Discord.Commands.IResult.ErrorReason
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.TypeReaderResult.IsSuccess
  commentId: P:Discord.Commands.TypeReaderResult.IsSuccess
  id: IsSuccess
  parent: Discord.Commands.TypeReaderResult
  langs:
  - csharp
  - vb
  name: IsSuccess
  nameWithType: TypeReaderResult.IsSuccess
  fullName: Discord.Commands.TypeReaderResult.IsSuccess
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Results/TypeReaderResult.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsSuccess
    path: ../src/Discord.Net.Commands/Results/TypeReaderResult.cs
    startLine: 35
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nIndicates whether the operation was successful or not.\n"
  example: []
  syntax:
    content: public bool IsSuccess { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the result is positive; otherwise <code>false</code>.\n"
    content.vb: Public ReadOnly Property IsSuccess As Boolean
  overload: Discord.Commands.TypeReaderResult.IsSuccess*
  implements:
  - Discord.Commands.IResult.IsSuccess
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.TypeReaderResult.BestMatch
  commentId: P:Discord.Commands.TypeReaderResult.BestMatch
  id: BestMatch
  parent: Discord.Commands.TypeReaderResult
  langs:
  - csharp
  - vb
  name: BestMatch
  nameWithType: TypeReaderResult.BestMatch
  fullName: Discord.Commands.TypeReaderResult.BestMatch
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Results/TypeReaderResult.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: BestMatch
    path: ../src/Discord.Net.Commands/Results/TypeReaderResult.cs
    startLine: 38
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  example: []
  syntax:
    content: public object BestMatch { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public ReadOnly Property BestMatch As Object
  overload: Discord.Commands.TypeReaderResult.BestMatch*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: TypeReaderResult was not successful.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.TypeReaderResult.FromSuccess(System.Object)
  commentId: M:Discord.Commands.TypeReaderResult.FromSuccess(System.Object)
  id: FromSuccess(System.Object)
  parent: Discord.Commands.TypeReaderResult
  langs:
  - csharp
  - vb
  name: FromSuccess(Object)
  nameWithType: TypeReaderResult.FromSuccess(Object)
  fullName: Discord.Commands.TypeReaderResult.FromSuccess(System.Object)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Results/TypeReaderResult.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: FromSuccess
    path: ../src/Discord.Net.Commands/Results/TypeReaderResult.cs
    startLine: 49
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public static TypeReaderResult FromSuccess(object value)
    parameters:
    - id: value
      type: System.Object
    return:
      type: Discord.Commands.TypeReaderResult
    content.vb: Public Shared Function FromSuccess(value As Object) As TypeReaderResult
  overload: Discord.Commands.TypeReaderResult.FromSuccess*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Discord.Commands.TypeReaderResult.FromSuccess(Discord.Commands.TypeReaderValue)
  commentId: M:Discord.Commands.TypeReaderResult.FromSuccess(Discord.Commands.TypeReaderValue)
  id: FromSuccess(Discord.Commands.TypeReaderValue)
  parent: Discord.Commands.TypeReaderResult
  langs:
  - csharp
  - vb
  name: FromSuccess(TypeReaderValue)
  nameWithType: TypeReaderResult.FromSuccess(TypeReaderValue)
  fullName: Discord.Commands.TypeReaderResult.FromSuccess(Discord.Commands.TypeReaderValue)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Results/TypeReaderResult.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: FromSuccess
    path: ../src/Discord.Net.Commands/Results/TypeReaderResult.cs
    startLine: 51
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public static TypeReaderResult FromSuccess(TypeReaderValue value)
    parameters:
    - id: value
      type: Discord.Commands.TypeReaderValue
    return:
      type: Discord.Commands.TypeReaderResult
    content.vb: Public Shared Function FromSuccess(value As TypeReaderValue) As TypeReaderResult
  overload: Discord.Commands.TypeReaderResult.FromSuccess*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Discord.Commands.TypeReaderResult.FromSuccess(System.Collections.Generic.IReadOnlyCollection{Discord.Commands.TypeReaderValue})
  commentId: M:Discord.Commands.TypeReaderResult.FromSuccess(System.Collections.Generic.IReadOnlyCollection{Discord.Commands.TypeReaderValue})
  id: FromSuccess(System.Collections.Generic.IReadOnlyCollection{Discord.Commands.TypeReaderValue})
  parent: Discord.Commands.TypeReaderResult
  langs:
  - csharp
  - vb
  name: FromSuccess(IReadOnlyCollection<TypeReaderValue>)
  nameWithType: TypeReaderResult.FromSuccess(IReadOnlyCollection<TypeReaderValue>)
  fullName: Discord.Commands.TypeReaderResult.FromSuccess(System.Collections.Generic.IReadOnlyCollection<Discord.Commands.TypeReaderValue>)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Results/TypeReaderResult.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: FromSuccess
    path: ../src/Discord.Net.Commands/Results/TypeReaderResult.cs
    startLine: 53
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public static TypeReaderResult FromSuccess(IReadOnlyCollection<TypeReaderValue> values)
    parameters:
    - id: values
      type: System.Collections.Generic.IReadOnlyCollection{Discord.Commands.TypeReaderValue}
    return:
      type: Discord.Commands.TypeReaderResult
    content.vb: Public Shared Function FromSuccess(values As IReadOnlyCollection(Of TypeReaderValue)) As TypeReaderResult
  overload: Discord.Commands.TypeReaderResult.FromSuccess*
  nameWithType.vb: TypeReaderResult.FromSuccess(IReadOnlyCollection(Of TypeReaderValue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Discord.Commands.TypeReaderResult.FromSuccess(System.Collections.Generic.IReadOnlyCollection(Of Discord.Commands.TypeReaderValue))
  name.vb: FromSuccess(IReadOnlyCollection(Of TypeReaderValue))
- uid: Discord.Commands.TypeReaderResult.FromError(Discord.Commands.CommandError,System.String)
  commentId: M:Discord.Commands.TypeReaderResult.FromError(Discord.Commands.CommandError,System.String)
  id: FromError(Discord.Commands.CommandError,System.String)
  parent: Discord.Commands.TypeReaderResult
  langs:
  - csharp
  - vb
  name: FromError(CommandError, String)
  nameWithType: TypeReaderResult.FromError(CommandError, String)
  fullName: Discord.Commands.TypeReaderResult.FromError(Discord.Commands.CommandError, System.String)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Results/TypeReaderResult.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: FromError
    path: ../src/Discord.Net.Commands/Results/TypeReaderResult.cs
    startLine: 55
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public static TypeReaderResult FromError(CommandError error, string reason)
    parameters:
    - id: error
      type: Discord.Commands.CommandError
    - id: reason
      type: System.String
    return:
      type: Discord.Commands.TypeReaderResult
    content.vb: Public Shared Function FromError(error As CommandError, reason As String) As TypeReaderResult
  overload: Discord.Commands.TypeReaderResult.FromError*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Discord.Commands.TypeReaderResult.FromError(System.Exception)
  commentId: M:Discord.Commands.TypeReaderResult.FromError(System.Exception)
  id: FromError(System.Exception)
  parent: Discord.Commands.TypeReaderResult
  langs:
  - csharp
  - vb
  name: FromError(Exception)
  nameWithType: TypeReaderResult.FromError(Exception)
  fullName: Discord.Commands.TypeReaderResult.FromError(System.Exception)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Results/TypeReaderResult.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: FromError
    path: ../src/Discord.Net.Commands/Results/TypeReaderResult.cs
    startLine: 57
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public static TypeReaderResult FromError(Exception ex)
    parameters:
    - id: ex
      type: System.Exception
    return:
      type: Discord.Commands.TypeReaderResult
    content.vb: Public Shared Function FromError(ex As Exception) As TypeReaderResult
  overload: Discord.Commands.TypeReaderResult.FromError*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Discord.Commands.TypeReaderResult.FromError(Discord.Commands.IResult)
  commentId: M:Discord.Commands.TypeReaderResult.FromError(Discord.Commands.IResult)
  id: FromError(Discord.Commands.IResult)
  parent: Discord.Commands.TypeReaderResult
  langs:
  - csharp
  - vb
  name: FromError(IResult)
  nameWithType: TypeReaderResult.FromError(IResult)
  fullName: Discord.Commands.TypeReaderResult.FromError(Discord.Commands.IResult)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Results/TypeReaderResult.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: FromError
    path: ../src/Discord.Net.Commands/Results/TypeReaderResult.cs
    startLine: 59
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public static TypeReaderResult FromError(IResult result)
    parameters:
    - id: result
      type: Discord.Commands.IResult
    return:
      type: Discord.Commands.TypeReaderResult
    content.vb: Public Shared Function FromError(result As IResult) As TypeReaderResult
  overload: Discord.Commands.TypeReaderResult.FromError*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Discord.Commands.TypeReaderResult.ToString
  commentId: M:Discord.Commands.TypeReaderResult.ToString
  id: ToString
  parent: Discord.Commands.TypeReaderResult
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: TypeReaderResult.ToString()
  fullName: Discord.Commands.TypeReaderResult.ToString()
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Results/TypeReaderResult.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ToString
    path: ../src/Discord.Net.Commands/Results/TypeReaderResult.cs
    startLine: 62
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Discord.Commands.TypeReaderResult.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Discord.Commands
  commentId: N:Discord.Commands
  name: Discord.Commands
  nameWithType: Discord.Commands
  fullName: Discord.Commands
- uid: Discord.Commands.IResult
  commentId: T:Discord.Commands.IResult
  parent: Discord.Commands
  name: IResult
  nameWithType: IResult
  fullName: Discord.Commands.IResult
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Commands.TypeReaderResult.Values*
  commentId: Overload:Discord.Commands.TypeReaderResult.Values
  name: Values
  nameWithType: TypeReaderResult.Values
  fullName: Discord.Commands.TypeReaderResult.Values
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.Commands.TypeReaderValue}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.Commands.TypeReaderValue}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<TypeReaderValue>
  nameWithType: IReadOnlyCollection<TypeReaderValue>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.Commands.TypeReaderValue>
  nameWithType.vb: IReadOnlyCollection(Of TypeReaderValue)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.Commands.TypeReaderValue)
  name.vb: IReadOnlyCollection(Of TypeReaderValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.TypeReaderValue
    name: TypeReaderValue
    nameWithType: TypeReaderValue
    fullName: Discord.Commands.TypeReaderValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.TypeReaderValue
    name: TypeReaderValue
    nameWithType: TypeReaderValue
    fullName: Discord.Commands.TypeReaderValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Discord.Commands.TypeReaderResult.Error*
  commentId: Overload:Discord.Commands.TypeReaderResult.Error
  name: Error
  nameWithType: TypeReaderResult.Error
  fullName: Discord.Commands.TypeReaderResult.Error
- uid: Discord.Commands.IResult.Error
  commentId: P:Discord.Commands.IResult.Error
  parent: Discord.Commands.IResult
  name: Error
  nameWithType: IResult.Error
  fullName: Discord.Commands.IResult.Error
- uid: System.Nullable{Discord.Commands.CommandError}
  commentId: T:System.Nullable{Discord.Commands.CommandError}
  parent: System
  definition: System.Nullable`1
  name: Nullable<CommandError>
  nameWithType: Nullable<CommandError>
  fullName: System.Nullable<Discord.Commands.CommandError>
  nameWithType.vb: Nullable(Of CommandError)
  fullName.vb: System.Nullable(Of Discord.Commands.CommandError)
  name.vb: Nullable(Of CommandError)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.CommandError
    name: CommandError
    nameWithType: CommandError
    fullName: Discord.Commands.CommandError
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.CommandError
    name: CommandError
    nameWithType: CommandError
    fullName: Discord.Commands.CommandError
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.TypeReaderResult.ErrorReason*
  commentId: Overload:Discord.Commands.TypeReaderResult.ErrorReason
  name: ErrorReason
  nameWithType: TypeReaderResult.ErrorReason
  fullName: Discord.Commands.TypeReaderResult.ErrorReason
- uid: Discord.Commands.IResult.ErrorReason
  commentId: P:Discord.Commands.IResult.ErrorReason
  parent: Discord.Commands.IResult
  name: ErrorReason
  nameWithType: IResult.ErrorReason
  fullName: Discord.Commands.IResult.ErrorReason
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.Commands.TypeReaderResult.IsSuccess*
  commentId: Overload:Discord.Commands.TypeReaderResult.IsSuccess
  name: IsSuccess
  nameWithType: TypeReaderResult.IsSuccess
  fullName: Discord.Commands.TypeReaderResult.IsSuccess
- uid: Discord.Commands.IResult.IsSuccess
  commentId: P:Discord.Commands.IResult.IsSuccess
  parent: Discord.Commands.IResult
  name: IsSuccess
  nameWithType: IResult.IsSuccess
  fullName: Discord.Commands.IResult.IsSuccess
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: Discord.Commands.TypeReaderResult.BestMatch*
  commentId: Overload:Discord.Commands.TypeReaderResult.BestMatch
  name: BestMatch
  nameWithType: TypeReaderResult.BestMatch
  fullName: Discord.Commands.TypeReaderResult.BestMatch
- uid: Discord.Commands.TypeReaderResult.FromSuccess*
  commentId: Overload:Discord.Commands.TypeReaderResult.FromSuccess
  name: FromSuccess
  nameWithType: TypeReaderResult.FromSuccess
  fullName: Discord.Commands.TypeReaderResult.FromSuccess
- uid: Discord.Commands.TypeReaderResult
  commentId: T:Discord.Commands.TypeReaderResult
  parent: Discord.Commands
  name: TypeReaderResult
  nameWithType: TypeReaderResult
  fullName: Discord.Commands.TypeReaderResult
- uid: Discord.Commands.TypeReaderValue
  commentId: T:Discord.Commands.TypeReaderValue
  parent: Discord.Commands
  name: TypeReaderValue
  nameWithType: TypeReaderValue
  fullName: Discord.Commands.TypeReaderValue
- uid: Discord.Commands.TypeReaderResult.FromError*
  commentId: Overload:Discord.Commands.TypeReaderResult.FromError
  name: FromError
  nameWithType: TypeReaderResult.FromError
  fullName: Discord.Commands.TypeReaderResult.FromError
- uid: Discord.Commands.CommandError
  commentId: T:Discord.Commands.CommandError
  parent: Discord.Commands
  name: CommandError
  nameWithType: CommandError
  fullName: Discord.Commands.CommandError
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.TypeReaderResult.ToString*
  commentId: Overload:Discord.Commands.TypeReaderResult.ToString
  name: ToString
  nameWithType: TypeReaderResult.ToString
  fullName: Discord.Commands.TypeReaderResult.ToString
