### YamlMime:ManagedReference
items:
- uid: Discord.IMessageChannel
  commentId: T:Discord.IMessageChannel
  id: IMessageChannel
  parent: Discord
  children:
  - Discord.IMessageChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  - Discord.IMessageChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  - Discord.IMessageChannel.EnterTypingState(Discord.RequestOptions)
  - Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  - Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  - Discord.IMessageChannel.GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  - Discord.IMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  - Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  - Discord.IMessageChannel.SendFileAsync(Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  - Discord.IMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  - Discord.IMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  - Discord.IMessageChannel.TriggerTypingAsync(Discord.RequestOptions)
  langs:
  - csharp
  - vb
  name: IMessageChannel
  nameWithType: IMessageChannel
  fullName: Discord.IMessageChannel
  type: Interface
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IMessageChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IMessageChannel
    path: ../src/Discord.Net.Core/Entities/Channels/IMessageChannel.cs
    startLine: 10
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nRepresents a generic channel that can send and receive messages.\n"
  example: []
  syntax:
    content: 'public interface IMessageChannel : IChannel, ISnowflakeEntity, IEntity<ulong>'
    content.vb: >-
      Public Interface IMessageChannel
          Inherits IChannel
  inheritedMembers:
  - Discord.IChannel.Name
  - Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  - Discord.ISnowflakeEntity.CreatedAt
  - Discord.IEntity{System.UInt64}.Id
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Discord.IMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  id: SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  langs:
  - csharp
  - vb
  name: SendMessageAsync(String, Boolean, Embed, RequestOptions)
  nameWithType: IMessageChannel.SendMessageAsync(String, Boolean, Embed, RequestOptions)
  fullName: Discord.IMessageChannel.SendMessageAsync(System.String, System.Boolean, Discord.Embed, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IMessageChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SendMessageAsync
    path: ../src/Discord.Net.Core/Entities/Channels/IMessageChannel.cs
    startLine: 29
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nSends a message to this message channel.\n"
  example:
  - "\n<p>The following example sends a message with the current system time in RFC 1123 format to the channel and\ndeletes itself after 5 seconds.</p>\n<pre><code class=\"lang-cs\" region=\"SendMessageAsync\" source=\"..\\..\\..\\Discord.Net.Examples\\Core\\Entities\\Channels\\IMessageChannel.Examples.cs\">    var message = await channel.SendMessageAsync(DateTimeOffset.UtcNow.ToString(&quot;R&quot;));\n    await Task.Delay(TimeSpan.FromSeconds(5))\n        .ContinueWith(x => message.DeleteAsync());</code></pre>\n"
  syntax:
    content: Task<IUserMessage> SendMessageAsync(string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null)
    parameters:
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Determines whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.IUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Function SendMessageAsync(text As String = Nothing, isTTS As Boolean = False, embed As Embed = Nothing, options As RequestOptions = Nothing) As Task(Of IUserMessage)
  overload: Discord.IMessageChannel.SendMessageAsync*
- uid: Discord.IMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.IMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  id: SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.IMessageChannel
  langs:
  - csharp
  - vb
  name: SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: IMessageChannel.SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.IMessageChannel.SendFileAsync(System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IMessageChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SendFileAsync
    path: ../src/Discord.Net.Core/Entities/Channels/IMessageChannel.cs
    startLine: 61
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nSends a file to this message channel with an optional caption.\n"
  remarks: "\nThis method sends a file as if you are uploading an attachment directly from your Discord client.\n<div class=\"NOTE\"><h5>note</h5><p>\n    If you wish to upload an image and have it embedded in a <xref href=\"Discord.EmbedType.Rich\" data-throw-if-not-resolved=\"false\"></xref> embed,\n    you may upload the file and refer to the file with &quot;attachment://filename.ext&quot; in the\n<xref href=\"Discord.EmbedBuilder.ImageUrl\" data-throw-if-not-resolved=\"false\"></xref>. See the example section for its usage.\n</p></div>\n"
  example:
  - "\n<p>The following example uploads a local file called <code>wumpus.txt</code> along with the text \n<code>good discord boi</code> to the channel.</p>\n<pre><code class=\"lang-cs\" region=\"SendFileAsync.FilePath\" source=\"..\\..\\..\\Discord.Net.Examples\\Core\\Entities\\Channels\\IMessageChannel.Examples.cs\">    await channel.SendFileAsync(&quot;wumpus.txt&quot;, &quot;good discord boi&quot;);</code></pre>\n<p>The following example uploads a local image called <code>b1nzy.jpg</code> embedded inside a rich embed to the\nchannel.</p>\n<pre><code class=\"lang-cs\" region=\"SendFileAsync.FilePath.EmbeddedImage\" source=\"..\\..\\..\\Discord.Net.Examples\\Core\\Entities\\Channels\\IMessageChannel.Examples.cs\">    await channel.SendFileAsync(&quot;b1nzy.jpg&quot;,\n        embed: new EmbedBuilder {ImageUrl = &quot;attachment://b1nzy.jpg&quot;}.Build());</code></pre>\n"
  syntax:
    content: Task<IUserMessage> SendFileAsync(string filePath, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false)
    parameters:
    - id: filePath
      type: System.String
      description: The file path of the file.
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    - id: isSpoiler
      type: System.Boolean
      description: Whether the message attachment should be hidden as a spoiler.
    return:
      type: Task{Discord.IUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Function SendFileAsync(filePath As String, text As String = Nothing, isTTS As Boolean = False, embed As Embed = Nothing, options As RequestOptions = Nothing, isSpoiler As Boolean = False) As Task(Of IUserMessage)
  overload: Discord.IMessageChannel.SendFileAsync*
- uid: Discord.IMessageChannel.SendFileAsync(Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.IMessageChannel.SendFileAsync(Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  id: SendFileAsync(Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.IMessageChannel
  langs:
  - csharp
  - vb
  name: SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: IMessageChannel.SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.IMessageChannel.SendFileAsync(Stream, System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IMessageChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SendFileAsync
    path: ../src/Discord.Net.Core/Entities/Channels/IMessageChannel.cs
    startLine: 90
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nSends a file to this message channel with an optional caption.\n"
  remarks: "\nThis method sends a file as if you are uploading an attachment directly from your Discord client.\n<div class=\"NOTE\"><h5>note</h5><p>\n    If you wish to upload an image and have it embedded in a <xref href=\"Discord.EmbedType.Rich\" data-throw-if-not-resolved=\"false\"></xref> embed,\n    you may upload the file and refer to the file with &quot;attachment://filename.ext&quot; in the\n<xref href=\"Discord.EmbedBuilder.ImageUrl\" data-throw-if-not-resolved=\"false\"></xref>. See the example section for its usage.\n</p></div>\n"
  example:
  - "\n<p>The following example uploads a streamed image that will be called <code>b1nzy.jpg</code> embedded inside a\nrich embed to the channel.</p>\n<pre><code class=\"lang-cs\" region=\"SendFileAsync.FileStream.EmbeddedImage\" source=\"..\\..\\..\\Discord.Net.Examples\\Core\\Entities\\Channels\\IMessageChannel.Examples.cs\">    using (var b1nzyStream = await httpClient.GetStreamAsync(&quot;https://example.com/b1nzy&quot;))\n        await channel.SendFileAsync(b1nzyStream, &quot;b1nzy.jpg&quot;,\n            embed: new EmbedBuilder {ImageUrl = &quot;attachment://b1nzy.jpg&quot;}.Build());</code></pre>\n"
  syntax:
    content: Task<IUserMessage> SendFileAsync(Stream stream, string filename, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false)
    parameters:
    - id: stream
      type: Stream
      description: The <see cref="!:Stream"></see> of the file to be sent.
    - id: filename
      type: System.String
      description: The name of the attachment.
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    - id: isSpoiler
      type: System.Boolean
      description: Whether the message attachment should be hidden as a spoiler.
    return:
      type: Task{Discord.IUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Function SendFileAsync(stream As Stream, filename As String, text As String = Nothing, isTTS As Boolean = False, embed As Embed = Nothing, options As RequestOptions = Nothing, isSpoiler As Boolean = False) As Task(Of IUserMessage)
  overload: Discord.IMessageChannel.SendFileAsync*
- uid: Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  id: GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  langs:
  - csharp
  - vb
  name: GetMessageAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: IMessageChannel.GetMessageAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.IMessageChannel.GetMessageAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IMessageChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetMessageAsync
    path: ../src/Discord.Net.Core/Entities/Channels/IMessageChannel.cs
    startLine: 102
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a message from this message channel.\n"
  example: []
  syntax:
    content: Task<IMessage> GetMessageAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the message.
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.IMessage}
      description: "\nA task that represents an asynchronous get operation for retrieving the message. The task result contains\nthe retrieved message; <code>null</code> if no message is found with the specified identifier.\n"
    content.vb: Function GetMessageAsync(id As ULong, mode As CacheMode = CacheMode.AllowDownload, options As RequestOptions = Nothing) As Task(Of IMessage)
  overload: Discord.IMessageChannel.GetMessageAsync*
- uid: Discord.IMessageChannel.GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  id: GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  langs:
  - csharp
  - vb
  name: GetMessagesAsync(Int32, CacheMode, RequestOptions)
  nameWithType: IMessageChannel.GetMessagesAsync(Int32, CacheMode, RequestOptions)
  fullName: Discord.IMessageChannel.GetMessagesAsync(System.Int32, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IMessageChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetMessagesAsync
    path: ../src/Discord.Net.Core/Entities/Channels/IMessageChannel.cs
    startLine: 137
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the last N messages from this message channel.\n"
  remarks: "\n<div class=\"IMPORTANT\"><h5>important</h5><p>\n    The returned collection is an asynchronous enumerable object; one must call \n<xref href=\"Discord.AsyncEnumerableExtensions.FlattenAsync%60%601(IAsyncEnumerable%7bIEnumerable%7b%60%600%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref> to access the individual messages as a\ncollection.\n</p></div>\n<div class=\"WARNING\"><h5>warning</h5><p>\n    Do not fetch too many messages at once! This may cause unwanted preemptive rate limit or even actual\n    rate limit, causing your bot to freeze!\n</p></div>\nThis method will attempt to fetch the number of messages specified under <code data-dev-comment-type=\"paramref\" class=\"paramref\">limit</code>. The\nlibrary will attempt to split up the requests according to your <code data-dev-comment-type=\"paramref\" class=\"paramref\">limit</code> and \n<xref href=\"Discord.DiscordConfig.MaxMessagesPerBatch\" data-throw-if-not-resolved=\"false\"></xref>. In other words, should the user request 500 messages,\nand the <xref href=\"Discord.DiscordConfig.MaxMessagesPerBatch\" data-throw-if-not-resolved=\"false\"></xref> constant is <code>100</code>, the request will\nbe split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need\nof flattening.\n"
  example:
  - "\n<p>The following example downloads 300 messages and gets messages that belong to the user \n<code>53905483156684800</code>.</p>\n<pre><code class=\"lang-cs\" region=\"GetMessagesAsync.FromLimit.Standard\" source=\"..\\..\\..\\Discord.Net.Examples\\Core\\Entities\\Channels\\IMessageChannel.Examples.cs\">    var messages = await channel.GetMessagesAsync(300).FlattenAsync();\n    var userMessages = messages.Where(x => x.Author.Id == 53905483156684800);</code></pre>\n"
  syntax:
    content: IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(int limit = null, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null)
    parameters:
    - id: limit
      type: System.Int32
      description: The numbers of message to be gotten from.
    - id: mode
      type: Discord.CacheMode
      description: >-
        The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from

        cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: IAsyncEnumerable{IReadOnlyCollection{Discord.IMessage}}
      description: "\nPaged collection of messages.\n"
    content.vb: Function GetMessagesAsync(limit As Integer = Nothing, mode As CacheMode = CacheMode.AllowDownload, options As RequestOptions = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of IMessage))
  overload: Discord.IMessageChannel.GetMessagesAsync*
- uid: Discord.IMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  id: GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  langs:
  - csharp
  - vb
  name: GetMessagesAsync(UInt64, Direction, Int32, CacheMode, RequestOptions)
  nameWithType: IMessageChannel.GetMessagesAsync(UInt64, Direction, Int32, CacheMode, RequestOptions)
  fullName: Discord.IMessageChannel.GetMessagesAsync(System.UInt64, Discord.Direction, System.Int32, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IMessageChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetMessagesAsync
    path: ../src/Discord.Net.Core/Entities/Channels/IMessageChannel.cs
    startLine: 178
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a collection of messages in this channel.\n"
  remarks: "\n<div class=\"IMPORTANT\"><h5>important</h5><p>\n    The returned collection is an asynchronous enumerable object; one must call \n<xref href=\"Discord.AsyncEnumerableExtensions.FlattenAsync%60%601(IAsyncEnumerable%7bIEnumerable%7b%60%600%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref> to access the individual messages as a\ncollection.\n</p></div>\n<div class=\"WARNING\"><h5>warning</h5><p>\n    Do not fetch too many messages at once! This may cause unwanted preemptive rate limit or even actual\n    rate limit, causing your bot to freeze!\n</p></div>\nThis method will attempt to fetch the number of messages specified under <code data-dev-comment-type=\"paramref\" class=\"paramref\">limit</code> around\nthe message <code data-dev-comment-type=\"paramref\" class=\"paramref\">fromMessageId</code> depending on the <code data-dev-comment-type=\"paramref\" class=\"paramref\">dir</code>. The library will\nattempt to split up the requests according to your <code data-dev-comment-type=\"paramref\" class=\"paramref\">limit</code> and \n<xref href=\"Discord.DiscordConfig.MaxMessagesPerBatch\" data-throw-if-not-resolved=\"false\"></xref>. In other words, should the user request 500 messages,\nand the <xref href=\"Discord.DiscordConfig.MaxMessagesPerBatch\" data-throw-if-not-resolved=\"false\"></xref> constant is <code>100</code>, the request will\nbe split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need\nof flattening.\n"
  example:
  - "\n<p>The following example gets 5 message prior to the message identifier <code>442012544660537354</code>.</p>\n<pre><code class=\"lang-cs\" region=\"GetMessagesAsync.FromId.FromMessage\" source=\"..\\..\\..\\Discord.Net.Examples\\Core\\Entities\\Channels\\IMessageChannel.Examples.cs\">    await channel.GetMessagesAsync(442012544660537354, Direction.Before, 5).FlattenAsync();</code></pre>\n<p>The following example attempts to retrieve <code>messageCount</code> number of messages from the \nbeginning of the channel and prints them to the console.</p>\n<pre><code class=\"lang-cs\" region=\"GetMessagesAsync.FromId.BeginningMessages\" source=\"..\\..\\..\\Discord.Net.Examples\\Core\\Entities\\Channels\\IMessageChannel.Examples.cs\">public async Task PrintFirstMessages(IMessageChannel channel, int messageCount)\n{\n    // Although the library does attempt to divide the messageCount by 100\n    // to comply to Discord&apos;s maximum message limit per request, sending\n    // too many could still cause the queue to clog up.\n    // The purpose of this exception is to discourage users from sending\n    // too many requests at once.\n    if (messageCount > 1000)\n        throw new InvalidOperationException(&quot;Too many messages requested.&quot;);\n\n    // Setting fromMessageId to 0 will make Discord\n    // default to the first message in channel.\n    var messages = await channel.GetMessagesAsync(\n            0, Direction.After, messageCount)\n        .FlattenAsync();\n\n    // Print message content\n    foreach (var message in messages)\n        Console.WriteLine($&quot;{message.Author} posted &apos;{message.Content}&apos; at {message.CreatedAt}.&quot;);\n}</code></pre>\n"
  syntax:
    content: IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(ulong fromMessageId, Direction dir, int limit = null, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null)
    parameters:
    - id: fromMessageId
      type: System.UInt64
      description: The ID of the starting message to get the messages from.
    - id: dir
      type: Discord.Direction
      description: The direction of the messages to be gotten from.
    - id: limit
      type: System.Int32
      description: The numbers of message to be gotten from.
    - id: mode
      type: Discord.CacheMode
      description: >-
        The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from

        cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: IAsyncEnumerable{IReadOnlyCollection{Discord.IMessage}}
      description: "\nPaged collection of messages.\n"
    content.vb: Function GetMessagesAsync(fromMessageId As ULong, dir As Direction, limit As Integer = Nothing, mode As CacheMode = CacheMode.AllowDownload, options As RequestOptions = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of IMessage))
  overload: Discord.IMessageChannel.GetMessagesAsync*
- uid: Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  id: GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  langs:
  - csharp
  - vb
  name: GetMessagesAsync(IMessage, Direction, Int32, CacheMode, RequestOptions)
  nameWithType: IMessageChannel.GetMessagesAsync(IMessage, Direction, Int32, CacheMode, RequestOptions)
  fullName: Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage, Discord.Direction, System.Int32, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IMessageChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetMessagesAsync
    path: ../src/Discord.Net.Core/Entities/Channels/IMessageChannel.cs
    startLine: 215
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a collection of messages in this channel.\n"
  remarks: "\n<div class=\"IMPORTANT\"><h5>important</h5><p>\n    The returned collection is an asynchronous enumerable object; one must call \n<xref href=\"Discord.AsyncEnumerableExtensions.FlattenAsync%60%601(IAsyncEnumerable%7bIEnumerable%7b%60%600%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref> to access the individual messages as a\ncollection.\n</p></div>\n<div class=\"WARNING\"><h5>warning</h5><p>\n    Do not fetch too many messages at once! This may cause unwanted preemptive rate limit or even actual\n    rate limit, causing your bot to freeze!\n</p></div>\nThis method will attempt to fetch the number of messages specified under <code data-dev-comment-type=\"paramref\" class=\"paramref\">limit</code> around\nthe message <code data-dev-comment-type=\"paramref\" class=\"paramref\">fromMessage</code> depending on the <code data-dev-comment-type=\"paramref\" class=\"paramref\">dir</code>. The library will\nattempt to split up the requests according to your <code data-dev-comment-type=\"paramref\" class=\"paramref\">limit</code> and \n<xref href=\"Discord.DiscordConfig.MaxMessagesPerBatch\" data-throw-if-not-resolved=\"false\"></xref>. In other words, should the user request 500 messages,\nand the <xref href=\"Discord.DiscordConfig.MaxMessagesPerBatch\" data-throw-if-not-resolved=\"false\"></xref> constant is <code>100</code>, the request will\nbe split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need\nof flattening.\n"
  example:
  - "\n<p>The following example gets 5 message prior to a specific message, <code>oldMessage</code>.</p>\n<pre><code class=\"lang-cs\" region=\"GetMessagesAsync.FromMessage\" source=\"..\\..\\..\\Discord.Net.Examples\\Core\\Entities\\Channels\\IMessageChannel.Examples.cs\">    var oldMessage = await channel.SendMessageAsync(&quot;boi&quot;);\n    var messagesFromMsg = await channel.GetMessagesAsync(oldMessage, Direction.Before, 5).FlattenAsync();</code></pre>\n"
  syntax:
    content: IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(IMessage fromMessage, Direction dir, int limit = null, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null)
    parameters:
    - id: fromMessage
      type: Discord.IMessage
      description: The starting message to get the messages from.
    - id: dir
      type: Discord.Direction
      description: The direction of the messages to be gotten from.
    - id: limit
      type: System.Int32
      description: The numbers of message to be gotten from.
    - id: mode
      type: Discord.CacheMode
      description: >-
        The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from

        cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: IAsyncEnumerable{IReadOnlyCollection{Discord.IMessage}}
      description: "\nPaged collection of messages.\n"
    content.vb: Function GetMessagesAsync(fromMessage As IMessage, dir As Direction, limit As Integer = Nothing, mode As CacheMode = CacheMode.AllowDownload, options As RequestOptions = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of IMessage))
  overload: Discord.IMessageChannel.GetMessagesAsync*
- uid: Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  id: GetPinnedMessagesAsync(Discord.RequestOptions)
  parent: Discord.IMessageChannel
  langs:
  - csharp
  - vb
  name: GetPinnedMessagesAsync(RequestOptions)
  nameWithType: IMessageChannel.GetPinnedMessagesAsync(RequestOptions)
  fullName: Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IMessageChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetPinnedMessagesAsync
    path: ../src/Discord.Net.Core/Entities/Channels/IMessageChannel.cs
    startLine: 225
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a collection of pinned messages in this channel.\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<IMessage>> GetPinnedMessagesAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{IReadOnlyCollection{Discord.IMessage}}
      description: "\nA task that represents the asynchronous get operation for retrieving pinned messages in this channel.\nThe task result contains a collection of messages found in the pinned messages.\n"
    content.vb: Function GetPinnedMessagesAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of IMessage))
  overload: Discord.IMessageChannel.GetPinnedMessagesAsync*
- uid: Discord.IMessageChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  id: DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  langs:
  - csharp
  - vb
  name: DeleteMessageAsync(UInt64, RequestOptions)
  nameWithType: IMessageChannel.DeleteMessageAsync(UInt64, RequestOptions)
  fullName: Discord.IMessageChannel.DeleteMessageAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IMessageChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteMessageAsync
    path: ../src/Discord.Net.Core/Entities/Channels/IMessageChannel.cs
    startLine: 235
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nDeletes a message.\n"
  example: []
  syntax:
    content: Task DeleteMessageAsync(ulong messageId, RequestOptions options = null)
    parameters:
    - id: messageId
      type: System.UInt64
      description: The snowflake identifier of the message that would be removed.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task
      description: "\nA task that represents the asynchronous removal operation.\n"
    content.vb: Function DeleteMessageAsync(messageId As ULong, options As RequestOptions = Nothing) As Task
  overload: Discord.IMessageChannel.DeleteMessageAsync*
- uid: Discord.IMessageChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  id: DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  langs:
  - csharp
  - vb
  name: DeleteMessageAsync(IMessage, RequestOptions)
  nameWithType: IMessageChannel.DeleteMessageAsync(IMessage, RequestOptions)
  fullName: Discord.IMessageChannel.DeleteMessageAsync(Discord.IMessage, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IMessageChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteMessageAsync
    path: ../src/Discord.Net.Core/Entities/Channels/IMessageChannel.cs
    startLine: 242
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: 'Deletes a message based on the provided message in this channel. '
  example: []
  syntax:
    content: Task DeleteMessageAsync(IMessage message, RequestOptions options = null)
    parameters:
    - id: message
      type: Discord.IMessage
      description: The message that would be removed.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task
      description: "\nA task that represents the asynchronous removal operation.\n"
    content.vb: Function DeleteMessageAsync(message As IMessage, options As RequestOptions = Nothing) As Task
  overload: Discord.IMessageChannel.DeleteMessageAsync*
- uid: Discord.IMessageChannel.TriggerTypingAsync(Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.TriggerTypingAsync(Discord.RequestOptions)
  id: TriggerTypingAsync(Discord.RequestOptions)
  parent: Discord.IMessageChannel
  langs:
  - csharp
  - vb
  name: TriggerTypingAsync(RequestOptions)
  nameWithType: IMessageChannel.TriggerTypingAsync(RequestOptions)
  fullName: Discord.IMessageChannel.TriggerTypingAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IMessageChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: TriggerTypingAsync
    path: ../src/Discord.Net.Core/Entities/Channels/IMessageChannel.cs
    startLine: 251
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nBroadcasts the &quot;user is typing&quot; message to all users in this channel, lasting 10 seconds.\n"
  example: []
  syntax:
    content: Task TriggerTypingAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task
      description: "\nA task that represents the asynchronous operation that triggers the broadcast.\n"
    content.vb: Function TriggerTypingAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.IMessageChannel.TriggerTypingAsync*
- uid: Discord.IMessageChannel.EnterTypingState(Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.EnterTypingState(Discord.RequestOptions)
  id: EnterTypingState(Discord.RequestOptions)
  parent: Discord.IMessageChannel
  langs:
  - csharp
  - vb
  name: EnterTypingState(RequestOptions)
  nameWithType: IMessageChannel.EnterTypingState(RequestOptions)
  fullName: Discord.IMessageChannel.EnterTypingState(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IMessageChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: EnterTypingState
    path: ../src/Discord.Net.Core/Entities/Channels/IMessageChannel.cs
    startLine: 266
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nContinuously broadcasts the &quot;user is typing&quot; message to all users in this channel until the returned\nobject is disposed.\n"
  example:
  - "\n<p>The following example keeps the client in the typing state until <code>LongRunningAsync</code> has finished.</p>\n<pre><code class=\"lang-cs\" region=\"EnterTypingState\" source=\"..\\..\\..\\Discord.Net.Examples\\Core\\Entities\\Channels\\IMessageChannel.Examples.cs\">    using (channel.EnterTypingState()) await LongRunningAsync();</code></pre>\n"
  syntax:
    content: IDisposable EnterTypingState(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: IDisposable
      description: "\nA disposable object that, upon its disposal, will stop the client from broadcasting its typing state in\nthis channel.\n"
    content.vb: Function EnterTypingState(options As RequestOptions = Nothing) As IDisposable
  overload: Discord.IMessageChannel.EnterTypingState*
references:
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.IChannel.Name
  commentId: P:Discord.IChannel.Name
  parent: Discord.IChannel
  name: Name
  nameWithType: IChannel.Name
  fullName: Discord.IChannel.Name
- uid: Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IChannel
  name: GetUsersAsync(CacheMode, RequestOptions)
  nameWithType: IChannel.GetUsersAsync(CacheMode, RequestOptions)
  fullName: Discord.IChannel.GetUsersAsync(Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetUsersAsync
    nameWithType: IChannel.GetUsersAsync
    fullName: Discord.IChannel.GetUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetUsersAsync
    nameWithType: IChannel.GetUsersAsync
    fullName: Discord.IChannel.GetUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IChannel
  isExternal: true
  name: GetUserAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.IChannel.GetUserAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetUserAsync
    nameWithType: IChannel.GetUserAsync
    fullName: Discord.IChannel.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetUserAsync
    nameWithType: IChannel.GetUserAsync
    fullName: Discord.IChannel.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.ISnowflakeEntity.CreatedAt
  commentId: P:Discord.ISnowflakeEntity.CreatedAt
  parent: Discord.ISnowflakeEntity
  name: CreatedAt
  nameWithType: ISnowflakeEntity.CreatedAt
  fullName: Discord.ISnowflakeEntity.CreatedAt
- uid: Discord.IEntity{System.UInt64}.Id
  commentId: P:Discord.IEntity{System.UInt64}.Id
  parent: Discord.IEntity{System.UInt64}
  definition: Discord.IEntity`1.Id
  name: Id
  nameWithType: IEntity<UInt64>.Id
  fullName: Discord.IEntity<System.UInt64>.Id
  nameWithType.vb: IEntity(Of UInt64).Id
  fullName.vb: Discord.IEntity(Of System.UInt64).Id
- uid: Discord.IChannel
  commentId: T:Discord.IChannel
  parent: Discord
  name: IChannel
  nameWithType: IChannel
  fullName: Discord.IChannel
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IEntity`1.Id
  commentId: P:Discord.IEntity`1.Id
  name: Id
  nameWithType: IEntity<TId>.Id
  fullName: Discord.IEntity<TId>.Id
  nameWithType.vb: IEntity(Of TId).Id
  fullName.vb: Discord.IEntity(Of TId).Id
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.EmbedType.Rich
  commentId: F:Discord.EmbedType.Rich
  isExternal: true
- uid: Discord.Embed
  commentId: T:Discord.Embed
  parent: Discord
  name: Embed
  nameWithType: Embed
  fullName: Discord.Embed
- uid: Discord.IMessageChannel.SendMessageAsync*
  commentId: Overload:Discord.IMessageChannel.SendMessageAsync
  name: SendMessageAsync
  nameWithType: IMessageChannel.SendMessageAsync
  fullName: Discord.IMessageChannel.SendMessageAsync
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: Task{Discord.IUserMessage}
  commentId: '!:Task{Discord.IUserMessage}'
  definition: Task`1
  name: Task<IUserMessage>
  nameWithType: Task<IUserMessage>
  fullName: Task<Discord.IUserMessage>
  nameWithType.vb: Task(Of IUserMessage)
  fullName.vb: Task(Of Discord.IUserMessage)
  name.vb: Task(Of IUserMessage)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.EmbedBuilder.ImageUrl
  commentId: P:Discord.EmbedBuilder.ImageUrl
  isExternal: true
- uid: Discord.IMessageChannel.SendFileAsync*
  commentId: Overload:Discord.IMessageChannel.SendFileAsync
  name: SendFileAsync
  nameWithType: IMessageChannel.SendFileAsync
  fullName: Discord.IMessageChannel.SendFileAsync
- uid: Stream
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: Stream
- uid: Discord.CacheMode
  commentId: T:Discord.CacheMode
  parent: Discord
  name: CacheMode
  nameWithType: CacheMode
  fullName: Discord.CacheMode
- uid: Discord.IMessageChannel.GetMessageAsync*
  commentId: Overload:Discord.IMessageChannel.GetMessageAsync
  name: GetMessageAsync
  nameWithType: IMessageChannel.GetMessageAsync
  fullName: Discord.IMessageChannel.GetMessageAsync
- uid: System.UInt64
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Task{Discord.IMessage}
  commentId: '!:Task{Discord.IMessage}'
  definition: Task`1
  name: Task<IMessage>
  nameWithType: Task<IMessage>
  fullName: Task<Discord.IMessage>
  nameWithType.vb: Task(Of IMessage)
  fullName.vb: Task(Of Discord.IMessage)
  name.vb: Task(Of IMessage)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.AsyncEnumerableExtensions.FlattenAsync``1(IAsyncEnumerable{IEnumerable{``0}})
  commentId: M:Discord.AsyncEnumerableExtensions.FlattenAsync``1(IAsyncEnumerable{IEnumerable{``0}})
  isExternal: true
- uid: Discord.DiscordConfig.MaxMessagesPerBatch
  commentId: F:Discord.DiscordConfig.MaxMessagesPerBatch
  parent: Discord.DiscordConfig
  name: MaxMessagesPerBatch
  nameWithType: DiscordConfig.MaxMessagesPerBatch
  fullName: Discord.DiscordConfig.MaxMessagesPerBatch
- uid: Discord.IMessageChannel.GetMessagesAsync*
  commentId: Overload:Discord.IMessageChannel.GetMessagesAsync
  name: GetMessagesAsync
  nameWithType: IMessageChannel.GetMessagesAsync
  fullName: Discord.IMessageChannel.GetMessagesAsync
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: IAsyncEnumerable{IReadOnlyCollection{Discord.IMessage}}
  commentId: '!:IAsyncEnumerable{IReadOnlyCollection{Discord.IMessage}}'
  definition: IAsyncEnumerable`1
  name: IAsyncEnumerable<IReadOnlyCollection<IMessage>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<IMessage>>
  fullName: IAsyncEnumerable<IReadOnlyCollection<Discord.IMessage>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IMessage))
  fullName.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of Discord.IMessage))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IMessage))
  spec.csharp:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.DiscordConfig
  commentId: T:Discord.DiscordConfig
  parent: Discord
  name: DiscordConfig
  nameWithType: DiscordConfig
  fullName: Discord.DiscordConfig
- uid: IAsyncEnumerable`1
  isExternal: true
  name: IAsyncEnumerable<>
  nameWithType: IAsyncEnumerable<>
  fullName: IAsyncEnumerable<>
  nameWithType.vb: IAsyncEnumerable(Of )
  fullName.vb: IAsyncEnumerable(Of )
  name.vb: IAsyncEnumerable(Of )
  spec.csharp:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Direction
  commentId: T:Discord.Direction
  parent: Discord
  name: Direction
  nameWithType: Direction
  fullName: Discord.Direction
- uid: Discord.IMessage
  commentId: T:Discord.IMessage
  parent: Discord
  name: IMessage
  nameWithType: IMessage
  fullName: Discord.IMessage
- uid: Discord.IMessageChannel.GetPinnedMessagesAsync*
  commentId: Overload:Discord.IMessageChannel.GetPinnedMessagesAsync
  name: GetPinnedMessagesAsync
  nameWithType: IMessageChannel.GetPinnedMessagesAsync
  fullName: Discord.IMessageChannel.GetPinnedMessagesAsync
- uid: Task{IReadOnlyCollection{Discord.IMessage}}
  commentId: '!:Task{IReadOnlyCollection{Discord.IMessage}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<IMessage>>
  nameWithType: Task<IReadOnlyCollection<IMessage>>
  fullName: Task<IReadOnlyCollection<Discord.IMessage>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IMessage))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.IMessage))
  name.vb: Task(Of IReadOnlyCollection(Of IMessage))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessageChannel.DeleteMessageAsync*
  commentId: Overload:Discord.IMessageChannel.DeleteMessageAsync
  name: DeleteMessageAsync
  nameWithType: IMessageChannel.DeleteMessageAsync
  fullName: Discord.IMessageChannel.DeleteMessageAsync
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Discord.IMessageChannel.TriggerTypingAsync*
  commentId: Overload:Discord.IMessageChannel.TriggerTypingAsync
  name: TriggerTypingAsync
  nameWithType: IMessageChannel.TriggerTypingAsync
  fullName: Discord.IMessageChannel.TriggerTypingAsync
- uid: Discord.IMessageChannel.EnterTypingState*
  commentId: Overload:Discord.IMessageChannel.EnterTypingState
  name: EnterTypingState
  nameWithType: IMessageChannel.EnterTypingState
  fullName: Discord.IMessageChannel.EnterTypingState
- uid: IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: IDisposable
