### YamlMime:ManagedReference
items:
- uid: Discord.IUserMessage
  commentId: T:Discord.IUserMessage
  id: IUserMessage
  parent: Discord
  children:
  - Discord.IUserMessage.AddReactionAsync(Discord.IEmote,Discord.RequestOptions)
  - Discord.IUserMessage.GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions)
  - Discord.IUserMessage.ModifyAsync(Action{Discord.MessageProperties},Discord.RequestOptions)
  - Discord.IUserMessage.ModifySuppressionAsync(System.Boolean,Discord.RequestOptions)
  - Discord.IUserMessage.PinAsync(Discord.RequestOptions)
  - Discord.IUserMessage.Reactions
  - Discord.IUserMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
  - Discord.IUserMessage.RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)
  - Discord.IUserMessage.RemoveReactionAsync(Discord.IEmote,System.UInt64,Discord.RequestOptions)
  - Discord.IUserMessage.Resolve(Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  - Discord.IUserMessage.UnpinAsync(Discord.RequestOptions)
  langs:
  - csharp
  - vb
  name: IUserMessage
  nameWithType: IUserMessage
  fullName: Discord.IUserMessage
  type: Interface
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IUserMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: IUserMessage
    path: ../src/Discord.Net.Core/Entities/Messages/IUserMessage.cs
    startLine: 9
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nRepresents a generic message sent by a user.\n"
  example: []
  syntax:
    content: 'public interface IUserMessage : IMessage, ISnowflakeEntity, IEntity<ulong>, IDeletable'
    content.vb: >-
      Public Interface IUserMessage
          Inherits IMessage
  inheritedMembers:
  - Discord.IMessage.Type
  - Discord.IMessage.Source
  - Discord.IMessage.IsTTS
  - Discord.IMessage.IsPinned
  - Discord.IMessage.IsSuppressed
  - Discord.IMessage.Content
  - Discord.IMessage.Timestamp
  - Discord.IMessage.EditedTimestamp
  - Discord.IMessage.Channel
  - Discord.IMessage.Author
  - Discord.IMessage.Attachments
  - Discord.IMessage.Embeds
  - Discord.IMessage.Tags
  - Discord.IMessage.MentionedChannelIds
  - Discord.IMessage.MentionedRoleIds
  - Discord.IMessage.MentionedUserIds
  - Discord.IMessage.Activity
  - Discord.IMessage.Application
  - Discord.ISnowflakeEntity.CreatedAt
  - Discord.IEntity{System.UInt64}.Id
  - Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  extensionMethods:
  - Discord.IUserMessage.Discord.Commands.MessageExtensions.HasCharPrefix(System.Char,System.Int32@)
  - Discord.IUserMessage.Discord.Commands.MessageExtensions.HasStringPrefix(System.String,System.Int32@,StringComparison)
  - Discord.IUserMessage.Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUser,System.Int32@)
  - Discord.IMessage.Discord.MessageExtensions.GetJumpUrl
  - Discord.IUserMessage.Discord.MessageExtensions.AddReactionsAsync(Discord.IEmote[],Discord.RequestOptions)
  - Discord.IUserMessage.Discord.MessageExtensions.RemoveReactionsAsync(Discord.IUser,Discord.IEmote[],Discord.RequestOptions)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Discord.IUserMessage.ModifyAsync(Action{Discord.MessageProperties},Discord.RequestOptions)
  commentId: M:Discord.IUserMessage.ModifyAsync(Action{Discord.MessageProperties},Discord.RequestOptions)
  id: ModifyAsync(Action{Discord.MessageProperties},Discord.RequestOptions)
  parent: Discord.IUserMessage
  langs:
  - csharp
  - vb
  name: ModifyAsync(Action<MessageProperties>, RequestOptions)
  nameWithType: IUserMessage.ModifyAsync(Action<MessageProperties>, RequestOptions)
  fullName: Discord.IUserMessage.ModifyAsync(Action<Discord.MessageProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IUserMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ModifyAsync
    path: ../src/Discord.Net.Core/Entities/Messages/IUserMessage.cs
    startLine: 29
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nModifies this message.\n"
  remarks: "\nThis method modifies this message with the specified properties. To see an example of this\nmethod and what properties are available, please refer to <xref href=\"Discord.MessageProperties\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example:
  - "\nThe following example replaces the content of the message with <code>Hello World!</code>.\n<pre><code class=\"lang-cs\">await msg.ModifyAsync(x => x.Content = &quot;Hello World!&quot;);</code></pre>\n"
  syntax:
    content: Task ModifyAsync(Action<MessageProperties> func, RequestOptions options = null)
    parameters:
    - id: func
      type: Action{Discord.MessageProperties}
      description: A delegate containing the properties to modify the message with.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task
      description: "\nA task that represents the asynchronous modification operation.\n"
    content.vb: Function ModifyAsync(func As Action(Of MessageProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.IUserMessage.ModifyAsync*
  nameWithType.vb: IUserMessage.ModifyAsync(Action(Of MessageProperties), RequestOptions)
  fullName.vb: Discord.IUserMessage.ModifyAsync(Action(Of Discord.MessageProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of MessageProperties), RequestOptions)
- uid: Discord.IUserMessage.ModifySuppressionAsync(System.Boolean,Discord.RequestOptions)
  commentId: M:Discord.IUserMessage.ModifySuppressionAsync(System.Boolean,Discord.RequestOptions)
  id: ModifySuppressionAsync(System.Boolean,Discord.RequestOptions)
  parent: Discord.IUserMessage
  langs:
  - csharp
  - vb
  name: ModifySuppressionAsync(Boolean, RequestOptions)
  nameWithType: IUserMessage.ModifySuppressionAsync(Boolean, RequestOptions)
  fullName: Discord.IUserMessage.ModifySuppressionAsync(System.Boolean, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IUserMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ModifySuppressionAsync
    path: ../src/Discord.Net.Core/Entities/Messages/IUserMessage.cs
    startLine: 41
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nModifies the suppression of this message.\n"
  remarks: "\nThis method modifies whether or not embeds in this message are suppressed (hidden).\n"
  example: []
  syntax:
    content: Task ModifySuppressionAsync(bool suppressEmbeds, RequestOptions options = null)
    parameters:
    - id: suppressEmbeds
      type: System.Boolean
      description: Whether or not embeds in this message should be suppressed.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task
      description: "\nA task that represents the asynchronous modification operation.\n"
    content.vb: Function ModifySuppressionAsync(suppressEmbeds As Boolean, options As RequestOptions = Nothing) As Task
  overload: Discord.IUserMessage.ModifySuppressionAsync*
- uid: Discord.IUserMessage.PinAsync(Discord.RequestOptions)
  commentId: M:Discord.IUserMessage.PinAsync(Discord.RequestOptions)
  id: PinAsync(Discord.RequestOptions)
  parent: Discord.IUserMessage
  langs:
  - csharp
  - vb
  name: PinAsync(RequestOptions)
  nameWithType: IUserMessage.PinAsync(RequestOptions)
  fullName: Discord.IUserMessage.PinAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IUserMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: PinAsync
    path: ../src/Discord.Net.Core/Entities/Messages/IUserMessage.cs
    startLine: 49
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nAdds this message to its channel&apos;s pinned messages.\n"
  example: []
  syntax:
    content: Task PinAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task
      description: "\nA task that represents the asynchronous operation for pinning this message.\n"
    content.vb: Function PinAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.IUserMessage.PinAsync*
- uid: Discord.IUserMessage.UnpinAsync(Discord.RequestOptions)
  commentId: M:Discord.IUserMessage.UnpinAsync(Discord.RequestOptions)
  id: UnpinAsync(Discord.RequestOptions)
  parent: Discord.IUserMessage
  langs:
  - csharp
  - vb
  name: UnpinAsync(RequestOptions)
  nameWithType: IUserMessage.UnpinAsync(RequestOptions)
  fullName: Discord.IUserMessage.UnpinAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IUserMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: UnpinAsync
    path: ../src/Discord.Net.Core/Entities/Messages/IUserMessage.cs
    startLine: 57
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nRemoves this message from its channel&apos;s pinned messages.\n"
  example: []
  syntax:
    content: Task UnpinAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task
      description: "\nA task that represents the asynchronous operation for unpinning this message.\n"
    content.vb: Function UnpinAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.IUserMessage.UnpinAsync*
- uid: Discord.IUserMessage.Reactions
  commentId: P:Discord.IUserMessage.Reactions
  id: Reactions
  parent: Discord.IUserMessage
  langs:
  - csharp
  - vb
  name: Reactions
  nameWithType: IUserMessage.Reactions
  fullName: Discord.IUserMessage.Reactions
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IUserMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Reactions
    path: ../src/Discord.Net.Core/Entities/Messages/IUserMessage.cs
    startLine: 62
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets all reactions included in this message.\n"
  example: []
  syntax:
    content: IReadOnlyDictionary<IEmote, ReactionMetadata> Reactions { get; }
    parameters: []
    return:
      type: IReadOnlyDictionary{Discord.IEmote,Discord.ReactionMetadata}
    content.vb: ReadOnly Property Reactions As IReadOnlyDictionary(Of IEmote, ReactionMetadata)
  overload: Discord.IUserMessage.Reactions*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IUserMessage.AddReactionAsync(Discord.IEmote,Discord.RequestOptions)
  commentId: M:Discord.IUserMessage.AddReactionAsync(Discord.IEmote,Discord.RequestOptions)
  id: AddReactionAsync(Discord.IEmote,Discord.RequestOptions)
  parent: Discord.IUserMessage
  langs:
  - csharp
  - vb
  name: AddReactionAsync(IEmote, RequestOptions)
  nameWithType: IUserMessage.AddReactionAsync(IEmote, RequestOptions)
  fullName: Discord.IUserMessage.AddReactionAsync(Discord.IEmote, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IUserMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: AddReactionAsync
    path: ../src/Discord.Net.Core/Entities/Messages/IUserMessage.cs
    startLine: 79
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nAdds a reaction to this message.\n"
  example:
  - "\nThe following example adds the reaction, <code>\U0001F495</code>, to the message.\n<pre><code class=\"lang-cs\">await msg.AddReactionAsync(new Emoji(&quot;\\U0001f495&quot;));</code></pre>\n"
  syntax:
    content: Task AddReactionAsync(IEmote emote, RequestOptions options = null)
    parameters:
    - id: emote
      type: Discord.IEmote
      description: The emoji used to react to this message.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task
      description: "\nA task that represents the asynchronous operation for adding a reaction to this message.\n"
    content.vb: Function AddReactionAsync(emote As IEmote, options As RequestOptions = Nothing) As Task
  overload: Discord.IUserMessage.AddReactionAsync*
  seealso:
  - linkId: Discord.IEmote
    commentId: T:Discord.IEmote
- uid: Discord.IUserMessage.RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)
  commentId: M:Discord.IUserMessage.RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)
  id: RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)
  parent: Discord.IUserMessage
  langs:
  - csharp
  - vb
  name: RemoveReactionAsync(IEmote, IUser, RequestOptions)
  nameWithType: IUserMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions)
  fullName: Discord.IUserMessage.RemoveReactionAsync(Discord.IEmote, Discord.IUser, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IUserMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: RemoveReactionAsync
    path: ../src/Discord.Net.Core/Entities/Messages/IUserMessage.cs
    startLine: 96
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nRemoves a reaction from message.\n"
  example:
  - "\nThe following example removes the reaction, <code>\U0001F495</code>, added by the message author from the message.\n<pre><code class=\"lang-cs\">await msg.RemoveReactionAsync(new Emoji(&quot;\\U0001f495&quot;), msg.Author);</code></pre>\n"
  syntax:
    content: Task RemoveReactionAsync(IEmote emote, IUser user, RequestOptions options = null)
    parameters:
    - id: emote
      type: Discord.IEmote
      description: The emoji used to react to this message.
    - id: user
      type: Discord.IUser
      description: The user that added the emoji.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task
      description: "\nA task that represents the asynchronous operation for removing a reaction to this message.\n"
    content.vb: Function RemoveReactionAsync(emote As IEmote, user As IUser, options As RequestOptions = Nothing) As Task
  overload: Discord.IUserMessage.RemoveReactionAsync*
  seealso:
  - linkId: Discord.IEmote
    commentId: T:Discord.IEmote
- uid: Discord.IUserMessage.RemoveReactionAsync(Discord.IEmote,System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.IUserMessage.RemoveReactionAsync(Discord.IEmote,System.UInt64,Discord.RequestOptions)
  id: RemoveReactionAsync(Discord.IEmote,System.UInt64,Discord.RequestOptions)
  parent: Discord.IUserMessage
  langs:
  - csharp
  - vb
  name: RemoveReactionAsync(IEmote, UInt64, RequestOptions)
  nameWithType: IUserMessage.RemoveReactionAsync(IEmote, UInt64, RequestOptions)
  fullName: Discord.IUserMessage.RemoveReactionAsync(Discord.IEmote, System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IUserMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: RemoveReactionAsync
    path: ../src/Discord.Net.Core/Entities/Messages/IUserMessage.cs
    startLine: 113
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nRemoves a reaction from message.\n"
  example:
  - "\nThe following example removes the reaction, <code>\U0001F495</code>, added by the user with ID 84291986575613952 from the message.\n<pre><code class=\"lang-cs\">await msg.RemoveReactionAsync(new Emoji(&quot;\\U0001f495&quot;), 84291986575613952);</code></pre>\n"
  syntax:
    content: Task RemoveReactionAsync(IEmote emote, ulong userId, RequestOptions options = null)
    parameters:
    - id: emote
      type: Discord.IEmote
      description: The emoji used to react to this message.
    - id: userId
      type: System.UInt64
      description: The ID of the user that added the emoji.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task
      description: "\nA task that represents the asynchronous operation for removing a reaction to this message.\n"
    content.vb: Function RemoveReactionAsync(emote As IEmote, userId As ULong, options As RequestOptions = Nothing) As Task
  overload: Discord.IUserMessage.RemoveReactionAsync*
  seealso:
  - linkId: Discord.IEmote
    commentId: T:Discord.IEmote
- uid: Discord.IUserMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
  commentId: M:Discord.IUserMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
  id: RemoveAllReactionsAsync(Discord.RequestOptions)
  parent: Discord.IUserMessage
  langs:
  - csharp
  - vb
  name: RemoveAllReactionsAsync(RequestOptions)
  nameWithType: IUserMessage.RemoveAllReactionsAsync(RequestOptions)
  fullName: Discord.IUserMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IUserMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: RemoveAllReactionsAsync
    path: ../src/Discord.Net.Core/Entities/Messages/IUserMessage.cs
    startLine: 121
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nRemoves all reactions from this message.\n"
  example: []
  syntax:
    content: Task RemoveAllReactionsAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task
      description: "\nA task that represents the asynchronous removal operation.\n"
    content.vb: Function RemoveAllReactionsAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.IUserMessage.RemoveAllReactionsAsync*
- uid: Discord.IUserMessage.GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions)
  commentId: M:Discord.IUserMessage.GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions)
  id: GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions)
  parent: Discord.IUserMessage
  langs:
  - csharp
  - vb
  name: GetReactionUsersAsync(IEmote, Int32, RequestOptions)
  nameWithType: IUserMessage.GetReactionUsersAsync(IEmote, Int32, RequestOptions)
  fullName: Discord.IUserMessage.GetReactionUsersAsync(Discord.IEmote, System.Int32, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IUserMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetReactionUsersAsync
    path: ../src/Discord.Net.Core/Entities/Messages/IUserMessage.cs
    startLine: 141
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets all users that reacted to a message with a given emote.\n"
  example:
  - "\nThe following example gets the users that have reacted with the emoji <code>\U0001F495</code> to the message.\n<pre><code class=\"lang-cs\">var emoji = new Emoji(&quot;\\U0001f495&quot;);\nvar reactedUsers = await message.GetReactionUsersAsync(emoji, 100).FlattenAsync();</code></pre>\n"
  syntax:
    content: IAsyncEnumerable<IReadOnlyCollection<IUser>> GetReactionUsersAsync(IEmote emoji, int limit, RequestOptions options = null)
    parameters:
    - id: emoji
      type: Discord.IEmote
      description: The emoji that represents the reaction that you wish to get.
    - id: limit
      type: System.Int32
      description: The number of users to request.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: IAsyncEnumerable{IReadOnlyCollection{Discord.IUser}}
      description: "\nA paged collection containing a read-only collection of users that has reacted to this message.\nFlattening the paginated response into a collection of users with \n<xref href=\"Discord.AsyncEnumerableExtensions.FlattenAsync%60%601(IAsyncEnumerable%7bIEnumerable%7b%60%600%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref> is required if you wish to access the users.\n"
    content.vb: Function GetReactionUsersAsync(emoji As IEmote, limit As Integer, options As RequestOptions = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of IUser))
  overload: Discord.IUserMessage.GetReactionUsersAsync*
- uid: Discord.IUserMessage.Resolve(Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  commentId: M:Discord.IUserMessage.Resolve(Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  id: Resolve(Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  parent: Discord.IUserMessage
  langs:
  - csharp
  - vb
  name: Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling)
  nameWithType: IUserMessage.Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling)
  fullName: Discord.IUserMessage.Resolve(Discord.TagHandling, Discord.TagHandling, Discord.TagHandling, Discord.TagHandling, Discord.TagHandling)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IUserMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Resolve
    path: ../src/Discord.Net.Core/Entities/Messages/IUserMessage.cs
    startLine: 151
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nTransforms this message&apos;s text into a human-readable form by resolving its tags.\n"
  example: []
  syntax:
    content: string Resolve(TagHandling userHandling = default(TagHandling), TagHandling channelHandling = default(TagHandling), TagHandling roleHandling = default(TagHandling), TagHandling everyoneHandling = default(TagHandling), TagHandling emojiHandling = default(TagHandling))
    parameters:
    - id: userHandling
      type: Discord.TagHandling
      description: Determines how the user tag should be handled.
    - id: channelHandling
      type: Discord.TagHandling
      description: Determines how the channel tag should be handled.
    - id: roleHandling
      type: Discord.TagHandling
      description: Determines how the role tag should be handled.
    - id: everyoneHandling
      type: Discord.TagHandling
      description: Determines how the @everyone tag should be handled.
    - id: emojiHandling
      type: Discord.TagHandling
      description: Determines how the emoji tag should be handled.
    return:
      type: System.String
    content.vb: Function Resolve(userHandling As TagHandling = Nothing, channelHandling As TagHandling = Nothing, roleHandling As TagHandling = Nothing, everyoneHandling As TagHandling = Nothing, emojiHandling As TagHandling = Nothing) As String
  overload: Discord.IUserMessage.Resolve*
references:
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.IMessage.Type
  commentId: P:Discord.IMessage.Type
  parent: Discord.IMessage
  name: Type
  nameWithType: IMessage.Type
  fullName: Discord.IMessage.Type
- uid: Discord.IMessage.Source
  commentId: P:Discord.IMessage.Source
  parent: Discord.IMessage
  name: Source
  nameWithType: IMessage.Source
  fullName: Discord.IMessage.Source
- uid: Discord.IMessage.IsTTS
  commentId: P:Discord.IMessage.IsTTS
  parent: Discord.IMessage
  name: IsTTS
  nameWithType: IMessage.IsTTS
  fullName: Discord.IMessage.IsTTS
- uid: Discord.IMessage.IsPinned
  commentId: P:Discord.IMessage.IsPinned
  parent: Discord.IMessage
  name: IsPinned
  nameWithType: IMessage.IsPinned
  fullName: Discord.IMessage.IsPinned
- uid: Discord.IMessage.IsSuppressed
  commentId: P:Discord.IMessage.IsSuppressed
  parent: Discord.IMessage
  name: IsSuppressed
  nameWithType: IMessage.IsSuppressed
  fullName: Discord.IMessage.IsSuppressed
- uid: Discord.IMessage.Content
  commentId: P:Discord.IMessage.Content
  parent: Discord.IMessage
  name: Content
  nameWithType: IMessage.Content
  fullName: Discord.IMessage.Content
- uid: Discord.IMessage.Timestamp
  commentId: P:Discord.IMessage.Timestamp
  parent: Discord.IMessage
  name: Timestamp
  nameWithType: IMessage.Timestamp
  fullName: Discord.IMessage.Timestamp
- uid: Discord.IMessage.EditedTimestamp
  commentId: P:Discord.IMessage.EditedTimestamp
  parent: Discord.IMessage
  name: EditedTimestamp
  nameWithType: IMessage.EditedTimestamp
  fullName: Discord.IMessage.EditedTimestamp
- uid: Discord.IMessage.Channel
  commentId: P:Discord.IMessage.Channel
  parent: Discord.IMessage
  name: Channel
  nameWithType: IMessage.Channel
  fullName: Discord.IMessage.Channel
- uid: Discord.IMessage.Author
  commentId: P:Discord.IMessage.Author
  parent: Discord.IMessage
  name: Author
  nameWithType: IMessage.Author
  fullName: Discord.IMessage.Author
- uid: Discord.IMessage.Attachments
  commentId: P:Discord.IMessage.Attachments
  parent: Discord.IMessage
  name: Attachments
  nameWithType: IMessage.Attachments
  fullName: Discord.IMessage.Attachments
- uid: Discord.IMessage.Embeds
  commentId: P:Discord.IMessage.Embeds
  parent: Discord.IMessage
  name: Embeds
  nameWithType: IMessage.Embeds
  fullName: Discord.IMessage.Embeds
- uid: Discord.IMessage.Tags
  commentId: P:Discord.IMessage.Tags
  parent: Discord.IMessage
  name: Tags
  nameWithType: IMessage.Tags
  fullName: Discord.IMessage.Tags
- uid: Discord.IMessage.MentionedChannelIds
  commentId: P:Discord.IMessage.MentionedChannelIds
  parent: Discord.IMessage
  name: MentionedChannelIds
  nameWithType: IMessage.MentionedChannelIds
  fullName: Discord.IMessage.MentionedChannelIds
- uid: Discord.IMessage.MentionedRoleIds
  commentId: P:Discord.IMessage.MentionedRoleIds
  parent: Discord.IMessage
  name: MentionedRoleIds
  nameWithType: IMessage.MentionedRoleIds
  fullName: Discord.IMessage.MentionedRoleIds
- uid: Discord.IMessage.MentionedUserIds
  commentId: P:Discord.IMessage.MentionedUserIds
  parent: Discord.IMessage
  name: MentionedUserIds
  nameWithType: IMessage.MentionedUserIds
  fullName: Discord.IMessage.MentionedUserIds
- uid: Discord.IMessage.Activity
  commentId: P:Discord.IMessage.Activity
  parent: Discord.IMessage
  name: Activity
  nameWithType: IMessage.Activity
  fullName: Discord.IMessage.Activity
- uid: Discord.IMessage.Application
  commentId: P:Discord.IMessage.Application
  parent: Discord.IMessage
  name: Application
  nameWithType: IMessage.Application
  fullName: Discord.IMessage.Application
- uid: Discord.ISnowflakeEntity.CreatedAt
  commentId: P:Discord.ISnowflakeEntity.CreatedAt
  parent: Discord.ISnowflakeEntity
  name: CreatedAt
  nameWithType: ISnowflakeEntity.CreatedAt
  fullName: Discord.ISnowflakeEntity.CreatedAt
- uid: Discord.IEntity{System.UInt64}.Id
  commentId: P:Discord.IEntity{System.UInt64}.Id
  parent: Discord.IEntity{System.UInt64}
  definition: Discord.IEntity`1.Id
  name: Id
  nameWithType: IEntity<UInt64>.Id
  fullName: Discord.IEntity<System.UInt64>.Id
  nameWithType.vb: IEntity(Of UInt64).Id
  fullName.vb: Discord.IEntity(Of System.UInt64).Id
- uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  commentId: M:Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  parent: Discord.IDeletable
  name: DeleteAsync(RequestOptions)
  nameWithType: IDeletable.DeleteAsync(RequestOptions)
  fullName: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: IDeletable.DeleteAsync
    fullName: Discord.IDeletable.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: IDeletable.DeleteAsync
    fullName: Discord.IDeletable.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IUserMessage.Discord.Commands.MessageExtensions.HasCharPrefix(System.Char,System.Int32@)
  commentId: M:Discord.Commands.MessageExtensions.HasCharPrefix(Discord.IUserMessage,System.Char,System.Int32@)
  parent: Discord.Commands.MessageExtensions
  definition: Discord.Commands.MessageExtensions.HasCharPrefix(Discord.IUserMessage,System.Char,System.Int32@)
  name: HasCharPrefix(Char, Int32)
  nameWithType: MessageExtensions.HasCharPrefix(Char, Int32)
  fullName: Discord.Commands.MessageExtensions.HasCharPrefix(System.Char, System.Int32)
  spec.csharp:
  - uid: Discord.Commands.MessageExtensions.HasCharPrefix(System.Char,System.Int32@)
    name: HasCharPrefix
    nameWithType: MessageExtensions.HasCharPrefix
    fullName: Discord.Commands.MessageExtensions.HasCharPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.MessageExtensions.HasCharPrefix(System.Char,System.Int32@)
    name: HasCharPrefix
    nameWithType: MessageExtensions.HasCharPrefix
    fullName: Discord.Commands.MessageExtensions.HasCharPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IUserMessage.Discord.Commands.MessageExtensions.HasStringPrefix(System.String,System.Int32@,StringComparison)
  commentId: M:Discord.Commands.MessageExtensions.HasStringPrefix(Discord.IUserMessage,System.String,System.Int32@,StringComparison)
  parent: Discord.Commands.MessageExtensions
  definition: Discord.Commands.MessageExtensions.HasStringPrefix(Discord.IUserMessage,System.String,System.Int32@,StringComparison)
  name: HasStringPrefix(String, Int32, StringComparison)
  nameWithType: MessageExtensions.HasStringPrefix(String, Int32, StringComparison)
  fullName: Discord.Commands.MessageExtensions.HasStringPrefix(System.String, System.Int32, StringComparison)
  spec.csharp:
  - uid: Discord.Commands.MessageExtensions.HasStringPrefix(System.String,System.Int32@,StringComparison)
    name: HasStringPrefix
    nameWithType: MessageExtensions.HasStringPrefix
    fullName: Discord.Commands.MessageExtensions.HasStringPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: StringComparison
    name: StringComparison
    nameWithType: StringComparison
    fullName: StringComparison
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.MessageExtensions.HasStringPrefix(System.String,System.Int32@,StringComparison)
    name: HasStringPrefix
    nameWithType: MessageExtensions.HasStringPrefix
    fullName: Discord.Commands.MessageExtensions.HasStringPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: StringComparison
    name: StringComparison
    nameWithType: StringComparison
    fullName: StringComparison
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IUserMessage.Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUser,System.Int32@)
  commentId: M:Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUserMessage,Discord.IUser,System.Int32@)
  parent: Discord.Commands.MessageExtensions
  definition: Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUserMessage,Discord.IUser,System.Int32@)
  name: HasMentionPrefix(IUser, Int32)
  nameWithType: MessageExtensions.HasMentionPrefix(IUser, Int32)
  fullName: Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUser, System.Int32)
  spec.csharp:
  - uid: Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUser,System.Int32@)
    name: HasMentionPrefix
    nameWithType: MessageExtensions.HasMentionPrefix
    fullName: Discord.Commands.MessageExtensions.HasMentionPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUser,System.Int32@)
    name: HasMentionPrefix
    nameWithType: MessageExtensions.HasMentionPrefix
    fullName: Discord.Commands.MessageExtensions.HasMentionPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessage.Discord.MessageExtensions.GetJumpUrl
  commentId: M:Discord.MessageExtensions.GetJumpUrl(Discord.IMessage)
  parent: Discord.MessageExtensions
  definition: Discord.MessageExtensions.GetJumpUrl(Discord.IMessage)
  name: GetJumpUrl()
  nameWithType: MessageExtensions.GetJumpUrl()
  fullName: Discord.MessageExtensions.GetJumpUrl()
  spec.csharp:
  - uid: Discord.MessageExtensions.GetJumpUrl
    name: GetJumpUrl
    nameWithType: MessageExtensions.GetJumpUrl
    fullName: Discord.MessageExtensions.GetJumpUrl
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.MessageExtensions.GetJumpUrl
    name: GetJumpUrl
    nameWithType: MessageExtensions.GetJumpUrl
    fullName: Discord.MessageExtensions.GetJumpUrl
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IUserMessage.Discord.MessageExtensions.AddReactionsAsync(Discord.IEmote[],Discord.RequestOptions)
  commentId: M:Discord.MessageExtensions.AddReactionsAsync(Discord.IUserMessage,Discord.IEmote[],Discord.RequestOptions)
  parent: Discord.MessageExtensions
  definition: Discord.MessageExtensions.AddReactionsAsync(Discord.IUserMessage,Discord.IEmote[],Discord.RequestOptions)
  name: AddReactionsAsync(IEmote[], RequestOptions)
  nameWithType: MessageExtensions.AddReactionsAsync(IEmote[], RequestOptions)
  fullName: Discord.MessageExtensions.AddReactionsAsync(Discord.IEmote[], Discord.RequestOptions)
  nameWithType.vb: MessageExtensions.AddReactionsAsync(IEmote(), RequestOptions)
  fullName.vb: Discord.MessageExtensions.AddReactionsAsync(Discord.IEmote(), Discord.RequestOptions)
  name.vb: AddReactionsAsync(IEmote(), RequestOptions)
  spec.csharp:
  - uid: Discord.MessageExtensions.AddReactionsAsync(Discord.IEmote[],Discord.RequestOptions)
    name: AddReactionsAsync
    nameWithType: MessageExtensions.AddReactionsAsync
    fullName: Discord.MessageExtensions.AddReactionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.MessageExtensions.AddReactionsAsync(Discord.IEmote[],Discord.RequestOptions)
    name: AddReactionsAsync
    nameWithType: MessageExtensions.AddReactionsAsync
    fullName: Discord.MessageExtensions.AddReactionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IUserMessage.Discord.MessageExtensions.RemoveReactionsAsync(Discord.IUser,Discord.IEmote[],Discord.RequestOptions)
  commentId: M:Discord.MessageExtensions.RemoveReactionsAsync(Discord.IUserMessage,Discord.IUser,Discord.IEmote[],Discord.RequestOptions)
  parent: Discord.MessageExtensions
  definition: Discord.MessageExtensions.RemoveReactionsAsync(Discord.IUserMessage,Discord.IUser,Discord.IEmote[],Discord.RequestOptions)
  name: RemoveReactionsAsync(IUser, IEmote[], RequestOptions)
  nameWithType: MessageExtensions.RemoveReactionsAsync(IUser, IEmote[], RequestOptions)
  fullName: Discord.MessageExtensions.RemoveReactionsAsync(Discord.IUser, Discord.IEmote[], Discord.RequestOptions)
  nameWithType.vb: MessageExtensions.RemoveReactionsAsync(IUser, IEmote(), RequestOptions)
  fullName.vb: Discord.MessageExtensions.RemoveReactionsAsync(Discord.IUser, Discord.IEmote(), Discord.RequestOptions)
  name.vb: RemoveReactionsAsync(IUser, IEmote(), RequestOptions)
  spec.csharp:
  - uid: Discord.MessageExtensions.RemoveReactionsAsync(Discord.IUser,Discord.IEmote[],Discord.RequestOptions)
    name: RemoveReactionsAsync
    nameWithType: MessageExtensions.RemoveReactionsAsync
    fullName: Discord.MessageExtensions.RemoveReactionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.MessageExtensions.RemoveReactionsAsync(Discord.IUser,Discord.IEmote[],Discord.RequestOptions)
    name: RemoveReactionsAsync
    nameWithType: MessageExtensions.RemoveReactionsAsync
    fullName: Discord.MessageExtensions.RemoveReactionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessage
  commentId: T:Discord.IMessage
  parent: Discord
  name: IMessage
  nameWithType: IMessage
  fullName: Discord.IMessage
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IEntity`1.Id
  commentId: P:Discord.IEntity`1.Id
  name: Id
  nameWithType: IEntity<TId>.Id
  fullName: Discord.IEntity<TId>.Id
  nameWithType.vb: IEntity(Of TId).Id
  fullName.vb: Discord.IEntity(Of TId).Id
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IDeletable
  commentId: T:Discord.IDeletable
  parent: Discord
  name: IDeletable
  nameWithType: IDeletable
  fullName: Discord.IDeletable
- uid: Discord.Commands.MessageExtensions.HasCharPrefix(Discord.IUserMessage,System.Char,System.Int32@)
  commentId: M:Discord.Commands.MessageExtensions.HasCharPrefix(Discord.IUserMessage,System.Char,System.Int32@)
  isExternal: true
  name: HasCharPrefix(IUserMessage, Char, Int32)
  nameWithType: MessageExtensions.HasCharPrefix(IUserMessage, Char, Int32)
  fullName: Discord.Commands.MessageExtensions.HasCharPrefix(Discord.IUserMessage, System.Char, System.Int32)
  spec.csharp:
  - uid: Discord.Commands.MessageExtensions.HasCharPrefix(Discord.IUserMessage,System.Char,System.Int32@)
    name: HasCharPrefix
    nameWithType: MessageExtensions.HasCharPrefix
    fullName: Discord.Commands.MessageExtensions.HasCharPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.MessageExtensions.HasCharPrefix(Discord.IUserMessage,System.Char,System.Int32@)
    name: HasCharPrefix
    nameWithType: MessageExtensions.HasCharPrefix
    fullName: Discord.Commands.MessageExtensions.HasCharPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.MessageExtensions
  commentId: T:Discord.Commands.MessageExtensions
  parent: Discord.Commands
  name: MessageExtensions
  nameWithType: MessageExtensions
  fullName: Discord.Commands.MessageExtensions
- uid: Discord.Commands.MessageExtensions.HasStringPrefix(Discord.IUserMessage,System.String,System.Int32@,StringComparison)
  commentId: M:Discord.Commands.MessageExtensions.HasStringPrefix(Discord.IUserMessage,System.String,System.Int32@,StringComparison)
  isExternal: true
  name: HasStringPrefix(IUserMessage, String, Int32, StringComparison)
  nameWithType: MessageExtensions.HasStringPrefix(IUserMessage, String, Int32, StringComparison)
  fullName: Discord.Commands.MessageExtensions.HasStringPrefix(Discord.IUserMessage, System.String, System.Int32, StringComparison)
  spec.csharp:
  - uid: Discord.Commands.MessageExtensions.HasStringPrefix(Discord.IUserMessage,System.String,System.Int32@,StringComparison)
    name: HasStringPrefix
    nameWithType: MessageExtensions.HasStringPrefix
    fullName: Discord.Commands.MessageExtensions.HasStringPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: StringComparison
    name: StringComparison
    nameWithType: StringComparison
    fullName: StringComparison
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.MessageExtensions.HasStringPrefix(Discord.IUserMessage,System.String,System.Int32@,StringComparison)
    name: HasStringPrefix
    nameWithType: MessageExtensions.HasStringPrefix
    fullName: Discord.Commands.MessageExtensions.HasStringPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: StringComparison
    name: StringComparison
    nameWithType: StringComparison
    fullName: StringComparison
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUserMessage,Discord.IUser,System.Int32@)
  commentId: M:Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUserMessage,Discord.IUser,System.Int32@)
  isExternal: true
  name: HasMentionPrefix(IUserMessage, IUser, Int32)
  nameWithType: MessageExtensions.HasMentionPrefix(IUserMessage, IUser, Int32)
  fullName: Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUserMessage, Discord.IUser, System.Int32)
  spec.csharp:
  - uid: Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUserMessage,Discord.IUser,System.Int32@)
    name: HasMentionPrefix
    nameWithType: MessageExtensions.HasMentionPrefix
    fullName: Discord.Commands.MessageExtensions.HasMentionPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUserMessage,Discord.IUser,System.Int32@)
    name: HasMentionPrefix
    nameWithType: MessageExtensions.HasMentionPrefix
    fullName: Discord.Commands.MessageExtensions.HasMentionPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.MessageExtensions.GetJumpUrl(Discord.IMessage)
  commentId: M:Discord.MessageExtensions.GetJumpUrl(Discord.IMessage)
  name: GetJumpUrl(IMessage)
  nameWithType: MessageExtensions.GetJumpUrl(IMessage)
  fullName: Discord.MessageExtensions.GetJumpUrl(Discord.IMessage)
  spec.csharp:
  - uid: Discord.MessageExtensions.GetJumpUrl(Discord.IMessage)
    name: GetJumpUrl
    nameWithType: MessageExtensions.GetJumpUrl
    fullName: Discord.MessageExtensions.GetJumpUrl
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.MessageExtensions.GetJumpUrl(Discord.IMessage)
    name: GetJumpUrl
    nameWithType: MessageExtensions.GetJumpUrl
    fullName: Discord.MessageExtensions.GetJumpUrl
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.MessageExtensions
  commentId: T:Discord.MessageExtensions
  parent: Discord
  name: MessageExtensions
  nameWithType: MessageExtensions
  fullName: Discord.MessageExtensions
- uid: Discord.MessageExtensions.AddReactionsAsync(Discord.IUserMessage,Discord.IEmote[],Discord.RequestOptions)
  commentId: M:Discord.MessageExtensions.AddReactionsAsync(Discord.IUserMessage,Discord.IEmote[],Discord.RequestOptions)
  name: AddReactionsAsync(IUserMessage, IEmote[], RequestOptions)
  nameWithType: MessageExtensions.AddReactionsAsync(IUserMessage, IEmote[], RequestOptions)
  fullName: Discord.MessageExtensions.AddReactionsAsync(Discord.IUserMessage, Discord.IEmote[], Discord.RequestOptions)
  nameWithType.vb: MessageExtensions.AddReactionsAsync(IUserMessage, IEmote(), RequestOptions)
  fullName.vb: Discord.MessageExtensions.AddReactionsAsync(Discord.IUserMessage, Discord.IEmote(), Discord.RequestOptions)
  name.vb: AddReactionsAsync(IUserMessage, IEmote(), RequestOptions)
  spec.csharp:
  - uid: Discord.MessageExtensions.AddReactionsAsync(Discord.IUserMessage,Discord.IEmote[],Discord.RequestOptions)
    name: AddReactionsAsync
    nameWithType: MessageExtensions.AddReactionsAsync
    fullName: Discord.MessageExtensions.AddReactionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.MessageExtensions.AddReactionsAsync(Discord.IUserMessage,Discord.IEmote[],Discord.RequestOptions)
    name: AddReactionsAsync
    nameWithType: MessageExtensions.AddReactionsAsync
    fullName: Discord.MessageExtensions.AddReactionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.MessageExtensions.RemoveReactionsAsync(Discord.IUserMessage,Discord.IUser,Discord.IEmote[],Discord.RequestOptions)
  commentId: M:Discord.MessageExtensions.RemoveReactionsAsync(Discord.IUserMessage,Discord.IUser,Discord.IEmote[],Discord.RequestOptions)
  name: RemoveReactionsAsync(IUserMessage, IUser, IEmote[], RequestOptions)
  nameWithType: MessageExtensions.RemoveReactionsAsync(IUserMessage, IUser, IEmote[], RequestOptions)
  fullName: Discord.MessageExtensions.RemoveReactionsAsync(Discord.IUserMessage, Discord.IUser, Discord.IEmote[], Discord.RequestOptions)
  nameWithType.vb: MessageExtensions.RemoveReactionsAsync(IUserMessage, IUser, IEmote(), RequestOptions)
  fullName.vb: Discord.MessageExtensions.RemoveReactionsAsync(Discord.IUserMessage, Discord.IUser, Discord.IEmote(), Discord.RequestOptions)
  name.vb: RemoveReactionsAsync(IUserMessage, IUser, IEmote(), RequestOptions)
  spec.csharp:
  - uid: Discord.MessageExtensions.RemoveReactionsAsync(Discord.IUserMessage,Discord.IUser,Discord.IEmote[],Discord.RequestOptions)
    name: RemoveReactionsAsync
    nameWithType: MessageExtensions.RemoveReactionsAsync
    fullName: Discord.MessageExtensions.RemoveReactionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.MessageExtensions.RemoveReactionsAsync(Discord.IUserMessage,Discord.IUser,Discord.IEmote[],Discord.RequestOptions)
    name: RemoveReactionsAsync
    nameWithType: MessageExtensions.RemoveReactionsAsync
    fullName: Discord.MessageExtensions.RemoveReactionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands
  commentId: N:Discord.Commands
  name: Discord.Commands
  nameWithType: Discord.Commands
  fullName: Discord.Commands
- uid: Discord.MessageProperties
  commentId: T:Discord.MessageProperties
  name: MessageProperties
  nameWithType: MessageProperties
  fullName: Discord.MessageProperties
- uid: Discord.IUserMessage.ModifyAsync*
  commentId: Overload:Discord.IUserMessage.ModifyAsync
  name: ModifyAsync
  nameWithType: IUserMessage.ModifyAsync
  fullName: Discord.IUserMessage.ModifyAsync
- uid: Action{Discord.MessageProperties}
  commentId: '!:Action{Discord.MessageProperties}'
  definition: Action`1
  name: Action<MessageProperties>
  nameWithType: Action<MessageProperties>
  fullName: Action<Discord.MessageProperties>
  nameWithType.vb: Action(Of MessageProperties)
  fullName.vb: Action(Of Discord.MessageProperties)
  name.vb: Action(Of MessageProperties)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.MessageProperties
    name: MessageProperties
    nameWithType: MessageProperties
    fullName: Discord.MessageProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.MessageProperties
    name: MessageProperties
    nameWithType: MessageProperties
    fullName: Discord.MessageProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IUserMessage.ModifySuppressionAsync*
  commentId: Overload:Discord.IUserMessage.ModifySuppressionAsync
  name: ModifySuppressionAsync
  nameWithType: IUserMessage.ModifySuppressionAsync
  fullName: Discord.IUserMessage.ModifySuppressionAsync
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.IUserMessage.PinAsync*
  commentId: Overload:Discord.IUserMessage.PinAsync
  name: PinAsync
  nameWithType: IUserMessage.PinAsync
  fullName: Discord.IUserMessage.PinAsync
- uid: Discord.IUserMessage.UnpinAsync*
  commentId: Overload:Discord.IUserMessage.UnpinAsync
  name: UnpinAsync
  nameWithType: IUserMessage.UnpinAsync
  fullName: Discord.IUserMessage.UnpinAsync
- uid: Discord.IUserMessage.Reactions*
  commentId: Overload:Discord.IUserMessage.Reactions
  name: Reactions
  nameWithType: IUserMessage.Reactions
  fullName: Discord.IUserMessage.Reactions
- uid: IReadOnlyDictionary{Discord.IEmote,Discord.ReactionMetadata}
  commentId: '!:IReadOnlyDictionary{Discord.IEmote,Discord.ReactionMetadata}'
  definition: IReadOnlyDictionary`2
  name: IReadOnlyDictionary<IEmote, ReactionMetadata>
  nameWithType: IReadOnlyDictionary<IEmote, ReactionMetadata>
  fullName: IReadOnlyDictionary<Discord.IEmote, Discord.ReactionMetadata>
  nameWithType.vb: IReadOnlyDictionary(Of IEmote, ReactionMetadata)
  fullName.vb: IReadOnlyDictionary(Of Discord.IEmote, Discord.ReactionMetadata)
  name.vb: IReadOnlyDictionary(Of IEmote, ReactionMetadata)
  spec.csharp:
  - uid: IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.ReactionMetadata
    name: ReactionMetadata
    nameWithType: ReactionMetadata
    fullName: Discord.ReactionMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.ReactionMetadata
    name: ReactionMetadata
    nameWithType: ReactionMetadata
    fullName: Discord.ReactionMetadata
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyDictionary`2
  isExternal: true
  name: IReadOnlyDictionary<, >
  nameWithType: IReadOnlyDictionary<, >
  fullName: IReadOnlyDictionary<, >
  nameWithType.vb: IReadOnlyDictionary(Of , )
  fullName.vb: IReadOnlyDictionary(Of , )
  name.vb: IReadOnlyDictionary(Of , )
  spec.csharp:
  - uid: IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IEmote
  commentId: T:Discord.IEmote
  parent: Discord
  name: IEmote
  nameWithType: IEmote
  fullName: Discord.IEmote
- uid: Discord.IUserMessage.AddReactionAsync*
  commentId: Overload:Discord.IUserMessage.AddReactionAsync
  name: AddReactionAsync
  nameWithType: IUserMessage.AddReactionAsync
  fullName: Discord.IUserMessage.AddReactionAsync
- uid: Discord.IUserMessage.RemoveReactionAsync*
  commentId: Overload:Discord.IUserMessage.RemoveReactionAsync
  name: RemoveReactionAsync
  nameWithType: IUserMessage.RemoveReactionAsync
  fullName: Discord.IUserMessage.RemoveReactionAsync
- uid: Discord.IUser
  commentId: T:Discord.IUser
  parent: Discord
  name: IUser
  nameWithType: IUser
  fullName: Discord.IUser
- uid: System.UInt64
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Discord.IUserMessage.RemoveAllReactionsAsync*
  commentId: Overload:Discord.IUserMessage.RemoveAllReactionsAsync
  name: RemoveAllReactionsAsync
  nameWithType: IUserMessage.RemoveAllReactionsAsync
  fullName: Discord.IUserMessage.RemoveAllReactionsAsync
- uid: Discord.AsyncEnumerableExtensions.FlattenAsync``1(IAsyncEnumerable{IEnumerable{``0}})
  commentId: M:Discord.AsyncEnumerableExtensions.FlattenAsync``1(IAsyncEnumerable{IEnumerable{``0}})
  isExternal: true
- uid: Discord.IUserMessage.GetReactionUsersAsync*
  commentId: Overload:Discord.IUserMessage.GetReactionUsersAsync
  name: GetReactionUsersAsync
  nameWithType: IUserMessage.GetReactionUsersAsync
  fullName: Discord.IUserMessage.GetReactionUsersAsync
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: IAsyncEnumerable{IReadOnlyCollection{Discord.IUser}}
  commentId: '!:IAsyncEnumerable{IReadOnlyCollection{Discord.IUser}}'
  definition: IAsyncEnumerable`1
  name: IAsyncEnumerable<IReadOnlyCollection<IUser>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<IUser>>
  fullName: IAsyncEnumerable<IReadOnlyCollection<Discord.IUser>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IUser))
  fullName.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of Discord.IUser))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IUser))
  spec.csharp:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IAsyncEnumerable`1
  isExternal: true
  name: IAsyncEnumerable<>
  nameWithType: IAsyncEnumerable<>
  fullName: IAsyncEnumerable<>
  nameWithType.vb: IAsyncEnumerable(Of )
  fullName.vb: IAsyncEnumerable(Of )
  name.vb: IAsyncEnumerable(Of )
  spec.csharp:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IUserMessage.Resolve*
  commentId: Overload:Discord.IUserMessage.Resolve
  name: Resolve
  nameWithType: IUserMessage.Resolve
  fullName: Discord.IUserMessage.Resolve
- uid: Discord.TagHandling
  commentId: T:Discord.TagHandling
  parent: Discord
  name: TagHandling
  nameWithType: TagHandling
  fullName: Discord.TagHandling
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
