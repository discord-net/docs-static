### YamlMime:ManagedReference
items:
- uid: Discord.Rest.RestGuildChannel
  commentId: T:Discord.Rest.RestGuildChannel
  id: RestGuildChannel
  parent: Discord.Rest
  children:
  - Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.DeleteAsync(Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IRole)
  - Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IUser)
  - Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.Discord#IGuildChannel#Guild
  - Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IRole)
  - Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IUser)
  - Discord.Rest.RestGuildChannel.GuildId
  - Discord.Rest.RestGuildChannel.ModifyAsync(System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.Name
  - Discord.Rest.RestGuildChannel.PermissionOverwrites
  - Discord.Rest.RestGuildChannel.Position
  - Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.ToString
  - Discord.Rest.RestGuildChannel.UpdateAsync(Discord.RequestOptions)
  langs:
  - csharp
  - vb
  name: RestGuildChannel
  nameWithType: RestGuildChannel
  fullName: Discord.Rest.RestGuildChannel
  type: Class
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RestGuildChannel
    path: ../src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
    startLine: 12
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nRepresents a private REST-based group channel.\n"
  example: []
  syntax:
    content: 'public class RestGuildChannel : RestChannel, IUpdateable, IGuildChannel, IChannel, ISnowflakeEntity, IEntity<ulong>, IDeletable'
    content.vb: >-
      Public Class RestGuildChannel
          Inherits RestChannel
          Implements IUpdateable, IGuildChannel, IChannel, ISnowflakeEntity, IEntity(Of ULong), IDeletable
  inheritance:
  - System.Object
  - Discord.Rest.RestEntity{System.UInt64}
  - Discord.Rest.RestChannel
  derivedClasses:
  - Discord.Rest.RestCategoryChannel
  - Discord.Rest.RestTextChannel
  - Discord.Rest.RestVoiceChannel
  implements:
  - Discord.IUpdateable
  - Discord.IGuildChannel
  - Discord.IChannel
  - Discord.ISnowflakeEntity
  - Discord.IEntity{System.UInt64}
  - Discord.IDeletable
  inheritedMembers:
  - Discord.Rest.RestChannel.CreatedAt
  - Discord.Rest.RestChannel.Discord#IChannel#Name
  - Discord.Rest.RestEntity{System.UInt64}.Id
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.Rest.RestGuildChannel.PermissionOverwrites
  commentId: P:Discord.Rest.RestGuildChannel.PermissionOverwrites
  id: PermissionOverwrites
  parent: Discord.Rest.RestGuildChannel
  langs:
  - csharp
  - vb
  name: PermissionOverwrites
  nameWithType: RestGuildChannel.PermissionOverwrites
  fullName: Discord.Rest.RestGuildChannel.PermissionOverwrites
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: PermissionOverwrites
    path: ../src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
    startLine: 17
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of permission overwrites for this channel.\n"
  example: []
  syntax:
    content: public virtual IReadOnlyCollection<Overwrite> PermissionOverwrites { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.Overwrite}
      description: "\nA collection of overwrites associated with this channel.\n"
    content.vb: Public Overridable ReadOnly Property PermissionOverwrites As IReadOnlyCollection(Of Overwrite)
  overload: Discord.Rest.RestGuildChannel.PermissionOverwrites*
  implements:
  - Discord.IGuildChannel.PermissionOverwrites
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.Rest.RestGuildChannel.Name
  commentId: P:Discord.Rest.RestGuildChannel.Name
  id: Name
  parent: Discord.Rest.RestGuildChannel
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: RestGuildChannel.Name
  fullName: Discord.Rest.RestGuildChannel.Name
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Name
    path: ../src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
    startLine: 21
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the name of this channel.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA string containing the name of this channel.\n"
    content.vb: Public ReadOnly Property Name As String
  overload: Discord.Rest.RestGuildChannel.Name*
  implements:
  - Discord.IChannel.Name
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuildChannel.Position
  commentId: P:Discord.Rest.RestGuildChannel.Position
  id: Position
  parent: Discord.Rest.RestGuildChannel
  langs:
  - csharp
  - vb
  name: Position
  nameWithType: RestGuildChannel.Position
  fullName: Discord.Rest.RestGuildChannel.Position
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Position
    path: ../src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
    startLine: 23
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the position of this channel.\n"
  example: []
  syntax:
    content: public int Position { get; }
    parameters: []
    return:
      type: System.Int32
      description: "\nAn <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> representing the position of this channel in the guild&apos;s channel list relative to\nothers of the same type.\n"
    content.vb: Public ReadOnly Property Position As Integer
  overload: Discord.Rest.RestGuildChannel.Position*
  implements:
  - Discord.IGuildChannel.Position
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuildChannel.GuildId
  commentId: P:Discord.Rest.RestGuildChannel.GuildId
  id: GuildId
  parent: Discord.Rest.RestGuildChannel
  langs:
  - csharp
  - vb
  name: GuildId
  nameWithType: RestGuildChannel.GuildId
  fullName: Discord.Rest.RestGuildChannel.GuildId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GuildId
    path: ../src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
    startLine: 25
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the guild ID associated with this channel.\n"
  example: []
  syntax:
    content: public ulong GuildId { get; }
    parameters: []
    return:
      type: System.UInt64
      description: "\nAn <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> representing the guild snowflake identifier for the guild that this channel\nbelongs to.\n"
    content.vb: Public ReadOnly Property GuildId As ULong
  overload: Discord.Rest.RestGuildChannel.GuildId*
  implements:
  - Discord.IGuildChannel.GuildId
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuildChannel.UpdateAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.UpdateAsync(Discord.RequestOptions)
  id: UpdateAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  langs:
  - csharp
  - vb
  name: UpdateAsync(RequestOptions)
  nameWithType: RestGuildChannel.UpdateAsync(RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.UpdateAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: UpdateAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
    startLine: 61
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nUpdates this object&apos;s properties with its current state.\n"
  example: []
  syntax:
    content: public override Task UpdateAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overrides Function UpdateAsync(options As RequestOptions = Nothing) As Task
  overridden: Discord.Rest.RestChannel.UpdateAsync(Discord.RequestOptions)
  overload: Discord.Rest.RestGuildChannel.UpdateAsync*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.Rest.RestGuildChannel.ModifyAsync(System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.ModifyAsync(System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  id: ModifyAsync(System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  langs:
  - csharp
  - vb
  name: ModifyAsync(Action<GuildChannelProperties>, RequestOptions)
  nameWithType: RestGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.ModifyAsync(System.Action<Discord.GuildChannelProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ModifyAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
    startLine: 67
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nModifies this guild channel.\n"
  remarks: "\nThis method modifies the current guild channel with the specified properties. To see an example of this\nmethod and what properties are available, please refer to <xref href=\"Discord.GuildChannelProperties\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Task ModifyAsync(Action<GuildChannelProperties> func, RequestOptions options = null)
    parameters:
    - id: func
      type: System.Action{Discord.GuildChannelProperties}
      description: The delegate containing the properties to modify the channel with.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous modification operation.\n"
    content.vb: Public Function ModifyAsync(func As Action(Of GuildChannelProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestGuildChannel.ModifyAsync*
  implements:
  - Discord.IGuildChannel.ModifyAsync(System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  nameWithType.vb: RestGuildChannel.ModifyAsync(Action(Of GuildChannelProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestGuildChannel.ModifyAsync(System.Action(Of Discord.GuildChannelProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of GuildChannelProperties), RequestOptions)
- uid: Discord.Rest.RestGuildChannel.DeleteAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.DeleteAsync(Discord.RequestOptions)
  id: DeleteAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  langs:
  - csharp
  - vb
  name: DeleteAsync(RequestOptions)
  nameWithType: RestGuildChannel.DeleteAsync(RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.DeleteAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
    startLine: 73
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nDeletes this object and all its children.\n"
  example: []
  syntax:
    content: public Task DeleteAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function DeleteAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestGuildChannel.DeleteAsync*
  implements:
  - Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IUser)
  commentId: M:Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IUser)
  id: GetPermissionOverwrite(Discord.IUser)
  parent: Discord.Rest.RestGuildChannel
  langs:
  - csharp
  - vb
  name: GetPermissionOverwrite(IUser)
  nameWithType: RestGuildChannel.GetPermissionOverwrite(IUser)
  fullName: Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IUser)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetPermissionOverwrite
    path: ../src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
    startLine: 83
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the permission overwrite for a specific user.\n"
  example: []
  syntax:
    content: public virtual OverwritePermissions? GetPermissionOverwrite(IUser user)
    parameters:
    - id: user
      type: Discord.IUser
      description: The user to get the overwrite from.
    return:
      type: System.Nullable{Discord.OverwritePermissions}
      description: "\nAn overwrite object for the targeted user; <code>null</code> if none is set.\n"
    content.vb: Public Overridable Function GetPermissionOverwrite(user As IUser) As OverwritePermissions?
  overload: Discord.Rest.RestGuildChannel.GetPermissionOverwrite*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IRole)
  commentId: M:Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IRole)
  id: GetPermissionOverwrite(Discord.IRole)
  parent: Discord.Rest.RestGuildChannel
  langs:
  - csharp
  - vb
  name: GetPermissionOverwrite(IRole)
  nameWithType: RestGuildChannel.GetPermissionOverwrite(IRole)
  fullName: Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IRole)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetPermissionOverwrite
    path: ../src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
    startLine: 100
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the permission overwrite for a specific role.\n"
  example: []
  syntax:
    content: public virtual OverwritePermissions? GetPermissionOverwrite(IRole role)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to get the overwrite from.
    return:
      type: System.Nullable{Discord.OverwritePermissions}
      description: "\nAn overwrite object for the targeted role; <code>null</code> if none is set.\n"
    content.vb: Public Overridable Function GetPermissionOverwrite(role As IRole) As OverwritePermissions?
  overload: Discord.Rest.RestGuildChannel.GetPermissionOverwrite*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  id: AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  langs:
  - csharp
  - vb
  name: AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  nameWithType: RestGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IUser, Discord.OverwritePermissions, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: AddPermissionOverwriteAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
    startLine: 119
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nAdds or updates the permission overwrite for the given user.\n"
  example: []
  syntax:
    content: public virtual Task AddPermissionOverwriteAsync(IUser user, OverwritePermissions permissions, RequestOptions options = null)
    parameters:
    - id: user
      type: Discord.IUser
      description: The user to add the overwrite to.
    - id: permissions
      type: Discord.OverwritePermissions
      description: The overwrite to add to the user.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task representing the asynchronous permission operation for adding the specified permissions to the channel.\n"
    content.vb: Public Overridable Function AddPermissionOverwriteAsync(user As IUser, permissions As OverwritePermissions, options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  id: AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  langs:
  - csharp
  - vb
  name: AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  nameWithType: RestGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IRole, Discord.OverwritePermissions, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: AddPermissionOverwriteAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
    startLine: 133
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nAdds or updates the permission overwrite for the given role.\n"
  example: []
  syntax:
    content: public virtual Task AddPermissionOverwriteAsync(IRole role, OverwritePermissions permissions, RequestOptions options = null)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to add the overwrite to.
    - id: permissions
      type: Discord.OverwritePermissions
      description: The overwrite to add to the role.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task representing the asynchronous permission operation for adding the specified permissions to the channel.\n"
    content.vb: Public Overridable Function AddPermissionOverwriteAsync(role As IRole, permissions As OverwritePermissions, options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  id: RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  langs:
  - csharp
  - vb
  name: RemovePermissionOverwriteAsync(IUser, RequestOptions)
  nameWithType: RestGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RemovePermissionOverwriteAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
    startLine: 147
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nRemoves the permission overwrite for the given user, if one exists.\n"
  example: []
  syntax:
    content: public virtual Task RemovePermissionOverwriteAsync(IUser user, RequestOptions options = null)
    parameters:
    - id: user
      type: Discord.IUser
      description: The user to remove the overwrite from.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task representing the asynchronous operation for removing the specified permissions from the channel.\n"
    content.vb: Public Overridable Function RemovePermissionOverwriteAsync(user As IUser, options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  id: RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  langs:
  - csharp
  - vb
  name: RemovePermissionOverwriteAsync(IRole, RequestOptions)
  nameWithType: RestGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RemovePermissionOverwriteAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
    startLine: 168
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nRemoves the permission overwrite for the given role, if one exists.\n"
  example: []
  syntax:
    content: public virtual Task RemovePermissionOverwriteAsync(IRole role, RequestOptions options = null)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to remove the overwrite from.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task representing the asynchronous operation for removing the specified permissions from the channel.\n"
    content.vb: Public Overridable Function RemovePermissionOverwriteAsync(role As IRole, options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Discord.Rest.RestGuildChannel.ToString
  commentId: M:Discord.Rest.RestGuildChannel.ToString
  id: ToString
  parent: Discord.Rest.RestGuildChannel
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: RestGuildChannel.ToString()
  fullName: Discord.Rest.RestGuildChannel.ToString()
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ToString
    path: ../src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
    startLine: 188
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the name of this channel.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nA string that is the name of this channel.\n"
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Discord.Rest.RestGuildChannel.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#Guild
  commentId: P:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#Guild
  id: Discord#IGuildChannel#Guild
  isEii: true
  parent: Discord.Rest.RestGuildChannel
  langs:
  - csharp
  - vb
  name: IGuildChannel.Guild
  nameWithType: RestGuildChannel.IGuildChannel.Guild
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.Guild
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuildChannel.Guild
    path: ../src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
    startLine: 192
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the guild associated with this channel.\n"
  example: []
  syntax:
    content: IGuild IGuildChannel.Guild { get; }
    parameters: []
    return:
      type: Discord.IGuild
      description: "\nA guild object that this channel belongs to.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IGuildChannel.Guild As IGuild Implements IGuildChannel.Guild
  overload: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#Guild*
  implements:
  - Discord.IGuildChannel.Guild
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.Guild
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IGuildChannel.Guild
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IRole)
  commentId: M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IRole)
  id: Discord#IGuildChannel#GetPermissionOverwrite(Discord.IRole)
  isEii: true
  parent: Discord.Rest.RestGuildChannel
  langs:
  - csharp
  - vb
  name: IGuildChannel.GetPermissionOverwrite(IRole)
  nameWithType: RestGuildChannel.IGuildChannel.GetPermissionOverwrite(IRole)
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite(Discord.IRole)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuildChannel.GetPermissionOverwrite
    path: ../src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
    startLine: 203
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the permission overwrite for a specific role.\n"
  example: []
  syntax:
    content: OverwritePermissions? IGuildChannel.GetPermissionOverwrite(IRole role)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to get the overwrite from.
    return:
      type: System.Nullable{Discord.OverwritePermissions}
      description: "\nAn overwrite object for the targeted role; <code>null</code> if none is set.\n"
    content.vb: Function Discord.IGuildChannel.GetPermissionOverwrite(role As IRole) As OverwritePermissions? Implements IGuildChannel.GetPermissionOverwrite
  overload: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite*
  implements:
  - Discord.IGuildChannel.GetPermissionOverwrite(Discord.IRole)
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite(IRole)
  name.vb: Discord.IGuildChannel.GetPermissionOverwrite(IRole)
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IUser)
  commentId: M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IUser)
  id: Discord#IGuildChannel#GetPermissionOverwrite(Discord.IUser)
  isEii: true
  parent: Discord.Rest.RestGuildChannel
  langs:
  - csharp
  - vb
  name: IGuildChannel.GetPermissionOverwrite(IUser)
  nameWithType: RestGuildChannel.IGuildChannel.GetPermissionOverwrite(IUser)
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite(Discord.IUser)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuildChannel.GetPermissionOverwrite
    path: ../src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
    startLine: 206
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the permission overwrite for a specific user.\n"
  example: []
  syntax:
    content: OverwritePermissions? IGuildChannel.GetPermissionOverwrite(IUser user)
    parameters:
    - id: user
      type: Discord.IUser
      description: The user to get the overwrite from.
    return:
      type: System.Nullable{Discord.OverwritePermissions}
      description: "\nAn overwrite object for the targeted user; <code>null</code> if none is set.\n"
    content.vb: Function Discord.IGuildChannel.GetPermissionOverwrite(user As IUser) As OverwritePermissions? Implements IGuildChannel.GetPermissionOverwrite
  overload: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite*
  implements:
  - Discord.IGuildChannel.GetPermissionOverwrite(Discord.IUser)
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite(IUser)
  name.vb: Discord.IGuildChannel.GetPermissionOverwrite(IUser)
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  id: Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestGuildChannel
  langs:
  - csharp
  - vb
  name: IGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  nameWithType: RestGuildChannel.IGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync(Discord.IRole, Discord.OverwritePermissions, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuildChannel.AddPermissionOverwriteAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
    startLine: 209
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nAdds or updates the permission overwrite for the given role.\n"
  example: []
  syntax:
    content: Task IGuildChannel.AddPermissionOverwriteAsync(IRole role, OverwritePermissions permissions, RequestOptions options)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to add the overwrite to.
    - id: permissions
      type: Discord.OverwritePermissions
      description: The overwrite to add to the role.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task representing the asynchronous permission operation for adding the specified permissions to the\nchannel.\n"
    content.vb: Function Discord.IGuildChannel.AddPermissionOverwriteAsync(role As IRole, permissions As OverwritePermissions, options As RequestOptions) As Task Implements IGuildChannel.AddPermissionOverwriteAsync
  overload: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync*
  implements:
  - Discord.IGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  name.vb: Discord.IGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  id: Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestGuildChannel
  langs:
  - csharp
  - vb
  name: IGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  nameWithType: RestGuildChannel.IGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync(Discord.IUser, Discord.OverwritePermissions, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuildChannel.AddPermissionOverwriteAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
    startLine: 212
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nAdds or updates the permission overwrite for the given user.\n"
  example: []
  syntax:
    content: Task IGuildChannel.AddPermissionOverwriteAsync(IUser user, OverwritePermissions permissions, RequestOptions options)
    parameters:
    - id: user
      type: Discord.IUser
      description: The user to add the overwrite to.
    - id: permissions
      type: Discord.OverwritePermissions
      description: The overwrite to add to the user.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task representing the asynchronous permission operation for adding the specified permissions to the channel.\n"
    content.vb: Function Discord.IGuildChannel.AddPermissionOverwriteAsync(user As IUser, permissions As OverwritePermissions, options As RequestOptions) As Task Implements IGuildChannel.AddPermissionOverwriteAsync
  overload: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync*
  implements:
  - Discord.IGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  name.vb: Discord.IGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  id: Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestGuildChannel
  langs:
  - csharp
  - vb
  name: IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions)
  nameWithType: RestGuildChannel.IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuildChannel.RemovePermissionOverwriteAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
    startLine: 215
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nRemoves the permission overwrite for the given role, if one exists.\n"
  example: []
  syntax:
    content: Task IGuildChannel.RemovePermissionOverwriteAsync(IRole role, RequestOptions options)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to remove the overwrite from.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task representing the asynchronous operation for removing the specified permissions from the channel.\n"
    content.vb: Function Discord.IGuildChannel.RemovePermissionOverwriteAsync(role As IRole, options As RequestOptions) As Task Implements IGuildChannel.RemovePermissionOverwriteAsync
  overload: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync*
  implements:
  - Discord.IGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions)
  name.vb: Discord.IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions)
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  id: Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestGuildChannel
  langs:
  - csharp
  - vb
  name: IGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions)
  nameWithType: RestGuildChannel.IGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuildChannel.RemovePermissionOverwriteAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
    startLine: 218
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nRemoves the permission overwrite for the given user, if one exists.\n"
  example: []
  syntax:
    content: Task IGuildChannel.RemovePermissionOverwriteAsync(IUser user, RequestOptions options)
    parameters:
    - id: user
      type: Discord.IUser
      description: The user to remove the overwrite from.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task representing the asynchronous operation for removing the specified permissions from the channel.\n"
    content.vb: Function Discord.IGuildChannel.RemovePermissionOverwriteAsync(user As IUser, options As RequestOptions) As Task Implements IGuildChannel.RemovePermissionOverwriteAsync
  overload: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync*
  implements:
  - Discord.IGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions)
  name.vb: Discord.IGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions)
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IGuildChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestGuildChannel
  langs:
  - csharp
  - vb
  name: IGuildChannel.GetUsersAsync(CacheMode, RequestOptions)
  nameWithType: RestGuildChannel.IGuildChannel.GetUsersAsync(CacheMode, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuildChannel.GetUsersAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
    startLine: 222
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of users that are able to view the channel or are currently in this channel.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IChannel.GetUsersAsync(Discord.CacheMode%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> IGuildChannel.GetUsersAsync(CacheMode mode, RequestOptions options)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IGuildUser}}
      description: "\nPaged collection of users.\n"
    content.vb: Function Discord.IGuildChannel.GetUsersAsync(mode As CacheMode, options As RequestOptions) As IAsyncEnumerable(Of IReadOnlyCollection(Of IGuildUser)) Implements IGuildChannel.GetUsersAsync
  overload: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetUsersAsync*
  implements:
  - Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.GetUsersAsync(CacheMode, RequestOptions)
  name.vb: Discord.IGuildChannel.GetUsersAsync(CacheMode, RequestOptions)
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IGuildChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestGuildChannel
  langs:
  - csharp
  - vb
  name: IGuildChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: RestGuildChannel.IGuildChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.GetUserAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuildChannel.GetUserAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
    startLine: 225
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a user in this channel.\n"
  example: []
  syntax:
    content: Task<IGuildUser> IGuildChannel.GetUserAsync(ulong id, CacheMode mode, RequestOptions options)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the user.
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IGuildUser}
      description: "\nA task representing the asynchronous get operation. The task result contains a guild user object that\nrepresents the user; <code>null</code> if none is found.\n"
    content.vb: Function Discord.IGuildChannel.GetUserAsync(id As ULong, mode As CacheMode, options As RequestOptions) As Task(Of IGuildUser) Implements IGuildChannel.GetUserAsync
  overload: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetUserAsync*
  implements:
  - Discord.IGuildChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  name.vb: Discord.IGuildChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
- uid: Discord.Rest.RestGuildChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestGuildChannel
  langs:
  - csharp
  - vb
  name: IChannel.GetUsersAsync(CacheMode, RequestOptions)
  nameWithType: RestGuildChannel.IChannel.GetUsersAsync(CacheMode, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.Discord.IChannel.GetUsersAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IChannel.GetUsersAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
    startLine: 230
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of users that are able to view the channel or are currently in this channel.\n"
  remarks: "\n<div class=\"IMPORTANT\"><h5>important</h5><p>\n    The returned collection is an asynchronous enumerable object; one must call \n<xref href=\"Discord.AsyncEnumerableExtensions.FlattenAsync%60%601(System.Collections.Generic.IAsyncEnumerable%7bSystem.Collections.Generic.IEnumerable%7b%60%600%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref> to access the individual messages as a\ncollection.\n</p></div>\nThis method will attempt to fetch all users that is able to view this channel or is currently in this channel.\nThe library will attempt to split up the requests according to and <xref href=\"Discord.DiscordConfig.MaxUsersPerBatch\" data-throw-if-not-resolved=\"false\"></xref>.\nIn other words, if there are 3000 users, and the <xref href=\"Discord.DiscordConfig.MaxUsersPerBatch\" data-throw-if-not-resolved=\"false\"></xref> constant\nis <code>1000</code>, the request will be split into 3 individual requests; thus returning 53individual asynchronous\nresponses, hence the need of flattening.\n"
  example: []
  syntax:
    content: IAsyncEnumerable<IReadOnlyCollection<IUser>> IChannel.GetUsersAsync(CacheMode mode, RequestOptions options)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IUser}}
      description: "\nPaged collection of users.\n"
    content.vb: Function Discord.IChannel.GetUsersAsync(mode As CacheMode, options As RequestOptions) As IAsyncEnumerable(Of IReadOnlyCollection(Of IUser)) Implements IChannel.GetUsersAsync
  overload: Discord.Rest.RestGuildChannel.Discord#IChannel#GetUsersAsync*
  implements:
  - Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: RestGuildChannel.Discord.IChannel.GetUsersAsync(CacheMode, RequestOptions)
  name.vb: Discord.IChannel.GetUsersAsync(CacheMode, RequestOptions)
- uid: Discord.Rest.RestGuildChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestGuildChannel
  langs:
  - csharp
  - vb
  name: IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: RestGuildChannel.IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.Discord.IChannel.GetUserAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IChannel.GetUserAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestGuildChannel.cs
    startLine: 233
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a user in this channel.\n"
  example: []
  syntax:
    content: Task<IUser> IChannel.GetUserAsync(ulong id, CacheMode mode, RequestOptions options)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the user (e.g. <code>168693960628371456</code>).
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IUser}
      description: "\nA task that represents the asynchronous get operation. The task result contains a user object that\nrepresents the found user; <code>null</code> if none is found.\n"
    content.vb: Function Discord.IChannel.GetUserAsync(id As ULong, mode As CacheMode, options As RequestOptions) As Task(Of IUser) Implements IChannel.GetUserAsync
  overload: Discord.Rest.RestGuildChannel.Discord#IChannel#GetUserAsync*
  implements:
  - Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: RestGuildChannel.Discord.IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  name.vb: Discord.IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
references:
- uid: Discord.Rest
  commentId: N:Discord.Rest
  name: Discord.Rest
  nameWithType: Discord.Rest
  fullName: Discord.Rest
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Rest.RestEntity{System.UInt64}
  commentId: T:Discord.Rest.RestEntity{System.UInt64}
  parent: Discord.Rest
  definition: Discord.Rest.RestEntity`1
  name: RestEntity<UInt64>
  nameWithType: RestEntity<UInt64>
  fullName: Discord.Rest.RestEntity<System.UInt64>
  nameWithType.vb: RestEntity(Of UInt64)
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64)
  name.vb: RestEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestChannel
  commentId: T:Discord.Rest.RestChannel
  parent: Discord.Rest
  name: RestChannel
  nameWithType: RestChannel
  fullName: Discord.Rest.RestChannel
- uid: Discord.IUpdateable
  commentId: T:Discord.IUpdateable
  parent: Discord
  name: IUpdateable
  nameWithType: IUpdateable
  fullName: Discord.IUpdateable
- uid: Discord.IGuildChannel
  commentId: T:Discord.IGuildChannel
  parent: Discord
  name: IGuildChannel
  nameWithType: IGuildChannel
  fullName: Discord.IGuildChannel
- uid: Discord.IChannel
  commentId: T:Discord.IChannel
  parent: Discord
  name: IChannel
  nameWithType: IChannel
  fullName: Discord.IChannel
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IDeletable
  commentId: T:Discord.IDeletable
  parent: Discord
  name: IDeletable
  nameWithType: IDeletable
  fullName: Discord.IDeletable
- uid: Discord.Rest.RestChannel.CreatedAt
  commentId: P:Discord.Rest.RestChannel.CreatedAt
  parent: Discord.Rest.RestChannel
  name: CreatedAt
  nameWithType: RestChannel.CreatedAt
  fullName: Discord.Rest.RestChannel.CreatedAt
- uid: Discord.Rest.RestChannel.Discord#IChannel#Name
  commentId: P:Discord.Rest.RestChannel.Discord#IChannel#Name
  parent: Discord.Rest.RestChannel
  name: IChannel.Name
  nameWithType: RestChannel.IChannel.Name
  fullName: Discord.Rest.RestChannel.Discord.IChannel.Name
  nameWithType.vb: RestChannel.Discord.IChannel.Name
  name.vb: Discord.IChannel.Name
- uid: Discord.Rest.RestEntity{System.UInt64}.Id
  commentId: P:Discord.Rest.RestEntity{System.UInt64}.Id
  parent: Discord.Rest.RestEntity{System.UInt64}
  definition: Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<UInt64>.Id
  fullName: Discord.Rest.RestEntity<System.UInt64>.Id
  nameWithType.vb: RestEntity(Of UInt64).Id
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64).Id
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Rest.RestEntity`1
  commentId: T:Discord.Rest.RestEntity`1
  name: RestEntity<T>
  nameWithType: RestEntity<T>
  fullName: Discord.Rest.RestEntity<T>
  nameWithType.vb: RestEntity(Of T)
  fullName.vb: Discord.Rest.RestEntity(Of T)
  name.vb: RestEntity(Of T)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestEntity`1.Id
  commentId: P:Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<T>.Id
  fullName: Discord.Rest.RestEntity<T>.Id
  nameWithType.vb: RestEntity(Of T).Id
  fullName.vb: Discord.Rest.RestEntity(Of T).Id
- uid: Discord.Rest.RestGuildChannel.PermissionOverwrites*
  commentId: Overload:Discord.Rest.RestGuildChannel.PermissionOverwrites
  name: PermissionOverwrites
  nameWithType: RestGuildChannel.PermissionOverwrites
  fullName: Discord.Rest.RestGuildChannel.PermissionOverwrites
- uid: Discord.IGuildChannel.PermissionOverwrites
  commentId: P:Discord.IGuildChannel.PermissionOverwrites
  parent: Discord.IGuildChannel
  name: PermissionOverwrites
  nameWithType: IGuildChannel.PermissionOverwrites
  fullName: Discord.IGuildChannel.PermissionOverwrites
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.Overwrite}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.Overwrite}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<Overwrite>
  nameWithType: IReadOnlyCollection<Overwrite>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.Overwrite>
  nameWithType.vb: IReadOnlyCollection(Of Overwrite)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.Overwrite)
  name.vb: IReadOnlyCollection(Of Overwrite)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Overwrite
    name: Overwrite
    nameWithType: Overwrite
    fullName: Discord.Overwrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Overwrite
    name: Overwrite
    nameWithType: Overwrite
    fullName: Discord.Overwrite
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Discord.Rest.RestGuildChannel.Name*
  commentId: Overload:Discord.Rest.RestGuildChannel.Name
  name: Name
  nameWithType: RestGuildChannel.Name
  fullName: Discord.Rest.RestGuildChannel.Name
- uid: Discord.IChannel.Name
  commentId: P:Discord.IChannel.Name
  parent: Discord.IChannel
  name: Name
  nameWithType: IChannel.Name
  fullName: Discord.IChannel.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.Rest.RestGuildChannel.Position*
  commentId: Overload:Discord.Rest.RestGuildChannel.Position
  name: Position
  nameWithType: RestGuildChannel.Position
  fullName: Discord.Rest.RestGuildChannel.Position
- uid: Discord.IGuildChannel.Position
  commentId: P:Discord.IGuildChannel.Position
  parent: Discord.IGuildChannel
  name: Position
  nameWithType: IGuildChannel.Position
  fullName: Discord.IGuildChannel.Position
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Discord.Rest.RestGuildChannel.GuildId*
  commentId: Overload:Discord.Rest.RestGuildChannel.GuildId
  name: GuildId
  nameWithType: RestGuildChannel.GuildId
  fullName: Discord.Rest.RestGuildChannel.GuildId
- uid: Discord.IGuildChannel.GuildId
  commentId: P:Discord.IGuildChannel.GuildId
  parent: Discord.IGuildChannel
  name: GuildId
  nameWithType: IGuildChannel.GuildId
  fullName: Discord.IGuildChannel.GuildId
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Discord.Rest.RestChannel.UpdateAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestChannel.UpdateAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestChannel
  name: UpdateAsync(RequestOptions)
  nameWithType: RestChannel.UpdateAsync(RequestOptions)
  fullName: Discord.Rest.RestChannel.UpdateAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestChannel.UpdateAsync(Discord.RequestOptions)
    name: UpdateAsync
    nameWithType: RestChannel.UpdateAsync
    fullName: Discord.Rest.RestChannel.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestChannel.UpdateAsync(Discord.RequestOptions)
    name: UpdateAsync
    nameWithType: RestChannel.UpdateAsync
    fullName: Discord.Rest.RestChannel.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.UpdateAsync*
  commentId: Overload:Discord.Rest.RestGuildChannel.UpdateAsync
  name: UpdateAsync
  nameWithType: RestGuildChannel.UpdateAsync
  fullName: Discord.Rest.RestGuildChannel.UpdateAsync
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Discord.Rest.RestGuildChannel.ModifyAsync*
  commentId: Overload:Discord.Rest.RestGuildChannel.ModifyAsync
  name: ModifyAsync
  nameWithType: RestGuildChannel.ModifyAsync
  fullName: Discord.Rest.RestGuildChannel.ModifyAsync
- uid: Discord.IGuildChannel.ModifyAsync(System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.IGuildChannel.ModifyAsync(System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  parent: Discord.IGuildChannel
  isExternal: true
  name: ModifyAsync(Action<GuildChannelProperties>, RequestOptions)
  nameWithType: IGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions)
  fullName: Discord.IGuildChannel.ModifyAsync(System.Action<Discord.GuildChannelProperties>, Discord.RequestOptions)
  nameWithType.vb: IGuildChannel.ModifyAsync(Action(Of GuildChannelProperties), RequestOptions)
  fullName.vb: Discord.IGuildChannel.ModifyAsync(System.Action(Of Discord.GuildChannelProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of GuildChannelProperties), RequestOptions)
  spec.csharp:
  - uid: Discord.IGuildChannel.ModifyAsync(System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: IGuildChannel.ModifyAsync
    fullName: Discord.IGuildChannel.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildChannelProperties
    name: GuildChannelProperties
    nameWithType: GuildChannelProperties
    fullName: Discord.GuildChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuildChannel.ModifyAsync(System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: IGuildChannel.ModifyAsync
    fullName: Discord.IGuildChannel.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildChannelProperties
    name: GuildChannelProperties
    nameWithType: GuildChannelProperties
    fullName: Discord.GuildChannelProperties
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{Discord.GuildChannelProperties}
  commentId: T:System.Action{Discord.GuildChannelProperties}
  parent: System
  definition: System.Action`1
  name: Action<GuildChannelProperties>
  nameWithType: Action<GuildChannelProperties>
  fullName: System.Action<Discord.GuildChannelProperties>
  nameWithType.vb: Action(Of GuildChannelProperties)
  fullName.vb: System.Action(Of Discord.GuildChannelProperties)
  name.vb: Action(Of GuildChannelProperties)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildChannelProperties
    name: GuildChannelProperties
    nameWithType: GuildChannelProperties
    fullName: Discord.GuildChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildChannelProperties
    name: GuildChannelProperties
    nameWithType: GuildChannelProperties
    fullName: Discord.GuildChannelProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.DeleteAsync*
  commentId: Overload:Discord.Rest.RestGuildChannel.DeleteAsync
  name: DeleteAsync
  nameWithType: RestGuildChannel.DeleteAsync
  fullName: Discord.Rest.RestGuildChannel.DeleteAsync
- uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  commentId: M:Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  parent: Discord.IDeletable
  name: DeleteAsync(RequestOptions)
  nameWithType: IDeletable.DeleteAsync(RequestOptions)
  fullName: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: IDeletable.DeleteAsync
    fullName: Discord.IDeletable.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: IDeletable.DeleteAsync
    fullName: Discord.IDeletable.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.GetPermissionOverwrite*
  commentId: Overload:Discord.Rest.RestGuildChannel.GetPermissionOverwrite
  name: GetPermissionOverwrite
  nameWithType: RestGuildChannel.GetPermissionOverwrite
  fullName: Discord.Rest.RestGuildChannel.GetPermissionOverwrite
- uid: Discord.IUser
  commentId: T:Discord.IUser
  parent: Discord
  name: IUser
  nameWithType: IUser
  fullName: Discord.IUser
- uid: System.Nullable{Discord.OverwritePermissions}
  commentId: T:System.Nullable{Discord.OverwritePermissions}
  parent: System
  definition: System.Nullable`1
  name: Nullable<OverwritePermissions>
  nameWithType: Nullable<OverwritePermissions>
  fullName: System.Nullable<Discord.OverwritePermissions>
  nameWithType.vb: Nullable(Of OverwritePermissions)
  fullName.vb: System.Nullable(Of Discord.OverwritePermissions)
  name.vb: Nullable(Of OverwritePermissions)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IRole
  commentId: T:Discord.IRole
  parent: Discord
  name: IRole
  nameWithType: IRole
  fullName: Discord.IRole
- uid: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync*
  commentId: Overload:Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync
  name: AddPermissionOverwriteAsync
  nameWithType: RestGuildChannel.AddPermissionOverwriteAsync
  fullName: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync
- uid: Discord.OverwritePermissions
  commentId: T:Discord.OverwritePermissions
  parent: Discord
  name: OverwritePermissions
  nameWithType: OverwritePermissions
  fullName: Discord.OverwritePermissions
- uid: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync*
  commentId: Overload:Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync
  name: RemovePermissionOverwriteAsync
  nameWithType: RestGuildChannel.RemovePermissionOverwriteAsync
  fullName: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.ToString*
  commentId: Overload:Discord.Rest.RestGuildChannel.ToString
  name: ToString
  nameWithType: RestGuildChannel.ToString
  fullName: Discord.Rest.RestGuildChannel.ToString
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#Guild*
  commentId: Overload:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#Guild
  name: IGuildChannel.Guild
  nameWithType: RestGuildChannel.IGuildChannel.Guild
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.Guild
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.Guild
  name.vb: Discord.IGuildChannel.Guild
- uid: Discord.IGuildChannel.Guild
  commentId: P:Discord.IGuildChannel.Guild
  parent: Discord.IGuildChannel
  name: Guild
  nameWithType: IGuildChannel.Guild
  fullName: Discord.IGuildChannel.Guild
- uid: Discord.IGuild
  commentId: T:Discord.IGuild
  parent: Discord
  name: IGuild
  nameWithType: IGuild
  fullName: Discord.IGuild
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite*
  commentId: Overload:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite
  name: IGuildChannel.GetPermissionOverwrite
  nameWithType: RestGuildChannel.IGuildChannel.GetPermissionOverwrite
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite
  name.vb: Discord.IGuildChannel.GetPermissionOverwrite
- uid: Discord.IGuildChannel.GetPermissionOverwrite(Discord.IRole)
  commentId: M:Discord.IGuildChannel.GetPermissionOverwrite(Discord.IRole)
  parent: Discord.IGuildChannel
  name: GetPermissionOverwrite(IRole)
  nameWithType: IGuildChannel.GetPermissionOverwrite(IRole)
  fullName: Discord.IGuildChannel.GetPermissionOverwrite(Discord.IRole)
  spec.csharp:
  - uid: Discord.IGuildChannel.GetPermissionOverwrite(Discord.IRole)
    name: GetPermissionOverwrite
    nameWithType: IGuildChannel.GetPermissionOverwrite
    fullName: Discord.IGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuildChannel.GetPermissionOverwrite(Discord.IRole)
    name: GetPermissionOverwrite
    nameWithType: IGuildChannel.GetPermissionOverwrite
    fullName: Discord.IGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuildChannel.GetPermissionOverwrite(Discord.IUser)
  commentId: M:Discord.IGuildChannel.GetPermissionOverwrite(Discord.IUser)
  parent: Discord.IGuildChannel
  name: GetPermissionOverwrite(IUser)
  nameWithType: IGuildChannel.GetPermissionOverwrite(IUser)
  fullName: Discord.IGuildChannel.GetPermissionOverwrite(Discord.IUser)
  spec.csharp:
  - uid: Discord.IGuildChannel.GetPermissionOverwrite(Discord.IUser)
    name: GetPermissionOverwrite
    nameWithType: IGuildChannel.GetPermissionOverwrite
    fullName: Discord.IGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuildChannel.GetPermissionOverwrite(Discord.IUser)
    name: GetPermissionOverwrite
    nameWithType: IGuildChannel.GetPermissionOverwrite
    fullName: Discord.IGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync*
  commentId: Overload:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync
  name: IGuildChannel.AddPermissionOverwriteAsync
  nameWithType: RestGuildChannel.IGuildChannel.AddPermissionOverwriteAsync
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync
  name.vb: Discord.IGuildChannel.AddPermissionOverwriteAsync
- uid: Discord.IGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  commentId: M:Discord.IGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  parent: Discord.IGuildChannel
  name: AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  nameWithType: IGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  fullName: Discord.IGuildChannel.AddPermissionOverwriteAsync(Discord.IRole, Discord.OverwritePermissions, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
    name: AddPermissionOverwriteAsync
    nameWithType: IGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.IGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
    name: AddPermissionOverwriteAsync
    nameWithType: IGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.IGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  commentId: M:Discord.IGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  parent: Discord.IGuildChannel
  name: AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  nameWithType: IGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  fullName: Discord.IGuildChannel.AddPermissionOverwriteAsync(Discord.IUser, Discord.OverwritePermissions, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
    name: AddPermissionOverwriteAsync
    nameWithType: IGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.IGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
    name: AddPermissionOverwriteAsync
    nameWithType: IGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.IGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync*
  commentId: Overload:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync
  name: IGuildChannel.RemovePermissionOverwriteAsync
  nameWithType: RestGuildChannel.IGuildChannel.RemovePermissionOverwriteAsync
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync
  name.vb: Discord.IGuildChannel.RemovePermissionOverwriteAsync
- uid: Discord.IGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  commentId: M:Discord.IGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  parent: Discord.IGuildChannel
  name: RemovePermissionOverwriteAsync(IRole, RequestOptions)
  nameWithType: IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions)
  fullName: Discord.IGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
    name: RemovePermissionOverwriteAsync
    nameWithType: IGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.IGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
    name: RemovePermissionOverwriteAsync
    nameWithType: IGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.IGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  commentId: M:Discord.IGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  parent: Discord.IGuildChannel
  name: RemovePermissionOverwriteAsync(IUser, RequestOptions)
  nameWithType: IGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions)
  fullName: Discord.IGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
    name: RemovePermissionOverwriteAsync
    nameWithType: IGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.IGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
    name: RemovePermissionOverwriteAsync
    nameWithType: IGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.IGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetUsersAsync*
  commentId: Overload:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetUsersAsync
  name: IGuildChannel.GetUsersAsync
  nameWithType: RestGuildChannel.IGuildChannel.GetUsersAsync
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.GetUsersAsync
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.GetUsersAsync
  name.vb: Discord.IGuildChannel.GetUsersAsync
- uid: Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuildChannel
  name: GetUsersAsync(CacheMode, RequestOptions)
  nameWithType: IGuildChannel.GetUsersAsync(CacheMode, RequestOptions)
  fullName: Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetUsersAsync
    nameWithType: IGuildChannel.GetUsersAsync
    fullName: Discord.IGuildChannel.GetUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetUsersAsync
    nameWithType: IGuildChannel.GetUsersAsync
    fullName: Discord.IGuildChannel.GetUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.CacheMode
  commentId: T:Discord.CacheMode
  parent: Discord
  name: CacheMode
  nameWithType: CacheMode
  fullName: Discord.CacheMode
- uid: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IGuildUser}}
  commentId: T:System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IGuildUser}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IAsyncEnumerable`1
  name: IAsyncEnumerable<IReadOnlyCollection<IGuildUser>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<IGuildUser>>
  fullName: System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyCollection<Discord.IGuildUser>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IGuildUser))
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IGuildUser))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IGuildUser))
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IGuildUser
    name: IGuildUser
    nameWithType: IGuildUser
    fullName: Discord.IGuildUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IGuildUser
    name: IGuildUser
    nameWithType: IGuildUser
    fullName: Discord.IGuildUser
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IAsyncEnumerable`1
  commentId: T:System.Collections.Generic.IAsyncEnumerable`1
  isExternal: true
  name: IAsyncEnumerable<T>
  nameWithType: IAsyncEnumerable<T>
  fullName: System.Collections.Generic.IAsyncEnumerable<T>
  nameWithType.vb: IAsyncEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of T)
  name.vb: IAsyncEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetUserAsync*
  commentId: Overload:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetUserAsync
  name: IGuildChannel.GetUserAsync
  nameWithType: RestGuildChannel.IGuildChannel.GetUserAsync
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.GetUserAsync
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.GetUserAsync
  name.vb: Discord.IGuildChannel.GetUserAsync
- uid: Discord.IGuildChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuildChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuildChannel
  isExternal: true
  name: GetUserAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: IGuildChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.IGuildChannel.GetUserAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuildChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetUserAsync
    nameWithType: IGuildChannel.GetUserAsync
    fullName: Discord.IGuildChannel.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuildChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetUserAsync
    nameWithType: IGuildChannel.GetUserAsync
    fullName: Discord.IGuildChannel.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.IGuildUser}
  commentId: T:System.Threading.Tasks.Task{Discord.IGuildUser}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IGuildUser>
  nameWithType: Task<IGuildUser>
  fullName: System.Threading.Tasks.Task<Discord.IGuildUser>
  nameWithType.vb: Task(Of IGuildUser)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IGuildUser)
  name.vb: Task(Of IGuildUser)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IGuildUser
    name: IGuildUser
    nameWithType: IGuildUser
    fullName: Discord.IGuildUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IGuildUser
    name: IGuildUser
    nameWithType: IGuildUser
    fullName: Discord.IGuildUser
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.Discord#IChannel#GetUsersAsync*
  commentId: Overload:Discord.Rest.RestGuildChannel.Discord#IChannel#GetUsersAsync
  name: IChannel.GetUsersAsync
  nameWithType: RestGuildChannel.IChannel.GetUsersAsync
  fullName: Discord.Rest.RestGuildChannel.Discord.IChannel.GetUsersAsync
  nameWithType.vb: RestGuildChannel.Discord.IChannel.GetUsersAsync
  name.vb: Discord.IChannel.GetUsersAsync
- uid: Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IChannel
  name: GetUsersAsync(CacheMode, RequestOptions)
  nameWithType: IChannel.GetUsersAsync(CacheMode, RequestOptions)
  fullName: Discord.IChannel.GetUsersAsync(Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetUsersAsync
    nameWithType: IChannel.GetUsersAsync
    fullName: Discord.IChannel.GetUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetUsersAsync
    nameWithType: IChannel.GetUsersAsync
    fullName: Discord.IChannel.GetUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IUser}}
  commentId: T:System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IUser}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IAsyncEnumerable`1
  name: IAsyncEnumerable<IReadOnlyCollection<IUser>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<IUser>>
  fullName: System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyCollection<Discord.IUser>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IUser))
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IUser))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IUser))
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.Discord#IChannel#GetUserAsync*
  commentId: Overload:Discord.Rest.RestGuildChannel.Discord#IChannel#GetUserAsync
  name: IChannel.GetUserAsync
  nameWithType: RestGuildChannel.IChannel.GetUserAsync
  fullName: Discord.Rest.RestGuildChannel.Discord.IChannel.GetUserAsync
  nameWithType.vb: RestGuildChannel.Discord.IChannel.GetUserAsync
  name.vb: Discord.IChannel.GetUserAsync
- uid: Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IChannel
  isExternal: true
  name: GetUserAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.IChannel.GetUserAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetUserAsync
    nameWithType: IChannel.GetUserAsync
    fullName: Discord.IChannel.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetUserAsync
    nameWithType: IChannel.GetUserAsync
    fullName: Discord.IChannel.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.IUser}
  commentId: T:System.Threading.Tasks.Task{Discord.IUser}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IUser>
  nameWithType: Task<IUser>
  fullName: System.Threading.Tasks.Task<Discord.IUser>
  nameWithType.vb: Task(Of IUser)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IUser)
  name.vb: Task(Of IUser)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
