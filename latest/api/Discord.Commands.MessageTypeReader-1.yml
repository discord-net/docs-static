### YamlMime:ManagedReference
items:
- uid: Discord.Commands.MessageTypeReader`1
  commentId: T:Discord.Commands.MessageTypeReader`1
  id: MessageTypeReader`1
  parent: Discord.Commands
  children:
  - Discord.Commands.MessageTypeReader`1.ReadAsync(Discord.Commands.ICommandContext,System.String,IServiceProvider)
  langs:
  - csharp
  - vb
  name: MessageTypeReader<T>
  nameWithType: MessageTypeReader<T>
  fullName: Discord.Commands.MessageTypeReader<T>
  type: Class
  source:
    remote:
      path: src/Discord.Net.Commands/Readers/MessageTypeReader.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: MessageTypeReader
    path: ../src/Discord.Net.Commands/Readers/MessageTypeReader.cs
    startLine: 10
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nA <xref href=\"Discord.Commands.TypeReader\" data-throw-if-not-resolved=\"false\"></xref> for parsing objects implementing <xref href=\"Discord.IMessage\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class MessageTypeReader<T> : TypeReader where T : class, IMessage'
    typeParameters:
    - id: T
      description: The type to be checked; must implement <xref href="Discord.IMessage" data-throw-if-not-resolved="false"></xref>.
    content.vb: >-
      Public Class MessageTypeReader(Of T As {Class, IMessage})
          Inherits TypeReader
  inheritance:
  - System.Object
  - Discord.Commands.TypeReader
  nameWithType.vb: MessageTypeReader(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Discord.Commands.MessageTypeReader(Of T)
  name.vb: MessageTypeReader(Of T)
- uid: Discord.Commands.MessageTypeReader`1.ReadAsync(Discord.Commands.ICommandContext,System.String,IServiceProvider)
  commentId: M:Discord.Commands.MessageTypeReader`1.ReadAsync(Discord.Commands.ICommandContext,System.String,IServiceProvider)
  id: ReadAsync(Discord.Commands.ICommandContext,System.String,IServiceProvider)
  parent: Discord.Commands.MessageTypeReader`1
  langs:
  - csharp
  - vb
  name: ReadAsync(ICommandContext, String, IServiceProvider)
  nameWithType: MessageTypeReader<T>.ReadAsync(ICommandContext, String, IServiceProvider)
  fullName: Discord.Commands.MessageTypeReader<T>.ReadAsync(Discord.Commands.ICommandContext, System.String, IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Readers/MessageTypeReader.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ReadAsync
    path: ../src/Discord.Net.Commands/Readers/MessageTypeReader.cs
    startLine: 14
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nAttempts to parse the <code data-dev-comment-type=\"paramref\" class=\"paramref\">input</code> into the desired type.\n"
  example: []
  syntax:
    content: public override Task<TypeReaderResult> ReadAsync(ICommandContext context, string input, IServiceProvider services)
    parameters:
    - id: context
      type: Discord.Commands.ICommandContext
      description: The context of the command.
    - id: input
      type: System.String
      description: The raw input of the command.
    - id: services
      type: IServiceProvider
      description: The service collection used for dependency injection.
    return:
      type: Task{Discord.Commands.TypeReaderResult}
      description: "\nA task that represents the asynchronous parsing operation. The task result contains the parsing result.\n"
    content.vb: Public Overrides Function ReadAsync(context As ICommandContext, input As String, services As IServiceProvider) As Task(Of TypeReaderResult)
  overridden: Discord.Commands.TypeReader.ReadAsync(Discord.Commands.ICommandContext,System.String,IServiceProvider)
  overload: Discord.Commands.MessageTypeReader`1.ReadAsync*
  nameWithType.vb: MessageTypeReader(Of T).ReadAsync(ICommandContext, String, IServiceProvider)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Discord.Commands.MessageTypeReader(Of T).ReadAsync(Discord.Commands.ICommandContext, System.String, IServiceProvider)
references:
- uid: Discord.Commands.TypeReader
  commentId: T:Discord.Commands.TypeReader
  parent: Discord.Commands
  name: TypeReader
  nameWithType: TypeReader
  fullName: Discord.Commands.TypeReader
- uid: Discord.IMessage
  commentId: T:Discord.IMessage
  parent: Discord
  name: IMessage
  nameWithType: IMessage
  fullName: Discord.IMessage
- uid: Discord.Commands
  commentId: N:Discord.Commands
  name: Discord.Commands
  nameWithType: Discord.Commands
  fullName: Discord.Commands
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.Commands.TypeReader.ReadAsync(Discord.Commands.ICommandContext,System.String,IServiceProvider)
  commentId: M:Discord.Commands.TypeReader.ReadAsync(Discord.Commands.ICommandContext,System.String,IServiceProvider)
  parent: Discord.Commands.TypeReader
  isExternal: true
  name: ReadAsync(ICommandContext, String, IServiceProvider)
  nameWithType: TypeReader.ReadAsync(ICommandContext, String, IServiceProvider)
  fullName: Discord.Commands.TypeReader.ReadAsync(Discord.Commands.ICommandContext, System.String, IServiceProvider)
  spec.csharp:
  - uid: Discord.Commands.TypeReader.ReadAsync(Discord.Commands.ICommandContext,System.String,IServiceProvider)
    name: ReadAsync
    nameWithType: TypeReader.ReadAsync
    fullName: Discord.Commands.TypeReader.ReadAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.Commands.ICommandContext
    name: ICommandContext
    nameWithType: ICommandContext
    fullName: Discord.Commands.ICommandContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: IServiceProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.TypeReader.ReadAsync(Discord.Commands.ICommandContext,System.String,IServiceProvider)
    name: ReadAsync
    nameWithType: TypeReader.ReadAsync
    fullName: Discord.Commands.TypeReader.ReadAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.Commands.ICommandContext
    name: ICommandContext
    nameWithType: ICommandContext
    fullName: Discord.Commands.ICommandContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: IServiceProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.MessageTypeReader`1.ReadAsync*
  commentId: Overload:Discord.Commands.MessageTypeReader`1.ReadAsync
  name: ReadAsync
  nameWithType: MessageTypeReader<T>.ReadAsync
  fullName: Discord.Commands.MessageTypeReader<T>.ReadAsync
  nameWithType.vb: MessageTypeReader(Of T).ReadAsync
  fullName.vb: Discord.Commands.MessageTypeReader(Of T).ReadAsync
- uid: Discord.Commands.ICommandContext
  commentId: T:Discord.Commands.ICommandContext
  parent: Discord.Commands
  name: ICommandContext
  nameWithType: ICommandContext
  fullName: Discord.Commands.ICommandContext
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: IServiceProvider
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: IServiceProvider
- uid: Task{Discord.Commands.TypeReaderResult}
  commentId: '!:Task{Discord.Commands.TypeReaderResult}'
  definition: Task`1
  name: Task<TypeReaderResult>
  nameWithType: Task<TypeReaderResult>
  fullName: Task<Discord.Commands.TypeReaderResult>
  nameWithType.vb: Task(Of TypeReaderResult)
  fullName.vb: Task(Of Discord.Commands.TypeReaderResult)
  name.vb: Task(Of TypeReaderResult)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.TypeReaderResult
    name: TypeReaderResult
    nameWithType: TypeReaderResult
    fullName: Discord.Commands.TypeReaderResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.TypeReaderResult
    name: TypeReaderResult
    nameWithType: TypeReaderResult
    fullName: Discord.Commands.TypeReaderResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
