### YamlMime:ManagedReference
items:
- uid: Discord.Rest.RestWebhookUser
  commentId: T:Discord.Rest.RestWebhookUser
  id: RestWebhookUser
  parent: Discord.Rest
  children:
  - Discord.Rest.RestWebhookUser.Discord#IGuildUser#AddRoleAsync(Discord.IRole,Discord.RequestOptions)
  - Discord.Rest.RestWebhookUser.Discord#IGuildUser#AddRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)
  - Discord.Rest.RestWebhookUser.Discord#IGuildUser#GetPermissions(Discord.IGuildChannel)
  - Discord.Rest.RestWebhookUser.Discord#IGuildUser#Guild
  - Discord.Rest.RestWebhookUser.Discord#IGuildUser#GuildPermissions
  - Discord.Rest.RestWebhookUser.Discord#IGuildUser#JoinedAt
  - Discord.Rest.RestWebhookUser.Discord#IGuildUser#KickAsync(System.String,Discord.RequestOptions)
  - Discord.Rest.RestWebhookUser.Discord#IGuildUser#ModifyAsync(System.Action{Discord.GuildUserProperties},Discord.RequestOptions)
  - Discord.Rest.RestWebhookUser.Discord#IGuildUser#Nickname
  - Discord.Rest.RestWebhookUser.Discord#IGuildUser#RemoveRoleAsync(Discord.IRole,Discord.RequestOptions)
  - Discord.Rest.RestWebhookUser.Discord#IGuildUser#RemoveRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)
  - Discord.Rest.RestWebhookUser.Discord#IGuildUser#RoleIds
  - Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsDeafened
  - Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsMuted
  - Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsSelfDeafened
  - Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsSelfMuted
  - Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsStreaming
  - Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsSuppressed
  - Discord.Rest.RestWebhookUser.Discord#IVoiceState#VoiceChannel
  - Discord.Rest.RestWebhookUser.Discord#IVoiceState#VoiceSessionId
  - Discord.Rest.RestWebhookUser.GuildId
  - Discord.Rest.RestWebhookUser.IsWebhook
  - Discord.Rest.RestWebhookUser.PremiumSince
  - Discord.Rest.RestWebhookUser.WebhookId
  langs:
  - csharp
  - vb
  name: RestWebhookUser
  nameWithType: RestWebhookUser
  fullName: Discord.Rest.RestWebhookUser
  type: Class
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RestWebhookUser
    path: ../src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
    startLine: 9
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  syntax:
    content: 'public class RestWebhookUser : RestUser, IUpdateable, IWebhookUser, IGuildUser, IUser, ISnowflakeEntity, IEntity<ulong>, IMentionable, IPresence, IVoiceState'
    content.vb: >-
      Public Class RestWebhookUser
          Inherits RestUser
          Implements IUpdateable, IWebhookUser, IGuildUser, IUser, ISnowflakeEntity, IEntity(Of ULong), IMentionable, IPresence, IVoiceState
  inheritance:
  - System.Object
  - Discord.Rest.RestEntity{System.UInt64}
  - Discord.Rest.RestUser
  implements:
  - Discord.IUpdateable
  - Discord.IWebhookUser
  - Discord.IGuildUser
  - Discord.IUser
  - Discord.ISnowflakeEntity
  - Discord.IEntity{System.UInt64}
  - Discord.IMentionable
  - Discord.IPresence
  - Discord.IVoiceState
  inheritedMembers:
  - Discord.Rest.RestUser.IsBot
  - Discord.Rest.RestUser.Username
  - Discord.Rest.RestUser.DiscriminatorValue
  - Discord.Rest.RestUser.AvatarId
  - Discord.Rest.RestUser.CreatedAt
  - Discord.Rest.RestUser.Discriminator
  - Discord.Rest.RestUser.Mention
  - Discord.Rest.RestUser.Activity
  - Discord.Rest.RestUser.Status
  - Discord.Rest.RestUser.ActiveClients
  - Discord.Rest.RestUser.UpdateAsync(Discord.RequestOptions)
  - Discord.Rest.RestUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
  - Discord.Rest.RestUser.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
  - Discord.Rest.RestUser.GetDefaultAvatarUrl
  - Discord.Rest.RestUser.ToString
  - Discord.Rest.RestUser.Discord#IUser#GetOrCreateDMChannelAsync(Discord.RequestOptions)
  - Discord.Rest.RestEntity{System.UInt64}.Id
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.Rest.RestWebhookUser.WebhookId
  commentId: P:Discord.Rest.RestWebhookUser.WebhookId
  id: WebhookId
  parent: Discord.Rest.RestWebhookUser
  langs:
  - csharp
  - vb
  name: WebhookId
  nameWithType: RestWebhookUser.WebhookId
  fullName: Discord.Rest.RestWebhookUser.WebhookId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: WebhookId
    path: ../src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
    startLine: 13
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: 'Gets the ID of a webhook. '
  example: []
  syntax:
    content: public ulong WebhookId { get; }
    parameters: []
    return:
      type: System.UInt64
    content.vb: Public ReadOnly Property WebhookId As ULong
  overload: Discord.Rest.RestWebhookUser.WebhookId*
  implements:
  - Discord.IWebhookUser.WebhookId
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestWebhookUser.PremiumSince
  commentId: P:Discord.Rest.RestWebhookUser.PremiumSince
  id: PremiumSince
  parent: Discord.Rest.RestWebhookUser
  langs:
  - csharp
  - vb
  name: PremiumSince
  nameWithType: RestWebhookUser.PremiumSince
  fullName: Discord.Rest.RestWebhookUser.PremiumSince
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: PremiumSince
    path: ../src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
    startLine: 16
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the date and time for when this user&apos;s guild boost began.\n"
  example: []
  syntax:
    content: public DateTimeOffset? PremiumSince { get; }
    parameters: []
    return:
      type: System.Nullable{System.DateTimeOffset}
      description: "\nA <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> for when the user began boosting this guild; <code>null</code> if they are not boosting the guild.\n"
    content.vb: Public ReadOnly Property PremiumSince As DateTimeOffset?
  overload: Discord.Rest.RestWebhookUser.PremiumSince*
  implements:
  - Discord.IGuildUser.PremiumSince
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestWebhookUser.IsWebhook
  commentId: P:Discord.Rest.RestWebhookUser.IsWebhook
  id: IsWebhook
  parent: Discord.Rest.RestWebhookUser
  langs:
  - csharp
  - vb
  name: IsWebhook
  nameWithType: RestWebhookUser.IsWebhook
  fullName: Discord.Rest.RestWebhookUser.IsWebhook
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsWebhook
    path: ../src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
    startLine: 19
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a value that indicates whether this user is a webhook user.\n"
  example: []
  syntax:
    content: public override bool IsWebhook { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the user is a webhook; otherwise <code>false</code>.\n"
    content.vb: Public Overrides ReadOnly Property IsWebhook As Boolean
  overridden: Discord.Rest.RestUser.IsWebhook
  overload: Discord.Rest.RestWebhookUser.IsWebhook*
  implements:
  - Discord.IUser.IsWebhook
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.Rest.RestWebhookUser.GuildId
  commentId: P:Discord.Rest.RestWebhookUser.GuildId
  id: GuildId
  parent: Discord.Rest.RestWebhookUser
  langs:
  - csharp
  - vb
  name: GuildId
  nameWithType: RestWebhookUser.GuildId
  fullName: Discord.Rest.RestWebhookUser.GuildId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GuildId
    path: ../src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
    startLine: 21
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the ID of the guild for this user.\n"
  example: []
  syntax:
    content: public ulong GuildId { get; }
    parameters: []
    return:
      type: System.UInt64
      description: "\nAn <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> representing the snowflake identifier of the guild that this user belongs to.\n"
    content.vb: Public ReadOnly Property GuildId As ULong
  overload: Discord.Rest.RestWebhookUser.GuildId*
  implements:
  - Discord.IGuildUser.GuildId
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestWebhookUser.Discord#IGuildUser#Guild
  commentId: P:Discord.Rest.RestWebhookUser.Discord#IGuildUser#Guild
  id: Discord#IGuildUser#Guild
  isEii: true
  parent: Discord.Rest.RestWebhookUser
  langs:
  - csharp
  - vb
  name: IGuildUser.Guild
  nameWithType: RestWebhookUser.IGuildUser.Guild
  fullName: Discord.Rest.RestWebhookUser.Discord.IGuildUser.Guild
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuildUser.Guild
    path: ../src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
    startLine: 38
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the guild for this user.\n"
  example: []
  syntax:
    content: IGuild IGuildUser.Guild { get; }
    parameters: []
    return:
      type: Discord.IGuild
      description: "\nA guild object that this user belongs to.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IGuildUser.Guild As IGuild Implements IGuildUser.Guild
  overload: Discord.Rest.RestWebhookUser.Discord#IGuildUser#Guild*
  implements:
  - Discord.IGuildUser.Guild
  nameWithType.vb: RestWebhookUser.Discord.IGuildUser.Guild
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IGuildUser.Guild
- uid: Discord.Rest.RestWebhookUser.Discord#IGuildUser#RoleIds
  commentId: P:Discord.Rest.RestWebhookUser.Discord#IGuildUser#RoleIds
  id: Discord#IGuildUser#RoleIds
  isEii: true
  parent: Discord.Rest.RestWebhookUser
  langs:
  - csharp
  - vb
  name: IGuildUser.RoleIds
  nameWithType: RestWebhookUser.IGuildUser.RoleIds
  fullName: Discord.Rest.RestWebhookUser.Discord.IGuildUser.RoleIds
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuildUser.RoleIds
    path: ../src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
    startLine: 48
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of IDs for the roles that this user currently possesses in the guild.\n"
  remarks: "\nThis property returns a read-only collection of the identifiers of the roles that this user possesses.\nFor WebSocket users, a Roles property can be found in place of this property. Due to the REST\nimplementation, only a collection of identifiers can be retrieved instead of the full role objects.\n"
  example: []
  syntax:
    content: IReadOnlyCollection<ulong> IGuildUser.RoleIds { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{System.UInt64}
      description: "\nA read-only collection of <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref>, each representing a snowflake identifier for a role that\nthis user possesses.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IGuildUser.RoleIds As IReadOnlyCollection(Of ULong) Implements IGuildUser.RoleIds
  overload: Discord.Rest.RestWebhookUser.Discord#IGuildUser#RoleIds*
  implements:
  - Discord.IGuildUser.RoleIds
  nameWithType.vb: RestWebhookUser.Discord.IGuildUser.RoleIds
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IGuildUser.RoleIds
- uid: Discord.Rest.RestWebhookUser.Discord#IGuildUser#JoinedAt
  commentId: P:Discord.Rest.RestWebhookUser.Discord#IGuildUser#JoinedAt
  id: Discord#IGuildUser#JoinedAt
  isEii: true
  parent: Discord.Rest.RestWebhookUser
  langs:
  - csharp
  - vb
  name: IGuildUser.JoinedAt
  nameWithType: RestWebhookUser.IGuildUser.JoinedAt
  fullName: Discord.Rest.RestWebhookUser.Discord.IGuildUser.JoinedAt
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuildUser.JoinedAt
    path: ../src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
    startLine: 50
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets when this user joined the guild.\n"
  example: []
  syntax:
    content: DateTimeOffset? IGuildUser.JoinedAt { get; }
    parameters: []
    return:
      type: System.Nullable{System.DateTimeOffset}
      description: "\nA <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> representing the time of which the user has joined the guild; \n<code>null</code> when it cannot be obtained.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IGuildUser.JoinedAt As DateTimeOffset? Implements IGuildUser.JoinedAt
  overload: Discord.Rest.RestWebhookUser.Discord#IGuildUser#JoinedAt*
  implements:
  - Discord.IGuildUser.JoinedAt
  nameWithType.vb: RestWebhookUser.Discord.IGuildUser.JoinedAt
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IGuildUser.JoinedAt
- uid: Discord.Rest.RestWebhookUser.Discord#IGuildUser#Nickname
  commentId: P:Discord.Rest.RestWebhookUser.Discord#IGuildUser#Nickname
  id: Discord#IGuildUser#Nickname
  isEii: true
  parent: Discord.Rest.RestWebhookUser
  langs:
  - csharp
  - vb
  name: IGuildUser.Nickname
  nameWithType: RestWebhookUser.IGuildUser.Nickname
  fullName: Discord.Rest.RestWebhookUser.Discord.IGuildUser.Nickname
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuildUser.Nickname
    path: ../src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
    startLine: 52
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the nickname for this user.\n"
  example: []
  syntax:
    content: string IGuildUser.Nickname { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA string representing the nickname of the user; <code>null</code> if none is set.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IGuildUser.Nickname As String Implements IGuildUser.Nickname
  overload: Discord.Rest.RestWebhookUser.Discord#IGuildUser#Nickname*
  implements:
  - Discord.IGuildUser.Nickname
  nameWithType.vb: RestWebhookUser.Discord.IGuildUser.Nickname
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IGuildUser.Nickname
- uid: Discord.Rest.RestWebhookUser.Discord#IGuildUser#GuildPermissions
  commentId: P:Discord.Rest.RestWebhookUser.Discord#IGuildUser#GuildPermissions
  id: Discord#IGuildUser#GuildPermissions
  isEii: true
  parent: Discord.Rest.RestWebhookUser
  langs:
  - csharp
  - vb
  name: IGuildUser.GuildPermissions
  nameWithType: RestWebhookUser.IGuildUser.GuildPermissions
  fullName: Discord.Rest.RestWebhookUser.Discord.IGuildUser.GuildPermissions
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuildUser.GuildPermissions
    path: ../src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
    startLine: 54
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the guild-level permissions for this user.\n"
  example: []
  syntax:
    content: GuildPermissions IGuildUser.GuildPermissions { get; }
    parameters: []
    return:
      type: Discord.GuildPermissions
      description: "\nA <xref href=\"Discord.GuildPermissions\" data-throw-if-not-resolved=\"false\"></xref> structure for this user, representing what\npermissions this user has in the guild.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IGuildUser.GuildPermissions As GuildPermissions Implements IGuildUser.GuildPermissions
  overload: Discord.Rest.RestWebhookUser.Discord#IGuildUser#GuildPermissions*
  implements:
  - Discord.IGuildUser.GuildPermissions
  nameWithType.vb: RestWebhookUser.Discord.IGuildUser.GuildPermissions
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IGuildUser.GuildPermissions
- uid: Discord.Rest.RestWebhookUser.Discord#IGuildUser#GetPermissions(Discord.IGuildChannel)
  commentId: M:Discord.Rest.RestWebhookUser.Discord#IGuildUser#GetPermissions(Discord.IGuildChannel)
  id: Discord#IGuildUser#GetPermissions(Discord.IGuildChannel)
  isEii: true
  parent: Discord.Rest.RestWebhookUser
  langs:
  - csharp
  - vb
  name: IGuildUser.GetPermissions(IGuildChannel)
  nameWithType: RestWebhookUser.IGuildUser.GetPermissions(IGuildChannel)
  fullName: Discord.Rest.RestWebhookUser.Discord.IGuildUser.GetPermissions(Discord.IGuildChannel)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuildUser.GetPermissions
    path: ../src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
    startLine: 57
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the level permissions granted to this user to a given channel.\n"
  example: []
  syntax:
    content: ChannelPermissions IGuildUser.GetPermissions(IGuildChannel channel)
    parameters:
    - id: channel
      type: Discord.IGuildChannel
      description: The channel to get the permission from.
    return:
      type: Discord.ChannelPermissions
      description: "\nA <xref href=\"Discord.ChannelPermissions\" data-throw-if-not-resolved=\"false\"></xref> structure representing the permissions that a user has in the\nspecified channel.\n"
    content.vb: Function Discord.IGuildUser.GetPermissions(channel As IGuildChannel) As ChannelPermissions Implements IGuildUser.GetPermissions
  overload: Discord.Rest.RestWebhookUser.Discord#IGuildUser#GetPermissions*
  implements:
  - Discord.IGuildUser.GetPermissions(Discord.IGuildChannel)
  nameWithType.vb: RestWebhookUser.Discord.IGuildUser.GetPermissions(IGuildChannel)
  name.vb: Discord.IGuildUser.GetPermissions(IGuildChannel)
- uid: Discord.Rest.RestWebhookUser.Discord#IGuildUser#KickAsync(System.String,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestWebhookUser.Discord#IGuildUser#KickAsync(System.String,Discord.RequestOptions)
  id: Discord#IGuildUser#KickAsync(System.String,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestWebhookUser
  langs:
  - csharp
  - vb
  name: IGuildUser.KickAsync(String, RequestOptions)
  nameWithType: RestWebhookUser.IGuildUser.KickAsync(String, RequestOptions)
  fullName: Discord.Rest.RestWebhookUser.Discord.IGuildUser.KickAsync(System.String, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuildUser.KickAsync
    path: ../src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
    startLine: 59
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nKicks this user from this guild.\n"
  example: []
  syntax:
    content: Task IGuildUser.KickAsync(string reason, RequestOptions options)
    parameters:
    - id: reason
      type: System.String
      description: The reason for the kick which will be recorded in the audit log.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous kick operation.\n"
    content.vb: Function Discord.IGuildUser.KickAsync(reason As String, options As RequestOptions) As Task Implements IGuildUser.KickAsync
  overload: Discord.Rest.RestWebhookUser.Discord#IGuildUser#KickAsync*
  implements:
  - Discord.IGuildUser.KickAsync(System.String,Discord.RequestOptions)
  nameWithType.vb: RestWebhookUser.Discord.IGuildUser.KickAsync(String, RequestOptions)
  name.vb: Discord.IGuildUser.KickAsync(String, RequestOptions)
- uid: Discord.Rest.RestWebhookUser.Discord#IGuildUser#ModifyAsync(System.Action{Discord.GuildUserProperties},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestWebhookUser.Discord#IGuildUser#ModifyAsync(System.Action{Discord.GuildUserProperties},Discord.RequestOptions)
  id: Discord#IGuildUser#ModifyAsync(System.Action{Discord.GuildUserProperties},Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestWebhookUser
  langs:
  - csharp
  - vb
  name: IGuildUser.ModifyAsync(Action<GuildUserProperties>, RequestOptions)
  nameWithType: RestWebhookUser.IGuildUser.ModifyAsync(Action<GuildUserProperties>, RequestOptions)
  fullName: Discord.Rest.RestWebhookUser.Discord.IGuildUser.ModifyAsync(System.Action<Discord.GuildUserProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuildUser.ModifyAsync
    path: ../src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
    startLine: 63
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nModifies this user&apos;s properties in this guild.\n"
  remarks: "\nThis method modifies the current guild user with the specified properties. To see an example of this\nmethod and what properties are available, please refer to <xref href=\"Discord.GuildUserProperties\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: Task IGuildUser.ModifyAsync(Action<GuildUserProperties> func, RequestOptions options)
    parameters:
    - id: func
      type: System.Action{Discord.GuildUserProperties}
      description: The delegate containing the properties to modify the user with.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous modification operation.\n"
    content.vb: Function Discord.IGuildUser.ModifyAsync(func As Action(Of GuildUserProperties), options As RequestOptions) As Task Implements IGuildUser.ModifyAsync
  overload: Discord.Rest.RestWebhookUser.Discord#IGuildUser#ModifyAsync*
  implements:
  - Discord.IGuildUser.ModifyAsync(System.Action{Discord.GuildUserProperties},Discord.RequestOptions)
  nameWithType.vb: RestWebhookUser.Discord.IGuildUser.ModifyAsync(Action(Of GuildUserProperties), RequestOptions)
  fullName.vb: Discord.Rest.RestWebhookUser.Discord.IGuildUser.ModifyAsync(System.Action(Of Discord.GuildUserProperties), Discord.RequestOptions)
  name.vb: Discord.IGuildUser.ModifyAsync(Action(Of GuildUserProperties), RequestOptions)
- uid: Discord.Rest.RestWebhookUser.Discord#IGuildUser#AddRoleAsync(Discord.IRole,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestWebhookUser.Discord#IGuildUser#AddRoleAsync(Discord.IRole,Discord.RequestOptions)
  id: Discord#IGuildUser#AddRoleAsync(Discord.IRole,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestWebhookUser
  langs:
  - csharp
  - vb
  name: IGuildUser.AddRoleAsync(IRole, RequestOptions)
  nameWithType: RestWebhookUser.IGuildUser.AddRoleAsync(IRole, RequestOptions)
  fullName: Discord.Rest.RestWebhookUser.Discord.IGuildUser.AddRoleAsync(Discord.IRole, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuildUser.AddRoleAsync
    path: ../src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
    startLine: 67
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nAdds the specified role to this user in the guild.\n"
  example: []
  syntax:
    content: Task IGuildUser.AddRoleAsync(IRole role, RequestOptions options)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to be added to the user.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous role addition operation.\n"
    content.vb: Function Discord.IGuildUser.AddRoleAsync(role As IRole, options As RequestOptions) As Task Implements IGuildUser.AddRoleAsync
  overload: Discord.Rest.RestWebhookUser.Discord#IGuildUser#AddRoleAsync*
  implements:
  - Discord.IGuildUser.AddRoleAsync(Discord.IRole,Discord.RequestOptions)
  nameWithType.vb: RestWebhookUser.Discord.IGuildUser.AddRoleAsync(IRole, RequestOptions)
  name.vb: Discord.IGuildUser.AddRoleAsync(IRole, RequestOptions)
- uid: Discord.Rest.RestWebhookUser.Discord#IGuildUser#AddRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestWebhookUser.Discord#IGuildUser#AddRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)
  id: Discord#IGuildUser#AddRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestWebhookUser
  langs:
  - csharp
  - vb
  name: IGuildUser.AddRolesAsync(IEnumerable<IRole>, RequestOptions)
  nameWithType: RestWebhookUser.IGuildUser.AddRolesAsync(IEnumerable<IRole>, RequestOptions)
  fullName: Discord.Rest.RestWebhookUser.Discord.IGuildUser.AddRolesAsync(System.Collections.Generic.IEnumerable<Discord.IRole>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuildUser.AddRolesAsync
    path: ../src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
    startLine: 71
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nAdds the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">roles</code> to this user in the guild.\n"
  example: []
  syntax:
    content: Task IGuildUser.AddRolesAsync(IEnumerable<IRole> roles, RequestOptions options)
    parameters:
    - id: roles
      type: System.Collections.Generic.IEnumerable{Discord.IRole}
      description: The roles to be added to the user.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous role addition operation.\n"
    content.vb: Function Discord.IGuildUser.AddRolesAsync(roles As IEnumerable(Of IRole), options As RequestOptions) As Task Implements IGuildUser.AddRolesAsync
  overload: Discord.Rest.RestWebhookUser.Discord#IGuildUser#AddRolesAsync*
  implements:
  - Discord.IGuildUser.AddRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)
  nameWithType.vb: RestWebhookUser.Discord.IGuildUser.AddRolesAsync(IEnumerable(Of IRole), RequestOptions)
  fullName.vb: Discord.Rest.RestWebhookUser.Discord.IGuildUser.AddRolesAsync(System.Collections.Generic.IEnumerable(Of Discord.IRole), Discord.RequestOptions)
  name.vb: Discord.IGuildUser.AddRolesAsync(IEnumerable(Of IRole), RequestOptions)
- uid: Discord.Rest.RestWebhookUser.Discord#IGuildUser#RemoveRoleAsync(Discord.IRole,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestWebhookUser.Discord#IGuildUser#RemoveRoleAsync(Discord.IRole,Discord.RequestOptions)
  id: Discord#IGuildUser#RemoveRoleAsync(Discord.IRole,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestWebhookUser
  langs:
  - csharp
  - vb
  name: IGuildUser.RemoveRoleAsync(IRole, RequestOptions)
  nameWithType: RestWebhookUser.IGuildUser.RemoveRoleAsync(IRole, RequestOptions)
  fullName: Discord.Rest.RestWebhookUser.Discord.IGuildUser.RemoveRoleAsync(Discord.IRole, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuildUser.RemoveRoleAsync
    path: ../src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
    startLine: 75
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nRemoves the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">role</code> from this user in the guild.\n"
  example: []
  syntax:
    content: Task IGuildUser.RemoveRoleAsync(IRole role, RequestOptions options)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to be removed from the user.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous role removal operation.\n"
    content.vb: Function Discord.IGuildUser.RemoveRoleAsync(role As IRole, options As RequestOptions) As Task Implements IGuildUser.RemoveRoleAsync
  overload: Discord.Rest.RestWebhookUser.Discord#IGuildUser#RemoveRoleAsync*
  implements:
  - Discord.IGuildUser.RemoveRoleAsync(Discord.IRole,Discord.RequestOptions)
  nameWithType.vb: RestWebhookUser.Discord.IGuildUser.RemoveRoleAsync(IRole, RequestOptions)
  name.vb: Discord.IGuildUser.RemoveRoleAsync(IRole, RequestOptions)
- uid: Discord.Rest.RestWebhookUser.Discord#IGuildUser#RemoveRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestWebhookUser.Discord#IGuildUser#RemoveRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)
  id: Discord#IGuildUser#RemoveRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestWebhookUser
  langs:
  - csharp
  - vb
  name: IGuildUser.RemoveRolesAsync(IEnumerable<IRole>, RequestOptions)
  nameWithType: RestWebhookUser.IGuildUser.RemoveRolesAsync(IEnumerable<IRole>, RequestOptions)
  fullName: Discord.Rest.RestWebhookUser.Discord.IGuildUser.RemoveRolesAsync(System.Collections.Generic.IEnumerable<Discord.IRole>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuildUser.RemoveRolesAsync
    path: ../src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
    startLine: 79
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nRemoves the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">roles</code> from this user in the guild.\n"
  example: []
  syntax:
    content: Task IGuildUser.RemoveRolesAsync(IEnumerable<IRole> roles, RequestOptions options)
    parameters:
    - id: roles
      type: System.Collections.Generic.IEnumerable{Discord.IRole}
      description: The roles to be removed from the user.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous role removal operation.\n"
    content.vb: Function Discord.IGuildUser.RemoveRolesAsync(roles As IEnumerable(Of IRole), options As RequestOptions) As Task Implements IGuildUser.RemoveRolesAsync
  overload: Discord.Rest.RestWebhookUser.Discord#IGuildUser#RemoveRolesAsync*
  implements:
  - Discord.IGuildUser.RemoveRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)
  nameWithType.vb: RestWebhookUser.Discord.IGuildUser.RemoveRolesAsync(IEnumerable(Of IRole), RequestOptions)
  fullName.vb: Discord.Rest.RestWebhookUser.Discord.IGuildUser.RemoveRolesAsync(System.Collections.Generic.IEnumerable(Of Discord.IRole), Discord.RequestOptions)
  name.vb: Discord.IGuildUser.RemoveRolesAsync(IEnumerable(Of IRole), RequestOptions)
- uid: Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsDeafened
  commentId: P:Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsDeafened
  id: Discord#IVoiceState#IsDeafened
  isEii: true
  parent: Discord.Rest.RestWebhookUser
  langs:
  - csharp
  - vb
  name: IVoiceState.IsDeafened
  nameWithType: RestWebhookUser.IVoiceState.IsDeafened
  fullName: Discord.Rest.RestWebhookUser.Discord.IVoiceState.IsDeafened
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IVoiceState.IsDeafened
    path: ../src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
    startLine: 84
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a value that indicates whether this user is deafened by the guild.\n"
  example: []
  syntax:
    content: bool IVoiceState.IsDeafened { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the user is deafened (i.e. not permitted to listen to or speak to others) by the guild;\notherwise <code>false</code>.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IVoiceState.IsDeafened As Boolean Implements IVoiceState.IsDeafened
  overload: Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsDeafened*
  implements:
  - Discord.IVoiceState.IsDeafened
  nameWithType.vb: RestWebhookUser.Discord.IVoiceState.IsDeafened
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IVoiceState.IsDeafened
- uid: Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsMuted
  commentId: P:Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsMuted
  id: Discord#IVoiceState#IsMuted
  isEii: true
  parent: Discord.Rest.RestWebhookUser
  langs:
  - csharp
  - vb
  name: IVoiceState.IsMuted
  nameWithType: RestWebhookUser.IVoiceState.IsMuted
  fullName: Discord.Rest.RestWebhookUser.Discord.IVoiceState.IsMuted
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IVoiceState.IsMuted
    path: ../src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
    startLine: 86
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a value that indicates whether this user is muted (i.e. not permitted to speak via voice) by the\nguild.\n"
  example: []
  syntax:
    content: bool IVoiceState.IsMuted { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this user is muted by the guild; otherwise <code>false</code>.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IVoiceState.IsMuted As Boolean Implements IVoiceState.IsMuted
  overload: Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsMuted*
  implements:
  - Discord.IVoiceState.IsMuted
  nameWithType.vb: RestWebhookUser.Discord.IVoiceState.IsMuted
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IVoiceState.IsMuted
- uid: Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsSelfDeafened
  commentId: P:Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsSelfDeafened
  id: Discord#IVoiceState#IsSelfDeafened
  isEii: true
  parent: Discord.Rest.RestWebhookUser
  langs:
  - csharp
  - vb
  name: IVoiceState.IsSelfDeafened
  nameWithType: RestWebhookUser.IVoiceState.IsSelfDeafened
  fullName: Discord.Rest.RestWebhookUser.Discord.IVoiceState.IsSelfDeafened
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IVoiceState.IsSelfDeafened
    path: ../src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
    startLine: 88
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a value that indicates whether this user has marked themselves as deafened.\n"
  example: []
  syntax:
    content: bool IVoiceState.IsSelfDeafened { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this user has deafened themselves (i.e. not permitted to listen to or speak to others); otherwise <code>false</code>.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IVoiceState.IsSelfDeafened As Boolean Implements IVoiceState.IsSelfDeafened
  overload: Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsSelfDeafened*
  implements:
  - Discord.IVoiceState.IsSelfDeafened
  nameWithType.vb: RestWebhookUser.Discord.IVoiceState.IsSelfDeafened
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IVoiceState.IsSelfDeafened
- uid: Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsSelfMuted
  commentId: P:Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsSelfMuted
  id: Discord#IVoiceState#IsSelfMuted
  isEii: true
  parent: Discord.Rest.RestWebhookUser
  langs:
  - csharp
  - vb
  name: IVoiceState.IsSelfMuted
  nameWithType: RestWebhookUser.IVoiceState.IsSelfMuted
  fullName: Discord.Rest.RestWebhookUser.Discord.IVoiceState.IsSelfMuted
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IVoiceState.IsSelfMuted
    path: ../src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
    startLine: 90
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a value that indicates whether this user has marked themselves as muted (i.e. not permitted to\nspeak via voice).\n"
  example: []
  syntax:
    content: bool IVoiceState.IsSelfMuted { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this user has muted themselves; otherwise <code>false</code>.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IVoiceState.IsSelfMuted As Boolean Implements IVoiceState.IsSelfMuted
  overload: Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsSelfMuted*
  implements:
  - Discord.IVoiceState.IsSelfMuted
  nameWithType.vb: RestWebhookUser.Discord.IVoiceState.IsSelfMuted
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IVoiceState.IsSelfMuted
- uid: Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsSuppressed
  commentId: P:Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsSuppressed
  id: Discord#IVoiceState#IsSuppressed
  isEii: true
  parent: Discord.Rest.RestWebhookUser
  langs:
  - csharp
  - vb
  name: IVoiceState.IsSuppressed
  nameWithType: RestWebhookUser.IVoiceState.IsSuppressed
  fullName: Discord.Rest.RestWebhookUser.Discord.IVoiceState.IsSuppressed
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IVoiceState.IsSuppressed
    path: ../src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
    startLine: 92
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a value that indicates whether the user is muted by the current user.\n"
  example: []
  syntax:
    content: bool IVoiceState.IsSuppressed { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the guild is temporarily blocking audio to/from this user; otherwise <code>false</code>.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IVoiceState.IsSuppressed As Boolean Implements IVoiceState.IsSuppressed
  overload: Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsSuppressed*
  implements:
  - Discord.IVoiceState.IsSuppressed
  nameWithType.vb: RestWebhookUser.Discord.IVoiceState.IsSuppressed
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IVoiceState.IsSuppressed
- uid: Discord.Rest.RestWebhookUser.Discord#IVoiceState#VoiceChannel
  commentId: P:Discord.Rest.RestWebhookUser.Discord#IVoiceState#VoiceChannel
  id: Discord#IVoiceState#VoiceChannel
  isEii: true
  parent: Discord.Rest.RestWebhookUser
  langs:
  - csharp
  - vb
  name: IVoiceState.VoiceChannel
  nameWithType: RestWebhookUser.IVoiceState.VoiceChannel
  fullName: Discord.Rest.RestWebhookUser.Discord.IVoiceState.VoiceChannel
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IVoiceState.VoiceChannel
    path: ../src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
    startLine: 94
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the voice channel this user is currently in.\n"
  example: []
  syntax:
    content: IVoiceChannel IVoiceState.VoiceChannel { get; }
    parameters: []
    return:
      type: Discord.IVoiceChannel
      description: "\nA generic voice channel object representing the voice channel that the user is currently in; <code>null</code>\nif none.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IVoiceState.VoiceChannel As IVoiceChannel Implements IVoiceState.VoiceChannel
  overload: Discord.Rest.RestWebhookUser.Discord#IVoiceState#VoiceChannel*
  implements:
  - Discord.IVoiceState.VoiceChannel
  nameWithType.vb: RestWebhookUser.Discord.IVoiceState.VoiceChannel
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IVoiceState.VoiceChannel
- uid: Discord.Rest.RestWebhookUser.Discord#IVoiceState#VoiceSessionId
  commentId: P:Discord.Rest.RestWebhookUser.Discord#IVoiceState#VoiceSessionId
  id: Discord#IVoiceState#VoiceSessionId
  isEii: true
  parent: Discord.Rest.RestWebhookUser
  langs:
  - csharp
  - vb
  name: IVoiceState.VoiceSessionId
  nameWithType: RestWebhookUser.IVoiceState.VoiceSessionId
  fullName: Discord.Rest.RestWebhookUser.Discord.IVoiceState.VoiceSessionId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IVoiceState.VoiceSessionId
    path: ../src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
    startLine: 96
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the unique identifier for this user&apos;s voice session.\n"
  example: []
  syntax:
    content: string IVoiceState.VoiceSessionId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly WriteOnly Property Discord.IVoiceState.VoiceSessionId As String Implements IVoiceState.VoiceSessionId
  overload: Discord.Rest.RestWebhookUser.Discord#IVoiceState#VoiceSessionId*
  implements:
  - Discord.IVoiceState.VoiceSessionId
  nameWithType.vb: RestWebhookUser.Discord.IVoiceState.VoiceSessionId
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IVoiceState.VoiceSessionId
- uid: Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsStreaming
  commentId: P:Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsStreaming
  id: Discord#IVoiceState#IsStreaming
  isEii: true
  parent: Discord.Rest.RestWebhookUser
  langs:
  - csharp
  - vb
  name: IVoiceState.IsStreaming
  nameWithType: RestWebhookUser.IVoiceState.IsStreaming
  fullName: Discord.Rest.RestWebhookUser.Discord.IVoiceState.IsStreaming
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IVoiceState.IsStreaming
    path: ../src/Discord.Net.Rest/Entities/Users/RestWebhookUser.cs
    startLine: 98
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a value that indicates if this user is streaming in a voice channel.\n"
  example: []
  syntax:
    content: bool IVoiceState.IsStreaming { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the user is streaming; otherwise <code>false</code>.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IVoiceState.IsStreaming As Boolean Implements IVoiceState.IsStreaming
  overload: Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsStreaming*
  implements:
  - Discord.IVoiceState.IsStreaming
  nameWithType.vb: RestWebhookUser.Discord.IVoiceState.IsStreaming
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IVoiceState.IsStreaming
references:
- uid: Discord.Rest
  commentId: N:Discord.Rest
  name: Discord.Rest
  nameWithType: Discord.Rest
  fullName: Discord.Rest
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Rest.RestEntity{System.UInt64}
  commentId: T:Discord.Rest.RestEntity{System.UInt64}
  parent: Discord.Rest
  definition: Discord.Rest.RestEntity`1
  name: RestEntity<UInt64>
  nameWithType: RestEntity<UInt64>
  fullName: Discord.Rest.RestEntity<System.UInt64>
  nameWithType.vb: RestEntity(Of UInt64)
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64)
  name.vb: RestEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestUser
  commentId: T:Discord.Rest.RestUser
  parent: Discord.Rest
  name: RestUser
  nameWithType: RestUser
  fullName: Discord.Rest.RestUser
- uid: Discord.IUpdateable
  commentId: T:Discord.IUpdateable
  parent: Discord
  name: IUpdateable
  nameWithType: IUpdateable
  fullName: Discord.IUpdateable
- uid: Discord.IWebhookUser
  commentId: T:Discord.IWebhookUser
  parent: Discord
  name: IWebhookUser
  nameWithType: IWebhookUser
  fullName: Discord.IWebhookUser
- uid: Discord.IGuildUser
  commentId: T:Discord.IGuildUser
  parent: Discord
  name: IGuildUser
  nameWithType: IGuildUser
  fullName: Discord.IGuildUser
- uid: Discord.IUser
  commentId: T:Discord.IUser
  parent: Discord
  name: IUser
  nameWithType: IUser
  fullName: Discord.IUser
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMentionable
  commentId: T:Discord.IMentionable
  parent: Discord
  name: IMentionable
  nameWithType: IMentionable
  fullName: Discord.IMentionable
- uid: Discord.IPresence
  commentId: T:Discord.IPresence
  parent: Discord
  name: IPresence
  nameWithType: IPresence
  fullName: Discord.IPresence
- uid: Discord.IVoiceState
  commentId: T:Discord.IVoiceState
  parent: Discord
  name: IVoiceState
  nameWithType: IVoiceState
  fullName: Discord.IVoiceState
- uid: Discord.Rest.RestUser.IsBot
  commentId: P:Discord.Rest.RestUser.IsBot
  parent: Discord.Rest.RestUser
  name: IsBot
  nameWithType: RestUser.IsBot
  fullName: Discord.Rest.RestUser.IsBot
- uid: Discord.Rest.RestUser.Username
  commentId: P:Discord.Rest.RestUser.Username
  parent: Discord.Rest.RestUser
  name: Username
  nameWithType: RestUser.Username
  fullName: Discord.Rest.RestUser.Username
- uid: Discord.Rest.RestUser.DiscriminatorValue
  commentId: P:Discord.Rest.RestUser.DiscriminatorValue
  parent: Discord.Rest.RestUser
  name: DiscriminatorValue
  nameWithType: RestUser.DiscriminatorValue
  fullName: Discord.Rest.RestUser.DiscriminatorValue
- uid: Discord.Rest.RestUser.AvatarId
  commentId: P:Discord.Rest.RestUser.AvatarId
  parent: Discord.Rest.RestUser
  name: AvatarId
  nameWithType: RestUser.AvatarId
  fullName: Discord.Rest.RestUser.AvatarId
- uid: Discord.Rest.RestUser.CreatedAt
  commentId: P:Discord.Rest.RestUser.CreatedAt
  parent: Discord.Rest.RestUser
  name: CreatedAt
  nameWithType: RestUser.CreatedAt
  fullName: Discord.Rest.RestUser.CreatedAt
- uid: Discord.Rest.RestUser.Discriminator
  commentId: P:Discord.Rest.RestUser.Discriminator
  parent: Discord.Rest.RestUser
  name: Discriminator
  nameWithType: RestUser.Discriminator
  fullName: Discord.Rest.RestUser.Discriminator
- uid: Discord.Rest.RestUser.Mention
  commentId: P:Discord.Rest.RestUser.Mention
  parent: Discord.Rest.RestUser
  name: Mention
  nameWithType: RestUser.Mention
  fullName: Discord.Rest.RestUser.Mention
- uid: Discord.Rest.RestUser.Activity
  commentId: P:Discord.Rest.RestUser.Activity
  parent: Discord.Rest.RestUser
  name: Activity
  nameWithType: RestUser.Activity
  fullName: Discord.Rest.RestUser.Activity
- uid: Discord.Rest.RestUser.Status
  commentId: P:Discord.Rest.RestUser.Status
  parent: Discord.Rest.RestUser
  name: Status
  nameWithType: RestUser.Status
  fullName: Discord.Rest.RestUser.Status
- uid: Discord.Rest.RestUser.ActiveClients
  commentId: P:Discord.Rest.RestUser.ActiveClients
  parent: Discord.Rest.RestUser
  name: ActiveClients
  nameWithType: RestUser.ActiveClients
  fullName: Discord.Rest.RestUser.ActiveClients
- uid: Discord.Rest.RestUser.UpdateAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestUser.UpdateAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestUser
  name: UpdateAsync(RequestOptions)
  nameWithType: RestUser.UpdateAsync(RequestOptions)
  fullName: Discord.Rest.RestUser.UpdateAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestUser.UpdateAsync(Discord.RequestOptions)
    name: UpdateAsync
    nameWithType: RestUser.UpdateAsync
    fullName: Discord.Rest.RestUser.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestUser.UpdateAsync(Discord.RequestOptions)
    name: UpdateAsync
    nameWithType: RestUser.UpdateAsync
    fullName: Discord.Rest.RestUser.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestUser
  name: GetOrCreateDMChannelAsync(RequestOptions)
  nameWithType: RestUser.GetOrCreateDMChannelAsync(RequestOptions)
  fullName: Discord.Rest.RestUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
    name: GetOrCreateDMChannelAsync
    nameWithType: RestUser.GetOrCreateDMChannelAsync
    fullName: Discord.Rest.RestUser.GetOrCreateDMChannelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
    name: GetOrCreateDMChannelAsync
    nameWithType: RestUser.GetOrCreateDMChannelAsync
    fullName: Discord.Rest.RestUser.GetOrCreateDMChannelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestUser.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
  commentId: M:Discord.Rest.RestUser.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
  parent: Discord.Rest.RestUser
  isExternal: true
  name: GetAvatarUrl(ImageFormat, UInt16)
  nameWithType: RestUser.GetAvatarUrl(ImageFormat, UInt16)
  fullName: Discord.Rest.RestUser.GetAvatarUrl(Discord.ImageFormat, System.UInt16)
  spec.csharp:
  - uid: Discord.Rest.RestUser.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
    name: GetAvatarUrl
    nameWithType: RestUser.GetAvatarUrl
    fullName: Discord.Rest.RestUser.GetAvatarUrl
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.ImageFormat
    name: ImageFormat
    nameWithType: ImageFormat
    fullName: Discord.ImageFormat
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestUser.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
    name: GetAvatarUrl
    nameWithType: RestUser.GetAvatarUrl
    fullName: Discord.Rest.RestUser.GetAvatarUrl
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.ImageFormat
    name: ImageFormat
    nameWithType: ImageFormat
    fullName: Discord.ImageFormat
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestUser.GetDefaultAvatarUrl
  commentId: M:Discord.Rest.RestUser.GetDefaultAvatarUrl
  parent: Discord.Rest.RestUser
  name: GetDefaultAvatarUrl()
  nameWithType: RestUser.GetDefaultAvatarUrl()
  fullName: Discord.Rest.RestUser.GetDefaultAvatarUrl()
  spec.csharp:
  - uid: Discord.Rest.RestUser.GetDefaultAvatarUrl
    name: GetDefaultAvatarUrl
    nameWithType: RestUser.GetDefaultAvatarUrl
    fullName: Discord.Rest.RestUser.GetDefaultAvatarUrl
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestUser.GetDefaultAvatarUrl
    name: GetDefaultAvatarUrl
    nameWithType: RestUser.GetDefaultAvatarUrl
    fullName: Discord.Rest.RestUser.GetDefaultAvatarUrl
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestUser.ToString
  commentId: M:Discord.Rest.RestUser.ToString
  parent: Discord.Rest.RestUser
  name: ToString()
  nameWithType: RestUser.ToString()
  fullName: Discord.Rest.RestUser.ToString()
  spec.csharp:
  - uid: Discord.Rest.RestUser.ToString
    name: ToString
    nameWithType: RestUser.ToString
    fullName: Discord.Rest.RestUser.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestUser.ToString
    name: ToString
    nameWithType: RestUser.ToString
    fullName: Discord.Rest.RestUser.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestUser.Discord#IUser#GetOrCreateDMChannelAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestUser.Discord#IUser#GetOrCreateDMChannelAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestUser
  name: IUser.GetOrCreateDMChannelAsync(RequestOptions)
  nameWithType: RestUser.IUser.GetOrCreateDMChannelAsync(RequestOptions)
  fullName: Discord.Rest.RestUser.Discord.IUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
  nameWithType.vb: RestUser.Discord.IUser.GetOrCreateDMChannelAsync(RequestOptions)
  name.vb: Discord.IUser.GetOrCreateDMChannelAsync(RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestUser.Discord#IUser#GetOrCreateDMChannelAsync(Discord.RequestOptions)
    name: IUser.GetOrCreateDMChannelAsync
    nameWithType: RestUser.IUser.GetOrCreateDMChannelAsync
    fullName: Discord.Rest.RestUser.Discord.IUser.GetOrCreateDMChannelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestUser.Discord#IUser#GetOrCreateDMChannelAsync(Discord.RequestOptions)
    name: Discord.IUser.GetOrCreateDMChannelAsync
    nameWithType: RestUser.Discord.IUser.GetOrCreateDMChannelAsync
    fullName: Discord.Rest.RestUser.Discord.IUser.GetOrCreateDMChannelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestEntity{System.UInt64}.Id
  commentId: P:Discord.Rest.RestEntity{System.UInt64}.Id
  parent: Discord.Rest.RestEntity{System.UInt64}
  definition: Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<UInt64>.Id
  fullName: Discord.Rest.RestEntity<System.UInt64>.Id
  nameWithType.vb: RestEntity(Of UInt64).Id
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64).Id
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Rest.RestEntity`1
  commentId: T:Discord.Rest.RestEntity`1
  name: RestEntity<T>
  nameWithType: RestEntity<T>
  fullName: Discord.Rest.RestEntity<T>
  nameWithType.vb: RestEntity(Of T)
  fullName.vb: Discord.Rest.RestEntity(Of T)
  name.vb: RestEntity(Of T)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestEntity`1.Id
  commentId: P:Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<T>.Id
  fullName: Discord.Rest.RestEntity<T>.Id
  nameWithType.vb: RestEntity(Of T).Id
  fullName.vb: Discord.Rest.RestEntity(Of T).Id
- uid: Discord.Rest.RestWebhookUser.WebhookId*
  commentId: Overload:Discord.Rest.RestWebhookUser.WebhookId
  name: WebhookId
  nameWithType: RestWebhookUser.WebhookId
  fullName: Discord.Rest.RestWebhookUser.WebhookId
- uid: Discord.IWebhookUser.WebhookId
  commentId: P:Discord.IWebhookUser.WebhookId
  parent: Discord.IWebhookUser
  name: WebhookId
  nameWithType: IWebhookUser.WebhookId
  fullName: Discord.IWebhookUser.WebhookId
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Discord.Rest.RestWebhookUser.PremiumSince*
  commentId: Overload:Discord.Rest.RestWebhookUser.PremiumSince
  name: PremiumSince
  nameWithType: RestWebhookUser.PremiumSince
  fullName: Discord.Rest.RestWebhookUser.PremiumSince
- uid: Discord.IGuildUser.PremiumSince
  commentId: P:Discord.IGuildUser.PremiumSince
  parent: Discord.IGuildUser
  name: PremiumSince
  nameWithType: IGuildUser.PremiumSince
  fullName: Discord.IGuildUser.PremiumSince
- uid: System.Nullable{System.DateTimeOffset}
  commentId: T:System.Nullable{System.DateTimeOffset}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTimeOffset>
  nameWithType: Nullable<DateTimeOffset>
  fullName: System.Nullable<System.DateTimeOffset>
  nameWithType.vb: Nullable(Of DateTimeOffset)
  fullName.vb: System.Nullable(Of System.DateTimeOffset)
  name.vb: Nullable(Of DateTimeOffset)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestUser.IsWebhook
  commentId: P:Discord.Rest.RestUser.IsWebhook
  parent: Discord.Rest.RestUser
  name: IsWebhook
  nameWithType: RestUser.IsWebhook
  fullName: Discord.Rest.RestUser.IsWebhook
- uid: Discord.Rest.RestWebhookUser.IsWebhook*
  commentId: Overload:Discord.Rest.RestWebhookUser.IsWebhook
  name: IsWebhook
  nameWithType: RestWebhookUser.IsWebhook
  fullName: Discord.Rest.RestWebhookUser.IsWebhook
- uid: Discord.IUser.IsWebhook
  commentId: P:Discord.IUser.IsWebhook
  parent: Discord.IUser
  name: IsWebhook
  nameWithType: IUser.IsWebhook
  fullName: Discord.IUser.IsWebhook
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.Rest.RestWebhookUser.GuildId*
  commentId: Overload:Discord.Rest.RestWebhookUser.GuildId
  name: GuildId
  nameWithType: RestWebhookUser.GuildId
  fullName: Discord.Rest.RestWebhookUser.GuildId
- uid: Discord.IGuildUser.GuildId
  commentId: P:Discord.IGuildUser.GuildId
  parent: Discord.IGuildUser
  name: GuildId
  nameWithType: IGuildUser.GuildId
  fullName: Discord.IGuildUser.GuildId
- uid: Discord.Rest.RestWebhookUser.Discord#IGuildUser#Guild*
  commentId: Overload:Discord.Rest.RestWebhookUser.Discord#IGuildUser#Guild
  name: IGuildUser.Guild
  nameWithType: RestWebhookUser.IGuildUser.Guild
  fullName: Discord.Rest.RestWebhookUser.Discord.IGuildUser.Guild
  nameWithType.vb: RestWebhookUser.Discord.IGuildUser.Guild
  name.vb: Discord.IGuildUser.Guild
- uid: Discord.IGuildUser.Guild
  commentId: P:Discord.IGuildUser.Guild
  parent: Discord.IGuildUser
  name: Guild
  nameWithType: IGuildUser.Guild
  fullName: Discord.IGuildUser.Guild
- uid: Discord.IGuild
  commentId: T:Discord.IGuild
  parent: Discord
  name: IGuild
  nameWithType: IGuild
  fullName: Discord.IGuild
- uid: Discord.Rest.RestWebhookUser.Discord#IGuildUser#RoleIds*
  commentId: Overload:Discord.Rest.RestWebhookUser.Discord#IGuildUser#RoleIds
  name: IGuildUser.RoleIds
  nameWithType: RestWebhookUser.IGuildUser.RoleIds
  fullName: Discord.Rest.RestWebhookUser.Discord.IGuildUser.RoleIds
  nameWithType.vb: RestWebhookUser.Discord.IGuildUser.RoleIds
  name.vb: Discord.IGuildUser.RoleIds
- uid: Discord.IGuildUser.RoleIds
  commentId: P:Discord.IGuildUser.RoleIds
  parent: Discord.IGuildUser
  name: RoleIds
  nameWithType: IGuildUser.RoleIds
  fullName: Discord.IGuildUser.RoleIds
- uid: System.Collections.Generic.IReadOnlyCollection{System.UInt64}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{System.UInt64}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<UInt64>
  nameWithType: IReadOnlyCollection<UInt64>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.UInt64>
  nameWithType.vb: IReadOnlyCollection(Of UInt64)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of System.UInt64)
  name.vb: IReadOnlyCollection(Of UInt64)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Discord.Rest.RestWebhookUser.Discord#IGuildUser#JoinedAt*
  commentId: Overload:Discord.Rest.RestWebhookUser.Discord#IGuildUser#JoinedAt
  name: IGuildUser.JoinedAt
  nameWithType: RestWebhookUser.IGuildUser.JoinedAt
  fullName: Discord.Rest.RestWebhookUser.Discord.IGuildUser.JoinedAt
  nameWithType.vb: RestWebhookUser.Discord.IGuildUser.JoinedAt
  name.vb: Discord.IGuildUser.JoinedAt
- uid: Discord.IGuildUser.JoinedAt
  commentId: P:Discord.IGuildUser.JoinedAt
  parent: Discord.IGuildUser
  name: JoinedAt
  nameWithType: IGuildUser.JoinedAt
  fullName: Discord.IGuildUser.JoinedAt
- uid: Discord.Rest.RestWebhookUser.Discord#IGuildUser#Nickname*
  commentId: Overload:Discord.Rest.RestWebhookUser.Discord#IGuildUser#Nickname
  name: IGuildUser.Nickname
  nameWithType: RestWebhookUser.IGuildUser.Nickname
  fullName: Discord.Rest.RestWebhookUser.Discord.IGuildUser.Nickname
  nameWithType.vb: RestWebhookUser.Discord.IGuildUser.Nickname
  name.vb: Discord.IGuildUser.Nickname
- uid: Discord.IGuildUser.Nickname
  commentId: P:Discord.IGuildUser.Nickname
  parent: Discord.IGuildUser
  name: Nickname
  nameWithType: IGuildUser.Nickname
  fullName: Discord.IGuildUser.Nickname
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.Rest.RestWebhookUser.Discord#IGuildUser#GuildPermissions*
  commentId: Overload:Discord.Rest.RestWebhookUser.Discord#IGuildUser#GuildPermissions
  name: IGuildUser.GuildPermissions
  nameWithType: RestWebhookUser.IGuildUser.GuildPermissions
  fullName: Discord.Rest.RestWebhookUser.Discord.IGuildUser.GuildPermissions
  nameWithType.vb: RestWebhookUser.Discord.IGuildUser.GuildPermissions
  name.vb: Discord.IGuildUser.GuildPermissions
- uid: Discord.IGuildUser.GuildPermissions
  commentId: P:Discord.IGuildUser.GuildPermissions
  parent: Discord.IGuildUser
  name: GuildPermissions
  nameWithType: IGuildUser.GuildPermissions
  fullName: Discord.IGuildUser.GuildPermissions
- uid: Discord.GuildPermissions
  commentId: T:Discord.GuildPermissions
  parent: Discord
  name: GuildPermissions
  nameWithType: GuildPermissions
  fullName: Discord.GuildPermissions
- uid: Discord.Rest.RestWebhookUser.Discord#IGuildUser#GetPermissions*
  commentId: Overload:Discord.Rest.RestWebhookUser.Discord#IGuildUser#GetPermissions
  name: IGuildUser.GetPermissions
  nameWithType: RestWebhookUser.IGuildUser.GetPermissions
  fullName: Discord.Rest.RestWebhookUser.Discord.IGuildUser.GetPermissions
  nameWithType.vb: RestWebhookUser.Discord.IGuildUser.GetPermissions
  name.vb: Discord.IGuildUser.GetPermissions
- uid: Discord.IGuildUser.GetPermissions(Discord.IGuildChannel)
  commentId: M:Discord.IGuildUser.GetPermissions(Discord.IGuildChannel)
  parent: Discord.IGuildUser
  name: GetPermissions(IGuildChannel)
  nameWithType: IGuildUser.GetPermissions(IGuildChannel)
  fullName: Discord.IGuildUser.GetPermissions(Discord.IGuildChannel)
  spec.csharp:
  - uid: Discord.IGuildUser.GetPermissions(Discord.IGuildChannel)
    name: GetPermissions
    nameWithType: IGuildUser.GetPermissions
    fullName: Discord.IGuildUser.GetPermissions
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IGuildChannel
    name: IGuildChannel
    nameWithType: IGuildChannel
    fullName: Discord.IGuildChannel
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuildUser.GetPermissions(Discord.IGuildChannel)
    name: GetPermissions
    nameWithType: IGuildUser.GetPermissions
    fullName: Discord.IGuildUser.GetPermissions
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IGuildChannel
    name: IGuildChannel
    nameWithType: IGuildChannel
    fullName: Discord.IGuildChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuildChannel
  commentId: T:Discord.IGuildChannel
  parent: Discord
  name: IGuildChannel
  nameWithType: IGuildChannel
  fullName: Discord.IGuildChannel
- uid: Discord.ChannelPermissions
  commentId: T:Discord.ChannelPermissions
  parent: Discord
  name: ChannelPermissions
  nameWithType: ChannelPermissions
  fullName: Discord.ChannelPermissions
- uid: Discord.Rest.RestWebhookUser.Discord#IGuildUser#KickAsync*
  commentId: Overload:Discord.Rest.RestWebhookUser.Discord#IGuildUser#KickAsync
  name: IGuildUser.KickAsync
  nameWithType: RestWebhookUser.IGuildUser.KickAsync
  fullName: Discord.Rest.RestWebhookUser.Discord.IGuildUser.KickAsync
  nameWithType.vb: RestWebhookUser.Discord.IGuildUser.KickAsync
  name.vb: Discord.IGuildUser.KickAsync
- uid: Discord.IGuildUser.KickAsync(System.String,Discord.RequestOptions)
  commentId: M:Discord.IGuildUser.KickAsync(System.String,Discord.RequestOptions)
  parent: Discord.IGuildUser
  isExternal: true
  name: KickAsync(String, RequestOptions)
  nameWithType: IGuildUser.KickAsync(String, RequestOptions)
  fullName: Discord.IGuildUser.KickAsync(System.String, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuildUser.KickAsync(System.String,Discord.RequestOptions)
    name: KickAsync
    nameWithType: IGuildUser.KickAsync
    fullName: Discord.IGuildUser.KickAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuildUser.KickAsync(System.String,Discord.RequestOptions)
    name: KickAsync
    nameWithType: IGuildUser.KickAsync
    fullName: Discord.IGuildUser.KickAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Discord.Rest.RestWebhookUser.Discord#IGuildUser#ModifyAsync*
  commentId: Overload:Discord.Rest.RestWebhookUser.Discord#IGuildUser#ModifyAsync
  name: IGuildUser.ModifyAsync
  nameWithType: RestWebhookUser.IGuildUser.ModifyAsync
  fullName: Discord.Rest.RestWebhookUser.Discord.IGuildUser.ModifyAsync
  nameWithType.vb: RestWebhookUser.Discord.IGuildUser.ModifyAsync
  name.vb: Discord.IGuildUser.ModifyAsync
- uid: Discord.IGuildUser.ModifyAsync(System.Action{Discord.GuildUserProperties},Discord.RequestOptions)
  commentId: M:Discord.IGuildUser.ModifyAsync(System.Action{Discord.GuildUserProperties},Discord.RequestOptions)
  parent: Discord.IGuildUser
  isExternal: true
  name: ModifyAsync(Action<GuildUserProperties>, RequestOptions)
  nameWithType: IGuildUser.ModifyAsync(Action<GuildUserProperties>, RequestOptions)
  fullName: Discord.IGuildUser.ModifyAsync(System.Action<Discord.GuildUserProperties>, Discord.RequestOptions)
  nameWithType.vb: IGuildUser.ModifyAsync(Action(Of GuildUserProperties), RequestOptions)
  fullName.vb: Discord.IGuildUser.ModifyAsync(System.Action(Of Discord.GuildUserProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of GuildUserProperties), RequestOptions)
  spec.csharp:
  - uid: Discord.IGuildUser.ModifyAsync(System.Action{Discord.GuildUserProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: IGuildUser.ModifyAsync
    fullName: Discord.IGuildUser.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildUserProperties
    name: GuildUserProperties
    nameWithType: GuildUserProperties
    fullName: Discord.GuildUserProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuildUser.ModifyAsync(System.Action{Discord.GuildUserProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: IGuildUser.ModifyAsync
    fullName: Discord.IGuildUser.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildUserProperties
    name: GuildUserProperties
    nameWithType: GuildUserProperties
    fullName: Discord.GuildUserProperties
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{Discord.GuildUserProperties}
  commentId: T:System.Action{Discord.GuildUserProperties}
  parent: System
  definition: System.Action`1
  name: Action<GuildUserProperties>
  nameWithType: Action<GuildUserProperties>
  fullName: System.Action<Discord.GuildUserProperties>
  nameWithType.vb: Action(Of GuildUserProperties)
  fullName.vb: System.Action(Of Discord.GuildUserProperties)
  name.vb: Action(Of GuildUserProperties)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildUserProperties
    name: GuildUserProperties
    nameWithType: GuildUserProperties
    fullName: Discord.GuildUserProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildUserProperties
    name: GuildUserProperties
    nameWithType: GuildUserProperties
    fullName: Discord.GuildUserProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestWebhookUser.Discord#IGuildUser#AddRoleAsync*
  commentId: Overload:Discord.Rest.RestWebhookUser.Discord#IGuildUser#AddRoleAsync
  name: IGuildUser.AddRoleAsync
  nameWithType: RestWebhookUser.IGuildUser.AddRoleAsync
  fullName: Discord.Rest.RestWebhookUser.Discord.IGuildUser.AddRoleAsync
  nameWithType.vb: RestWebhookUser.Discord.IGuildUser.AddRoleAsync
  name.vb: Discord.IGuildUser.AddRoleAsync
- uid: Discord.IGuildUser.AddRoleAsync(Discord.IRole,Discord.RequestOptions)
  commentId: M:Discord.IGuildUser.AddRoleAsync(Discord.IRole,Discord.RequestOptions)
  parent: Discord.IGuildUser
  name: AddRoleAsync(IRole, RequestOptions)
  nameWithType: IGuildUser.AddRoleAsync(IRole, RequestOptions)
  fullName: Discord.IGuildUser.AddRoleAsync(Discord.IRole, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuildUser.AddRoleAsync(Discord.IRole,Discord.RequestOptions)
    name: AddRoleAsync
    nameWithType: IGuildUser.AddRoleAsync
    fullName: Discord.IGuildUser.AddRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuildUser.AddRoleAsync(Discord.IRole,Discord.RequestOptions)
    name: AddRoleAsync
    nameWithType: IGuildUser.AddRoleAsync
    fullName: Discord.IGuildUser.AddRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IRole
  commentId: T:Discord.IRole
  parent: Discord
  name: IRole
  nameWithType: IRole
  fullName: Discord.IRole
- uid: Discord.Rest.RestWebhookUser.Discord#IGuildUser#AddRolesAsync*
  commentId: Overload:Discord.Rest.RestWebhookUser.Discord#IGuildUser#AddRolesAsync
  name: IGuildUser.AddRolesAsync
  nameWithType: RestWebhookUser.IGuildUser.AddRolesAsync
  fullName: Discord.Rest.RestWebhookUser.Discord.IGuildUser.AddRolesAsync
  nameWithType.vb: RestWebhookUser.Discord.IGuildUser.AddRolesAsync
  name.vb: Discord.IGuildUser.AddRolesAsync
- uid: Discord.IGuildUser.AddRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)
  commentId: M:Discord.IGuildUser.AddRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)
  parent: Discord.IGuildUser
  isExternal: true
  name: AddRolesAsync(IEnumerable<IRole>, RequestOptions)
  nameWithType: IGuildUser.AddRolesAsync(IEnumerable<IRole>, RequestOptions)
  fullName: Discord.IGuildUser.AddRolesAsync(System.Collections.Generic.IEnumerable<Discord.IRole>, Discord.RequestOptions)
  nameWithType.vb: IGuildUser.AddRolesAsync(IEnumerable(Of IRole), RequestOptions)
  fullName.vb: Discord.IGuildUser.AddRolesAsync(System.Collections.Generic.IEnumerable(Of Discord.IRole), Discord.RequestOptions)
  name.vb: AddRolesAsync(IEnumerable(Of IRole), RequestOptions)
  spec.csharp:
  - uid: Discord.IGuildUser.AddRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)
    name: AddRolesAsync
    nameWithType: IGuildUser.AddRolesAsync
    fullName: Discord.IGuildUser.AddRolesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuildUser.AddRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)
    name: AddRolesAsync
    nameWithType: IGuildUser.AddRolesAsync
    fullName: Discord.IGuildUser.AddRolesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Discord.IRole}
  commentId: T:System.Collections.Generic.IEnumerable{Discord.IRole}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IRole>
  nameWithType: IEnumerable<IRole>
  fullName: System.Collections.Generic.IEnumerable<Discord.IRole>
  nameWithType.vb: IEnumerable(Of IRole)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Discord.IRole)
  name.vb: IEnumerable(Of IRole)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestWebhookUser.Discord#IGuildUser#RemoveRoleAsync*
  commentId: Overload:Discord.Rest.RestWebhookUser.Discord#IGuildUser#RemoveRoleAsync
  name: IGuildUser.RemoveRoleAsync
  nameWithType: RestWebhookUser.IGuildUser.RemoveRoleAsync
  fullName: Discord.Rest.RestWebhookUser.Discord.IGuildUser.RemoveRoleAsync
  nameWithType.vb: RestWebhookUser.Discord.IGuildUser.RemoveRoleAsync
  name.vb: Discord.IGuildUser.RemoveRoleAsync
- uid: Discord.IGuildUser.RemoveRoleAsync(Discord.IRole,Discord.RequestOptions)
  commentId: M:Discord.IGuildUser.RemoveRoleAsync(Discord.IRole,Discord.RequestOptions)
  parent: Discord.IGuildUser
  name: RemoveRoleAsync(IRole, RequestOptions)
  nameWithType: IGuildUser.RemoveRoleAsync(IRole, RequestOptions)
  fullName: Discord.IGuildUser.RemoveRoleAsync(Discord.IRole, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuildUser.RemoveRoleAsync(Discord.IRole,Discord.RequestOptions)
    name: RemoveRoleAsync
    nameWithType: IGuildUser.RemoveRoleAsync
    fullName: Discord.IGuildUser.RemoveRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuildUser.RemoveRoleAsync(Discord.IRole,Discord.RequestOptions)
    name: RemoveRoleAsync
    nameWithType: IGuildUser.RemoveRoleAsync
    fullName: Discord.IGuildUser.RemoveRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestWebhookUser.Discord#IGuildUser#RemoveRolesAsync*
  commentId: Overload:Discord.Rest.RestWebhookUser.Discord#IGuildUser#RemoveRolesAsync
  name: IGuildUser.RemoveRolesAsync
  nameWithType: RestWebhookUser.IGuildUser.RemoveRolesAsync
  fullName: Discord.Rest.RestWebhookUser.Discord.IGuildUser.RemoveRolesAsync
  nameWithType.vb: RestWebhookUser.Discord.IGuildUser.RemoveRolesAsync
  name.vb: Discord.IGuildUser.RemoveRolesAsync
- uid: Discord.IGuildUser.RemoveRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)
  commentId: M:Discord.IGuildUser.RemoveRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)
  parent: Discord.IGuildUser
  isExternal: true
  name: RemoveRolesAsync(IEnumerable<IRole>, RequestOptions)
  nameWithType: IGuildUser.RemoveRolesAsync(IEnumerable<IRole>, RequestOptions)
  fullName: Discord.IGuildUser.RemoveRolesAsync(System.Collections.Generic.IEnumerable<Discord.IRole>, Discord.RequestOptions)
  nameWithType.vb: IGuildUser.RemoveRolesAsync(IEnumerable(Of IRole), RequestOptions)
  fullName.vb: Discord.IGuildUser.RemoveRolesAsync(System.Collections.Generic.IEnumerable(Of Discord.IRole), Discord.RequestOptions)
  name.vb: RemoveRolesAsync(IEnumerable(Of IRole), RequestOptions)
  spec.csharp:
  - uid: Discord.IGuildUser.RemoveRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)
    name: RemoveRolesAsync
    nameWithType: IGuildUser.RemoveRolesAsync
    fullName: Discord.IGuildUser.RemoveRolesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuildUser.RemoveRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)
    name: RemoveRolesAsync
    nameWithType: IGuildUser.RemoveRolesAsync
    fullName: Discord.IGuildUser.RemoveRolesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsDeafened*
  commentId: Overload:Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsDeafened
  name: IVoiceState.IsDeafened
  nameWithType: RestWebhookUser.IVoiceState.IsDeafened
  fullName: Discord.Rest.RestWebhookUser.Discord.IVoiceState.IsDeafened
  nameWithType.vb: RestWebhookUser.Discord.IVoiceState.IsDeafened
  name.vb: Discord.IVoiceState.IsDeafened
- uid: Discord.IVoiceState.IsDeafened
  commentId: P:Discord.IVoiceState.IsDeafened
  parent: Discord.IVoiceState
  name: IsDeafened
  nameWithType: IVoiceState.IsDeafened
  fullName: Discord.IVoiceState.IsDeafened
- uid: Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsMuted*
  commentId: Overload:Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsMuted
  name: IVoiceState.IsMuted
  nameWithType: RestWebhookUser.IVoiceState.IsMuted
  fullName: Discord.Rest.RestWebhookUser.Discord.IVoiceState.IsMuted
  nameWithType.vb: RestWebhookUser.Discord.IVoiceState.IsMuted
  name.vb: Discord.IVoiceState.IsMuted
- uid: Discord.IVoiceState.IsMuted
  commentId: P:Discord.IVoiceState.IsMuted
  parent: Discord.IVoiceState
  name: IsMuted
  nameWithType: IVoiceState.IsMuted
  fullName: Discord.IVoiceState.IsMuted
- uid: Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsSelfDeafened*
  commentId: Overload:Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsSelfDeafened
  name: IVoiceState.IsSelfDeafened
  nameWithType: RestWebhookUser.IVoiceState.IsSelfDeafened
  fullName: Discord.Rest.RestWebhookUser.Discord.IVoiceState.IsSelfDeafened
  nameWithType.vb: RestWebhookUser.Discord.IVoiceState.IsSelfDeafened
  name.vb: Discord.IVoiceState.IsSelfDeafened
- uid: Discord.IVoiceState.IsSelfDeafened
  commentId: P:Discord.IVoiceState.IsSelfDeafened
  parent: Discord.IVoiceState
  name: IsSelfDeafened
  nameWithType: IVoiceState.IsSelfDeafened
  fullName: Discord.IVoiceState.IsSelfDeafened
- uid: Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsSelfMuted*
  commentId: Overload:Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsSelfMuted
  name: IVoiceState.IsSelfMuted
  nameWithType: RestWebhookUser.IVoiceState.IsSelfMuted
  fullName: Discord.Rest.RestWebhookUser.Discord.IVoiceState.IsSelfMuted
  nameWithType.vb: RestWebhookUser.Discord.IVoiceState.IsSelfMuted
  name.vb: Discord.IVoiceState.IsSelfMuted
- uid: Discord.IVoiceState.IsSelfMuted
  commentId: P:Discord.IVoiceState.IsSelfMuted
  parent: Discord.IVoiceState
  name: IsSelfMuted
  nameWithType: IVoiceState.IsSelfMuted
  fullName: Discord.IVoiceState.IsSelfMuted
- uid: Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsSuppressed*
  commentId: Overload:Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsSuppressed
  name: IVoiceState.IsSuppressed
  nameWithType: RestWebhookUser.IVoiceState.IsSuppressed
  fullName: Discord.Rest.RestWebhookUser.Discord.IVoiceState.IsSuppressed
  nameWithType.vb: RestWebhookUser.Discord.IVoiceState.IsSuppressed
  name.vb: Discord.IVoiceState.IsSuppressed
- uid: Discord.IVoiceState.IsSuppressed
  commentId: P:Discord.IVoiceState.IsSuppressed
  parent: Discord.IVoiceState
  name: IsSuppressed
  nameWithType: IVoiceState.IsSuppressed
  fullName: Discord.IVoiceState.IsSuppressed
- uid: Discord.Rest.RestWebhookUser.Discord#IVoiceState#VoiceChannel*
  commentId: Overload:Discord.Rest.RestWebhookUser.Discord#IVoiceState#VoiceChannel
  name: IVoiceState.VoiceChannel
  nameWithType: RestWebhookUser.IVoiceState.VoiceChannel
  fullName: Discord.Rest.RestWebhookUser.Discord.IVoiceState.VoiceChannel
  nameWithType.vb: RestWebhookUser.Discord.IVoiceState.VoiceChannel
  name.vb: Discord.IVoiceState.VoiceChannel
- uid: Discord.IVoiceState.VoiceChannel
  commentId: P:Discord.IVoiceState.VoiceChannel
  parent: Discord.IVoiceState
  name: VoiceChannel
  nameWithType: IVoiceState.VoiceChannel
  fullName: Discord.IVoiceState.VoiceChannel
- uid: Discord.IVoiceChannel
  commentId: T:Discord.IVoiceChannel
  parent: Discord
  name: IVoiceChannel
  nameWithType: IVoiceChannel
  fullName: Discord.IVoiceChannel
- uid: Discord.Rest.RestWebhookUser.Discord#IVoiceState#VoiceSessionId*
  commentId: Overload:Discord.Rest.RestWebhookUser.Discord#IVoiceState#VoiceSessionId
  name: IVoiceState.VoiceSessionId
  nameWithType: RestWebhookUser.IVoiceState.VoiceSessionId
  fullName: Discord.Rest.RestWebhookUser.Discord.IVoiceState.VoiceSessionId
  nameWithType.vb: RestWebhookUser.Discord.IVoiceState.VoiceSessionId
  name.vb: Discord.IVoiceState.VoiceSessionId
- uid: Discord.IVoiceState.VoiceSessionId
  commentId: P:Discord.IVoiceState.VoiceSessionId
  parent: Discord.IVoiceState
  name: VoiceSessionId
  nameWithType: IVoiceState.VoiceSessionId
  fullName: Discord.IVoiceState.VoiceSessionId
- uid: Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsStreaming*
  commentId: Overload:Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsStreaming
  name: IVoiceState.IsStreaming
  nameWithType: RestWebhookUser.IVoiceState.IsStreaming
  fullName: Discord.Rest.RestWebhookUser.Discord.IVoiceState.IsStreaming
  nameWithType.vb: RestWebhookUser.Discord.IVoiceState.IsStreaming
  name.vb: Discord.IVoiceState.IsStreaming
- uid: Discord.IVoiceState.IsStreaming
  commentId: P:Discord.IVoiceState.IsStreaming
  parent: Discord.IVoiceState
  name: IsStreaming
  nameWithType: IVoiceState.IsStreaming
  fullName: Discord.IVoiceState.IsStreaming
