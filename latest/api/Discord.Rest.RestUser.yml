### YamlMime:ManagedReference
items:
- uid: Discord.Rest.RestUser
  commentId: T:Discord.Rest.RestUser
  id: RestUser
  parent: Discord.Rest
  children:
  - Discord.Rest.RestUser.ActiveClients
  - Discord.Rest.RestUser.Activity
  - Discord.Rest.RestUser.AvatarId
  - Discord.Rest.RestUser.CreatedAt
  - Discord.Rest.RestUser.Discord#IUser#GetOrCreateDMChannelAsync(Discord.RequestOptions)
  - Discord.Rest.RestUser.Discriminator
  - Discord.Rest.RestUser.DiscriminatorValue
  - Discord.Rest.RestUser.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
  - Discord.Rest.RestUser.GetDefaultAvatarUrl
  - Discord.Rest.RestUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
  - Discord.Rest.RestUser.IsBot
  - Discord.Rest.RestUser.IsWebhook
  - Discord.Rest.RestUser.Mention
  - Discord.Rest.RestUser.Status
  - Discord.Rest.RestUser.ToString
  - Discord.Rest.RestUser.UpdateAsync(Discord.RequestOptions)
  - Discord.Rest.RestUser.Username
  langs:
  - csharp
  - vb
  name: RestUser
  nameWithType: RestUser
  fullName: Discord.Rest.RestUser
  type: Class
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RestUser
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 11
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nRepresents a REST-based user.\n"
  example: []
  syntax:
    content: 'public class RestUser : RestEntity<ulong>, IUser, ISnowflakeEntity, IEntity<ulong>, IMentionable, IPresence, IUpdateable'
    content.vb: >-
      Public Class RestUser
          Inherits RestEntity(Of ULong)
          Implements IUser, ISnowflakeEntity, IEntity(Of ULong), IMentionable, IPresence, IUpdateable
  inheritance:
  - System.Object
  - Discord.Rest.RestEntity{System.UInt64}
  derivedClasses:
  - Discord.Rest.RestGroupUser
  - Discord.Rest.RestGuildUser
  - Discord.Rest.RestSelfUser
  - Discord.Rest.RestWebhookUser
  implements:
  - Discord.IUser
  - Discord.ISnowflakeEntity
  - Discord.IEntity{System.UInt64}
  - Discord.IMentionable
  - Discord.IPresence
  - Discord.IUpdateable
  inheritedMembers:
  - Discord.Rest.RestEntity{System.UInt64}.Id
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.Rest.RestUser.IsBot
  commentId: P:Discord.Rest.RestUser.IsBot
  id: IsBot
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: IsBot
  nameWithType: RestUser.IsBot
  fullName: Discord.Rest.RestUser.IsBot
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsBot
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 15
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a value that indicates whether this user is identified as a bot.\n"
  remarks: "\nThis property retrieves a value that indicates whether this user is a registered bot application\n(indicated by the blue BOT tag within the official chat client).\n"
  example: []
  syntax:
    content: public bool IsBot { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the user is a bot application; otherwise <code>false</code>.\n"
    content.vb: Public ReadOnly Property IsBot As Boolean
  overload: Discord.Rest.RestUser.IsBot*
  implements:
  - Discord.IUser.IsBot
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestUser.Username
  commentId: P:Discord.Rest.RestUser.Username
  id: Username
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: Username
  nameWithType: RestUser.Username
  fullName: Discord.Rest.RestUser.Username
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Username
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 17
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the username for this user.\n"
  example: []
  syntax:
    content: public string Username { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Username As String
  overload: Discord.Rest.RestUser.Username*
  implements:
  - Discord.IUser.Username
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestUser.DiscriminatorValue
  commentId: P:Discord.Rest.RestUser.DiscriminatorValue
  id: DiscriminatorValue
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: DiscriminatorValue
  nameWithType: RestUser.DiscriminatorValue
  fullName: Discord.Rest.RestUser.DiscriminatorValue
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DiscriminatorValue
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 19
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the per-username unique ID for this user.\n"
  example: []
  syntax:
    content: public ushort DiscriminatorValue { get; }
    parameters: []
    return:
      type: System.UInt16
    content.vb: Public ReadOnly Property DiscriminatorValue As UShort
  overload: Discord.Rest.RestUser.DiscriminatorValue*
  implements:
  - Discord.IUser.DiscriminatorValue
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestUser.AvatarId
  commentId: P:Discord.Rest.RestUser.AvatarId
  id: AvatarId
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: AvatarId
  nameWithType: RestUser.AvatarId
  fullName: Discord.Rest.RestUser.AvatarId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: AvatarId
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 21
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the identifier of this user&apos;s avatar.\n"
  example: []
  syntax:
    content: public string AvatarId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property AvatarId As String
  overload: Discord.Rest.RestUser.AvatarId*
  implements:
  - Discord.IUser.AvatarId
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestUser.CreatedAt
  commentId: P:Discord.Rest.RestUser.CreatedAt
  id: CreatedAt
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: CreatedAt
  nameWithType: RestUser.CreatedAt
  fullName: Discord.Rest.RestUser.CreatedAt
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreatedAt
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 24
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets when the snowflake was created.\n"
  example: []
  syntax:
    content: public DateTimeOffset CreatedAt { get; }
    parameters: []
    return:
      type: System.DateTimeOffset
      description: "\nA <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> representing when the entity was first created.\n"
    content.vb: Public ReadOnly Property CreatedAt As DateTimeOffset
  overload: Discord.Rest.RestUser.CreatedAt*
  implements:
  - Discord.ISnowflakeEntity.CreatedAt
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestUser.Discriminator
  commentId: P:Discord.Rest.RestUser.Discriminator
  id: Discriminator
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: Discriminator
  nameWithType: RestUser.Discriminator
  fullName: Discord.Rest.RestUser.Discriminator
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discriminator
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 26
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the per-username unique ID for this user.\n"
  example: []
  syntax:
    content: public string Discriminator { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Discriminator As String
  overload: Discord.Rest.RestUser.Discriminator*
  implements:
  - Discord.IUser.Discriminator
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestUser.Mention
  commentId: P:Discord.Rest.RestUser.Mention
  id: Mention
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: Mention
  nameWithType: RestUser.Mention
  fullName: Discord.Rest.RestUser.Mention
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Mention
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 28
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nReturns a special string used to mention this object.\n"
  example: []
  syntax:
    content: public string Mention { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA string that is recognized by Discord as a mention (e.g. &lt;@168693960628371456>).\n"
    content.vb: Public ReadOnly Property Mention As String
  overload: Discord.Rest.RestUser.Mention*
  implements:
  - Discord.IMentionable.Mention
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestUser.Activity
  commentId: P:Discord.Rest.RestUser.Activity
  id: Activity
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: Activity
  nameWithType: RestUser.Activity
  fullName: Discord.Rest.RestUser.Activity
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Activity
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 30
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the activity this user is currently doing.\n"
  example: []
  syntax:
    content: public virtual IActivity Activity { get; }
    parameters: []
    return:
      type: Discord.IActivity
    content.vb: Public Overridable ReadOnly Property Activity As IActivity
  overload: Discord.Rest.RestUser.Activity*
  implements:
  - Discord.IPresence.Activity
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.Rest.RestUser.Status
  commentId: P:Discord.Rest.RestUser.Status
  id: Status
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: Status
  nameWithType: RestUser.Status
  fullName: Discord.Rest.RestUser.Status
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Status
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 32
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the current status of this user.\n"
  example: []
  syntax:
    content: public virtual UserStatus Status { get; }
    parameters: []
    return:
      type: Discord.UserStatus
    content.vb: Public Overridable ReadOnly Property Status As UserStatus
  overload: Discord.Rest.RestUser.Status*
  implements:
  - Discord.IPresence.Status
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.Rest.RestUser.ActiveClients
  commentId: P:Discord.Rest.RestUser.ActiveClients
  id: ActiveClients
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: ActiveClients
  nameWithType: RestUser.ActiveClients
  fullName: Discord.Rest.RestUser.ActiveClients
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ActiveClients
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 34
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the set of clients where this user is currently active.\n"
  example: []
  syntax:
    content: public virtual IImmutableSet<ClientType> ActiveClients { get; }
    parameters: []
    return:
      type: System.Collections.Immutable.IImmutableSet{Discord.ClientType}
    content.vb: Public Overridable ReadOnly Property ActiveClients As IImmutableSet(Of ClientType)
  overload: Discord.Rest.RestUser.ActiveClients*
  implements:
  - Discord.IPresence.ActiveClients
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.Rest.RestUser.IsWebhook
  commentId: P:Discord.Rest.RestUser.IsWebhook
  id: IsWebhook
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: IsWebhook
  nameWithType: RestUser.IsWebhook
  fullName: Discord.Rest.RestUser.IsWebhook
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsWebhook
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 36
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a value that indicates whether this user is a webhook user.\n"
  example: []
  syntax:
    content: public virtual bool IsWebhook { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the user is a webhook; otherwise <code>false</code>.\n"
    content.vb: Public Overridable ReadOnly Property IsWebhook As Boolean
  overload: Discord.Rest.RestUser.IsWebhook*
  implements:
  - Discord.IUser.IsWebhook
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.Rest.RestUser.UpdateAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestUser.UpdateAsync(Discord.RequestOptions)
  id: UpdateAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: UpdateAsync(RequestOptions)
  nameWithType: RestUser.UpdateAsync(RequestOptions)
  fullName: Discord.Rest.RestUser.UpdateAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: UpdateAsync
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 67
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nUpdates this object&apos;s properties with its current state.\n"
  example: []
  syntax:
    content: public virtual Task UpdateAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overridable Function UpdateAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestUser.UpdateAsync*
  implements:
  - Discord.IUpdateable.UpdateAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Discord.Rest.RestUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
  id: GetOrCreateDMChannelAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: GetOrCreateDMChannelAsync(RequestOptions)
  nameWithType: RestUser.GetOrCreateDMChannelAsync(RequestOptions)
  fullName: Discord.Rest.RestUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetOrCreateDMChannelAsync
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 80
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nReturns a direct message channel to this user, or create one if it does not already exist.\n"
  example: []
  syntax:
    content: public Task<RestDMChannel> GetOrCreateDMChannelAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestDMChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains a rest DM channel where the user is the recipient.\n"
    content.vb: Public Function GetOrCreateDMChannelAsync(options As RequestOptions = Nothing) As Task(Of RestDMChannel)
  overload: Discord.Rest.RestUser.GetOrCreateDMChannelAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestUser.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
  commentId: M:Discord.Rest.RestUser.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
  id: GetAvatarUrl(Discord.ImageFormat,System.UInt16)
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: GetAvatarUrl(ImageFormat, UInt16)
  nameWithType: RestUser.GetAvatarUrl(ImageFormat, UInt16)
  fullName: Discord.Rest.RestUser.GetAvatarUrl(Discord.ImageFormat, System.UInt16)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetAvatarUrl
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 84
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the avatar URL for this user.\n"
  remarks: "\nThis property retrieves a URL for this user&apos;s avatar. In event that the user does not have a valid avatar\n(i.e. their avatar identifier is not set), this property will return <code>null</code>. If you wish to\nretrieve the default avatar for this user, consider using <xref href=\"Discord.IUser.GetDefaultAvatarUrl\" data-throw-if-not-resolved=\"false\"></xref> (see\nexample).\n"
  example: []
  syntax:
    content: public string GetAvatarUrl(ImageFormat format = ImageFormat.Auto, ushort size = 128)
    parameters:
    - id: format
      type: Discord.ImageFormat
      description: The format to return.
    - id: size
      type: System.UInt16
      description: >
        The size of the image to return in. This can be any power of two between 16 and 2048.
    return:
      type: System.String
      description: "\nA string representing the user&apos;s avatar URL; <code>null</code> if the user does not have an avatar in place.\n"
    content.vb: Public Function GetAvatarUrl(format As ImageFormat = ImageFormat.Auto, size As UShort = 128) As String
  overload: Discord.Rest.RestUser.GetAvatarUrl*
  implements:
  - Discord.IUser.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestUser.GetDefaultAvatarUrl
  commentId: M:Discord.Rest.RestUser.GetDefaultAvatarUrl
  id: GetDefaultAvatarUrl
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: GetDefaultAvatarUrl()
  nameWithType: RestUser.GetDefaultAvatarUrl()
  fullName: Discord.Rest.RestUser.GetDefaultAvatarUrl()
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetDefaultAvatarUrl
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 88
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the default avatar URL for this user.\n"
  remarks: "\nThis property retrieves a URL for this user&apos;s default avatar generated by Discord (Discord logo followed\nby a random color as its background). This property will always return a value as it is calculated based\non the user&apos;s <xref href=\"Discord.IUser.DiscriminatorValue\" data-throw-if-not-resolved=\"false\"></xref> (<code>discriminator % 5</code>).\n"
  example: []
  syntax:
    content: public string GetDefaultAvatarUrl()
    return:
      type: System.String
      description: "\nA string representing the user&apos;s avatar URL.\n"
    content.vb: Public Function GetDefaultAvatarUrl As String
  overload: Discord.Rest.RestUser.GetDefaultAvatarUrl*
  implements:
  - Discord.IUser.GetDefaultAvatarUrl
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestUser.ToString
  commentId: M:Discord.Rest.RestUser.ToString
  id: ToString
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: RestUser.ToString()
  fullName: Discord.Rest.RestUser.ToString()
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ToString
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 97
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the Username#Discriminator of the user.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nA string that resolves to Username#Discriminator of the user.\n"
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Discord.Rest.RestUser.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.Rest.RestUser.Discord#IUser#GetOrCreateDMChannelAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestUser.Discord#IUser#GetOrCreateDMChannelAsync(Discord.RequestOptions)
  id: Discord#IUser#GetOrCreateDMChannelAsync(Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: IUser.GetOrCreateDMChannelAsync(RequestOptions)
  nameWithType: RestUser.IUser.GetOrCreateDMChannelAsync(RequestOptions)
  fullName: Discord.Rest.RestUser.Discord.IUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IUser.GetOrCreateDMChannelAsync
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 102
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the direct message channel of this user, or create one if it does not already exist.\n"
  remarks: "\nThis method is used to obtain or create a channel used to send a direct message.\n<div class=\"WARNING\"><h5>warning</h5><p>\n     In event that the current user cannot send a message to the target user, a channel can and will\n     still be created by Discord. However, attempting to send a message will yield a \n<xref href=\"Discord.Net.HttpException\" data-throw-if-not-resolved=\"false\"></xref> with a 403 as its \n<xref href=\"Discord.Net.HttpException.HttpCode\" data-throw-if-not-resolved=\"false\"></xref>. There are currently no official workarounds by\nDiscord.\n</p></div>\n"
  example: []
  syntax:
    content: Task<IDMChannel> IUser.GetOrCreateDMChannelAsync(RequestOptions options)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IDMChannel}
      description: "\nA task that represents the asynchronous operation for getting or creating a DM channel. The task result\ncontains the DM channel associated with this user.\n"
    content.vb: Function Discord.IUser.GetOrCreateDMChannelAsync(options As RequestOptions) As Task(Of IDMChannel) Implements IUser.GetOrCreateDMChannelAsync
  overload: Discord.Rest.RestUser.Discord#IUser#GetOrCreateDMChannelAsync*
  implements:
  - Discord.IUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
  nameWithType.vb: RestUser.Discord.IUser.GetOrCreateDMChannelAsync(RequestOptions)
  name.vb: Discord.IUser.GetOrCreateDMChannelAsync(RequestOptions)
references:
- uid: Discord.Rest
  commentId: N:Discord.Rest
  name: Discord.Rest
  nameWithType: Discord.Rest
  fullName: Discord.Rest
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Rest.RestEntity{System.UInt64}
  commentId: T:Discord.Rest.RestEntity{System.UInt64}
  parent: Discord.Rest
  definition: Discord.Rest.RestEntity`1
  name: RestEntity<UInt64>
  nameWithType: RestEntity<UInt64>
  fullName: Discord.Rest.RestEntity<System.UInt64>
  nameWithType.vb: RestEntity(Of UInt64)
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64)
  name.vb: RestEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IUser
  commentId: T:Discord.IUser
  parent: Discord
  name: IUser
  nameWithType: IUser
  fullName: Discord.IUser
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMentionable
  commentId: T:Discord.IMentionable
  parent: Discord
  name: IMentionable
  nameWithType: IMentionable
  fullName: Discord.IMentionable
- uid: Discord.IPresence
  commentId: T:Discord.IPresence
  parent: Discord
  name: IPresence
  nameWithType: IPresence
  fullName: Discord.IPresence
- uid: Discord.IUpdateable
  commentId: T:Discord.IUpdateable
  parent: Discord
  name: IUpdateable
  nameWithType: IUpdateable
  fullName: Discord.IUpdateable
- uid: Discord.Rest.RestEntity{System.UInt64}.Id
  commentId: P:Discord.Rest.RestEntity{System.UInt64}.Id
  parent: Discord.Rest.RestEntity{System.UInt64}
  definition: Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<UInt64>.Id
  fullName: Discord.Rest.RestEntity<System.UInt64>.Id
  nameWithType.vb: RestEntity(Of UInt64).Id
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64).Id
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Rest.RestEntity`1
  commentId: T:Discord.Rest.RestEntity`1
  name: RestEntity<T>
  nameWithType: RestEntity<T>
  fullName: Discord.Rest.RestEntity<T>
  nameWithType.vb: RestEntity(Of T)
  fullName.vb: Discord.Rest.RestEntity(Of T)
  name.vb: RestEntity(Of T)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestEntity`1.Id
  commentId: P:Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<T>.Id
  fullName: Discord.Rest.RestEntity<T>.Id
  nameWithType.vb: RestEntity(Of T).Id
  fullName.vb: Discord.Rest.RestEntity(Of T).Id
- uid: Discord.Rest.RestUser.IsBot*
  commentId: Overload:Discord.Rest.RestUser.IsBot
  name: IsBot
  nameWithType: RestUser.IsBot
  fullName: Discord.Rest.RestUser.IsBot
- uid: Discord.IUser.IsBot
  commentId: P:Discord.IUser.IsBot
  parent: Discord.IUser
  name: IsBot
  nameWithType: IUser.IsBot
  fullName: Discord.IUser.IsBot
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.Rest.RestUser.Username*
  commentId: Overload:Discord.Rest.RestUser.Username
  name: Username
  nameWithType: RestUser.Username
  fullName: Discord.Rest.RestUser.Username
- uid: Discord.IUser.Username
  commentId: P:Discord.IUser.Username
  parent: Discord.IUser
  name: Username
  nameWithType: IUser.Username
  fullName: Discord.IUser.Username
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.Rest.RestUser.DiscriminatorValue*
  commentId: Overload:Discord.Rest.RestUser.DiscriminatorValue
  name: DiscriminatorValue
  nameWithType: RestUser.DiscriminatorValue
  fullName: Discord.Rest.RestUser.DiscriminatorValue
- uid: Discord.IUser.DiscriminatorValue
  commentId: P:Discord.IUser.DiscriminatorValue
  parent: Discord.IUser
  name: DiscriminatorValue
  nameWithType: IUser.DiscriminatorValue
  fullName: Discord.IUser.DiscriminatorValue
- uid: System.UInt16
  commentId: T:System.UInt16
  parent: System
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: Discord.Rest.RestUser.AvatarId*
  commentId: Overload:Discord.Rest.RestUser.AvatarId
  name: AvatarId
  nameWithType: RestUser.AvatarId
  fullName: Discord.Rest.RestUser.AvatarId
- uid: Discord.IUser.AvatarId
  commentId: P:Discord.IUser.AvatarId
  parent: Discord.IUser
  name: AvatarId
  nameWithType: IUser.AvatarId
  fullName: Discord.IUser.AvatarId
- uid: Discord.Rest.RestUser.CreatedAt*
  commentId: Overload:Discord.Rest.RestUser.CreatedAt
  name: CreatedAt
  nameWithType: RestUser.CreatedAt
  fullName: Discord.Rest.RestUser.CreatedAt
- uid: Discord.ISnowflakeEntity.CreatedAt
  commentId: P:Discord.ISnowflakeEntity.CreatedAt
  parent: Discord.ISnowflakeEntity
  name: CreatedAt
  nameWithType: ISnowflakeEntity.CreatedAt
  fullName: Discord.ISnowflakeEntity.CreatedAt
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: Discord.Rest.RestUser.Discriminator*
  commentId: Overload:Discord.Rest.RestUser.Discriminator
  name: Discriminator
  nameWithType: RestUser.Discriminator
  fullName: Discord.Rest.RestUser.Discriminator
- uid: Discord.IUser.Discriminator
  commentId: P:Discord.IUser.Discriminator
  parent: Discord.IUser
  name: Discriminator
  nameWithType: IUser.Discriminator
  fullName: Discord.IUser.Discriminator
- uid: Discord.Rest.RestUser.Mention*
  commentId: Overload:Discord.Rest.RestUser.Mention
  name: Mention
  nameWithType: RestUser.Mention
  fullName: Discord.Rest.RestUser.Mention
- uid: Discord.IMentionable.Mention
  commentId: P:Discord.IMentionable.Mention
  parent: Discord.IMentionable
  name: Mention
  nameWithType: IMentionable.Mention
  fullName: Discord.IMentionable.Mention
- uid: Discord.Rest.RestUser.Activity*
  commentId: Overload:Discord.Rest.RestUser.Activity
  name: Activity
  nameWithType: RestUser.Activity
  fullName: Discord.Rest.RestUser.Activity
- uid: Discord.IPresence.Activity
  commentId: P:Discord.IPresence.Activity
  parent: Discord.IPresence
  name: Activity
  nameWithType: IPresence.Activity
  fullName: Discord.IPresence.Activity
- uid: Discord.IActivity
  commentId: T:Discord.IActivity
  parent: Discord
  name: IActivity
  nameWithType: IActivity
  fullName: Discord.IActivity
- uid: Discord.Rest.RestUser.Status*
  commentId: Overload:Discord.Rest.RestUser.Status
  name: Status
  nameWithType: RestUser.Status
  fullName: Discord.Rest.RestUser.Status
- uid: Discord.IPresence.Status
  commentId: P:Discord.IPresence.Status
  parent: Discord.IPresence
  name: Status
  nameWithType: IPresence.Status
  fullName: Discord.IPresence.Status
- uid: Discord.UserStatus
  commentId: T:Discord.UserStatus
  parent: Discord
  name: UserStatus
  nameWithType: UserStatus
  fullName: Discord.UserStatus
- uid: Discord.Rest.RestUser.ActiveClients*
  commentId: Overload:Discord.Rest.RestUser.ActiveClients
  name: ActiveClients
  nameWithType: RestUser.ActiveClients
  fullName: Discord.Rest.RestUser.ActiveClients
- uid: Discord.IPresence.ActiveClients
  commentId: P:Discord.IPresence.ActiveClients
  parent: Discord.IPresence
  name: ActiveClients
  nameWithType: IPresence.ActiveClients
  fullName: Discord.IPresence.ActiveClients
- uid: System.Collections.Immutable.IImmutableSet{Discord.ClientType}
  commentId: T:System.Collections.Immutable.IImmutableSet{Discord.ClientType}
  parent: System.Collections.Immutable
  definition: System.Collections.Immutable.IImmutableSet`1
  name: IImmutableSet<ClientType>
  nameWithType: IImmutableSet<ClientType>
  fullName: System.Collections.Immutable.IImmutableSet<Discord.ClientType>
  nameWithType.vb: IImmutableSet(Of ClientType)
  fullName.vb: System.Collections.Immutable.IImmutableSet(Of Discord.ClientType)
  name.vb: IImmutableSet(Of ClientType)
  spec.csharp:
  - uid: System.Collections.Immutable.IImmutableSet`1
    name: IImmutableSet
    nameWithType: IImmutableSet
    fullName: System.Collections.Immutable.IImmutableSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ClientType
    name: ClientType
    nameWithType: ClientType
    fullName: Discord.ClientType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.IImmutableSet`1
    name: IImmutableSet
    nameWithType: IImmutableSet
    fullName: System.Collections.Immutable.IImmutableSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ClientType
    name: ClientType
    nameWithType: ClientType
    fullName: Discord.ClientType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Immutable.IImmutableSet`1
  commentId: T:System.Collections.Immutable.IImmutableSet`1
  isExternal: true
  name: IImmutableSet<T>
  nameWithType: IImmutableSet<T>
  fullName: System.Collections.Immutable.IImmutableSet<T>
  nameWithType.vb: IImmutableSet(Of T)
  fullName.vb: System.Collections.Immutable.IImmutableSet(Of T)
  name.vb: IImmutableSet(Of T)
  spec.csharp:
  - uid: System.Collections.Immutable.IImmutableSet`1
    name: IImmutableSet
    nameWithType: IImmutableSet
    fullName: System.Collections.Immutable.IImmutableSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Immutable.IImmutableSet`1
    name: IImmutableSet
    nameWithType: IImmutableSet
    fullName: System.Collections.Immutable.IImmutableSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Immutable
  commentId: N:System.Collections.Immutable
  isExternal: true
  name: System.Collections.Immutable
  nameWithType: System.Collections.Immutable
  fullName: System.Collections.Immutable
- uid: Discord.Rest.RestUser.IsWebhook*
  commentId: Overload:Discord.Rest.RestUser.IsWebhook
  name: IsWebhook
  nameWithType: RestUser.IsWebhook
  fullName: Discord.Rest.RestUser.IsWebhook
- uid: Discord.IUser.IsWebhook
  commentId: P:Discord.IUser.IsWebhook
  parent: Discord.IUser
  name: IsWebhook
  nameWithType: IUser.IsWebhook
  fullName: Discord.IUser.IsWebhook
- uid: Discord.Rest.RestUser.UpdateAsync*
  commentId: Overload:Discord.Rest.RestUser.UpdateAsync
  name: UpdateAsync
  nameWithType: RestUser.UpdateAsync
  fullName: Discord.Rest.RestUser.UpdateAsync
- uid: Discord.IUpdateable.UpdateAsync(Discord.RequestOptions)
  commentId: M:Discord.IUpdateable.UpdateAsync(Discord.RequestOptions)
  parent: Discord.IUpdateable
  name: UpdateAsync(RequestOptions)
  nameWithType: IUpdateable.UpdateAsync(RequestOptions)
  fullName: Discord.IUpdateable.UpdateAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IUpdateable.UpdateAsync(Discord.RequestOptions)
    name: UpdateAsync
    nameWithType: IUpdateable.UpdateAsync
    fullName: Discord.IUpdateable.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IUpdateable.UpdateAsync(Discord.RequestOptions)
    name: UpdateAsync
    nameWithType: IUpdateable.UpdateAsync
    fullName: Discord.IUpdateable.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Discord.Rest.RestUser.GetOrCreateDMChannelAsync*
  commentId: Overload:Discord.Rest.RestUser.GetOrCreateDMChannelAsync
  name: GetOrCreateDMChannelAsync
  nameWithType: RestUser.GetOrCreateDMChannelAsync
  fullName: Discord.Rest.RestUser.GetOrCreateDMChannelAsync
- uid: System.Threading.Tasks.Task{Discord.Rest.RestDMChannel}
  commentId: T:System.Threading.Tasks.Task{Discord.Rest.RestDMChannel}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RestDMChannel>
  nameWithType: Task<RestDMChannel>
  fullName: System.Threading.Tasks.Task<Discord.Rest.RestDMChannel>
  nameWithType.vb: Task(Of RestDMChannel)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.Rest.RestDMChannel)
  name.vb: Task(Of RestDMChannel)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestDMChannel
    name: RestDMChannel
    nameWithType: RestDMChannel
    fullName: Discord.Rest.RestDMChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestDMChannel
    name: RestDMChannel
    nameWithType: RestDMChannel
    fullName: Discord.Rest.RestDMChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestUser.GetAvatarUrl*
  commentId: Overload:Discord.Rest.RestUser.GetAvatarUrl
  name: GetAvatarUrl
  nameWithType: RestUser.GetAvatarUrl
  fullName: Discord.Rest.RestUser.GetAvatarUrl
- uid: Discord.IUser.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
  commentId: M:Discord.IUser.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
  parent: Discord.IUser
  isExternal: true
  name: GetAvatarUrl(ImageFormat, UInt16)
  nameWithType: IUser.GetAvatarUrl(ImageFormat, UInt16)
  fullName: Discord.IUser.GetAvatarUrl(Discord.ImageFormat, System.UInt16)
  spec.csharp:
  - uid: Discord.IUser.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
    name: GetAvatarUrl
    nameWithType: IUser.GetAvatarUrl
    fullName: Discord.IUser.GetAvatarUrl
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.ImageFormat
    name: ImageFormat
    nameWithType: ImageFormat
    fullName: Discord.ImageFormat
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IUser.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
    name: GetAvatarUrl
    nameWithType: IUser.GetAvatarUrl
    fullName: Discord.IUser.GetAvatarUrl
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.ImageFormat
    name: ImageFormat
    nameWithType: ImageFormat
    fullName: Discord.ImageFormat
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.ImageFormat
  commentId: T:Discord.ImageFormat
  parent: Discord
  name: ImageFormat
  nameWithType: ImageFormat
  fullName: Discord.ImageFormat
- uid: Discord.Rest.RestUser.GetDefaultAvatarUrl*
  commentId: Overload:Discord.Rest.RestUser.GetDefaultAvatarUrl
  name: GetDefaultAvatarUrl
  nameWithType: RestUser.GetDefaultAvatarUrl
  fullName: Discord.Rest.RestUser.GetDefaultAvatarUrl
- uid: Discord.IUser.GetDefaultAvatarUrl
  commentId: M:Discord.IUser.GetDefaultAvatarUrl
  parent: Discord.IUser
  name: GetDefaultAvatarUrl()
  nameWithType: IUser.GetDefaultAvatarUrl()
  fullName: Discord.IUser.GetDefaultAvatarUrl()
  spec.csharp:
  - uid: Discord.IUser.GetDefaultAvatarUrl
    name: GetDefaultAvatarUrl
    nameWithType: IUser.GetDefaultAvatarUrl
    fullName: Discord.IUser.GetDefaultAvatarUrl
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IUser.GetDefaultAvatarUrl
    name: GetDefaultAvatarUrl
    nameWithType: IUser.GetDefaultAvatarUrl
    fullName: Discord.IUser.GetDefaultAvatarUrl
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestUser.ToString*
  commentId: Overload:Discord.Rest.RestUser.ToString
  name: ToString
  nameWithType: RestUser.ToString
  fullName: Discord.Rest.RestUser.ToString
- uid: Discord.Rest.RestUser.Discord#IUser#GetOrCreateDMChannelAsync*
  commentId: Overload:Discord.Rest.RestUser.Discord#IUser#GetOrCreateDMChannelAsync
  name: IUser.GetOrCreateDMChannelAsync
  nameWithType: RestUser.IUser.GetOrCreateDMChannelAsync
  fullName: Discord.Rest.RestUser.Discord.IUser.GetOrCreateDMChannelAsync
  nameWithType.vb: RestUser.Discord.IUser.GetOrCreateDMChannelAsync
  name.vb: Discord.IUser.GetOrCreateDMChannelAsync
- uid: Discord.IUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
  commentId: M:Discord.IUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
  parent: Discord.IUser
  name: GetOrCreateDMChannelAsync(RequestOptions)
  nameWithType: IUser.GetOrCreateDMChannelAsync(RequestOptions)
  fullName: Discord.IUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
    name: GetOrCreateDMChannelAsync
    nameWithType: IUser.GetOrCreateDMChannelAsync
    fullName: Discord.IUser.GetOrCreateDMChannelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
    name: GetOrCreateDMChannelAsync
    nameWithType: IUser.GetOrCreateDMChannelAsync
    fullName: Discord.IUser.GetOrCreateDMChannelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.IDMChannel}
  commentId: T:System.Threading.Tasks.Task{Discord.IDMChannel}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IDMChannel>
  nameWithType: Task<IDMChannel>
  fullName: System.Threading.Tasks.Task<Discord.IDMChannel>
  nameWithType.vb: Task(Of IDMChannel)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IDMChannel)
  name.vb: Task(Of IDMChannel)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IDMChannel
    name: IDMChannel
    nameWithType: IDMChannel
    fullName: Discord.IDMChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IDMChannel
    name: IDMChannel
    nameWithType: IDMChannel
    fullName: Discord.IDMChannel
  - name: )
    nameWithType: )
    fullName: )
