### YamlMime:ManagedReference
items:
- uid: Discord.Rest.RestUser
  commentId: T:Discord.Rest.RestUser
  id: RestUser
  parent: Discord.Rest
  children:
  - Discord.Rest.RestUser.ActiveClients
  - Discord.Rest.RestUser.Activity
  - Discord.Rest.RestUser.AvatarId
  - Discord.Rest.RestUser.CreatedAt
  - Discord.Rest.RestUser.Discriminator
  - Discord.Rest.RestUser.DiscriminatorValue
  - Discord.Rest.RestUser.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
  - Discord.Rest.RestUser.GetDefaultAvatarUrl
  - Discord.Rest.RestUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
  - Discord.Rest.RestUser.IsBot
  - Discord.Rest.RestUser.IsWebhook
  - Discord.Rest.RestUser.Mention
  - Discord.Rest.RestUser.Status
  - Discord.Rest.RestUser.ToString
  - Discord.Rest.RestUser.UpdateAsync(Discord.RequestOptions)
  - Discord.Rest.RestUser.Username
  langs:
  - csharp
  - vb
  name: RestUser
  nameWithType: RestUser
  fullName: Discord.Rest.RestUser
  type: Class
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RestUser
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 12
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nRepresents a REST-based user.\n"
  example: []
  syntax:
    content: 'public class RestUser : RestEntity<ulong>, IEntity<ulong>, IUser, ISnowflakeEntity, IEntity<ulong>, IMentionable, IPresence, IUpdateable'
    content.vb: >-
      Public Class RestUser
          Inherits RestEntity(Of ULong)
          Implements IEntity(Of ULong), IUser, ISnowflakeEntity, IEntity(Of ULong), IMentionable, IPresence, IUpdateable
  inheritance:
  - System.Object
  - Discord.Rest.RestEntity{System.UInt64}
  derivedClasses:
  - Discord.Rest.RestGroupUser
  - Discord.Rest.RestGuildUser
  - Discord.Rest.RestSelfUser
  - Discord.Rest.RestWebhookUser
  implements:
  - Discord.IEntity{System.UInt64}
  - Discord.IUser
  - Discord.ISnowflakeEntity
  - Discord.IEntity{System.UInt64}
  - Discord.IMentionable
  - Discord.IPresence
  - Discord.IUpdateable
  inheritedMembers:
  - Discord.Rest.RestEntity{System.UInt64}.Id
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.Rest.RestUser.IsBot
  commentId: P:Discord.Rest.RestUser.IsBot
  id: IsBot
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: IsBot
  nameWithType: RestUser.IsBot
  fullName: Discord.Rest.RestUser.IsBot
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsBot
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 16
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public bool IsBot { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsBot As Boolean
  overload: Discord.Rest.RestUser.IsBot*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestUser.Username
  commentId: P:Discord.Rest.RestUser.Username
  id: Username
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: Username
  nameWithType: RestUser.Username
  fullName: Discord.Rest.RestUser.Username
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Username
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 18
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public string Username { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Username As String
  overload: Discord.Rest.RestUser.Username*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestUser.DiscriminatorValue
  commentId: P:Discord.Rest.RestUser.DiscriminatorValue
  id: DiscriminatorValue
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: DiscriminatorValue
  nameWithType: RestUser.DiscriminatorValue
  fullName: Discord.Rest.RestUser.DiscriminatorValue
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DiscriminatorValue
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 20
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public ushort DiscriminatorValue { get; }
    parameters: []
    return:
      type: System.UInt16
    content.vb: Public ReadOnly Property DiscriminatorValue As UShort
  overload: Discord.Rest.RestUser.DiscriminatorValue*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestUser.AvatarId
  commentId: P:Discord.Rest.RestUser.AvatarId
  id: AvatarId
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: AvatarId
  nameWithType: RestUser.AvatarId
  fullName: Discord.Rest.RestUser.AvatarId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: AvatarId
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 22
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public string AvatarId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property AvatarId As String
  overload: Discord.Rest.RestUser.AvatarId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestUser.CreatedAt
  commentId: P:Discord.Rest.RestUser.CreatedAt
  id: CreatedAt
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: CreatedAt
  nameWithType: RestUser.CreatedAt
  fullName: Discord.Rest.RestUser.CreatedAt
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreatedAt
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 25
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public DateTimeOffset CreatedAt { get; }
    parameters: []
    return:
      type: DateTimeOffset
    content.vb: Public ReadOnly Property CreatedAt As DateTimeOffset
  overload: Discord.Rest.RestUser.CreatedAt*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestUser.Discriminator
  commentId: P:Discord.Rest.RestUser.Discriminator
  id: Discriminator
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: Discriminator
  nameWithType: RestUser.Discriminator
  fullName: Discord.Rest.RestUser.Discriminator
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discriminator
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 27
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public string Discriminator { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Discriminator As String
  overload: Discord.Rest.RestUser.Discriminator*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestUser.Mention
  commentId: P:Discord.Rest.RestUser.Mention
  id: Mention
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: Mention
  nameWithType: RestUser.Mention
  fullName: Discord.Rest.RestUser.Mention
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Mention
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 29
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public string Mention { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Mention As String
  overload: Discord.Rest.RestUser.Mention*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestUser.Activity
  commentId: P:Discord.Rest.RestUser.Activity
  id: Activity
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: Activity
  nameWithType: RestUser.Activity
  fullName: Discord.Rest.RestUser.Activity
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Activity
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 31
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the activity this user is currently doing.\n"
  example: []
  syntax:
    content: public virtual IActivity Activity { get; }
    parameters: []
    return:
      type: Discord.IActivity
    content.vb: Public Overridable ReadOnly Property Activity As IActivity
  overload: Discord.Rest.RestUser.Activity*
  implements:
  - Discord.IPresence.Activity
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.Rest.RestUser.Status
  commentId: P:Discord.Rest.RestUser.Status
  id: Status
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: Status
  nameWithType: RestUser.Status
  fullName: Discord.Rest.RestUser.Status
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Status
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 33
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the current status of this user.\n"
  example: []
  syntax:
    content: public virtual UserStatus Status { get; }
    parameters: []
    return:
      type: Discord.UserStatus
    content.vb: Public Overridable ReadOnly Property Status As UserStatus
  overload: Discord.Rest.RestUser.Status*
  implements:
  - Discord.IPresence.Status
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.Rest.RestUser.ActiveClients
  commentId: P:Discord.Rest.RestUser.ActiveClients
  id: ActiveClients
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: ActiveClients
  nameWithType: RestUser.ActiveClients
  fullName: Discord.Rest.RestUser.ActiveClients
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ActiveClients
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 35
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public virtual IImmutableSet<ClientType> ActiveClients { get; }
    parameters: []
    return:
      type: IImmutableSet{Discord.ClientType}
    content.vb: Public Overridable ReadOnly Property ActiveClients As IImmutableSet(Of ClientType)
  overload: Discord.Rest.RestUser.ActiveClients*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.Rest.RestUser.IsWebhook
  commentId: P:Discord.Rest.RestUser.IsWebhook
  id: IsWebhook
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: IsWebhook
  nameWithType: RestUser.IsWebhook
  fullName: Discord.Rest.RestUser.IsWebhook
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsWebhook
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 37
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public virtual bool IsWebhook { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable ReadOnly Property IsWebhook As Boolean
  overload: Discord.Rest.RestUser.IsWebhook*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.Rest.RestUser.UpdateAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestUser.UpdateAsync(Discord.RequestOptions)
  id: UpdateAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: UpdateAsync(RequestOptions)
  nameWithType: RestUser.UpdateAsync(RequestOptions)
  fullName: Discord.Rest.RestUser.UpdateAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: UpdateAsync
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 68
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public virtual Task UpdateAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Overridable Function UpdateAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestUser.UpdateAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Discord.Rest.RestUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
  id: GetOrCreateDMChannelAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: GetOrCreateDMChannelAsync(RequestOptions)
  nameWithType: RestUser.GetOrCreateDMChannelAsync(RequestOptions)
  fullName: Discord.Rest.RestUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetOrCreateDMChannelAsync
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 81
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nReturns a direct message channel to this user, or create one if it does not already exist.\n"
  example: []
  syntax:
    content: public Task<RestDMChannel> GetOrCreateDMChannelAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestDMChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains a rest DM channel where the user is the recipient.\n"
    content.vb: Public Function GetOrCreateDMChannelAsync(options As RequestOptions = Nothing) As Task(Of RestDMChannel)
  overload: Discord.Rest.RestUser.GetOrCreateDMChannelAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestUser.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
  commentId: M:Discord.Rest.RestUser.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
  id: GetAvatarUrl(Discord.ImageFormat,System.UInt16)
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: GetAvatarUrl(ImageFormat, UInt16)
  nameWithType: RestUser.GetAvatarUrl(ImageFormat, UInt16)
  fullName: Discord.Rest.RestUser.GetAvatarUrl(Discord.ImageFormat, System.UInt16)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetAvatarUrl
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 85
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public string GetAvatarUrl(ImageFormat format = ImageFormat.Auto, ushort size = null)
    parameters:
    - id: format
      type: Discord.ImageFormat
    - id: size
      type: System.UInt16
    return:
      type: System.String
    content.vb: Public Function GetAvatarUrl(format As ImageFormat = ImageFormat.Auto, size As UShort = Nothing) As String
  overload: Discord.Rest.RestUser.GetAvatarUrl*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestUser.GetDefaultAvatarUrl
  commentId: M:Discord.Rest.RestUser.GetDefaultAvatarUrl
  id: GetDefaultAvatarUrl
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: GetDefaultAvatarUrl()
  nameWithType: RestUser.GetDefaultAvatarUrl()
  fullName: Discord.Rest.RestUser.GetDefaultAvatarUrl()
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetDefaultAvatarUrl
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 89
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public string GetDefaultAvatarUrl()
    return:
      type: System.String
    content.vb: Public Function GetDefaultAvatarUrl As String
  overload: Discord.Rest.RestUser.GetDefaultAvatarUrl*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestUser.ToString
  commentId: M:Discord.Rest.RestUser.ToString
  id: ToString
  parent: Discord.Rest.RestUser
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: RestUser.ToString()
  fullName: Discord.Rest.RestUser.ToString()
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Users/RestUser.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ToString
    path: ../src/Discord.Net.Rest/Entities/Users/RestUser.cs
    startLine: 98
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the Username#Discriminator of the user.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nA string that resolves to Username#Discriminator of the user.\n"
    content.vb: Public Overrides Function ToString As String
  overload: Discord.Rest.RestUser.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Discord.Rest
  commentId: N:Discord.Rest
  name: Discord.Rest
  nameWithType: Discord.Rest
  fullName: Discord.Rest
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Rest.RestEntity{System.UInt64}
  commentId: T:Discord.Rest.RestEntity{System.UInt64}
  parent: Discord.Rest
  definition: Discord.Rest.RestEntity`1
  name: RestEntity<UInt64>
  nameWithType: RestEntity<UInt64>
  fullName: Discord.Rest.RestEntity<System.UInt64>
  nameWithType.vb: RestEntity(Of UInt64)
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64)
  name.vb: RestEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IUser
  commentId: T:Discord.IUser
  parent: Discord
  name: IUser
  nameWithType: IUser
  fullName: Discord.IUser
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IMentionable
  commentId: T:Discord.IMentionable
  parent: Discord
  name: IMentionable
  nameWithType: IMentionable
  fullName: Discord.IMentionable
- uid: Discord.IPresence
  commentId: T:Discord.IPresence
  parent: Discord
  name: IPresence
  nameWithType: IPresence
  fullName: Discord.IPresence
- uid: Discord.IUpdateable
  commentId: T:Discord.IUpdateable
  parent: Discord
  name: IUpdateable
  nameWithType: IUpdateable
  fullName: Discord.IUpdateable
- uid: Discord.Rest.RestEntity{System.UInt64}.Id
  commentId: P:Discord.Rest.RestEntity{System.UInt64}.Id
  parent: Discord.Rest.RestEntity{System.UInt64}
  definition: Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<UInt64>.Id
  fullName: Discord.Rest.RestEntity<System.UInt64>.Id
  nameWithType.vb: RestEntity(Of UInt64).Id
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64).Id
- uid: Discord.Rest.RestEntity`1
  commentId: T:Discord.Rest.RestEntity`1
  name: RestEntity<T>
  nameWithType: RestEntity<T>
  fullName: Discord.Rest.RestEntity<T>
  nameWithType.vb: RestEntity(Of T)
  fullName.vb: Discord.Rest.RestEntity(Of T)
  name.vb: RestEntity(Of T)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.Rest.RestEntity`1.Id
  commentId: P:Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<T>.Id
  fullName: Discord.Rest.RestEntity<T>.Id
  nameWithType.vb: RestEntity(Of T).Id
  fullName.vb: Discord.Rest.RestEntity(Of T).Id
- uid: Discord.Rest.RestUser.IsBot*
  commentId: Overload:Discord.Rest.RestUser.IsBot
  name: IsBot
  nameWithType: RestUser.IsBot
  fullName: Discord.Rest.RestUser.IsBot
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.Rest.RestUser.Username*
  commentId: Overload:Discord.Rest.RestUser.Username
  name: Username
  nameWithType: RestUser.Username
  fullName: Discord.Rest.RestUser.Username
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.Rest.RestUser.DiscriminatorValue*
  commentId: Overload:Discord.Rest.RestUser.DiscriminatorValue
  name: DiscriminatorValue
  nameWithType: RestUser.DiscriminatorValue
  fullName: Discord.Rest.RestUser.DiscriminatorValue
- uid: System.UInt16
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: Discord.Rest.RestUser.AvatarId*
  commentId: Overload:Discord.Rest.RestUser.AvatarId
  name: AvatarId
  nameWithType: RestUser.AvatarId
  fullName: Discord.Rest.RestUser.AvatarId
- uid: Discord.Rest.RestUser.CreatedAt*
  commentId: Overload:Discord.Rest.RestUser.CreatedAt
  name: CreatedAt
  nameWithType: RestUser.CreatedAt
  fullName: Discord.Rest.RestUser.CreatedAt
- uid: DateTimeOffset
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: DateTimeOffset
- uid: Discord.Rest.RestUser.Discriminator*
  commentId: Overload:Discord.Rest.RestUser.Discriminator
  name: Discriminator
  nameWithType: RestUser.Discriminator
  fullName: Discord.Rest.RestUser.Discriminator
- uid: Discord.Rest.RestUser.Mention*
  commentId: Overload:Discord.Rest.RestUser.Mention
  name: Mention
  nameWithType: RestUser.Mention
  fullName: Discord.Rest.RestUser.Mention
- uid: Discord.Rest.RestUser.Activity*
  commentId: Overload:Discord.Rest.RestUser.Activity
  name: Activity
  nameWithType: RestUser.Activity
  fullName: Discord.Rest.RestUser.Activity
- uid: Discord.IPresence.Activity
  commentId: P:Discord.IPresence.Activity
  parent: Discord.IPresence
  name: Activity
  nameWithType: IPresence.Activity
  fullName: Discord.IPresence.Activity
- uid: Discord.IActivity
  commentId: T:Discord.IActivity
  parent: Discord
  name: IActivity
  nameWithType: IActivity
  fullName: Discord.IActivity
- uid: Discord.Rest.RestUser.Status*
  commentId: Overload:Discord.Rest.RestUser.Status
  name: Status
  nameWithType: RestUser.Status
  fullName: Discord.Rest.RestUser.Status
- uid: Discord.IPresence.Status
  commentId: P:Discord.IPresence.Status
  parent: Discord.IPresence
  name: Status
  nameWithType: IPresence.Status
  fullName: Discord.IPresence.Status
- uid: Discord.UserStatus
  commentId: T:Discord.UserStatus
  parent: Discord
  name: UserStatus
  nameWithType: UserStatus
  fullName: Discord.UserStatus
- uid: Discord.Rest.RestUser.ActiveClients*
  commentId: Overload:Discord.Rest.RestUser.ActiveClients
  name: ActiveClients
  nameWithType: RestUser.ActiveClients
  fullName: Discord.Rest.RestUser.ActiveClients
- uid: IImmutableSet{Discord.ClientType}
  commentId: '!:IImmutableSet{Discord.ClientType}'
  definition: IImmutableSet`1
  name: IImmutableSet<ClientType>
  nameWithType: IImmutableSet<ClientType>
  fullName: IImmutableSet<Discord.ClientType>
  nameWithType.vb: IImmutableSet(Of ClientType)
  fullName.vb: IImmutableSet(Of Discord.ClientType)
  name.vb: IImmutableSet(Of ClientType)
  spec.csharp:
  - uid: IImmutableSet`1
    name: IImmutableSet
    nameWithType: IImmutableSet
    fullName: IImmutableSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ClientType
    name: ClientType
    nameWithType: ClientType
    fullName: Discord.ClientType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IImmutableSet`1
    name: IImmutableSet
    nameWithType: IImmutableSet
    fullName: IImmutableSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ClientType
    name: ClientType
    nameWithType: ClientType
    fullName: Discord.ClientType
  - name: )
    nameWithType: )
    fullName: )
- uid: IImmutableSet`1
  isExternal: true
  name: IImmutableSet<>
  nameWithType: IImmutableSet<>
  fullName: IImmutableSet<>
  nameWithType.vb: IImmutableSet(Of )
  fullName.vb: IImmutableSet(Of )
  name.vb: IImmutableSet(Of )
  spec.csharp:
  - uid: IImmutableSet`1
    name: IImmutableSet
    nameWithType: IImmutableSet
    fullName: IImmutableSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IImmutableSet`1
    name: IImmutableSet
    nameWithType: IImmutableSet
    fullName: IImmutableSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestUser.IsWebhook*
  commentId: Overload:Discord.Rest.RestUser.IsWebhook
  name: IsWebhook
  nameWithType: RestUser.IsWebhook
  fullName: Discord.Rest.RestUser.IsWebhook
- uid: Discord.Rest.RestUser.UpdateAsync*
  commentId: Overload:Discord.Rest.RestUser.UpdateAsync
  name: UpdateAsync
  nameWithType: RestUser.UpdateAsync
  fullName: Discord.Rest.RestUser.UpdateAsync
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Discord.Rest.RestUser.GetOrCreateDMChannelAsync*
  commentId: Overload:Discord.Rest.RestUser.GetOrCreateDMChannelAsync
  name: GetOrCreateDMChannelAsync
  nameWithType: RestUser.GetOrCreateDMChannelAsync
  fullName: Discord.Rest.RestUser.GetOrCreateDMChannelAsync
- uid: Task{Discord.Rest.RestDMChannel}
  commentId: '!:Task{Discord.Rest.RestDMChannel}'
  definition: Task`1
  name: Task<RestDMChannel>
  nameWithType: Task<RestDMChannel>
  fullName: Task<Discord.Rest.RestDMChannel>
  nameWithType.vb: Task(Of RestDMChannel)
  fullName.vb: Task(Of Discord.Rest.RestDMChannel)
  name.vb: Task(Of RestDMChannel)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestDMChannel
    name: RestDMChannel
    nameWithType: RestDMChannel
    fullName: Discord.Rest.RestDMChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestDMChannel
    name: RestDMChannel
    nameWithType: RestDMChannel
    fullName: Discord.Rest.RestDMChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestUser.GetAvatarUrl*
  commentId: Overload:Discord.Rest.RestUser.GetAvatarUrl
  name: GetAvatarUrl
  nameWithType: RestUser.GetAvatarUrl
  fullName: Discord.Rest.RestUser.GetAvatarUrl
- uid: Discord.ImageFormat
  commentId: T:Discord.ImageFormat
  parent: Discord
  name: ImageFormat
  nameWithType: ImageFormat
  fullName: Discord.ImageFormat
- uid: Discord.Rest.RestUser.GetDefaultAvatarUrl*
  commentId: Overload:Discord.Rest.RestUser.GetDefaultAvatarUrl
  name: GetDefaultAvatarUrl
  nameWithType: RestUser.GetDefaultAvatarUrl
  fullName: Discord.Rest.RestUser.GetDefaultAvatarUrl
- uid: Discord.Rest.RestUser.ToString*
  commentId: Overload:Discord.Rest.RestUser.ToString
  name: ToString
  nameWithType: RestUser.ToString
  fullName: Discord.Rest.RestUser.ToString
