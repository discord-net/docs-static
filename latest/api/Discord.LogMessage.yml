### YamlMime:ManagedReference
items:
- uid: Discord.LogMessage
  commentId: T:Discord.LogMessage
  id: LogMessage
  parent: Discord
  children:
  - Discord.LogMessage.#ctor(Discord.LogSeverity,System.String,System.String,System.Exception)
  - Discord.LogMessage.Exception
  - Discord.LogMessage.Message
  - Discord.LogMessage.Severity
  - Discord.LogMessage.Source
  - Discord.LogMessage.ToString
  - Discord.LogMessage.ToString(System.Text.StringBuilder,System.Boolean,System.Boolean,System.DateTimeKind,System.Nullable{System.Int32})
  langs:
  - csharp
  - vb
  name: LogMessage
  nameWithType: LogMessage
  fullName: Discord.LogMessage
  type: Struct
  source:
    remote:
      path: src/Discord.Net.Core/Logging/LogMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: LogMessage
    path: ../src/Discord.Net.Core/Logging/LogMessage.cs
    startLine: 8
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nProvides a message object used for logging purposes.\n"
  example: []
  syntax:
    content: public struct LogMessage
    content.vb: Public Structure LogMessage
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Discord.LogMessage.Severity
  commentId: P:Discord.LogMessage.Severity
  id: Severity
  parent: Discord.LogMessage
  langs:
  - csharp
  - vb
  name: Severity
  nameWithType: LogMessage.Severity
  fullName: Discord.LogMessage.Severity
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Logging/LogMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Severity
    path: ../src/Discord.Net.Core/Logging/LogMessage.cs
    startLine: 16
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the severity of the log entry.\n"
  example: []
  syntax:
    content: public LogSeverity Severity { get; }
    parameters: []
    return:
      type: Discord.LogSeverity
      description: "\nA <xref href=\"Discord.LogSeverity\" data-throw-if-not-resolved=\"false\"></xref> enum to indicate the severeness of the incident or event.\n"
    content.vb: Public ReadOnly Property Severity As LogSeverity
  overload: Discord.LogMessage.Severity*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.LogMessage.Source
  commentId: P:Discord.LogMessage.Source
  id: Source
  parent: Discord.LogMessage
  langs:
  - csharp
  - vb
  name: Source
  nameWithType: LogMessage.Source
  fullName: Discord.LogMessage.Source
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Logging/LogMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Source
    path: ../src/Discord.Net.Core/Logging/LogMessage.cs
    startLine: 23
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the source of the log entry.\n"
  example: []
  syntax:
    content: public string Source { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA string representing the source of the log entry.\n"
    content.vb: Public ReadOnly Property Source As String
  overload: Discord.LogMessage.Source*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.LogMessage.Message
  commentId: P:Discord.LogMessage.Message
  id: Message
  parent: Discord.LogMessage
  langs:
  - csharp
  - vb
  name: Message
  nameWithType: LogMessage.Message
  fullName: Discord.LogMessage.Message
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Logging/LogMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Message
    path: ../src/Discord.Net.Core/Logging/LogMessage.cs
    startLine: 30
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the message of this log entry.\n"
  example: []
  syntax:
    content: public string Message { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA string containing the message of this log entry.\n"
    content.vb: Public ReadOnly Property Message As String
  overload: Discord.LogMessage.Message*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.LogMessage.Exception
  commentId: P:Discord.LogMessage.Exception
  id: Exception
  parent: Discord.LogMessage
  langs:
  - csharp
  - vb
  name: Exception
  nameWithType: LogMessage.Exception
  fullName: Discord.LogMessage.Exception
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Logging/LogMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Exception
    path: ../src/Discord.Net.Core/Logging/LogMessage.cs
    startLine: 37
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the exception of this log entry.\n"
  example: []
  syntax:
    content: public Exception Exception { get; }
    parameters: []
    return:
      type: System.Exception
      description: "\nAn <xref href=\"Discord.LogMessage.Exception\" data-throw-if-not-resolved=\"false\"></xref> object associated with an incident; otherwise <code>null</code>.\n"
    content.vb: Public ReadOnly Property Exception As Exception
  overload: Discord.LogMessage.Exception*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.LogMessage.#ctor(Discord.LogSeverity,System.String,System.String,System.Exception)
  commentId: M:Discord.LogMessage.#ctor(Discord.LogSeverity,System.String,System.String,System.Exception)
  id: '#ctor(Discord.LogSeverity,System.String,System.String,System.Exception)'
  parent: Discord.LogMessage
  langs:
  - csharp
  - vb
  name: LogMessage(LogSeverity, String, String, Exception)
  nameWithType: LogMessage.LogMessage(LogSeverity, String, String, Exception)
  fullName: Discord.LogMessage.LogMessage(Discord.LogSeverity, System.String, System.String, System.Exception)
  type: Constructor
  source:
    remote:
      path: src/Discord.Net.Core/Logging/LogMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: .ctor
    path: ../src/Discord.Net.Core/Logging/LogMessage.cs
    startLine: 47
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nInitializes a new <xref href=\"Discord.LogMessage\" data-throw-if-not-resolved=\"false\"></xref> struct with the severity, source, message of the event, and\noptionally, an exception.\n"
  example: []
  syntax:
    content: public LogMessage(LogSeverity severity, string source, string message, Exception exception = null)
    parameters:
    - id: severity
      type: Discord.LogSeverity
      description: The severity of the event.
    - id: source
      type: System.String
      description: The source of the event.
    - id: message
      type: System.String
      description: The message of the event.
    - id: exception
      type: System.Exception
      description: The exception of the event.
    content.vb: Public Sub New(severity As LogSeverity, source As String, message As String, exception As Exception = Nothing)
  overload: Discord.LogMessage.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.LogMessage.ToString
  commentId: M:Discord.LogMessage.ToString
  id: ToString
  parent: Discord.LogMessage
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: LogMessage.ToString()
  fullName: Discord.LogMessage.ToString()
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Logging/LogMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ToString
    path: ../src/Discord.Net.Core/Logging/LogMessage.cs
    startLine: 55
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: Discord.LogMessage.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.LogMessage.ToString(System.Text.StringBuilder,System.Boolean,System.Boolean,System.DateTimeKind,System.Nullable{System.Int32})
  commentId: M:Discord.LogMessage.ToString(System.Text.StringBuilder,System.Boolean,System.Boolean,System.DateTimeKind,System.Nullable{System.Int32})
  id: ToString(System.Text.StringBuilder,System.Boolean,System.Boolean,System.DateTimeKind,System.Nullable{System.Int32})
  parent: Discord.LogMessage
  langs:
  - csharp
  - vb
  name: ToString(StringBuilder, Boolean, Boolean, DateTimeKind, Nullable<Int32>)
  nameWithType: LogMessage.ToString(StringBuilder, Boolean, Boolean, DateTimeKind, Nullable<Int32>)
  fullName: Discord.LogMessage.ToString(System.Text.StringBuilder, System.Boolean, System.Boolean, System.DateTimeKind, System.Nullable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Logging/LogMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ToString
    path: ../src/Discord.Net.Core/Logging/LogMessage.cs
    startLine: 56
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  syntax:
    content: public string ToString(StringBuilder builder = null, bool fullException = true, bool prependTimestamp = true, DateTimeKind timestampKind = DateTimeKind.Local, int? padSource)
    parameters:
    - id: builder
      type: System.Text.StringBuilder
    - id: fullException
      type: System.Boolean
    - id: prependTimestamp
      type: System.Boolean
    - id: timestampKind
      type: System.DateTimeKind
    - id: padSource
      type: System.Nullable{System.Int32}
    return:
      type: System.String
    content.vb: Public Function ToString(builder As StringBuilder = Nothing, fullException As Boolean = True, prependTimestamp As Boolean = True, timestampKind As DateTimeKind = DateTimeKind.Local, padSource As Integer?) As String
  overload: Discord.LogMessage.ToString*
  nameWithType.vb: LogMessage.ToString(StringBuilder, Boolean, Boolean, DateTimeKind, Nullable(Of Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.LogMessage.ToString(System.Text.StringBuilder, System.Boolean, System.Boolean, System.DateTimeKind, System.Nullable(Of System.Int32))
  name.vb: ToString(StringBuilder, Boolean, Boolean, DateTimeKind, Nullable(Of Int32))
references:
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.LogSeverity
  commentId: T:Discord.LogSeverity
  parent: Discord
  name: LogSeverity
  nameWithType: LogSeverity
  fullName: Discord.LogSeverity
- uid: Discord.LogMessage.Severity*
  commentId: Overload:Discord.LogMessage.Severity
  name: Severity
  nameWithType: LogMessage.Severity
  fullName: Discord.LogMessage.Severity
- uid: Discord.LogMessage.Source*
  commentId: Overload:Discord.LogMessage.Source
  name: Source
  nameWithType: LogMessage.Source
  fullName: Discord.LogMessage.Source
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.LogMessage.Message*
  commentId: Overload:Discord.LogMessage.Message
  name: Message
  nameWithType: LogMessage.Message
  fullName: Discord.LogMessage.Message
- uid: Discord.LogMessage.Exception
  commentId: P:Discord.LogMessage.Exception
  isExternal: true
- uid: Discord.LogMessage.Exception*
  commentId: Overload:Discord.LogMessage.Exception
  name: Exception
  nameWithType: LogMessage.Exception
  fullName: Discord.LogMessage.Exception
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Discord.LogMessage
  commentId: T:Discord.LogMessage
  name: LogMessage
  nameWithType: LogMessage
  fullName: Discord.LogMessage
- uid: Discord.LogMessage.#ctor*
  commentId: Overload:Discord.LogMessage.#ctor
  name: LogMessage
  nameWithType: LogMessage.LogMessage
  fullName: Discord.LogMessage.LogMessage
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.LogMessage.ToString*
  commentId: Overload:Discord.LogMessage.ToString
  name: ToString
  nameWithType: LogMessage.ToString
  fullName: Discord.LogMessage.ToString
- uid: System.Text.StringBuilder
  commentId: T:System.Text.StringBuilder
  parent: System.Text
  isExternal: true
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.DateTimeKind
  commentId: T:System.DateTimeKind
  parent: System
  isExternal: true
  name: DateTimeKind
  nameWithType: DateTimeKind
  fullName: System.DateTimeKind
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Text
  commentId: N:System.Text
  isExternal: true
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
