### YamlMime:ManagedReference
items:
- uid: Discord.Emote
  commentId: T:Discord.Emote
  id: Emote
  parent: Discord
  children:
  - Discord.Emote.Animated
  - Discord.Emote.CreatedAt
  - Discord.Emote.Equals(System.Object)
  - Discord.Emote.GetHashCode
  - Discord.Emote.Id
  - Discord.Emote.Name
  - Discord.Emote.Parse(System.String)
  - Discord.Emote.ToString
  - Discord.Emote.TryParse(System.String,Discord.Emote@)
  - Discord.Emote.Url
  langs:
  - csharp
  - vb
  name: Emote
  nameWithType: Emote
  fullName: Discord.Emote
  type: Class
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Emotes/Emote.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Emote
    path: ../src/Discord.Net.Core/Entities/Emotes/Emote.cs
    startLine: 9
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nA custom image-based emote.\n"
  example: []
  syntax:
    content: 'public class Emote : IEmote, ISnowflakeEntity, IEntity<ulong>'
    content.vb: >-
      Public Class Emote
          Implements IEmote, ISnowflakeEntity, IEntity(Of ULong)
  inheritance:
  - System.Object
  derivedClasses:
  - Discord.GuildEmote
  implements:
  - Discord.IEmote
  - Discord.ISnowflakeEntity
  - Discord.IEntity{System.UInt64}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.Emote.Name
  commentId: P:Discord.Emote.Name
  id: Name
  parent: Discord.Emote
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Emote.Name
  fullName: Discord.Emote.Name
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Emotes/Emote.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Name
    path: ../src/Discord.Net.Core/Entities/Emotes/Emote.cs
    startLine: 13
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the display name or Unicode representation of this emote.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA string representing the display name or the Unicode representation (e.g. <code>\U0001F914</code>) of this emote.\n"
    content.vb: Public ReadOnly Property Name As String
  overload: Discord.Emote.Name*
  implements:
  - Discord.IEmote.Name
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Emote.Id
  commentId: P:Discord.Emote.Id
  id: Id
  parent: Discord.Emote
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: Emote.Id
  fullName: Discord.Emote.Id
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Emotes/Emote.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Id
    path: ../src/Discord.Net.Core/Entities/Emotes/Emote.cs
    startLine: 15
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  example: []
  syntax:
    content: public ulong Id { get; }
    parameters: []
    return:
      type: System.UInt64
    content.vb: Public ReadOnly Property Id As ULong
  overload: Discord.Emote.Id*
  implements:
  - Discord.IEntity{System.UInt64}.Id
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Emote.Animated
  commentId: P:Discord.Emote.Animated
  id: Animated
  parent: Discord.Emote
  langs:
  - csharp
  - vb
  name: Animated
  nameWithType: Emote.Animated
  fullName: Discord.Emote.Animated
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Emotes/Emote.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Animated
    path: ../src/Discord.Net.Core/Entities/Emotes/Emote.cs
    startLine: 22
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets whether this emote is animated.\n"
  example: []
  syntax:
    content: public bool Animated { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\nA boolean that determines whether or not this emote is an animated one.\n"
    content.vb: Public ReadOnly Property Animated As Boolean
  overload: Discord.Emote.Animated*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Emote.CreatedAt
  commentId: P:Discord.Emote.CreatedAt
  id: CreatedAt
  parent: Discord.Emote
  langs:
  - csharp
  - vb
  name: CreatedAt
  nameWithType: Emote.CreatedAt
  fullName: Discord.Emote.CreatedAt
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Emotes/Emote.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreatedAt
    path: ../src/Discord.Net.Core/Entities/Emotes/Emote.cs
    startLine: 24
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets when the snowflake was created.\n"
  example: []
  syntax:
    content: public DateTimeOffset CreatedAt { get; }
    parameters: []
    return:
      type: System.DateTimeOffset
      description: "\nA <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> representing when the entity was first created.\n"
    content.vb: Public ReadOnly Property CreatedAt As DateTimeOffset
  overload: Discord.Emote.CreatedAt*
  implements:
  - Discord.ISnowflakeEntity.CreatedAt
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Emote.Url
  commentId: P:Discord.Emote.Url
  id: Url
  parent: Discord.Emote
  langs:
  - csharp
  - vb
  name: Url
  nameWithType: Emote.Url
  fullName: Discord.Emote.Url
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Emotes/Emote.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Url
    path: ../src/Discord.Net.Core/Entities/Emotes/Emote.cs
    startLine: 31
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the image URL of this emote.\n"
  example: []
  syntax:
    content: public string Url { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA string that points to the URL of this emote.\n"
    content.vb: Public ReadOnly Property Url As String
  overload: Discord.Emote.Url*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Emote.Equals(System.Object)
  commentId: M:Discord.Emote.Equals(System.Object)
  id: Equals(System.Object)
  parent: Discord.Emote
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Emote.Equals(Object)
  fullName: Discord.Emote.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Emotes/Emote.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Equals
    path: ../src/Discord.Net.Core/Entities/Emotes/Emote.cs
    startLine: 44
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nDetermines whether the specified emote is equal to the current emote.\n"
  example: []
  syntax:
    content: public override bool Equals(object other)
    parameters:
    - id: other
      type: System.Object
      description: The object to compare with the current object.
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(other As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: Discord.Emote.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.Emote.GetHashCode
  commentId: M:Discord.Emote.GetHashCode
  id: GetHashCode
  parent: Discord.Emote
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Emote.GetHashCode()
  fullName: Discord.Emote.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Emotes/Emote.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetHashCode
    path: ../src/Discord.Net.Core/Entities/Emotes/Emote.cs
    startLine: 56
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: Discord.Emote.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.Emote.Parse(System.String)
  commentId: M:Discord.Emote.Parse(System.String)
  id: Parse(System.String)
  parent: Discord.Emote
  langs:
  - csharp
  - vb
  name: Parse(String)
  nameWithType: Emote.Parse(String)
  fullName: Discord.Emote.Parse(System.String)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Emotes/Emote.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Parse
    path: ../src/Discord.Net.Core/Entities/Emotes/Emote.cs
    startLine: 63
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: 'Parses an <xref href="Discord.Emote" data-throw-if-not-resolved="false"></xref> from its raw format. '
  example: []
  syntax:
    content: public static Emote Parse(string text)
    parameters:
    - id: text
      type: System.String
      description: The raw encoding of an emote (e.g. <code>&lt;:dab:277855270321782784></code>).
    return:
      type: Discord.Emote
      description: An emote.
    content.vb: Public Shared Function Parse(text As String) As Emote
  overload: Discord.Emote.Parse*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Invalid emote format.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Discord.Emote.TryParse(System.String,Discord.Emote@)
  commentId: M:Discord.Emote.TryParse(System.String,Discord.Emote@)
  id: TryParse(System.String,Discord.Emote@)
  parent: Discord.Emote
  langs:
  - csharp
  - vb
  name: TryParse(String, out Emote)
  nameWithType: Emote.TryParse(String, out Emote)
  fullName: Discord.Emote.TryParse(System.String, out Discord.Emote)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Emotes/Emote.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: TryParse
    path: ../src/Discord.Net.Core/Entities/Emotes/Emote.cs
    startLine: 73
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: 'Tries to parse an <xref href="Discord.Emote" data-throw-if-not-resolved="false"></xref> from its raw format. '
  example: []
  syntax:
    content: public static bool TryParse(string text, out Emote result)
    parameters:
    - id: text
      type: System.String
      description: The raw encoding of an emote; for example, &lt;:dab:277855270321782784>.
    - id: result
      type: Discord.Emote
      description: An emote.
    return:
      type: System.Boolean
    content.vb: Public Shared Function TryParse(text As String, ByRef result As Emote) As Boolean
  overload: Discord.Emote.TryParse*
  nameWithType.vb: Emote.TryParse(String, ByRef Emote)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Discord.Emote.TryParse(System.String, ByRef Discord.Emote)
  name.vb: TryParse(String, ByRef Emote)
- uid: Discord.Emote.ToString
  commentId: M:Discord.Emote.ToString
  id: ToString
  parent: Discord.Emote
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Emote.ToString()
  fullName: Discord.Emote.ToString()
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Emotes/Emote.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ToString
    path: ../src/Discord.Net.Core/Entities/Emotes/Emote.cs
    startLine: 103
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nReturns the raw representation of the emote.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nA string representing the raw presentation of the emote (e.g. <code>&lt;:thonkang:282745590985523200></code>).\n"
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Discord.Emote.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.IEmote
  commentId: T:Discord.IEmote
  parent: Discord
  name: IEmote
  nameWithType: IEmote
  fullName: Discord.IEmote
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Emote.Name*
  commentId: Overload:Discord.Emote.Name
  name: Name
  nameWithType: Emote.Name
  fullName: Discord.Emote.Name
- uid: Discord.IEmote.Name
  commentId: P:Discord.IEmote.Name
  parent: Discord.IEmote
  name: Name
  nameWithType: IEmote.Name
  fullName: Discord.IEmote.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.Emote.Id*
  commentId: Overload:Discord.Emote.Id
  name: Id
  nameWithType: Emote.Id
  fullName: Discord.Emote.Id
- uid: Discord.IEntity{System.UInt64}.Id
  commentId: P:Discord.IEntity{System.UInt64}.Id
  parent: Discord.IEntity{System.UInt64}
  definition: Discord.IEntity`1.Id
  name: Id
  nameWithType: IEntity<UInt64>.Id
  fullName: Discord.IEntity<System.UInt64>.Id
  nameWithType.vb: IEntity(Of UInt64).Id
  fullName.vb: Discord.IEntity(Of System.UInt64).Id
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Discord.IEntity`1.Id
  commentId: P:Discord.IEntity`1.Id
  name: Id
  nameWithType: IEntity<TId>.Id
  fullName: Discord.IEntity<TId>.Id
  nameWithType.vb: IEntity(Of TId).Id
  fullName.vb: Discord.IEntity(Of TId).Id
- uid: Discord.Emote.Animated*
  commentId: Overload:Discord.Emote.Animated
  name: Animated
  nameWithType: Emote.Animated
  fullName: Discord.Emote.Animated
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.Emote.CreatedAt*
  commentId: Overload:Discord.Emote.CreatedAt
  name: CreatedAt
  nameWithType: Emote.CreatedAt
  fullName: Discord.Emote.CreatedAt
- uid: Discord.ISnowflakeEntity.CreatedAt
  commentId: P:Discord.ISnowflakeEntity.CreatedAt
  parent: Discord.ISnowflakeEntity
  name: CreatedAt
  nameWithType: ISnowflakeEntity.CreatedAt
  fullName: Discord.ISnowflakeEntity.CreatedAt
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: Discord.Emote.Url*
  commentId: Overload:Discord.Emote.Url
  name: Url
  nameWithType: Emote.Url
  fullName: Discord.Emote.Url
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Emote.Equals*
  commentId: Overload:Discord.Emote.Equals
  name: Equals
  nameWithType: Emote.Equals
  fullName: Discord.Emote.Equals
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Emote.GetHashCode*
  commentId: Overload:Discord.Emote.GetHashCode
  name: GetHashCode
  nameWithType: Emote.GetHashCode
  fullName: Discord.Emote.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Discord.Emote
  commentId: T:Discord.Emote
  parent: Discord
  name: Emote
  nameWithType: Emote
  fullName: Discord.Emote
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: Discord.Emote.Parse*
  commentId: Overload:Discord.Emote.Parse
  name: Parse
  nameWithType: Emote.Parse
  fullName: Discord.Emote.Parse
- uid: Discord.Emote.TryParse*
  commentId: Overload:Discord.Emote.TryParse
  name: TryParse
  nameWithType: Emote.TryParse
  fullName: Discord.Emote.TryParse
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Emote.ToString*
  commentId: Overload:Discord.Emote.ToString
  name: ToString
  nameWithType: Emote.ToString
  fullName: Discord.Emote.ToString
