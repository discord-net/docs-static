### YamlMime:ManagedReference
items:
- uid: Discord.Commands.ParameterPreconditionAttribute
  commentId: T:Discord.Commands.ParameterPreconditionAttribute
  id: ParameterPreconditionAttribute
  parent: Discord.Commands
  children:
  - Discord.Commands.ParameterPreconditionAttribute.CheckPermissionsAsync(Discord.Commands.ICommandContext,Discord.Commands.ParameterInfo,System.Object,IServiceProvider)
  langs:
  - csharp
  - vb
  name: ParameterPreconditionAttribute
  nameWithType: ParameterPreconditionAttribute
  fullName: Discord.Commands.ParameterPreconditionAttribute
  type: Class
  source:
    remote:
      path: src/Discord.Net.Commands/Attributes/ParameterPreconditionAttribute.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ParameterPreconditionAttribute
    path: ../src/Discord.Net.Commands/Attributes/ParameterPreconditionAttribute.cs
    startLine: 9
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nRequires the parameter to pass the specified precondition before execution can begin.\n"
  example: []
  syntax:
    content: 'public abstract class ParameterPreconditionAttribute : Attribute'
    content.vb: >-
      Public MustInherit Class ParameterPreconditionAttribute
          Inherits Attribute
  seealso:
  - linkId: Discord.Commands.PreconditionAttribute
    commentId: T:Discord.Commands.PreconditionAttribute
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Discord.Commands.ParameterPreconditionAttribute.CheckPermissionsAsync(Discord.Commands.ICommandContext,Discord.Commands.ParameterInfo,System.Object,IServiceProvider)
  commentId: M:Discord.Commands.ParameterPreconditionAttribute.CheckPermissionsAsync(Discord.Commands.ICommandContext,Discord.Commands.ParameterInfo,System.Object,IServiceProvider)
  id: CheckPermissionsAsync(Discord.Commands.ICommandContext,Discord.Commands.ParameterInfo,System.Object,IServiceProvider)
  parent: Discord.Commands.ParameterPreconditionAttribute
  langs:
  - csharp
  - vb
  name: CheckPermissionsAsync(ICommandContext, ParameterInfo, Object, IServiceProvider)
  nameWithType: ParameterPreconditionAttribute.CheckPermissionsAsync(ICommandContext, ParameterInfo, Object, IServiceProvider)
  fullName: Discord.Commands.ParameterPreconditionAttribute.CheckPermissionsAsync(Discord.Commands.ICommandContext, Discord.Commands.ParameterInfo, System.Object, IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Attributes/ParameterPreconditionAttribute.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: CheckPermissionsAsync
    path: ../src/Discord.Net.Commands/Attributes/ParameterPreconditionAttribute.cs
    startLine: 19
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nChecks whether the condition is met before execution of the command.\n"
  example: []
  syntax:
    content: public abstract Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, ParameterInfo parameter, object value, IServiceProvider services)
    parameters:
    - id: context
      type: Discord.Commands.ICommandContext
      description: The context of the command.
    - id: parameter
      type: Discord.Commands.ParameterInfo
      description: The parameter of the command being checked against.
    - id: value
      type: System.Object
      description: The raw value of the parameter.
    - id: services
      type: IServiceProvider
      description: The service collection used for dependency injection.
    return:
      type: Task{Discord.Commands.PreconditionResult}
    content.vb: Public MustOverride Function CheckPermissionsAsync(context As ICommandContext, parameter As ParameterInfo, value As Object, services As IServiceProvider) As Task(Of PreconditionResult)
  overload: Discord.Commands.ParameterPreconditionAttribute.CheckPermissionsAsync*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: Discord.Commands.PreconditionAttribute
  commentId: T:Discord.Commands.PreconditionAttribute
  parent: Discord.Commands
  name: PreconditionAttribute
  nameWithType: PreconditionAttribute
  fullName: Discord.Commands.PreconditionAttribute
- uid: Discord.Commands
  commentId: N:Discord.Commands
  name: Discord.Commands
  nameWithType: Discord.Commands
  fullName: Discord.Commands
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Commands.ParameterPreconditionAttribute.CheckPermissionsAsync*
  commentId: Overload:Discord.Commands.ParameterPreconditionAttribute.CheckPermissionsAsync
  name: CheckPermissionsAsync
  nameWithType: ParameterPreconditionAttribute.CheckPermissionsAsync
  fullName: Discord.Commands.ParameterPreconditionAttribute.CheckPermissionsAsync
- uid: Discord.Commands.ICommandContext
  commentId: T:Discord.Commands.ICommandContext
  parent: Discord.Commands
  name: ICommandContext
  nameWithType: ICommandContext
  fullName: Discord.Commands.ICommandContext
- uid: Discord.Commands.ParameterInfo
  commentId: T:Discord.Commands.ParameterInfo
  parent: Discord.Commands
  name: ParameterInfo
  nameWithType: ParameterInfo
  fullName: Discord.Commands.ParameterInfo
- uid: IServiceProvider
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: IServiceProvider
- uid: Task{Discord.Commands.PreconditionResult}
  commentId: '!:Task{Discord.Commands.PreconditionResult}'
  definition: Task`1
  name: Task<PreconditionResult>
  nameWithType: Task<PreconditionResult>
  fullName: Task<Discord.Commands.PreconditionResult>
  nameWithType.vb: Task(Of PreconditionResult)
  fullName.vb: Task(Of Discord.Commands.PreconditionResult)
  name.vb: Task(Of PreconditionResult)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.PreconditionResult
    name: PreconditionResult
    nameWithType: PreconditionResult
    fullName: Discord.Commands.PreconditionResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.PreconditionResult
    name: PreconditionResult
    nameWithType: PreconditionResult
    fullName: Discord.Commands.PreconditionResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
