### YamlMime:ManagedReference
items:
- uid: Discord.Commands.CommandServiceConfig
  commentId: T:Discord.Commands.CommandServiceConfig
  id: CommandServiceConfig
  parent: Discord.Commands
  children:
  - Discord.Commands.CommandServiceConfig.CaseSensitiveCommands
  - Discord.Commands.CommandServiceConfig.DefaultRunMode
  - Discord.Commands.CommandServiceConfig.IgnoreExtraArgs
  - Discord.Commands.CommandServiceConfig.LogLevel
  - Discord.Commands.CommandServiceConfig.QuotationMarkAliasMap
  - Discord.Commands.CommandServiceConfig.SeparatorChar
  - Discord.Commands.CommandServiceConfig.ThrowOnError
  langs:
  - csharp
  - vb
  name: CommandServiceConfig
  nameWithType: CommandServiceConfig
  fullName: Discord.Commands.CommandServiceConfig
  type: Class
  source:
    remote:
      path: src/Discord.Net.Commands/CommandServiceConfig.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CommandServiceConfig
    path: ../src/Discord.Net.Commands/CommandServiceConfig.cs
    startLine: 7
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nRepresents a configuration class for <xref href=\"Discord.Commands.CommandService\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class CommandServiceConfig : object'
    content.vb: >-
      Public Class CommandServiceConfig
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.Commands.CommandServiceConfig.DefaultRunMode
  commentId: P:Discord.Commands.CommandServiceConfig.DefaultRunMode
  id: DefaultRunMode
  parent: Discord.Commands.CommandServiceConfig
  langs:
  - csharp
  - vb
  name: DefaultRunMode
  nameWithType: CommandServiceConfig.DefaultRunMode
  fullName: Discord.Commands.CommandServiceConfig.DefaultRunMode
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/CommandServiceConfig.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DefaultRunMode
    path: ../src/Discord.Net.Commands/CommandServiceConfig.cs
    startLine: 13
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets or sets the default <xref href=\"Discord.Commands.RunMode\" data-throw-if-not-resolved=\"false\"></xref> commands should have, if one is not specified on the\nCommand attribute or builder.\n"
  example: []
  syntax:
    content: public RunMode DefaultRunMode { get; set; }
    parameters: []
    return:
      type: Discord.Commands.RunMode
    content.vb: Public Property DefaultRunMode As RunMode
  overload: Discord.Commands.CommandServiceConfig.DefaultRunMode*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Discord.Commands.CommandServiceConfig.SeparatorChar
  commentId: P:Discord.Commands.CommandServiceConfig.SeparatorChar
  id: SeparatorChar
  parent: Discord.Commands.CommandServiceConfig
  langs:
  - csharp
  - vb
  name: SeparatorChar
  nameWithType: CommandServiceConfig.SeparatorChar
  fullName: Discord.Commands.CommandServiceConfig.SeparatorChar
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/CommandServiceConfig.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SeparatorChar
    path: ../src/Discord.Net.Commands/CommandServiceConfig.cs
    startLine: 18
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets or sets the <see cref=\"!:System.Char\"></see> that separates an argument with another.\n"
  example: []
  syntax:
    content: public char SeparatorChar { get; set; }
    parameters: []
    return:
      type: System.Char
    content.vb: Public Property SeparatorChar As Char
  overload: Discord.Commands.CommandServiceConfig.SeparatorChar*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Discord.Commands.CommandServiceConfig.CaseSensitiveCommands
  commentId: P:Discord.Commands.CommandServiceConfig.CaseSensitiveCommands
  id: CaseSensitiveCommands
  parent: Discord.Commands.CommandServiceConfig
  langs:
  - csharp
  - vb
  name: CaseSensitiveCommands
  nameWithType: CommandServiceConfig.CaseSensitiveCommands
  fullName: Discord.Commands.CommandServiceConfig.CaseSensitiveCommands
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/CommandServiceConfig.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CaseSensitiveCommands
    path: ../src/Discord.Net.Commands/CommandServiceConfig.cs
    startLine: 23
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets or sets whether commands should be case-sensitive.\n"
  example: []
  syntax:
    content: public bool CaseSensitiveCommands { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property CaseSensitiveCommands As Boolean
  overload: Discord.Commands.CommandServiceConfig.CaseSensitiveCommands*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Discord.Commands.CommandServiceConfig.LogLevel
  commentId: P:Discord.Commands.CommandServiceConfig.LogLevel
  id: LogLevel
  parent: Discord.Commands.CommandServiceConfig
  langs:
  - csharp
  - vb
  name: LogLevel
  nameWithType: CommandServiceConfig.LogLevel
  fullName: Discord.Commands.CommandServiceConfig.LogLevel
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/CommandServiceConfig.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: LogLevel
    path: ../src/Discord.Net.Commands/CommandServiceConfig.cs
    startLine: 28
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets or sets the minimum log level severity that will be sent to the <xref href=\"Discord.Commands.CommandService.Log\" data-throw-if-not-resolved=\"false\"></xref> event.\n"
  example: []
  syntax:
    content: public LogSeverity LogLevel { get; set; }
    parameters: []
    return:
      type: Discord.LogSeverity
    content.vb: Public Property LogLevel As LogSeverity
  overload: Discord.Commands.CommandServiceConfig.LogLevel*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Discord.Commands.CommandServiceConfig.ThrowOnError
  commentId: P:Discord.Commands.CommandServiceConfig.ThrowOnError
  id: ThrowOnError
  parent: Discord.Commands.CommandServiceConfig
  langs:
  - csharp
  - vb
  name: ThrowOnError
  nameWithType: CommandServiceConfig.ThrowOnError
  fullName: Discord.Commands.CommandServiceConfig.ThrowOnError
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/CommandServiceConfig.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ThrowOnError
    path: ../src/Discord.Net.Commands/CommandServiceConfig.cs
    startLine: 33
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets or sets whether <xref href=\"Discord.Commands.RunMode.Sync\" data-throw-if-not-resolved=\"false\"></xref> commands should push exceptions up to the caller.\n"
  example: []
  syntax:
    content: public bool ThrowOnError { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property ThrowOnError As Boolean
  overload: Discord.Commands.CommandServiceConfig.ThrowOnError*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Discord.Commands.CommandServiceConfig.QuotationMarkAliasMap
  commentId: P:Discord.Commands.CommandServiceConfig.QuotationMarkAliasMap
  id: QuotationMarkAliasMap
  parent: Discord.Commands.CommandServiceConfig
  langs:
  - csharp
  - vb
  name: QuotationMarkAliasMap
  nameWithType: CommandServiceConfig.QuotationMarkAliasMap
  fullName: Discord.Commands.CommandServiceConfig.QuotationMarkAliasMap
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/CommandServiceConfig.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: QuotationMarkAliasMap
    path: ../src/Discord.Net.Commands/CommandServiceConfig.cs
    startLine: 54
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nCollection of aliases for matching pairs of string delimiters.\nThe dictionary stores the opening delimiter as a key, and the matching closing delimiter as the value.\nIf no value is supplied <xref href=\"Discord.Commands.QuotationAliasUtils.GetDefaultAliasMap\" data-throw-if-not-resolved=\"false\"></xref> will be used, which contains\nmany regional equivalents.\nOnly values that are specified in this map will be used as string delimiters, so if &quot; is removed then\nit won&apos;t be used.\nIf this map is set to null or empty, the default delimiter of &quot; will be used.\n"
  example:
  - "\n<pre><code class=\"lang-cs\">QuotationMarkAliasMap = new Dictionary&lt;char, char%gt;()\n{\n    {&apos;\\&quot;&apos;, &apos;\\&quot;&apos; },\n    {&apos;“&apos;, &apos;”&apos; },\n    {&apos;「&apos;, &apos;」&apos; },\n}</code></pre>\n"
  syntax:
    content: public Dictionary<char, char> QuotationMarkAliasMap { get; set; }
    parameters: []
    return:
      type: Dictionary{System.Char,System.Char}
    content.vb: Public Property QuotationMarkAliasMap As Dictionary(Of Char, Char)
  overload: Discord.Commands.CommandServiceConfig.QuotationMarkAliasMap*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Discord.Commands.CommandServiceConfig.IgnoreExtraArgs
  commentId: P:Discord.Commands.CommandServiceConfig.IgnoreExtraArgs
  id: IgnoreExtraArgs
  parent: Discord.Commands.CommandServiceConfig
  langs:
  - csharp
  - vb
  name: IgnoreExtraArgs
  nameWithType: CommandServiceConfig.IgnoreExtraArgs
  fullName: Discord.Commands.CommandServiceConfig.IgnoreExtraArgs
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/CommandServiceConfig.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IgnoreExtraArgs
    path: ../src/Discord.Net.Commands/CommandServiceConfig.cs
    startLine: 59
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets or sets a value that indicates whether extra parameters should be ignored.\n"
  example: []
  syntax:
    content: public bool IgnoreExtraArgs { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IgnoreExtraArgs As Boolean
  overload: Discord.Commands.CommandServiceConfig.IgnoreExtraArgs*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Discord.Commands.CommandService
  commentId: T:Discord.Commands.CommandService
  parent: Discord.Commands
  name: CommandService
  nameWithType: CommandService
  fullName: Discord.Commands.CommandService
- uid: Discord.Commands
  commentId: N:Discord.Commands
  name: Discord.Commands
  nameWithType: Discord.Commands
  fullName: Discord.Commands
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Commands.RunMode
  commentId: T:Discord.Commands.RunMode
  parent: Discord.Commands
  name: RunMode
  nameWithType: RunMode
  fullName: Discord.Commands.RunMode
- uid: Discord.Commands.CommandServiceConfig.DefaultRunMode*
  commentId: Overload:Discord.Commands.CommandServiceConfig.DefaultRunMode
  name: DefaultRunMode
  nameWithType: CommandServiceConfig.DefaultRunMode
  fullName: Discord.Commands.CommandServiceConfig.DefaultRunMode
- uid: Discord.Commands.CommandServiceConfig.SeparatorChar*
  commentId: Overload:Discord.Commands.CommandServiceConfig.SeparatorChar
  name: SeparatorChar
  nameWithType: CommandServiceConfig.SeparatorChar
  fullName: Discord.Commands.CommandServiceConfig.SeparatorChar
- uid: System.Char
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: Discord.Commands.CommandServiceConfig.CaseSensitiveCommands*
  commentId: Overload:Discord.Commands.CommandServiceConfig.CaseSensitiveCommands
  name: CaseSensitiveCommands
  nameWithType: CommandServiceConfig.CaseSensitiveCommands
  fullName: Discord.Commands.CommandServiceConfig.CaseSensitiveCommands
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.Commands.CommandService.Log
  commentId: E:Discord.Commands.CommandService.Log
  isExternal: true
- uid: Discord.Commands.CommandServiceConfig.LogLevel*
  commentId: Overload:Discord.Commands.CommandServiceConfig.LogLevel
  name: LogLevel
  nameWithType: CommandServiceConfig.LogLevel
  fullName: Discord.Commands.CommandServiceConfig.LogLevel
- uid: Discord.LogSeverity
  commentId: T:Discord.LogSeverity
  parent: Discord
  name: LogSeverity
  nameWithType: LogSeverity
  fullName: Discord.LogSeverity
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.Commands.RunMode.Sync
  commentId: F:Discord.Commands.RunMode.Sync
  isExternal: true
- uid: Discord.Commands.CommandServiceConfig.ThrowOnError*
  commentId: Overload:Discord.Commands.CommandServiceConfig.ThrowOnError
  name: ThrowOnError
  nameWithType: CommandServiceConfig.ThrowOnError
  fullName: Discord.Commands.CommandServiceConfig.ThrowOnError
- uid: Discord.Commands.QuotationAliasUtils.GetDefaultAliasMap
  commentId: P:Discord.Commands.QuotationAliasUtils.GetDefaultAliasMap
  isExternal: true
- uid: Discord.Commands.CommandServiceConfig.QuotationMarkAliasMap*
  commentId: Overload:Discord.Commands.CommandServiceConfig.QuotationMarkAliasMap
  name: QuotationMarkAliasMap
  nameWithType: CommandServiceConfig.QuotationMarkAliasMap
  fullName: Discord.Commands.CommandServiceConfig.QuotationMarkAliasMap
- uid: Dictionary{System.Char,System.Char}
  commentId: '!:Dictionary{System.Char,System.Char}'
  definition: Dictionary`2
  name: Dictionary<Char, Char>
  nameWithType: Dictionary<Char, Char>
  fullName: Dictionary<System.Char, System.Char>
  nameWithType.vb: Dictionary(Of Char, Char)
  fullName.vb: Dictionary(Of System.Char, System.Char)
  name.vb: Dictionary(Of Char, Char)
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary`2
  commentId: '!:Dictionary`2'
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.CommandServiceConfig.IgnoreExtraArgs*
  commentId: Overload:Discord.Commands.CommandServiceConfig.IgnoreExtraArgs
  name: IgnoreExtraArgs
  nameWithType: CommandServiceConfig.IgnoreExtraArgs
  fullName: Discord.Commands.CommandServiceConfig.IgnoreExtraArgs
