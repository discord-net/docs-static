### YamlMime:ManagedReference
items:
- uid: Discord.Commands.CommandInfo
  commentId: T:Discord.Commands.CommandInfo
  id: CommandInfo
  parent: Discord.Commands
  children:
  - Discord.Commands.CommandInfo.Aliases
  - Discord.Commands.CommandInfo.Attributes
  - Discord.Commands.CommandInfo.CheckPreconditionsAsync(Discord.Commands.ICommandContext,IServiceProvider)
  - Discord.Commands.CommandInfo.ExecuteAsync(Discord.Commands.ICommandContext,Discord.Commands.ParseResult,IServiceProvider)
  - Discord.Commands.CommandInfo.ExecuteAsync(Discord.Commands.ICommandContext,IEnumerable{System.Object},IEnumerable{System.Object},IServiceProvider)
  - Discord.Commands.CommandInfo.HasVarArgs
  - Discord.Commands.CommandInfo.IgnoreExtraArgs
  - Discord.Commands.CommandInfo.Module
  - Discord.Commands.CommandInfo.Name
  - Discord.Commands.CommandInfo.Parameters
  - Discord.Commands.CommandInfo.ParseAsync(Discord.Commands.ICommandContext,System.Int32,Discord.Commands.SearchResult,Discord.Commands.PreconditionResult,IServiceProvider)
  - Discord.Commands.CommandInfo.Preconditions
  - Discord.Commands.CommandInfo.Priority
  - Discord.Commands.CommandInfo.Remarks
  - Discord.Commands.CommandInfo.RunMode
  - Discord.Commands.CommandInfo.Summary
  langs:
  - csharp
  - vb
  name: CommandInfo
  nameWithType: CommandInfo
  fullName: Discord.Commands.CommandInfo
  type: Class
  source:
    remote:
      path: src/Discord.Net.Commands/Info/CommandInfo.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: CommandInfo
    path: ../src/Discord.Net.Commands/Info/CommandInfo.cs
    startLine: 20
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nProvides the information of a command.\n"
  remarks: "\nThis object contains the information of a command. This can include the module of the command, various\ndescriptions regarding the command, and its <xref href=\"Discord.Commands.CommandInfo.RunMode\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class CommandInfo : object'
    content.vb: >-
      Public Class CommandInfo
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.Commands.CommandInfo.Module
  commentId: P:Discord.Commands.CommandInfo.Module
  id: Module
  parent: Discord.Commands.CommandInfo
  langs:
  - csharp
  - vb
  name: Module
  nameWithType: CommandInfo.Module
  fullName: Discord.Commands.CommandInfo.Module
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/CommandInfo.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Module
    path: ../src/Discord.Net.Commands/Info/CommandInfo.cs
    startLine: 32
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets the module that the command belongs in.\n"
  example: []
  syntax:
    content: public ModuleInfo Module { get; }
    parameters: []
    return:
      type: Discord.Commands.ModuleInfo
    content.vb: Public ReadOnly Property Module As ModuleInfo
  overload: Discord.Commands.CommandInfo.Module*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.CommandInfo.Name
  commentId: P:Discord.Commands.CommandInfo.Name
  id: Name
  parent: Discord.Commands.CommandInfo
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: CommandInfo.Name
  fullName: Discord.Commands.CommandInfo.Name
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/CommandInfo.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Name
    path: ../src/Discord.Net.Commands/Info/CommandInfo.cs
    startLine: 36
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets the name of the command. If none is set, the first alias is used.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Discord.Commands.CommandInfo.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.CommandInfo.Summary
  commentId: P:Discord.Commands.CommandInfo.Summary
  id: Summary
  parent: Discord.Commands.CommandInfo
  langs:
  - csharp
  - vb
  name: Summary
  nameWithType: CommandInfo.Summary
  fullName: Discord.Commands.CommandInfo.Summary
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/CommandInfo.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Summary
    path: ../src/Discord.Net.Commands/Info/CommandInfo.cs
    startLine: 44
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets the summary of the command.\n"
  remarks: "\nThis field returns the summary of the command. <xref href=\"Discord.Commands.CommandInfo.Summary\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Discord.Commands.CommandInfo.Remarks\" data-throw-if-not-resolved=\"false\"></xref> can be\nuseful in help commands and various implementation that fetches details of the command for the user.\n"
  example: []
  syntax:
    content: public string Summary { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Summary As String
  overload: Discord.Commands.CommandInfo.Summary*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.CommandInfo.Remarks
  commentId: P:Discord.Commands.CommandInfo.Remarks
  id: Remarks
  parent: Discord.Commands.CommandInfo
  langs:
  - csharp
  - vb
  name: Remarks
  nameWithType: CommandInfo.Remarks
  fullName: Discord.Commands.CommandInfo.Remarks
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/CommandInfo.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Remarks
    path: ../src/Discord.Net.Commands/Info/CommandInfo.cs
    startLine: 52
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets the remarks of the command.\n"
  remarks: "\nThis field returns the summary of the command. <xref href=\"Discord.Commands.CommandInfo.Summary\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"Discord.Commands.CommandInfo.Remarks\" data-throw-if-not-resolved=\"false\"></xref> can be\nuseful in help commands and various implementation that fetches details of the command for the user.\n"
  example: []
  syntax:
    content: public string Remarks { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Remarks As String
  overload: Discord.Commands.CommandInfo.Remarks*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.CommandInfo.Priority
  commentId: P:Discord.Commands.CommandInfo.Priority
  id: Priority
  parent: Discord.Commands.CommandInfo
  langs:
  - csharp
  - vb
  name: Priority
  nameWithType: CommandInfo.Priority
  fullName: Discord.Commands.CommandInfo.Priority
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/CommandInfo.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Priority
    path: ../src/Discord.Net.Commands/Info/CommandInfo.cs
    startLine: 56
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets the priority of the command. This is used when there are multiple overloads of the command.\n"
  example: []
  syntax:
    content: public int Priority { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Priority As Integer
  overload: Discord.Commands.CommandInfo.Priority*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.CommandInfo.HasVarArgs
  commentId: P:Discord.Commands.CommandInfo.HasVarArgs
  id: HasVarArgs
  parent: Discord.Commands.CommandInfo
  langs:
  - csharp
  - vb
  name: HasVarArgs
  nameWithType: CommandInfo.HasVarArgs
  fullName: Discord.Commands.CommandInfo.HasVarArgs
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/CommandInfo.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: HasVarArgs
    path: ../src/Discord.Net.Commands/Info/CommandInfo.cs
    startLine: 61
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nIndicates whether the command accepts a <xref uid=\"langword_csharp_params\" name=\"params\" href=\"\"></xref> <see cref=\"!:Type\"></see>[] for its\nparameter.\n"
  example: []
  syntax:
    content: public bool HasVarArgs { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasVarArgs As Boolean
  overload: Discord.Commands.CommandInfo.HasVarArgs*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.CommandInfo.IgnoreExtraArgs
  commentId: P:Discord.Commands.CommandInfo.IgnoreExtraArgs
  id: IgnoreExtraArgs
  parent: Discord.Commands.CommandInfo
  langs:
  - csharp
  - vb
  name: IgnoreExtraArgs
  nameWithType: CommandInfo.IgnoreExtraArgs
  fullName: Discord.Commands.CommandInfo.IgnoreExtraArgs
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/CommandInfo.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: IgnoreExtraArgs
    path: ../src/Discord.Net.Commands/Info/CommandInfo.cs
    startLine: 65
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nIndicates whether extra arguments should be ignored for this command.\n"
  example: []
  syntax:
    content: public bool IgnoreExtraArgs { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IgnoreExtraArgs As Boolean
  overload: Discord.Commands.CommandInfo.IgnoreExtraArgs*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.CommandInfo.RunMode
  commentId: P:Discord.Commands.CommandInfo.RunMode
  id: RunMode
  parent: Discord.Commands.CommandInfo
  langs:
  - csharp
  - vb
  name: RunMode
  nameWithType: CommandInfo.RunMode
  fullName: Discord.Commands.CommandInfo.RunMode
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/CommandInfo.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: RunMode
    path: ../src/Discord.Net.Commands/Info/CommandInfo.cs
    startLine: 69
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets the <xref href=\"Discord.Commands.CommandInfo.RunMode\" data-throw-if-not-resolved=\"false\"></xref> that is being used for the command.\n"
  example: []
  syntax:
    content: public RunMode RunMode { get; }
    parameters: []
    return:
      type: Discord.Commands.RunMode
    content.vb: Public ReadOnly Property RunMode As RunMode
  overload: Discord.Commands.CommandInfo.RunMode*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.CommandInfo.Aliases
  commentId: P:Discord.Commands.CommandInfo.Aliases
  id: Aliases
  parent: Discord.Commands.CommandInfo
  langs:
  - csharp
  - vb
  name: Aliases
  nameWithType: CommandInfo.Aliases
  fullName: Discord.Commands.CommandInfo.Aliases
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/CommandInfo.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Aliases
    path: ../src/Discord.Net.Commands/Info/CommandInfo.cs
    startLine: 74
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets a list of aliases defined by the <xref href=\"Discord.Commands.AliasAttribute\" data-throw-if-not-resolved=\"false\"></xref> of the command.\n"
  example: []
  syntax:
    content: public IReadOnlyList<string> Aliases { get; }
    parameters: []
    return:
      type: IReadOnlyList{System.String}
    content.vb: Public ReadOnly Property Aliases As IReadOnlyList(Of String)
  overload: Discord.Commands.CommandInfo.Aliases*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.CommandInfo.Parameters
  commentId: P:Discord.Commands.CommandInfo.Parameters
  id: Parameters
  parent: Discord.Commands.CommandInfo
  langs:
  - csharp
  - vb
  name: Parameters
  nameWithType: CommandInfo.Parameters
  fullName: Discord.Commands.CommandInfo.Parameters
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/CommandInfo.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Parameters
    path: ../src/Discord.Net.Commands/Info/CommandInfo.cs
    startLine: 78
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets a list of information about the parameters of the command.\n"
  example: []
  syntax:
    content: public IReadOnlyList<ParameterInfo> Parameters { get; }
    parameters: []
    return:
      type: IReadOnlyList{Discord.Commands.ParameterInfo}
    content.vb: Public ReadOnly Property Parameters As IReadOnlyList(Of ParameterInfo)
  overload: Discord.Commands.CommandInfo.Parameters*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.CommandInfo.Preconditions
  commentId: P:Discord.Commands.CommandInfo.Preconditions
  id: Preconditions
  parent: Discord.Commands.CommandInfo
  langs:
  - csharp
  - vb
  name: Preconditions
  nameWithType: CommandInfo.Preconditions
  fullName: Discord.Commands.CommandInfo.Preconditions
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/CommandInfo.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Preconditions
    path: ../src/Discord.Net.Commands/Info/CommandInfo.cs
    startLine: 82
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets a list of preconditions defined by the <xref href=\"Discord.Commands.PreconditionAttribute\" data-throw-if-not-resolved=\"false\"></xref> of the command.\n"
  example: []
  syntax:
    content: public IReadOnlyList<PreconditionAttribute> Preconditions { get; }
    parameters: []
    return:
      type: IReadOnlyList{Discord.Commands.PreconditionAttribute}
    content.vb: Public ReadOnly Property Preconditions As IReadOnlyList(Of PreconditionAttribute)
  overload: Discord.Commands.CommandInfo.Preconditions*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.CommandInfo.Attributes
  commentId: P:Discord.Commands.CommandInfo.Attributes
  id: Attributes
  parent: Discord.Commands.CommandInfo
  langs:
  - csharp
  - vb
  name: Attributes
  nameWithType: CommandInfo.Attributes
  fullName: Discord.Commands.CommandInfo.Attributes
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/CommandInfo.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Attributes
    path: ../src/Discord.Net.Commands/Info/CommandInfo.cs
    startLine: 86
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets a list of attributes of the command.\n"
  example: []
  syntax:
    content: public IReadOnlyList<Attribute> Attributes { get; }
    parameters: []
    return:
      type: IReadOnlyList{Attribute}
    content.vb: Public ReadOnly Property Attributes As IReadOnlyList(Of Attribute)
  overload: Discord.Commands.CommandInfo.Attributes*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.CommandInfo.CheckPreconditionsAsync(Discord.Commands.ICommandContext,IServiceProvider)
  commentId: M:Discord.Commands.CommandInfo.CheckPreconditionsAsync(Discord.Commands.ICommandContext,IServiceProvider)
  id: CheckPreconditionsAsync(Discord.Commands.ICommandContext,IServiceProvider)
  parent: Discord.Commands.CommandInfo
  langs:
  - csharp
  - vb
  name: CheckPreconditionsAsync(ICommandContext, IServiceProvider)
  nameWithType: CommandInfo.CheckPreconditionsAsync(ICommandContext, IServiceProvider)
  fullName: Discord.Commands.CommandInfo.CheckPreconditionsAsync(Discord.Commands.ICommandContext, IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Info/CommandInfo.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: CheckPreconditionsAsync
    path: ../src/Discord.Net.Commands/Info/CommandInfo.cs
    startLine: 123
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public Task<PreconditionResult> CheckPreconditionsAsync(ICommandContext context, IServiceProvider services = null)
    parameters:
    - id: context
      type: Discord.Commands.ICommandContext
    - id: services
      type: IServiceProvider
    return:
      type: Task{Discord.Commands.PreconditionResult}
    content.vb: Public Function CheckPreconditionsAsync(context As ICommandContext, services As IServiceProvider = Nothing) As Task(Of PreconditionResult)
  overload: Discord.Commands.CommandInfo.CheckPreconditionsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Commands.CommandInfo.ParseAsync(Discord.Commands.ICommandContext,System.Int32,Discord.Commands.SearchResult,Discord.Commands.PreconditionResult,IServiceProvider)
  commentId: M:Discord.Commands.CommandInfo.ParseAsync(Discord.Commands.ICommandContext,System.Int32,Discord.Commands.SearchResult,Discord.Commands.PreconditionResult,IServiceProvider)
  id: ParseAsync(Discord.Commands.ICommandContext,System.Int32,Discord.Commands.SearchResult,Discord.Commands.PreconditionResult,IServiceProvider)
  parent: Discord.Commands.CommandInfo
  langs:
  - csharp
  - vb
  name: ParseAsync(ICommandContext, Int32, SearchResult, PreconditionResult, IServiceProvider)
  nameWithType: CommandInfo.ParseAsync(ICommandContext, Int32, SearchResult, PreconditionResult, IServiceProvider)
  fullName: Discord.Commands.CommandInfo.ParseAsync(Discord.Commands.ICommandContext, System.Int32, Discord.Commands.SearchResult, Discord.Commands.PreconditionResult, IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Info/CommandInfo.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ParseAsync
    path: ../src/Discord.Net.Commands/Info/CommandInfo.cs
    startLine: 164
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public Task<ParseResult> ParseAsync(ICommandContext context, int startIndex, SearchResult searchResult, PreconditionResult preconditionResult = null, IServiceProvider services = null)
    parameters:
    - id: context
      type: Discord.Commands.ICommandContext
    - id: startIndex
      type: System.Int32
    - id: searchResult
      type: Discord.Commands.SearchResult
    - id: preconditionResult
      type: Discord.Commands.PreconditionResult
    - id: services
      type: IServiceProvider
    return:
      type: Task{Discord.Commands.ParseResult}
    content.vb: Public Function ParseAsync(context As ICommandContext, startIndex As Integer, searchResult As SearchResult, preconditionResult As PreconditionResult = Nothing, services As IServiceProvider = Nothing) As Task(Of ParseResult)
  overload: Discord.Commands.CommandInfo.ParseAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Commands.CommandInfo.ExecuteAsync(Discord.Commands.ICommandContext,Discord.Commands.ParseResult,IServiceProvider)
  commentId: M:Discord.Commands.CommandInfo.ExecuteAsync(Discord.Commands.ICommandContext,Discord.Commands.ParseResult,IServiceProvider)
  id: ExecuteAsync(Discord.Commands.ICommandContext,Discord.Commands.ParseResult,IServiceProvider)
  parent: Discord.Commands.CommandInfo
  langs:
  - csharp
  - vb
  name: ExecuteAsync(ICommandContext, ParseResult, IServiceProvider)
  nameWithType: CommandInfo.ExecuteAsync(ICommandContext, ParseResult, IServiceProvider)
  fullName: Discord.Commands.CommandInfo.ExecuteAsync(Discord.Commands.ICommandContext, Discord.Commands.ParseResult, IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Info/CommandInfo.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ExecuteAsync
    path: ../src/Discord.Net.Commands/Info/CommandInfo.cs
    startLine: 178
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public Task<IResult> ExecuteAsync(ICommandContext context, ParseResult parseResult, IServiceProvider services)
    parameters:
    - id: context
      type: Discord.Commands.ICommandContext
    - id: parseResult
      type: Discord.Commands.ParseResult
    - id: services
      type: IServiceProvider
    return:
      type: Task{Discord.Commands.IResult}
    content.vb: Public Function ExecuteAsync(context As ICommandContext, parseResult As ParseResult, services As IServiceProvider) As Task(Of IResult)
  overload: Discord.Commands.CommandInfo.ExecuteAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Commands.CommandInfo.ExecuteAsync(Discord.Commands.ICommandContext,IEnumerable{System.Object},IEnumerable{System.Object},IServiceProvider)
  commentId: M:Discord.Commands.CommandInfo.ExecuteAsync(Discord.Commands.ICommandContext,IEnumerable{System.Object},IEnumerable{System.Object},IServiceProvider)
  id: ExecuteAsync(Discord.Commands.ICommandContext,IEnumerable{System.Object},IEnumerable{System.Object},IServiceProvider)
  parent: Discord.Commands.CommandInfo
  langs:
  - csharp
  - vb
  name: ExecuteAsync(ICommandContext, IEnumerable<Object>, IEnumerable<Object>, IServiceProvider)
  nameWithType: CommandInfo.ExecuteAsync(ICommandContext, IEnumerable<Object>, IEnumerable<Object>, IServiceProvider)
  fullName: Discord.Commands.CommandInfo.ExecuteAsync(Discord.Commands.ICommandContext, IEnumerable<System.Object>, IEnumerable<System.Object>, IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Info/CommandInfo.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ExecuteAsync
    path: ../src/Discord.Net.Commands/Info/CommandInfo.cs
    startLine: 201
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public Task<IResult> ExecuteAsync(ICommandContext context, IEnumerable<object> argList, IEnumerable<object> paramList, IServiceProvider services)
    parameters:
    - id: context
      type: Discord.Commands.ICommandContext
    - id: argList
      type: IEnumerable{System.Object}
    - id: paramList
      type: IEnumerable{System.Object}
    - id: services
      type: IServiceProvider
    return:
      type: Task{Discord.Commands.IResult}
    content.vb: Public Function ExecuteAsync(context As ICommandContext, argList As IEnumerable(Of Object), paramList As IEnumerable(Of Object), services As IServiceProvider) As Task(Of IResult)
  overload: Discord.Commands.CommandInfo.ExecuteAsync*
  nameWithType.vb: CommandInfo.ExecuteAsync(ICommandContext, IEnumerable(Of Object), IEnumerable(Of Object), IServiceProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Commands.CommandInfo.ExecuteAsync(Discord.Commands.ICommandContext, IEnumerable(Of System.Object), IEnumerable(Of System.Object), IServiceProvider)
  name.vb: ExecuteAsync(ICommandContext, IEnumerable(Of Object), IEnumerable(Of Object), IServiceProvider)
references:
- uid: Discord.Commands.CommandInfo.RunMode
  commentId: P:Discord.Commands.CommandInfo.RunMode
  isExternal: true
- uid: Discord.Commands
  commentId: N:Discord.Commands
  name: Discord.Commands
  nameWithType: Discord.Commands
  fullName: Discord.Commands
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Commands.CommandInfo.Module*
  commentId: Overload:Discord.Commands.CommandInfo.Module
  name: Module
  nameWithType: CommandInfo.Module
  fullName: Discord.Commands.CommandInfo.Module
- uid: Discord.Commands.ModuleInfo
  commentId: T:Discord.Commands.ModuleInfo
  parent: Discord.Commands
  name: ModuleInfo
  nameWithType: ModuleInfo
  fullName: Discord.Commands.ModuleInfo
- uid: Discord.Commands.CommandInfo.Name*
  commentId: Overload:Discord.Commands.CommandInfo.Name
  name: Name
  nameWithType: CommandInfo.Name
  fullName: Discord.Commands.CommandInfo.Name
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.Commands.CommandInfo.Summary
  commentId: P:Discord.Commands.CommandInfo.Summary
  isExternal: true
- uid: Discord.Commands.CommandInfo.Remarks
  commentId: P:Discord.Commands.CommandInfo.Remarks
  isExternal: true
- uid: Discord.Commands.CommandInfo.Summary*
  commentId: Overload:Discord.Commands.CommandInfo.Summary
  name: Summary
  nameWithType: CommandInfo.Summary
  fullName: Discord.Commands.CommandInfo.Summary
- uid: Discord.Commands.CommandInfo.Remarks*
  commentId: Overload:Discord.Commands.CommandInfo.Remarks
  name: Remarks
  nameWithType: CommandInfo.Remarks
  fullName: Discord.Commands.CommandInfo.Remarks
- uid: Discord.Commands.CommandInfo.Priority*
  commentId: Overload:Discord.Commands.CommandInfo.Priority
  name: Priority
  nameWithType: CommandInfo.Priority
  fullName: Discord.Commands.CommandInfo.Priority
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Discord.Commands.CommandInfo.HasVarArgs*
  commentId: Overload:Discord.Commands.CommandInfo.HasVarArgs
  name: HasVarArgs
  nameWithType: CommandInfo.HasVarArgs
  fullName: Discord.Commands.CommandInfo.HasVarArgs
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.Commands.CommandInfo.IgnoreExtraArgs*
  commentId: Overload:Discord.Commands.CommandInfo.IgnoreExtraArgs
  name: IgnoreExtraArgs
  nameWithType: CommandInfo.IgnoreExtraArgs
  fullName: Discord.Commands.CommandInfo.IgnoreExtraArgs
- uid: Discord.Commands.CommandInfo.RunMode*
  commentId: Overload:Discord.Commands.CommandInfo.RunMode
  name: RunMode
  nameWithType: CommandInfo.RunMode
  fullName: Discord.Commands.CommandInfo.RunMode
- uid: Discord.Commands.RunMode
  commentId: T:Discord.Commands.RunMode
  parent: Discord.Commands
  name: RunMode
  nameWithType: RunMode
  fullName: Discord.Commands.RunMode
- uid: Discord.Commands.AliasAttribute
  commentId: T:Discord.Commands.AliasAttribute
  name: AliasAttribute
  nameWithType: AliasAttribute
  fullName: Discord.Commands.AliasAttribute
- uid: Discord.Commands.CommandInfo.Aliases*
  commentId: Overload:Discord.Commands.CommandInfo.Aliases
  name: Aliases
  nameWithType: CommandInfo.Aliases
  fullName: Discord.Commands.CommandInfo.Aliases
- uid: IReadOnlyList{System.String}
  commentId: '!:IReadOnlyList{System.String}'
  definition: IReadOnlyList`1
  name: IReadOnlyList<String>
  nameWithType: IReadOnlyList<String>
  fullName: IReadOnlyList<System.String>
  nameWithType.vb: IReadOnlyList(Of String)
  fullName.vb: IReadOnlyList(Of System.String)
  name.vb: IReadOnlyList(Of String)
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<>
  nameWithType: IReadOnlyList<>
  fullName: IReadOnlyList<>
  nameWithType.vb: IReadOnlyList(Of )
  fullName.vb: IReadOnlyList(Of )
  name.vb: IReadOnlyList(Of )
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.CommandInfo.Parameters*
  commentId: Overload:Discord.Commands.CommandInfo.Parameters
  name: Parameters
  nameWithType: CommandInfo.Parameters
  fullName: Discord.Commands.CommandInfo.Parameters
- uid: IReadOnlyList{Discord.Commands.ParameterInfo}
  commentId: '!:IReadOnlyList{Discord.Commands.ParameterInfo}'
  definition: IReadOnlyList`1
  name: IReadOnlyList<ParameterInfo>
  nameWithType: IReadOnlyList<ParameterInfo>
  fullName: IReadOnlyList<Discord.Commands.ParameterInfo>
  nameWithType.vb: IReadOnlyList(Of ParameterInfo)
  fullName.vb: IReadOnlyList(Of Discord.Commands.ParameterInfo)
  name.vb: IReadOnlyList(Of ParameterInfo)
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.ParameterInfo
    name: ParameterInfo
    nameWithType: ParameterInfo
    fullName: Discord.Commands.ParameterInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.ParameterInfo
    name: ParameterInfo
    nameWithType: ParameterInfo
    fullName: Discord.Commands.ParameterInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.PreconditionAttribute
  commentId: T:Discord.Commands.PreconditionAttribute
  parent: Discord.Commands
  name: PreconditionAttribute
  nameWithType: PreconditionAttribute
  fullName: Discord.Commands.PreconditionAttribute
- uid: Discord.Commands.CommandInfo.Preconditions*
  commentId: Overload:Discord.Commands.CommandInfo.Preconditions
  name: Preconditions
  nameWithType: CommandInfo.Preconditions
  fullName: Discord.Commands.CommandInfo.Preconditions
- uid: IReadOnlyList{Discord.Commands.PreconditionAttribute}
  commentId: '!:IReadOnlyList{Discord.Commands.PreconditionAttribute}'
  definition: IReadOnlyList`1
  name: IReadOnlyList<PreconditionAttribute>
  nameWithType: IReadOnlyList<PreconditionAttribute>
  fullName: IReadOnlyList<Discord.Commands.PreconditionAttribute>
  nameWithType.vb: IReadOnlyList(Of PreconditionAttribute)
  fullName.vb: IReadOnlyList(Of Discord.Commands.PreconditionAttribute)
  name.vb: IReadOnlyList(Of PreconditionAttribute)
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.PreconditionAttribute
    name: PreconditionAttribute
    nameWithType: PreconditionAttribute
    fullName: Discord.Commands.PreconditionAttribute
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.PreconditionAttribute
    name: PreconditionAttribute
    nameWithType: PreconditionAttribute
    fullName: Discord.Commands.PreconditionAttribute
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.CommandInfo.Attributes*
  commentId: Overload:Discord.Commands.CommandInfo.Attributes
  name: Attributes
  nameWithType: CommandInfo.Attributes
  fullName: Discord.Commands.CommandInfo.Attributes
- uid: IReadOnlyList{Attribute}
  commentId: '!:IReadOnlyList{Attribute}'
  definition: IReadOnlyList`1
  name: IReadOnlyList<Attribute>
  nameWithType: IReadOnlyList<Attribute>
  fullName: IReadOnlyList<Attribute>
  nameWithType.vb: IReadOnlyList(Of Attribute)
  fullName.vb: IReadOnlyList(Of Attribute)
  name.vb: IReadOnlyList(Of Attribute)
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Attribute
    name: Attribute
    nameWithType: Attribute
    fullName: Attribute
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Attribute
    name: Attribute
    nameWithType: Attribute
    fullName: Attribute
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.CommandInfo.CheckPreconditionsAsync*
  commentId: Overload:Discord.Commands.CommandInfo.CheckPreconditionsAsync
  name: CheckPreconditionsAsync
  nameWithType: CommandInfo.CheckPreconditionsAsync
  fullName: Discord.Commands.CommandInfo.CheckPreconditionsAsync
- uid: Discord.Commands.ICommandContext
  commentId: T:Discord.Commands.ICommandContext
  parent: Discord.Commands
  name: ICommandContext
  nameWithType: ICommandContext
  fullName: Discord.Commands.ICommandContext
- uid: IServiceProvider
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: IServiceProvider
- uid: Task{Discord.Commands.PreconditionResult}
  commentId: '!:Task{Discord.Commands.PreconditionResult}'
  definition: Task`1
  name: Task<PreconditionResult>
  nameWithType: Task<PreconditionResult>
  fullName: Task<Discord.Commands.PreconditionResult>
  nameWithType.vb: Task(Of PreconditionResult)
  fullName.vb: Task(Of Discord.Commands.PreconditionResult)
  name.vb: Task(Of PreconditionResult)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.PreconditionResult
    name: PreconditionResult
    nameWithType: PreconditionResult
    fullName: Discord.Commands.PreconditionResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.PreconditionResult
    name: PreconditionResult
    nameWithType: PreconditionResult
    fullName: Discord.Commands.PreconditionResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.CommandInfo.ParseAsync*
  commentId: Overload:Discord.Commands.CommandInfo.ParseAsync
  name: ParseAsync
  nameWithType: CommandInfo.ParseAsync
  fullName: Discord.Commands.CommandInfo.ParseAsync
- uid: Discord.Commands.SearchResult
  commentId: T:Discord.Commands.SearchResult
  parent: Discord.Commands
  name: SearchResult
  nameWithType: SearchResult
  fullName: Discord.Commands.SearchResult
- uid: Discord.Commands.PreconditionResult
  commentId: T:Discord.Commands.PreconditionResult
  parent: Discord.Commands
  name: PreconditionResult
  nameWithType: PreconditionResult
  fullName: Discord.Commands.PreconditionResult
- uid: Task{Discord.Commands.ParseResult}
  commentId: '!:Task{Discord.Commands.ParseResult}'
  definition: Task`1
  name: Task<ParseResult>
  nameWithType: Task<ParseResult>
  fullName: Task<Discord.Commands.ParseResult>
  nameWithType.vb: Task(Of ParseResult)
  fullName.vb: Task(Of Discord.Commands.ParseResult)
  name.vb: Task(Of ParseResult)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.ParseResult
    name: ParseResult
    nameWithType: ParseResult
    fullName: Discord.Commands.ParseResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.ParseResult
    name: ParseResult
    nameWithType: ParseResult
    fullName: Discord.Commands.ParseResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.CommandInfo.ExecuteAsync*
  commentId: Overload:Discord.Commands.CommandInfo.ExecuteAsync
  name: ExecuteAsync
  nameWithType: CommandInfo.ExecuteAsync
  fullName: Discord.Commands.CommandInfo.ExecuteAsync
- uid: Discord.Commands.ParseResult
  commentId: T:Discord.Commands.ParseResult
  parent: Discord.Commands
  name: ParseResult
  nameWithType: ParseResult
  fullName: Discord.Commands.ParseResult
- uid: Task{Discord.Commands.IResult}
  commentId: '!:Task{Discord.Commands.IResult}'
  definition: Task`1
  name: Task<IResult>
  nameWithType: Task<IResult>
  fullName: Task<Discord.Commands.IResult>
  nameWithType.vb: Task(Of IResult)
  fullName.vb: Task(Of Discord.Commands.IResult)
  name.vb: Task(Of IResult)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.IResult
    name: IResult
    nameWithType: IResult
    fullName: Discord.Commands.IResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.IResult
    name: IResult
    nameWithType: IResult
    fullName: Discord.Commands.IResult
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable{System.Object}
  commentId: '!:IEnumerable{System.Object}'
  definition: IEnumerable`1
  name: IEnumerable<Object>
  nameWithType: IEnumerable<Object>
  fullName: IEnumerable<System.Object>
  nameWithType.vb: IEnumerable(Of Object)
  fullName.vb: IEnumerable(Of System.Object)
  name.vb: IEnumerable(Of Object)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
