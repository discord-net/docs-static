### YamlMime:ManagedReference
items:
- uid: Discord.IGuildChannel
  commentId: T:Discord.IGuildChannel
  id: IGuildChannel
  parent: Discord
  children:
  - Discord.IGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  - Discord.IGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  - Discord.IGuildChannel.GetPermissionOverwrite(Discord.IRole)
  - Discord.IGuildChannel.GetPermissionOverwrite(Discord.IUser)
  - Discord.IGuildChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  - Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.IGuildChannel.Guild
  - Discord.IGuildChannel.GuildId
  - Discord.IGuildChannel.ModifyAsync(Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  - Discord.IGuildChannel.PermissionOverwrites
  - Discord.IGuildChannel.Position
  - Discord.IGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  - Discord.IGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  langs:
  - csharp
  - vb
  name: IGuildChannel
  nameWithType: IGuildChannel
  fullName: Discord.IGuildChannel
  type: Interface
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IGuildChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: IGuildChannel
    path: ../src/Discord.Net.Core/Entities/Channels/IGuildChannel.cs
    startLine: 12
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nRepresents a generic guild channel.\n"
  example: []
  syntax:
    content: 'public interface IGuildChannel : IChannel, ISnowflakeEntity, IEntity<ulong>, IDeletable'
    content.vb: >-
      Public Interface IGuildChannel
          Inherits IChannel, IDeletable
  seealso:
  - linkId: Discord.ITextChannel
    commentId: T:Discord.ITextChannel
  - linkId: Discord.IVoiceChannel
    commentId: T:Discord.IVoiceChannel
  - linkId: Discord.ICategoryChannel
    commentId: T:Discord.ICategoryChannel
  inheritedMembers:
  - Discord.IChannel.Name
  - Discord.ISnowflakeEntity.CreatedAt
  - Discord.IEntity{System.UInt64}.Id
  - Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Discord.IGuildChannel.Position
  commentId: P:Discord.IGuildChannel.Position
  id: Position
  parent: Discord.IGuildChannel
  langs:
  - csharp
  - vb
  name: Position
  nameWithType: IGuildChannel.Position
  fullName: Discord.IGuildChannel.Position
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IGuildChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Position
    path: ../src/Discord.Net.Core/Entities/Channels/IGuildChannel.cs
    startLine: 21
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the position of this channel.\n"
  example: []
  syntax:
    content: int Position { get; }
    parameters: []
    return:
      type: System.Int32
      description: "\nAn <see cref=\"!:System.Int32\"></see> representing the position of this channel in the guild&apos;s channel list relative to\nothers of the same type.\n"
    content.vb: ReadOnly Property Position As Integer
  overload: Discord.IGuildChannel.Position*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuildChannel.Guild
  commentId: P:Discord.IGuildChannel.Guild
  id: Guild
  parent: Discord.IGuildChannel
  langs:
  - csharp
  - vb
  name: Guild
  nameWithType: IGuildChannel.Guild
  fullName: Discord.IGuildChannel.Guild
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IGuildChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Guild
    path: ../src/Discord.Net.Core/Entities/Channels/IGuildChannel.cs
    startLine: 29
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the guild associated with this channel.\n"
  example: []
  syntax:
    content: IGuild Guild { get; }
    parameters: []
    return:
      type: Discord.IGuild
      description: "\nA guild object that this channel belongs to.\n"
    content.vb: ReadOnly Property Guild As IGuild
  overload: Discord.IGuildChannel.Guild*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuildChannel.GuildId
  commentId: P:Discord.IGuildChannel.GuildId
  id: GuildId
  parent: Discord.IGuildChannel
  langs:
  - csharp
  - vb
  name: GuildId
  nameWithType: IGuildChannel.GuildId
  fullName: Discord.IGuildChannel.GuildId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IGuildChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GuildId
    path: ../src/Discord.Net.Core/Entities/Channels/IGuildChannel.cs
    startLine: 37
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the guild ID associated with this channel.\n"
  example: []
  syntax:
    content: ulong GuildId { get; }
    parameters: []
    return:
      type: System.UInt64
      description: "\nAn <see cref=\"!:System.UInt64\"></see> representing the guild snowflake identifier for the guild that this channel\nbelongs to.\n"
    content.vb: ReadOnly Property GuildId As ULong
  overload: Discord.IGuildChannel.GuildId*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuildChannel.PermissionOverwrites
  commentId: P:Discord.IGuildChannel.PermissionOverwrites
  id: PermissionOverwrites
  parent: Discord.IGuildChannel
  langs:
  - csharp
  - vb
  name: PermissionOverwrites
  nameWithType: IGuildChannel.PermissionOverwrites
  fullName: Discord.IGuildChannel.PermissionOverwrites
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IGuildChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: PermissionOverwrites
    path: ../src/Discord.Net.Core/Entities/Channels/IGuildChannel.cs
    startLine: 44
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a collection of permission overwrites for this channel.\n"
  example: []
  syntax:
    content: IReadOnlyCollection<Overwrite> PermissionOverwrites { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.Overwrite}
      description: "\nA collection of overwrites associated with this channel.\n"
    content.vb: ReadOnly Property PermissionOverwrites As IReadOnlyCollection(Of Overwrite)
  overload: Discord.IGuildChannel.PermissionOverwrites*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuildChannel.ModifyAsync(Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.IGuildChannel.ModifyAsync(Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  id: ModifyAsync(Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  parent: Discord.IGuildChannel
  langs:
  - csharp
  - vb
  name: ModifyAsync(Action<GuildChannelProperties>, RequestOptions)
  nameWithType: IGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions)
  fullName: Discord.IGuildChannel.ModifyAsync(Action<Discord.GuildChannelProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IGuildChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ModifyAsync
    path: ../src/Discord.Net.Core/Entities/Channels/IGuildChannel.cs
    startLine: 58
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nModifies this guild channel.\n"
  remarks: "\nThis method modifies the current guild channel with the specified properties. To see an example of this\nmethod and what properties are available, please refer to <xref href=\"Discord.GuildChannelProperties\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: Task ModifyAsync(Action<GuildChannelProperties> func, RequestOptions options = null)
    parameters:
    - id: func
      type: Action{Discord.GuildChannelProperties}
      description: The delegate containing the properties to modify the channel with.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task
      description: "\nA task that represents the asynchronous modification operation.\n"
    content.vb: Function ModifyAsync(func As Action(Of GuildChannelProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.IGuildChannel.ModifyAsync*
  nameWithType.vb: IGuildChannel.ModifyAsync(Action(Of GuildChannelProperties), RequestOptions)
  fullName.vb: Discord.IGuildChannel.ModifyAsync(Action(Of Discord.GuildChannelProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of GuildChannelProperties), RequestOptions)
- uid: Discord.IGuildChannel.GetPermissionOverwrite(Discord.IRole)
  commentId: M:Discord.IGuildChannel.GetPermissionOverwrite(Discord.IRole)
  id: GetPermissionOverwrite(Discord.IRole)
  parent: Discord.IGuildChannel
  langs:
  - csharp
  - vb
  name: GetPermissionOverwrite(IRole)
  nameWithType: IGuildChannel.GetPermissionOverwrite(IRole)
  fullName: Discord.IGuildChannel.GetPermissionOverwrite(Discord.IRole)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IGuildChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetPermissionOverwrite
    path: ../src/Discord.Net.Core/Entities/Channels/IGuildChannel.cs
    startLine: 67
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the permission overwrite for a specific role.\n"
  example: []
  syntax:
    content: OverwritePermissions? GetPermissionOverwrite(IRole role)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to get the overwrite from.
    return:
      type: System.Nullable{Discord.OverwritePermissions}
      description: "\nAn overwrite object for the targeted role; <code>null</code> if none is set.\n"
    content.vb: Function GetPermissionOverwrite(role As IRole) As OverwritePermissions?
  overload: Discord.IGuildChannel.GetPermissionOverwrite*
- uid: Discord.IGuildChannel.GetPermissionOverwrite(Discord.IUser)
  commentId: M:Discord.IGuildChannel.GetPermissionOverwrite(Discord.IUser)
  id: GetPermissionOverwrite(Discord.IUser)
  parent: Discord.IGuildChannel
  langs:
  - csharp
  - vb
  name: GetPermissionOverwrite(IUser)
  nameWithType: IGuildChannel.GetPermissionOverwrite(IUser)
  fullName: Discord.IGuildChannel.GetPermissionOverwrite(Discord.IUser)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IGuildChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetPermissionOverwrite
    path: ../src/Discord.Net.Core/Entities/Channels/IGuildChannel.cs
    startLine: 75
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the permission overwrite for a specific user.\n"
  example: []
  syntax:
    content: OverwritePermissions? GetPermissionOverwrite(IUser user)
    parameters:
    - id: user
      type: Discord.IUser
      description: The user to get the overwrite from.
    return:
      type: System.Nullable{Discord.OverwritePermissions}
      description: "\nAn overwrite object for the targeted user; <code>null</code> if none is set.\n"
    content.vb: Function GetPermissionOverwrite(user As IUser) As OverwritePermissions?
  overload: Discord.IGuildChannel.GetPermissionOverwrite*
- uid: Discord.IGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  commentId: M:Discord.IGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  id: RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  parent: Discord.IGuildChannel
  langs:
  - csharp
  - vb
  name: RemovePermissionOverwriteAsync(IRole, RequestOptions)
  nameWithType: IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions)
  fullName: Discord.IGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IGuildChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: RemovePermissionOverwriteAsync
    path: ../src/Discord.Net.Core/Entities/Channels/IGuildChannel.cs
    startLine: 84
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nRemoves the permission overwrite for the given role, if one exists.\n"
  example: []
  syntax:
    content: Task RemovePermissionOverwriteAsync(IRole role, RequestOptions options = null)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to remove the overwrite from.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task
      description: "\nA task representing the asynchronous operation for removing the specified permissions from the channel.\n"
    content.vb: Function RemovePermissionOverwriteAsync(role As IRole, options As RequestOptions = Nothing) As Task
  overload: Discord.IGuildChannel.RemovePermissionOverwriteAsync*
- uid: Discord.IGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  commentId: M:Discord.IGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  id: RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  parent: Discord.IGuildChannel
  langs:
  - csharp
  - vb
  name: RemovePermissionOverwriteAsync(IUser, RequestOptions)
  nameWithType: IGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions)
  fullName: Discord.IGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IGuildChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: RemovePermissionOverwriteAsync
    path: ../src/Discord.Net.Core/Entities/Channels/IGuildChannel.cs
    startLine: 93
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nRemoves the permission overwrite for the given user, if one exists.\n"
  example: []
  syntax:
    content: Task RemovePermissionOverwriteAsync(IUser user, RequestOptions options = null)
    parameters:
    - id: user
      type: Discord.IUser
      description: The user to remove the overwrite from.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task
      description: "\nA task representing the asynchronous operation for removing the specified permissions from the channel.\n"
    content.vb: Function RemovePermissionOverwriteAsync(user As IUser, options As RequestOptions = Nothing) As Task
  overload: Discord.IGuildChannel.RemovePermissionOverwriteAsync*
- uid: Discord.IGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  commentId: M:Discord.IGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  id: AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  parent: Discord.IGuildChannel
  langs:
  - csharp
  - vb
  name: AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  nameWithType: IGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  fullName: Discord.IGuildChannel.AddPermissionOverwriteAsync(Discord.IRole, Discord.OverwritePermissions, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IGuildChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: AddPermissionOverwriteAsync
    path: ../src/Discord.Net.Core/Entities/Channels/IGuildChannel.cs
    startLine: 113
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nAdds or updates the permission overwrite for the given role.\n"
  example:
  - "\n<p>The following example fetches a role via <xref href=\"Discord.IGuild.GetRole(System.UInt64)\" data-throw-if-not-resolved=\"false\"></xref> and a channel via \n<xref href=\"Discord.IGuild.GetChannelAsync(System.UInt64%2cDiscord.CacheMode%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>. Next, it checks if an overwrite had already been set via \n<xref href=\"Discord.IGuildChannel.GetPermissionOverwrite(Discord.IRole)\" data-throw-if-not-resolved=\"false\"></xref>; if not, it denies the role from sending any\nmessages to the channel.</p>\n<pre><code class=\"lang-cs\" region=\"AddPermissionOverwriteAsyncRole\" source=\"..\\..\\..\\Discord.Net.Examples\\Core\\Entities\\Channels\\IGuildChannel.Examples.cs\">public async Task MuteRoleAsync(IRole role, IGuildChannel channel)\n{\n    if (role == null) throw new ArgumentNullException(nameof(role));\n    if (channel == null) throw new ArgumentNullException(nameof(channel));\n\n    // Fetches the previous overwrite and bail if one is found\n    var previousOverwrite = channel.GetPermissionOverwrite(role);\n    if (previousOverwrite.HasValue &amp;&amp; previousOverwrite.Value.SendMessages == PermValue.Deny)\n        throw new InvalidOperationException($&quot;Role {role.Name} had already been muted in this channel.&quot;);\n\n    // Creates a new OverwritePermissions with send message set to deny and pass it into the method\n    await channel.AddPermissionOverwriteAsync(role, new OverwritePermissions(sendMessages: PermValue.Deny));\n}</code></pre>\n"
  syntax:
    content: Task AddPermissionOverwriteAsync(IRole role, OverwritePermissions permissions, RequestOptions options = null)
    parameters:
    - id: role
      type: Discord.IRole
      description: The role to add the overwrite to.
    - id: permissions
      type: Discord.OverwritePermissions
      description: The overwrite to add to the role.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task
      description: "\nA task representing the asynchronous permission operation for adding the specified permissions to the\nchannel.\n"
    content.vb: Function AddPermissionOverwriteAsync(role As IRole, permissions As OverwritePermissions, options As RequestOptions = Nothing) As Task
  overload: Discord.IGuildChannel.AddPermissionOverwriteAsync*
- uid: Discord.IGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  commentId: M:Discord.IGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  id: AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  parent: Discord.IGuildChannel
  langs:
  - csharp
  - vb
  name: AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  nameWithType: IGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  fullName: Discord.IGuildChannel.AddPermissionOverwriteAsync(Discord.IUser, Discord.OverwritePermissions, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IGuildChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: AddPermissionOverwriteAsync
    path: ../src/Discord.Net.Core/Entities/Channels/IGuildChannel.cs
    startLine: 131
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nAdds or updates the permission overwrite for the given user.\n"
  example:
  - "\n<p>The following example fetches a user via <xref href=\"Discord.IGuild.GetUserAsync(System.UInt64%2cDiscord.CacheMode%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref> and a channel via \n<xref href=\"Discord.IGuild.GetChannelAsync(System.UInt64%2cDiscord.CacheMode%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>. Next, it checks if an overwrite had already been set via \n<xref href=\"Discord.IGuildChannel.GetPermissionOverwrite(Discord.IUser)\" data-throw-if-not-resolved=\"false\"></xref>; if not, it denies the user from sending any\nmessages to the channel.</p>\n<pre><code class=\"lang-cs\" region=\"AddPermissionOverwriteAsyncUser\" source=\"..\\..\\..\\Discord.Net.Examples\\Core\\Entities\\Channels\\IGuildChannel.Examples.cs\">public async Task MuteUserAsync(IGuildUser user, IGuildChannel channel)\n{\n    if (user == null) throw new ArgumentNullException(nameof(user));\n    if (channel == null) throw new ArgumentNullException(nameof(channel));\n\n    // Fetches the previous overwrite and bail if one is found\n    var previousOverwrite = channel.GetPermissionOverwrite(user);\n    if (previousOverwrite.HasValue &amp;&amp; previousOverwrite.Value.SendMessages == PermValue.Deny)\n        throw new InvalidOperationException($&quot;User {user.Username} had already been muted in this channel.&quot;);\n\n    // Creates a new OverwritePermissions with send message set to deny and pass it into the method\n    await channel.AddPermissionOverwriteAsync(user, new OverwritePermissions(sendMessages: PermValue.Deny));\n}</code></pre>\n"
  syntax:
    content: Task AddPermissionOverwriteAsync(IUser user, OverwritePermissions permissions, RequestOptions options = null)
    parameters:
    - id: user
      type: Discord.IUser
      description: The user to add the overwrite to.
    - id: permissions
      type: Discord.OverwritePermissions
      description: The overwrite to add to the user.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task
      description: "\nA task representing the asynchronous permission operation for adding the specified permissions to the channel.\n"
    content.vb: Function AddPermissionOverwriteAsync(user As IUser, permissions As OverwritePermissions, options As RequestOptions = Nothing) As Task
  overload: Discord.IGuildChannel.AddPermissionOverwriteAsync*
- uid: Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  id: GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuildChannel
  langs:
  - csharp
  - vb
  name: GetUsersAsync(CacheMode, RequestOptions)
  nameWithType: IGuildChannel.GetUsersAsync(CacheMode, RequestOptions)
  fullName: Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IGuildChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetUsersAsync
    path: ../src/Discord.Net.Core/Entities/Channels/IGuildChannel.cs
    startLine: 143
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a collection of users that are able to view the channel.\n"
  example: []
  syntax:
    content: IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> GetUsersAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: IAsyncEnumerable{IReadOnlyCollection{Discord.IGuildUser}}
      description: "\nA paged collection containing a collection of guild users that can access this channel. Flattening the\npaginated response into a collection of users with \n<xref href=\"Discord.AsyncEnumerableExtensions.FlattenAsync%60%601(IAsyncEnumerable%7bIEnumerable%7b%60%600%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref> is required if you wish to access the users.\n"
    content.vb: Function GetUsersAsync(mode As CacheMode = CacheMode.AllowDownload, options As RequestOptions = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of IGuildUser))
  overload: Discord.IGuildChannel.GetUsersAsync*
- uid: Discord.IGuildChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuildChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  id: GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuildChannel
  langs:
  - csharp
  - vb
  name: GetUserAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: IGuildChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.IGuildChannel.GetUserAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IGuildChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetUserAsync
    path: ../src/Discord.Net.Core/Entities/Channels/IGuildChannel.cs
    startLine: 154
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a user in this channel.\n"
  example: []
  syntax:
    content: Task<IGuildUser> GetUserAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the user.
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.IGuildUser}
      description: "\nA task representing the asynchronous get operation. The task result contains a guild user object that\nrepresents the user; <code>null</code> if none is found.\n"
    content.vb: Function GetUserAsync(id As ULong, mode As CacheMode = CacheMode.AllowDownload, options As RequestOptions = Nothing) As Task(Of IGuildUser)
  overload: Discord.IGuildChannel.GetUserAsync*
references:
- uid: Discord.ITextChannel
  commentId: T:Discord.ITextChannel
  parent: Discord
  name: ITextChannel
  nameWithType: ITextChannel
  fullName: Discord.ITextChannel
- uid: Discord.IVoiceChannel
  commentId: T:Discord.IVoiceChannel
  parent: Discord
  name: IVoiceChannel
  nameWithType: IVoiceChannel
  fullName: Discord.IVoiceChannel
- uid: Discord.ICategoryChannel
  commentId: T:Discord.ICategoryChannel
  parent: Discord
  name: ICategoryChannel
  nameWithType: ICategoryChannel
  fullName: Discord.ICategoryChannel
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.IChannel.Name
  commentId: P:Discord.IChannel.Name
  parent: Discord.IChannel
  name: Name
  nameWithType: IChannel.Name
  fullName: Discord.IChannel.Name
- uid: Discord.ISnowflakeEntity.CreatedAt
  commentId: P:Discord.ISnowflakeEntity.CreatedAt
  parent: Discord.ISnowflakeEntity
  name: CreatedAt
  nameWithType: ISnowflakeEntity.CreatedAt
  fullName: Discord.ISnowflakeEntity.CreatedAt
- uid: Discord.IEntity{System.UInt64}.Id
  commentId: P:Discord.IEntity{System.UInt64}.Id
  parent: Discord.IEntity{System.UInt64}
  definition: Discord.IEntity`1.Id
  name: Id
  nameWithType: IEntity<UInt64>.Id
  fullName: Discord.IEntity<System.UInt64>.Id
  nameWithType.vb: IEntity(Of UInt64).Id
  fullName.vb: Discord.IEntity(Of System.UInt64).Id
- uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  commentId: M:Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  parent: Discord.IDeletable
  name: DeleteAsync(RequestOptions)
  nameWithType: IDeletable.DeleteAsync(RequestOptions)
  fullName: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: IDeletable.DeleteAsync
    fullName: Discord.IDeletable.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: IDeletable.DeleteAsync
    fullName: Discord.IDeletable.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IChannel
  commentId: T:Discord.IChannel
  parent: Discord
  name: IChannel
  nameWithType: IChannel
  fullName: Discord.IChannel
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IEntity`1.Id
  commentId: P:Discord.IEntity`1.Id
  name: Id
  nameWithType: IEntity<TId>.Id
  fullName: Discord.IEntity<TId>.Id
  nameWithType.vb: IEntity(Of TId).Id
  fullName.vb: Discord.IEntity(Of TId).Id
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IDeletable
  commentId: T:Discord.IDeletable
  parent: Discord
  name: IDeletable
  nameWithType: IDeletable
  fullName: Discord.IDeletable
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuildChannel.Position*
  commentId: Overload:Discord.IGuildChannel.Position
  name: Position
  nameWithType: IGuildChannel.Position
  fullName: Discord.IGuildChannel.Position
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Discord.IGuildChannel.Guild*
  commentId: Overload:Discord.IGuildChannel.Guild
  name: Guild
  nameWithType: IGuildChannel.Guild
  fullName: Discord.IGuildChannel.Guild
- uid: Discord.IGuild
  commentId: T:Discord.IGuild
  parent: Discord
  name: IGuild
  nameWithType: IGuild
  fullName: Discord.IGuild
- uid: Discord.IGuildChannel.GuildId*
  commentId: Overload:Discord.IGuildChannel.GuildId
  name: GuildId
  nameWithType: IGuildChannel.GuildId
  fullName: Discord.IGuildChannel.GuildId
- uid: System.UInt64
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Discord.IGuildChannel.PermissionOverwrites*
  commentId: Overload:Discord.IGuildChannel.PermissionOverwrites
  name: PermissionOverwrites
  nameWithType: IGuildChannel.PermissionOverwrites
  fullName: Discord.IGuildChannel.PermissionOverwrites
- uid: IReadOnlyCollection{Discord.Overwrite}
  commentId: '!:IReadOnlyCollection{Discord.Overwrite}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<Overwrite>
  nameWithType: IReadOnlyCollection<Overwrite>
  fullName: IReadOnlyCollection<Discord.Overwrite>
  nameWithType.vb: IReadOnlyCollection(Of Overwrite)
  fullName.vb: IReadOnlyCollection(Of Discord.Overwrite)
  name.vb: IReadOnlyCollection(Of Overwrite)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Overwrite
    name: Overwrite
    nameWithType: Overwrite
    fullName: Discord.Overwrite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Overwrite
    name: Overwrite
    nameWithType: Overwrite
    fullName: Discord.Overwrite
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<>
  nameWithType: IReadOnlyCollection<>
  fullName: IReadOnlyCollection<>
  nameWithType.vb: IReadOnlyCollection(Of )
  fullName.vb: IReadOnlyCollection(Of )
  name.vb: IReadOnlyCollection(Of )
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.GuildChannelProperties
  commentId: T:Discord.GuildChannelProperties
  parent: Discord
  name: GuildChannelProperties
  nameWithType: GuildChannelProperties
  fullName: Discord.GuildChannelProperties
- uid: Discord.IGuildChannel.ModifyAsync*
  commentId: Overload:Discord.IGuildChannel.ModifyAsync
  name: ModifyAsync
  nameWithType: IGuildChannel.ModifyAsync
  fullName: Discord.IGuildChannel.ModifyAsync
- uid: Action{Discord.GuildChannelProperties}
  commentId: '!:Action{Discord.GuildChannelProperties}'
  definition: Action`1
  name: Action<GuildChannelProperties>
  nameWithType: Action<GuildChannelProperties>
  fullName: Action<Discord.GuildChannelProperties>
  nameWithType.vb: Action(Of GuildChannelProperties)
  fullName.vb: Action(Of Discord.GuildChannelProperties)
  name.vb: Action(Of GuildChannelProperties)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildChannelProperties
    name: GuildChannelProperties
    nameWithType: GuildChannelProperties
    fullName: Discord.GuildChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildChannelProperties
    name: GuildChannelProperties
    nameWithType: GuildChannelProperties
    fullName: Discord.GuildChannelProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuildChannel.GetPermissionOverwrite*
  commentId: Overload:Discord.IGuildChannel.GetPermissionOverwrite
  name: GetPermissionOverwrite
  nameWithType: IGuildChannel.GetPermissionOverwrite
  fullName: Discord.IGuildChannel.GetPermissionOverwrite
- uid: Discord.IRole
  commentId: T:Discord.IRole
  parent: Discord
  name: IRole
  nameWithType: IRole
  fullName: Discord.IRole
- uid: System.Nullable{Discord.OverwritePermissions}
  commentId: '!:System.Nullable{Discord.OverwritePermissions}'
  definition: System.Nullable`1
  name: Nullable<OverwritePermissions>
  nameWithType: Nullable<OverwritePermissions>
  fullName: System.Nullable<Discord.OverwritePermissions>
  nameWithType.vb: Nullable(Of OverwritePermissions)
  fullName.vb: System.Nullable(Of Discord.OverwritePermissions)
  name.vb: Nullable(Of OverwritePermissions)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IUser
  commentId: T:Discord.IUser
  parent: Discord
  name: IUser
  nameWithType: IUser
  fullName: Discord.IUser
- uid: Discord.IGuildChannel.RemovePermissionOverwriteAsync*
  commentId: Overload:Discord.IGuildChannel.RemovePermissionOverwriteAsync
  name: RemovePermissionOverwriteAsync
  nameWithType: IGuildChannel.RemovePermissionOverwriteAsync
  fullName: Discord.IGuildChannel.RemovePermissionOverwriteAsync
- uid: Discord.IGuild.GetRole(System.UInt64)
  commentId: M:Discord.IGuild.GetRole(System.UInt64)
  isExternal: true
- uid: Discord.IGuild.GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  isExternal: true
- uid: Discord.IGuildChannel.GetPermissionOverwrite(Discord.IRole)
  commentId: M:Discord.IGuildChannel.GetPermissionOverwrite(Discord.IRole)
  parent: Discord.IGuildChannel
  name: GetPermissionOverwrite(IRole)
  nameWithType: IGuildChannel.GetPermissionOverwrite(IRole)
  fullName: Discord.IGuildChannel.GetPermissionOverwrite(Discord.IRole)
  spec.csharp:
  - uid: Discord.IGuildChannel.GetPermissionOverwrite(Discord.IRole)
    name: GetPermissionOverwrite
    nameWithType: IGuildChannel.GetPermissionOverwrite
    fullName: Discord.IGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuildChannel.GetPermissionOverwrite(Discord.IRole)
    name: GetPermissionOverwrite
    nameWithType: IGuildChannel.GetPermissionOverwrite
    fullName: Discord.IGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuildChannel.AddPermissionOverwriteAsync*
  commentId: Overload:Discord.IGuildChannel.AddPermissionOverwriteAsync
  name: AddPermissionOverwriteAsync
  nameWithType: IGuildChannel.AddPermissionOverwriteAsync
  fullName: Discord.IGuildChannel.AddPermissionOverwriteAsync
- uid: Discord.OverwritePermissions
  commentId: T:Discord.OverwritePermissions
  parent: Discord
  name: OverwritePermissions
  nameWithType: OverwritePermissions
  fullName: Discord.OverwritePermissions
- uid: Discord.IGuildChannel
  commentId: T:Discord.IGuildChannel
  parent: Discord
  name: IGuildChannel
  nameWithType: IGuildChannel
  fullName: Discord.IGuildChannel
- uid: Discord.IGuild.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  isExternal: true
- uid: Discord.IGuildChannel.GetPermissionOverwrite(Discord.IUser)
  commentId: M:Discord.IGuildChannel.GetPermissionOverwrite(Discord.IUser)
  parent: Discord.IGuildChannel
  name: GetPermissionOverwrite(IUser)
  nameWithType: IGuildChannel.GetPermissionOverwrite(IUser)
  fullName: Discord.IGuildChannel.GetPermissionOverwrite(Discord.IUser)
  spec.csharp:
  - uid: Discord.IGuildChannel.GetPermissionOverwrite(Discord.IUser)
    name: GetPermissionOverwrite
    nameWithType: IGuildChannel.GetPermissionOverwrite
    fullName: Discord.IGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuildChannel.GetPermissionOverwrite(Discord.IUser)
    name: GetPermissionOverwrite
    nameWithType: IGuildChannel.GetPermissionOverwrite
    fullName: Discord.IGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.CacheMode
  commentId: T:Discord.CacheMode
  parent: Discord
  name: CacheMode
  nameWithType: CacheMode
  fullName: Discord.CacheMode
- uid: Discord.AsyncEnumerableExtensions.FlattenAsync``1(IAsyncEnumerable{IEnumerable{``0}})
  commentId: M:Discord.AsyncEnumerableExtensions.FlattenAsync``1(IAsyncEnumerable{IEnumerable{``0}})
  isExternal: true
- uid: Discord.IGuildChannel.GetUsersAsync*
  commentId: Overload:Discord.IGuildChannel.GetUsersAsync
  name: GetUsersAsync
  nameWithType: IGuildChannel.GetUsersAsync
  fullName: Discord.IGuildChannel.GetUsersAsync
- uid: IAsyncEnumerable{IReadOnlyCollection{Discord.IGuildUser}}
  commentId: '!:IAsyncEnumerable{IReadOnlyCollection{Discord.IGuildUser}}'
  definition: IAsyncEnumerable`1
  name: IAsyncEnumerable<IReadOnlyCollection<IGuildUser>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<IGuildUser>>
  fullName: IAsyncEnumerable<IReadOnlyCollection<Discord.IGuildUser>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IGuildUser))
  fullName.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of Discord.IGuildUser))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IGuildUser))
  spec.csharp:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IGuildUser
    name: IGuildUser
    nameWithType: IGuildUser
    fullName: Discord.IGuildUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IGuildUser
    name: IGuildUser
    nameWithType: IGuildUser
    fullName: Discord.IGuildUser
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IAsyncEnumerable`1
  isExternal: true
  name: IAsyncEnumerable<>
  nameWithType: IAsyncEnumerable<>
  fullName: IAsyncEnumerable<>
  nameWithType.vb: IAsyncEnumerable(Of )
  fullName.vb: IAsyncEnumerable(Of )
  name.vb: IAsyncEnumerable(Of )
  spec.csharp:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuildChannel.GetUserAsync*
  commentId: Overload:Discord.IGuildChannel.GetUserAsync
  name: GetUserAsync
  nameWithType: IGuildChannel.GetUserAsync
  fullName: Discord.IGuildChannel.GetUserAsync
- uid: Task{Discord.IGuildUser}
  commentId: '!:Task{Discord.IGuildUser}'
  definition: Task`1
  name: Task<IGuildUser>
  nameWithType: Task<IGuildUser>
  fullName: Task<Discord.IGuildUser>
  nameWithType.vb: Task(Of IGuildUser)
  fullName.vb: Task(Of Discord.IGuildUser)
  name.vb: Task(Of IGuildUser)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IGuildUser
    name: IGuildUser
    nameWithType: IGuildUser
    fullName: Discord.IGuildUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IGuildUser
    name: IGuildUser
    nameWithType: IGuildUser
    fullName: Discord.IGuildUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
