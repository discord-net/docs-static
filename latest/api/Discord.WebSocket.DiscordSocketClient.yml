### YamlMime:ManagedReference
items:
- uid: Discord.WebSocket.DiscordSocketClient
  commentId: T:Discord.WebSocket.DiscordSocketClient
  id: DiscordSocketClient
  parent: Discord.WebSocket
  children:
  - Discord.WebSocket.DiscordSocketClient.#ctor
  - Discord.WebSocket.DiscordSocketClient.#ctor(Discord.WebSocket.DiscordSocketConfig)
  - Discord.WebSocket.DiscordSocketClient.Activity
  - Discord.WebSocket.DiscordSocketClient.Connected
  - Discord.WebSocket.DiscordSocketClient.ConnectionState
  - Discord.WebSocket.DiscordSocketClient.Disconnected
  - Discord.WebSocket.DiscordSocketClient.DMChannels
  - Discord.WebSocket.DiscordSocketClient.DownloadUsersAsync(IEnumerable{Discord.IGuild})
  - Discord.WebSocket.DiscordSocketClient.GetApplicationInfoAsync(Discord.RequestOptions)
  - Discord.WebSocket.DiscordSocketClient.GetChannel(System.UInt64)
  - Discord.WebSocket.DiscordSocketClient.GetGuild(System.UInt64)
  - Discord.WebSocket.DiscordSocketClient.GetUser(System.String,System.String)
  - Discord.WebSocket.DiscordSocketClient.GetUser(System.UInt64)
  - Discord.WebSocket.DiscordSocketClient.GetVoiceRegion(System.String)
  - Discord.WebSocket.DiscordSocketClient.GroupChannels
  - Discord.WebSocket.DiscordSocketClient.Guilds
  - Discord.WebSocket.DiscordSocketClient.Latency
  - Discord.WebSocket.DiscordSocketClient.LatencyUpdated
  - Discord.WebSocket.DiscordSocketClient.PrivateChannels
  - Discord.WebSocket.DiscordSocketClient.Ready
  - Discord.WebSocket.DiscordSocketClient.Rest
  - Discord.WebSocket.DiscordSocketClient.SetActivityAsync(Discord.IActivity)
  - Discord.WebSocket.DiscordSocketClient.SetGameAsync(System.String,System.String,Discord.ActivityType)
  - Discord.WebSocket.DiscordSocketClient.SetStatusAsync(Discord.UserStatus)
  - Discord.WebSocket.DiscordSocketClient.ShardId
  - Discord.WebSocket.DiscordSocketClient.StartAsync
  - Discord.WebSocket.DiscordSocketClient.Status
  - Discord.WebSocket.DiscordSocketClient.StopAsync
  - Discord.WebSocket.DiscordSocketClient.VoiceRegions
  langs:
  - csharp
  - vb
  name: DiscordSocketClient
  nameWithType: DiscordSocketClient
  fullName: Discord.WebSocket.DiscordSocketClient
  type: Class
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DiscordSocketClient
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.Events.cs
    startLine: 6
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nRepresents a WebSocket-based Discord client.\n"
  example: []
  syntax:
    content: 'public class DiscordSocketClient : BaseSocketClient, IDiscordClient, IDisposable'
    content.vb: >-
      Public Class DiscordSocketClient
          Inherits BaseSocketClient
          Implements IDiscordClient, IDisposable
  inheritance:
  - System.Object
  - Discord.Rest.BaseDiscordClient
  - Discord.WebSocket.BaseSocketClient
  implements:
  - Discord.IDiscordClient
  - IDisposable
  inheritedMembers:
  - Discord.WebSocket.BaseSocketClient.BaseConfig
  - Discord.WebSocket.BaseSocketClient.CurrentUser
  - Discord.WebSocket.BaseSocketClient.CreateGuildAsync(System.String,Discord.IVoiceRegion,Stream,Discord.RequestOptions)
  - Discord.WebSocket.BaseSocketClient.GetConnectionsAsync(Discord.RequestOptions)
  - Discord.WebSocket.BaseSocketClient.GetInviteAsync(System.String,Discord.RequestOptions)
  - Discord.WebSocket.BaseSocketClient.ChannelCreated
  - Discord.WebSocket.BaseSocketClient.ChannelDestroyed
  - Discord.WebSocket.BaseSocketClient.ChannelUpdated
  - Discord.WebSocket.BaseSocketClient.MessageReceived
  - Discord.WebSocket.BaseSocketClient.MessageDeleted
  - Discord.WebSocket.BaseSocketClient.MessagesBulkDeleted
  - Discord.WebSocket.BaseSocketClient.MessageUpdated
  - Discord.WebSocket.BaseSocketClient.ReactionAdded
  - Discord.WebSocket.BaseSocketClient.ReactionRemoved
  - Discord.WebSocket.BaseSocketClient.ReactionsCleared
  - Discord.WebSocket.BaseSocketClient.RoleCreated
  - Discord.WebSocket.BaseSocketClient.RoleDeleted
  - Discord.WebSocket.BaseSocketClient.RoleUpdated
  - Discord.WebSocket.BaseSocketClient.JoinedGuild
  - Discord.WebSocket.BaseSocketClient.LeftGuild
  - Discord.WebSocket.BaseSocketClient.GuildAvailable
  - Discord.WebSocket.BaseSocketClient.GuildUnavailable
  - Discord.WebSocket.BaseSocketClient.GuildMembersDownloaded
  - Discord.WebSocket.BaseSocketClient.GuildUpdated
  - Discord.WebSocket.BaseSocketClient.UserJoined
  - Discord.WebSocket.BaseSocketClient.UserLeft
  - Discord.WebSocket.BaseSocketClient.UserBanned
  - Discord.WebSocket.BaseSocketClient.UserUnbanned
  - Discord.WebSocket.BaseSocketClient.UserUpdated
  - Discord.WebSocket.BaseSocketClient.GuildMemberUpdated
  - Discord.WebSocket.BaseSocketClient.UserVoiceStateUpdated
  - Discord.WebSocket.BaseSocketClient.VoiceServerUpdated
  - Discord.WebSocket.BaseSocketClient.CurrentUserUpdated
  - Discord.WebSocket.BaseSocketClient.UserIsTyping
  - Discord.WebSocket.BaseSocketClient.RecipientAdded
  - Discord.WebSocket.BaseSocketClient.RecipientRemoved
  - Discord.Rest.BaseDiscordClient.Log
  - Discord.Rest.BaseDiscordClient.LoggedIn
  - Discord.Rest.BaseDiscordClient.LoggedOut
  - Discord.Rest.BaseDiscordClient.LoginState
  - Discord.Rest.BaseDiscordClient.TokenType
  - Discord.Rest.BaseDiscordClient.LoginAsync(Discord.TokenType,System.String,System.Boolean)
  - Discord.Rest.BaseDiscordClient.LogoutAsync
  - Discord.Rest.BaseDiscordClient.Dispose
  - Discord.Rest.BaseDiscordClient.GetRecommendedShardCountAsync(Discord.RequestOptions)
  - Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#ConnectionState
  - Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#CurrentUser
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.WebSocket.DiscordSocketClient.Rest
  commentId: P:Discord.WebSocket.DiscordSocketClient.Rest
  id: Rest
  parent: Discord.WebSocket.DiscordSocketClient
  langs:
  - csharp
  - vb
  name: Rest
  nameWithType: DiscordSocketClient.Rest
  fullName: Discord.WebSocket.DiscordSocketClient.Rest
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Rest
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.cs
    startLine: 50
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nProvides access to a REST-only client with a shared state from this client.\n"
  example: []
  syntax:
    content: public override DiscordSocketRestClient Rest { get; }
    parameters: []
    return:
      type: Discord.WebSocket.DiscordSocketRestClient
    content.vb: Public Overrides ReadOnly Property Rest As DiscordSocketRestClient
  overridden: Discord.WebSocket.BaseSocketClient.Rest
  overload: Discord.WebSocket.DiscordSocketClient.Rest*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.WebSocket.DiscordSocketClient.ShardId
  commentId: P:Discord.WebSocket.DiscordSocketClient.ShardId
  id: ShardId
  parent: Discord.WebSocket.DiscordSocketClient
  langs:
  - csharp
  - vb
  name: ShardId
  nameWithType: DiscordSocketClient.ShardId
  fullName: Discord.WebSocket.DiscordSocketClient.ShardId
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ShardId
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.cs
    startLine: 52
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Gets the shard of of this client. '
  example: []
  syntax:
    content: public int ShardId { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property ShardId As Integer
  overload: Discord.WebSocket.DiscordSocketClient.ShardId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.DiscordSocketClient.ConnectionState
  commentId: P:Discord.WebSocket.DiscordSocketClient.ConnectionState
  id: ConnectionState
  parent: Discord.WebSocket.DiscordSocketClient
  langs:
  - csharp
  - vb
  name: ConnectionState
  nameWithType: DiscordSocketClient.ConnectionState
  fullName: Discord.WebSocket.DiscordSocketClient.ConnectionState
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ConnectionState
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.cs
    startLine: 54
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Gets the current connection state of this client. '
  example: []
  syntax:
    content: public ConnectionState ConnectionState { get; }
    parameters: []
    return:
      type: Discord.ConnectionState
    content.vb: Public ReadOnly Property ConnectionState As ConnectionState
  overload: Discord.WebSocket.DiscordSocketClient.ConnectionState*
  implements:
  - Discord.IDiscordClient.ConnectionState
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.DiscordSocketClient.Latency
  commentId: P:Discord.WebSocket.DiscordSocketClient.Latency
  id: Latency
  parent: Discord.WebSocket.DiscordSocketClient
  langs:
  - csharp
  - vb
  name: Latency
  nameWithType: DiscordSocketClient.Latency
  fullName: Discord.WebSocket.DiscordSocketClient.Latency
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Latency
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.cs
    startLine: 56
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the estimated round-trip latency, in milliseconds, to the gateway server.\n"
  example: []
  syntax:
    content: public override int Latency { get; protected set; }
    parameters: []
    return:
      type: System.Int32
      description: "\nAn <see cref=\"!:System.Int32\"></see> that represents the round-trip latency to the WebSocket server. Please\nnote that this value does not represent a &quot;true&quot; latency for operations such as sending a message.\n"
    content.vb: Public Overrides Property Latency As Integer
  overridden: Discord.WebSocket.BaseSocketClient.Latency
  overload: Discord.WebSocket.DiscordSocketClient.Latency*
  modifiers.csharp:
  - public
  - override
  - get
  - protected set
  modifiers.vb:
  - Public
  - Overrides
  - Get
  - Protected Set
- uid: Discord.WebSocket.DiscordSocketClient.Status
  commentId: P:Discord.WebSocket.DiscordSocketClient.Status
  id: Status
  parent: Discord.WebSocket.DiscordSocketClient
  langs:
  - csharp
  - vb
  name: Status
  nameWithType: DiscordSocketClient.Status
  fullName: Discord.WebSocket.DiscordSocketClient.Status
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Status
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.cs
    startLine: 58
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the status for the logged-in user.\n"
  example: []
  syntax:
    content: public override UserStatus Status { get; protected set; }
    parameters: []
    return:
      type: Discord.UserStatus
      description: "\nA status object that represents the user&apos;s online presence status.\n"
    content.vb: Public Overrides Property Status As UserStatus
  overridden: Discord.WebSocket.BaseSocketClient.Status
  overload: Discord.WebSocket.DiscordSocketClient.Status*
  modifiers.csharp:
  - public
  - override
  - get
  - protected set
  modifiers.vb:
  - Public
  - Overrides
  - Get
  - Protected Set
- uid: Discord.WebSocket.DiscordSocketClient.Activity
  commentId: P:Discord.WebSocket.DiscordSocketClient.Activity
  id: Activity
  parent: Discord.WebSocket.DiscordSocketClient
  langs:
  - csharp
  - vb
  name: Activity
  nameWithType: DiscordSocketClient.Activity
  fullName: Discord.WebSocket.DiscordSocketClient.Activity
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Activity
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.cs
    startLine: 60
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the activity for the logged-in user.\n"
  example: []
  syntax:
    content: public override IActivity Activity { get; protected set; }
    parameters: []
    return:
      type: Discord.IActivity
      description: "\nAn activity object that represents the user&apos;s current activity.\n"
    content.vb: Public Overrides Property Activity As IActivity
  overridden: Discord.WebSocket.BaseSocketClient.Activity
  overload: Discord.WebSocket.DiscordSocketClient.Activity*
  modifiers.csharp:
  - public
  - override
  - get
  - protected set
  modifiers.vb:
  - Public
  - Overrides
  - Get
  - Protected Set
- uid: Discord.WebSocket.DiscordSocketClient.Guilds
  commentId: P:Discord.WebSocket.DiscordSocketClient.Guilds
  id: Guilds
  parent: Discord.WebSocket.DiscordSocketClient
  langs:
  - csharp
  - vb
  name: Guilds
  nameWithType: DiscordSocketClient.Guilds
  fullName: Discord.WebSocket.DiscordSocketClient.Guilds
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Guilds
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.cs
    startLine: 75
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of guilds that the user is currently in.\n"
  example: []
  syntax:
    content: public override IReadOnlyCollection<SocketGuild> Guilds { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.WebSocket.SocketGuild}
      description: "\nA read-only collection of guilds that the current user is in.\n"
    content.vb: Public Overrides ReadOnly Property Guilds As IReadOnlyCollection(Of SocketGuild)
  overridden: Discord.WebSocket.BaseSocketClient.Guilds
  overload: Discord.WebSocket.DiscordSocketClient.Guilds*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.WebSocket.DiscordSocketClient.PrivateChannels
  commentId: P:Discord.WebSocket.DiscordSocketClient.PrivateChannels
  id: PrivateChannels
  parent: Discord.WebSocket.DiscordSocketClient
  langs:
  - csharp
  - vb
  name: PrivateChannels
  nameWithType: DiscordSocketClient.PrivateChannels
  fullName: Discord.WebSocket.DiscordSocketClient.PrivateChannels
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: PrivateChannels
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.cs
    startLine: 77
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of private channels opened in this session.\n"
  remarks: "\nThis method will retrieve all private channels (including direct-message, group channel and such) that\nare currently opened in this session.\n<div class=\"WARNING\"><h5>warning</h5><p>\n    This method will not return previously opened private channels outside of the current session! If\n    you have just started the client, this may return an empty collection.\n</p></div>\n"
  example: []
  syntax:
    content: public override IReadOnlyCollection<ISocketPrivateChannel> PrivateChannels { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.WebSocket.ISocketPrivateChannel}
      description: "\nA read-only collection of private channels that the user currently partakes in.\n"
    content.vb: Public Overrides ReadOnly Property PrivateChannels As IReadOnlyCollection(Of ISocketPrivateChannel)
  overridden: Discord.WebSocket.BaseSocketClient.PrivateChannels
  overload: Discord.WebSocket.DiscordSocketClient.PrivateChannels*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.WebSocket.DiscordSocketClient.DMChannels
  commentId: P:Discord.WebSocket.DiscordSocketClient.DMChannels
  id: DMChannels
  parent: Discord.WebSocket.DiscordSocketClient
  langs:
  - csharp
  - vb
  name: DMChannels
  nameWithType: DiscordSocketClient.DMChannels
  fullName: Discord.WebSocket.DiscordSocketClient.DMChannels
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DMChannels
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.cs
    startLine: 91
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of direct message channels opened in this session.\n"
  remarks: "\nThis method returns a collection of currently opened direct message channels.\n<div class=\"WARNING\"><h5>warning</h5><p>\n    This method will not return previously opened DM channels outside of the current session! If you\n    have just started the client, this may return an empty collection.\n</p></div>\n"
  example: []
  syntax:
    content: public IReadOnlyCollection<SocketDMChannel> DMChannels { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.WebSocket.SocketDMChannel}
      description: "\nA collection of DM channels that have been opened in this session.\n"
    content.vb: Public ReadOnly Property DMChannels As IReadOnlyCollection(Of SocketDMChannel)
  overload: Discord.WebSocket.DiscordSocketClient.DMChannels*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.DiscordSocketClient.GroupChannels
  commentId: P:Discord.WebSocket.DiscordSocketClient.GroupChannels
  id: GroupChannels
  parent: Discord.WebSocket.DiscordSocketClient
  langs:
  - csharp
  - vb
  name: GroupChannels
  nameWithType: DiscordSocketClient.GroupChannels
  fullName: Discord.WebSocket.DiscordSocketClient.GroupChannels
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GroupChannels
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.cs
    startLine: 106
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of group channels opened in this session.\n"
  remarks: "\nThis method returns a collection of currently opened group channels.\n<div class=\"WARNING\"><h5>warning</h5><p>\n    This method will not return previously opened group channels outside of the current session! If you\n    have just started the client, this may return an empty collection.\n</p></div>\n"
  example: []
  syntax:
    content: public IReadOnlyCollection<SocketGroupChannel> GroupChannels { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.WebSocket.SocketGroupChannel}
      description: "\nA collection of group channels that have been opened in this session.\n"
    content.vb: Public ReadOnly Property GroupChannels As IReadOnlyCollection(Of SocketGroupChannel)
  overload: Discord.WebSocket.DiscordSocketClient.GroupChannels*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.DiscordSocketClient.VoiceRegions
  commentId: P:Discord.WebSocket.DiscordSocketClient.VoiceRegions
  id: VoiceRegions
  parent: Discord.WebSocket.DiscordSocketClient
  langs:
  - csharp
  - vb
  name: VoiceRegions
  nameWithType: DiscordSocketClient.VoiceRegions
  fullName: Discord.WebSocket.DiscordSocketClient.VoiceRegions
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: VoiceRegions
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.cs
    startLine: 109
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of available voice regions.\n"
  example: []
  syntax:
    content: public override IReadOnlyCollection<RestVoiceRegion> VoiceRegions { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.Rest.RestVoiceRegion}
      description: "\nA read-only collection of voice regions that the user has access to.\n"
    content.vb: Public Overrides ReadOnly Property VoiceRegions As IReadOnlyCollection(Of RestVoiceRegion)
  overridden: Discord.WebSocket.BaseSocketClient.VoiceRegions
  overload: Discord.WebSocket.DiscordSocketClient.VoiceRegions*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.WebSocket.DiscordSocketClient.#ctor
  commentId: M:Discord.WebSocket.DiscordSocketClient.#ctor
  id: '#ctor'
  parent: Discord.WebSocket.DiscordSocketClient
  langs:
  - csharp
  - vb
  name: DiscordSocketClient()
  nameWithType: DiscordSocketClient.DiscordSocketClient()
  fullName: Discord.WebSocket.DiscordSocketClient.DiscordSocketClient()
  type: Constructor
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: .ctor
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.cs
    startLine: 114
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nInitializes a new REST/WebSocket-based Discord client.\n"
  example: []
  syntax:
    content: public DiscordSocketClient()
    content.vb: Public Sub New
  overload: Discord.WebSocket.DiscordSocketClient.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.DiscordSocketClient.#ctor(Discord.WebSocket.DiscordSocketConfig)
  commentId: M:Discord.WebSocket.DiscordSocketClient.#ctor(Discord.WebSocket.DiscordSocketConfig)
  id: '#ctor(Discord.WebSocket.DiscordSocketConfig)'
  parent: Discord.WebSocket.DiscordSocketClient
  langs:
  - csharp
  - vb
  name: DiscordSocketClient(DiscordSocketConfig)
  nameWithType: DiscordSocketClient.DiscordSocketClient(DiscordSocketConfig)
  fullName: Discord.WebSocket.DiscordSocketClient.DiscordSocketClient(Discord.WebSocket.DiscordSocketConfig)
  type: Constructor
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: .ctor
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.cs
    startLine: 120
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nInitializes a new REST/WebSocket-based Discord client with the provided configuration.\n"
  example: []
  syntax:
    content: public DiscordSocketClient(DiscordSocketConfig config)
    parameters:
    - id: config
      type: Discord.WebSocket.DiscordSocketConfig
      description: The configuration to be used with the client.
    content.vb: Public Sub New(config As DiscordSocketConfig)
  overload: Discord.WebSocket.DiscordSocketClient.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.DiscordSocketClient.StartAsync
  commentId: M:Discord.WebSocket.DiscordSocketClient.StartAsync
  id: StartAsync
  parent: Discord.WebSocket.DiscordSocketClient
  langs:
  - csharp
  - vb
  name: StartAsync()
  nameWithType: DiscordSocketClient.StartAsync()
  fullName: Discord.WebSocket.DiscordSocketClient.StartAsync()
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: StartAsync
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.cs
    startLine: 221
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public override Task StartAsync()
    return:
      type: Task
    content.vb: Public Overrides Function StartAsync As Task
  overridden: Discord.WebSocket.BaseSocketClient.StartAsync
  overload: Discord.WebSocket.DiscordSocketClient.StartAsync*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.WebSocket.DiscordSocketClient.StopAsync
  commentId: M:Discord.WebSocket.DiscordSocketClient.StopAsync
  id: StopAsync
  parent: Discord.WebSocket.DiscordSocketClient
  langs:
  - csharp
  - vb
  name: StopAsync()
  nameWithType: DiscordSocketClient.StopAsync()
  fullName: Discord.WebSocket.DiscordSocketClient.StopAsync()
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: StopAsync
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.cs
    startLine: 224
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public override Task StopAsync()
    return:
      type: Task
    content.vb: Public Overrides Function StopAsync As Task
  overridden: Discord.WebSocket.BaseSocketClient.StopAsync
  overload: Discord.WebSocket.DiscordSocketClient.StopAsync*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.WebSocket.DiscordSocketClient.GetApplicationInfoAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.DiscordSocketClient.GetApplicationInfoAsync(Discord.RequestOptions)
  id: GetApplicationInfoAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.DiscordSocketClient
  langs:
  - csharp
  - vb
  name: GetApplicationInfoAsync(RequestOptions)
  nameWithType: DiscordSocketClient.GetApplicationInfoAsync(RequestOptions)
  fullName: Discord.WebSocket.DiscordSocketClient.GetApplicationInfoAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetApplicationInfoAsync
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.cs
    startLine: 298
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a Discord application information for the logged-in user.\n"
  remarks: "\nThis method reflects your application information you submitted when creating a Discord application via\nthe Developer Portal.\n"
  example: []
  syntax:
    content: public override Task<RestApplication> GetApplicationInfoAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestApplication}
      description: "\nA task that represents the asynchronous get operation. The task result contains the application\ninformation.\n"
    content.vb: Public Overrides Function GetApplicationInfoAsync(options As RequestOptions = Nothing) As Task(Of RestApplication)
  overridden: Discord.WebSocket.BaseSocketClient.GetApplicationInfoAsync(Discord.RequestOptions)
  overload: Discord.WebSocket.DiscordSocketClient.GetApplicationInfoAsync*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.WebSocket.DiscordSocketClient.GetGuild(System.UInt64)
  commentId: M:Discord.WebSocket.DiscordSocketClient.GetGuild(System.UInt64)
  id: GetGuild(System.UInt64)
  parent: Discord.WebSocket.DiscordSocketClient
  langs:
  - csharp
  - vb
  name: GetGuild(UInt64)
  nameWithType: DiscordSocketClient.GetGuild(UInt64)
  fullName: Discord.WebSocket.DiscordSocketClient.GetGuild(System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetGuild
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.cs
    startLine: 302
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a guild.\n"
  example: []
  syntax:
    content: public override SocketGuild GetGuild(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The guild snowflake identifier.
    return:
      type: Discord.WebSocket.SocketGuild
      description: "\nA WebSocket-based guild associated with the snowflake identifier; <code>null</code> when the guild cannot be\nfound.\n"
    content.vb: Public Overrides Function GetGuild(id As ULong) As SocketGuild
  overridden: Discord.WebSocket.BaseSocketClient.GetGuild(System.UInt64)
  overload: Discord.WebSocket.DiscordSocketClient.GetGuild*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.WebSocket.DiscordSocketClient.GetChannel(System.UInt64)
  commentId: M:Discord.WebSocket.DiscordSocketClient.GetChannel(System.UInt64)
  id: GetChannel(System.UInt64)
  parent: Discord.WebSocket.DiscordSocketClient
  langs:
  - csharp
  - vb
  name: GetChannel(UInt64)
  nameWithType: DiscordSocketClient.GetChannel(UInt64)
  fullName: Discord.WebSocket.DiscordSocketClient.GetChannel(System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetChannel
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.cs
    startLine: 306
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a channel.\n"
  example: []
  syntax:
    content: public override SocketChannel GetChannel(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the channel (e.g. `381889909113225237`).
    return:
      type: Discord.WebSocket.SocketChannel
      description: "\nA generic WebSocket-based channel object (voice, text, category, etc.) associated with the identifier;\n<code>null</code> when the channel cannot be found.\n"
    content.vb: Public Overrides Function GetChannel(id As ULong) As SocketChannel
  overridden: Discord.WebSocket.BaseSocketClient.GetChannel(System.UInt64)
  overload: Discord.WebSocket.DiscordSocketClient.GetChannel*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.WebSocket.DiscordSocketClient.GetUser(System.UInt64)
  commentId: M:Discord.WebSocket.DiscordSocketClient.GetUser(System.UInt64)
  id: GetUser(System.UInt64)
  parent: Discord.WebSocket.DiscordSocketClient
  langs:
  - csharp
  - vb
  name: GetUser(UInt64)
  nameWithType: DiscordSocketClient.GetUser(UInt64)
  fullName: Discord.WebSocket.DiscordSocketClient.GetUser(System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetUser
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.cs
    startLine: 310
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a generic user.\n"
  remarks: "\nThis method gets the user present in the WebSocket cache with the given condition.\n<div class=\"WARNING\"><h5>warning</h5><p>\n    Sometimes a user may return <code>null</code> due to Discord not sending offline users in large guilds\n    (i.e. guild with 100+ members) actively. To download users on startup and to see more information\n    about this subject, see <xref href=\"Discord.WebSocket.DiscordSocketConfig.AlwaysDownloadUsers\" data-throw-if-not-resolved=\"false\"></xref>.\n</p></div>\n<div class=\"NOTE\"><h5>note</h5><p>\n    This method does not attempt to fetch users that the logged-in user does not have access to (i.e.\n    users who don&apos;t share mutual guild(s) with the current user). If you wish to get a user that you do\n    not have access to, consider using the REST implementation of\n<see cref=\"!:DiscordRestClient.GetUserAsync(System.UInt64,Discord.RequestOptions)\"></see>.\n</p></div>\n"
  example: []
  syntax:
    content: public override SocketUser GetUser(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The user snowflake ID.
    return:
      type: Discord.WebSocket.SocketUser
      description: "\nA generic WebSocket-based user; <code>null</code> when the user cannot be found.\n"
    content.vb: Public Overrides Function GetUser(id As ULong) As SocketUser
  overridden: Discord.WebSocket.BaseSocketClient.GetUser(System.UInt64)
  overload: Discord.WebSocket.DiscordSocketClient.GetUser*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.WebSocket.DiscordSocketClient.GetUser(System.String,System.String)
  commentId: M:Discord.WebSocket.DiscordSocketClient.GetUser(System.String,System.String)
  id: GetUser(System.String,System.String)
  parent: Discord.WebSocket.DiscordSocketClient
  langs:
  - csharp
  - vb
  name: GetUser(String, String)
  nameWithType: DiscordSocketClient.GetUser(String, String)
  fullName: Discord.WebSocket.DiscordSocketClient.GetUser(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetUser
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.cs
    startLine: 313
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a user.\n"
  remarks: "\nThis method gets the user present in the WebSocket cache with the given condition.\n<div class=\"WARNING\"><h5>warning</h5><p>\n    Sometimes a user may return <code>null</code> due to Discord not sending offline users in large guilds\n    (i.e. guild with 100+ members) actively. To download users on startup and to see more information\n    about this subject, see <xref href=\"Discord.WebSocket.DiscordSocketConfig.AlwaysDownloadUsers\" data-throw-if-not-resolved=\"false\"></xref>.\n</p></div>\n<div class=\"NOTE\"><h5>note</h5><p>\n    This method does not attempt to fetch users that the logged-in user does not have access to (i.e.\n    users who don&apos;t share mutual guild(s) with the current user). If you wish to get a user that you do\n    not have access to, consider using the REST implementation of\n<see cref=\"!:DiscordRestClient.GetUserAsync(System.UInt64,Discord.RequestOptions)\"></see>.\n</p></div>\n"
  example: []
  syntax:
    content: public override SocketUser GetUser(string username, string discriminator)
    parameters:
    - id: username
      type: System.String
      description: The name of the user.
    - id: discriminator
      type: System.String
      description: The discriminator value of the user.
    return:
      type: Discord.WebSocket.SocketUser
      description: "\nA generic WebSocket-based user; <code>null</code> when the user cannot be found.\n"
    content.vb: Public Overrides Function GetUser(username As String, discriminator As String) As SocketUser
  overridden: Discord.WebSocket.BaseSocketClient.GetUser(System.String,System.String)
  overload: Discord.WebSocket.DiscordSocketClient.GetUser*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.WebSocket.DiscordSocketClient.GetVoiceRegion(System.String)
  commentId: M:Discord.WebSocket.DiscordSocketClient.GetVoiceRegion(System.String)
  id: GetVoiceRegion(System.String)
  parent: Discord.WebSocket.DiscordSocketClient
  langs:
  - csharp
  - vb
  name: GetVoiceRegion(String)
  nameWithType: DiscordSocketClient.GetVoiceRegion(String)
  fullName: Discord.WebSocket.DiscordSocketClient.GetVoiceRegion(System.String)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetVoiceRegion
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.cs
    startLine: 338
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a voice region.\n"
  example: []
  syntax:
    content: public override RestVoiceRegion GetVoiceRegion(string id)
    parameters:
    - id: id
      type: System.String
      description: The identifier of the voice region (e.g. <code>eu-central</code> ).
    return:
      type: Discord.Rest.RestVoiceRegion
      description: "\nA REST-based voice region associated with the identifier; <code>null</code> if the voice region is not\nfound.\n"
    content.vb: Public Overrides Function GetVoiceRegion(id As String) As RestVoiceRegion
  overridden: Discord.WebSocket.BaseSocketClient.GetVoiceRegion(System.String)
  overload: Discord.WebSocket.DiscordSocketClient.GetVoiceRegion*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.WebSocket.DiscordSocketClient.DownloadUsersAsync(IEnumerable{Discord.IGuild})
  commentId: M:Discord.WebSocket.DiscordSocketClient.DownloadUsersAsync(IEnumerable{Discord.IGuild})
  id: DownloadUsersAsync(IEnumerable{Discord.IGuild})
  parent: Discord.WebSocket.DiscordSocketClient
  langs:
  - csharp
  - vb
  name: DownloadUsersAsync(IEnumerable<IGuild>)
  nameWithType: DiscordSocketClient.DownloadUsersAsync(IEnumerable<IGuild>)
  fullName: Discord.WebSocket.DiscordSocketClient.DownloadUsersAsync(IEnumerable<Discord.IGuild>)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DownloadUsersAsync
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.cs
    startLine: 346
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nAttempts to download users into the user cache for the selected guilds.\n"
  example: []
  syntax:
    content: public override Task DownloadUsersAsync(IEnumerable<IGuild> guilds)
    parameters:
    - id: guilds
      type: IEnumerable{Discord.IGuild}
      description: The guilds to download the members from.
    return:
      type: Task
      description: "\nA task that represents the asynchronous download operation.\n"
    content.vb: Public Overrides Function DownloadUsersAsync(guilds As IEnumerable(Of IGuild)) As Task
  overridden: Discord.WebSocket.BaseSocketClient.DownloadUsersAsync(IEnumerable{Discord.IGuild})
  overload: Discord.WebSocket.DiscordSocketClient.DownloadUsersAsync*
  nameWithType.vb: DiscordSocketClient.DownloadUsersAsync(IEnumerable(Of IGuild))
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Discord.WebSocket.DiscordSocketClient.DownloadUsersAsync(IEnumerable(Of Discord.IGuild))
  name.vb: DownloadUsersAsync(IEnumerable(Of IGuild))
- uid: Discord.WebSocket.DiscordSocketClient.SetStatusAsync(Discord.UserStatus)
  commentId: M:Discord.WebSocket.DiscordSocketClient.SetStatusAsync(Discord.UserStatus)
  id: SetStatusAsync(Discord.UserStatus)
  parent: Discord.WebSocket.DiscordSocketClient
  langs:
  - csharp
  - vb
  name: SetStatusAsync(UserStatus)
  nameWithType: DiscordSocketClient.SetStatusAsync(UserStatus)
  fullName: Discord.WebSocket.DiscordSocketClient.SetStatusAsync(Discord.UserStatus)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SetStatusAsync
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.cs
    startLine: 391
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nSets the current status of the user (e.g. Online, Do not Disturb).\n"
  example:
  - "\nThe following example sets the status of the current user to Do Not Disturb.\n<pre><code class=\"lang-cs\">await client.SetStatusAsync(UserStatus.DoNotDisturb);</code></pre>\n"
  syntax:
    content: public override Task SetStatusAsync(UserStatus status)
    parameters:
    - id: status
      type: Discord.UserStatus
      description: The new status to be set.
    return:
      type: Task
      description: "\nA task that represents the asynchronous set operation.\n"
    content.vb: Public Overrides Function SetStatusAsync(status As UserStatus) As Task
  overridden: Discord.WebSocket.BaseSocketClient.SetStatusAsync(Discord.UserStatus)
  overload: Discord.WebSocket.DiscordSocketClient.SetStatusAsync*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.WebSocket.DiscordSocketClient.SetGameAsync(System.String,System.String,Discord.ActivityType)
  commentId: M:Discord.WebSocket.DiscordSocketClient.SetGameAsync(System.String,System.String,Discord.ActivityType)
  id: SetGameAsync(System.String,System.String,Discord.ActivityType)
  parent: Discord.WebSocket.DiscordSocketClient
  langs:
  - csharp
  - vb
  name: SetGameAsync(String, String, ActivityType)
  nameWithType: DiscordSocketClient.SetGameAsync(String, String, ActivityType)
  fullName: Discord.WebSocket.DiscordSocketClient.SetGameAsync(System.String, System.String, Discord.ActivityType)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SetGameAsync
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.cs
    startLine: 415
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nSets the game of the user.\n"
  example:
  - "\n<p>\n    The following example sets the activity of the current user to the specified game name.\n<pre><code class=\"lang-cs\">await client.SetGameAsync(&quot;A Strange Game&quot;);</code></pre>\n</p>\n<p>\n    The following example sets the activity of the current user to a streaming status.\n<pre><code class=\"lang-cs\">await client.SetGameAsync(&quot;Great Stream 10/10&quot;, &quot;https://twitch.tv/MyAmazingStream1337&quot;, ActivityType.Streaming);</code></pre>\n</p>\n"
  syntax:
    content: public override Task SetGameAsync(string name, string streamUrl = null, ActivityType type = default(ActivityType))
    parameters:
    - id: name
      type: System.String
      description: The name of the game.
    - id: streamUrl
      type: System.String
      description: If streaming, the URL of the stream. Must be a valid Twitch URL.
    - id: type
      type: Discord.ActivityType
      description: The type of the game.
    return:
      type: Task
      description: "\nA task that represents the asynchronous set operation.\n"
    content.vb: Public Overrides Function SetGameAsync(name As String, streamUrl As String = Nothing, type As ActivityType = Nothing) As Task
  overridden: Discord.WebSocket.BaseSocketClient.SetGameAsync(System.String,System.String,Discord.ActivityType)
  overload: Discord.WebSocket.DiscordSocketClient.SetGameAsync*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.WebSocket.DiscordSocketClient.SetActivityAsync(Discord.IActivity)
  commentId: M:Discord.WebSocket.DiscordSocketClient.SetActivityAsync(Discord.IActivity)
  id: SetActivityAsync(Discord.IActivity)
  parent: Discord.WebSocket.DiscordSocketClient
  langs:
  - csharp
  - vb
  name: SetActivityAsync(IActivity)
  nameWithType: DiscordSocketClient.SetActivityAsync(IActivity)
  fullName: Discord.WebSocket.DiscordSocketClient.SetActivityAsync(Discord.IActivity)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SetActivityAsync
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.cs
    startLine: 426
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nSets the <code data-dev-comment-type=\"paramref\" class=\"paramref\">activity</code> of the logged-in user.\n"
  remarks: "\nThis method sets the <code data-dev-comment-type=\"paramref\" class=\"paramref\">activity</code> of the user. \n<div class=\"NOTE\"><h5>note</h5><p>\n    Discord will only accept setting of name and the type of activity.\n</p></div>\n<div class=\"WARNING\"><h5>warning</h5><p>\n    Rich Presence cannot be set via this method or client. Rich Presence is strictly limited to RPC\n    clients only. \n</p></div>\n"
  example: []
  syntax:
    content: public override Task SetActivityAsync(IActivity activity)
    parameters:
    - id: activity
      type: Discord.IActivity
      description: The activity to be set.
    return:
      type: Task
      description: "\nA task that represents the asynchronous set operation.\n"
    content.vb: Public Overrides Function SetActivityAsync(activity As IActivity) As Task
  overridden: Discord.WebSocket.BaseSocketClient.SetActivityAsync(Discord.IActivity)
  overload: Discord.WebSocket.DiscordSocketClient.SetActivityAsync*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.WebSocket.DiscordSocketClient.Connected
  commentId: E:Discord.WebSocket.DiscordSocketClient.Connected
  id: Connected
  parent: Discord.WebSocket.DiscordSocketClient
  langs:
  - csharp
  - vb
  name: Connected
  nameWithType: DiscordSocketClient.Connected
  fullName: Discord.WebSocket.DiscordSocketClient.Connected
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Connected
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.Events.cs
    startLine: 10
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when connected to the Discord gateway. '
  example: []
  syntax:
    content: public event Func<Task> Connected
    return:
      type: Func{Task}
    content.vb: Public Event Connected As Func(Of Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.DiscordSocketClient.Disconnected
  commentId: E:Discord.WebSocket.DiscordSocketClient.Disconnected
  id: Disconnected
  parent: Discord.WebSocket.DiscordSocketClient
  langs:
  - csharp
  - vb
  name: Disconnected
  nameWithType: DiscordSocketClient.Disconnected
  fullName: Discord.WebSocket.DiscordSocketClient.Disconnected
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Disconnected
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.Events.cs
    startLine: 17
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when disconnected to the Discord gateway. '
  example: []
  syntax:
    content: public event Func<Exception, Task> Disconnected
    return:
      type: Func{Exception,Task}
    content.vb: Public Event Disconnected As Func(Of Exception, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.DiscordSocketClient.Ready
  commentId: E:Discord.WebSocket.DiscordSocketClient.Ready
  id: Ready
  parent: Discord.WebSocket.DiscordSocketClient
  langs:
  - csharp
  - vb
  name: Ready
  nameWithType: DiscordSocketClient.Ready
  fullName: Discord.WebSocket.DiscordSocketClient.Ready
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Ready
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.Events.cs
    startLine: 24
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when guild data has finished downloading. '
  example: []
  syntax:
    content: public event Func<Task> Ready
    return:
      type: Func{Task}
    content.vb: Public Event Ready As Func(Of Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.DiscordSocketClient.LatencyUpdated
  commentId: E:Discord.WebSocket.DiscordSocketClient.LatencyUpdated
  id: LatencyUpdated
  parent: Discord.WebSocket.DiscordSocketClient
  langs:
  - csharp
  - vb
  name: LatencyUpdated
  nameWithType: DiscordSocketClient.LatencyUpdated
  fullName: Discord.WebSocket.DiscordSocketClient.LatencyUpdated
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/DiscordSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: LatencyUpdated
    path: ../src/Discord.Net.WebSocket/DiscordSocketClient.Events.cs
    startLine: 31
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when a heartbeat is received from the Discord gateway. '
  example: []
  syntax:
    content: public event Func<int, int, Task> LatencyUpdated
    return:
      type: Func{System.Int32,System.Int32,Task}
    content.vb: Public Event LatencyUpdated As Func(Of Integer, Integer, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Discord.WebSocket
  commentId: N:Discord.WebSocket
  name: Discord.WebSocket
  nameWithType: Discord.WebSocket
  fullName: Discord.WebSocket
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Rest.BaseDiscordClient
  commentId: T:Discord.Rest.BaseDiscordClient
  parent: Discord.Rest
  name: BaseDiscordClient
  nameWithType: BaseDiscordClient
  fullName: Discord.Rest.BaseDiscordClient
- uid: Discord.WebSocket.BaseSocketClient
  commentId: T:Discord.WebSocket.BaseSocketClient
  parent: Discord.WebSocket
  name: BaseSocketClient
  nameWithType: BaseSocketClient
  fullName: Discord.WebSocket.BaseSocketClient
- uid: Discord.IDiscordClient
  commentId: T:Discord.IDiscordClient
  parent: Discord
  name: IDiscordClient
  nameWithType: IDiscordClient
  fullName: Discord.IDiscordClient
- uid: IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: IDisposable
- uid: Discord.WebSocket.BaseSocketClient.BaseConfig
  commentId: F:Discord.WebSocket.BaseSocketClient.BaseConfig
  parent: Discord.WebSocket.BaseSocketClient
  name: BaseConfig
  nameWithType: BaseSocketClient.BaseConfig
  fullName: Discord.WebSocket.BaseSocketClient.BaseConfig
- uid: Discord.WebSocket.BaseSocketClient.CurrentUser
  commentId: P:Discord.WebSocket.BaseSocketClient.CurrentUser
  parent: Discord.WebSocket.BaseSocketClient
  name: CurrentUser
  nameWithType: BaseSocketClient.CurrentUser
  fullName: Discord.WebSocket.BaseSocketClient.CurrentUser
- uid: Discord.WebSocket.BaseSocketClient.CreateGuildAsync(System.String,Discord.IVoiceRegion,Stream,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.BaseSocketClient.CreateGuildAsync(System.String,Discord.IVoiceRegion,Stream,Discord.RequestOptions)
  parent: Discord.WebSocket.BaseSocketClient
  isExternal: true
  name: CreateGuildAsync(String, IVoiceRegion, Stream, RequestOptions)
  nameWithType: BaseSocketClient.CreateGuildAsync(String, IVoiceRegion, Stream, RequestOptions)
  fullName: Discord.WebSocket.BaseSocketClient.CreateGuildAsync(System.String, Discord.IVoiceRegion, Stream, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.BaseSocketClient.CreateGuildAsync(System.String,Discord.IVoiceRegion,Stream,Discord.RequestOptions)
    name: CreateGuildAsync
    nameWithType: BaseSocketClient.CreateGuildAsync
    fullName: Discord.WebSocket.BaseSocketClient.CreateGuildAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.IVoiceRegion
    name: IVoiceRegion
    nameWithType: IVoiceRegion
    fullName: Discord.IVoiceRegion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Stream
    name: Stream
    nameWithType: Stream
    fullName: Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.BaseSocketClient.CreateGuildAsync(System.String,Discord.IVoiceRegion,Stream,Discord.RequestOptions)
    name: CreateGuildAsync
    nameWithType: BaseSocketClient.CreateGuildAsync
    fullName: Discord.WebSocket.BaseSocketClient.CreateGuildAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.IVoiceRegion
    name: IVoiceRegion
    nameWithType: IVoiceRegion
    fullName: Discord.IVoiceRegion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Stream
    name: Stream
    nameWithType: Stream
    fullName: Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.BaseSocketClient.GetConnectionsAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.BaseSocketClient.GetConnectionsAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.BaseSocketClient
  name: GetConnectionsAsync(RequestOptions)
  nameWithType: BaseSocketClient.GetConnectionsAsync(RequestOptions)
  fullName: Discord.WebSocket.BaseSocketClient.GetConnectionsAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.BaseSocketClient.GetConnectionsAsync(Discord.RequestOptions)
    name: GetConnectionsAsync
    nameWithType: BaseSocketClient.GetConnectionsAsync
    fullName: Discord.WebSocket.BaseSocketClient.GetConnectionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.BaseSocketClient.GetConnectionsAsync(Discord.RequestOptions)
    name: GetConnectionsAsync
    nameWithType: BaseSocketClient.GetConnectionsAsync
    fullName: Discord.WebSocket.BaseSocketClient.GetConnectionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.BaseSocketClient.GetInviteAsync(System.String,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.BaseSocketClient.GetInviteAsync(System.String,Discord.RequestOptions)
  parent: Discord.WebSocket.BaseSocketClient
  isExternal: true
  name: GetInviteAsync(String, RequestOptions)
  nameWithType: BaseSocketClient.GetInviteAsync(String, RequestOptions)
  fullName: Discord.WebSocket.BaseSocketClient.GetInviteAsync(System.String, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.BaseSocketClient.GetInviteAsync(System.String,Discord.RequestOptions)
    name: GetInviteAsync
    nameWithType: BaseSocketClient.GetInviteAsync
    fullName: Discord.WebSocket.BaseSocketClient.GetInviteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.BaseSocketClient.GetInviteAsync(System.String,Discord.RequestOptions)
    name: GetInviteAsync
    nameWithType: BaseSocketClient.GetInviteAsync
    fullName: Discord.WebSocket.BaseSocketClient.GetInviteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.BaseSocketClient.ChannelCreated
  commentId: E:Discord.WebSocket.BaseSocketClient.ChannelCreated
  parent: Discord.WebSocket.BaseSocketClient
  name: ChannelCreated
  nameWithType: BaseSocketClient.ChannelCreated
  fullName: Discord.WebSocket.BaseSocketClient.ChannelCreated
- uid: Discord.WebSocket.BaseSocketClient.ChannelDestroyed
  commentId: E:Discord.WebSocket.BaseSocketClient.ChannelDestroyed
  parent: Discord.WebSocket.BaseSocketClient
  name: ChannelDestroyed
  nameWithType: BaseSocketClient.ChannelDestroyed
  fullName: Discord.WebSocket.BaseSocketClient.ChannelDestroyed
- uid: Discord.WebSocket.BaseSocketClient.ChannelUpdated
  commentId: E:Discord.WebSocket.BaseSocketClient.ChannelUpdated
  parent: Discord.WebSocket.BaseSocketClient
  name: ChannelUpdated
  nameWithType: BaseSocketClient.ChannelUpdated
  fullName: Discord.WebSocket.BaseSocketClient.ChannelUpdated
- uid: Discord.WebSocket.BaseSocketClient.MessageReceived
  commentId: E:Discord.WebSocket.BaseSocketClient.MessageReceived
  parent: Discord.WebSocket.BaseSocketClient
  name: MessageReceived
  nameWithType: BaseSocketClient.MessageReceived
  fullName: Discord.WebSocket.BaseSocketClient.MessageReceived
- uid: Discord.WebSocket.BaseSocketClient.MessageDeleted
  commentId: E:Discord.WebSocket.BaseSocketClient.MessageDeleted
  parent: Discord.WebSocket.BaseSocketClient
  name: MessageDeleted
  nameWithType: BaseSocketClient.MessageDeleted
  fullName: Discord.WebSocket.BaseSocketClient.MessageDeleted
- uid: Discord.WebSocket.BaseSocketClient.MessagesBulkDeleted
  commentId: E:Discord.WebSocket.BaseSocketClient.MessagesBulkDeleted
  parent: Discord.WebSocket.BaseSocketClient
  name: MessagesBulkDeleted
  nameWithType: BaseSocketClient.MessagesBulkDeleted
  fullName: Discord.WebSocket.BaseSocketClient.MessagesBulkDeleted
- uid: Discord.WebSocket.BaseSocketClient.MessageUpdated
  commentId: E:Discord.WebSocket.BaseSocketClient.MessageUpdated
  parent: Discord.WebSocket.BaseSocketClient
  name: MessageUpdated
  nameWithType: BaseSocketClient.MessageUpdated
  fullName: Discord.WebSocket.BaseSocketClient.MessageUpdated
- uid: Discord.WebSocket.BaseSocketClient.ReactionAdded
  commentId: E:Discord.WebSocket.BaseSocketClient.ReactionAdded
  parent: Discord.WebSocket.BaseSocketClient
  name: ReactionAdded
  nameWithType: BaseSocketClient.ReactionAdded
  fullName: Discord.WebSocket.BaseSocketClient.ReactionAdded
- uid: Discord.WebSocket.BaseSocketClient.ReactionRemoved
  commentId: E:Discord.WebSocket.BaseSocketClient.ReactionRemoved
  parent: Discord.WebSocket.BaseSocketClient
  name: ReactionRemoved
  nameWithType: BaseSocketClient.ReactionRemoved
  fullName: Discord.WebSocket.BaseSocketClient.ReactionRemoved
- uid: Discord.WebSocket.BaseSocketClient.ReactionsCleared
  commentId: E:Discord.WebSocket.BaseSocketClient.ReactionsCleared
  parent: Discord.WebSocket.BaseSocketClient
  name: ReactionsCleared
  nameWithType: BaseSocketClient.ReactionsCleared
  fullName: Discord.WebSocket.BaseSocketClient.ReactionsCleared
- uid: Discord.WebSocket.BaseSocketClient.RoleCreated
  commentId: E:Discord.WebSocket.BaseSocketClient.RoleCreated
  parent: Discord.WebSocket.BaseSocketClient
  name: RoleCreated
  nameWithType: BaseSocketClient.RoleCreated
  fullName: Discord.WebSocket.BaseSocketClient.RoleCreated
- uid: Discord.WebSocket.BaseSocketClient.RoleDeleted
  commentId: E:Discord.WebSocket.BaseSocketClient.RoleDeleted
  parent: Discord.WebSocket.BaseSocketClient
  name: RoleDeleted
  nameWithType: BaseSocketClient.RoleDeleted
  fullName: Discord.WebSocket.BaseSocketClient.RoleDeleted
- uid: Discord.WebSocket.BaseSocketClient.RoleUpdated
  commentId: E:Discord.WebSocket.BaseSocketClient.RoleUpdated
  parent: Discord.WebSocket.BaseSocketClient
  name: RoleUpdated
  nameWithType: BaseSocketClient.RoleUpdated
  fullName: Discord.WebSocket.BaseSocketClient.RoleUpdated
- uid: Discord.WebSocket.BaseSocketClient.JoinedGuild
  commentId: E:Discord.WebSocket.BaseSocketClient.JoinedGuild
  parent: Discord.WebSocket.BaseSocketClient
  name: JoinedGuild
  nameWithType: BaseSocketClient.JoinedGuild
  fullName: Discord.WebSocket.BaseSocketClient.JoinedGuild
- uid: Discord.WebSocket.BaseSocketClient.LeftGuild
  commentId: E:Discord.WebSocket.BaseSocketClient.LeftGuild
  parent: Discord.WebSocket.BaseSocketClient
  name: LeftGuild
  nameWithType: BaseSocketClient.LeftGuild
  fullName: Discord.WebSocket.BaseSocketClient.LeftGuild
- uid: Discord.WebSocket.BaseSocketClient.GuildAvailable
  commentId: E:Discord.WebSocket.BaseSocketClient.GuildAvailable
  parent: Discord.WebSocket.BaseSocketClient
  name: GuildAvailable
  nameWithType: BaseSocketClient.GuildAvailable
  fullName: Discord.WebSocket.BaseSocketClient.GuildAvailable
- uid: Discord.WebSocket.BaseSocketClient.GuildUnavailable
  commentId: E:Discord.WebSocket.BaseSocketClient.GuildUnavailable
  parent: Discord.WebSocket.BaseSocketClient
  name: GuildUnavailable
  nameWithType: BaseSocketClient.GuildUnavailable
  fullName: Discord.WebSocket.BaseSocketClient.GuildUnavailable
- uid: Discord.WebSocket.BaseSocketClient.GuildMembersDownloaded
  commentId: E:Discord.WebSocket.BaseSocketClient.GuildMembersDownloaded
  parent: Discord.WebSocket.BaseSocketClient
  name: GuildMembersDownloaded
  nameWithType: BaseSocketClient.GuildMembersDownloaded
  fullName: Discord.WebSocket.BaseSocketClient.GuildMembersDownloaded
- uid: Discord.WebSocket.BaseSocketClient.GuildUpdated
  commentId: E:Discord.WebSocket.BaseSocketClient.GuildUpdated
  parent: Discord.WebSocket.BaseSocketClient
  name: GuildUpdated
  nameWithType: BaseSocketClient.GuildUpdated
  fullName: Discord.WebSocket.BaseSocketClient.GuildUpdated
- uid: Discord.WebSocket.BaseSocketClient.UserJoined
  commentId: E:Discord.WebSocket.BaseSocketClient.UserJoined
  parent: Discord.WebSocket.BaseSocketClient
  name: UserJoined
  nameWithType: BaseSocketClient.UserJoined
  fullName: Discord.WebSocket.BaseSocketClient.UserJoined
- uid: Discord.WebSocket.BaseSocketClient.UserLeft
  commentId: E:Discord.WebSocket.BaseSocketClient.UserLeft
  parent: Discord.WebSocket.BaseSocketClient
  name: UserLeft
  nameWithType: BaseSocketClient.UserLeft
  fullName: Discord.WebSocket.BaseSocketClient.UserLeft
- uid: Discord.WebSocket.BaseSocketClient.UserBanned
  commentId: E:Discord.WebSocket.BaseSocketClient.UserBanned
  parent: Discord.WebSocket.BaseSocketClient
  name: UserBanned
  nameWithType: BaseSocketClient.UserBanned
  fullName: Discord.WebSocket.BaseSocketClient.UserBanned
- uid: Discord.WebSocket.BaseSocketClient.UserUnbanned
  commentId: E:Discord.WebSocket.BaseSocketClient.UserUnbanned
  parent: Discord.WebSocket.BaseSocketClient
  name: UserUnbanned
  nameWithType: BaseSocketClient.UserUnbanned
  fullName: Discord.WebSocket.BaseSocketClient.UserUnbanned
- uid: Discord.WebSocket.BaseSocketClient.UserUpdated
  commentId: E:Discord.WebSocket.BaseSocketClient.UserUpdated
  parent: Discord.WebSocket.BaseSocketClient
  name: UserUpdated
  nameWithType: BaseSocketClient.UserUpdated
  fullName: Discord.WebSocket.BaseSocketClient.UserUpdated
- uid: Discord.WebSocket.BaseSocketClient.GuildMemberUpdated
  commentId: E:Discord.WebSocket.BaseSocketClient.GuildMemberUpdated
  parent: Discord.WebSocket.BaseSocketClient
  name: GuildMemberUpdated
  nameWithType: BaseSocketClient.GuildMemberUpdated
  fullName: Discord.WebSocket.BaseSocketClient.GuildMemberUpdated
- uid: Discord.WebSocket.BaseSocketClient.UserVoiceStateUpdated
  commentId: E:Discord.WebSocket.BaseSocketClient.UserVoiceStateUpdated
  parent: Discord.WebSocket.BaseSocketClient
  name: UserVoiceStateUpdated
  nameWithType: BaseSocketClient.UserVoiceStateUpdated
  fullName: Discord.WebSocket.BaseSocketClient.UserVoiceStateUpdated
- uid: Discord.WebSocket.BaseSocketClient.VoiceServerUpdated
  commentId: E:Discord.WebSocket.BaseSocketClient.VoiceServerUpdated
  parent: Discord.WebSocket.BaseSocketClient
  name: VoiceServerUpdated
  nameWithType: BaseSocketClient.VoiceServerUpdated
  fullName: Discord.WebSocket.BaseSocketClient.VoiceServerUpdated
- uid: Discord.WebSocket.BaseSocketClient.CurrentUserUpdated
  commentId: E:Discord.WebSocket.BaseSocketClient.CurrentUserUpdated
  parent: Discord.WebSocket.BaseSocketClient
  name: CurrentUserUpdated
  nameWithType: BaseSocketClient.CurrentUserUpdated
  fullName: Discord.WebSocket.BaseSocketClient.CurrentUserUpdated
- uid: Discord.WebSocket.BaseSocketClient.UserIsTyping
  commentId: E:Discord.WebSocket.BaseSocketClient.UserIsTyping
  parent: Discord.WebSocket.BaseSocketClient
  name: UserIsTyping
  nameWithType: BaseSocketClient.UserIsTyping
  fullName: Discord.WebSocket.BaseSocketClient.UserIsTyping
- uid: Discord.WebSocket.BaseSocketClient.RecipientAdded
  commentId: E:Discord.WebSocket.BaseSocketClient.RecipientAdded
  parent: Discord.WebSocket.BaseSocketClient
  name: RecipientAdded
  nameWithType: BaseSocketClient.RecipientAdded
  fullName: Discord.WebSocket.BaseSocketClient.RecipientAdded
- uid: Discord.WebSocket.BaseSocketClient.RecipientRemoved
  commentId: E:Discord.WebSocket.BaseSocketClient.RecipientRemoved
  parent: Discord.WebSocket.BaseSocketClient
  name: RecipientRemoved
  nameWithType: BaseSocketClient.RecipientRemoved
  fullName: Discord.WebSocket.BaseSocketClient.RecipientRemoved
- uid: Discord.Rest.BaseDiscordClient.Log
  commentId: E:Discord.Rest.BaseDiscordClient.Log
  parent: Discord.Rest.BaseDiscordClient
  name: Log
  nameWithType: BaseDiscordClient.Log
  fullName: Discord.Rest.BaseDiscordClient.Log
- uid: Discord.Rest.BaseDiscordClient.LoggedIn
  commentId: E:Discord.Rest.BaseDiscordClient.LoggedIn
  parent: Discord.Rest.BaseDiscordClient
  name: LoggedIn
  nameWithType: BaseDiscordClient.LoggedIn
  fullName: Discord.Rest.BaseDiscordClient.LoggedIn
- uid: Discord.Rest.BaseDiscordClient.LoggedOut
  commentId: E:Discord.Rest.BaseDiscordClient.LoggedOut
  parent: Discord.Rest.BaseDiscordClient
  name: LoggedOut
  nameWithType: BaseDiscordClient.LoggedOut
  fullName: Discord.Rest.BaseDiscordClient.LoggedOut
- uid: Discord.Rest.BaseDiscordClient.LoginState
  commentId: P:Discord.Rest.BaseDiscordClient.LoginState
  parent: Discord.Rest.BaseDiscordClient
  name: LoginState
  nameWithType: BaseDiscordClient.LoginState
  fullName: Discord.Rest.BaseDiscordClient.LoginState
- uid: Discord.Rest.BaseDiscordClient.TokenType
  commentId: P:Discord.Rest.BaseDiscordClient.TokenType
  parent: Discord.Rest.BaseDiscordClient
  name: TokenType
  nameWithType: BaseDiscordClient.TokenType
  fullName: Discord.Rest.BaseDiscordClient.TokenType
- uid: Discord.Rest.BaseDiscordClient.LoginAsync(Discord.TokenType,System.String,System.Boolean)
  commentId: M:Discord.Rest.BaseDiscordClient.LoginAsync(Discord.TokenType,System.String,System.Boolean)
  parent: Discord.Rest.BaseDiscordClient
  isExternal: true
  name: LoginAsync(TokenType, String, Boolean)
  nameWithType: BaseDiscordClient.LoginAsync(TokenType, String, Boolean)
  fullName: Discord.Rest.BaseDiscordClient.LoginAsync(Discord.TokenType, System.String, System.Boolean)
  spec.csharp:
  - uid: Discord.Rest.BaseDiscordClient.LoginAsync(Discord.TokenType,System.String,System.Boolean)
    name: LoginAsync
    nameWithType: BaseDiscordClient.LoginAsync
    fullName: Discord.Rest.BaseDiscordClient.LoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.TokenType
    name: TokenType
    nameWithType: TokenType
    fullName: Discord.TokenType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.BaseDiscordClient.LoginAsync(Discord.TokenType,System.String,System.Boolean)
    name: LoginAsync
    nameWithType: BaseDiscordClient.LoginAsync
    fullName: Discord.Rest.BaseDiscordClient.LoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.TokenType
    name: TokenType
    nameWithType: TokenType
    fullName: Discord.TokenType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.BaseDiscordClient.LogoutAsync
  commentId: M:Discord.Rest.BaseDiscordClient.LogoutAsync
  parent: Discord.Rest.BaseDiscordClient
  name: LogoutAsync()
  nameWithType: BaseDiscordClient.LogoutAsync()
  fullName: Discord.Rest.BaseDiscordClient.LogoutAsync()
  spec.csharp:
  - uid: Discord.Rest.BaseDiscordClient.LogoutAsync
    name: LogoutAsync
    nameWithType: BaseDiscordClient.LogoutAsync
    fullName: Discord.Rest.BaseDiscordClient.LogoutAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.BaseDiscordClient.LogoutAsync
    name: LogoutAsync
    nameWithType: BaseDiscordClient.LogoutAsync
    fullName: Discord.Rest.BaseDiscordClient.LogoutAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.BaseDiscordClient.Dispose
  commentId: M:Discord.Rest.BaseDiscordClient.Dispose
  parent: Discord.Rest.BaseDiscordClient
  name: Dispose()
  nameWithType: BaseDiscordClient.Dispose()
  fullName: Discord.Rest.BaseDiscordClient.Dispose()
  spec.csharp:
  - uid: Discord.Rest.BaseDiscordClient.Dispose
    name: Dispose
    nameWithType: BaseDiscordClient.Dispose
    fullName: Discord.Rest.BaseDiscordClient.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.BaseDiscordClient.Dispose
    name: Dispose
    nameWithType: BaseDiscordClient.Dispose
    fullName: Discord.Rest.BaseDiscordClient.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.BaseDiscordClient.GetRecommendedShardCountAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.BaseDiscordClient.GetRecommendedShardCountAsync(Discord.RequestOptions)
  parent: Discord.Rest.BaseDiscordClient
  name: GetRecommendedShardCountAsync(RequestOptions)
  nameWithType: BaseDiscordClient.GetRecommendedShardCountAsync(RequestOptions)
  fullName: Discord.Rest.BaseDiscordClient.GetRecommendedShardCountAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.BaseDiscordClient.GetRecommendedShardCountAsync(Discord.RequestOptions)
    name: GetRecommendedShardCountAsync
    nameWithType: BaseDiscordClient.GetRecommendedShardCountAsync
    fullName: Discord.Rest.BaseDiscordClient.GetRecommendedShardCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.BaseDiscordClient.GetRecommendedShardCountAsync(Discord.RequestOptions)
    name: GetRecommendedShardCountAsync
    nameWithType: BaseDiscordClient.GetRecommendedShardCountAsync
    fullName: Discord.Rest.BaseDiscordClient.GetRecommendedShardCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#ConnectionState
  commentId: P:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#ConnectionState
  parent: Discord.Rest.BaseDiscordClient
  name: IDiscordClient.ConnectionState
  nameWithType: BaseDiscordClient.IDiscordClient.ConnectionState
  fullName: Discord.Rest.BaseDiscordClient.Discord.IDiscordClient.ConnectionState
  nameWithType.vb: BaseDiscordClient.Discord.IDiscordClient.ConnectionState
  name.vb: Discord.IDiscordClient.ConnectionState
- uid: Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#CurrentUser
  commentId: P:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#CurrentUser
  parent: Discord.Rest.BaseDiscordClient
  name: IDiscordClient.CurrentUser
  nameWithType: BaseDiscordClient.IDiscordClient.CurrentUser
  fullName: Discord.Rest.BaseDiscordClient.Discord.IDiscordClient.CurrentUser
  nameWithType.vb: BaseDiscordClient.Discord.IDiscordClient.CurrentUser
  name.vb: Discord.IDiscordClient.CurrentUser
- uid: Discord.Rest
  commentId: N:Discord.Rest
  name: Discord.Rest
  nameWithType: Discord.Rest
  fullName: Discord.Rest
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.WebSocket.BaseSocketClient.Rest
  commentId: P:Discord.WebSocket.BaseSocketClient.Rest
  parent: Discord.WebSocket.BaseSocketClient
  name: Rest
  nameWithType: BaseSocketClient.Rest
  fullName: Discord.WebSocket.BaseSocketClient.Rest
- uid: Discord.WebSocket.DiscordSocketClient.Rest*
  commentId: Overload:Discord.WebSocket.DiscordSocketClient.Rest
  name: Rest
  nameWithType: DiscordSocketClient.Rest
  fullName: Discord.WebSocket.DiscordSocketClient.Rest
- uid: Discord.WebSocket.DiscordSocketRestClient
  commentId: T:Discord.WebSocket.DiscordSocketRestClient
  parent: Discord.WebSocket
  name: DiscordSocketRestClient
  nameWithType: DiscordSocketRestClient
  fullName: Discord.WebSocket.DiscordSocketRestClient
- uid: Discord.WebSocket.DiscordSocketClient.ShardId*
  commentId: Overload:Discord.WebSocket.DiscordSocketClient.ShardId
  name: ShardId
  nameWithType: DiscordSocketClient.ShardId
  fullName: Discord.WebSocket.DiscordSocketClient.ShardId
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Discord.WebSocket.DiscordSocketClient.ConnectionState*
  commentId: Overload:Discord.WebSocket.DiscordSocketClient.ConnectionState
  name: ConnectionState
  nameWithType: DiscordSocketClient.ConnectionState
  fullName: Discord.WebSocket.DiscordSocketClient.ConnectionState
- uid: Discord.IDiscordClient.ConnectionState
  commentId: P:Discord.IDiscordClient.ConnectionState
  parent: Discord.IDiscordClient
  name: ConnectionState
  nameWithType: IDiscordClient.ConnectionState
  fullName: Discord.IDiscordClient.ConnectionState
- uid: Discord.ConnectionState
  commentId: T:Discord.ConnectionState
  parent: Discord
  name: ConnectionState
  nameWithType: ConnectionState
  fullName: Discord.ConnectionState
- uid: Discord.WebSocket.BaseSocketClient.Latency
  commentId: P:Discord.WebSocket.BaseSocketClient.Latency
  parent: Discord.WebSocket.BaseSocketClient
  name: Latency
  nameWithType: BaseSocketClient.Latency
  fullName: Discord.WebSocket.BaseSocketClient.Latency
- uid: Discord.WebSocket.DiscordSocketClient.Latency*
  commentId: Overload:Discord.WebSocket.DiscordSocketClient.Latency
  name: Latency
  nameWithType: DiscordSocketClient.Latency
  fullName: Discord.WebSocket.DiscordSocketClient.Latency
- uid: Discord.WebSocket.BaseSocketClient.Status
  commentId: P:Discord.WebSocket.BaseSocketClient.Status
  parent: Discord.WebSocket.BaseSocketClient
  name: Status
  nameWithType: BaseSocketClient.Status
  fullName: Discord.WebSocket.BaseSocketClient.Status
- uid: Discord.WebSocket.DiscordSocketClient.Status*
  commentId: Overload:Discord.WebSocket.DiscordSocketClient.Status
  name: Status
  nameWithType: DiscordSocketClient.Status
  fullName: Discord.WebSocket.DiscordSocketClient.Status
- uid: Discord.UserStatus
  commentId: T:Discord.UserStatus
  parent: Discord
  name: UserStatus
  nameWithType: UserStatus
  fullName: Discord.UserStatus
- uid: Discord.WebSocket.BaseSocketClient.Activity
  commentId: P:Discord.WebSocket.BaseSocketClient.Activity
  parent: Discord.WebSocket.BaseSocketClient
  name: Activity
  nameWithType: BaseSocketClient.Activity
  fullName: Discord.WebSocket.BaseSocketClient.Activity
- uid: Discord.WebSocket.DiscordSocketClient.Activity*
  commentId: Overload:Discord.WebSocket.DiscordSocketClient.Activity
  name: Activity
  nameWithType: DiscordSocketClient.Activity
  fullName: Discord.WebSocket.DiscordSocketClient.Activity
- uid: Discord.IActivity
  commentId: T:Discord.IActivity
  parent: Discord
  name: IActivity
  nameWithType: IActivity
  fullName: Discord.IActivity
- uid: Discord.WebSocket.BaseSocketClient.Guilds
  commentId: P:Discord.WebSocket.BaseSocketClient.Guilds
  parent: Discord.WebSocket.BaseSocketClient
  name: Guilds
  nameWithType: BaseSocketClient.Guilds
  fullName: Discord.WebSocket.BaseSocketClient.Guilds
- uid: Discord.WebSocket.DiscordSocketClient.Guilds*
  commentId: Overload:Discord.WebSocket.DiscordSocketClient.Guilds
  name: Guilds
  nameWithType: DiscordSocketClient.Guilds
  fullName: Discord.WebSocket.DiscordSocketClient.Guilds
- uid: IReadOnlyCollection{Discord.WebSocket.SocketGuild}
  commentId: '!:IReadOnlyCollection{Discord.WebSocket.SocketGuild}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<SocketGuild>
  nameWithType: IReadOnlyCollection<SocketGuild>
  fullName: IReadOnlyCollection<Discord.WebSocket.SocketGuild>
  nameWithType.vb: IReadOnlyCollection(Of SocketGuild)
  fullName.vb: IReadOnlyCollection(Of Discord.WebSocket.SocketGuild)
  name.vb: IReadOnlyCollection(Of SocketGuild)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketGuild
    name: SocketGuild
    nameWithType: SocketGuild
    fullName: Discord.WebSocket.SocketGuild
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketGuild
    name: SocketGuild
    nameWithType: SocketGuild
    fullName: Discord.WebSocket.SocketGuild
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<>
  nameWithType: IReadOnlyCollection<>
  fullName: IReadOnlyCollection<>
  nameWithType.vb: IReadOnlyCollection(Of )
  fullName.vb: IReadOnlyCollection(Of )
  name.vb: IReadOnlyCollection(Of )
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.BaseSocketClient.PrivateChannels
  commentId: P:Discord.WebSocket.BaseSocketClient.PrivateChannels
  parent: Discord.WebSocket.BaseSocketClient
  name: PrivateChannels
  nameWithType: BaseSocketClient.PrivateChannels
  fullName: Discord.WebSocket.BaseSocketClient.PrivateChannels
- uid: Discord.WebSocket.DiscordSocketClient.PrivateChannels*
  commentId: Overload:Discord.WebSocket.DiscordSocketClient.PrivateChannels
  name: PrivateChannels
  nameWithType: DiscordSocketClient.PrivateChannels
  fullName: Discord.WebSocket.DiscordSocketClient.PrivateChannels
- uid: IReadOnlyCollection{Discord.WebSocket.ISocketPrivateChannel}
  commentId: '!:IReadOnlyCollection{Discord.WebSocket.ISocketPrivateChannel}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<ISocketPrivateChannel>
  nameWithType: IReadOnlyCollection<ISocketPrivateChannel>
  fullName: IReadOnlyCollection<Discord.WebSocket.ISocketPrivateChannel>
  nameWithType.vb: IReadOnlyCollection(Of ISocketPrivateChannel)
  fullName.vb: IReadOnlyCollection(Of Discord.WebSocket.ISocketPrivateChannel)
  name.vb: IReadOnlyCollection(Of ISocketPrivateChannel)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.ISocketPrivateChannel
    name: ISocketPrivateChannel
    nameWithType: ISocketPrivateChannel
    fullName: Discord.WebSocket.ISocketPrivateChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.ISocketPrivateChannel
    name: ISocketPrivateChannel
    nameWithType: ISocketPrivateChannel
    fullName: Discord.WebSocket.ISocketPrivateChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.DiscordSocketClient.DMChannels*
  commentId: Overload:Discord.WebSocket.DiscordSocketClient.DMChannels
  name: DMChannels
  nameWithType: DiscordSocketClient.DMChannels
  fullName: Discord.WebSocket.DiscordSocketClient.DMChannels
- uid: IReadOnlyCollection{Discord.WebSocket.SocketDMChannel}
  commentId: '!:IReadOnlyCollection{Discord.WebSocket.SocketDMChannel}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<SocketDMChannel>
  nameWithType: IReadOnlyCollection<SocketDMChannel>
  fullName: IReadOnlyCollection<Discord.WebSocket.SocketDMChannel>
  nameWithType.vb: IReadOnlyCollection(Of SocketDMChannel)
  fullName.vb: IReadOnlyCollection(Of Discord.WebSocket.SocketDMChannel)
  name.vb: IReadOnlyCollection(Of SocketDMChannel)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketDMChannel
    name: SocketDMChannel
    nameWithType: SocketDMChannel
    fullName: Discord.WebSocket.SocketDMChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketDMChannel
    name: SocketDMChannel
    nameWithType: SocketDMChannel
    fullName: Discord.WebSocket.SocketDMChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.DiscordSocketClient.GroupChannels*
  commentId: Overload:Discord.WebSocket.DiscordSocketClient.GroupChannels
  name: GroupChannels
  nameWithType: DiscordSocketClient.GroupChannels
  fullName: Discord.WebSocket.DiscordSocketClient.GroupChannels
- uid: IReadOnlyCollection{Discord.WebSocket.SocketGroupChannel}
  commentId: '!:IReadOnlyCollection{Discord.WebSocket.SocketGroupChannel}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<SocketGroupChannel>
  nameWithType: IReadOnlyCollection<SocketGroupChannel>
  fullName: IReadOnlyCollection<Discord.WebSocket.SocketGroupChannel>
  nameWithType.vb: IReadOnlyCollection(Of SocketGroupChannel)
  fullName.vb: IReadOnlyCollection(Of Discord.WebSocket.SocketGroupChannel)
  name.vb: IReadOnlyCollection(Of SocketGroupChannel)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketGroupChannel
    name: SocketGroupChannel
    nameWithType: SocketGroupChannel
    fullName: Discord.WebSocket.SocketGroupChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketGroupChannel
    name: SocketGroupChannel
    nameWithType: SocketGroupChannel
    fullName: Discord.WebSocket.SocketGroupChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.BaseSocketClient.VoiceRegions
  commentId: P:Discord.WebSocket.BaseSocketClient.VoiceRegions
  parent: Discord.WebSocket.BaseSocketClient
  name: VoiceRegions
  nameWithType: BaseSocketClient.VoiceRegions
  fullName: Discord.WebSocket.BaseSocketClient.VoiceRegions
- uid: Discord.WebSocket.DiscordSocketClient.VoiceRegions*
  commentId: Overload:Discord.WebSocket.DiscordSocketClient.VoiceRegions
  name: VoiceRegions
  nameWithType: DiscordSocketClient.VoiceRegions
  fullName: Discord.WebSocket.DiscordSocketClient.VoiceRegions
- uid: IReadOnlyCollection{Discord.Rest.RestVoiceRegion}
  commentId: '!:IReadOnlyCollection{Discord.Rest.RestVoiceRegion}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<RestVoiceRegion>
  nameWithType: IReadOnlyCollection<RestVoiceRegion>
  fullName: IReadOnlyCollection<Discord.Rest.RestVoiceRegion>
  nameWithType.vb: IReadOnlyCollection(Of RestVoiceRegion)
  fullName.vb: IReadOnlyCollection(Of Discord.Rest.RestVoiceRegion)
  name.vb: IReadOnlyCollection(Of RestVoiceRegion)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestVoiceRegion
    name: RestVoiceRegion
    nameWithType: RestVoiceRegion
    fullName: Discord.Rest.RestVoiceRegion
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestVoiceRegion
    name: RestVoiceRegion
    nameWithType: RestVoiceRegion
    fullName: Discord.Rest.RestVoiceRegion
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.DiscordSocketClient.#ctor*
  commentId: Overload:Discord.WebSocket.DiscordSocketClient.#ctor
  name: DiscordSocketClient
  nameWithType: DiscordSocketClient.DiscordSocketClient
  fullName: Discord.WebSocket.DiscordSocketClient.DiscordSocketClient
- uid: Discord.WebSocket.DiscordSocketConfig
  commentId: T:Discord.WebSocket.DiscordSocketConfig
  parent: Discord.WebSocket
  name: DiscordSocketConfig
  nameWithType: DiscordSocketConfig
  fullName: Discord.WebSocket.DiscordSocketConfig
- uid: Discord.WebSocket.BaseSocketClient.StartAsync
  commentId: M:Discord.WebSocket.BaseSocketClient.StartAsync
  parent: Discord.WebSocket.BaseSocketClient
  name: StartAsync()
  nameWithType: BaseSocketClient.StartAsync()
  fullName: Discord.WebSocket.BaseSocketClient.StartAsync()
  spec.csharp:
  - uid: Discord.WebSocket.BaseSocketClient.StartAsync
    name: StartAsync
    nameWithType: BaseSocketClient.StartAsync
    fullName: Discord.WebSocket.BaseSocketClient.StartAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.BaseSocketClient.StartAsync
    name: StartAsync
    nameWithType: BaseSocketClient.StartAsync
    fullName: Discord.WebSocket.BaseSocketClient.StartAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.DiscordSocketClient.StartAsync*
  commentId: Overload:Discord.WebSocket.DiscordSocketClient.StartAsync
  name: StartAsync
  nameWithType: DiscordSocketClient.StartAsync
  fullName: Discord.WebSocket.DiscordSocketClient.StartAsync
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Discord.WebSocket.BaseSocketClient.StopAsync
  commentId: M:Discord.WebSocket.BaseSocketClient.StopAsync
  parent: Discord.WebSocket.BaseSocketClient
  name: StopAsync()
  nameWithType: BaseSocketClient.StopAsync()
  fullName: Discord.WebSocket.BaseSocketClient.StopAsync()
  spec.csharp:
  - uid: Discord.WebSocket.BaseSocketClient.StopAsync
    name: StopAsync
    nameWithType: BaseSocketClient.StopAsync
    fullName: Discord.WebSocket.BaseSocketClient.StopAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.BaseSocketClient.StopAsync
    name: StopAsync
    nameWithType: BaseSocketClient.StopAsync
    fullName: Discord.WebSocket.BaseSocketClient.StopAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.DiscordSocketClient.StopAsync*
  commentId: Overload:Discord.WebSocket.DiscordSocketClient.StopAsync
  name: StopAsync
  nameWithType: DiscordSocketClient.StopAsync
  fullName: Discord.WebSocket.DiscordSocketClient.StopAsync
- uid: Discord.WebSocket.BaseSocketClient.GetApplicationInfoAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.BaseSocketClient.GetApplicationInfoAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.BaseSocketClient
  name: GetApplicationInfoAsync(RequestOptions)
  nameWithType: BaseSocketClient.GetApplicationInfoAsync(RequestOptions)
  fullName: Discord.WebSocket.BaseSocketClient.GetApplicationInfoAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.BaseSocketClient.GetApplicationInfoAsync(Discord.RequestOptions)
    name: GetApplicationInfoAsync
    nameWithType: BaseSocketClient.GetApplicationInfoAsync
    fullName: Discord.WebSocket.BaseSocketClient.GetApplicationInfoAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.BaseSocketClient.GetApplicationInfoAsync(Discord.RequestOptions)
    name: GetApplicationInfoAsync
    nameWithType: BaseSocketClient.GetApplicationInfoAsync
    fullName: Discord.WebSocket.BaseSocketClient.GetApplicationInfoAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.DiscordSocketClient.GetApplicationInfoAsync*
  commentId: Overload:Discord.WebSocket.DiscordSocketClient.GetApplicationInfoAsync
  name: GetApplicationInfoAsync
  nameWithType: DiscordSocketClient.GetApplicationInfoAsync
  fullName: Discord.WebSocket.DiscordSocketClient.GetApplicationInfoAsync
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: Task{Discord.Rest.RestApplication}
  commentId: '!:Task{Discord.Rest.RestApplication}'
  definition: Task`1
  name: Task<RestApplication>
  nameWithType: Task<RestApplication>
  fullName: Task<Discord.Rest.RestApplication>
  nameWithType.vb: Task(Of RestApplication)
  fullName.vb: Task(Of Discord.Rest.RestApplication)
  name.vb: Task(Of RestApplication)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestApplication
    name: RestApplication
    nameWithType: RestApplication
    fullName: Discord.Rest.RestApplication
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestApplication
    name: RestApplication
    nameWithType: RestApplication
    fullName: Discord.Rest.RestApplication
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.BaseSocketClient.GetGuild(System.UInt64)
  commentId: M:Discord.WebSocket.BaseSocketClient.GetGuild(System.UInt64)
  parent: Discord.WebSocket.BaseSocketClient
  isExternal: true
  name: GetGuild(UInt64)
  nameWithType: BaseSocketClient.GetGuild(UInt64)
  fullName: Discord.WebSocket.BaseSocketClient.GetGuild(System.UInt64)
  spec.csharp:
  - uid: Discord.WebSocket.BaseSocketClient.GetGuild(System.UInt64)
    name: GetGuild
    nameWithType: BaseSocketClient.GetGuild
    fullName: Discord.WebSocket.BaseSocketClient.GetGuild
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.BaseSocketClient.GetGuild(System.UInt64)
    name: GetGuild
    nameWithType: BaseSocketClient.GetGuild
    fullName: Discord.WebSocket.BaseSocketClient.GetGuild
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.DiscordSocketClient.GetGuild*
  commentId: Overload:Discord.WebSocket.DiscordSocketClient.GetGuild
  name: GetGuild
  nameWithType: DiscordSocketClient.GetGuild
  fullName: Discord.WebSocket.DiscordSocketClient.GetGuild
- uid: System.UInt64
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Discord.WebSocket.SocketGuild
  commentId: T:Discord.WebSocket.SocketGuild
  parent: Discord.WebSocket
  name: SocketGuild
  nameWithType: SocketGuild
  fullName: Discord.WebSocket.SocketGuild
- uid: Discord.WebSocket.BaseSocketClient.GetChannel(System.UInt64)
  commentId: M:Discord.WebSocket.BaseSocketClient.GetChannel(System.UInt64)
  parent: Discord.WebSocket.BaseSocketClient
  isExternal: true
  name: GetChannel(UInt64)
  nameWithType: BaseSocketClient.GetChannel(UInt64)
  fullName: Discord.WebSocket.BaseSocketClient.GetChannel(System.UInt64)
  spec.csharp:
  - uid: Discord.WebSocket.BaseSocketClient.GetChannel(System.UInt64)
    name: GetChannel
    nameWithType: BaseSocketClient.GetChannel
    fullName: Discord.WebSocket.BaseSocketClient.GetChannel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.BaseSocketClient.GetChannel(System.UInt64)
    name: GetChannel
    nameWithType: BaseSocketClient.GetChannel
    fullName: Discord.WebSocket.BaseSocketClient.GetChannel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.DiscordSocketClient.GetChannel*
  commentId: Overload:Discord.WebSocket.DiscordSocketClient.GetChannel
  name: GetChannel
  nameWithType: DiscordSocketClient.GetChannel
  fullName: Discord.WebSocket.DiscordSocketClient.GetChannel
- uid: Discord.WebSocket.SocketChannel
  commentId: T:Discord.WebSocket.SocketChannel
  parent: Discord.WebSocket
  name: SocketChannel
  nameWithType: SocketChannel
  fullName: Discord.WebSocket.SocketChannel
- uid: Discord.WebSocket.BaseSocketClient.GetUser(System.UInt64)
  commentId: M:Discord.WebSocket.BaseSocketClient.GetUser(System.UInt64)
  parent: Discord.WebSocket.BaseSocketClient
  isExternal: true
  name: GetUser(UInt64)
  nameWithType: BaseSocketClient.GetUser(UInt64)
  fullName: Discord.WebSocket.BaseSocketClient.GetUser(System.UInt64)
  spec.csharp:
  - uid: Discord.WebSocket.BaseSocketClient.GetUser(System.UInt64)
    name: GetUser
    nameWithType: BaseSocketClient.GetUser
    fullName: Discord.WebSocket.BaseSocketClient.GetUser
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.BaseSocketClient.GetUser(System.UInt64)
    name: GetUser
    nameWithType: BaseSocketClient.GetUser
    fullName: Discord.WebSocket.BaseSocketClient.GetUser
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.DiscordSocketClient.GetUser*
  commentId: Overload:Discord.WebSocket.DiscordSocketClient.GetUser
  name: GetUser
  nameWithType: DiscordSocketClient.GetUser
  fullName: Discord.WebSocket.DiscordSocketClient.GetUser
- uid: Discord.WebSocket.SocketUser
  commentId: T:Discord.WebSocket.SocketUser
  parent: Discord.WebSocket
  name: SocketUser
  nameWithType: SocketUser
  fullName: Discord.WebSocket.SocketUser
- uid: Discord.WebSocket.BaseSocketClient.GetUser(System.String,System.String)
  commentId: M:Discord.WebSocket.BaseSocketClient.GetUser(System.String,System.String)
  parent: Discord.WebSocket.BaseSocketClient
  isExternal: true
  name: GetUser(String, String)
  nameWithType: BaseSocketClient.GetUser(String, String)
  fullName: Discord.WebSocket.BaseSocketClient.GetUser(System.String, System.String)
  spec.csharp:
  - uid: Discord.WebSocket.BaseSocketClient.GetUser(System.String,System.String)
    name: GetUser
    nameWithType: BaseSocketClient.GetUser
    fullName: Discord.WebSocket.BaseSocketClient.GetUser
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.BaseSocketClient.GetUser(System.String,System.String)
    name: GetUser
    nameWithType: BaseSocketClient.GetUser
    fullName: Discord.WebSocket.BaseSocketClient.GetUser
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.WebSocket.BaseSocketClient.GetVoiceRegion(System.String)
  commentId: M:Discord.WebSocket.BaseSocketClient.GetVoiceRegion(System.String)
  parent: Discord.WebSocket.BaseSocketClient
  isExternal: true
  name: GetVoiceRegion(String)
  nameWithType: BaseSocketClient.GetVoiceRegion(String)
  fullName: Discord.WebSocket.BaseSocketClient.GetVoiceRegion(System.String)
  spec.csharp:
  - uid: Discord.WebSocket.BaseSocketClient.GetVoiceRegion(System.String)
    name: GetVoiceRegion
    nameWithType: BaseSocketClient.GetVoiceRegion
    fullName: Discord.WebSocket.BaseSocketClient.GetVoiceRegion
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.BaseSocketClient.GetVoiceRegion(System.String)
    name: GetVoiceRegion
    nameWithType: BaseSocketClient.GetVoiceRegion
    fullName: Discord.WebSocket.BaseSocketClient.GetVoiceRegion
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.DiscordSocketClient.GetVoiceRegion*
  commentId: Overload:Discord.WebSocket.DiscordSocketClient.GetVoiceRegion
  name: GetVoiceRegion
  nameWithType: DiscordSocketClient.GetVoiceRegion
  fullName: Discord.WebSocket.DiscordSocketClient.GetVoiceRegion
- uid: Discord.Rest.RestVoiceRegion
  commentId: T:Discord.Rest.RestVoiceRegion
  parent: Discord.Rest
  name: RestVoiceRegion
  nameWithType: RestVoiceRegion
  fullName: Discord.Rest.RestVoiceRegion
- uid: Discord.WebSocket.BaseSocketClient.DownloadUsersAsync(IEnumerable{Discord.IGuild})
  commentId: M:Discord.WebSocket.BaseSocketClient.DownloadUsersAsync(IEnumerable{Discord.IGuild})
  parent: Discord.WebSocket.BaseSocketClient
  isExternal: true
  name: DownloadUsersAsync(IEnumerable<IGuild>)
  nameWithType: BaseSocketClient.DownloadUsersAsync(IEnumerable<IGuild>)
  fullName: Discord.WebSocket.BaseSocketClient.DownloadUsersAsync(IEnumerable<Discord.IGuild>)
  nameWithType.vb: BaseSocketClient.DownloadUsersAsync(IEnumerable(Of IGuild))
  fullName.vb: Discord.WebSocket.BaseSocketClient.DownloadUsersAsync(IEnumerable(Of Discord.IGuild))
  name.vb: DownloadUsersAsync(IEnumerable(Of IGuild))
  spec.csharp:
  - uid: Discord.WebSocket.BaseSocketClient.DownloadUsersAsync(IEnumerable{Discord.IGuild})
    name: DownloadUsersAsync
    nameWithType: BaseSocketClient.DownloadUsersAsync
    fullName: Discord.WebSocket.BaseSocketClient.DownloadUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IGuild
    name: IGuild
    nameWithType: IGuild
    fullName: Discord.IGuild
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.BaseSocketClient.DownloadUsersAsync(IEnumerable{Discord.IGuild})
    name: DownloadUsersAsync
    nameWithType: BaseSocketClient.DownloadUsersAsync
    fullName: Discord.WebSocket.BaseSocketClient.DownloadUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IGuild
    name: IGuild
    nameWithType: IGuild
    fullName: Discord.IGuild
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.DiscordSocketClient.DownloadUsersAsync*
  commentId: Overload:Discord.WebSocket.DiscordSocketClient.DownloadUsersAsync
  name: DownloadUsersAsync
  nameWithType: DiscordSocketClient.DownloadUsersAsync
  fullName: Discord.WebSocket.DiscordSocketClient.DownloadUsersAsync
- uid: IEnumerable{Discord.IGuild}
  commentId: '!:IEnumerable{Discord.IGuild}'
  definition: IEnumerable`1
  name: IEnumerable<IGuild>
  nameWithType: IEnumerable<IGuild>
  fullName: IEnumerable<Discord.IGuild>
  nameWithType.vb: IEnumerable(Of IGuild)
  fullName.vb: IEnumerable(Of Discord.IGuild)
  name.vb: IEnumerable(Of IGuild)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IGuild
    name: IGuild
    nameWithType: IGuild
    fullName: Discord.IGuild
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IGuild
    name: IGuild
    nameWithType: IGuild
    fullName: Discord.IGuild
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.BaseSocketClient.SetStatusAsync(Discord.UserStatus)
  commentId: M:Discord.WebSocket.BaseSocketClient.SetStatusAsync(Discord.UserStatus)
  parent: Discord.WebSocket.BaseSocketClient
  name: SetStatusAsync(UserStatus)
  nameWithType: BaseSocketClient.SetStatusAsync(UserStatus)
  fullName: Discord.WebSocket.BaseSocketClient.SetStatusAsync(Discord.UserStatus)
  spec.csharp:
  - uid: Discord.WebSocket.BaseSocketClient.SetStatusAsync(Discord.UserStatus)
    name: SetStatusAsync
    nameWithType: BaseSocketClient.SetStatusAsync
    fullName: Discord.WebSocket.BaseSocketClient.SetStatusAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.UserStatus
    name: UserStatus
    nameWithType: UserStatus
    fullName: Discord.UserStatus
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.BaseSocketClient.SetStatusAsync(Discord.UserStatus)
    name: SetStatusAsync
    nameWithType: BaseSocketClient.SetStatusAsync
    fullName: Discord.WebSocket.BaseSocketClient.SetStatusAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.UserStatus
    name: UserStatus
    nameWithType: UserStatus
    fullName: Discord.UserStatus
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.DiscordSocketClient.SetStatusAsync*
  commentId: Overload:Discord.WebSocket.DiscordSocketClient.SetStatusAsync
  name: SetStatusAsync
  nameWithType: DiscordSocketClient.SetStatusAsync
  fullName: Discord.WebSocket.DiscordSocketClient.SetStatusAsync
- uid: Discord.WebSocket.BaseSocketClient.SetGameAsync(System.String,System.String,Discord.ActivityType)
  commentId: M:Discord.WebSocket.BaseSocketClient.SetGameAsync(System.String,System.String,Discord.ActivityType)
  parent: Discord.WebSocket.BaseSocketClient
  isExternal: true
  name: SetGameAsync(String, String, ActivityType)
  nameWithType: BaseSocketClient.SetGameAsync(String, String, ActivityType)
  fullName: Discord.WebSocket.BaseSocketClient.SetGameAsync(System.String, System.String, Discord.ActivityType)
  spec.csharp:
  - uid: Discord.WebSocket.BaseSocketClient.SetGameAsync(System.String,System.String,Discord.ActivityType)
    name: SetGameAsync
    nameWithType: BaseSocketClient.SetGameAsync
    fullName: Discord.WebSocket.BaseSocketClient.SetGameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.ActivityType
    name: ActivityType
    nameWithType: ActivityType
    fullName: Discord.ActivityType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.BaseSocketClient.SetGameAsync(System.String,System.String,Discord.ActivityType)
    name: SetGameAsync
    nameWithType: BaseSocketClient.SetGameAsync
    fullName: Discord.WebSocket.BaseSocketClient.SetGameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.ActivityType
    name: ActivityType
    nameWithType: ActivityType
    fullName: Discord.ActivityType
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.DiscordSocketClient.SetGameAsync*
  commentId: Overload:Discord.WebSocket.DiscordSocketClient.SetGameAsync
  name: SetGameAsync
  nameWithType: DiscordSocketClient.SetGameAsync
  fullName: Discord.WebSocket.DiscordSocketClient.SetGameAsync
- uid: Discord.ActivityType
  commentId: T:Discord.ActivityType
  parent: Discord
  name: ActivityType
  nameWithType: ActivityType
  fullName: Discord.ActivityType
- uid: Discord.WebSocket.BaseSocketClient.SetActivityAsync(Discord.IActivity)
  commentId: M:Discord.WebSocket.BaseSocketClient.SetActivityAsync(Discord.IActivity)
  parent: Discord.WebSocket.BaseSocketClient
  name: SetActivityAsync(IActivity)
  nameWithType: BaseSocketClient.SetActivityAsync(IActivity)
  fullName: Discord.WebSocket.BaseSocketClient.SetActivityAsync(Discord.IActivity)
  spec.csharp:
  - uid: Discord.WebSocket.BaseSocketClient.SetActivityAsync(Discord.IActivity)
    name: SetActivityAsync
    nameWithType: BaseSocketClient.SetActivityAsync
    fullName: Discord.WebSocket.BaseSocketClient.SetActivityAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IActivity
    name: IActivity
    nameWithType: IActivity
    fullName: Discord.IActivity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.BaseSocketClient.SetActivityAsync(Discord.IActivity)
    name: SetActivityAsync
    nameWithType: BaseSocketClient.SetActivityAsync
    fullName: Discord.WebSocket.BaseSocketClient.SetActivityAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IActivity
    name: IActivity
    nameWithType: IActivity
    fullName: Discord.IActivity
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.DiscordSocketClient.SetActivityAsync*
  commentId: Overload:Discord.WebSocket.DiscordSocketClient.SetActivityAsync
  name: SetActivityAsync
  nameWithType: DiscordSocketClient.SetActivityAsync
  fullName: Discord.WebSocket.DiscordSocketClient.SetActivityAsync
- uid: Func{Task}
  commentId: '!:Func{Task}'
  definition: Func`1
  name: Func<Task>
  nameWithType: Func<Task>
  fullName: Func<Task>
  nameWithType.vb: Func(Of Task)
  fullName.vb: Func(Of Task)
  name.vb: Func(Of Task)
  spec.csharp:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`1
  isExternal: true
  name: Func<>
  nameWithType: Func<>
  fullName: Func<>
  nameWithType.vb: Func(Of )
  fullName.vb: Func(Of )
  name.vb: Func(Of )
  spec.csharp:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{Exception,Task}
  commentId: '!:Func{Exception,Task}'
  definition: Func`2
  name: Func<Exception, Task>
  nameWithType: Func<Exception, Task>
  fullName: Func<Exception, Task>
  nameWithType.vb: Func(Of Exception, Task)
  fullName.vb: Func(Of Exception, Task)
  name.vb: Func(Of Exception, Task)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{System.Int32,System.Int32,Task}
  commentId: '!:Func{System.Int32,System.Int32,Task}'
  definition: Func`3
  name: Func<Int32, Int32, Task>
  nameWithType: Func<Int32, Int32, Task>
  fullName: Func<System.Int32, System.Int32, Task>
  nameWithType.vb: Func(Of Int32, Int32, Task)
  fullName.vb: Func(Of System.Int32, System.Int32, Task)
  name.vb: Func(Of Int32, Int32, Task)
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`3
  isExternal: true
  name: Func<, , >
  nameWithType: Func<, , >
  fullName: Func<, , >
  nameWithType.vb: Func(Of , , )
  fullName.vb: Func(Of , , )
  name.vb: Func(Of , , )
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
