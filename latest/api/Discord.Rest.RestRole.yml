### YamlMime:ManagedReference
items:
- uid: Discord.Rest.RestRole
  commentId: T:Discord.Rest.RestRole
  id: RestRole
  parent: Discord.Rest
  children:
  - Discord.Rest.RestRole.Color
  - Discord.Rest.RestRole.CompareTo(Discord.IRole)
  - Discord.Rest.RestRole.CreatedAt
  - Discord.Rest.RestRole.DeleteAsync(Discord.RequestOptions)
  - Discord.Rest.RestRole.Discord#IRole#Guild
  - Discord.Rest.RestRole.IsEveryone
  - Discord.Rest.RestRole.IsHoisted
  - Discord.Rest.RestRole.IsManaged
  - Discord.Rest.RestRole.IsMentionable
  - Discord.Rest.RestRole.Mention
  - Discord.Rest.RestRole.ModifyAsync(System.Action{Discord.RoleProperties},Discord.RequestOptions)
  - Discord.Rest.RestRole.Name
  - Discord.Rest.RestRole.Permissions
  - Discord.Rest.RestRole.Position
  - Discord.Rest.RestRole.ToString
  langs:
  - csharp
  - vb
  name: RestRole
  nameWithType: RestRole
  fullName: Discord.Rest.RestRole
  type: Class
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Roles/RestRole.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RestRole
    path: ../src/Discord.Net.Rest/Entities/Roles/RestRole.cs
    startLine: 10
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nRepresents a REST-based role.\n"
  example: []
  syntax:
    content: 'public class RestRole : RestEntity<ulong>, IRole, ISnowflakeEntity, IEntity<ulong>, IDeletable, IMentionable, IComparable<IRole>'
    content.vb: >-
      Public Class RestRole
          Inherits RestEntity(Of ULong)
          Implements IRole, ISnowflakeEntity, IEntity(Of ULong), IDeletable, IMentionable, IComparable(Of IRole)
  inheritance:
  - System.Object
  - Discord.Rest.RestEntity{System.UInt64}
  implements:
  - Discord.IRole
  - Discord.ISnowflakeEntity
  - Discord.IEntity{System.UInt64}
  - Discord.IDeletable
  - Discord.IMentionable
  - System.IComparable{Discord.IRole}
  inheritedMembers:
  - Discord.Rest.RestEntity{System.UInt64}.Id
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.Rest.RestRole.Color
  commentId: P:Discord.Rest.RestRole.Color
  id: Color
  parent: Discord.Rest.RestRole
  langs:
  - csharp
  - vb
  name: Color
  nameWithType: RestRole.Color
  fullName: Discord.Rest.RestRole.Color
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Roles/RestRole.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Color
    path: ../src/Discord.Net.Rest/Entities/Roles/RestRole.cs
    startLine: 15
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the color given to users of this role.\n"
  example: []
  syntax:
    content: public Color Color { get; }
    parameters: []
    return:
      type: Discord.Color
      description: "\nA <xref href=\"Discord.IRole.Color\" data-throw-if-not-resolved=\"false\"></xref> struct representing the color of this role.\n"
    content.vb: Public ReadOnly Property Color As Color
  overload: Discord.Rest.RestRole.Color*
  implements:
  - Discord.IRole.Color
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestRole.IsHoisted
  commentId: P:Discord.Rest.RestRole.IsHoisted
  id: IsHoisted
  parent: Discord.Rest.RestRole
  langs:
  - csharp
  - vb
  name: IsHoisted
  nameWithType: RestRole.IsHoisted
  fullName: Discord.Rest.RestRole.IsHoisted
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Roles/RestRole.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsHoisted
    path: ../src/Discord.Net.Rest/Entities/Roles/RestRole.cs
    startLine: 17
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a value that indicates whether the role can be separated in the user list.\n"
  example: []
  syntax:
    content: public bool IsHoisted { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if users of this role are separated in the user list; otherwise <code>false</code>.\n"
    content.vb: Public ReadOnly Property IsHoisted As Boolean
  overload: Discord.Rest.RestRole.IsHoisted*
  implements:
  - Discord.IRole.IsHoisted
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestRole.IsManaged
  commentId: P:Discord.Rest.RestRole.IsManaged
  id: IsManaged
  parent: Discord.Rest.RestRole
  langs:
  - csharp
  - vb
  name: IsManaged
  nameWithType: RestRole.IsManaged
  fullName: Discord.Rest.RestRole.IsManaged
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Roles/RestRole.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsManaged
    path: ../src/Discord.Net.Rest/Entities/Roles/RestRole.cs
    startLine: 19
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a value that indicates whether the role is managed by Discord.\n"
  example: []
  syntax:
    content: public bool IsManaged { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this role is automatically managed by Discord; otherwise <code>false</code>.\n"
    content.vb: Public ReadOnly Property IsManaged As Boolean
  overload: Discord.Rest.RestRole.IsManaged*
  implements:
  - Discord.IRole.IsManaged
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestRole.IsMentionable
  commentId: P:Discord.Rest.RestRole.IsMentionable
  id: IsMentionable
  parent: Discord.Rest.RestRole
  langs:
  - csharp
  - vb
  name: IsMentionable
  nameWithType: RestRole.IsMentionable
  fullName: Discord.Rest.RestRole.IsMentionable
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Roles/RestRole.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsMentionable
    path: ../src/Discord.Net.Rest/Entities/Roles/RestRole.cs
    startLine: 21
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a value that indicates whether the role is mentionable.\n"
  example: []
  syntax:
    content: public bool IsMentionable { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this role may be mentioned in messages; otherwise <code>false</code>.\n"
    content.vb: Public ReadOnly Property IsMentionable As Boolean
  overload: Discord.Rest.RestRole.IsMentionable*
  implements:
  - Discord.IRole.IsMentionable
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestRole.Name
  commentId: P:Discord.Rest.RestRole.Name
  id: Name
  parent: Discord.Rest.RestRole
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: RestRole.Name
  fullName: Discord.Rest.RestRole.Name
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Roles/RestRole.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Name
    path: ../src/Discord.Net.Rest/Entities/Roles/RestRole.cs
    startLine: 23
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the name of this role.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA string containing the name of this role.\n"
    content.vb: Public ReadOnly Property Name As String
  overload: Discord.Rest.RestRole.Name*
  implements:
  - Discord.IRole.Name
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestRole.Permissions
  commentId: P:Discord.Rest.RestRole.Permissions
  id: Permissions
  parent: Discord.Rest.RestRole
  langs:
  - csharp
  - vb
  name: Permissions
  nameWithType: RestRole.Permissions
  fullName: Discord.Rest.RestRole.Permissions
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Roles/RestRole.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Permissions
    path: ../src/Discord.Net.Rest/Entities/Roles/RestRole.cs
    startLine: 25
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the permissions granted to members of this role.\n"
  example: []
  syntax:
    content: public GuildPermissions Permissions { get; }
    parameters: []
    return:
      type: Discord.GuildPermissions
      description: "\nA <xref href=\"Discord.GuildPermissions\" data-throw-if-not-resolved=\"false\"></xref> struct that this role possesses.\n"
    content.vb: Public ReadOnly Property Permissions As GuildPermissions
  overload: Discord.Rest.RestRole.Permissions*
  implements:
  - Discord.IRole.Permissions
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestRole.Position
  commentId: P:Discord.Rest.RestRole.Position
  id: Position
  parent: Discord.Rest.RestRole
  langs:
  - csharp
  - vb
  name: Position
  nameWithType: RestRole.Position
  fullName: Discord.Rest.RestRole.Position
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Roles/RestRole.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Position
    path: ../src/Discord.Net.Rest/Entities/Roles/RestRole.cs
    startLine: 27
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets this role&apos;s position relative to other roles in the same guild.\n"
  example: []
  syntax:
    content: public int Position { get; }
    parameters: []
    return:
      type: System.Int32
      description: "\nAn <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> representing the position of the role in the role list of the guild.\n"
    content.vb: Public ReadOnly Property Position As Integer
  overload: Discord.Rest.RestRole.Position*
  implements:
  - Discord.IRole.Position
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestRole.CreatedAt
  commentId: P:Discord.Rest.RestRole.CreatedAt
  id: CreatedAt
  parent: Discord.Rest.RestRole
  langs:
  - csharp
  - vb
  name: CreatedAt
  nameWithType: RestRole.CreatedAt
  fullName: Discord.Rest.RestRole.CreatedAt
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Roles/RestRole.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreatedAt
    path: ../src/Discord.Net.Rest/Entities/Roles/RestRole.cs
    startLine: 30
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets when the snowflake was created.\n"
  example: []
  syntax:
    content: public DateTimeOffset CreatedAt { get; }
    parameters: []
    return:
      type: System.DateTimeOffset
      description: "\nA <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> representing when the entity was first created.\n"
    content.vb: Public ReadOnly Property CreatedAt As DateTimeOffset
  overload: Discord.Rest.RestRole.CreatedAt*
  implements:
  - Discord.ISnowflakeEntity.CreatedAt
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestRole.IsEveryone
  commentId: P:Discord.Rest.RestRole.IsEveryone
  id: IsEveryone
  parent: Discord.Rest.RestRole
  langs:
  - csharp
  - vb
  name: IsEveryone
  nameWithType: RestRole.IsEveryone
  fullName: Discord.Rest.RestRole.IsEveryone
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Roles/RestRole.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsEveryone
    path: ../src/Discord.Net.Rest/Entities/Roles/RestRole.cs
    startLine: 34
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets if this role is the @everyone role of the guild or not.\n"
  example: []
  syntax:
    content: public bool IsEveryone { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsEveryone As Boolean
  overload: Discord.Rest.RestRole.IsEveryone*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestRole.Mention
  commentId: P:Discord.Rest.RestRole.Mention
  id: Mention
  parent: Discord.Rest.RestRole
  langs:
  - csharp
  - vb
  name: Mention
  nameWithType: RestRole.Mention
  fullName: Discord.Rest.RestRole.Mention
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Roles/RestRole.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Mention
    path: ../src/Discord.Net.Rest/Entities/Roles/RestRole.cs
    startLine: 36
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nReturns a special string used to mention this object.\n"
  example: []
  syntax:
    content: public string Mention { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA string that is recognized by Discord as a mention (e.g. &lt;@168693960628371456>).\n"
    content.vb: Public ReadOnly Property Mention As String
  overload: Discord.Rest.RestRole.Mention*
  implements:
  - Discord.IMentionable.Mention
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestRole.ModifyAsync(System.Action{Discord.RoleProperties},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestRole.ModifyAsync(System.Action{Discord.RoleProperties},Discord.RequestOptions)
  id: ModifyAsync(System.Action{Discord.RoleProperties},Discord.RequestOptions)
  parent: Discord.Rest.RestRole
  langs:
  - csharp
  - vb
  name: ModifyAsync(Action<RoleProperties>, RequestOptions)
  nameWithType: RestRole.ModifyAsync(Action<RoleProperties>, RequestOptions)
  fullName: Discord.Rest.RestRole.ModifyAsync(System.Action<Discord.RoleProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Roles/RestRole.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ModifyAsync
    path: ../src/Discord.Net.Rest/Entities/Roles/RestRole.cs
    startLine: 61
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nModifies this role.\n"
  remarks: "\nThis method modifies this role with the specified properties. To see an example of this\nmethod and what properties are available, please refer to <xref href=\"Discord.RoleProperties\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Task ModifyAsync(Action<RoleProperties> func, RequestOptions options = null)
    parameters:
    - id: func
      type: System.Action{Discord.RoleProperties}
      description: A delegate containing the properties to modify the role with.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous modification operation.\n"
    content.vb: Public Function ModifyAsync(func As Action(Of RoleProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestRole.ModifyAsync*
  implements:
  - Discord.IRole.ModifyAsync(System.Action{Discord.RoleProperties},Discord.RequestOptions)
  nameWithType.vb: RestRole.ModifyAsync(Action(Of RoleProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestRole.ModifyAsync(System.Action(Of Discord.RoleProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of RoleProperties), RequestOptions)
- uid: Discord.Rest.RestRole.DeleteAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestRole.DeleteAsync(Discord.RequestOptions)
  id: DeleteAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestRole
  langs:
  - csharp
  - vb
  name: DeleteAsync(RequestOptions)
  nameWithType: RestRole.DeleteAsync(RequestOptions)
  fullName: Discord.Rest.RestRole.DeleteAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Roles/RestRole.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteAsync
    path: ../src/Discord.Net.Rest/Entities/Roles/RestRole.cs
    startLine: 67
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nDeletes this object and all its children.\n"
  example: []
  syntax:
    content: public Task DeleteAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function DeleteAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestRole.DeleteAsync*
  implements:
  - Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestRole.CompareTo(Discord.IRole)
  commentId: M:Discord.Rest.RestRole.CompareTo(Discord.IRole)
  id: CompareTo(Discord.IRole)
  parent: Discord.Rest.RestRole
  langs:
  - csharp
  - vb
  name: CompareTo(IRole)
  nameWithType: RestRole.CompareTo(IRole)
  fullName: Discord.Rest.RestRole.CompareTo(Discord.IRole)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Roles/RestRole.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CompareTo
    path: ../src/Discord.Net.Rest/Entities/Roles/RestRole.cs
    startLine: 71
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public int CompareTo(IRole role)
    parameters:
    - id: role
      type: Discord.IRole
    return:
      type: System.Int32
    content.vb: Public Function CompareTo(role As IRole) As Integer
  overload: Discord.Rest.RestRole.CompareTo*
  implements:
  - System.IComparable{Discord.IRole}.CompareTo(Discord.IRole)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestRole.ToString
  commentId: M:Discord.Rest.RestRole.ToString
  id: ToString
  parent: Discord.Rest.RestRole
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: RestRole.ToString()
  fullName: Discord.Rest.RestRole.ToString()
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Roles/RestRole.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ToString
    path: ../src/Discord.Net.Rest/Entities/Roles/RestRole.cs
    startLine: 79
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the name of the role.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nA string that is the name of the role.\n"
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Discord.Rest.RestRole.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.Rest.RestRole.Discord#IRole#Guild
  commentId: P:Discord.Rest.RestRole.Discord#IRole#Guild
  id: Discord#IRole#Guild
  isEii: true
  parent: Discord.Rest.RestRole
  langs:
  - csharp
  - vb
  name: IRole.Guild
  nameWithType: RestRole.IRole.Guild
  fullName: Discord.Rest.RestRole.Discord.IRole.Guild
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Roles/RestRole.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IRole.Guild
    path: ../src/Discord.Net.Rest/Entities/Roles/RestRole.cs
    startLine: 84
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the guild that owns this role.\n"
  example: []
  syntax:
    content: IGuild IRole.Guild { get; }
    parameters: []
    return:
      type: Discord.IGuild
      description: "\nA guild representing the parent guild of this role.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IRole.Guild As IGuild Implements IRole.Guild
  overload: Discord.Rest.RestRole.Discord#IRole#Guild*
  implements:
  - Discord.IRole.Guild
  nameWithType.vb: RestRole.Discord.IRole.Guild
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IRole.Guild
references:
- uid: Discord.Rest
  commentId: N:Discord.Rest
  name: Discord.Rest
  nameWithType: Discord.Rest
  fullName: Discord.Rest
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Rest.RestEntity{System.UInt64}
  commentId: T:Discord.Rest.RestEntity{System.UInt64}
  parent: Discord.Rest
  definition: Discord.Rest.RestEntity`1
  name: RestEntity<UInt64>
  nameWithType: RestEntity<UInt64>
  fullName: Discord.Rest.RestEntity<System.UInt64>
  nameWithType.vb: RestEntity(Of UInt64)
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64)
  name.vb: RestEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IRole
  commentId: T:Discord.IRole
  parent: Discord
  name: IRole
  nameWithType: IRole
  fullName: Discord.IRole
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IDeletable
  commentId: T:Discord.IDeletable
  parent: Discord
  name: IDeletable
  nameWithType: IDeletable
  fullName: Discord.IDeletable
- uid: Discord.IMentionable
  commentId: T:Discord.IMentionable
  parent: Discord
  name: IMentionable
  nameWithType: IMentionable
  fullName: Discord.IMentionable
- uid: System.IComparable{Discord.IRole}
  commentId: T:System.IComparable{Discord.IRole}
  parent: System
  definition: System.IComparable`1
  name: IComparable<IRole>
  nameWithType: IComparable<IRole>
  fullName: System.IComparable<Discord.IRole>
  nameWithType.vb: IComparable(Of IRole)
  fullName.vb: System.IComparable(Of Discord.IRole)
  name.vb: IComparable(Of IRole)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestEntity{System.UInt64}.Id
  commentId: P:Discord.Rest.RestEntity{System.UInt64}.Id
  parent: Discord.Rest.RestEntity{System.UInt64}
  definition: Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<UInt64>.Id
  fullName: Discord.Rest.RestEntity<System.UInt64>.Id
  nameWithType.vb: RestEntity(Of UInt64).Id
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64).Id
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Rest.RestEntity`1
  commentId: T:Discord.Rest.RestEntity`1
  name: RestEntity<T>
  nameWithType: RestEntity<T>
  fullName: Discord.Rest.RestEntity<T>
  nameWithType.vb: RestEntity(Of T)
  fullName.vb: Discord.Rest.RestEntity(Of T)
  name.vb: RestEntity(Of T)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestEntity`1.Id
  commentId: P:Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<T>.Id
  fullName: Discord.Rest.RestEntity<T>.Id
  nameWithType.vb: RestEntity(Of T).Id
  fullName.vb: Discord.Rest.RestEntity(Of T).Id
- uid: Discord.Rest.RestRole.Color*
  commentId: Overload:Discord.Rest.RestRole.Color
  name: Color
  nameWithType: RestRole.Color
  fullName: Discord.Rest.RestRole.Color
- uid: Discord.IRole.Color
  commentId: P:Discord.IRole.Color
  parent: Discord.IRole
  name: Color
  nameWithType: IRole.Color
  fullName: Discord.IRole.Color
- uid: Discord.Color
  commentId: T:Discord.Color
  parent: Discord
  name: Color
  nameWithType: Color
  fullName: Discord.Color
- uid: Discord.Rest.RestRole.IsHoisted*
  commentId: Overload:Discord.Rest.RestRole.IsHoisted
  name: IsHoisted
  nameWithType: RestRole.IsHoisted
  fullName: Discord.Rest.RestRole.IsHoisted
- uid: Discord.IRole.IsHoisted
  commentId: P:Discord.IRole.IsHoisted
  parent: Discord.IRole
  name: IsHoisted
  nameWithType: IRole.IsHoisted
  fullName: Discord.IRole.IsHoisted
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.Rest.RestRole.IsManaged*
  commentId: Overload:Discord.Rest.RestRole.IsManaged
  name: IsManaged
  nameWithType: RestRole.IsManaged
  fullName: Discord.Rest.RestRole.IsManaged
- uid: Discord.IRole.IsManaged
  commentId: P:Discord.IRole.IsManaged
  parent: Discord.IRole
  name: IsManaged
  nameWithType: IRole.IsManaged
  fullName: Discord.IRole.IsManaged
- uid: Discord.Rest.RestRole.IsMentionable*
  commentId: Overload:Discord.Rest.RestRole.IsMentionable
  name: IsMentionable
  nameWithType: RestRole.IsMentionable
  fullName: Discord.Rest.RestRole.IsMentionable
- uid: Discord.IRole.IsMentionable
  commentId: P:Discord.IRole.IsMentionable
  parent: Discord.IRole
  name: IsMentionable
  nameWithType: IRole.IsMentionable
  fullName: Discord.IRole.IsMentionable
- uid: Discord.Rest.RestRole.Name*
  commentId: Overload:Discord.Rest.RestRole.Name
  name: Name
  nameWithType: RestRole.Name
  fullName: Discord.Rest.RestRole.Name
- uid: Discord.IRole.Name
  commentId: P:Discord.IRole.Name
  parent: Discord.IRole
  name: Name
  nameWithType: IRole.Name
  fullName: Discord.IRole.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.Rest.RestRole.Permissions*
  commentId: Overload:Discord.Rest.RestRole.Permissions
  name: Permissions
  nameWithType: RestRole.Permissions
  fullName: Discord.Rest.RestRole.Permissions
- uid: Discord.IRole.Permissions
  commentId: P:Discord.IRole.Permissions
  parent: Discord.IRole
  name: Permissions
  nameWithType: IRole.Permissions
  fullName: Discord.IRole.Permissions
- uid: Discord.GuildPermissions
  commentId: T:Discord.GuildPermissions
  parent: Discord
  name: GuildPermissions
  nameWithType: GuildPermissions
  fullName: Discord.GuildPermissions
- uid: Discord.Rest.RestRole.Position*
  commentId: Overload:Discord.Rest.RestRole.Position
  name: Position
  nameWithType: RestRole.Position
  fullName: Discord.Rest.RestRole.Position
- uid: Discord.IRole.Position
  commentId: P:Discord.IRole.Position
  parent: Discord.IRole
  name: Position
  nameWithType: IRole.Position
  fullName: Discord.IRole.Position
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Discord.Rest.RestRole.CreatedAt*
  commentId: Overload:Discord.Rest.RestRole.CreatedAt
  name: CreatedAt
  nameWithType: RestRole.CreatedAt
  fullName: Discord.Rest.RestRole.CreatedAt
- uid: Discord.ISnowflakeEntity.CreatedAt
  commentId: P:Discord.ISnowflakeEntity.CreatedAt
  parent: Discord.ISnowflakeEntity
  name: CreatedAt
  nameWithType: ISnowflakeEntity.CreatedAt
  fullName: Discord.ISnowflakeEntity.CreatedAt
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: Discord.Rest.RestRole.IsEveryone*
  commentId: Overload:Discord.Rest.RestRole.IsEveryone
  name: IsEveryone
  nameWithType: RestRole.IsEveryone
  fullName: Discord.Rest.RestRole.IsEveryone
- uid: Discord.Rest.RestRole.Mention*
  commentId: Overload:Discord.Rest.RestRole.Mention
  name: Mention
  nameWithType: RestRole.Mention
  fullName: Discord.Rest.RestRole.Mention
- uid: Discord.IMentionable.Mention
  commentId: P:Discord.IMentionable.Mention
  parent: Discord.IMentionable
  name: Mention
  nameWithType: IMentionable.Mention
  fullName: Discord.IMentionable.Mention
- uid: Discord.Rest.RestRole.ModifyAsync*
  commentId: Overload:Discord.Rest.RestRole.ModifyAsync
  name: ModifyAsync
  nameWithType: RestRole.ModifyAsync
  fullName: Discord.Rest.RestRole.ModifyAsync
- uid: Discord.IRole.ModifyAsync(System.Action{Discord.RoleProperties},Discord.RequestOptions)
  commentId: M:Discord.IRole.ModifyAsync(System.Action{Discord.RoleProperties},Discord.RequestOptions)
  parent: Discord.IRole
  isExternal: true
  name: ModifyAsync(Action<RoleProperties>, RequestOptions)
  nameWithType: IRole.ModifyAsync(Action<RoleProperties>, RequestOptions)
  fullName: Discord.IRole.ModifyAsync(System.Action<Discord.RoleProperties>, Discord.RequestOptions)
  nameWithType.vb: IRole.ModifyAsync(Action(Of RoleProperties), RequestOptions)
  fullName.vb: Discord.IRole.ModifyAsync(System.Action(Of Discord.RoleProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of RoleProperties), RequestOptions)
  spec.csharp:
  - uid: Discord.IRole.ModifyAsync(System.Action{Discord.RoleProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: IRole.ModifyAsync
    fullName: Discord.IRole.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.RoleProperties
    name: RoleProperties
    nameWithType: RoleProperties
    fullName: Discord.RoleProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IRole.ModifyAsync(System.Action{Discord.RoleProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: IRole.ModifyAsync
    fullName: Discord.IRole.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.RoleProperties
    name: RoleProperties
    nameWithType: RoleProperties
    fullName: Discord.RoleProperties
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{Discord.RoleProperties}
  commentId: T:System.Action{Discord.RoleProperties}
  parent: System
  definition: System.Action`1
  name: Action<RoleProperties>
  nameWithType: Action<RoleProperties>
  fullName: System.Action<Discord.RoleProperties>
  nameWithType.vb: Action(Of RoleProperties)
  fullName.vb: System.Action(Of Discord.RoleProperties)
  name.vb: Action(Of RoleProperties)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.RoleProperties
    name: RoleProperties
    nameWithType: RoleProperties
    fullName: Discord.RoleProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.RoleProperties
    name: RoleProperties
    nameWithType: RoleProperties
    fullName: Discord.RoleProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Discord.Rest.RestRole.DeleteAsync*
  commentId: Overload:Discord.Rest.RestRole.DeleteAsync
  name: DeleteAsync
  nameWithType: RestRole.DeleteAsync
  fullName: Discord.Rest.RestRole.DeleteAsync
- uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  commentId: M:Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  parent: Discord.IDeletable
  name: DeleteAsync(RequestOptions)
  nameWithType: IDeletable.DeleteAsync(RequestOptions)
  fullName: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: IDeletable.DeleteAsync
    fullName: Discord.IDeletable.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: IDeletable.DeleteAsync
    fullName: Discord.IDeletable.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestRole.CompareTo*
  commentId: Overload:Discord.Rest.RestRole.CompareTo
  name: CompareTo
  nameWithType: RestRole.CompareTo
  fullName: Discord.Rest.RestRole.CompareTo
- uid: System.IComparable{Discord.IRole}.CompareTo(Discord.IRole)
  commentId: M:System.IComparable{Discord.IRole}.CompareTo(Discord.IRole)
  parent: System.IComparable{Discord.IRole}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(IRole)
  nameWithType: IComparable<IRole>.CompareTo(IRole)
  fullName: System.IComparable<Discord.IRole>.CompareTo(Discord.IRole)
  nameWithType.vb: IComparable(Of IRole).CompareTo(IRole)
  fullName.vb: System.IComparable(Of Discord.IRole).CompareTo(Discord.IRole)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<IRole>.CompareTo
    fullName: System.IComparable<Discord.IRole>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of IRole).CompareTo
    fullName: System.IComparable(Of Discord.IRole).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestRole.ToString*
  commentId: Overload:Discord.Rest.RestRole.ToString
  name: ToString
  nameWithType: RestRole.ToString
  fullName: Discord.Rest.RestRole.ToString
- uid: Discord.Rest.RestRole.Discord#IRole#Guild*
  commentId: Overload:Discord.Rest.RestRole.Discord#IRole#Guild
  name: IRole.Guild
  nameWithType: RestRole.IRole.Guild
  fullName: Discord.Rest.RestRole.Discord.IRole.Guild
  nameWithType.vb: RestRole.Discord.IRole.Guild
  name.vb: Discord.IRole.Guild
- uid: Discord.IRole.Guild
  commentId: P:Discord.IRole.Guild
  parent: Discord.IRole
  name: Guild
  nameWithType: IRole.Guild
  fullName: Discord.IRole.Guild
- uid: Discord.IGuild
  commentId: T:Discord.IGuild
  parent: Discord
  name: IGuild
  nameWithType: IGuild
  fullName: Discord.IGuild
