### YamlMime:ManagedReference
items:
- uid: Discord.WebSocket.SocketUser
  commentId: T:Discord.WebSocket.SocketUser
  id: SocketUser
  parent: Discord.WebSocket
  children:
  - Discord.WebSocket.SocketUser.ActiveClients
  - Discord.WebSocket.SocketUser.Activity
  - Discord.WebSocket.SocketUser.AvatarId
  - Discord.WebSocket.SocketUser.CreatedAt
  - Discord.WebSocket.SocketUser.Discriminator
  - Discord.WebSocket.SocketUser.DiscriminatorValue
  - Discord.WebSocket.SocketUser.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
  - Discord.WebSocket.SocketUser.GetDefaultAvatarUrl
  - Discord.WebSocket.SocketUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketUser.IsBot
  - Discord.WebSocket.SocketUser.IsWebhook
  - Discord.WebSocket.SocketUser.Mention
  - Discord.WebSocket.SocketUser.MutualGuilds
  - Discord.WebSocket.SocketUser.Status
  - Discord.WebSocket.SocketUser.ToString
  - Discord.WebSocket.SocketUser.Username
  langs:
  - csharp
  - vb
  name: SocketUser
  nameWithType: SocketUser
  fullName: Discord.WebSocket.SocketUser
  type: Class
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: SocketUser
    path: ../src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
    startLine: 14
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nRepresents a WebSocket-based user.\n"
  example: []
  syntax:
    content: 'public abstract class SocketUser : SocketEntity<ulong>, IEntity<ulong>, IUser, ISnowflakeEntity, IEntity<ulong>, IMentionable, IPresence'
    content.vb: >-
      Public MustInherit Class SocketUser
          Inherits SocketEntity(Of ULong)
          Implements IEntity(Of ULong), IUser, ISnowflakeEntity, IEntity(Of ULong), IMentionable, IPresence
  inheritance:
  - System.Object
  - Discord.WebSocket.SocketEntity{System.UInt64}
  derivedClasses:
  - Discord.WebSocket.SocketGroupUser
  - Discord.WebSocket.SocketGuildUser
  - Discord.WebSocket.SocketSelfUser
  - Discord.WebSocket.SocketUnknownUser
  - Discord.WebSocket.SocketWebhookUser
  implements:
  - Discord.IEntity{System.UInt64}
  - Discord.IUser
  - Discord.ISnowflakeEntity
  - Discord.IEntity{System.UInt64}
  - Discord.IMentionable
  - Discord.IPresence
  inheritedMembers:
  - Discord.WebSocket.SocketEntity{System.UInt64}.Id
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Discord.WebSocket.SocketUser.IsBot
  commentId: P:Discord.WebSocket.SocketUser.IsBot
  id: IsBot
  parent: Discord.WebSocket.SocketUser
  langs:
  - csharp
  - vb
  name: IsBot
  nameWithType: SocketUser.IsBot
  fullName: Discord.WebSocket.SocketUser.IsBot
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: IsBot
    path: ../src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
    startLine: 18
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public abstract bool IsBot { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public MustOverride ReadOnly Property IsBot As Boolean
  overload: Discord.WebSocket.SocketUser.IsBot*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Discord.WebSocket.SocketUser.Username
  commentId: P:Discord.WebSocket.SocketUser.Username
  id: Username
  parent: Discord.WebSocket.SocketUser
  langs:
  - csharp
  - vb
  name: Username
  nameWithType: SocketUser.Username
  fullName: Discord.WebSocket.SocketUser.Username
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Username
    path: ../src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
    startLine: 20
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public abstract string Username { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public MustOverride ReadOnly Property Username As String
  overload: Discord.WebSocket.SocketUser.Username*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Discord.WebSocket.SocketUser.DiscriminatorValue
  commentId: P:Discord.WebSocket.SocketUser.DiscriminatorValue
  id: DiscriminatorValue
  parent: Discord.WebSocket.SocketUser
  langs:
  - csharp
  - vb
  name: DiscriminatorValue
  nameWithType: SocketUser.DiscriminatorValue
  fullName: Discord.WebSocket.SocketUser.DiscriminatorValue
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: DiscriminatorValue
    path: ../src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
    startLine: 22
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public abstract ushort DiscriminatorValue { get; }
    parameters: []
    return:
      type: System.UInt16
    content.vb: Public MustOverride ReadOnly Property DiscriminatorValue As UShort
  overload: Discord.WebSocket.SocketUser.DiscriminatorValue*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Discord.WebSocket.SocketUser.AvatarId
  commentId: P:Discord.WebSocket.SocketUser.AvatarId
  id: AvatarId
  parent: Discord.WebSocket.SocketUser
  langs:
  - csharp
  - vb
  name: AvatarId
  nameWithType: SocketUser.AvatarId
  fullName: Discord.WebSocket.SocketUser.AvatarId
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: AvatarId
    path: ../src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
    startLine: 24
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public abstract string AvatarId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public MustOverride ReadOnly Property AvatarId As String
  overload: Discord.WebSocket.SocketUser.AvatarId*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Discord.WebSocket.SocketUser.IsWebhook
  commentId: P:Discord.WebSocket.SocketUser.IsWebhook
  id: IsWebhook
  parent: Discord.WebSocket.SocketUser
  langs:
  - csharp
  - vb
  name: IsWebhook
  nameWithType: SocketUser.IsWebhook
  fullName: Discord.WebSocket.SocketUser.IsWebhook
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: IsWebhook
    path: ../src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
    startLine: 26
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public abstract bool IsWebhook { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public MustOverride ReadOnly Property IsWebhook As Boolean
  overload: Discord.WebSocket.SocketUser.IsWebhook*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Discord.WebSocket.SocketUser.CreatedAt
  commentId: P:Discord.WebSocket.SocketUser.CreatedAt
  id: CreatedAt
  parent: Discord.WebSocket.SocketUser
  langs:
  - csharp
  - vb
  name: CreatedAt
  nameWithType: SocketUser.CreatedAt
  fullName: Discord.WebSocket.SocketUser.CreatedAt
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: CreatedAt
    path: ../src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
    startLine: 31
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public DateTimeOffset CreatedAt { get; }
    parameters: []
    return:
      type: DateTimeOffset
    content.vb: Public ReadOnly Property CreatedAt As DateTimeOffset
  overload: Discord.WebSocket.SocketUser.CreatedAt*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketUser.Discriminator
  commentId: P:Discord.WebSocket.SocketUser.Discriminator
  id: Discriminator
  parent: Discord.WebSocket.SocketUser
  langs:
  - csharp
  - vb
  name: Discriminator
  nameWithType: SocketUser.Discriminator
  fullName: Discord.WebSocket.SocketUser.Discriminator
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Discriminator
    path: ../src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
    startLine: 33
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public string Discriminator { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Discriminator As String
  overload: Discord.WebSocket.SocketUser.Discriminator*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketUser.Mention
  commentId: P:Discord.WebSocket.SocketUser.Mention
  id: Mention
  parent: Discord.WebSocket.SocketUser
  langs:
  - csharp
  - vb
  name: Mention
  nameWithType: SocketUser.Mention
  fullName: Discord.WebSocket.SocketUser.Mention
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Mention
    path: ../src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
    startLine: 35
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public string Mention { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Mention As String
  overload: Discord.WebSocket.SocketUser.Mention*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketUser.Activity
  commentId: P:Discord.WebSocket.SocketUser.Activity
  id: Activity
  parent: Discord.WebSocket.SocketUser
  langs:
  - csharp
  - vb
  name: Activity
  nameWithType: SocketUser.Activity
  fullName: Discord.WebSocket.SocketUser.Activity
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Activity
    path: ../src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
    startLine: 37
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the activity this user is currently doing.\n"
  example: []
  syntax:
    content: public IActivity Activity { get; }
    parameters: []
    return:
      type: Discord.IActivity
    content.vb: Public ReadOnly Property Activity As IActivity
  overload: Discord.WebSocket.SocketUser.Activity*
  implements:
  - Discord.IPresence.Activity
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketUser.Status
  commentId: P:Discord.WebSocket.SocketUser.Status
  id: Status
  parent: Discord.WebSocket.SocketUser
  langs:
  - csharp
  - vb
  name: Status
  nameWithType: SocketUser.Status
  fullName: Discord.WebSocket.SocketUser.Status
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Status
    path: ../src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
    startLine: 39
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the current status of this user.\n"
  example: []
  syntax:
    content: public UserStatus Status { get; }
    parameters: []
    return:
      type: Discord.UserStatus
    content.vb: Public ReadOnly Property Status As UserStatus
  overload: Discord.WebSocket.SocketUser.Status*
  implements:
  - Discord.IPresence.Status
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketUser.ActiveClients
  commentId: P:Discord.WebSocket.SocketUser.ActiveClients
  id: ActiveClients
  parent: Discord.WebSocket.SocketUser
  langs:
  - csharp
  - vb
  name: ActiveClients
  nameWithType: SocketUser.ActiveClients
  fullName: Discord.WebSocket.SocketUser.ActiveClients
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ActiveClients
    path: ../src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
    startLine: 41
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public IImmutableSet<ClientType> ActiveClients { get; }
    parameters: []
    return:
      type: IImmutableSet{Discord.ClientType}
    content.vb: Public ReadOnly Property ActiveClients As IImmutableSet(Of ClientType)
  overload: Discord.WebSocket.SocketUser.ActiveClients*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketUser.MutualGuilds
  commentId: P:Discord.WebSocket.SocketUser.MutualGuilds
  id: MutualGuilds
  parent: Discord.WebSocket.SocketUser
  langs:
  - csharp
  - vb
  name: MutualGuilds
  nameWithType: SocketUser.MutualGuilds
  fullName: Discord.WebSocket.SocketUser.MutualGuilds
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: MutualGuilds
    path: ../src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
    startLine: 45
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets mutual guilds shared with this user.\n"
  example: []
  syntax:
    content: public IReadOnlyCollection<SocketGuild> MutualGuilds { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.WebSocket.SocketGuild}
    content.vb: Public ReadOnly Property MutualGuilds As IReadOnlyCollection(Of SocketGuild)
  overload: Discord.WebSocket.SocketUser.MutualGuilds*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
  id: GetOrCreateDMChannelAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketUser
  langs:
  - csharp
  - vb
  name: GetOrCreateDMChannelAsync(RequestOptions)
  nameWithType: SocketUser.GetOrCreateDMChannelAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetOrCreateDMChannelAsync
    path: ../src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
    startLine: 83
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public Task<IDMChannel> GetOrCreateDMChannelAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task{Discord.IDMChannel}
    content.vb: Public Function GetOrCreateDMChannelAsync(options As RequestOptions = Nothing) As Task(Of IDMChannel)
  overload: Discord.WebSocket.SocketUser.GetOrCreateDMChannelAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketUser.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
  commentId: M:Discord.WebSocket.SocketUser.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
  id: GetAvatarUrl(Discord.ImageFormat,System.UInt16)
  parent: Discord.WebSocket.SocketUser
  langs:
  - csharp
  - vb
  name: GetAvatarUrl(ImageFormat, UInt16)
  nameWithType: SocketUser.GetAvatarUrl(ImageFormat, UInt16)
  fullName: Discord.WebSocket.SocketUser.GetAvatarUrl(Discord.ImageFormat, System.UInt16)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetAvatarUrl
    path: ../src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
    startLine: 87
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public string GetAvatarUrl(ImageFormat format = ImageFormat.Auto, ushort size = null)
    parameters:
    - id: format
      type: Discord.ImageFormat
    - id: size
      type: System.UInt16
    return:
      type: System.String
    content.vb: Public Function GetAvatarUrl(format As ImageFormat = ImageFormat.Auto, size As UShort = Nothing) As String
  overload: Discord.WebSocket.SocketUser.GetAvatarUrl*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketUser.GetDefaultAvatarUrl
  commentId: M:Discord.WebSocket.SocketUser.GetDefaultAvatarUrl
  id: GetDefaultAvatarUrl
  parent: Discord.WebSocket.SocketUser
  langs:
  - csharp
  - vb
  name: GetDefaultAvatarUrl()
  nameWithType: SocketUser.GetDefaultAvatarUrl()
  fullName: Discord.WebSocket.SocketUser.GetDefaultAvatarUrl()
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetDefaultAvatarUrl
    path: ../src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
    startLine: 91
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public string GetDefaultAvatarUrl()
    return:
      type: System.String
    content.vb: Public Function GetDefaultAvatarUrl As String
  overload: Discord.WebSocket.SocketUser.GetDefaultAvatarUrl*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketUser.ToString
  commentId: M:Discord.WebSocket.SocketUser.ToString
  id: ToString
  parent: Discord.WebSocket.SocketUser
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SocketUser.ToString()
  fullName: Discord.WebSocket.SocketUser.ToString()
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ToString
    path: ../src/Discord.Net.WebSocket/Entities/Users/SocketUser.cs
    startLine: 100
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the full name of the user (e.g. Example#0001).\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nThe full name of the user.\n"
    content.vb: Public Overrides Function ToString As String
  overload: Discord.WebSocket.SocketUser.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Discord.WebSocket
  commentId: N:Discord.WebSocket
  name: Discord.WebSocket
  nameWithType: Discord.WebSocket
  fullName: Discord.WebSocket
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.WebSocket.SocketEntity{System.UInt64}
  commentId: T:Discord.WebSocket.SocketEntity{System.UInt64}
  parent: Discord.WebSocket
  definition: Discord.WebSocket.SocketEntity`1
  name: SocketEntity<UInt64>
  nameWithType: SocketEntity<UInt64>
  fullName: Discord.WebSocket.SocketEntity<System.UInt64>
  nameWithType.vb: SocketEntity(Of UInt64)
  fullName.vb: Discord.WebSocket.SocketEntity(Of System.UInt64)
  name.vb: SocketEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.WebSocket.SocketEntity`1
    name: SocketEntity
    nameWithType: SocketEntity
    fullName: Discord.WebSocket.SocketEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.WebSocket.SocketEntity`1
    name: SocketEntity
    nameWithType: SocketEntity
    fullName: Discord.WebSocket.SocketEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IUser
  commentId: T:Discord.IUser
  parent: Discord
  name: IUser
  nameWithType: IUser
  fullName: Discord.IUser
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IMentionable
  commentId: T:Discord.IMentionable
  parent: Discord
  name: IMentionable
  nameWithType: IMentionable
  fullName: Discord.IMentionable
- uid: Discord.IPresence
  commentId: T:Discord.IPresence
  parent: Discord
  name: IPresence
  nameWithType: IPresence
  fullName: Discord.IPresence
- uid: Discord.WebSocket.SocketEntity{System.UInt64}.Id
  commentId: P:Discord.WebSocket.SocketEntity{System.UInt64}.Id
  parent: Discord.WebSocket.SocketEntity{System.UInt64}
  definition: Discord.WebSocket.SocketEntity`1.Id
  name: Id
  nameWithType: SocketEntity<UInt64>.Id
  fullName: Discord.WebSocket.SocketEntity<System.UInt64>.Id
  nameWithType.vb: SocketEntity(Of UInt64).Id
  fullName.vb: Discord.WebSocket.SocketEntity(Of System.UInt64).Id
- uid: Discord.WebSocket.SocketEntity`1
  commentId: T:Discord.WebSocket.SocketEntity`1
  name: SocketEntity<T>
  nameWithType: SocketEntity<T>
  fullName: Discord.WebSocket.SocketEntity<T>
  nameWithType.vb: SocketEntity(Of T)
  fullName.vb: Discord.WebSocket.SocketEntity(Of T)
  name.vb: SocketEntity(Of T)
  spec.csharp:
  - uid: Discord.WebSocket.SocketEntity`1
    name: SocketEntity
    nameWithType: SocketEntity
    fullName: Discord.WebSocket.SocketEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.WebSocket.SocketEntity`1
    name: SocketEntity
    nameWithType: SocketEntity
    fullName: Discord.WebSocket.SocketEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.WebSocket.SocketEntity`1.Id
  commentId: P:Discord.WebSocket.SocketEntity`1.Id
  name: Id
  nameWithType: SocketEntity<T>.Id
  fullName: Discord.WebSocket.SocketEntity<T>.Id
  nameWithType.vb: SocketEntity(Of T).Id
  fullName.vb: Discord.WebSocket.SocketEntity(Of T).Id
- uid: Discord.WebSocket.SocketUser.IsBot*
  commentId: Overload:Discord.WebSocket.SocketUser.IsBot
  name: IsBot
  nameWithType: SocketUser.IsBot
  fullName: Discord.WebSocket.SocketUser.IsBot
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.WebSocket.SocketUser.Username*
  commentId: Overload:Discord.WebSocket.SocketUser.Username
  name: Username
  nameWithType: SocketUser.Username
  fullName: Discord.WebSocket.SocketUser.Username
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.WebSocket.SocketUser.DiscriminatorValue*
  commentId: Overload:Discord.WebSocket.SocketUser.DiscriminatorValue
  name: DiscriminatorValue
  nameWithType: SocketUser.DiscriminatorValue
  fullName: Discord.WebSocket.SocketUser.DiscriminatorValue
- uid: System.UInt16
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: Discord.WebSocket.SocketUser.AvatarId*
  commentId: Overload:Discord.WebSocket.SocketUser.AvatarId
  name: AvatarId
  nameWithType: SocketUser.AvatarId
  fullName: Discord.WebSocket.SocketUser.AvatarId
- uid: Discord.WebSocket.SocketUser.IsWebhook*
  commentId: Overload:Discord.WebSocket.SocketUser.IsWebhook
  name: IsWebhook
  nameWithType: SocketUser.IsWebhook
  fullName: Discord.WebSocket.SocketUser.IsWebhook
- uid: Discord.WebSocket.SocketUser.CreatedAt*
  commentId: Overload:Discord.WebSocket.SocketUser.CreatedAt
  name: CreatedAt
  nameWithType: SocketUser.CreatedAt
  fullName: Discord.WebSocket.SocketUser.CreatedAt
- uid: DateTimeOffset
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: DateTimeOffset
- uid: Discord.WebSocket.SocketUser.Discriminator*
  commentId: Overload:Discord.WebSocket.SocketUser.Discriminator
  name: Discriminator
  nameWithType: SocketUser.Discriminator
  fullName: Discord.WebSocket.SocketUser.Discriminator
- uid: Discord.WebSocket.SocketUser.Mention*
  commentId: Overload:Discord.WebSocket.SocketUser.Mention
  name: Mention
  nameWithType: SocketUser.Mention
  fullName: Discord.WebSocket.SocketUser.Mention
- uid: Discord.WebSocket.SocketUser.Activity*
  commentId: Overload:Discord.WebSocket.SocketUser.Activity
  name: Activity
  nameWithType: SocketUser.Activity
  fullName: Discord.WebSocket.SocketUser.Activity
- uid: Discord.IPresence.Activity
  commentId: P:Discord.IPresence.Activity
  parent: Discord.IPresence
  name: Activity
  nameWithType: IPresence.Activity
  fullName: Discord.IPresence.Activity
- uid: Discord.IActivity
  commentId: T:Discord.IActivity
  parent: Discord
  name: IActivity
  nameWithType: IActivity
  fullName: Discord.IActivity
- uid: Discord.WebSocket.SocketUser.Status*
  commentId: Overload:Discord.WebSocket.SocketUser.Status
  name: Status
  nameWithType: SocketUser.Status
  fullName: Discord.WebSocket.SocketUser.Status
- uid: Discord.IPresence.Status
  commentId: P:Discord.IPresence.Status
  parent: Discord.IPresence
  name: Status
  nameWithType: IPresence.Status
  fullName: Discord.IPresence.Status
- uid: Discord.UserStatus
  commentId: T:Discord.UserStatus
  parent: Discord
  name: UserStatus
  nameWithType: UserStatus
  fullName: Discord.UserStatus
- uid: Discord.WebSocket.SocketUser.ActiveClients*
  commentId: Overload:Discord.WebSocket.SocketUser.ActiveClients
  name: ActiveClients
  nameWithType: SocketUser.ActiveClients
  fullName: Discord.WebSocket.SocketUser.ActiveClients
- uid: IImmutableSet{Discord.ClientType}
  commentId: '!:IImmutableSet{Discord.ClientType}'
  definition: IImmutableSet`1
  name: IImmutableSet<ClientType>
  nameWithType: IImmutableSet<ClientType>
  fullName: IImmutableSet<Discord.ClientType>
  nameWithType.vb: IImmutableSet(Of ClientType)
  fullName.vb: IImmutableSet(Of Discord.ClientType)
  name.vb: IImmutableSet(Of ClientType)
  spec.csharp:
  - uid: IImmutableSet`1
    name: IImmutableSet
    nameWithType: IImmutableSet
    fullName: IImmutableSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ClientType
    name: ClientType
    nameWithType: ClientType
    fullName: Discord.ClientType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IImmutableSet`1
    name: IImmutableSet
    nameWithType: IImmutableSet
    fullName: IImmutableSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ClientType
    name: ClientType
    nameWithType: ClientType
    fullName: Discord.ClientType
  - name: )
    nameWithType: )
    fullName: )
- uid: IImmutableSet`1
  isExternal: true
  name: IImmutableSet<>
  nameWithType: IImmutableSet<>
  fullName: IImmutableSet<>
  nameWithType.vb: IImmutableSet(Of )
  fullName.vb: IImmutableSet(Of )
  name.vb: IImmutableSet(Of )
  spec.csharp:
  - uid: IImmutableSet`1
    name: IImmutableSet
    nameWithType: IImmutableSet
    fullName: IImmutableSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IImmutableSet`1
    name: IImmutableSet
    nameWithType: IImmutableSet
    fullName: IImmutableSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketUser.MutualGuilds*
  commentId: Overload:Discord.WebSocket.SocketUser.MutualGuilds
  name: MutualGuilds
  nameWithType: SocketUser.MutualGuilds
  fullName: Discord.WebSocket.SocketUser.MutualGuilds
- uid: IReadOnlyCollection{Discord.WebSocket.SocketGuild}
  commentId: '!:IReadOnlyCollection{Discord.WebSocket.SocketGuild}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<SocketGuild>
  nameWithType: IReadOnlyCollection<SocketGuild>
  fullName: IReadOnlyCollection<Discord.WebSocket.SocketGuild>
  nameWithType.vb: IReadOnlyCollection(Of SocketGuild)
  fullName.vb: IReadOnlyCollection(Of Discord.WebSocket.SocketGuild)
  name.vb: IReadOnlyCollection(Of SocketGuild)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketGuild
    name: SocketGuild
    nameWithType: SocketGuild
    fullName: Discord.WebSocket.SocketGuild
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketGuild
    name: SocketGuild
    nameWithType: SocketGuild
    fullName: Discord.WebSocket.SocketGuild
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<>
  nameWithType: IReadOnlyCollection<>
  fullName: IReadOnlyCollection<>
  nameWithType.vb: IReadOnlyCollection(Of )
  fullName.vb: IReadOnlyCollection(Of )
  name.vb: IReadOnlyCollection(Of )
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketUser.GetOrCreateDMChannelAsync*
  commentId: Overload:Discord.WebSocket.SocketUser.GetOrCreateDMChannelAsync
  name: GetOrCreateDMChannelAsync
  nameWithType: SocketUser.GetOrCreateDMChannelAsync
  fullName: Discord.WebSocket.SocketUser.GetOrCreateDMChannelAsync
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: Task{Discord.IDMChannel}
  commentId: '!:Task{Discord.IDMChannel}'
  definition: Task`1
  name: Task<IDMChannel>
  nameWithType: Task<IDMChannel>
  fullName: Task<Discord.IDMChannel>
  nameWithType.vb: Task(Of IDMChannel)
  fullName.vb: Task(Of Discord.IDMChannel)
  name.vb: Task(Of IDMChannel)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IDMChannel
    name: IDMChannel
    nameWithType: IDMChannel
    fullName: Discord.IDMChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IDMChannel
    name: IDMChannel
    nameWithType: IDMChannel
    fullName: Discord.IDMChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketUser.GetAvatarUrl*
  commentId: Overload:Discord.WebSocket.SocketUser.GetAvatarUrl
  name: GetAvatarUrl
  nameWithType: SocketUser.GetAvatarUrl
  fullName: Discord.WebSocket.SocketUser.GetAvatarUrl
- uid: Discord.ImageFormat
  commentId: T:Discord.ImageFormat
  parent: Discord
  name: ImageFormat
  nameWithType: ImageFormat
  fullName: Discord.ImageFormat
- uid: Discord.WebSocket.SocketUser.GetDefaultAvatarUrl*
  commentId: Overload:Discord.WebSocket.SocketUser.GetDefaultAvatarUrl
  name: GetDefaultAvatarUrl
  nameWithType: SocketUser.GetDefaultAvatarUrl
  fullName: Discord.WebSocket.SocketUser.GetDefaultAvatarUrl
- uid: Discord.WebSocket.SocketUser.ToString*
  commentId: Overload:Discord.WebSocket.SocketUser.ToString
  name: ToString
  nameWithType: SocketUser.ToString
  fullName: Discord.WebSocket.SocketUser.ToString
