### YamlMime:ManagedReference
items:
- uid: Discord.WebSocket.BaseSocketClient
  commentId: T:Discord.WebSocket.BaseSocketClient
  id: BaseSocketClient
  parent: Discord.WebSocket
  children:
  - Discord.WebSocket.BaseSocketClient.Activity
  - Discord.WebSocket.BaseSocketClient.BaseConfig
  - Discord.WebSocket.BaseSocketClient.ChannelCreated
  - Discord.WebSocket.BaseSocketClient.ChannelDestroyed
  - Discord.WebSocket.BaseSocketClient.ChannelUpdated
  - Discord.WebSocket.BaseSocketClient.CreateGuildAsync(System.String,Discord.IVoiceRegion,System.IO.Stream,Discord.RequestOptions)
  - Discord.WebSocket.BaseSocketClient.CurrentUser
  - Discord.WebSocket.BaseSocketClient.CurrentUserUpdated
  - Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#CreateGuildAsync(System.String,Discord.IVoiceRegion,System.IO.Stream,Discord.RequestOptions)
  - Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetApplicationInfoAsync(Discord.RequestOptions)
  - Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  - Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetConnectionsAsync(Discord.RequestOptions)
  - Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetGuildAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  - Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetGuildsAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetInviteAsync(System.String,Discord.RequestOptions)
  - Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetPrivateChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetUserAsync(System.String,System.String,Discord.RequestOptions)
  - Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  - Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetVoiceRegionAsync(System.String,Discord.RequestOptions)
  - Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetVoiceRegionsAsync(Discord.RequestOptions)
  - Discord.WebSocket.BaseSocketClient.DownloadUsersAsync(System.Collections.Generic.IEnumerable{Discord.IGuild})
  - Discord.WebSocket.BaseSocketClient.GetApplicationInfoAsync(Discord.RequestOptions)
  - Discord.WebSocket.BaseSocketClient.GetChannel(System.UInt64)
  - Discord.WebSocket.BaseSocketClient.GetConnectionsAsync(Discord.RequestOptions)
  - Discord.WebSocket.BaseSocketClient.GetGuild(System.UInt64)
  - Discord.WebSocket.BaseSocketClient.GetInviteAsync(System.String,Discord.RequestOptions)
  - Discord.WebSocket.BaseSocketClient.GetUser(System.String,System.String)
  - Discord.WebSocket.BaseSocketClient.GetUser(System.UInt64)
  - Discord.WebSocket.BaseSocketClient.GetVoiceRegion(System.String)
  - Discord.WebSocket.BaseSocketClient.GuildAvailable
  - Discord.WebSocket.BaseSocketClient.GuildMembersDownloaded
  - Discord.WebSocket.BaseSocketClient.GuildMemberUpdated
  - Discord.WebSocket.BaseSocketClient.Guilds
  - Discord.WebSocket.BaseSocketClient.GuildUnavailable
  - Discord.WebSocket.BaseSocketClient.GuildUpdated
  - Discord.WebSocket.BaseSocketClient.JoinedGuild
  - Discord.WebSocket.BaseSocketClient.Latency
  - Discord.WebSocket.BaseSocketClient.LeftGuild
  - Discord.WebSocket.BaseSocketClient.MessageDeleted
  - Discord.WebSocket.BaseSocketClient.MessageReceived
  - Discord.WebSocket.BaseSocketClient.MessagesBulkDeleted
  - Discord.WebSocket.BaseSocketClient.MessageUpdated
  - Discord.WebSocket.BaseSocketClient.PrivateChannels
  - Discord.WebSocket.BaseSocketClient.ReactionAdded
  - Discord.WebSocket.BaseSocketClient.ReactionRemoved
  - Discord.WebSocket.BaseSocketClient.ReactionsCleared
  - Discord.WebSocket.BaseSocketClient.RecipientAdded
  - Discord.WebSocket.BaseSocketClient.RecipientRemoved
  - Discord.WebSocket.BaseSocketClient.Rest
  - Discord.WebSocket.BaseSocketClient.RoleCreated
  - Discord.WebSocket.BaseSocketClient.RoleDeleted
  - Discord.WebSocket.BaseSocketClient.RoleUpdated
  - Discord.WebSocket.BaseSocketClient.SetActivityAsync(Discord.IActivity)
  - Discord.WebSocket.BaseSocketClient.SetGameAsync(System.String,System.String,Discord.ActivityType)
  - Discord.WebSocket.BaseSocketClient.SetStatusAsync(Discord.UserStatus)
  - Discord.WebSocket.BaseSocketClient.StartAsync
  - Discord.WebSocket.BaseSocketClient.Status
  - Discord.WebSocket.BaseSocketClient.StopAsync
  - Discord.WebSocket.BaseSocketClient.UserBanned
  - Discord.WebSocket.BaseSocketClient.UserIsTyping
  - Discord.WebSocket.BaseSocketClient.UserJoined
  - Discord.WebSocket.BaseSocketClient.UserLeft
  - Discord.WebSocket.BaseSocketClient.UserUnbanned
  - Discord.WebSocket.BaseSocketClient.UserUpdated
  - Discord.WebSocket.BaseSocketClient.UserVoiceStateUpdated
  - Discord.WebSocket.BaseSocketClient.VoiceRegions
  - Discord.WebSocket.BaseSocketClient.VoiceServerUpdated
  langs:
  - csharp
  - vb
  name: BaseSocketClient
  nameWithType: BaseSocketClient
  fullName: Discord.WebSocket.BaseSocketClient
  type: Class
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: BaseSocketClient
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 6
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nRepresents the base of a WebSocket-based Discord client.\n"
  example: []
  syntax:
    content: 'public abstract class BaseSocketClient : BaseDiscordClient, IDiscordClient, IDisposable'
    content.vb: >-
      Public MustInherit Class BaseSocketClient
          Inherits BaseDiscordClient
          Implements IDiscordClient, IDisposable
  inheritance:
  - System.Object
  - Discord.Rest.BaseDiscordClient
  derivedClasses:
  - Discord.WebSocket.DiscordShardedClient
  - Discord.WebSocket.DiscordSocketClient
  implements:
  - Discord.IDiscordClient
  - System.IDisposable
  inheritedMembers:
  - Discord.Rest.BaseDiscordClient.Log
  - Discord.Rest.BaseDiscordClient.LoggedIn
  - Discord.Rest.BaseDiscordClient.LoggedOut
  - Discord.Rest.BaseDiscordClient.LoginState
  - Discord.Rest.BaseDiscordClient.TokenType
  - Discord.Rest.BaseDiscordClient.LoginAsync(Discord.TokenType,System.String,System.Boolean)
  - Discord.Rest.BaseDiscordClient.LogoutAsync
  - Discord.Rest.BaseDiscordClient.Dispose
  - Discord.Rest.BaseDiscordClient.GetRecommendedShardCountAsync(Discord.RequestOptions)
  - Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#ConnectionState
  - Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#CurrentUser
  - Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetDMChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetGroupChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  - Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#StartAsync
  - Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#StopAsync
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Discord.WebSocket.BaseSocketClient.BaseConfig
  commentId: F:Discord.WebSocket.BaseSocketClient.BaseConfig
  id: BaseConfig
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: BaseConfig
  nameWithType: BaseSocketClient.BaseConfig
  fullName: Discord.WebSocket.BaseSocketClient.BaseConfig
  type: Field
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: BaseConfig
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 13
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  syntax:
    content: protected readonly DiscordSocketConfig BaseConfig
    return:
      type: Discord.WebSocket.DiscordSocketConfig
    content.vb: Protected ReadOnly BaseConfig As DiscordSocketConfig
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Discord.WebSocket.BaseSocketClient.Latency
  commentId: P:Discord.WebSocket.BaseSocketClient.Latency
  id: Latency
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: Latency
  nameWithType: BaseSocketClient.Latency
  fullName: Discord.WebSocket.BaseSocketClient.Latency
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Latency
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 22
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the estimated round-trip latency, in milliseconds, to the gateway server.\n"
  example: []
  syntax:
    content: public abstract int Latency { get; protected set; }
    parameters: []
    return:
      type: System.Int32
      description: "\nAn <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> that represents the round-trip latency to the WebSocket server. Please\nnote that this value does not represent a &quot;true&quot; latency for operations such as sending a message.\n"
    content.vb: Public MustOverride Property Latency As Integer
  overload: Discord.WebSocket.BaseSocketClient.Latency*
  modifiers.csharp:
  - public
  - abstract
  - get
  - protected set
  modifiers.vb:
  - Public
  - MustOverride
  - Get
  - Protected Set
- uid: Discord.WebSocket.BaseSocketClient.Status
  commentId: P:Discord.WebSocket.BaseSocketClient.Status
  id: Status
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: Status
  nameWithType: BaseSocketClient.Status
  fullName: Discord.WebSocket.BaseSocketClient.Status
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Status
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 29
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the status for the logged-in user.\n"
  example: []
  syntax:
    content: public abstract UserStatus Status { get; protected set; }
    parameters: []
    return:
      type: Discord.UserStatus
      description: "\nA status object that represents the user&apos;s online presence status.\n"
    content.vb: Public MustOverride Property Status As UserStatus
  overload: Discord.WebSocket.BaseSocketClient.Status*
  modifiers.csharp:
  - public
  - abstract
  - get
  - protected set
  modifiers.vb:
  - Public
  - MustOverride
  - Get
  - Protected Set
- uid: Discord.WebSocket.BaseSocketClient.Activity
  commentId: P:Discord.WebSocket.BaseSocketClient.Activity
  id: Activity
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: Activity
  nameWithType: BaseSocketClient.Activity
  fullName: Discord.WebSocket.BaseSocketClient.Activity
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Activity
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 36
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the activity for the logged-in user.\n"
  example: []
  syntax:
    content: public abstract IActivity Activity { get; protected set; }
    parameters: []
    return:
      type: Discord.IActivity
      description: "\nAn activity object that represents the user&apos;s current activity.\n"
    content.vb: Public MustOverride Property Activity As IActivity
  overload: Discord.WebSocket.BaseSocketClient.Activity*
  modifiers.csharp:
  - public
  - abstract
  - get
  - protected set
  modifiers.vb:
  - Public
  - MustOverride
  - Get
  - Protected Set
- uid: Discord.WebSocket.BaseSocketClient.Rest
  commentId: P:Discord.WebSocket.BaseSocketClient.Rest
  id: Rest
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: Rest
  nameWithType: BaseSocketClient.Rest
  fullName: Discord.WebSocket.BaseSocketClient.Rest
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Rest
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 41
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nProvides access to a REST-only client with a shared state from this client.\n"
  example: []
  syntax:
    content: public abstract DiscordSocketRestClient Rest { get; }
    parameters: []
    return:
      type: Discord.WebSocket.DiscordSocketRestClient
    content.vb: Public MustOverride ReadOnly Property Rest As DiscordSocketRestClient
  overload: Discord.WebSocket.BaseSocketClient.Rest*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Discord.WebSocket.BaseSocketClient.CurrentUser
  commentId: P:Discord.WebSocket.BaseSocketClient.CurrentUser
  id: CurrentUser
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: CurrentUser
  nameWithType: BaseSocketClient.CurrentUser
  fullName: Discord.WebSocket.BaseSocketClient.CurrentUser
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CurrentUser
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 48
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the current logged-in user.\n"
  example: []
  syntax:
    content: public SocketSelfUser CurrentUser { get; protected set; }
    parameters: []
    return:
      type: Discord.WebSocket.SocketSelfUser
    content.vb: Public Property CurrentUser As SocketSelfUser
  overload: Discord.WebSocket.BaseSocketClient.CurrentUser*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Discord.WebSocket.BaseSocketClient.Guilds
  commentId: P:Discord.WebSocket.BaseSocketClient.Guilds
  id: Guilds
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: Guilds
  nameWithType: BaseSocketClient.Guilds
  fullName: Discord.WebSocket.BaseSocketClient.Guilds
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Guilds
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 55
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of guilds that the user is currently in.\n"
  example: []
  syntax:
    content: public abstract IReadOnlyCollection<SocketGuild> Guilds { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketGuild}
      description: "\nA read-only collection of guilds that the current user is in.\n"
    content.vb: Public MustOverride ReadOnly Property Guilds As IReadOnlyCollection(Of SocketGuild)
  overload: Discord.WebSocket.BaseSocketClient.Guilds*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Discord.WebSocket.BaseSocketClient.PrivateChannels
  commentId: P:Discord.WebSocket.BaseSocketClient.PrivateChannels
  id: PrivateChannels
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: PrivateChannels
  nameWithType: BaseSocketClient.PrivateChannels
  fullName: Discord.WebSocket.BaseSocketClient.PrivateChannels
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: PrivateChannels
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 70
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of private channels opened in this session.\n"
  remarks: "\nThis method will retrieve all private channels (including direct-message, group channel and such) that\nare currently opened in this session.\n<div class=\"WARNING\"><h5>warning</h5><p>\n    This method will not return previously opened private channels outside of the current session! If\n    you have just started the client, this may return an empty collection.\n</p></div>\n"
  example: []
  syntax:
    content: public abstract IReadOnlyCollection<ISocketPrivateChannel> PrivateChannels { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.ISocketPrivateChannel}
      description: "\nA read-only collection of private channels that the user currently partakes in.\n"
    content.vb: Public MustOverride ReadOnly Property PrivateChannels As IReadOnlyCollection(Of ISocketPrivateChannel)
  overload: Discord.WebSocket.BaseSocketClient.PrivateChannels*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Discord.WebSocket.BaseSocketClient.VoiceRegions
  commentId: P:Discord.WebSocket.BaseSocketClient.VoiceRegions
  id: VoiceRegions
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: VoiceRegions
  nameWithType: BaseSocketClient.VoiceRegions
  fullName: Discord.WebSocket.BaseSocketClient.VoiceRegions
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: VoiceRegions
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 77
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of available voice regions.\n"
  example: []
  syntax:
    content: public abstract IReadOnlyCollection<RestVoiceRegion> VoiceRegions { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestVoiceRegion}
      description: "\nA read-only collection of voice regions that the user has access to.\n"
    content.vb: Public MustOverride ReadOnly Property VoiceRegions As IReadOnlyCollection(Of RestVoiceRegion)
  overload: Discord.WebSocket.BaseSocketClient.VoiceRegions*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: Discord.WebSocket.BaseSocketClient.GetApplicationInfoAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.BaseSocketClient.GetApplicationInfoAsync(Discord.RequestOptions)
  id: GetApplicationInfoAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: GetApplicationInfoAsync(RequestOptions)
  nameWithType: BaseSocketClient.GetApplicationInfoAsync(RequestOptions)
  fullName: Discord.WebSocket.BaseSocketClient.GetApplicationInfoAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetApplicationInfoAsync
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 96
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a Discord application information for the logged-in user.\n"
  remarks: "\nThis method reflects your application information you submitted when creating a Discord application via\nthe Developer Portal.\n"
  example: []
  syntax:
    content: public abstract Task<RestApplication> GetApplicationInfoAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestApplication}
      description: "\nA task that represents the asynchronous get operation. The task result contains the application\ninformation.\n"
    content.vb: Public MustOverride Function GetApplicationInfoAsync(options As RequestOptions = Nothing) As Task(Of RestApplication)
  overload: Discord.WebSocket.BaseSocketClient.GetApplicationInfoAsync*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Discord.WebSocket.BaseSocketClient.GetUser(System.UInt64)
  commentId: M:Discord.WebSocket.BaseSocketClient.GetUser(System.UInt64)
  id: GetUser(System.UInt64)
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: GetUser(UInt64)
  nameWithType: BaseSocketClient.GetUser(UInt64)
  fullName: Discord.WebSocket.BaseSocketClient.GetUser(System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetUser
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 118
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a generic user.\n"
  remarks: "\nThis method gets the user present in the WebSocket cache with the given condition.\n<div class=\"WARNING\"><h5>warning</h5><p>\n    Sometimes a user may return <code>null</code> due to Discord not sending offline users in large guilds\n    (i.e. guild with 100+ members) actively. To download users on startup and to see more information\n    about this subject, see <xref href=\"Discord.WebSocket.DiscordSocketConfig.AlwaysDownloadUsers\" data-throw-if-not-resolved=\"false\"></xref>.\n</p></div>\n<div class=\"NOTE\"><h5>note</h5><p>\n    This method does not attempt to fetch users that the logged-in user does not have access to (i.e.\n    users who don&apos;t share mutual guild(s) with the current user). If you wish to get a user that you do\n    not have access to, consider using the REST implementation of\n<xref href=\"Discord.Rest.DiscordRestClient.GetUserAsync(System.UInt64%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\n</p></div>\n"
  example: []
  syntax:
    content: public abstract SocketUser GetUser(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The user snowflake ID.
    return:
      type: Discord.WebSocket.SocketUser
      description: "\nA generic WebSocket-based user; <code>null</code> when the user cannot be found.\n"
    content.vb: Public MustOverride Function GetUser(id As ULong) As SocketUser
  overload: Discord.WebSocket.BaseSocketClient.GetUser*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Discord.WebSocket.BaseSocketClient.GetUser(System.String,System.String)
  commentId: M:Discord.WebSocket.BaseSocketClient.GetUser(System.String,System.String)
  id: GetUser(System.String,System.String)
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: GetUser(String, String)
  nameWithType: BaseSocketClient.GetUser(String, String)
  fullName: Discord.WebSocket.BaseSocketClient.GetUser(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetUser
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 142
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a user.\n"
  remarks: "\nThis method gets the user present in the WebSocket cache with the given condition.\n<div class=\"WARNING\"><h5>warning</h5><p>\n    Sometimes a user may return <code>null</code> due to Discord not sending offline users in large guilds\n    (i.e. guild with 100+ members) actively. To download users on startup and to see more information\n    about this subject, see <xref href=\"Discord.WebSocket.DiscordSocketConfig.AlwaysDownloadUsers\" data-throw-if-not-resolved=\"false\"></xref>.\n</p></div>\n<div class=\"NOTE\"><h5>note</h5><p>\n    This method does not attempt to fetch users that the logged-in user does not have access to (i.e.\n    users who don&apos;t share mutual guild(s) with the current user). If you wish to get a user that you do\n    not have access to, consider using the REST implementation of\n<xref href=\"Discord.Rest.DiscordRestClient.GetUserAsync(System.UInt64%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\n</p></div>\n"
  example: []
  syntax:
    content: public abstract SocketUser GetUser(string username, string discriminator)
    parameters:
    - id: username
      type: System.String
      description: The name of the user.
    - id: discriminator
      type: System.String
      description: The discriminator value of the user.
    return:
      type: Discord.WebSocket.SocketUser
      description: "\nA generic WebSocket-based user; <code>null</code> when the user cannot be found.\n"
    content.vb: Public MustOverride Function GetUser(username As String, discriminator As String) As SocketUser
  overload: Discord.WebSocket.BaseSocketClient.GetUser*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Discord.WebSocket.BaseSocketClient.GetChannel(System.UInt64)
  commentId: M:Discord.WebSocket.BaseSocketClient.GetChannel(System.UInt64)
  id: GetChannel(System.UInt64)
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: GetChannel(UInt64)
  nameWithType: BaseSocketClient.GetChannel(UInt64)
  fullName: Discord.WebSocket.BaseSocketClient.GetChannel(System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetChannel
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 151
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a channel.\n"
  example: []
  syntax:
    content: public abstract SocketChannel GetChannel(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the channel (e.g. `381889909113225237`).
    return:
      type: Discord.WebSocket.SocketChannel
      description: "\nA generic WebSocket-based channel object (voice, text, category, etc.) associated with the identifier;\n<code>null</code> when the channel cannot be found.\n"
    content.vb: Public MustOverride Function GetChannel(id As ULong) As SocketChannel
  overload: Discord.WebSocket.BaseSocketClient.GetChannel*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Discord.WebSocket.BaseSocketClient.GetGuild(System.UInt64)
  commentId: M:Discord.WebSocket.BaseSocketClient.GetGuild(System.UInt64)
  id: GetGuild(System.UInt64)
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: GetGuild(UInt64)
  nameWithType: BaseSocketClient.GetGuild(UInt64)
  fullName: Discord.WebSocket.BaseSocketClient.GetGuild(System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetGuild
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 160
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a guild.\n"
  example: []
  syntax:
    content: public abstract SocketGuild GetGuild(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The guild snowflake identifier.
    return:
      type: Discord.WebSocket.SocketGuild
      description: "\nA WebSocket-based guild associated with the snowflake identifier; <code>null</code> when the guild cannot be\nfound.\n"
    content.vb: Public MustOverride Function GetGuild(id As ULong) As SocketGuild
  overload: Discord.WebSocket.BaseSocketClient.GetGuild*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Discord.WebSocket.BaseSocketClient.GetVoiceRegion(System.String)
  commentId: M:Discord.WebSocket.BaseSocketClient.GetVoiceRegion(System.String)
  id: GetVoiceRegion(System.String)
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: GetVoiceRegion(String)
  nameWithType: BaseSocketClient.GetVoiceRegion(String)
  fullName: Discord.WebSocket.BaseSocketClient.GetVoiceRegion(System.String)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetVoiceRegion
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 169
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a voice region.\n"
  example: []
  syntax:
    content: public abstract RestVoiceRegion GetVoiceRegion(string id)
    parameters:
    - id: id
      type: System.String
      description: The identifier of the voice region (e.g. <code>eu-central</code> ).
    return:
      type: Discord.Rest.RestVoiceRegion
      description: "\nA REST-based voice region associated with the identifier; <code>null</code> if the voice region is not\nfound.\n"
    content.vb: Public MustOverride Function GetVoiceRegion(id As String) As RestVoiceRegion
  overload: Discord.WebSocket.BaseSocketClient.GetVoiceRegion*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Discord.WebSocket.BaseSocketClient.StartAsync
  commentId: M:Discord.WebSocket.BaseSocketClient.StartAsync
  id: StartAsync
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: StartAsync()
  nameWithType: BaseSocketClient.StartAsync()
  fullName: Discord.WebSocket.BaseSocketClient.StartAsync()
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: StartAsync
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 171
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nStarts the connection between Discord and the client..\n"
  remarks: "\nThis method will initialize the connection between the client and Discord.\n<div class=\"IMPORTANT\"><h5>important</h5><p>\n    This method will immediately return after it is called, as it will initialize the connection on\n    another thread.\n</p></div>\n"
  example: []
  syntax:
    content: public abstract Task StartAsync()
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous start operation.\n"
    content.vb: Public MustOverride Function StartAsync As Task
  overload: Discord.WebSocket.BaseSocketClient.StartAsync*
  implements:
  - Discord.IDiscordClient.StartAsync
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Discord.WebSocket.BaseSocketClient.StopAsync
  commentId: M:Discord.WebSocket.BaseSocketClient.StopAsync
  id: StopAsync
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: StopAsync()
  nameWithType: BaseSocketClient.StopAsync()
  fullName: Discord.WebSocket.BaseSocketClient.StopAsync()
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: StopAsync
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 173
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nStops the connection between Discord and the client.\n"
  example: []
  syntax:
    content: public abstract Task StopAsync()
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous stop operation.\n"
    content.vb: Public MustOverride Function StopAsync As Task
  overload: Discord.WebSocket.BaseSocketClient.StopAsync*
  implements:
  - Discord.IDiscordClient.StopAsync
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Discord.WebSocket.BaseSocketClient.SetStatusAsync(Discord.UserStatus)
  commentId: M:Discord.WebSocket.BaseSocketClient.SetStatusAsync(Discord.UserStatus)
  id: SetStatusAsync(Discord.UserStatus)
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: SetStatusAsync(UserStatus)
  nameWithType: BaseSocketClient.SetStatusAsync(UserStatus)
  fullName: Discord.WebSocket.BaseSocketClient.SetStatusAsync(Discord.UserStatus)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SetStatusAsync
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 181
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nSets the current status of the user (e.g. Online, Do not Disturb).\n"
  example: []
  syntax:
    content: public abstract Task SetStatusAsync(UserStatus status)
    parameters:
    - id: status
      type: Discord.UserStatus
      description: The new status to be set.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous set operation.\n"
    content.vb: Public MustOverride Function SetStatusAsync(status As UserStatus) As Task
  overload: Discord.WebSocket.BaseSocketClient.SetStatusAsync*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Discord.WebSocket.BaseSocketClient.SetGameAsync(System.String,System.String,Discord.ActivityType)
  commentId: M:Discord.WebSocket.BaseSocketClient.SetGameAsync(System.String,System.String,Discord.ActivityType)
  id: SetGameAsync(System.String,System.String,Discord.ActivityType)
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: SetGameAsync(String, String, ActivityType)
  nameWithType: BaseSocketClient.SetGameAsync(String, String, ActivityType)
  fullName: Discord.WebSocket.BaseSocketClient.SetGameAsync(System.String, System.String, Discord.ActivityType)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SetGameAsync
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 191
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nSets the game of the user.\n"
  example: []
  syntax:
    content: public abstract Task SetGameAsync(string name, string streamUrl = null, ActivityType type = ActivityType.Playing)
    parameters:
    - id: name
      type: System.String
      description: The name of the game.
    - id: streamUrl
      type: System.String
      description: If streaming, the URL of the stream. Must be a valid Twitch URL.
    - id: type
      type: Discord.ActivityType
      description: The type of the game.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous set operation.\n"
    content.vb: Public MustOverride Function SetGameAsync(name As String, streamUrl As String = Nothing, type As ActivityType = ActivityType.Playing) As Task
  overload: Discord.WebSocket.BaseSocketClient.SetGameAsync*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Discord.WebSocket.BaseSocketClient.SetActivityAsync(Discord.IActivity)
  commentId: M:Discord.WebSocket.BaseSocketClient.SetActivityAsync(Discord.IActivity)
  id: SetActivityAsync(Discord.IActivity)
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: SetActivityAsync(IActivity)
  nameWithType: BaseSocketClient.SetActivityAsync(IActivity)
  fullName: Discord.WebSocket.BaseSocketClient.SetActivityAsync(Discord.IActivity)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SetActivityAsync
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 209
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nSets the <code data-dev-comment-type=\"paramref\" class=\"paramref\">activity</code> of the logged-in user.\n"
  remarks: "\nThis method sets the <code data-dev-comment-type=\"paramref\" class=\"paramref\">activity</code> of the user. \n<div class=\"NOTE\"><h5>note</h5><p>\n    Discord will only accept setting of name and the type of activity.\n</p></div>\n<div class=\"WARNING\"><h5>warning</h5><p>\n    Rich Presence cannot be set via this method or client. Rich Presence is strictly limited to RPC\n    clients only. \n</p></div>\n"
  example: []
  syntax:
    content: public abstract Task SetActivityAsync(IActivity activity)
    parameters:
    - id: activity
      type: Discord.IActivity
      description: The activity to be set.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous set operation.\n"
    content.vb: Public MustOverride Function SetActivityAsync(activity As IActivity) As Task
  overload: Discord.WebSocket.BaseSocketClient.SetActivityAsync*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Discord.WebSocket.BaseSocketClient.DownloadUsersAsync(System.Collections.Generic.IEnumerable{Discord.IGuild})
  commentId: M:Discord.WebSocket.BaseSocketClient.DownloadUsersAsync(System.Collections.Generic.IEnumerable{Discord.IGuild})
  id: DownloadUsersAsync(System.Collections.Generic.IEnumerable{Discord.IGuild})
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: DownloadUsersAsync(IEnumerable<IGuild>)
  nameWithType: BaseSocketClient.DownloadUsersAsync(IEnumerable<IGuild>)
  fullName: Discord.WebSocket.BaseSocketClient.DownloadUsersAsync(System.Collections.Generic.IEnumerable<Discord.IGuild>)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DownloadUsersAsync
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 217
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nAttempts to download users into the user cache for the selected guilds.\n"
  example: []
  syntax:
    content: public abstract Task DownloadUsersAsync(IEnumerable<IGuild> guilds)
    parameters:
    - id: guilds
      type: System.Collections.Generic.IEnumerable{Discord.IGuild}
      description: The guilds to download the members from.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous download operation.\n"
    content.vb: Public MustOverride Function DownloadUsersAsync(guilds As IEnumerable(Of IGuild)) As Task
  overload: Discord.WebSocket.BaseSocketClient.DownloadUsersAsync*
  nameWithType.vb: BaseSocketClient.DownloadUsersAsync(IEnumerable(Of IGuild))
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Discord.WebSocket.BaseSocketClient.DownloadUsersAsync(System.Collections.Generic.IEnumerable(Of Discord.IGuild))
  name.vb: DownloadUsersAsync(IEnumerable(Of IGuild))
- uid: Discord.WebSocket.BaseSocketClient.CreateGuildAsync(System.String,Discord.IVoiceRegion,System.IO.Stream,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.BaseSocketClient.CreateGuildAsync(System.String,Discord.IVoiceRegion,System.IO.Stream,Discord.RequestOptions)
  id: CreateGuildAsync(System.String,Discord.IVoiceRegion,System.IO.Stream,Discord.RequestOptions)
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: CreateGuildAsync(String, IVoiceRegion, Stream, RequestOptions)
  nameWithType: BaseSocketClient.CreateGuildAsync(String, IVoiceRegion, Stream, RequestOptions)
  fullName: Discord.WebSocket.BaseSocketClient.CreateGuildAsync(System.String, Discord.IVoiceRegion, System.IO.Stream, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreateGuildAsync
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 235
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nCreates a guild for the logged-in user who is in less than 10 active guilds.\n"
  remarks: "\nThis method creates a new guild on behalf of the logged-in user. \n<div class=\"WARNING\"><h5>warning</h5><p>\n    Due to Discord&apos;s limitation, this method will only work for users that are in less than 10 guilds.\n</p></div>\n"
  example: []
  syntax:
    content: public Task<RestGuild> CreateGuildAsync(string name, IVoiceRegion region, Stream jpegIcon = null, RequestOptions options = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the new guild.
    - id: region
      type: Discord.IVoiceRegion
      description: The voice region to create the guild with.
    - id: jpegIcon
      type: System.IO.Stream
      description: The icon of the guild.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestGuild}
      description: "\nA task that represents the asynchronous creation operation. The task result contains the created guild.\n"
    content.vb: Public Function CreateGuildAsync(name As String, region As IVoiceRegion, jpegIcon As Stream = Nothing, options As RequestOptions = Nothing) As Task(Of RestGuild)
  overload: Discord.WebSocket.BaseSocketClient.CreateGuildAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.GetConnectionsAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.BaseSocketClient.GetConnectionsAsync(Discord.RequestOptions)
  id: GetConnectionsAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: GetConnectionsAsync(RequestOptions)
  nameWithType: BaseSocketClient.GetConnectionsAsync(RequestOptions)
  fullName: Discord.WebSocket.BaseSocketClient.GetConnectionsAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetConnectionsAsync
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 244
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the connections that the user has set up.\n"
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<RestConnection>> GetConnectionsAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestConnection}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection of connections.\n"
    content.vb: Public Function GetConnectionsAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestConnection))
  overload: Discord.WebSocket.BaseSocketClient.GetConnectionsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.GetInviteAsync(System.String,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.BaseSocketClient.GetInviteAsync(System.String,Discord.RequestOptions)
  id: GetInviteAsync(System.String,Discord.RequestOptions)
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: GetInviteAsync(String, RequestOptions)
  nameWithType: BaseSocketClient.GetInviteAsync(String, RequestOptions)
  fullName: Discord.WebSocket.BaseSocketClient.GetInviteAsync(System.String, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetInviteAsync
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 254
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets an invite.\n"
  example: []
  syntax:
    content: public Task<RestInviteMetadata> GetInviteAsync(string inviteId, RequestOptions options = null)
    parameters:
    - id: inviteId
      type: System.String
      description: The invitation identifier.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestInviteMetadata}
      description: "\nA task that represents the asynchronous get operation. The task result contains the invite information.\n"
    content.vb: Public Function GetInviteAsync(inviteId As String, options As RequestOptions = Nothing) As Task(Of RestInviteMetadata)
  overload: Discord.WebSocket.BaseSocketClient.GetInviteAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetApplicationInfoAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetApplicationInfoAsync(Discord.RequestOptions)
  id: Discord#IDiscordClient#GetApplicationInfoAsync(Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: IDiscordClient.GetApplicationInfoAsync(RequestOptions)
  nameWithType: BaseSocketClient.IDiscordClient.GetApplicationInfoAsync(RequestOptions)
  fullName: Discord.WebSocket.BaseSocketClient.Discord.IDiscordClient.GetApplicationInfoAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IDiscordClient.GetApplicationInfoAsync
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 259
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a Discord application information for the logged-in user.\n"
  remarks: "\nThis method reflects your application information you submitted when creating a Discord application via\nthe Developer Portal.\n"
  example: []
  syntax:
    content: Task<IApplication> IDiscordClient.GetApplicationInfoAsync(RequestOptions options)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IApplication}
      description: "\nA task that represents the asynchronous get operation. The task result contains the application\ninformation.\n"
    content.vb: Function Discord.IDiscordClient.GetApplicationInfoAsync(options As RequestOptions) As Task(Of IApplication) Implements IDiscordClient.GetApplicationInfoAsync
  overload: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetApplicationInfoAsync*
  implements:
  - Discord.IDiscordClient.GetApplicationInfoAsync(Discord.RequestOptions)
  nameWithType.vb: BaseSocketClient.Discord.IDiscordClient.GetApplicationInfoAsync(RequestOptions)
  name.vb: Discord.IDiscordClient.GetApplicationInfoAsync(RequestOptions)
- uid: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IDiscordClient#GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: IDiscordClient.GetChannelAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: BaseSocketClient.IDiscordClient.GetChannelAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.WebSocket.BaseSocketClient.Discord.IDiscordClient.GetChannelAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IDiscordClient.GetChannelAsync
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 263
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a generic channel.\n"
  example: []
  syntax:
    content: Task<IChannel> IDiscordClient.GetChannelAsync(ulong id, CacheMode mode, RequestOptions options)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the channel (e.g. `381889909113225237`).
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains the channel associated\nwith the snowflake identifier; <code>null</code> when the channel cannot be found.\n"
    content.vb: Function Discord.IDiscordClient.GetChannelAsync(id As ULong, mode As CacheMode, options As RequestOptions) As Task(Of IChannel) Implements IDiscordClient.GetChannelAsync
  overload: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetChannelAsync*
  implements:
  - Discord.IDiscordClient.GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: BaseSocketClient.Discord.IDiscordClient.GetChannelAsync(UInt64, CacheMode, RequestOptions)
  name.vb: Discord.IDiscordClient.GetChannelAsync(UInt64, CacheMode, RequestOptions)
- uid: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetPrivateChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetPrivateChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IDiscordClient#GetPrivateChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: IDiscordClient.GetPrivateChannelsAsync(CacheMode, RequestOptions)
  nameWithType: BaseSocketClient.IDiscordClient.GetPrivateChannelsAsync(CacheMode, RequestOptions)
  fullName: Discord.WebSocket.BaseSocketClient.Discord.IDiscordClient.GetPrivateChannelsAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IDiscordClient.GetPrivateChannelsAsync
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 266
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of private channels opened in this session.\n"
  remarks: "\nThis method will retrieve all private channels (including direct-message, group channel and such) that\nare currently opened in this session.\n<div class=\"WARNING\"><h5>warning</h5><p>\n    This method will not return previously opened private channels outside of the current session! If\n    you have just started the client, this may return an empty collection.\n</p></div>\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<IPrivateChannel>> IDiscordClient.GetPrivateChannelsAsync(CacheMode mode, RequestOptions options)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IPrivateChannel}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection\nof private channels that the user currently partakes in.\n"
    content.vb: Function Discord.IDiscordClient.GetPrivateChannelsAsync(mode As CacheMode, options As RequestOptions) As Task(Of IReadOnlyCollection(Of IPrivateChannel)) Implements IDiscordClient.GetPrivateChannelsAsync
  overload: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetPrivateChannelsAsync*
  implements:
  - Discord.IDiscordClient.GetPrivateChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: BaseSocketClient.Discord.IDiscordClient.GetPrivateChannelsAsync(CacheMode, RequestOptions)
  name.vb: Discord.IDiscordClient.GetPrivateChannelsAsync(CacheMode, RequestOptions)
- uid: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetConnectionsAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetConnectionsAsync(Discord.RequestOptions)
  id: Discord#IDiscordClient#GetConnectionsAsync(Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: IDiscordClient.GetConnectionsAsync(RequestOptions)
  nameWithType: BaseSocketClient.IDiscordClient.GetConnectionsAsync(RequestOptions)
  fullName: Discord.WebSocket.BaseSocketClient.Discord.IDiscordClient.GetConnectionsAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IDiscordClient.GetConnectionsAsync
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 270
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the connections that the user has set up.\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<IConnection>> IDiscordClient.GetConnectionsAsync(RequestOptions options)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IConnection}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection of connections.\n"
    content.vb: Function Discord.IDiscordClient.GetConnectionsAsync(options As RequestOptions) As Task(Of IReadOnlyCollection(Of IConnection)) Implements IDiscordClient.GetConnectionsAsync
  overload: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetConnectionsAsync*
  implements:
  - Discord.IDiscordClient.GetConnectionsAsync(Discord.RequestOptions)
  nameWithType.vb: BaseSocketClient.Discord.IDiscordClient.GetConnectionsAsync(RequestOptions)
  name.vb: Discord.IDiscordClient.GetConnectionsAsync(RequestOptions)
- uid: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetInviteAsync(System.String,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetInviteAsync(System.String,Discord.RequestOptions)
  id: Discord#IDiscordClient#GetInviteAsync(System.String,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: IDiscordClient.GetInviteAsync(String, RequestOptions)
  nameWithType: BaseSocketClient.IDiscordClient.GetInviteAsync(String, RequestOptions)
  fullName: Discord.WebSocket.BaseSocketClient.Discord.IDiscordClient.GetInviteAsync(System.String, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IDiscordClient.GetInviteAsync
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 274
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets an invite.\n"
  example: []
  syntax:
    content: Task<IInvite> IDiscordClient.GetInviteAsync(string inviteId, RequestOptions options)
    parameters:
    - id: inviteId
      type: System.String
      description: The invitation identifier.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IInvite}
      description: "\nA task that represents the asynchronous get operation. The task result contains the invite information.\n"
    content.vb: Function Discord.IDiscordClient.GetInviteAsync(inviteId As String, options As RequestOptions) As Task(Of IInvite) Implements IDiscordClient.GetInviteAsync
  overload: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetInviteAsync*
  implements:
  - Discord.IDiscordClient.GetInviteAsync(System.String,Discord.RequestOptions)
  nameWithType.vb: BaseSocketClient.Discord.IDiscordClient.GetInviteAsync(String, RequestOptions)
  name.vb: Discord.IDiscordClient.GetInviteAsync(String, RequestOptions)
- uid: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetGuildAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetGuildAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IDiscordClient#GetGuildAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: IDiscordClient.GetGuildAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: BaseSocketClient.IDiscordClient.GetGuildAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.WebSocket.BaseSocketClient.Discord.IDiscordClient.GetGuildAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IDiscordClient.GetGuildAsync
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 278
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a guild.\n"
  example: []
  syntax:
    content: Task<IGuild> IDiscordClient.GetGuildAsync(ulong id, CacheMode mode, RequestOptions options)
    parameters:
    - id: id
      type: System.UInt64
      description: The guild snowflake identifier.
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IGuild}
      description: "\nA task that represents the asynchronous get operation. The task result contains the guild associated\nwith the snowflake identifier; <code>null</code> when the guild cannot be found.\n"
    content.vb: Function Discord.IDiscordClient.GetGuildAsync(id As ULong, mode As CacheMode, options As RequestOptions) As Task(Of IGuild) Implements IDiscordClient.GetGuildAsync
  overload: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetGuildAsync*
  implements:
  - Discord.IDiscordClient.GetGuildAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: BaseSocketClient.Discord.IDiscordClient.GetGuildAsync(UInt64, CacheMode, RequestOptions)
  name.vb: Discord.IDiscordClient.GetGuildAsync(UInt64, CacheMode, RequestOptions)
- uid: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetGuildsAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetGuildsAsync(Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IDiscordClient#GetGuildsAsync(Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: IDiscordClient.GetGuildsAsync(CacheMode, RequestOptions)
  nameWithType: BaseSocketClient.IDiscordClient.GetGuildsAsync(CacheMode, RequestOptions)
  fullName: Discord.WebSocket.BaseSocketClient.Discord.IDiscordClient.GetGuildsAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IDiscordClient.GetGuildsAsync
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 281
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of guilds that the user is currently in.\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<IGuild>> IDiscordClient.GetGuildsAsync(CacheMode mode, RequestOptions options)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IGuild}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection\nof guilds that the current user is in.\n"
    content.vb: Function Discord.IDiscordClient.GetGuildsAsync(mode As CacheMode, options As RequestOptions) As Task(Of IReadOnlyCollection(Of IGuild)) Implements IDiscordClient.GetGuildsAsync
  overload: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetGuildsAsync*
  implements:
  - Discord.IDiscordClient.GetGuildsAsync(Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: BaseSocketClient.Discord.IDiscordClient.GetGuildsAsync(CacheMode, RequestOptions)
  name.vb: Discord.IDiscordClient.GetGuildsAsync(CacheMode, RequestOptions)
- uid: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#CreateGuildAsync(System.String,Discord.IVoiceRegion,System.IO.Stream,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#CreateGuildAsync(System.String,Discord.IVoiceRegion,System.IO.Stream,Discord.RequestOptions)
  id: Discord#IDiscordClient#CreateGuildAsync(System.String,Discord.IVoiceRegion,System.IO.Stream,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: IDiscordClient.CreateGuildAsync(String, IVoiceRegion, Stream, RequestOptions)
  nameWithType: BaseSocketClient.IDiscordClient.CreateGuildAsync(String, IVoiceRegion, Stream, RequestOptions)
  fullName: Discord.WebSocket.BaseSocketClient.Discord.IDiscordClient.CreateGuildAsync(System.String, Discord.IVoiceRegion, System.IO.Stream, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IDiscordClient.CreateGuildAsync
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 285
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nCreates a guild for the logged-in user who is in less than 10 active guilds.\n"
  remarks: "\nThis method creates a new guild on behalf of the logged-in user.\n<div class=\"WARNING\"><h5>warning</h5><p>\n    Due to Discord&apos;s limitation, this method will only work for users that are in less than 10 guilds.\n</p></div>\n"
  example: []
  syntax:
    content: Task<IGuild> IDiscordClient.CreateGuildAsync(string name, IVoiceRegion region, Stream jpegIcon, RequestOptions options)
    parameters:
    - id: name
      type: System.String
      description: The name of the new guild.
    - id: region
      type: Discord.IVoiceRegion
      description: The voice region to create the guild with.
    - id: jpegIcon
      type: System.IO.Stream
      description: The icon of the guild.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IGuild}
      description: "\nA task that represents the asynchronous creation operation. The task result contains the created guild.\n"
    content.vb: Function Discord.IDiscordClient.CreateGuildAsync(name As String, region As IVoiceRegion, jpegIcon As Stream, options As RequestOptions) As Task(Of IGuild) Implements IDiscordClient.CreateGuildAsync
  overload: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#CreateGuildAsync*
  implements:
  - Discord.IDiscordClient.CreateGuildAsync(System.String,Discord.IVoiceRegion,System.IO.Stream,Discord.RequestOptions)
  nameWithType.vb: BaseSocketClient.Discord.IDiscordClient.CreateGuildAsync(String, IVoiceRegion, Stream, RequestOptions)
  name.vb: Discord.IDiscordClient.CreateGuildAsync(String, IVoiceRegion, Stream, RequestOptions)
- uid: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IDiscordClient#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: IDiscordClient.GetUserAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: BaseSocketClient.IDiscordClient.GetUserAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.WebSocket.BaseSocketClient.Discord.IDiscordClient.GetUserAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IDiscordClient.GetUserAsync
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 289
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a user.\n"
  example: []
  syntax:
    content: Task<IUser> IDiscordClient.GetUserAsync(ulong id, CacheMode mode, RequestOptions options)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the user (e.g. `168693960628371456`).
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IUser}
      description: "\nA task that represents the asynchronous get operation. The task result contains the user associated with\nthe snowflake identifier; <code>null</code> if the user is not found.\n"
    content.vb: Function Discord.IDiscordClient.GetUserAsync(id As ULong, mode As CacheMode, options As RequestOptions) As Task(Of IUser) Implements IDiscordClient.GetUserAsync
  overload: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetUserAsync*
  implements:
  - Discord.IDiscordClient.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: BaseSocketClient.Discord.IDiscordClient.GetUserAsync(UInt64, CacheMode, RequestOptions)
  name.vb: Discord.IDiscordClient.GetUserAsync(UInt64, CacheMode, RequestOptions)
- uid: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetUserAsync(System.String,System.String,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetUserAsync(System.String,System.String,Discord.RequestOptions)
  id: Discord#IDiscordClient#GetUserAsync(System.String,System.String,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: IDiscordClient.GetUserAsync(String, String, RequestOptions)
  nameWithType: BaseSocketClient.IDiscordClient.GetUserAsync(String, String, RequestOptions)
  fullName: Discord.WebSocket.BaseSocketClient.Discord.IDiscordClient.GetUserAsync(System.String, System.String, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IDiscordClient.GetUserAsync
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 292
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a user.\n"
  example: []
  syntax:
    content: Task<IUser> IDiscordClient.GetUserAsync(string username, string discriminator, RequestOptions options)
    parameters:
    - id: username
      type: System.String
      description: The name of the user (e.g. `Still`).
    - id: discriminator
      type: System.String
      description: The discriminator value of the user (e.g. `2876`).
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IUser}
      description: "\nA task that represents the asynchronous get operation. The task result contains the user associated with\nthe name and the discriminator; <code>null</code> if the user is not found.\n"
    content.vb: Function Discord.IDiscordClient.GetUserAsync(username As String, discriminator As String, options As RequestOptions) As Task(Of IUser) Implements IDiscordClient.GetUserAsync
  overload: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetUserAsync*
  implements:
  - Discord.IDiscordClient.GetUserAsync(System.String,System.String,Discord.RequestOptions)
  nameWithType.vb: BaseSocketClient.Discord.IDiscordClient.GetUserAsync(String, String, RequestOptions)
  name.vb: Discord.IDiscordClient.GetUserAsync(String, String, RequestOptions)
- uid: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetVoiceRegionAsync(System.String,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetVoiceRegionAsync(System.String,Discord.RequestOptions)
  id: Discord#IDiscordClient#GetVoiceRegionAsync(System.String,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: IDiscordClient.GetVoiceRegionAsync(String, RequestOptions)
  nameWithType: BaseSocketClient.IDiscordClient.GetVoiceRegionAsync(String, RequestOptions)
  fullName: Discord.WebSocket.BaseSocketClient.Discord.IDiscordClient.GetVoiceRegionAsync(System.String, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IDiscordClient.GetVoiceRegionAsync
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 296
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a voice region.\n"
  example: []
  syntax:
    content: Task<IVoiceRegion> IDiscordClient.GetVoiceRegionAsync(string id, RequestOptions options)
    parameters:
    - id: id
      type: System.String
      description: The identifier of the voice region (e.g. <code>eu-central</code> ).
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IVoiceRegion}
      description: "\nA task that represents the asynchronous get operation. The task result contains the voice region\nassociated with the identifier; <code>null</code> if the voice region is not found.\n"
    content.vb: Function Discord.IDiscordClient.GetVoiceRegionAsync(id As String, options As RequestOptions) As Task(Of IVoiceRegion) Implements IDiscordClient.GetVoiceRegionAsync
  overload: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetVoiceRegionAsync*
  implements:
  - Discord.IDiscordClient.GetVoiceRegionAsync(System.String,Discord.RequestOptions)
  nameWithType.vb: BaseSocketClient.Discord.IDiscordClient.GetVoiceRegionAsync(String, RequestOptions)
  name.vb: Discord.IDiscordClient.GetVoiceRegionAsync(String, RequestOptions)
- uid: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetVoiceRegionsAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetVoiceRegionsAsync(Discord.RequestOptions)
  id: Discord#IDiscordClient#GetVoiceRegionsAsync(Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: IDiscordClient.GetVoiceRegionsAsync(RequestOptions)
  nameWithType: BaseSocketClient.IDiscordClient.GetVoiceRegionsAsync(RequestOptions)
  fullName: Discord.WebSocket.BaseSocketClient.Discord.IDiscordClient.GetVoiceRegionsAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IDiscordClient.GetVoiceRegionsAsync
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.cs
    startLine: 299
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of the available voice regions.\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<IVoiceRegion>> IDiscordClient.GetVoiceRegionsAsync(RequestOptions options)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IVoiceRegion}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection\nwith all of the available voice regions in this session.\n"
    content.vb: Function Discord.IDiscordClient.GetVoiceRegionsAsync(options As RequestOptions) As Task(Of IReadOnlyCollection(Of IVoiceRegion)) Implements IDiscordClient.GetVoiceRegionsAsync
  overload: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetVoiceRegionsAsync*
  implements:
  - Discord.IDiscordClient.GetVoiceRegionsAsync(Discord.RequestOptions)
  nameWithType.vb: BaseSocketClient.Discord.IDiscordClient.GetVoiceRegionsAsync(RequestOptions)
  name.vb: Discord.IDiscordClient.GetVoiceRegionsAsync(RequestOptions)
- uid: Discord.WebSocket.BaseSocketClient.ChannelCreated
  commentId: E:Discord.WebSocket.BaseSocketClient.ChannelCreated
  id: ChannelCreated
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: ChannelCreated
  nameWithType: BaseSocketClient.ChannelCreated
  fullName: Discord.WebSocket.BaseSocketClient.ChannelCreated
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ChannelCreated
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 25
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when a channel is created. '
  remarks: "\n<p>\n    This event is fired when a generic channel has been created. The event handler must return a\n<xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> and accept a <xref href=\"Discord.WebSocket.SocketChannel\" data-throw-if-not-resolved=\"false\"></xref> as its parameter.\n</p>\n<p>\n    The newly created channel is passed into the event handler parameter. The given channel type may\n    include, but not limited to, Private Channels (DM, Group), Guild Channels (Text, Voice, Category);\n    see the derived classes of <xref href=\"Discord.WebSocket.SocketChannel\" data-throw-if-not-resolved=\"false\"></xref> for more details.\n</p>\n"
  example:
  - "\n<pre><code class=\"lang-cs\" region=\"ChannelCreated\" source=\"..\\Discord.Net.Examples\\WebSocket\\BaseSocketClient.Events.Examples.cs\">public void HookChannelCreated(BaseSocketClient client)\n    => client.ChannelCreated += HandleChannelCreated;\n\npublic Task HandleChannelCreated(SocketChannel channel)\n{\n    if (channel is SocketGuildChannel guildChannel)\n        Console.WriteLine($&quot;A new channel &apos;{guildChannel.Name}&apos;({guildChannel.Id}, {guildChannel.GetType()})&quot;\n                          + $&quot;has been created at {guildChannel.CreatedAt}.&quot;);\n    return Task.CompletedTask;\n}</code></pre>\n"
  syntax:
    content: public event Func<SocketChannel, Task> ChannelCreated
    return:
      type: System.Func{Discord.WebSocket.SocketChannel,System.Threading.Tasks.Task}
    content.vb: Public Event ChannelCreated As Func(Of SocketChannel, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.ChannelDestroyed
  commentId: E:Discord.WebSocket.BaseSocketClient.ChannelDestroyed
  id: ChannelDestroyed
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: ChannelDestroyed
  nameWithType: BaseSocketClient.ChannelDestroyed
  fullName: Discord.WebSocket.BaseSocketClient.ChannelDestroyed
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ChannelDestroyed
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 47
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when a channel is destroyed. '
  remarks: "\n<p>\n    This event is fired when a generic channel has been destroyed. The event handler must return a\n<xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> and accept a <xref href=\"Discord.WebSocket.SocketChannel\" data-throw-if-not-resolved=\"false\"></xref> as its parameter.\n</p>\n<p>\n    The destroyed channel is passed into the event handler parameter. The given channel type may\n    include, but not limited to, Private Channels (DM, Group), Guild Channels (Text, Voice, Category);\n    see the derived classes of <xref href=\"Discord.WebSocket.SocketChannel\" data-throw-if-not-resolved=\"false\"></xref> for more details.\n</p>\n"
  example:
  - "\n<pre><code class=\"lang-cs\" region=\"ChannelDestroyed\" source=\"..\\Discord.Net.Examples\\WebSocket\\BaseSocketClient.Events.Examples.cs\">public void HookChannelDestroyed(BaseSocketClient client)\n    => client.ChannelDestroyed += HandleChannelDestroyed;\n\npublic Task HandleChannelDestroyed(SocketChannel channel)\n{\n    if (channel is SocketGuildChannel guildChannel)\n        Console.WriteLine(\n            $&quot;A new channel &apos;{guildChannel.Name}&apos;({guildChannel.Id}, {guildChannel.GetType()}) has been deleted.&quot;);\n    return Task.CompletedTask;\n}</code></pre>\n"
  syntax:
    content: public event Func<SocketChannel, Task> ChannelDestroyed
    return:
      type: System.Func{Discord.WebSocket.SocketChannel,System.Threading.Tasks.Task}
    content.vb: Public Event ChannelDestroyed As Func(Of SocketChannel, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.ChannelUpdated
  commentId: E:Discord.WebSocket.BaseSocketClient.ChannelUpdated
  id: ChannelUpdated
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: ChannelUpdated
  nameWithType: BaseSocketClient.ChannelUpdated
  fullName: Discord.WebSocket.BaseSocketClient.ChannelUpdated
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ChannelUpdated
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 69
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when a channel is updated. '
  remarks: "\n<p>\n    This event is fired when a generic channel has been destroyed. The event handler must return a\n<xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> and accept 2 <xref href=\"Discord.WebSocket.SocketChannel\" data-throw-if-not-resolved=\"false\"></xref> as its parameters.\n</p>\n<p>\n    The original (prior to update) channel is passed into the first <xref href=\"Discord.WebSocket.SocketChannel\" data-throw-if-not-resolved=\"false\"></xref>, while\n    the updated channel is passed into the second. The given channel type may include, but not limited\n    to, Private Channels (DM, Group), Guild Channels (Text, Voice, Category); see the derived classes of\n<xref href=\"Discord.WebSocket.SocketChannel\" data-throw-if-not-resolved=\"false\"></xref> for more details.\n</p>\n"
  example:
  - "\n<pre><code class=\"lang-cs\" region=\"ChannelUpdated\" source=\"..\\Discord.Net.Examples\\WebSocket\\BaseSocketClient.Events.Examples.cs\">public void HookChannelUpdated(BaseSocketClient client)\n    => client.ChannelUpdated += HandleChannelRename;\n\npublic Task HandleChannelRename(SocketChannel beforeChannel, SocketChannel afterChannel)\n{\n    if (beforeChannel is SocketGuildChannel beforeGuildChannel &amp;&amp;\n        afterChannel is SocketGuildChannel afterGuildChannel)\n        if (beforeGuildChannel.Name != afterGuildChannel.Name)\n            Console.WriteLine(\n                $&quot;A channel ({beforeChannel.Id}) is renamed from {beforeGuildChannel.Name} to {afterGuildChannel.Name}.&quot;);\n    return Task.CompletedTask;\n}</code></pre>\n"
  syntax:
    content: public event Func<SocketChannel, SocketChannel, Task> ChannelUpdated
    return:
      type: System.Func{Discord.WebSocket.SocketChannel,Discord.WebSocket.SocketChannel,System.Threading.Tasks.Task}
    content.vb: Public Event ChannelUpdated As Func(Of SocketChannel, SocketChannel, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.MessageReceived
  commentId: E:Discord.WebSocket.BaseSocketClient.MessageReceived
  id: MessageReceived
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: MessageReceived
  nameWithType: BaseSocketClient.MessageReceived
  fullName: Discord.WebSocket.BaseSocketClient.MessageReceived
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: MessageReceived
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 94
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when a message is received. '
  remarks: "\n<p>\n    This event is fired when a message is received. The event handler must return a\n<xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> and accept a <xref href=\"Discord.WebSocket.SocketMessage\" data-throw-if-not-resolved=\"false\"></xref> as its parameter.\n</p>\n<p>\n    The message that is sent to the client is passed into the event handler parameter as\n<xref href=\"Discord.WebSocket.SocketMessage\" data-throw-if-not-resolved=\"false\"></xref>. This message may be a system message (i.e.\n<xref href=\"Discord.WebSocket.SocketSystemMessage\" data-throw-if-not-resolved=\"false\"></xref>) or a user message (i.e. <xref href=\"Discord.WebSocket.SocketUserMessage\" data-throw-if-not-resolved=\"false\"></xref>. See the\nderived classes of <xref href=\"Discord.WebSocket.SocketMessage\" data-throw-if-not-resolved=\"false\"></xref> for more details.\n</p>\n"
  example:
  - "\n<p>The example below checks if the newly received message contains the target user.</p>\n<pre><code class=\"lang-cs\" region=\"MessageReceived\" source=\"..\\Discord.Net.Examples\\WebSocket\\BaseSocketClient.Events.Examples.cs\">private readonly ulong[] _targetUserIds = {168693960628371456, 53905483156684800};\n\npublic void HookMessageReceived(BaseSocketClient client)\n    => client.MessageReceived += HandleMessageReceived;\n\npublic Task HandleMessageReceived(SocketMessage message)\n{\n    // check if the message is a user message as opposed to a system message (e.g. Clyde, pins, etc.)\n    if (!(message is SocketUserMessage userMessage)) return Task.CompletedTask;\n    // check if the message origin is a guild message channel\n    if (!(userMessage.Channel is SocketTextChannel textChannel)) return Task.CompletedTask;\n    // check if the target user was mentioned\n    var targetUsers = userMessage.MentionedUsers.Where(x => _targetUserIds.Contains(x.Id));\n    foreach (var targetUser in targetUsers)\n        Console.WriteLine(\n            $&quot;{targetUser} was mentioned in the message &apos;{message.Content}&apos; by {message.Author} in {textChannel.Name}.&quot;);\n    return Task.CompletedTask;\n}</code></pre>\n"
  syntax:
    content: public event Func<SocketMessage, Task> MessageReceived
    return:
      type: System.Func{Discord.WebSocket.SocketMessage,System.Threading.Tasks.Task}
    content.vb: Public Event MessageReceived As Func(Of SocketMessage, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.MessageDeleted
  commentId: E:Discord.WebSocket.BaseSocketClient.MessageDeleted
  id: MessageDeleted
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: MessageDeleted
  nameWithType: BaseSocketClient.MessageDeleted
  fullName: Discord.WebSocket.BaseSocketClient.MessageDeleted
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: MessageDeleted
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 126
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when a message is deleted. '
  remarks: "\n<p>\n    This event is fired when a message is deleted. The event handler must return a\n<xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> and accept a <xref href=\"Discord.Cacheable%602\" data-throw-if-not-resolved=\"false\"></xref> and \n<xref href=\"Discord.WebSocket.ISocketMessageChannel\" data-throw-if-not-resolved=\"false\"></xref> as its parameters.\n</p>\n<p>\n<div class=\"IMPORTANT\"><h5>important</h5><p>\n    It is not possible to retrieve the message via\n<xref href=\"Discord.Cacheable%602.DownloadAsync\" data-throw-if-not-resolved=\"false\"></xref>; the message cannot be retrieved by Discord\nafter the message has been deleted.\n</p></div>\nIf caching is enabled via <xref href=\"Discord.WebSocket.DiscordSocketConfig\" data-throw-if-not-resolved=\"false\"></xref>, the\n<xref href=\"Discord.Cacheable%602\" data-throw-if-not-resolved=\"false\"></xref> entity will contain the deleted message; otherwise, in event\nthat the message cannot be retrieved, the snowflake ID of the message is preserved in the \n<xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>\n    The source channel of the removed message will be passed into the \n<xref href=\"Discord.WebSocket.ISocketMessageChannel\" data-throw-if-not-resolved=\"false\"></xref> parameter.\n</p>\n"
  example:
  - "\n<pre><code class=\"lang-cs\" region=\"MessageDeleted\" source=\"..\\Discord.Net.Examples\\WebSocket\\BaseSocketClient.Events.Examples.cs\">public void HookMessageDeleted(BaseSocketClient client)\n    => client.MessageDeleted += HandleMessageDelete;\n\npublic Task HandleMessageDelete(Cacheable&lt;IMessage, ulong> cachedMessage, ISocketMessageChannel channel)\n{\n    // check if the message exists in cache; if not, we cannot report what was removed\n    if (!cachedMessage.HasValue) return Task.CompletedTask;\n    var message = cachedMessage.Value;\n    Console.WriteLine(\n        $&quot;A message ({message.Id}) from {message.Author} was removed from the channel {channel.Name} ({channel.Id}):&quot;\n        + Environment.NewLine\n        + message.Content);\n    return Task.CompletedTask;\n}</code></pre>\n"
  syntax:
    content: public event Func<Cacheable<IMessage, ulong>, ISocketMessageChannel, Task> MessageDeleted
    return:
      type: System.Func{Discord.Cacheable{Discord.IMessage,System.UInt64},Discord.WebSocket.ISocketMessageChannel,System.Threading.Tasks.Task}
    content.vb: Public Event MessageDeleted As Func(Of Cacheable(Of IMessage, ULong), ISocketMessageChannel, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.MessagesBulkDeleted
  commentId: E:Discord.WebSocket.BaseSocketClient.MessagesBulkDeleted
  id: MessagesBulkDeleted
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: MessagesBulkDeleted
  nameWithType: BaseSocketClient.MessagesBulkDeleted
  fullName: Discord.WebSocket.BaseSocketClient.MessagesBulkDeleted
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: MessagesBulkDeleted
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 157
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when multiple messages are bulk deleted. '
  remarks: "\n<div class=\"NOTE\"><h5>note</h5><p>\n    The <xref href=\"Discord.WebSocket.BaseSocketClient.MessageDeleted\" data-throw-if-not-resolved=\"false\"></xref> event will not be fired for individual messages contained in this event.\n</p></div>\n<p>\n    This event is fired when multiple messages are bulk deleted. The event handler must return a\n<xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> and accept an <xref href=\"System.Collections.Generic.IReadOnlyCollection%601\" data-throw-if-not-resolved=\"false\"></xref> and \n<xref href=\"Discord.WebSocket.ISocketMessageChannel\" data-throw-if-not-resolved=\"false\"></xref> as its parameters.\n</p>\n<p>\n<div class=\"IMPORTANT\"><h5>important</h5><p>\n    It is not possible to retrieve the message via\n<xref href=\"Discord.Cacheable%602.DownloadAsync\" data-throw-if-not-resolved=\"false\"></xref>; the message cannot be retrieved by Discord\nafter the message has been deleted.\n</p></div>\nIf caching is enabled via <xref href=\"Discord.WebSocket.DiscordSocketConfig\" data-throw-if-not-resolved=\"false\"></xref>, the\n<xref href=\"Discord.Cacheable%602\" data-throw-if-not-resolved=\"false\"></xref> entity will contain the deleted message; otherwise, in event\nthat the message cannot be retrieved, the snowflake ID of the message is preserved in the \n<xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>\n    The source channel of the removed message will be passed into the \n<xref href=\"Discord.WebSocket.ISocketMessageChannel\" data-throw-if-not-resolved=\"false\"></xref> parameter.\n</p>\n"
  example: []
  syntax:
    content: public event Func<IReadOnlyCollection<Cacheable<IMessage, ulong>>, ISocketMessageChannel, Task> MessagesBulkDeleted
    return:
      type: System.Func{System.Collections.Generic.IReadOnlyCollection{Discord.Cacheable{Discord.IMessage,System.UInt64}},Discord.WebSocket.ISocketMessageChannel,System.Threading.Tasks.Task}
    content.vb: Public Event MessagesBulkDeleted As Func(Of IReadOnlyCollection(Of Cacheable(Of IMessage, ULong)), ISocketMessageChannel, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.MessageUpdated
  commentId: E:Discord.WebSocket.BaseSocketClient.MessageUpdated
  id: MessageUpdated
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: MessageUpdated
  nameWithType: BaseSocketClient.MessageUpdated
  fullName: Discord.WebSocket.BaseSocketClient.MessageUpdated
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: MessageUpdated
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 184
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when a message is updated. '
  remarks: "\n<p>\n    This event is fired when a message is updated. The event handler must return a\n<xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> and accept a <xref href=\"Discord.Cacheable%602\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Discord.WebSocket.SocketMessage\" data-throw-if-not-resolved=\"false\"></xref>,\nand <xref href=\"Discord.WebSocket.ISocketMessageChannel\" data-throw-if-not-resolved=\"false\"></xref> as its parameters.\n</p>\n<p>\n    If caching is enabled via <xref href=\"Discord.WebSocket.DiscordSocketConfig\" data-throw-if-not-resolved=\"false\"></xref>, the\n<xref href=\"Discord.Cacheable%602\" data-throw-if-not-resolved=\"false\"></xref> entity will contain the original message; otherwise, in event\nthat the message cannot be retrieved, the snowflake ID of the message is preserved in the \n<xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>\n    The updated message will be passed into the <xref href=\"Discord.WebSocket.SocketMessage\" data-throw-if-not-resolved=\"false\"></xref> parameter.\n</p>\n<p>\n    The source channel of the updated message will be passed into the \n<xref href=\"Discord.WebSocket.ISocketMessageChannel\" data-throw-if-not-resolved=\"false\"></xref> parameter.\n</p>\n"
  example: []
  syntax:
    content: public event Func<Cacheable<IMessage, ulong>, SocketMessage, ISocketMessageChannel, Task> MessageUpdated
    return:
      type: System.Func{Discord.Cacheable{Discord.IMessage,System.UInt64},Discord.WebSocket.SocketMessage,Discord.WebSocket.ISocketMessageChannel,System.Threading.Tasks.Task}
    content.vb: Public Event MessageUpdated As Func(Of Cacheable(Of IMessage, ULong), SocketMessage, ISocketMessageChannel, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.ReactionAdded
  commentId: E:Discord.WebSocket.BaseSocketClient.ReactionAdded
  id: ReactionAdded
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: ReactionAdded
  nameWithType: BaseSocketClient.ReactionAdded
  fullName: Discord.WebSocket.BaseSocketClient.ReactionAdded
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ReactionAdded
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 219
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when a reaction is added to a message. '
  remarks: "\n<p>\n    This event is fired when a reaction is added to a user message. The event handler must return a\n<xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> and accept a <xref href=\"Discord.Cacheable%602\" data-throw-if-not-resolved=\"false\"></xref>, an \n<xref href=\"Discord.WebSocket.ISocketMessageChannel\" data-throw-if-not-resolved=\"false\"></xref>, and a <xref href=\"Discord.WebSocket.SocketReaction\" data-throw-if-not-resolved=\"false\"></xref> as its parameter.\n</p>\n<p>\n    If caching is enabled via <xref href=\"Discord.WebSocket.DiscordSocketConfig\" data-throw-if-not-resolved=\"false\"></xref>, the\n<xref href=\"Discord.Cacheable%602\" data-throw-if-not-resolved=\"false\"></xref> entity will contain the original message; otherwise, in event\nthat the message cannot be retrieved, the snowflake ID of the message is preserved in the \n<xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>\n    The source channel of the reaction addition will be passed into the \n<xref href=\"Discord.WebSocket.ISocketMessageChannel\" data-throw-if-not-resolved=\"false\"></xref> parameter.\n</p>\n<p>\n    The reaction that was added will be passed into the <xref href=\"Discord.WebSocket.SocketReaction\" data-throw-if-not-resolved=\"false\"></xref> parameter.\n</p>\n<div class=\"NOTE\"><h5>note</h5><p>\n    When fetching the reaction from this event, a user may not be provided under \n<xref href=\"Discord.WebSocket.SocketReaction.User\" data-throw-if-not-resolved=\"false\"></xref>. Please see the documentation of the property for more\ninformation.\n</p></div>\n"
  example:
  - "\n<pre><code class=\"lang-cs\" region=\"ReactionAdded\" source=\"..\\Discord.Net.Examples\\WebSocket\\BaseSocketClient.Events.Examples.cs\">public void HookReactionAdded(BaseSocketClient client)\n    => client.ReactionAdded += HandleReactionAddedAsync;\n\npublic async Task HandleReactionAddedAsync(Cacheable&lt;IUserMessage, ulong> cachedMessage,\n    ISocketMessageChannel originChannel, SocketReaction reaction)\n{\n    var message = await cachedMessage.GetOrDownloadAsync();\n    if (message != null &amp;&amp; reaction.User.IsSpecified)\n        Console.WriteLine($&quot;{reaction.User.Value} just added a reaction &apos;{reaction.Emote}&apos; &quot; +\n                          $&quot;to {message.Author}&apos;s message ({message.Id}).&quot;);\n}</code></pre>\n"
  syntax:
    content: public event Func<Cacheable<IUserMessage, ulong>, ISocketMessageChannel, SocketReaction, Task> ReactionAdded
    return:
      type: System.Func{Discord.Cacheable{Discord.IUserMessage,System.UInt64},Discord.WebSocket.ISocketMessageChannel,Discord.WebSocket.SocketReaction,System.Threading.Tasks.Task}
    content.vb: Public Event ReactionAdded As Func(Of Cacheable(Of IUserMessage, ULong), ISocketMessageChannel, SocketReaction, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.ReactionRemoved
  commentId: E:Discord.WebSocket.BaseSocketClient.ReactionRemoved
  id: ReactionRemoved
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: ReactionRemoved
  nameWithType: BaseSocketClient.ReactionRemoved
  fullName: Discord.WebSocket.BaseSocketClient.ReactionRemoved
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ReactionRemoved
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 225
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when a reaction is removed from a message. '
  example: []
  syntax:
    content: public event Func<Cacheable<IUserMessage, ulong>, ISocketMessageChannel, SocketReaction, Task> ReactionRemoved
    return:
      type: System.Func{Discord.Cacheable{Discord.IUserMessage,System.UInt64},Discord.WebSocket.ISocketMessageChannel,Discord.WebSocket.SocketReaction,System.Threading.Tasks.Task}
    content.vb: Public Event ReactionRemoved As Func(Of Cacheable(Of IUserMessage, ULong), ISocketMessageChannel, SocketReaction, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.ReactionsCleared
  commentId: E:Discord.WebSocket.BaseSocketClient.ReactionsCleared
  id: ReactionsCleared
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: ReactionsCleared
  nameWithType: BaseSocketClient.ReactionsCleared
  fullName: Discord.WebSocket.BaseSocketClient.ReactionsCleared
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ReactionsCleared
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 231
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when all reactions to a message are cleared. '
  example: []
  syntax:
    content: public event Func<Cacheable<IUserMessage, ulong>, ISocketMessageChannel, Task> ReactionsCleared
    return:
      type: System.Func{Discord.Cacheable{Discord.IUserMessage,System.UInt64},Discord.WebSocket.ISocketMessageChannel,System.Threading.Tasks.Task}
    content.vb: Public Event ReactionsCleared As Func(Of Cacheable(Of IUserMessage, ULong), ISocketMessageChannel, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.RoleCreated
  commentId: E:Discord.WebSocket.BaseSocketClient.RoleCreated
  id: RoleCreated
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: RoleCreated
  nameWithType: BaseSocketClient.RoleCreated
  fullName: Discord.WebSocket.BaseSocketClient.RoleCreated
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RoleCreated
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 239
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when a role is created. '
  example: []
  syntax:
    content: public event Func<SocketRole, Task> RoleCreated
    return:
      type: System.Func{Discord.WebSocket.SocketRole,System.Threading.Tasks.Task}
    content.vb: Public Event RoleCreated As Func(Of SocketRole, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.RoleDeleted
  commentId: E:Discord.WebSocket.BaseSocketClient.RoleDeleted
  id: RoleDeleted
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: RoleDeleted
  nameWithType: BaseSocketClient.RoleDeleted
  fullName: Discord.WebSocket.BaseSocketClient.RoleDeleted
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RoleDeleted
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 245
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when a role is deleted. '
  example: []
  syntax:
    content: public event Func<SocketRole, Task> RoleDeleted
    return:
      type: System.Func{Discord.WebSocket.SocketRole,System.Threading.Tasks.Task}
    content.vb: Public Event RoleDeleted As Func(Of SocketRole, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.RoleUpdated
  commentId: E:Discord.WebSocket.BaseSocketClient.RoleUpdated
  id: RoleUpdated
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: RoleUpdated
  nameWithType: BaseSocketClient.RoleUpdated
  fullName: Discord.WebSocket.BaseSocketClient.RoleUpdated
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RoleUpdated
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 251
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when a role is updated. '
  example: []
  syntax:
    content: public event Func<SocketRole, SocketRole, Task> RoleUpdated
    return:
      type: System.Func{Discord.WebSocket.SocketRole,Discord.WebSocket.SocketRole,System.Threading.Tasks.Task}
    content.vb: Public Event RoleUpdated As Func(Of SocketRole, SocketRole, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.JoinedGuild
  commentId: E:Discord.WebSocket.BaseSocketClient.JoinedGuild
  id: JoinedGuild
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: JoinedGuild
  nameWithType: BaseSocketClient.JoinedGuild
  fullName: Discord.WebSocket.BaseSocketClient.JoinedGuild
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: JoinedGuild
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 259
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when the connected account joins a guild. '
  example: []
  syntax:
    content: public event Func<SocketGuild, Task> JoinedGuild
    return:
      type: System.Func{Discord.WebSocket.SocketGuild,System.Threading.Tasks.Task}
    content.vb: Public Event JoinedGuild As Func(Of SocketGuild, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.LeftGuild
  commentId: E:Discord.WebSocket.BaseSocketClient.LeftGuild
  id: LeftGuild
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: LeftGuild
  nameWithType: BaseSocketClient.LeftGuild
  fullName: Discord.WebSocket.BaseSocketClient.LeftGuild
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: LeftGuild
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 265
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when the connected account leaves a guild. '
  example: []
  syntax:
    content: public event Func<SocketGuild, Task> LeftGuild
    return:
      type: System.Func{Discord.WebSocket.SocketGuild,System.Threading.Tasks.Task}
    content.vb: Public Event LeftGuild As Func(Of SocketGuild, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.GuildAvailable
  commentId: E:Discord.WebSocket.BaseSocketClient.GuildAvailable
  id: GuildAvailable
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: GuildAvailable
  nameWithType: BaseSocketClient.GuildAvailable
  fullName: Discord.WebSocket.BaseSocketClient.GuildAvailable
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GuildAvailable
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 271
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when a guild becomes available. '
  example: []
  syntax:
    content: public event Func<SocketGuild, Task> GuildAvailable
    return:
      type: System.Func{Discord.WebSocket.SocketGuild,System.Threading.Tasks.Task}
    content.vb: Public Event GuildAvailable As Func(Of SocketGuild, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.GuildUnavailable
  commentId: E:Discord.WebSocket.BaseSocketClient.GuildUnavailable
  id: GuildUnavailable
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: GuildUnavailable
  nameWithType: BaseSocketClient.GuildUnavailable
  fullName: Discord.WebSocket.BaseSocketClient.GuildUnavailable
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GuildUnavailable
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 277
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when a guild becomes unavailable. '
  example: []
  syntax:
    content: public event Func<SocketGuild, Task> GuildUnavailable
    return:
      type: System.Func{Discord.WebSocket.SocketGuild,System.Threading.Tasks.Task}
    content.vb: Public Event GuildUnavailable As Func(Of SocketGuild, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.GuildMembersDownloaded
  commentId: E:Discord.WebSocket.BaseSocketClient.GuildMembersDownloaded
  id: GuildMembersDownloaded
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: GuildMembersDownloaded
  nameWithType: BaseSocketClient.GuildMembersDownloaded
  fullName: Discord.WebSocket.BaseSocketClient.GuildMembersDownloaded
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GuildMembersDownloaded
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 283
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when offline guild members are downloaded. '
  example: []
  syntax:
    content: public event Func<SocketGuild, Task> GuildMembersDownloaded
    return:
      type: System.Func{Discord.WebSocket.SocketGuild,System.Threading.Tasks.Task}
    content.vb: Public Event GuildMembersDownloaded As Func(Of SocketGuild, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.GuildUpdated
  commentId: E:Discord.WebSocket.BaseSocketClient.GuildUpdated
  id: GuildUpdated
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: GuildUpdated
  nameWithType: BaseSocketClient.GuildUpdated
  fullName: Discord.WebSocket.BaseSocketClient.GuildUpdated
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GuildUpdated
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 289
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when a guild is updated. '
  example: []
  syntax:
    content: public event Func<SocketGuild, SocketGuild, Task> GuildUpdated
    return:
      type: System.Func{Discord.WebSocket.SocketGuild,Discord.WebSocket.SocketGuild,System.Threading.Tasks.Task}
    content.vb: Public Event GuildUpdated As Func(Of SocketGuild, SocketGuild, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.UserJoined
  commentId: E:Discord.WebSocket.BaseSocketClient.UserJoined
  id: UserJoined
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: UserJoined
  nameWithType: BaseSocketClient.UserJoined
  fullName: Discord.WebSocket.BaseSocketClient.UserJoined
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: UserJoined
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 297
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when a user joins a guild. '
  example: []
  syntax:
    content: public event Func<SocketGuildUser, Task> UserJoined
    return:
      type: System.Func{Discord.WebSocket.SocketGuildUser,System.Threading.Tasks.Task}
    content.vb: Public Event UserJoined As Func(Of SocketGuildUser, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.UserLeft
  commentId: E:Discord.WebSocket.BaseSocketClient.UserLeft
  id: UserLeft
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: UserLeft
  nameWithType: BaseSocketClient.UserLeft
  fullName: Discord.WebSocket.BaseSocketClient.UserLeft
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: UserLeft
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 303
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when a user leaves a guild. '
  example: []
  syntax:
    content: public event Func<SocketGuildUser, Task> UserLeft
    return:
      type: System.Func{Discord.WebSocket.SocketGuildUser,System.Threading.Tasks.Task}
    content.vb: Public Event UserLeft As Func(Of SocketGuildUser, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.UserBanned
  commentId: E:Discord.WebSocket.BaseSocketClient.UserBanned
  id: UserBanned
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: UserBanned
  nameWithType: BaseSocketClient.UserBanned
  fullName: Discord.WebSocket.BaseSocketClient.UserBanned
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: UserBanned
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 309
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when a user is banned from a guild. '
  example: []
  syntax:
    content: public event Func<SocketUser, SocketGuild, Task> UserBanned
    return:
      type: System.Func{Discord.WebSocket.SocketUser,Discord.WebSocket.SocketGuild,System.Threading.Tasks.Task}
    content.vb: Public Event UserBanned As Func(Of SocketUser, SocketGuild, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.UserUnbanned
  commentId: E:Discord.WebSocket.BaseSocketClient.UserUnbanned
  id: UserUnbanned
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: UserUnbanned
  nameWithType: BaseSocketClient.UserUnbanned
  fullName: Discord.WebSocket.BaseSocketClient.UserUnbanned
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: UserUnbanned
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 315
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when a user is unbanned from a guild. '
  example: []
  syntax:
    content: public event Func<SocketUser, SocketGuild, Task> UserUnbanned
    return:
      type: System.Func{Discord.WebSocket.SocketUser,Discord.WebSocket.SocketGuild,System.Threading.Tasks.Task}
    content.vb: Public Event UserUnbanned As Func(Of SocketUser, SocketGuild, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.UserUpdated
  commentId: E:Discord.WebSocket.BaseSocketClient.UserUpdated
  id: UserUpdated
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: UserUpdated
  nameWithType: BaseSocketClient.UserUpdated
  fullName: Discord.WebSocket.BaseSocketClient.UserUpdated
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: UserUpdated
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 321
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when a user is updated. '
  example: []
  syntax:
    content: public event Func<SocketUser, SocketUser, Task> UserUpdated
    return:
      type: System.Func{Discord.WebSocket.SocketUser,Discord.WebSocket.SocketUser,System.Threading.Tasks.Task}
    content.vb: Public Event UserUpdated As Func(Of SocketUser, SocketUser, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.GuildMemberUpdated
  commentId: E:Discord.WebSocket.BaseSocketClient.GuildMemberUpdated
  id: GuildMemberUpdated
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: GuildMemberUpdated
  nameWithType: BaseSocketClient.GuildMemberUpdated
  fullName: Discord.WebSocket.BaseSocketClient.GuildMemberUpdated
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GuildMemberUpdated
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 327
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when a guild member is updated, or a member presence is updated. '
  example: []
  syntax:
    content: public event Func<SocketGuildUser, SocketGuildUser, Task> GuildMemberUpdated
    return:
      type: System.Func{Discord.WebSocket.SocketGuildUser,Discord.WebSocket.SocketGuildUser,System.Threading.Tasks.Task}
    content.vb: Public Event GuildMemberUpdated As Func(Of SocketGuildUser, SocketGuildUser, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.UserVoiceStateUpdated
  commentId: E:Discord.WebSocket.BaseSocketClient.UserVoiceStateUpdated
  id: UserVoiceStateUpdated
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: UserVoiceStateUpdated
  nameWithType: BaseSocketClient.UserVoiceStateUpdated
  fullName: Discord.WebSocket.BaseSocketClient.UserVoiceStateUpdated
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: UserVoiceStateUpdated
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 333
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when a user joins, leaves, or moves voice channels. '
  example: []
  syntax:
    content: public event Func<SocketUser, SocketVoiceState, SocketVoiceState, Task> UserVoiceStateUpdated
    return:
      type: System.Func{Discord.WebSocket.SocketUser,Discord.WebSocket.SocketVoiceState,Discord.WebSocket.SocketVoiceState,System.Threading.Tasks.Task}
    content.vb: Public Event UserVoiceStateUpdated As Func(Of SocketUser, SocketVoiceState, SocketVoiceState, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.VoiceServerUpdated
  commentId: E:Discord.WebSocket.BaseSocketClient.VoiceServerUpdated
  id: VoiceServerUpdated
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: VoiceServerUpdated
  nameWithType: BaseSocketClient.VoiceServerUpdated
  fullName: Discord.WebSocket.BaseSocketClient.VoiceServerUpdated
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: VoiceServerUpdated
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 339
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when the bot connects to a Discord voice server. '
  example: []
  syntax:
    content: public event Func<SocketVoiceServer, Task> VoiceServerUpdated
    return:
      type: System.Func{Discord.WebSocket.SocketVoiceServer,System.Threading.Tasks.Task}
    content.vb: Public Event VoiceServerUpdated As Func(Of SocketVoiceServer, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.CurrentUserUpdated
  commentId: E:Discord.WebSocket.BaseSocketClient.CurrentUserUpdated
  id: CurrentUserUpdated
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: CurrentUserUpdated
  nameWithType: BaseSocketClient.CurrentUserUpdated
  fullName: Discord.WebSocket.BaseSocketClient.CurrentUserUpdated
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CurrentUserUpdated
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 346
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when the connected account is updated. '
  example: []
  syntax:
    content: public event Func<SocketSelfUser, SocketSelfUser, Task> CurrentUserUpdated
    return:
      type: System.Func{Discord.WebSocket.SocketSelfUser,Discord.WebSocket.SocketSelfUser,System.Threading.Tasks.Task}
    content.vb: Public Event CurrentUserUpdated As Func(Of SocketSelfUser, SocketSelfUser, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.UserIsTyping
  commentId: E:Discord.WebSocket.BaseSocketClient.UserIsTyping
  id: UserIsTyping
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: UserIsTyping
  nameWithType: BaseSocketClient.UserIsTyping
  fullName: Discord.WebSocket.BaseSocketClient.UserIsTyping
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: UserIsTyping
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 352
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when a user starts typing. '
  example: []
  syntax:
    content: public event Func<SocketUser, ISocketMessageChannel, Task> UserIsTyping
    return:
      type: System.Func{Discord.WebSocket.SocketUser,Discord.WebSocket.ISocketMessageChannel,System.Threading.Tasks.Task}
    content.vb: Public Event UserIsTyping As Func(Of SocketUser, ISocketMessageChannel, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.RecipientAdded
  commentId: E:Discord.WebSocket.BaseSocketClient.RecipientAdded
  id: RecipientAdded
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: RecipientAdded
  nameWithType: BaseSocketClient.RecipientAdded
  fullName: Discord.WebSocket.BaseSocketClient.RecipientAdded
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RecipientAdded
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 358
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when a user joins a group channel. '
  example: []
  syntax:
    content: public event Func<SocketGroupUser, Task> RecipientAdded
    return:
      type: System.Func{Discord.WebSocket.SocketGroupUser,System.Threading.Tasks.Task}
    content.vb: Public Event RecipientAdded As Func(Of SocketGroupUser, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.BaseSocketClient.RecipientRemoved
  commentId: E:Discord.WebSocket.BaseSocketClient.RecipientRemoved
  id: RecipientRemoved
  parent: Discord.WebSocket.BaseSocketClient
  langs:
  - csharp
  - vb
  name: RecipientRemoved
  nameWithType: BaseSocketClient.RecipientRemoved
  fullName: Discord.WebSocket.BaseSocketClient.RecipientRemoved
  type: Event
  source:
    remote:
      path: src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RecipientRemoved
    path: ../src/Discord.Net.WebSocket/BaseSocketClient.Events.cs
    startLine: 364
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Fired when a user is removed from a group channel. '
  example: []
  syntax:
    content: public event Func<SocketGroupUser, Task> RecipientRemoved
    return:
      type: System.Func{Discord.WebSocket.SocketGroupUser,System.Threading.Tasks.Task}
    content.vb: Public Event RecipientRemoved As Func(Of SocketGroupUser, Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Discord.WebSocket
  commentId: N:Discord.WebSocket
  name: Discord.WebSocket
  nameWithType: Discord.WebSocket
  fullName: Discord.WebSocket
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Rest.BaseDiscordClient
  commentId: T:Discord.Rest.BaseDiscordClient
  parent: Discord.Rest
  name: BaseDiscordClient
  nameWithType: BaseDiscordClient
  fullName: Discord.Rest.BaseDiscordClient
- uid: Discord.IDiscordClient
  commentId: T:Discord.IDiscordClient
  parent: Discord
  name: IDiscordClient
  nameWithType: IDiscordClient
  fullName: Discord.IDiscordClient
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Discord.Rest.BaseDiscordClient.Log
  commentId: E:Discord.Rest.BaseDiscordClient.Log
  parent: Discord.Rest.BaseDiscordClient
  name: Log
  nameWithType: BaseDiscordClient.Log
  fullName: Discord.Rest.BaseDiscordClient.Log
- uid: Discord.Rest.BaseDiscordClient.LoggedIn
  commentId: E:Discord.Rest.BaseDiscordClient.LoggedIn
  parent: Discord.Rest.BaseDiscordClient
  name: LoggedIn
  nameWithType: BaseDiscordClient.LoggedIn
  fullName: Discord.Rest.BaseDiscordClient.LoggedIn
- uid: Discord.Rest.BaseDiscordClient.LoggedOut
  commentId: E:Discord.Rest.BaseDiscordClient.LoggedOut
  parent: Discord.Rest.BaseDiscordClient
  name: LoggedOut
  nameWithType: BaseDiscordClient.LoggedOut
  fullName: Discord.Rest.BaseDiscordClient.LoggedOut
- uid: Discord.Rest.BaseDiscordClient.LoginState
  commentId: P:Discord.Rest.BaseDiscordClient.LoginState
  parent: Discord.Rest.BaseDiscordClient
  name: LoginState
  nameWithType: BaseDiscordClient.LoginState
  fullName: Discord.Rest.BaseDiscordClient.LoginState
- uid: Discord.Rest.BaseDiscordClient.TokenType
  commentId: P:Discord.Rest.BaseDiscordClient.TokenType
  parent: Discord.Rest.BaseDiscordClient
  name: TokenType
  nameWithType: BaseDiscordClient.TokenType
  fullName: Discord.Rest.BaseDiscordClient.TokenType
- uid: Discord.Rest.BaseDiscordClient.LoginAsync(Discord.TokenType,System.String,System.Boolean)
  commentId: M:Discord.Rest.BaseDiscordClient.LoginAsync(Discord.TokenType,System.String,System.Boolean)
  parent: Discord.Rest.BaseDiscordClient
  isExternal: true
  name: LoginAsync(TokenType, String, Boolean)
  nameWithType: BaseDiscordClient.LoginAsync(TokenType, String, Boolean)
  fullName: Discord.Rest.BaseDiscordClient.LoginAsync(Discord.TokenType, System.String, System.Boolean)
  spec.csharp:
  - uid: Discord.Rest.BaseDiscordClient.LoginAsync(Discord.TokenType,System.String,System.Boolean)
    name: LoginAsync
    nameWithType: BaseDiscordClient.LoginAsync
    fullName: Discord.Rest.BaseDiscordClient.LoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.TokenType
    name: TokenType
    nameWithType: TokenType
    fullName: Discord.TokenType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.BaseDiscordClient.LoginAsync(Discord.TokenType,System.String,System.Boolean)
    name: LoginAsync
    nameWithType: BaseDiscordClient.LoginAsync
    fullName: Discord.Rest.BaseDiscordClient.LoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.TokenType
    name: TokenType
    nameWithType: TokenType
    fullName: Discord.TokenType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.BaseDiscordClient.LogoutAsync
  commentId: M:Discord.Rest.BaseDiscordClient.LogoutAsync
  parent: Discord.Rest.BaseDiscordClient
  name: LogoutAsync()
  nameWithType: BaseDiscordClient.LogoutAsync()
  fullName: Discord.Rest.BaseDiscordClient.LogoutAsync()
  spec.csharp:
  - uid: Discord.Rest.BaseDiscordClient.LogoutAsync
    name: LogoutAsync
    nameWithType: BaseDiscordClient.LogoutAsync
    fullName: Discord.Rest.BaseDiscordClient.LogoutAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.BaseDiscordClient.LogoutAsync
    name: LogoutAsync
    nameWithType: BaseDiscordClient.LogoutAsync
    fullName: Discord.Rest.BaseDiscordClient.LogoutAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.BaseDiscordClient.Dispose
  commentId: M:Discord.Rest.BaseDiscordClient.Dispose
  parent: Discord.Rest.BaseDiscordClient
  name: Dispose()
  nameWithType: BaseDiscordClient.Dispose()
  fullName: Discord.Rest.BaseDiscordClient.Dispose()
  spec.csharp:
  - uid: Discord.Rest.BaseDiscordClient.Dispose
    name: Dispose
    nameWithType: BaseDiscordClient.Dispose
    fullName: Discord.Rest.BaseDiscordClient.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.BaseDiscordClient.Dispose
    name: Dispose
    nameWithType: BaseDiscordClient.Dispose
    fullName: Discord.Rest.BaseDiscordClient.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.BaseDiscordClient.GetRecommendedShardCountAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.BaseDiscordClient.GetRecommendedShardCountAsync(Discord.RequestOptions)
  parent: Discord.Rest.BaseDiscordClient
  name: GetRecommendedShardCountAsync(RequestOptions)
  nameWithType: BaseDiscordClient.GetRecommendedShardCountAsync(RequestOptions)
  fullName: Discord.Rest.BaseDiscordClient.GetRecommendedShardCountAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.BaseDiscordClient.GetRecommendedShardCountAsync(Discord.RequestOptions)
    name: GetRecommendedShardCountAsync
    nameWithType: BaseDiscordClient.GetRecommendedShardCountAsync
    fullName: Discord.Rest.BaseDiscordClient.GetRecommendedShardCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.BaseDiscordClient.GetRecommendedShardCountAsync(Discord.RequestOptions)
    name: GetRecommendedShardCountAsync
    nameWithType: BaseDiscordClient.GetRecommendedShardCountAsync
    fullName: Discord.Rest.BaseDiscordClient.GetRecommendedShardCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#ConnectionState
  commentId: P:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#ConnectionState
  parent: Discord.Rest.BaseDiscordClient
  name: IDiscordClient.ConnectionState
  nameWithType: BaseDiscordClient.IDiscordClient.ConnectionState
  fullName: Discord.Rest.BaseDiscordClient.Discord.IDiscordClient.ConnectionState
  nameWithType.vb: BaseDiscordClient.Discord.IDiscordClient.ConnectionState
  name.vb: Discord.IDiscordClient.ConnectionState
- uid: Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#CurrentUser
  commentId: P:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#CurrentUser
  parent: Discord.Rest.BaseDiscordClient
  name: IDiscordClient.CurrentUser
  nameWithType: BaseDiscordClient.IDiscordClient.CurrentUser
  fullName: Discord.Rest.BaseDiscordClient.Discord.IDiscordClient.CurrentUser
  nameWithType.vb: BaseDiscordClient.Discord.IDiscordClient.CurrentUser
  name.vb: Discord.IDiscordClient.CurrentUser
- uid: Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetDMChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetDMChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.Rest.BaseDiscordClient
  name: IDiscordClient.GetDMChannelsAsync(CacheMode, RequestOptions)
  nameWithType: BaseDiscordClient.IDiscordClient.GetDMChannelsAsync(CacheMode, RequestOptions)
  fullName: Discord.Rest.BaseDiscordClient.Discord.IDiscordClient.GetDMChannelsAsync(Discord.CacheMode, Discord.RequestOptions)
  nameWithType.vb: BaseDiscordClient.Discord.IDiscordClient.GetDMChannelsAsync(CacheMode, RequestOptions)
  name.vb: Discord.IDiscordClient.GetDMChannelsAsync(CacheMode, RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetDMChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
    name: IDiscordClient.GetDMChannelsAsync
    nameWithType: BaseDiscordClient.IDiscordClient.GetDMChannelsAsync
    fullName: Discord.Rest.BaseDiscordClient.Discord.IDiscordClient.GetDMChannelsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetDMChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
    name: Discord.IDiscordClient.GetDMChannelsAsync
    nameWithType: BaseDiscordClient.Discord.IDiscordClient.GetDMChannelsAsync
    fullName: Discord.Rest.BaseDiscordClient.Discord.IDiscordClient.GetDMChannelsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetGroupChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetGroupChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.Rest.BaseDiscordClient
  name: IDiscordClient.GetGroupChannelsAsync(CacheMode, RequestOptions)
  nameWithType: BaseDiscordClient.IDiscordClient.GetGroupChannelsAsync(CacheMode, RequestOptions)
  fullName: Discord.Rest.BaseDiscordClient.Discord.IDiscordClient.GetGroupChannelsAsync(Discord.CacheMode, Discord.RequestOptions)
  nameWithType.vb: BaseDiscordClient.Discord.IDiscordClient.GetGroupChannelsAsync(CacheMode, RequestOptions)
  name.vb: Discord.IDiscordClient.GetGroupChannelsAsync(CacheMode, RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetGroupChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
    name: IDiscordClient.GetGroupChannelsAsync
    nameWithType: BaseDiscordClient.IDiscordClient.GetGroupChannelsAsync
    fullName: Discord.Rest.BaseDiscordClient.Discord.IDiscordClient.GetGroupChannelsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetGroupChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
    name: Discord.IDiscordClient.GetGroupChannelsAsync
    nameWithType: BaseDiscordClient.Discord.IDiscordClient.GetGroupChannelsAsync
    fullName: Discord.Rest.BaseDiscordClient.Discord.IDiscordClient.GetGroupChannelsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.Rest.BaseDiscordClient
  isExternal: true
  name: IDiscordClient.GetWebhookAsync(UInt64, RequestOptions)
  nameWithType: BaseDiscordClient.IDiscordClient.GetWebhookAsync(UInt64, RequestOptions)
  fullName: Discord.Rest.BaseDiscordClient.Discord.IDiscordClient.GetWebhookAsync(System.UInt64, Discord.RequestOptions)
  nameWithType.vb: BaseDiscordClient.Discord.IDiscordClient.GetWebhookAsync(UInt64, RequestOptions)
  name.vb: Discord.IDiscordClient.GetWebhookAsync(UInt64, RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetWebhookAsync(System.UInt64,Discord.RequestOptions)
    name: IDiscordClient.GetWebhookAsync
    nameWithType: BaseDiscordClient.IDiscordClient.GetWebhookAsync
    fullName: Discord.Rest.BaseDiscordClient.Discord.IDiscordClient.GetWebhookAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetWebhookAsync(System.UInt64,Discord.RequestOptions)
    name: Discord.IDiscordClient.GetWebhookAsync
    nameWithType: BaseDiscordClient.Discord.IDiscordClient.GetWebhookAsync
    fullName: Discord.Rest.BaseDiscordClient.Discord.IDiscordClient.GetWebhookAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#StartAsync
  commentId: M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#StartAsync
  parent: Discord.Rest.BaseDiscordClient
  name: IDiscordClient.StartAsync()
  nameWithType: BaseDiscordClient.IDiscordClient.StartAsync()
  fullName: Discord.Rest.BaseDiscordClient.Discord.IDiscordClient.StartAsync()
  nameWithType.vb: BaseDiscordClient.Discord.IDiscordClient.StartAsync()
  name.vb: Discord.IDiscordClient.StartAsync()
  spec.csharp:
  - uid: Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#StartAsync
    name: IDiscordClient.StartAsync
    nameWithType: BaseDiscordClient.IDiscordClient.StartAsync
    fullName: Discord.Rest.BaseDiscordClient.Discord.IDiscordClient.StartAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#StartAsync
    name: Discord.IDiscordClient.StartAsync
    nameWithType: BaseDiscordClient.Discord.IDiscordClient.StartAsync
    fullName: Discord.Rest.BaseDiscordClient.Discord.IDiscordClient.StartAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#StopAsync
  commentId: M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#StopAsync
  parent: Discord.Rest.BaseDiscordClient
  name: IDiscordClient.StopAsync()
  nameWithType: BaseDiscordClient.IDiscordClient.StopAsync()
  fullName: Discord.Rest.BaseDiscordClient.Discord.IDiscordClient.StopAsync()
  nameWithType.vb: BaseDiscordClient.Discord.IDiscordClient.StopAsync()
  name.vb: Discord.IDiscordClient.StopAsync()
  spec.csharp:
  - uid: Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#StopAsync
    name: IDiscordClient.StopAsync
    nameWithType: BaseDiscordClient.IDiscordClient.StopAsync
    fullName: Discord.Rest.BaseDiscordClient.Discord.IDiscordClient.StopAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#StopAsync
    name: Discord.IDiscordClient.StopAsync
    nameWithType: BaseDiscordClient.Discord.IDiscordClient.StopAsync
    fullName: Discord.Rest.BaseDiscordClient.Discord.IDiscordClient.StopAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Rest
  commentId: N:Discord.Rest
  name: Discord.Rest
  nameWithType: Discord.Rest
  fullName: Discord.Rest
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.WebSocket.DiscordSocketConfig
  commentId: T:Discord.WebSocket.DiscordSocketConfig
  parent: Discord.WebSocket
  name: DiscordSocketConfig
  nameWithType: DiscordSocketConfig
  fullName: Discord.WebSocket.DiscordSocketConfig
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Discord.WebSocket.BaseSocketClient.Latency*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.Latency
  name: Latency
  nameWithType: BaseSocketClient.Latency
  fullName: Discord.WebSocket.BaseSocketClient.Latency
- uid: Discord.WebSocket.BaseSocketClient.Status*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.Status
  name: Status
  nameWithType: BaseSocketClient.Status
  fullName: Discord.WebSocket.BaseSocketClient.Status
- uid: Discord.UserStatus
  commentId: T:Discord.UserStatus
  parent: Discord
  name: UserStatus
  nameWithType: UserStatus
  fullName: Discord.UserStatus
- uid: Discord.WebSocket.BaseSocketClient.Activity*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.Activity
  name: Activity
  nameWithType: BaseSocketClient.Activity
  fullName: Discord.WebSocket.BaseSocketClient.Activity
- uid: Discord.IActivity
  commentId: T:Discord.IActivity
  parent: Discord
  name: IActivity
  nameWithType: IActivity
  fullName: Discord.IActivity
- uid: Discord.WebSocket.BaseSocketClient.Rest*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.Rest
  name: Rest
  nameWithType: BaseSocketClient.Rest
  fullName: Discord.WebSocket.BaseSocketClient.Rest
- uid: Discord.WebSocket.DiscordSocketRestClient
  commentId: T:Discord.WebSocket.DiscordSocketRestClient
  parent: Discord.WebSocket
  name: DiscordSocketRestClient
  nameWithType: DiscordSocketRestClient
  fullName: Discord.WebSocket.DiscordSocketRestClient
- uid: Discord.WebSocket.BaseSocketClient.CurrentUser*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.CurrentUser
  name: CurrentUser
  nameWithType: BaseSocketClient.CurrentUser
  fullName: Discord.WebSocket.BaseSocketClient.CurrentUser
- uid: Discord.WebSocket.SocketSelfUser
  commentId: T:Discord.WebSocket.SocketSelfUser
  parent: Discord.WebSocket
  name: SocketSelfUser
  nameWithType: SocketSelfUser
  fullName: Discord.WebSocket.SocketSelfUser
- uid: Discord.WebSocket.BaseSocketClient.Guilds*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.Guilds
  name: Guilds
  nameWithType: BaseSocketClient.Guilds
  fullName: Discord.WebSocket.BaseSocketClient.Guilds
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketGuild}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketGuild}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<SocketGuild>
  nameWithType: IReadOnlyCollection<SocketGuild>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.WebSocket.SocketGuild>
  nameWithType.vb: IReadOnlyCollection(Of SocketGuild)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.WebSocket.SocketGuild)
  name.vb: IReadOnlyCollection(Of SocketGuild)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketGuild
    name: SocketGuild
    nameWithType: SocketGuild
    fullName: Discord.WebSocket.SocketGuild
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketGuild
    name: SocketGuild
    nameWithType: SocketGuild
    fullName: Discord.WebSocket.SocketGuild
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Discord.WebSocket.BaseSocketClient.PrivateChannels*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.PrivateChannels
  name: PrivateChannels
  nameWithType: BaseSocketClient.PrivateChannels
  fullName: Discord.WebSocket.BaseSocketClient.PrivateChannels
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.ISocketPrivateChannel}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.ISocketPrivateChannel}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<ISocketPrivateChannel>
  nameWithType: IReadOnlyCollection<ISocketPrivateChannel>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.WebSocket.ISocketPrivateChannel>
  nameWithType.vb: IReadOnlyCollection(Of ISocketPrivateChannel)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.WebSocket.ISocketPrivateChannel)
  name.vb: IReadOnlyCollection(Of ISocketPrivateChannel)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.ISocketPrivateChannel
    name: ISocketPrivateChannel
    nameWithType: ISocketPrivateChannel
    fullName: Discord.WebSocket.ISocketPrivateChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.ISocketPrivateChannel
    name: ISocketPrivateChannel
    nameWithType: ISocketPrivateChannel
    fullName: Discord.WebSocket.ISocketPrivateChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.BaseSocketClient.VoiceRegions*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.VoiceRegions
  name: VoiceRegions
  nameWithType: BaseSocketClient.VoiceRegions
  fullName: Discord.WebSocket.BaseSocketClient.VoiceRegions
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestVoiceRegion}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestVoiceRegion}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<RestVoiceRegion>
  nameWithType: IReadOnlyCollection<RestVoiceRegion>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.Rest.RestVoiceRegion>
  nameWithType.vb: IReadOnlyCollection(Of RestVoiceRegion)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.Rest.RestVoiceRegion)
  name.vb: IReadOnlyCollection(Of RestVoiceRegion)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestVoiceRegion
    name: RestVoiceRegion
    nameWithType: RestVoiceRegion
    fullName: Discord.Rest.RestVoiceRegion
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestVoiceRegion
    name: RestVoiceRegion
    nameWithType: RestVoiceRegion
    fullName: Discord.Rest.RestVoiceRegion
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.BaseSocketClient.GetApplicationInfoAsync*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.GetApplicationInfoAsync
  name: GetApplicationInfoAsync
  nameWithType: BaseSocketClient.GetApplicationInfoAsync
  fullName: Discord.WebSocket.BaseSocketClient.GetApplicationInfoAsync
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: System.Threading.Tasks.Task{Discord.Rest.RestApplication}
  commentId: T:System.Threading.Tasks.Task{Discord.Rest.RestApplication}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RestApplication>
  nameWithType: Task<RestApplication>
  fullName: System.Threading.Tasks.Task<Discord.Rest.RestApplication>
  nameWithType.vb: Task(Of RestApplication)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.Rest.RestApplication)
  name.vb: Task(Of RestApplication)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestApplication
    name: RestApplication
    nameWithType: RestApplication
    fullName: Discord.Rest.RestApplication
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestApplication
    name: RestApplication
    nameWithType: RestApplication
    fullName: Discord.Rest.RestApplication
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Discord.WebSocket.DiscordSocketConfig.AlwaysDownloadUsers
  commentId: P:Discord.WebSocket.DiscordSocketConfig.AlwaysDownloadUsers
  isExternal: true
- uid: Discord.Rest.DiscordRestClient.GetUserAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.Rest.DiscordRestClient.GetUserAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.Rest.DiscordRestClient
  isExternal: true
  name: GetUserAsync(UInt64, RequestOptions)
  nameWithType: DiscordRestClient.GetUserAsync(UInt64, RequestOptions)
  fullName: Discord.Rest.DiscordRestClient.GetUserAsync(System.UInt64, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.DiscordRestClient.GetUserAsync(System.UInt64,Discord.RequestOptions)
    name: GetUserAsync
    nameWithType: DiscordRestClient.GetUserAsync
    fullName: Discord.Rest.DiscordRestClient.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.DiscordRestClient.GetUserAsync(System.UInt64,Discord.RequestOptions)
    name: GetUserAsync
    nameWithType: DiscordRestClient.GetUserAsync
    fullName: Discord.Rest.DiscordRestClient.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.BaseSocketClient.GetUser*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.GetUser
  name: GetUser
  nameWithType: BaseSocketClient.GetUser
  fullName: Discord.WebSocket.BaseSocketClient.GetUser
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Discord.WebSocket.SocketUser
  commentId: T:Discord.WebSocket.SocketUser
  parent: Discord.WebSocket
  name: SocketUser
  nameWithType: SocketUser
  fullName: Discord.WebSocket.SocketUser
- uid: Discord.Rest.DiscordRestClient
  commentId: T:Discord.Rest.DiscordRestClient
  parent: Discord.Rest
  name: DiscordRestClient
  nameWithType: DiscordRestClient
  fullName: Discord.Rest.DiscordRestClient
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.WebSocket.BaseSocketClient.GetChannel*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.GetChannel
  name: GetChannel
  nameWithType: BaseSocketClient.GetChannel
  fullName: Discord.WebSocket.BaseSocketClient.GetChannel
- uid: Discord.WebSocket.SocketChannel
  commentId: T:Discord.WebSocket.SocketChannel
  parent: Discord.WebSocket
  name: SocketChannel
  nameWithType: SocketChannel
  fullName: Discord.WebSocket.SocketChannel
- uid: Discord.WebSocket.BaseSocketClient.GetGuild*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.GetGuild
  name: GetGuild
  nameWithType: BaseSocketClient.GetGuild
  fullName: Discord.WebSocket.BaseSocketClient.GetGuild
- uid: Discord.WebSocket.SocketGuild
  commentId: T:Discord.WebSocket.SocketGuild
  parent: Discord.WebSocket
  name: SocketGuild
  nameWithType: SocketGuild
  fullName: Discord.WebSocket.SocketGuild
- uid: Discord.WebSocket.BaseSocketClient.GetVoiceRegion*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.GetVoiceRegion
  name: GetVoiceRegion
  nameWithType: BaseSocketClient.GetVoiceRegion
  fullName: Discord.WebSocket.BaseSocketClient.GetVoiceRegion
- uid: Discord.Rest.RestVoiceRegion
  commentId: T:Discord.Rest.RestVoiceRegion
  parent: Discord.Rest
  name: RestVoiceRegion
  nameWithType: RestVoiceRegion
  fullName: Discord.Rest.RestVoiceRegion
- uid: Discord.WebSocket.BaseSocketClient.StartAsync*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.StartAsync
  name: StartAsync
  nameWithType: BaseSocketClient.StartAsync
  fullName: Discord.WebSocket.BaseSocketClient.StartAsync
- uid: Discord.IDiscordClient.StartAsync
  commentId: M:Discord.IDiscordClient.StartAsync
  parent: Discord.IDiscordClient
  name: StartAsync()
  nameWithType: IDiscordClient.StartAsync()
  fullName: Discord.IDiscordClient.StartAsync()
  spec.csharp:
  - uid: Discord.IDiscordClient.StartAsync
    name: StartAsync
    nameWithType: IDiscordClient.StartAsync
    fullName: Discord.IDiscordClient.StartAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IDiscordClient.StartAsync
    name: StartAsync
    nameWithType: IDiscordClient.StartAsync
    fullName: Discord.IDiscordClient.StartAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Discord.WebSocket.BaseSocketClient.StopAsync*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.StopAsync
  name: StopAsync
  nameWithType: BaseSocketClient.StopAsync
  fullName: Discord.WebSocket.BaseSocketClient.StopAsync
- uid: Discord.IDiscordClient.StopAsync
  commentId: M:Discord.IDiscordClient.StopAsync
  parent: Discord.IDiscordClient
  name: StopAsync()
  nameWithType: IDiscordClient.StopAsync()
  fullName: Discord.IDiscordClient.StopAsync()
  spec.csharp:
  - uid: Discord.IDiscordClient.StopAsync
    name: StopAsync
    nameWithType: IDiscordClient.StopAsync
    fullName: Discord.IDiscordClient.StopAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IDiscordClient.StopAsync
    name: StopAsync
    nameWithType: IDiscordClient.StopAsync
    fullName: Discord.IDiscordClient.StopAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.BaseSocketClient.SetStatusAsync*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.SetStatusAsync
  name: SetStatusAsync
  nameWithType: BaseSocketClient.SetStatusAsync
  fullName: Discord.WebSocket.BaseSocketClient.SetStatusAsync
- uid: Discord.WebSocket.BaseSocketClient.SetGameAsync*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.SetGameAsync
  name: SetGameAsync
  nameWithType: BaseSocketClient.SetGameAsync
  fullName: Discord.WebSocket.BaseSocketClient.SetGameAsync
- uid: Discord.ActivityType
  commentId: T:Discord.ActivityType
  parent: Discord
  name: ActivityType
  nameWithType: ActivityType
  fullName: Discord.ActivityType
- uid: Discord.WebSocket.BaseSocketClient.SetActivityAsync*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.SetActivityAsync
  name: SetActivityAsync
  nameWithType: BaseSocketClient.SetActivityAsync
  fullName: Discord.WebSocket.BaseSocketClient.SetActivityAsync
- uid: Discord.WebSocket.BaseSocketClient.DownloadUsersAsync*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.DownloadUsersAsync
  name: DownloadUsersAsync
  nameWithType: BaseSocketClient.DownloadUsersAsync
  fullName: Discord.WebSocket.BaseSocketClient.DownloadUsersAsync
- uid: System.Collections.Generic.IEnumerable{Discord.IGuild}
  commentId: T:System.Collections.Generic.IEnumerable{Discord.IGuild}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IGuild>
  nameWithType: IEnumerable<IGuild>
  fullName: System.Collections.Generic.IEnumerable<Discord.IGuild>
  nameWithType.vb: IEnumerable(Of IGuild)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Discord.IGuild)
  name.vb: IEnumerable(Of IGuild)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IGuild
    name: IGuild
    nameWithType: IGuild
    fullName: Discord.IGuild
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IGuild
    name: IGuild
    nameWithType: IGuild
    fullName: Discord.IGuild
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.BaseSocketClient.CreateGuildAsync*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.CreateGuildAsync
  name: CreateGuildAsync
  nameWithType: BaseSocketClient.CreateGuildAsync
  fullName: Discord.WebSocket.BaseSocketClient.CreateGuildAsync
- uid: Discord.IVoiceRegion
  commentId: T:Discord.IVoiceRegion
  parent: Discord
  name: IVoiceRegion
  nameWithType: IVoiceRegion
  fullName: Discord.IVoiceRegion
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Threading.Tasks.Task{Discord.Rest.RestGuild}
  commentId: T:System.Threading.Tasks.Task{Discord.Rest.RestGuild}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RestGuild>
  nameWithType: Task<RestGuild>
  fullName: System.Threading.Tasks.Task<Discord.Rest.RestGuild>
  nameWithType.vb: Task(Of RestGuild)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.Rest.RestGuild)
  name.vb: Task(Of RestGuild)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestGuild
    name: RestGuild
    nameWithType: RestGuild
    fullName: Discord.Rest.RestGuild
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestGuild
    name: RestGuild
    nameWithType: RestGuild
    fullName: Discord.Rest.RestGuild
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Discord.WebSocket.BaseSocketClient.GetConnectionsAsync*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.GetConnectionsAsync
  name: GetConnectionsAsync
  nameWithType: BaseSocketClient.GetConnectionsAsync
  fullName: Discord.WebSocket.BaseSocketClient.GetConnectionsAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestConnection}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestConnection}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<RestConnection>>
  nameWithType: Task<IReadOnlyCollection<RestConnection>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.Rest.RestConnection>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestConnection))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.Rest.RestConnection))
  name.vb: Task(Of IReadOnlyCollection(Of RestConnection))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestConnection
    name: RestConnection
    nameWithType: RestConnection
    fullName: Discord.Rest.RestConnection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestConnection
    name: RestConnection
    nameWithType: RestConnection
    fullName: Discord.Rest.RestConnection
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.BaseSocketClient.GetInviteAsync*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.GetInviteAsync
  name: GetInviteAsync
  nameWithType: BaseSocketClient.GetInviteAsync
  fullName: Discord.WebSocket.BaseSocketClient.GetInviteAsync
- uid: System.Threading.Tasks.Task{Discord.Rest.RestInviteMetadata}
  commentId: T:System.Threading.Tasks.Task{Discord.Rest.RestInviteMetadata}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RestInviteMetadata>
  nameWithType: Task<RestInviteMetadata>
  fullName: System.Threading.Tasks.Task<Discord.Rest.RestInviteMetadata>
  nameWithType.vb: Task(Of RestInviteMetadata)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.Rest.RestInviteMetadata)
  name.vb: Task(Of RestInviteMetadata)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestInviteMetadata
    name: RestInviteMetadata
    nameWithType: RestInviteMetadata
    fullName: Discord.Rest.RestInviteMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestInviteMetadata
    name: RestInviteMetadata
    nameWithType: RestInviteMetadata
    fullName: Discord.Rest.RestInviteMetadata
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetApplicationInfoAsync*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetApplicationInfoAsync
  name: IDiscordClient.GetApplicationInfoAsync
  nameWithType: BaseSocketClient.IDiscordClient.GetApplicationInfoAsync
  fullName: Discord.WebSocket.BaseSocketClient.Discord.IDiscordClient.GetApplicationInfoAsync
  nameWithType.vb: BaseSocketClient.Discord.IDiscordClient.GetApplicationInfoAsync
  name.vb: Discord.IDiscordClient.GetApplicationInfoAsync
- uid: Discord.IDiscordClient.GetApplicationInfoAsync(Discord.RequestOptions)
  commentId: M:Discord.IDiscordClient.GetApplicationInfoAsync(Discord.RequestOptions)
  parent: Discord.IDiscordClient
  name: GetApplicationInfoAsync(RequestOptions)
  nameWithType: IDiscordClient.GetApplicationInfoAsync(RequestOptions)
  fullName: Discord.IDiscordClient.GetApplicationInfoAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IDiscordClient.GetApplicationInfoAsync(Discord.RequestOptions)
    name: GetApplicationInfoAsync
    nameWithType: IDiscordClient.GetApplicationInfoAsync
    fullName: Discord.IDiscordClient.GetApplicationInfoAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IDiscordClient.GetApplicationInfoAsync(Discord.RequestOptions)
    name: GetApplicationInfoAsync
    nameWithType: IDiscordClient.GetApplicationInfoAsync
    fullName: Discord.IDiscordClient.GetApplicationInfoAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.IApplication}
  commentId: T:System.Threading.Tasks.Task{Discord.IApplication}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IApplication>
  nameWithType: Task<IApplication>
  fullName: System.Threading.Tasks.Task<Discord.IApplication>
  nameWithType.vb: Task(Of IApplication)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IApplication)
  name.vb: Task(Of IApplication)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IApplication
    name: IApplication
    nameWithType: IApplication
    fullName: Discord.IApplication
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IApplication
    name: IApplication
    nameWithType: IApplication
    fullName: Discord.IApplication
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetChannelAsync*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetChannelAsync
  name: IDiscordClient.GetChannelAsync
  nameWithType: BaseSocketClient.IDiscordClient.GetChannelAsync
  fullName: Discord.WebSocket.BaseSocketClient.Discord.IDiscordClient.GetChannelAsync
  nameWithType.vb: BaseSocketClient.Discord.IDiscordClient.GetChannelAsync
  name.vb: Discord.IDiscordClient.GetChannelAsync
- uid: Discord.IDiscordClient.GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IDiscordClient.GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IDiscordClient
  isExternal: true
  name: GetChannelAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: IDiscordClient.GetChannelAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.IDiscordClient.GetChannelAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IDiscordClient.GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetChannelAsync
    nameWithType: IDiscordClient.GetChannelAsync
    fullName: Discord.IDiscordClient.GetChannelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IDiscordClient.GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetChannelAsync
    nameWithType: IDiscordClient.GetChannelAsync
    fullName: Discord.IDiscordClient.GetChannelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.CacheMode
  commentId: T:Discord.CacheMode
  parent: Discord
  name: CacheMode
  nameWithType: CacheMode
  fullName: Discord.CacheMode
- uid: System.Threading.Tasks.Task{Discord.IChannel}
  commentId: T:System.Threading.Tasks.Task{Discord.IChannel}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IChannel>
  nameWithType: Task<IChannel>
  fullName: System.Threading.Tasks.Task<Discord.IChannel>
  nameWithType.vb: Task(Of IChannel)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IChannel)
  name.vb: Task(Of IChannel)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IChannel
    name: IChannel
    nameWithType: IChannel
    fullName: Discord.IChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IChannel
    name: IChannel
    nameWithType: IChannel
    fullName: Discord.IChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetPrivateChannelsAsync*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetPrivateChannelsAsync
  name: IDiscordClient.GetPrivateChannelsAsync
  nameWithType: BaseSocketClient.IDiscordClient.GetPrivateChannelsAsync
  fullName: Discord.WebSocket.BaseSocketClient.Discord.IDiscordClient.GetPrivateChannelsAsync
  nameWithType.vb: BaseSocketClient.Discord.IDiscordClient.GetPrivateChannelsAsync
  name.vb: Discord.IDiscordClient.GetPrivateChannelsAsync
- uid: Discord.IDiscordClient.GetPrivateChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IDiscordClient.GetPrivateChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IDiscordClient
  name: GetPrivateChannelsAsync(CacheMode, RequestOptions)
  nameWithType: IDiscordClient.GetPrivateChannelsAsync(CacheMode, RequestOptions)
  fullName: Discord.IDiscordClient.GetPrivateChannelsAsync(Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IDiscordClient.GetPrivateChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetPrivateChannelsAsync
    nameWithType: IDiscordClient.GetPrivateChannelsAsync
    fullName: Discord.IDiscordClient.GetPrivateChannelsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IDiscordClient.GetPrivateChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetPrivateChannelsAsync
    nameWithType: IDiscordClient.GetPrivateChannelsAsync
    fullName: Discord.IDiscordClient.GetPrivateChannelsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IPrivateChannel}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IPrivateChannel}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<IPrivateChannel>>
  nameWithType: Task<IReadOnlyCollection<IPrivateChannel>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.IPrivateChannel>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IPrivateChannel))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IPrivateChannel))
  name.vb: Task(Of IReadOnlyCollection(Of IPrivateChannel))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IPrivateChannel
    name: IPrivateChannel
    nameWithType: IPrivateChannel
    fullName: Discord.IPrivateChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IPrivateChannel
    name: IPrivateChannel
    nameWithType: IPrivateChannel
    fullName: Discord.IPrivateChannel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetConnectionsAsync*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetConnectionsAsync
  name: IDiscordClient.GetConnectionsAsync
  nameWithType: BaseSocketClient.IDiscordClient.GetConnectionsAsync
  fullName: Discord.WebSocket.BaseSocketClient.Discord.IDiscordClient.GetConnectionsAsync
  nameWithType.vb: BaseSocketClient.Discord.IDiscordClient.GetConnectionsAsync
  name.vb: Discord.IDiscordClient.GetConnectionsAsync
- uid: Discord.IDiscordClient.GetConnectionsAsync(Discord.RequestOptions)
  commentId: M:Discord.IDiscordClient.GetConnectionsAsync(Discord.RequestOptions)
  parent: Discord.IDiscordClient
  name: GetConnectionsAsync(RequestOptions)
  nameWithType: IDiscordClient.GetConnectionsAsync(RequestOptions)
  fullName: Discord.IDiscordClient.GetConnectionsAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IDiscordClient.GetConnectionsAsync(Discord.RequestOptions)
    name: GetConnectionsAsync
    nameWithType: IDiscordClient.GetConnectionsAsync
    fullName: Discord.IDiscordClient.GetConnectionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IDiscordClient.GetConnectionsAsync(Discord.RequestOptions)
    name: GetConnectionsAsync
    nameWithType: IDiscordClient.GetConnectionsAsync
    fullName: Discord.IDiscordClient.GetConnectionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IConnection}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IConnection}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<IConnection>>
  nameWithType: Task<IReadOnlyCollection<IConnection>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.IConnection>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IConnection))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IConnection))
  name.vb: Task(Of IReadOnlyCollection(Of IConnection))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IConnection
    name: IConnection
    nameWithType: IConnection
    fullName: Discord.IConnection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IConnection
    name: IConnection
    nameWithType: IConnection
    fullName: Discord.IConnection
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetInviteAsync*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetInviteAsync
  name: IDiscordClient.GetInviteAsync
  nameWithType: BaseSocketClient.IDiscordClient.GetInviteAsync
  fullName: Discord.WebSocket.BaseSocketClient.Discord.IDiscordClient.GetInviteAsync
  nameWithType.vb: BaseSocketClient.Discord.IDiscordClient.GetInviteAsync
  name.vb: Discord.IDiscordClient.GetInviteAsync
- uid: Discord.IDiscordClient.GetInviteAsync(System.String,Discord.RequestOptions)
  commentId: M:Discord.IDiscordClient.GetInviteAsync(System.String,Discord.RequestOptions)
  parent: Discord.IDiscordClient
  isExternal: true
  name: GetInviteAsync(String, RequestOptions)
  nameWithType: IDiscordClient.GetInviteAsync(String, RequestOptions)
  fullName: Discord.IDiscordClient.GetInviteAsync(System.String, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IDiscordClient.GetInviteAsync(System.String,Discord.RequestOptions)
    name: GetInviteAsync
    nameWithType: IDiscordClient.GetInviteAsync
    fullName: Discord.IDiscordClient.GetInviteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IDiscordClient.GetInviteAsync(System.String,Discord.RequestOptions)
    name: GetInviteAsync
    nameWithType: IDiscordClient.GetInviteAsync
    fullName: Discord.IDiscordClient.GetInviteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.IInvite}
  commentId: T:System.Threading.Tasks.Task{Discord.IInvite}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IInvite>
  nameWithType: Task<IInvite>
  fullName: System.Threading.Tasks.Task<Discord.IInvite>
  nameWithType.vb: Task(Of IInvite)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IInvite)
  name.vb: Task(Of IInvite)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IInvite
    name: IInvite
    nameWithType: IInvite
    fullName: Discord.IInvite
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IInvite
    name: IInvite
    nameWithType: IInvite
    fullName: Discord.IInvite
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetGuildAsync*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetGuildAsync
  name: IDiscordClient.GetGuildAsync
  nameWithType: BaseSocketClient.IDiscordClient.GetGuildAsync
  fullName: Discord.WebSocket.BaseSocketClient.Discord.IDiscordClient.GetGuildAsync
  nameWithType.vb: BaseSocketClient.Discord.IDiscordClient.GetGuildAsync
  name.vb: Discord.IDiscordClient.GetGuildAsync
- uid: Discord.IDiscordClient.GetGuildAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IDiscordClient.GetGuildAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IDiscordClient
  isExternal: true
  name: GetGuildAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: IDiscordClient.GetGuildAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.IDiscordClient.GetGuildAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IDiscordClient.GetGuildAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetGuildAsync
    nameWithType: IDiscordClient.GetGuildAsync
    fullName: Discord.IDiscordClient.GetGuildAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IDiscordClient.GetGuildAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetGuildAsync
    nameWithType: IDiscordClient.GetGuildAsync
    fullName: Discord.IDiscordClient.GetGuildAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.IGuild}
  commentId: T:System.Threading.Tasks.Task{Discord.IGuild}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IGuild>
  nameWithType: Task<IGuild>
  fullName: System.Threading.Tasks.Task<Discord.IGuild>
  nameWithType.vb: Task(Of IGuild)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IGuild)
  name.vb: Task(Of IGuild)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IGuild
    name: IGuild
    nameWithType: IGuild
    fullName: Discord.IGuild
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IGuild
    name: IGuild
    nameWithType: IGuild
    fullName: Discord.IGuild
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetGuildsAsync*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetGuildsAsync
  name: IDiscordClient.GetGuildsAsync
  nameWithType: BaseSocketClient.IDiscordClient.GetGuildsAsync
  fullName: Discord.WebSocket.BaseSocketClient.Discord.IDiscordClient.GetGuildsAsync
  nameWithType.vb: BaseSocketClient.Discord.IDiscordClient.GetGuildsAsync
  name.vb: Discord.IDiscordClient.GetGuildsAsync
- uid: Discord.IDiscordClient.GetGuildsAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IDiscordClient.GetGuildsAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IDiscordClient
  name: GetGuildsAsync(CacheMode, RequestOptions)
  nameWithType: IDiscordClient.GetGuildsAsync(CacheMode, RequestOptions)
  fullName: Discord.IDiscordClient.GetGuildsAsync(Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IDiscordClient.GetGuildsAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetGuildsAsync
    nameWithType: IDiscordClient.GetGuildsAsync
    fullName: Discord.IDiscordClient.GetGuildsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IDiscordClient.GetGuildsAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetGuildsAsync
    nameWithType: IDiscordClient.GetGuildsAsync
    fullName: Discord.IDiscordClient.GetGuildsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IGuild}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IGuild}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<IGuild>>
  nameWithType: Task<IReadOnlyCollection<IGuild>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.IGuild>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IGuild))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IGuild))
  name.vb: Task(Of IReadOnlyCollection(Of IGuild))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IGuild
    name: IGuild
    nameWithType: IGuild
    fullName: Discord.IGuild
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IGuild
    name: IGuild
    nameWithType: IGuild
    fullName: Discord.IGuild
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#CreateGuildAsync*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#CreateGuildAsync
  name: IDiscordClient.CreateGuildAsync
  nameWithType: BaseSocketClient.IDiscordClient.CreateGuildAsync
  fullName: Discord.WebSocket.BaseSocketClient.Discord.IDiscordClient.CreateGuildAsync
  nameWithType.vb: BaseSocketClient.Discord.IDiscordClient.CreateGuildAsync
  name.vb: Discord.IDiscordClient.CreateGuildAsync
- uid: Discord.IDiscordClient.CreateGuildAsync(System.String,Discord.IVoiceRegion,System.IO.Stream,Discord.RequestOptions)
  commentId: M:Discord.IDiscordClient.CreateGuildAsync(System.String,Discord.IVoiceRegion,System.IO.Stream,Discord.RequestOptions)
  parent: Discord.IDiscordClient
  isExternal: true
  name: CreateGuildAsync(String, IVoiceRegion, Stream, RequestOptions)
  nameWithType: IDiscordClient.CreateGuildAsync(String, IVoiceRegion, Stream, RequestOptions)
  fullName: Discord.IDiscordClient.CreateGuildAsync(System.String, Discord.IVoiceRegion, System.IO.Stream, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IDiscordClient.CreateGuildAsync(System.String,Discord.IVoiceRegion,System.IO.Stream,Discord.RequestOptions)
    name: CreateGuildAsync
    nameWithType: IDiscordClient.CreateGuildAsync
    fullName: Discord.IDiscordClient.CreateGuildAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.IVoiceRegion
    name: IVoiceRegion
    nameWithType: IVoiceRegion
    fullName: Discord.IVoiceRegion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IDiscordClient.CreateGuildAsync(System.String,Discord.IVoiceRegion,System.IO.Stream,Discord.RequestOptions)
    name: CreateGuildAsync
    nameWithType: IDiscordClient.CreateGuildAsync
    fullName: Discord.IDiscordClient.CreateGuildAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.IVoiceRegion
    name: IVoiceRegion
    nameWithType: IVoiceRegion
    fullName: Discord.IVoiceRegion
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetUserAsync*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetUserAsync
  name: IDiscordClient.GetUserAsync
  nameWithType: BaseSocketClient.IDiscordClient.GetUserAsync
  fullName: Discord.WebSocket.BaseSocketClient.Discord.IDiscordClient.GetUserAsync
  nameWithType.vb: BaseSocketClient.Discord.IDiscordClient.GetUserAsync
  name.vb: Discord.IDiscordClient.GetUserAsync
- uid: Discord.IDiscordClient.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IDiscordClient.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IDiscordClient
  isExternal: true
  name: GetUserAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: IDiscordClient.GetUserAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.IDiscordClient.GetUserAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IDiscordClient.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetUserAsync
    nameWithType: IDiscordClient.GetUserAsync
    fullName: Discord.IDiscordClient.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IDiscordClient.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetUserAsync
    nameWithType: IDiscordClient.GetUserAsync
    fullName: Discord.IDiscordClient.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.IUser}
  commentId: T:System.Threading.Tasks.Task{Discord.IUser}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IUser>
  nameWithType: Task<IUser>
  fullName: System.Threading.Tasks.Task<Discord.IUser>
  nameWithType.vb: Task(Of IUser)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IUser)
  name.vb: Task(Of IUser)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IDiscordClient.GetUserAsync(System.String,System.String,Discord.RequestOptions)
  commentId: M:Discord.IDiscordClient.GetUserAsync(System.String,System.String,Discord.RequestOptions)
  parent: Discord.IDiscordClient
  isExternal: true
  name: GetUserAsync(String, String, RequestOptions)
  nameWithType: IDiscordClient.GetUserAsync(String, String, RequestOptions)
  fullName: Discord.IDiscordClient.GetUserAsync(System.String, System.String, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IDiscordClient.GetUserAsync(System.String,System.String,Discord.RequestOptions)
    name: GetUserAsync
    nameWithType: IDiscordClient.GetUserAsync
    fullName: Discord.IDiscordClient.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IDiscordClient.GetUserAsync(System.String,System.String,Discord.RequestOptions)
    name: GetUserAsync
    nameWithType: IDiscordClient.GetUserAsync
    fullName: Discord.IDiscordClient.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetVoiceRegionAsync*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetVoiceRegionAsync
  name: IDiscordClient.GetVoiceRegionAsync
  nameWithType: BaseSocketClient.IDiscordClient.GetVoiceRegionAsync
  fullName: Discord.WebSocket.BaseSocketClient.Discord.IDiscordClient.GetVoiceRegionAsync
  nameWithType.vb: BaseSocketClient.Discord.IDiscordClient.GetVoiceRegionAsync
  name.vb: Discord.IDiscordClient.GetVoiceRegionAsync
- uid: Discord.IDiscordClient.GetVoiceRegionAsync(System.String,Discord.RequestOptions)
  commentId: M:Discord.IDiscordClient.GetVoiceRegionAsync(System.String,Discord.RequestOptions)
  parent: Discord.IDiscordClient
  isExternal: true
  name: GetVoiceRegionAsync(String, RequestOptions)
  nameWithType: IDiscordClient.GetVoiceRegionAsync(String, RequestOptions)
  fullName: Discord.IDiscordClient.GetVoiceRegionAsync(System.String, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IDiscordClient.GetVoiceRegionAsync(System.String,Discord.RequestOptions)
    name: GetVoiceRegionAsync
    nameWithType: IDiscordClient.GetVoiceRegionAsync
    fullName: Discord.IDiscordClient.GetVoiceRegionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IDiscordClient.GetVoiceRegionAsync(System.String,Discord.RequestOptions)
    name: GetVoiceRegionAsync
    nameWithType: IDiscordClient.GetVoiceRegionAsync
    fullName: Discord.IDiscordClient.GetVoiceRegionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.IVoiceRegion}
  commentId: T:System.Threading.Tasks.Task{Discord.IVoiceRegion}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IVoiceRegion>
  nameWithType: Task<IVoiceRegion>
  fullName: System.Threading.Tasks.Task<Discord.IVoiceRegion>
  nameWithType.vb: Task(Of IVoiceRegion)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IVoiceRegion)
  name.vb: Task(Of IVoiceRegion)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IVoiceRegion
    name: IVoiceRegion
    nameWithType: IVoiceRegion
    fullName: Discord.IVoiceRegion
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IVoiceRegion
    name: IVoiceRegion
    nameWithType: IVoiceRegion
    fullName: Discord.IVoiceRegion
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetVoiceRegionsAsync*
  commentId: Overload:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetVoiceRegionsAsync
  name: IDiscordClient.GetVoiceRegionsAsync
  nameWithType: BaseSocketClient.IDiscordClient.GetVoiceRegionsAsync
  fullName: Discord.WebSocket.BaseSocketClient.Discord.IDiscordClient.GetVoiceRegionsAsync
  nameWithType.vb: BaseSocketClient.Discord.IDiscordClient.GetVoiceRegionsAsync
  name.vb: Discord.IDiscordClient.GetVoiceRegionsAsync
- uid: Discord.IDiscordClient.GetVoiceRegionsAsync(Discord.RequestOptions)
  commentId: M:Discord.IDiscordClient.GetVoiceRegionsAsync(Discord.RequestOptions)
  parent: Discord.IDiscordClient
  name: GetVoiceRegionsAsync(RequestOptions)
  nameWithType: IDiscordClient.GetVoiceRegionsAsync(RequestOptions)
  fullName: Discord.IDiscordClient.GetVoiceRegionsAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IDiscordClient.GetVoiceRegionsAsync(Discord.RequestOptions)
    name: GetVoiceRegionsAsync
    nameWithType: IDiscordClient.GetVoiceRegionsAsync
    fullName: Discord.IDiscordClient.GetVoiceRegionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IDiscordClient.GetVoiceRegionsAsync(Discord.RequestOptions)
    name: GetVoiceRegionsAsync
    nameWithType: IDiscordClient.GetVoiceRegionsAsync
    fullName: Discord.IDiscordClient.GetVoiceRegionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IVoiceRegion}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IVoiceRegion}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<IVoiceRegion>>
  nameWithType: Task<IReadOnlyCollection<IVoiceRegion>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.IVoiceRegion>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IVoiceRegion))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IVoiceRegion))
  name.vb: Task(Of IReadOnlyCollection(Of IVoiceRegion))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IVoiceRegion
    name: IVoiceRegion
    nameWithType: IVoiceRegion
    fullName: Discord.IVoiceRegion
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IVoiceRegion
    name: IVoiceRegion
    nameWithType: IVoiceRegion
    fullName: Discord.IVoiceRegion
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Discord.WebSocket.SocketChannel,System.Threading.Tasks.Task}
  commentId: T:System.Func{Discord.WebSocket.SocketChannel,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`2
  name: Func<SocketChannel, Task>
  nameWithType: Func<SocketChannel, Task>
  fullName: System.Func<Discord.WebSocket.SocketChannel, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of SocketChannel, Task)
  fullName.vb: System.Func(Of Discord.WebSocket.SocketChannel, System.Threading.Tasks.Task)
  name.vb: Func(Of SocketChannel, Task)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketChannel
    name: SocketChannel
    nameWithType: SocketChannel
    fullName: Discord.WebSocket.SocketChannel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketChannel
    name: SocketChannel
    nameWithType: SocketChannel
    fullName: Discord.WebSocket.SocketChannel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Discord.WebSocket.SocketChannel,Discord.WebSocket.SocketChannel,System.Threading.Tasks.Task}
  commentId: T:System.Func{Discord.WebSocket.SocketChannel,Discord.WebSocket.SocketChannel,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`3
  name: Func<SocketChannel, SocketChannel, Task>
  nameWithType: Func<SocketChannel, SocketChannel, Task>
  fullName: System.Func<Discord.WebSocket.SocketChannel, Discord.WebSocket.SocketChannel, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of SocketChannel, SocketChannel, Task)
  fullName.vb: System.Func(Of Discord.WebSocket.SocketChannel, Discord.WebSocket.SocketChannel, System.Threading.Tasks.Task)
  name.vb: Func(Of SocketChannel, SocketChannel, Task)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketChannel
    name: SocketChannel
    nameWithType: SocketChannel
    fullName: Discord.WebSocket.SocketChannel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.SocketChannel
    name: SocketChannel
    nameWithType: SocketChannel
    fullName: Discord.WebSocket.SocketChannel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketChannel
    name: SocketChannel
    nameWithType: SocketChannel
    fullName: Discord.WebSocket.SocketChannel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.SocketChannel
    name: SocketChannel
    nameWithType: SocketChannel
    fullName: Discord.WebSocket.SocketChannel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketMessage
  commentId: T:Discord.WebSocket.SocketMessage
  parent: Discord.WebSocket
  name: SocketMessage
  nameWithType: SocketMessage
  fullName: Discord.WebSocket.SocketMessage
- uid: Discord.WebSocket.SocketSystemMessage
  commentId: T:Discord.WebSocket.SocketSystemMessage
  name: SocketSystemMessage
  nameWithType: SocketSystemMessage
  fullName: Discord.WebSocket.SocketSystemMessage
- uid: Discord.WebSocket.SocketUserMessage
  commentId: T:Discord.WebSocket.SocketUserMessage
  parent: Discord.WebSocket
  name: SocketUserMessage
  nameWithType: SocketUserMessage
  fullName: Discord.WebSocket.SocketUserMessage
- uid: System.Func{Discord.WebSocket.SocketMessage,System.Threading.Tasks.Task}
  commentId: T:System.Func{Discord.WebSocket.SocketMessage,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`2
  name: Func<SocketMessage, Task>
  nameWithType: Func<SocketMessage, Task>
  fullName: System.Func<Discord.WebSocket.SocketMessage, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of SocketMessage, Task)
  fullName.vb: System.Func(Of Discord.WebSocket.SocketMessage, System.Threading.Tasks.Task)
  name.vb: Func(Of SocketMessage, Task)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketMessage
    name: SocketMessage
    nameWithType: SocketMessage
    fullName: Discord.WebSocket.SocketMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketMessage
    name: SocketMessage
    nameWithType: SocketMessage
    fullName: Discord.WebSocket.SocketMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Cacheable`2
  commentId: T:Discord.Cacheable`2
  name: Cacheable<TEntity, TId>
  nameWithType: Cacheable<TEntity, TId>
  fullName: Discord.Cacheable<TEntity, TId>
  nameWithType.vb: Cacheable(Of TEntity, TId)
  fullName.vb: Discord.Cacheable(Of TEntity, TId)
  name.vb: Cacheable(Of TEntity, TId)
  spec.csharp:
  - uid: Discord.Cacheable`2
    name: Cacheable
    nameWithType: Cacheable
    fullName: Discord.Cacheable
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Cacheable`2
    name: Cacheable
    nameWithType: Cacheable
    fullName: Discord.Cacheable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.ISocketMessageChannel
  commentId: T:Discord.WebSocket.ISocketMessageChannel
  parent: Discord.WebSocket
  name: ISocketMessageChannel
  nameWithType: ISocketMessageChannel
  fullName: Discord.WebSocket.ISocketMessageChannel
- uid: Discord.Cacheable`2.DownloadAsync
  commentId: M:Discord.Cacheable`2.DownloadAsync
  isExternal: true
- uid: System.Func{Discord.Cacheable{Discord.IMessage,System.UInt64},Discord.WebSocket.ISocketMessageChannel,System.Threading.Tasks.Task}
  commentId: T:System.Func{Discord.Cacheable{Discord.IMessage,System.UInt64},Discord.WebSocket.ISocketMessageChannel,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`3
  name: Func<Cacheable<IMessage, UInt64>, ISocketMessageChannel, Task>
  nameWithType: Func<Cacheable<IMessage, UInt64>, ISocketMessageChannel, Task>
  fullName: System.Func<Discord.Cacheable<Discord.IMessage, System.UInt64>, Discord.WebSocket.ISocketMessageChannel, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of Cacheable(Of IMessage, UInt64), ISocketMessageChannel, Task)
  fullName.vb: System.Func(Of Discord.Cacheable(Of Discord.IMessage, System.UInt64), Discord.WebSocket.ISocketMessageChannel, System.Threading.Tasks.Task)
  name.vb: Func(Of Cacheable(Of IMessage, UInt64), ISocketMessageChannel, Task)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Cacheable`2
    name: Cacheable
    nameWithType: Cacheable
    fullName: Discord.Cacheable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.ISocketMessageChannel
    name: ISocketMessageChannel
    nameWithType: ISocketMessageChannel
    fullName: Discord.WebSocket.ISocketMessageChannel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Cacheable`2
    name: Cacheable
    nameWithType: Cacheable
    fullName: Discord.Cacheable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.ISocketMessageChannel
    name: ISocketMessageChannel
    nameWithType: ISocketMessageChannel
    fullName: Discord.WebSocket.ISocketMessageChannel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.BaseSocketClient.MessageDeleted
  commentId: E:Discord.WebSocket.BaseSocketClient.MessageDeleted
  parent: Discord.WebSocket.BaseSocketClient
  name: MessageDeleted
  nameWithType: BaseSocketClient.MessageDeleted
  fullName: Discord.WebSocket.BaseSocketClient.MessageDeleted
- uid: System.Func{System.Collections.Generic.IReadOnlyCollection{Discord.Cacheable{Discord.IMessage,System.UInt64}},Discord.WebSocket.ISocketMessageChannel,System.Threading.Tasks.Task}
  commentId: T:System.Func{System.Collections.Generic.IReadOnlyCollection{Discord.Cacheable{Discord.IMessage,System.UInt64}},Discord.WebSocket.ISocketMessageChannel,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`3
  name: Func<IReadOnlyCollection<Cacheable<IMessage, UInt64>>, ISocketMessageChannel, Task>
  nameWithType: Func<IReadOnlyCollection<Cacheable<IMessage, UInt64>>, ISocketMessageChannel, Task>
  fullName: System.Func<System.Collections.Generic.IReadOnlyCollection<Discord.Cacheable<Discord.IMessage, System.UInt64>>, Discord.WebSocket.ISocketMessageChannel, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of IReadOnlyCollection(Of Cacheable(Of IMessage, UInt64)), ISocketMessageChannel, Task)
  fullName.vb: System.Func(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.Cacheable(Of Discord.IMessage, System.UInt64)), Discord.WebSocket.ISocketMessageChannel, System.Threading.Tasks.Task)
  name.vb: Func(Of IReadOnlyCollection(Of Cacheable(Of IMessage, UInt64)), ISocketMessageChannel, Task)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Cacheable`2
    name: Cacheable
    nameWithType: Cacheable
    fullName: Discord.Cacheable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.ISocketMessageChannel
    name: ISocketMessageChannel
    nameWithType: ISocketMessageChannel
    fullName: Discord.WebSocket.ISocketMessageChannel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Cacheable`2
    name: Cacheable
    nameWithType: Cacheable
    fullName: Discord.Cacheable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.ISocketMessageChannel
    name: ISocketMessageChannel
    nameWithType: ISocketMessageChannel
    fullName: Discord.WebSocket.ISocketMessageChannel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.BaseSocketClient
  commentId: T:Discord.WebSocket.BaseSocketClient
  parent: Discord.WebSocket
  name: BaseSocketClient
  nameWithType: BaseSocketClient
  fullName: Discord.WebSocket.BaseSocketClient
- uid: System.Func{Discord.Cacheable{Discord.IMessage,System.UInt64},Discord.WebSocket.SocketMessage,Discord.WebSocket.ISocketMessageChannel,System.Threading.Tasks.Task}
  commentId: T:System.Func{Discord.Cacheable{Discord.IMessage,System.UInt64},Discord.WebSocket.SocketMessage,Discord.WebSocket.ISocketMessageChannel,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`4
  name: Func<Cacheable<IMessage, UInt64>, SocketMessage, ISocketMessageChannel, Task>
  nameWithType: Func<Cacheable<IMessage, UInt64>, SocketMessage, ISocketMessageChannel, Task>
  fullName: System.Func<Discord.Cacheable<Discord.IMessage, System.UInt64>, Discord.WebSocket.SocketMessage, Discord.WebSocket.ISocketMessageChannel, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of Cacheable(Of IMessage, UInt64), SocketMessage, ISocketMessageChannel, Task)
  fullName.vb: System.Func(Of Discord.Cacheable(Of Discord.IMessage, System.UInt64), Discord.WebSocket.SocketMessage, Discord.WebSocket.ISocketMessageChannel, System.Threading.Tasks.Task)
  name.vb: Func(Of Cacheable(Of IMessage, UInt64), SocketMessage, ISocketMessageChannel, Task)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Cacheable`2
    name: Cacheable
    nameWithType: Cacheable
    fullName: Discord.Cacheable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.SocketMessage
    name: SocketMessage
    nameWithType: SocketMessage
    fullName: Discord.WebSocket.SocketMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.ISocketMessageChannel
    name: ISocketMessageChannel
    nameWithType: ISocketMessageChannel
    fullName: Discord.WebSocket.ISocketMessageChannel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Cacheable`2
    name: Cacheable
    nameWithType: Cacheable
    fullName: Discord.Cacheable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.SocketMessage
    name: SocketMessage
    nameWithType: SocketMessage
    fullName: Discord.WebSocket.SocketMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.ISocketMessageChannel
    name: ISocketMessageChannel
    nameWithType: ISocketMessageChannel
    fullName: Discord.WebSocket.ISocketMessageChannel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`4
  commentId: T:System.Func`4
  isExternal: true
  name: Func<T1, T2, T3, TResult>
  nameWithType: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketReaction
  commentId: T:Discord.WebSocket.SocketReaction
  name: SocketReaction
  nameWithType: SocketReaction
  fullName: Discord.WebSocket.SocketReaction
- uid: Discord.WebSocket.SocketReaction.User
  commentId: P:Discord.WebSocket.SocketReaction.User
  isExternal: true
- uid: System.Func{Discord.Cacheable{Discord.IUserMessage,System.UInt64},Discord.WebSocket.ISocketMessageChannel,Discord.WebSocket.SocketReaction,System.Threading.Tasks.Task}
  commentId: T:System.Func{Discord.Cacheable{Discord.IUserMessage,System.UInt64},Discord.WebSocket.ISocketMessageChannel,Discord.WebSocket.SocketReaction,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`4
  name: Func<Cacheable<IUserMessage, UInt64>, ISocketMessageChannel, SocketReaction, Task>
  nameWithType: Func<Cacheable<IUserMessage, UInt64>, ISocketMessageChannel, SocketReaction, Task>
  fullName: System.Func<Discord.Cacheable<Discord.IUserMessage, System.UInt64>, Discord.WebSocket.ISocketMessageChannel, Discord.WebSocket.SocketReaction, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of Cacheable(Of IUserMessage, UInt64), ISocketMessageChannel, SocketReaction, Task)
  fullName.vb: System.Func(Of Discord.Cacheable(Of Discord.IUserMessage, System.UInt64), Discord.WebSocket.ISocketMessageChannel, Discord.WebSocket.SocketReaction, System.Threading.Tasks.Task)
  name.vb: Func(Of Cacheable(Of IUserMessage, UInt64), ISocketMessageChannel, SocketReaction, Task)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Cacheable`2
    name: Cacheable
    nameWithType: Cacheable
    fullName: Discord.Cacheable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.ISocketMessageChannel
    name: ISocketMessageChannel
    nameWithType: ISocketMessageChannel
    fullName: Discord.WebSocket.ISocketMessageChannel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.SocketReaction
    name: SocketReaction
    nameWithType: SocketReaction
    fullName: Discord.WebSocket.SocketReaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Cacheable`2
    name: Cacheable
    nameWithType: Cacheable
    fullName: Discord.Cacheable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.ISocketMessageChannel
    name: ISocketMessageChannel
    nameWithType: ISocketMessageChannel
    fullName: Discord.WebSocket.ISocketMessageChannel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.SocketReaction
    name: SocketReaction
    nameWithType: SocketReaction
    fullName: Discord.WebSocket.SocketReaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Discord.Cacheable{Discord.IUserMessage,System.UInt64},Discord.WebSocket.ISocketMessageChannel,System.Threading.Tasks.Task}
  commentId: T:System.Func{Discord.Cacheable{Discord.IUserMessage,System.UInt64},Discord.WebSocket.ISocketMessageChannel,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`3
  name: Func<Cacheable<IUserMessage, UInt64>, ISocketMessageChannel, Task>
  nameWithType: Func<Cacheable<IUserMessage, UInt64>, ISocketMessageChannel, Task>
  fullName: System.Func<Discord.Cacheable<Discord.IUserMessage, System.UInt64>, Discord.WebSocket.ISocketMessageChannel, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of Cacheable(Of IUserMessage, UInt64), ISocketMessageChannel, Task)
  fullName.vb: System.Func(Of Discord.Cacheable(Of Discord.IUserMessage, System.UInt64), Discord.WebSocket.ISocketMessageChannel, System.Threading.Tasks.Task)
  name.vb: Func(Of Cacheable(Of IUserMessage, UInt64), ISocketMessageChannel, Task)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Cacheable`2
    name: Cacheable
    nameWithType: Cacheable
    fullName: Discord.Cacheable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.ISocketMessageChannel
    name: ISocketMessageChannel
    nameWithType: ISocketMessageChannel
    fullName: Discord.WebSocket.ISocketMessageChannel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Cacheable`2
    name: Cacheable
    nameWithType: Cacheable
    fullName: Discord.Cacheable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.ISocketMessageChannel
    name: ISocketMessageChannel
    nameWithType: ISocketMessageChannel
    fullName: Discord.WebSocket.ISocketMessageChannel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Discord.WebSocket.SocketRole,System.Threading.Tasks.Task}
  commentId: T:System.Func{Discord.WebSocket.SocketRole,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`2
  name: Func<SocketRole, Task>
  nameWithType: Func<SocketRole, Task>
  fullName: System.Func<Discord.WebSocket.SocketRole, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of SocketRole, Task)
  fullName.vb: System.Func(Of Discord.WebSocket.SocketRole, System.Threading.Tasks.Task)
  name.vb: Func(Of SocketRole, Task)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketRole
    name: SocketRole
    nameWithType: SocketRole
    fullName: Discord.WebSocket.SocketRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketRole
    name: SocketRole
    nameWithType: SocketRole
    fullName: Discord.WebSocket.SocketRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Discord.WebSocket.SocketRole,Discord.WebSocket.SocketRole,System.Threading.Tasks.Task}
  commentId: T:System.Func{Discord.WebSocket.SocketRole,Discord.WebSocket.SocketRole,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`3
  name: Func<SocketRole, SocketRole, Task>
  nameWithType: Func<SocketRole, SocketRole, Task>
  fullName: System.Func<Discord.WebSocket.SocketRole, Discord.WebSocket.SocketRole, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of SocketRole, SocketRole, Task)
  fullName.vb: System.Func(Of Discord.WebSocket.SocketRole, Discord.WebSocket.SocketRole, System.Threading.Tasks.Task)
  name.vb: Func(Of SocketRole, SocketRole, Task)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketRole
    name: SocketRole
    nameWithType: SocketRole
    fullName: Discord.WebSocket.SocketRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.SocketRole
    name: SocketRole
    nameWithType: SocketRole
    fullName: Discord.WebSocket.SocketRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketRole
    name: SocketRole
    nameWithType: SocketRole
    fullName: Discord.WebSocket.SocketRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.SocketRole
    name: SocketRole
    nameWithType: SocketRole
    fullName: Discord.WebSocket.SocketRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Discord.WebSocket.SocketGuild,System.Threading.Tasks.Task}
  commentId: T:System.Func{Discord.WebSocket.SocketGuild,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`2
  name: Func<SocketGuild, Task>
  nameWithType: Func<SocketGuild, Task>
  fullName: System.Func<Discord.WebSocket.SocketGuild, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of SocketGuild, Task)
  fullName.vb: System.Func(Of Discord.WebSocket.SocketGuild, System.Threading.Tasks.Task)
  name.vb: Func(Of SocketGuild, Task)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketGuild
    name: SocketGuild
    nameWithType: SocketGuild
    fullName: Discord.WebSocket.SocketGuild
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketGuild
    name: SocketGuild
    nameWithType: SocketGuild
    fullName: Discord.WebSocket.SocketGuild
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Discord.WebSocket.SocketGuild,Discord.WebSocket.SocketGuild,System.Threading.Tasks.Task}
  commentId: T:System.Func{Discord.WebSocket.SocketGuild,Discord.WebSocket.SocketGuild,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`3
  name: Func<SocketGuild, SocketGuild, Task>
  nameWithType: Func<SocketGuild, SocketGuild, Task>
  fullName: System.Func<Discord.WebSocket.SocketGuild, Discord.WebSocket.SocketGuild, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of SocketGuild, SocketGuild, Task)
  fullName.vb: System.Func(Of Discord.WebSocket.SocketGuild, Discord.WebSocket.SocketGuild, System.Threading.Tasks.Task)
  name.vb: Func(Of SocketGuild, SocketGuild, Task)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketGuild
    name: SocketGuild
    nameWithType: SocketGuild
    fullName: Discord.WebSocket.SocketGuild
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.SocketGuild
    name: SocketGuild
    nameWithType: SocketGuild
    fullName: Discord.WebSocket.SocketGuild
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketGuild
    name: SocketGuild
    nameWithType: SocketGuild
    fullName: Discord.WebSocket.SocketGuild
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.SocketGuild
    name: SocketGuild
    nameWithType: SocketGuild
    fullName: Discord.WebSocket.SocketGuild
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Discord.WebSocket.SocketGuildUser,System.Threading.Tasks.Task}
  commentId: T:System.Func{Discord.WebSocket.SocketGuildUser,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`2
  name: Func<SocketGuildUser, Task>
  nameWithType: Func<SocketGuildUser, Task>
  fullName: System.Func<Discord.WebSocket.SocketGuildUser, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of SocketGuildUser, Task)
  fullName.vb: System.Func(Of Discord.WebSocket.SocketGuildUser, System.Threading.Tasks.Task)
  name.vb: Func(Of SocketGuildUser, Task)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketGuildUser
    name: SocketGuildUser
    nameWithType: SocketGuildUser
    fullName: Discord.WebSocket.SocketGuildUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketGuildUser
    name: SocketGuildUser
    nameWithType: SocketGuildUser
    fullName: Discord.WebSocket.SocketGuildUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Discord.WebSocket.SocketUser,Discord.WebSocket.SocketGuild,System.Threading.Tasks.Task}
  commentId: T:System.Func{Discord.WebSocket.SocketUser,Discord.WebSocket.SocketGuild,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`3
  name: Func<SocketUser, SocketGuild, Task>
  nameWithType: Func<SocketUser, SocketGuild, Task>
  fullName: System.Func<Discord.WebSocket.SocketUser, Discord.WebSocket.SocketGuild, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of SocketUser, SocketGuild, Task)
  fullName.vb: System.Func(Of Discord.WebSocket.SocketUser, Discord.WebSocket.SocketGuild, System.Threading.Tasks.Task)
  name.vb: Func(Of SocketUser, SocketGuild, Task)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketUser
    name: SocketUser
    nameWithType: SocketUser
    fullName: Discord.WebSocket.SocketUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.SocketGuild
    name: SocketGuild
    nameWithType: SocketGuild
    fullName: Discord.WebSocket.SocketGuild
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketUser
    name: SocketUser
    nameWithType: SocketUser
    fullName: Discord.WebSocket.SocketUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.SocketGuild
    name: SocketGuild
    nameWithType: SocketGuild
    fullName: Discord.WebSocket.SocketGuild
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Discord.WebSocket.SocketUser,Discord.WebSocket.SocketUser,System.Threading.Tasks.Task}
  commentId: T:System.Func{Discord.WebSocket.SocketUser,Discord.WebSocket.SocketUser,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`3
  name: Func<SocketUser, SocketUser, Task>
  nameWithType: Func<SocketUser, SocketUser, Task>
  fullName: System.Func<Discord.WebSocket.SocketUser, Discord.WebSocket.SocketUser, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of SocketUser, SocketUser, Task)
  fullName.vb: System.Func(Of Discord.WebSocket.SocketUser, Discord.WebSocket.SocketUser, System.Threading.Tasks.Task)
  name.vb: Func(Of SocketUser, SocketUser, Task)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketUser
    name: SocketUser
    nameWithType: SocketUser
    fullName: Discord.WebSocket.SocketUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.SocketUser
    name: SocketUser
    nameWithType: SocketUser
    fullName: Discord.WebSocket.SocketUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketUser
    name: SocketUser
    nameWithType: SocketUser
    fullName: Discord.WebSocket.SocketUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.SocketUser
    name: SocketUser
    nameWithType: SocketUser
    fullName: Discord.WebSocket.SocketUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Discord.WebSocket.SocketGuildUser,Discord.WebSocket.SocketGuildUser,System.Threading.Tasks.Task}
  commentId: T:System.Func{Discord.WebSocket.SocketGuildUser,Discord.WebSocket.SocketGuildUser,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`3
  name: Func<SocketGuildUser, SocketGuildUser, Task>
  nameWithType: Func<SocketGuildUser, SocketGuildUser, Task>
  fullName: System.Func<Discord.WebSocket.SocketGuildUser, Discord.WebSocket.SocketGuildUser, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of SocketGuildUser, SocketGuildUser, Task)
  fullName.vb: System.Func(Of Discord.WebSocket.SocketGuildUser, Discord.WebSocket.SocketGuildUser, System.Threading.Tasks.Task)
  name.vb: Func(Of SocketGuildUser, SocketGuildUser, Task)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketGuildUser
    name: SocketGuildUser
    nameWithType: SocketGuildUser
    fullName: Discord.WebSocket.SocketGuildUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.SocketGuildUser
    name: SocketGuildUser
    nameWithType: SocketGuildUser
    fullName: Discord.WebSocket.SocketGuildUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketGuildUser
    name: SocketGuildUser
    nameWithType: SocketGuildUser
    fullName: Discord.WebSocket.SocketGuildUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.SocketGuildUser
    name: SocketGuildUser
    nameWithType: SocketGuildUser
    fullName: Discord.WebSocket.SocketGuildUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Discord.WebSocket.SocketUser,Discord.WebSocket.SocketVoiceState,Discord.WebSocket.SocketVoiceState,System.Threading.Tasks.Task}
  commentId: T:System.Func{Discord.WebSocket.SocketUser,Discord.WebSocket.SocketVoiceState,Discord.WebSocket.SocketVoiceState,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`4
  name: Func<SocketUser, SocketVoiceState, SocketVoiceState, Task>
  nameWithType: Func<SocketUser, SocketVoiceState, SocketVoiceState, Task>
  fullName: System.Func<Discord.WebSocket.SocketUser, Discord.WebSocket.SocketVoiceState, Discord.WebSocket.SocketVoiceState, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of SocketUser, SocketVoiceState, SocketVoiceState, Task)
  fullName.vb: System.Func(Of Discord.WebSocket.SocketUser, Discord.WebSocket.SocketVoiceState, Discord.WebSocket.SocketVoiceState, System.Threading.Tasks.Task)
  name.vb: Func(Of SocketUser, SocketVoiceState, SocketVoiceState, Task)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketUser
    name: SocketUser
    nameWithType: SocketUser
    fullName: Discord.WebSocket.SocketUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.SocketVoiceState
    name: SocketVoiceState
    nameWithType: SocketVoiceState
    fullName: Discord.WebSocket.SocketVoiceState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.SocketVoiceState
    name: SocketVoiceState
    nameWithType: SocketVoiceState
    fullName: Discord.WebSocket.SocketVoiceState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketUser
    name: SocketUser
    nameWithType: SocketUser
    fullName: Discord.WebSocket.SocketUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.SocketVoiceState
    name: SocketVoiceState
    nameWithType: SocketVoiceState
    fullName: Discord.WebSocket.SocketVoiceState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.SocketVoiceState
    name: SocketVoiceState
    nameWithType: SocketVoiceState
    fullName: Discord.WebSocket.SocketVoiceState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Discord.WebSocket.SocketVoiceServer,System.Threading.Tasks.Task}
  commentId: T:System.Func{Discord.WebSocket.SocketVoiceServer,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`2
  name: Func<SocketVoiceServer, Task>
  nameWithType: Func<SocketVoiceServer, Task>
  fullName: System.Func<Discord.WebSocket.SocketVoiceServer, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of SocketVoiceServer, Task)
  fullName.vb: System.Func(Of Discord.WebSocket.SocketVoiceServer, System.Threading.Tasks.Task)
  name.vb: Func(Of SocketVoiceServer, Task)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketVoiceServer
    name: SocketVoiceServer
    nameWithType: SocketVoiceServer
    fullName: Discord.WebSocket.SocketVoiceServer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketVoiceServer
    name: SocketVoiceServer
    nameWithType: SocketVoiceServer
    fullName: Discord.WebSocket.SocketVoiceServer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Discord.WebSocket.SocketSelfUser,Discord.WebSocket.SocketSelfUser,System.Threading.Tasks.Task}
  commentId: T:System.Func{Discord.WebSocket.SocketSelfUser,Discord.WebSocket.SocketSelfUser,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`3
  name: Func<SocketSelfUser, SocketSelfUser, Task>
  nameWithType: Func<SocketSelfUser, SocketSelfUser, Task>
  fullName: System.Func<Discord.WebSocket.SocketSelfUser, Discord.WebSocket.SocketSelfUser, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of SocketSelfUser, SocketSelfUser, Task)
  fullName.vb: System.Func(Of Discord.WebSocket.SocketSelfUser, Discord.WebSocket.SocketSelfUser, System.Threading.Tasks.Task)
  name.vb: Func(Of SocketSelfUser, SocketSelfUser, Task)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketSelfUser
    name: SocketSelfUser
    nameWithType: SocketSelfUser
    fullName: Discord.WebSocket.SocketSelfUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.SocketSelfUser
    name: SocketSelfUser
    nameWithType: SocketSelfUser
    fullName: Discord.WebSocket.SocketSelfUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketSelfUser
    name: SocketSelfUser
    nameWithType: SocketSelfUser
    fullName: Discord.WebSocket.SocketSelfUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.SocketSelfUser
    name: SocketSelfUser
    nameWithType: SocketSelfUser
    fullName: Discord.WebSocket.SocketSelfUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Discord.WebSocket.SocketUser,Discord.WebSocket.ISocketMessageChannel,System.Threading.Tasks.Task}
  commentId: T:System.Func{Discord.WebSocket.SocketUser,Discord.WebSocket.ISocketMessageChannel,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`3
  name: Func<SocketUser, ISocketMessageChannel, Task>
  nameWithType: Func<SocketUser, ISocketMessageChannel, Task>
  fullName: System.Func<Discord.WebSocket.SocketUser, Discord.WebSocket.ISocketMessageChannel, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of SocketUser, ISocketMessageChannel, Task)
  fullName.vb: System.Func(Of Discord.WebSocket.SocketUser, Discord.WebSocket.ISocketMessageChannel, System.Threading.Tasks.Task)
  name.vb: Func(Of SocketUser, ISocketMessageChannel, Task)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketUser
    name: SocketUser
    nameWithType: SocketUser
    fullName: Discord.WebSocket.SocketUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.ISocketMessageChannel
    name: ISocketMessageChannel
    nameWithType: ISocketMessageChannel
    fullName: Discord.WebSocket.ISocketMessageChannel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketUser
    name: SocketUser
    nameWithType: SocketUser
    fullName: Discord.WebSocket.SocketUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.WebSocket.ISocketMessageChannel
    name: ISocketMessageChannel
    nameWithType: ISocketMessageChannel
    fullName: Discord.WebSocket.ISocketMessageChannel
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Discord.WebSocket.SocketGroupUser,System.Threading.Tasks.Task}
  commentId: T:System.Func{Discord.WebSocket.SocketGroupUser,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`2
  name: Func<SocketGroupUser, Task>
  nameWithType: Func<SocketGroupUser, Task>
  fullName: System.Func<Discord.WebSocket.SocketGroupUser, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of SocketGroupUser, Task)
  fullName.vb: System.Func(Of Discord.WebSocket.SocketGroupUser, System.Threading.Tasks.Task)
  name.vb: Func(Of SocketGroupUser, Task)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketGroupUser
    name: SocketGroupUser
    nameWithType: SocketGroupUser
    fullName: Discord.WebSocket.SocketGroupUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketGroupUser
    name: SocketGroupUser
    nameWithType: SocketGroupUser
    fullName: Discord.WebSocket.SocketGroupUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
