### YamlMime:ManagedReference
items:
- uid: Discord.Commands.IEnumerableExtensions
  commentId: T:Discord.Commands.IEnumerableExtensions
  id: IEnumerableExtensions
  parent: Discord.Commands
  children:
  - Discord.Commands.IEnumerableExtensions.Permutate``3(IEnumerable{``0},IEnumerable{``1},Func{``0,``1,``2})
  langs:
  - csharp
  - vb
  name: IEnumerableExtensions
  nameWithType: IEnumerableExtensions
  fullName: Discord.Commands.IEnumerableExtensions
  type: Class
  source:
    remote:
      path: src/Discord.Net.Commands/Extensions/IEnumerableExtensions.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: IEnumerableExtensions
    path: ../src/Discord.Net.Commands/Extensions/IEnumerableExtensions.cs
    startLine: 5
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: 'public static class IEnumerableExtensions : object'
    content.vb: >-
      Public Module IEnumerableExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Discord.Commands.IEnumerableExtensions.Permutate``3(IEnumerable{``0},IEnumerable{``1},Func{``0,``1,``2})
  commentId: M:Discord.Commands.IEnumerableExtensions.Permutate``3(IEnumerable{``0},IEnumerable{``1},Func{``0,``1,``2})
  id: Permutate``3(IEnumerable{``0},IEnumerable{``1},Func{``0,``1,``2})
  isExtensionMethod: true
  parent: Discord.Commands.IEnumerableExtensions
  langs:
  - csharp
  - vb
  name: Permutate<TFirst, TSecond, TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, TResult>)
  nameWithType: IEnumerableExtensions.Permutate<TFirst, TSecond, TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, TResult>)
  fullName: Discord.Commands.IEnumerableExtensions.Permutate<TFirst, TSecond, TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, TResult>)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Extensions/IEnumerableExtensions.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Permutate
    path: ../src/Discord.Net.Commands/Extensions/IEnumerableExtensions.cs
    startLine: 7
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public static IEnumerable<TResult> Permutate<TFirst, TSecond, TResult>(this IEnumerable<TFirst> set, IEnumerable<TSecond> others, Func<TFirst, TSecond, TResult> func)
    parameters:
    - id: set
      type: IEnumerable{{TFirst}}
    - id: others
      type: IEnumerable{{TSecond}}
    - id: func
      type: Func{{TFirst},{TSecond},{TResult}}
    typeParameters:
    - id: TFirst
    - id: TSecond
    - id: TResult
    return:
      type: IEnumerable{{TResult}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Permutate(Of TFirst, TSecond, TResult)(set As IEnumerable(Of TFirst), others As IEnumerable(Of TSecond), func As Func(Of TFirst, TSecond, TResult)) As IEnumerable(Of TResult)
  overload: Discord.Commands.IEnumerableExtensions.Permutate*
  nameWithType.vb: IEnumerableExtensions.Permutate(Of TFirst, TSecond, TResult)(IEnumerable(Of TFirst), IEnumerable(Of TSecond), Func(Of TFirst, TSecond, TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Discord.Commands.IEnumerableExtensions.Permutate(Of TFirst, TSecond, TResult)(IEnumerable(Of TFirst), IEnumerable(Of TSecond), Func(Of TFirst, TSecond, TResult))
  name.vb: Permutate(Of TFirst, TSecond, TResult)(IEnumerable(Of TFirst), IEnumerable(Of TSecond), Func(Of TFirst, TSecond, TResult))
references:
- uid: Discord.Commands
  commentId: N:Discord.Commands
  name: Discord.Commands
  nameWithType: Discord.Commands
  fullName: Discord.Commands
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Commands.IEnumerableExtensions.Permutate*
  commentId: Overload:Discord.Commands.IEnumerableExtensions.Permutate
  name: Permutate
  nameWithType: IEnumerableExtensions.Permutate
  fullName: Discord.Commands.IEnumerableExtensions.Permutate
- uid: IEnumerable{{TFirst}}
  commentId: '!:IEnumerable{``0}'
  definition: IEnumerable`1
  name: IEnumerable<TFirst>
  nameWithType: IEnumerable<TFirst>
  fullName: IEnumerable<TFirst>
  nameWithType.vb: IEnumerable(Of TFirst)
  fullName.vb: IEnumerable(Of TFirst)
  name.vb: IEnumerable(Of TFirst)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TFirst
    nameWithType: TFirst
    fullName: TFirst
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFirst
    nameWithType: TFirst
    fullName: TFirst
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable{{TSecond}}
  commentId: '!:IEnumerable{``1}'
  definition: IEnumerable`1
  name: IEnumerable<TSecond>
  nameWithType: IEnumerable<TSecond>
  fullName: IEnumerable<TSecond>
  nameWithType.vb: IEnumerable(Of TSecond)
  fullName.vb: IEnumerable(Of TSecond)
  name.vb: IEnumerable(Of TSecond)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSecond
    nameWithType: TSecond
    fullName: TSecond
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSecond
    nameWithType: TSecond
    fullName: TSecond
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{{TFirst},{TSecond},{TResult}}
  commentId: '!:Func{``0,``1,``2}'
  definition: Func`3
  name: Func<TFirst, TSecond, TResult>
  nameWithType: Func<TFirst, TSecond, TResult>
  fullName: Func<TFirst, TSecond, TResult>
  nameWithType.vb: Func(Of TFirst, TSecond, TResult)
  fullName.vb: Func(Of TFirst, TSecond, TResult)
  name.vb: Func(Of TFirst, TSecond, TResult)
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TFirst
    nameWithType: TFirst
    fullName: TFirst
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSecond
    nameWithType: TSecond
    fullName: TSecond
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFirst
    nameWithType: TFirst
    fullName: TFirst
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSecond
    nameWithType: TSecond
    fullName: TSecond
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable{{TResult}}
  commentId: '!:IEnumerable{``2}'
  definition: IEnumerable`1
  name: IEnumerable<TResult>
  nameWithType: IEnumerable<TResult>
  fullName: IEnumerable<TResult>
  nameWithType.vb: IEnumerable(Of TResult)
  fullName.vb: IEnumerable(Of TResult)
  name.vb: IEnumerable(Of TResult)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`3
  isExternal: true
  name: Func<, , >
  nameWithType: Func<, , >
  fullName: Func<, , >
  nameWithType.vb: Func(Of , , )
  fullName.vb: Func(Of , , )
  name.vb: Func(Of , , )
  spec.csharp:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`3
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
