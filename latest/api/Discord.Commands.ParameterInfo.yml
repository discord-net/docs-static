### YamlMime:ManagedReference
items:
- uid: Discord.Commands.ParameterInfo
  commentId: T:Discord.Commands.ParameterInfo
  id: ParameterInfo
  parent: Discord.Commands
  children:
  - Discord.Commands.ParameterInfo.Attributes
  - Discord.Commands.ParameterInfo.CheckPreconditionsAsync(Discord.Commands.ICommandContext,System.Object,System.IServiceProvider)
  - Discord.Commands.ParameterInfo.Command
  - Discord.Commands.ParameterInfo.DefaultValue
  - Discord.Commands.ParameterInfo.IsMultiple
  - Discord.Commands.ParameterInfo.IsOptional
  - Discord.Commands.ParameterInfo.IsRemainder
  - Discord.Commands.ParameterInfo.Name
  - Discord.Commands.ParameterInfo.ParseAsync(Discord.Commands.ICommandContext,System.String,System.IServiceProvider)
  - Discord.Commands.ParameterInfo.Preconditions
  - Discord.Commands.ParameterInfo.Summary
  - Discord.Commands.ParameterInfo.ToString
  - Discord.Commands.ParameterInfo.Type
  langs:
  - csharp
  - vb
  name: ParameterInfo
  nameWithType: ParameterInfo
  fullName: Discord.Commands.ParameterInfo
  type: Class
  source:
    remote:
      path: src/Discord.Net.Commands/Info/ParameterInfo.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ParameterInfo
    path: ../src/Discord.Net.Commands/Info/ParameterInfo.cs
    startLine: 12
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nProvides the information of a parameter.\n"
  example: []
  syntax:
    content: public class ParameterInfo
    content.vb: Public Class ParameterInfo
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.Commands.ParameterInfo.Command
  commentId: P:Discord.Commands.ParameterInfo.Command
  id: Command
  parent: Discord.Commands.ParameterInfo
  langs:
  - csharp
  - vb
  name: Command
  nameWithType: ParameterInfo.Command
  fullName: Discord.Commands.ParameterInfo.Command
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/ParameterInfo.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Command
    path: ../src/Discord.Net.Commands/Info/ParameterInfo.cs
    startLine: 20
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets the command that associates with this parameter.\n"
  example: []
  syntax:
    content: public CommandInfo Command { get; }
    parameters: []
    return:
      type: Discord.Commands.CommandInfo
    content.vb: Public ReadOnly Property Command As CommandInfo
  overload: Discord.Commands.ParameterInfo.Command*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.ParameterInfo.Name
  commentId: P:Discord.Commands.ParameterInfo.Name
  id: Name
  parent: Discord.Commands.ParameterInfo
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ParameterInfo.Name
  fullName: Discord.Commands.ParameterInfo.Name
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/ParameterInfo.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Name
    path: ../src/Discord.Net.Commands/Info/ParameterInfo.cs
    startLine: 24
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets the name of this parameter.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Discord.Commands.ParameterInfo.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.ParameterInfo.Summary
  commentId: P:Discord.Commands.ParameterInfo.Summary
  id: Summary
  parent: Discord.Commands.ParameterInfo
  langs:
  - csharp
  - vb
  name: Summary
  nameWithType: ParameterInfo.Summary
  fullName: Discord.Commands.ParameterInfo.Summary
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/ParameterInfo.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Summary
    path: ../src/Discord.Net.Commands/Info/ParameterInfo.cs
    startLine: 28
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets the summary of this parameter.\n"
  example: []
  syntax:
    content: public string Summary { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Summary As String
  overload: Discord.Commands.ParameterInfo.Summary*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.ParameterInfo.IsOptional
  commentId: P:Discord.Commands.ParameterInfo.IsOptional
  id: IsOptional
  parent: Discord.Commands.ParameterInfo
  langs:
  - csharp
  - vb
  name: IsOptional
  nameWithType: ParameterInfo.IsOptional
  fullName: Discord.Commands.ParameterInfo.IsOptional
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/ParameterInfo.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsOptional
    path: ../src/Discord.Net.Commands/Info/ParameterInfo.cs
    startLine: 32
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets a value that indicates whether this parameter is optional or not.\n"
  example: []
  syntax:
    content: public bool IsOptional { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsOptional As Boolean
  overload: Discord.Commands.ParameterInfo.IsOptional*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.ParameterInfo.IsRemainder
  commentId: P:Discord.Commands.ParameterInfo.IsRemainder
  id: IsRemainder
  parent: Discord.Commands.ParameterInfo
  langs:
  - csharp
  - vb
  name: IsRemainder
  nameWithType: ParameterInfo.IsRemainder
  fullName: Discord.Commands.ParameterInfo.IsRemainder
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/ParameterInfo.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsRemainder
    path: ../src/Discord.Net.Commands/Info/ParameterInfo.cs
    startLine: 36
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets a value that indicates whether this parameter is a remainder parameter or not.\n"
  example: []
  syntax:
    content: public bool IsRemainder { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsRemainder As Boolean
  overload: Discord.Commands.ParameterInfo.IsRemainder*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.ParameterInfo.IsMultiple
  commentId: P:Discord.Commands.ParameterInfo.IsMultiple
  id: IsMultiple
  parent: Discord.Commands.ParameterInfo
  langs:
  - csharp
  - vb
  name: IsMultiple
  nameWithType: ParameterInfo.IsMultiple
  fullName: Discord.Commands.ParameterInfo.IsMultiple
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/ParameterInfo.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsMultiple
    path: ../src/Discord.Net.Commands/Info/ParameterInfo.cs
    startLine: 37
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public bool IsMultiple { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsMultiple As Boolean
  overload: Discord.Commands.ParameterInfo.IsMultiple*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.ParameterInfo.Type
  commentId: P:Discord.Commands.ParameterInfo.Type
  id: Type
  parent: Discord.Commands.ParameterInfo
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: ParameterInfo.Type
  fullName: Discord.Commands.ParameterInfo.Type
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/ParameterInfo.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Type
    path: ../src/Discord.Net.Commands/Info/ParameterInfo.cs
    startLine: 41
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets the type of the parameter.\n"
  example: []
  syntax:
    content: public Type Type { get; }
    parameters: []
    return:
      type: System.Type
    content.vb: Public ReadOnly Property Type As Type
  overload: Discord.Commands.ParameterInfo.Type*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.ParameterInfo.DefaultValue
  commentId: P:Discord.Commands.ParameterInfo.DefaultValue
  id: DefaultValue
  parent: Discord.Commands.ParameterInfo
  langs:
  - csharp
  - vb
  name: DefaultValue
  nameWithType: ParameterInfo.DefaultValue
  fullName: Discord.Commands.ParameterInfo.DefaultValue
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/ParameterInfo.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DefaultValue
    path: ../src/Discord.Net.Commands/Info/ParameterInfo.cs
    startLine: 45
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets the default value for this optional parameter if applicable.\n"
  example: []
  syntax:
    content: public object DefaultValue { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public ReadOnly Property DefaultValue As Object
  overload: Discord.Commands.ParameterInfo.DefaultValue*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.ParameterInfo.Preconditions
  commentId: P:Discord.Commands.ParameterInfo.Preconditions
  id: Preconditions
  parent: Discord.Commands.ParameterInfo
  langs:
  - csharp
  - vb
  name: Preconditions
  nameWithType: ParameterInfo.Preconditions
  fullName: Discord.Commands.ParameterInfo.Preconditions
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/ParameterInfo.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Preconditions
    path: ../src/Discord.Net.Commands/Info/ParameterInfo.cs
    startLine: 50
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets a read-only list of precondition that apply to this parameter.\n"
  example: []
  syntax:
    content: public IReadOnlyList<ParameterPreconditionAttribute> Preconditions { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyList{Discord.Commands.ParameterPreconditionAttribute}
    content.vb: Public ReadOnly Property Preconditions As IReadOnlyList(Of ParameterPreconditionAttribute)
  overload: Discord.Commands.ParameterInfo.Preconditions*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.ParameterInfo.Attributes
  commentId: P:Discord.Commands.ParameterInfo.Attributes
  id: Attributes
  parent: Discord.Commands.ParameterInfo
  langs:
  - csharp
  - vb
  name: Attributes
  nameWithType: ParameterInfo.Attributes
  fullName: Discord.Commands.ParameterInfo.Attributes
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/ParameterInfo.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Attributes
    path: ../src/Discord.Net.Commands/Info/ParameterInfo.cs
    startLine: 54
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets a read-only list of attributes that apply to this parameter.\n"
  example: []
  syntax:
    content: public IReadOnlyList<Attribute> Attributes { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyList{System.Attribute}
    content.vb: Public ReadOnly Property Attributes As IReadOnlyList(Of Attribute)
  overload: Discord.Commands.ParameterInfo.Attributes*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.ParameterInfo.CheckPreconditionsAsync(Discord.Commands.ICommandContext,System.Object,System.IServiceProvider)
  commentId: M:Discord.Commands.ParameterInfo.CheckPreconditionsAsync(Discord.Commands.ICommandContext,System.Object,System.IServiceProvider)
  id: CheckPreconditionsAsync(Discord.Commands.ICommandContext,System.Object,System.IServiceProvider)
  parent: Discord.Commands.ParameterInfo
  langs:
  - csharp
  - vb
  name: CheckPreconditionsAsync(ICommandContext, Object, IServiceProvider)
  nameWithType: ParameterInfo.CheckPreconditionsAsync(ICommandContext, Object, IServiceProvider)
  fullName: Discord.Commands.ParameterInfo.CheckPreconditionsAsync(Discord.Commands.ICommandContext, System.Object, System.IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Info/ParameterInfo.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CheckPreconditionsAsync
    path: ../src/Discord.Net.Commands/Info/ParameterInfo.cs
    startLine: 75
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public Task<PreconditionResult> CheckPreconditionsAsync(ICommandContext context, object arg, IServiceProvider services = null)
    parameters:
    - id: context
      type: Discord.Commands.ICommandContext
    - id: arg
      type: System.Object
    - id: services
      type: System.IServiceProvider
    return:
      type: System.Threading.Tasks.Task{Discord.Commands.PreconditionResult}
    content.vb: Public Function CheckPreconditionsAsync(context As ICommandContext, arg As Object, services As IServiceProvider = Nothing) As Task(Of PreconditionResult)
  overload: Discord.Commands.ParameterInfo.CheckPreconditionsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Commands.ParameterInfo.ParseAsync(Discord.Commands.ICommandContext,System.String,System.IServiceProvider)
  commentId: M:Discord.Commands.ParameterInfo.ParseAsync(Discord.Commands.ICommandContext,System.String,System.IServiceProvider)
  id: ParseAsync(Discord.Commands.ICommandContext,System.String,System.IServiceProvider)
  parent: Discord.Commands.ParameterInfo
  langs:
  - csharp
  - vb
  name: ParseAsync(ICommandContext, String, IServiceProvider)
  nameWithType: ParameterInfo.ParseAsync(ICommandContext, String, IServiceProvider)
  fullName: Discord.Commands.ParameterInfo.ParseAsync(Discord.Commands.ICommandContext, System.String, System.IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Info/ParameterInfo.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ParseAsync
    path: ../src/Discord.Net.Commands/Info/ParameterInfo.cs
    startLine: 89
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public Task<TypeReaderResult> ParseAsync(ICommandContext context, string input, IServiceProvider services = null)
    parameters:
    - id: context
      type: Discord.Commands.ICommandContext
    - id: input
      type: System.String
    - id: services
      type: System.IServiceProvider
    return:
      type: System.Threading.Tasks.Task{Discord.Commands.TypeReaderResult}
    content.vb: Public Function ParseAsync(context As ICommandContext, input As String, services As IServiceProvider = Nothing) As Task(Of TypeReaderResult)
  overload: Discord.Commands.ParameterInfo.ParseAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Commands.ParameterInfo.ToString
  commentId: M:Discord.Commands.ParameterInfo.ToString
  id: ToString
  parent: Discord.Commands.ParameterInfo
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: ParameterInfo.ToString()
  fullName: Discord.Commands.ParameterInfo.ToString()
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Info/ParameterInfo.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ToString
    path: ../src/Discord.Net.Commands/Info/ParameterInfo.cs
    startLine: 95
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Discord.Commands.ParameterInfo.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Discord.Commands
  commentId: N:Discord.Commands
  name: Discord.Commands
  nameWithType: Discord.Commands
  fullName: Discord.Commands
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Commands.ParameterInfo.Command*
  commentId: Overload:Discord.Commands.ParameterInfo.Command
  name: Command
  nameWithType: ParameterInfo.Command
  fullName: Discord.Commands.ParameterInfo.Command
- uid: Discord.Commands.CommandInfo
  commentId: T:Discord.Commands.CommandInfo
  parent: Discord.Commands
  name: CommandInfo
  nameWithType: CommandInfo
  fullName: Discord.Commands.CommandInfo
- uid: Discord.Commands.ParameterInfo.Name*
  commentId: Overload:Discord.Commands.ParameterInfo.Name
  name: Name
  nameWithType: ParameterInfo.Name
  fullName: Discord.Commands.ParameterInfo.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.Commands.ParameterInfo.Summary*
  commentId: Overload:Discord.Commands.ParameterInfo.Summary
  name: Summary
  nameWithType: ParameterInfo.Summary
  fullName: Discord.Commands.ParameterInfo.Summary
- uid: Discord.Commands.ParameterInfo.IsOptional*
  commentId: Overload:Discord.Commands.ParameterInfo.IsOptional
  name: IsOptional
  nameWithType: ParameterInfo.IsOptional
  fullName: Discord.Commands.ParameterInfo.IsOptional
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.Commands.ParameterInfo.IsRemainder*
  commentId: Overload:Discord.Commands.ParameterInfo.IsRemainder
  name: IsRemainder
  nameWithType: ParameterInfo.IsRemainder
  fullName: Discord.Commands.ParameterInfo.IsRemainder
- uid: Discord.Commands.ParameterInfo.IsMultiple*
  commentId: Overload:Discord.Commands.ParameterInfo.IsMultiple
  name: IsMultiple
  nameWithType: ParameterInfo.IsMultiple
  fullName: Discord.Commands.ParameterInfo.IsMultiple
- uid: Discord.Commands.ParameterInfo.Type*
  commentId: Overload:Discord.Commands.ParameterInfo.Type
  name: Type
  nameWithType: ParameterInfo.Type
  fullName: Discord.Commands.ParameterInfo.Type
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Discord.Commands.ParameterInfo.DefaultValue*
  commentId: Overload:Discord.Commands.ParameterInfo.DefaultValue
  name: DefaultValue
  nameWithType: ParameterInfo.DefaultValue
  fullName: Discord.Commands.ParameterInfo.DefaultValue
- uid: Discord.Commands.ParameterInfo.Preconditions*
  commentId: Overload:Discord.Commands.ParameterInfo.Preconditions
  name: Preconditions
  nameWithType: ParameterInfo.Preconditions
  fullName: Discord.Commands.ParameterInfo.Preconditions
- uid: System.Collections.Generic.IReadOnlyList{Discord.Commands.ParameterPreconditionAttribute}
  commentId: T:System.Collections.Generic.IReadOnlyList{Discord.Commands.ParameterPreconditionAttribute}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<ParameterPreconditionAttribute>
  nameWithType: IReadOnlyList<ParameterPreconditionAttribute>
  fullName: System.Collections.Generic.IReadOnlyList<Discord.Commands.ParameterPreconditionAttribute>
  nameWithType.vb: IReadOnlyList(Of ParameterPreconditionAttribute)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of Discord.Commands.ParameterPreconditionAttribute)
  name.vb: IReadOnlyList(Of ParameterPreconditionAttribute)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.ParameterPreconditionAttribute
    name: ParameterPreconditionAttribute
    nameWithType: ParameterPreconditionAttribute
    fullName: Discord.Commands.ParameterPreconditionAttribute
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.ParameterPreconditionAttribute
    name: ParameterPreconditionAttribute
    nameWithType: ParameterPreconditionAttribute
    fullName: Discord.Commands.ParameterPreconditionAttribute
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Discord.Commands.ParameterInfo.Attributes*
  commentId: Overload:Discord.Commands.ParameterInfo.Attributes
  name: Attributes
  nameWithType: ParameterInfo.Attributes
  fullName: Discord.Commands.ParameterInfo.Attributes
- uid: System.Collections.Generic.IReadOnlyList{System.Attribute}
  commentId: T:System.Collections.Generic.IReadOnlyList{System.Attribute}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<Attribute>
  nameWithType: IReadOnlyList<Attribute>
  fullName: System.Collections.Generic.IReadOnlyList<System.Attribute>
  nameWithType.vb: IReadOnlyList(Of Attribute)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of System.Attribute)
  name.vb: IReadOnlyList(Of Attribute)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Attribute
    name: Attribute
    nameWithType: Attribute
    fullName: System.Attribute
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Attribute
    name: Attribute
    nameWithType: Attribute
    fullName: System.Attribute
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.ParameterInfo.CheckPreconditionsAsync*
  commentId: Overload:Discord.Commands.ParameterInfo.CheckPreconditionsAsync
  name: CheckPreconditionsAsync
  nameWithType: ParameterInfo.CheckPreconditionsAsync
  fullName: Discord.Commands.ParameterInfo.CheckPreconditionsAsync
- uid: Discord.Commands.ICommandContext
  commentId: T:Discord.Commands.ICommandContext
  parent: Discord.Commands
  name: ICommandContext
  nameWithType: ICommandContext
  fullName: Discord.Commands.ICommandContext
- uid: System.IServiceProvider
  commentId: T:System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.Threading.Tasks.Task{Discord.Commands.PreconditionResult}
  commentId: T:System.Threading.Tasks.Task{Discord.Commands.PreconditionResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<PreconditionResult>
  nameWithType: Task<PreconditionResult>
  fullName: System.Threading.Tasks.Task<Discord.Commands.PreconditionResult>
  nameWithType.vb: Task(Of PreconditionResult)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.Commands.PreconditionResult)
  name.vb: Task(Of PreconditionResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.PreconditionResult
    name: PreconditionResult
    nameWithType: PreconditionResult
    fullName: Discord.Commands.PreconditionResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.PreconditionResult
    name: PreconditionResult
    nameWithType: PreconditionResult
    fullName: Discord.Commands.PreconditionResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Discord.Commands.ParameterInfo.ParseAsync*
  commentId: Overload:Discord.Commands.ParameterInfo.ParseAsync
  name: ParseAsync
  nameWithType: ParameterInfo.ParseAsync
  fullName: Discord.Commands.ParameterInfo.ParseAsync
- uid: System.Threading.Tasks.Task{Discord.Commands.TypeReaderResult}
  commentId: T:System.Threading.Tasks.Task{Discord.Commands.TypeReaderResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TypeReaderResult>
  nameWithType: Task<TypeReaderResult>
  fullName: System.Threading.Tasks.Task<Discord.Commands.TypeReaderResult>
  nameWithType.vb: Task(Of TypeReaderResult)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.Commands.TypeReaderResult)
  name.vb: Task(Of TypeReaderResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.TypeReaderResult
    name: TypeReaderResult
    nameWithType: TypeReaderResult
    fullName: Discord.Commands.TypeReaderResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.TypeReaderResult
    name: TypeReaderResult
    nameWithType: TypeReaderResult
    fullName: Discord.Commands.TypeReaderResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.ParameterInfo.ToString*
  commentId: Overload:Discord.Commands.ParameterInfo.ToString
  name: ToString
  nameWithType: ParameterInfo.ToString
  fullName: Discord.Commands.ParameterInfo.ToString
