### YamlMime:ManagedReference
items:
- uid: Discord.IAudioChannel
  commentId: T:Discord.IAudioChannel
  id: IAudioChannel
  parent: Discord
  children:
  - Discord.IAudioChannel.ConnectAsync(System.Boolean,System.Boolean,System.Boolean)
  - Discord.IAudioChannel.DisconnectAsync
  langs:
  - csharp
  - vb
  name: IAudioChannel
  nameWithType: IAudioChannel
  fullName: Discord.IAudioChannel
  type: Interface
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IAudioChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: IAudioChannel
    path: ../src/Discord.Net.Core/Entities/Channels/IAudioChannel.cs
    startLine: 8
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nRepresents a generic audio channel.\n"
  example: []
  syntax:
    content: 'public interface IAudioChannel : IChannel, ISnowflakeEntity, IEntity<ulong>'
    content.vb: >-
      Public Interface IAudioChannel
          Inherits IChannel
  inheritedMembers:
  - Discord.IChannel.Name
  - Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  - Discord.ISnowflakeEntity.CreatedAt
  - Discord.IEntity{System.UInt64}.Id
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Discord.IAudioChannel.ConnectAsync(System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Discord.IAudioChannel.ConnectAsync(System.Boolean,System.Boolean,System.Boolean)
  id: ConnectAsync(System.Boolean,System.Boolean,System.Boolean)
  parent: Discord.IAudioChannel
  langs:
  - csharp
  - vb
  name: ConnectAsync(Boolean, Boolean, Boolean)
  nameWithType: IAudioChannel.ConnectAsync(Boolean, Boolean, Boolean)
  fullName: Discord.IAudioChannel.ConnectAsync(System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IAudioChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ConnectAsync
    path: ../src/Discord.Net.Core/Entities/Channels/IAudioChannel.cs
    startLine: 20
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nConnects to this audio channel.\n"
  example: []
  syntax:
    content: Task<IAudioClient> ConnectAsync(bool selfDeaf = false, bool selfMute = false, bool external = false)
    parameters:
    - id: selfDeaf
      type: System.Boolean
      description: Determines whether the client should deaf itself upon connection.
    - id: selfMute
      type: System.Boolean
      description: Determines whether the client should mute itself upon connection.
    - id: external
      type: System.Boolean
      description: Determines whether the audio client is an external one or not.
    return:
      type: Task{Discord.Audio.IAudioClient}
      description: "\nA task representing the asynchronous connection operation. The task result contains the\n<xref href=\"Discord.Audio.IAudioClient\" data-throw-if-not-resolved=\"false\"></xref> responsible for the connection.\n"
    content.vb: Function ConnectAsync(selfDeaf As Boolean = False, selfMute As Boolean = False, external As Boolean = False) As Task(Of IAudioClient)
  overload: Discord.IAudioChannel.ConnectAsync*
- uid: Discord.IAudioChannel.DisconnectAsync
  commentId: M:Discord.IAudioChannel.DisconnectAsync
  id: DisconnectAsync
  parent: Discord.IAudioChannel
  langs:
  - csharp
  - vb
  name: DisconnectAsync()
  nameWithType: IAudioChannel.DisconnectAsync()
  fullName: Discord.IAudioChannel.DisconnectAsync()
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Channels/IAudioChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: DisconnectAsync
    path: ../src/Discord.Net.Core/Entities/Channels/IAudioChannel.cs
    startLine: 28
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nDisconnects from this audio channel.\n"
  example: []
  syntax:
    content: Task DisconnectAsync()
    return:
      type: Task
      description: "\nA task representing the asynchronous operation for disconnecting from the audio channel.\n"
    content.vb: Function DisconnectAsync As Task
  overload: Discord.IAudioChannel.DisconnectAsync*
references:
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.IChannel.Name
  commentId: P:Discord.IChannel.Name
  parent: Discord.IChannel
  name: Name
  nameWithType: IChannel.Name
  fullName: Discord.IChannel.Name
- uid: Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IChannel
  name: GetUsersAsync(CacheMode, RequestOptions)
  nameWithType: IChannel.GetUsersAsync(CacheMode, RequestOptions)
  fullName: Discord.IChannel.GetUsersAsync(Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetUsersAsync
    nameWithType: IChannel.GetUsersAsync
    fullName: Discord.IChannel.GetUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetUsersAsync
    nameWithType: IChannel.GetUsersAsync
    fullName: Discord.IChannel.GetUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IChannel
  isExternal: true
  name: GetUserAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.IChannel.GetUserAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetUserAsync
    nameWithType: IChannel.GetUserAsync
    fullName: Discord.IChannel.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetUserAsync
    nameWithType: IChannel.GetUserAsync
    fullName: Discord.IChannel.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.ISnowflakeEntity.CreatedAt
  commentId: P:Discord.ISnowflakeEntity.CreatedAt
  parent: Discord.ISnowflakeEntity
  name: CreatedAt
  nameWithType: ISnowflakeEntity.CreatedAt
  fullName: Discord.ISnowflakeEntity.CreatedAt
- uid: Discord.IEntity{System.UInt64}.Id
  commentId: P:Discord.IEntity{System.UInt64}.Id
  parent: Discord.IEntity{System.UInt64}
  definition: Discord.IEntity`1.Id
  name: Id
  nameWithType: IEntity<UInt64>.Id
  fullName: Discord.IEntity<System.UInt64>.Id
  nameWithType.vb: IEntity(Of UInt64).Id
  fullName.vb: Discord.IEntity(Of System.UInt64).Id
- uid: Discord.IChannel
  commentId: T:Discord.IChannel
  parent: Discord
  name: IChannel
  nameWithType: IChannel
  fullName: Discord.IChannel
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IEntity`1.Id
  commentId: P:Discord.IEntity`1.Id
  name: Id
  nameWithType: IEntity<TId>.Id
  fullName: Discord.IEntity<TId>.Id
  nameWithType.vb: IEntity(Of TId).Id
  fullName.vb: Discord.IEntity(Of TId).Id
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Audio.IAudioClient
  commentId: T:Discord.Audio.IAudioClient
  parent: Discord.Audio
  name: IAudioClient
  nameWithType: IAudioClient
  fullName: Discord.Audio.IAudioClient
- uid: Discord.IAudioChannel.ConnectAsync*
  commentId: Overload:Discord.IAudioChannel.ConnectAsync
  name: ConnectAsync
  nameWithType: IAudioChannel.ConnectAsync
  fullName: Discord.IAudioChannel.ConnectAsync
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Task{Discord.Audio.IAudioClient}
  commentId: '!:Task{Discord.Audio.IAudioClient}'
  definition: Task`1
  name: Task<IAudioClient>
  nameWithType: Task<IAudioClient>
  fullName: Task<Discord.Audio.IAudioClient>
  nameWithType.vb: Task(Of IAudioClient)
  fullName.vb: Task(Of Discord.Audio.IAudioClient)
  name.vb: Task(Of IAudioClient)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Audio.IAudioClient
    name: IAudioClient
    nameWithType: IAudioClient
    fullName: Discord.Audio.IAudioClient
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Audio.IAudioClient
    name: IAudioClient
    nameWithType: IAudioClient
    fullName: Discord.Audio.IAudioClient
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Audio
  commentId: N:Discord.Audio
  name: Discord.Audio
  nameWithType: Discord.Audio
  fullName: Discord.Audio
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IAudioChannel.DisconnectAsync*
  commentId: Overload:Discord.IAudioChannel.DisconnectAsync
  name: DisconnectAsync
  nameWithType: IAudioChannel.DisconnectAsync
  fullName: Discord.IAudioChannel.DisconnectAsync
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
