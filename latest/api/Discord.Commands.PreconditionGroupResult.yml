### YamlMime:ManagedReference
items:
- uid: Discord.Commands.PreconditionGroupResult
  commentId: T:Discord.Commands.PreconditionGroupResult
  id: PreconditionGroupResult
  parent: Discord.Commands
  children:
  - Discord.Commands.PreconditionGroupResult.#ctor(System.Nullable{Discord.Commands.CommandError},System.String,System.Collections.Generic.ICollection{Discord.Commands.PreconditionResult})
  - Discord.Commands.PreconditionGroupResult.FromError(Discord.Commands.IResult)
  - Discord.Commands.PreconditionGroupResult.FromError(System.Exception)
  - Discord.Commands.PreconditionGroupResult.FromError(System.String,System.Collections.Generic.ICollection{Discord.Commands.PreconditionResult})
  - Discord.Commands.PreconditionGroupResult.FromSuccess
  - Discord.Commands.PreconditionGroupResult.PreconditionResults
  - Discord.Commands.PreconditionGroupResult.ToString
  langs:
  - csharp
  - vb
  name: PreconditionGroupResult
  nameWithType: PreconditionGroupResult
  fullName: Discord.Commands.PreconditionGroupResult
  type: Class
  source:
    remote:
      path: src/Discord.Net.Commands/Results/PreconditionGroupResult.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: PreconditionGroupResult
    path: ../src/Discord.Net.Commands/Results/PreconditionGroupResult.cs
    startLine: 6
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: 'public class PreconditionGroupResult : PreconditionResult, IResult'
    content.vb: >-
      Public Class PreconditionGroupResult
          Inherits PreconditionResult
          Implements IResult
  inheritance:
  - System.Object
  - Discord.Commands.PreconditionResult
  implements:
  - Discord.Commands.IResult
  inheritedMembers:
  - Discord.Commands.PreconditionResult.Error
  - Discord.Commands.PreconditionResult.ErrorReason
  - Discord.Commands.PreconditionResult.IsSuccess
  - Discord.Commands.PreconditionResult.FromError(System.String)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.Commands.PreconditionGroupResult.PreconditionResults
  commentId: P:Discord.Commands.PreconditionGroupResult.PreconditionResults
  id: PreconditionResults
  parent: Discord.Commands.PreconditionGroupResult
  langs:
  - csharp
  - vb
  name: PreconditionResults
  nameWithType: PreconditionGroupResult.PreconditionResults
  fullName: Discord.Commands.PreconditionGroupResult.PreconditionResults
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Results/PreconditionGroupResult.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: PreconditionResults
    path: ../src/Discord.Net.Commands/Results/PreconditionGroupResult.cs
    startLine: 9
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public IReadOnlyCollection<PreconditionResult> PreconditionResults { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.Commands.PreconditionResult}
    content.vb: Public ReadOnly Property PreconditionResults As IReadOnlyCollection(Of PreconditionResult)
  overload: Discord.Commands.PreconditionGroupResult.PreconditionResults*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.PreconditionGroupResult.#ctor(System.Nullable{Discord.Commands.CommandError},System.String,System.Collections.Generic.ICollection{Discord.Commands.PreconditionResult})
  commentId: M:Discord.Commands.PreconditionGroupResult.#ctor(System.Nullable{Discord.Commands.CommandError},System.String,System.Collections.Generic.ICollection{Discord.Commands.PreconditionResult})
  id: '#ctor(System.Nullable{Discord.Commands.CommandError},System.String,System.Collections.Generic.ICollection{Discord.Commands.PreconditionResult})'
  parent: Discord.Commands.PreconditionGroupResult
  langs:
  - csharp
  - vb
  name: PreconditionGroupResult(Nullable<CommandError>, String, ICollection<PreconditionResult>)
  nameWithType: PreconditionGroupResult.PreconditionGroupResult(Nullable<CommandError>, String, ICollection<PreconditionResult>)
  fullName: Discord.Commands.PreconditionGroupResult.PreconditionGroupResult(System.Nullable<Discord.Commands.CommandError>, System.String, System.Collections.Generic.ICollection<Discord.Commands.PreconditionResult>)
  type: Constructor
  source:
    remote:
      path: src/Discord.Net.Commands/Results/PreconditionGroupResult.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: .ctor
    path: ../src/Discord.Net.Commands/Results/PreconditionGroupResult.cs
    startLine: 11
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: protected PreconditionGroupResult(CommandError? error, string errorReason, ICollection<PreconditionResult> preconditions)
    parameters:
    - id: error
      type: System.Nullable{Discord.Commands.CommandError}
    - id: errorReason
      type: System.String
    - id: preconditions
      type: System.Collections.Generic.ICollection{Discord.Commands.PreconditionResult}
    content.vb: Protected Sub New(error As CommandError?, errorReason As String, preconditions As ICollection(Of PreconditionResult))
  overload: Discord.Commands.PreconditionGroupResult.#ctor*
  nameWithType.vb: PreconditionGroupResult.PreconditionGroupResult(Nullable(Of CommandError), String, ICollection(Of PreconditionResult))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Discord.Commands.PreconditionGroupResult.PreconditionGroupResult(System.Nullable(Of Discord.Commands.CommandError), System.String, System.Collections.Generic.ICollection(Of Discord.Commands.PreconditionResult))
  name.vb: PreconditionGroupResult(Nullable(Of CommandError), String, ICollection(Of PreconditionResult))
- uid: Discord.Commands.PreconditionGroupResult.FromSuccess
  commentId: M:Discord.Commands.PreconditionGroupResult.FromSuccess
  id: FromSuccess
  parent: Discord.Commands.PreconditionGroupResult
  langs:
  - csharp
  - vb
  name: FromSuccess()
  nameWithType: PreconditionGroupResult.FromSuccess()
  fullName: Discord.Commands.PreconditionGroupResult.FromSuccess()
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Results/PreconditionGroupResult.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: FromSuccess
    path: ../src/Discord.Net.Commands/Results/PreconditionGroupResult.cs
    startLine: 17
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public static PreconditionGroupResult FromSuccess()
    return:
      type: Discord.Commands.PreconditionGroupResult
    content.vb: Public Shared Function FromSuccess As PreconditionGroupResult
  overload: Discord.Commands.PreconditionGroupResult.FromSuccess*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Discord.Commands.PreconditionGroupResult.FromError(System.String,System.Collections.Generic.ICollection{Discord.Commands.PreconditionResult})
  commentId: M:Discord.Commands.PreconditionGroupResult.FromError(System.String,System.Collections.Generic.ICollection{Discord.Commands.PreconditionResult})
  id: FromError(System.String,System.Collections.Generic.ICollection{Discord.Commands.PreconditionResult})
  parent: Discord.Commands.PreconditionGroupResult
  langs:
  - csharp
  - vb
  name: FromError(String, ICollection<PreconditionResult>)
  nameWithType: PreconditionGroupResult.FromError(String, ICollection<PreconditionResult>)
  fullName: Discord.Commands.PreconditionGroupResult.FromError(System.String, System.Collections.Generic.ICollection<Discord.Commands.PreconditionResult>)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Results/PreconditionGroupResult.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: FromError
    path: ../src/Discord.Net.Commands/Results/PreconditionGroupResult.cs
    startLine: 19
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public static PreconditionGroupResult FromError(string reason, ICollection<PreconditionResult> preconditions)
    parameters:
    - id: reason
      type: System.String
    - id: preconditions
      type: System.Collections.Generic.ICollection{Discord.Commands.PreconditionResult}
    return:
      type: Discord.Commands.PreconditionGroupResult
    content.vb: Public Shared Function FromError(reason As String, preconditions As ICollection(Of PreconditionResult)) As PreconditionGroupResult
  overload: Discord.Commands.PreconditionGroupResult.FromError*
  nameWithType.vb: PreconditionGroupResult.FromError(String, ICollection(Of PreconditionResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Discord.Commands.PreconditionGroupResult.FromError(System.String, System.Collections.Generic.ICollection(Of Discord.Commands.PreconditionResult))
  name.vb: FromError(String, ICollection(Of PreconditionResult))
- uid: Discord.Commands.PreconditionGroupResult.FromError(System.Exception)
  commentId: M:Discord.Commands.PreconditionGroupResult.FromError(System.Exception)
  id: FromError(System.Exception)
  parent: Discord.Commands.PreconditionGroupResult
  langs:
  - csharp
  - vb
  name: FromError(Exception)
  nameWithType: PreconditionGroupResult.FromError(Exception)
  fullName: Discord.Commands.PreconditionGroupResult.FromError(System.Exception)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Results/PreconditionGroupResult.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: FromError
    path: ../src/Discord.Net.Commands/Results/PreconditionGroupResult.cs
    startLine: 21
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public static PreconditionGroupResult FromError(Exception ex)
    parameters:
    - id: ex
      type: System.Exception
    return:
      type: Discord.Commands.PreconditionGroupResult
    content.vb: Public Shared Function FromError(ex As Exception) As PreconditionGroupResult
  overload: Discord.Commands.PreconditionGroupResult.FromError*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Discord.Commands.PreconditionGroupResult.FromError(Discord.Commands.IResult)
  commentId: M:Discord.Commands.PreconditionGroupResult.FromError(Discord.Commands.IResult)
  id: FromError(Discord.Commands.IResult)
  parent: Discord.Commands.PreconditionGroupResult
  langs:
  - csharp
  - vb
  name: FromError(IResult)
  nameWithType: PreconditionGroupResult.FromError(IResult)
  fullName: Discord.Commands.PreconditionGroupResult.FromError(Discord.Commands.IResult)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Results/PreconditionGroupResult.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: FromError
    path: ../src/Discord.Net.Commands/Results/PreconditionGroupResult.cs
    startLine: 23
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public static PreconditionGroupResult FromError(IResult result)
    parameters:
    - id: result
      type: Discord.Commands.IResult
    return:
      type: Discord.Commands.PreconditionGroupResult
    content.vb: Public Shared Function FromError(result As IResult) As PreconditionGroupResult
  overload: Discord.Commands.PreconditionGroupResult.FromError*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Discord.Commands.PreconditionGroupResult.ToString
  commentId: M:Discord.Commands.PreconditionGroupResult.ToString
  id: ToString
  parent: Discord.Commands.PreconditionGroupResult
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: PreconditionGroupResult.ToString()
  fullName: Discord.Commands.PreconditionGroupResult.ToString()
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Results/PreconditionGroupResult.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ToString
    path: ../src/Discord.Net.Commands/Results/PreconditionGroupResult.cs
    startLine: 26
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: Discord.Commands.PreconditionResult.ToString
  overload: Discord.Commands.PreconditionGroupResult.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Discord.Commands
  commentId: N:Discord.Commands
  name: Discord.Commands
  nameWithType: Discord.Commands
  fullName: Discord.Commands
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Commands.PreconditionResult
  commentId: T:Discord.Commands.PreconditionResult
  parent: Discord.Commands
  name: PreconditionResult
  nameWithType: PreconditionResult
  fullName: Discord.Commands.PreconditionResult
- uid: Discord.Commands.IResult
  commentId: T:Discord.Commands.IResult
  parent: Discord.Commands
  name: IResult
  nameWithType: IResult
  fullName: Discord.Commands.IResult
- uid: Discord.Commands.PreconditionResult.Error
  commentId: P:Discord.Commands.PreconditionResult.Error
  parent: Discord.Commands.PreconditionResult
  name: Error
  nameWithType: PreconditionResult.Error
  fullName: Discord.Commands.PreconditionResult.Error
- uid: Discord.Commands.PreconditionResult.ErrorReason
  commentId: P:Discord.Commands.PreconditionResult.ErrorReason
  parent: Discord.Commands.PreconditionResult
  name: ErrorReason
  nameWithType: PreconditionResult.ErrorReason
  fullName: Discord.Commands.PreconditionResult.ErrorReason
- uid: Discord.Commands.PreconditionResult.IsSuccess
  commentId: P:Discord.Commands.PreconditionResult.IsSuccess
  parent: Discord.Commands.PreconditionResult
  name: IsSuccess
  nameWithType: PreconditionResult.IsSuccess
  fullName: Discord.Commands.PreconditionResult.IsSuccess
- uid: Discord.Commands.PreconditionResult.FromError(System.String)
  commentId: M:Discord.Commands.PreconditionResult.FromError(System.String)
  parent: Discord.Commands.PreconditionResult
  isExternal: true
  name: FromError(String)
  nameWithType: PreconditionResult.FromError(String)
  fullName: Discord.Commands.PreconditionResult.FromError(System.String)
  spec.csharp:
  - uid: Discord.Commands.PreconditionResult.FromError(System.String)
    name: FromError
    nameWithType: PreconditionResult.FromError
    fullName: Discord.Commands.PreconditionResult.FromError
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.PreconditionResult.FromError(System.String)
    name: FromError
    nameWithType: PreconditionResult.FromError
    fullName: Discord.Commands.PreconditionResult.FromError
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Commands.PreconditionGroupResult.PreconditionResults*
  commentId: Overload:Discord.Commands.PreconditionGroupResult.PreconditionResults
  name: PreconditionResults
  nameWithType: PreconditionGroupResult.PreconditionResults
  fullName: Discord.Commands.PreconditionGroupResult.PreconditionResults
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.Commands.PreconditionResult}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.Commands.PreconditionResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<PreconditionResult>
  nameWithType: IReadOnlyCollection<PreconditionResult>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.Commands.PreconditionResult>
  nameWithType.vb: IReadOnlyCollection(Of PreconditionResult)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.Commands.PreconditionResult)
  name.vb: IReadOnlyCollection(Of PreconditionResult)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.PreconditionResult
    name: PreconditionResult
    nameWithType: PreconditionResult
    fullName: Discord.Commands.PreconditionResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.PreconditionResult
    name: PreconditionResult
    nameWithType: PreconditionResult
    fullName: Discord.Commands.PreconditionResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Discord.Commands.PreconditionGroupResult.#ctor*
  commentId: Overload:Discord.Commands.PreconditionGroupResult.#ctor
  name: PreconditionGroupResult
  nameWithType: PreconditionGroupResult.PreconditionGroupResult
  fullName: Discord.Commands.PreconditionGroupResult.PreconditionGroupResult
- uid: System.Nullable{Discord.Commands.CommandError}
  commentId: T:System.Nullable{Discord.Commands.CommandError}
  parent: System
  definition: System.Nullable`1
  name: Nullable<CommandError>
  nameWithType: Nullable<CommandError>
  fullName: System.Nullable<Discord.Commands.CommandError>
  nameWithType.vb: Nullable(Of CommandError)
  fullName.vb: System.Nullable(Of Discord.Commands.CommandError)
  name.vb: Nullable(Of CommandError)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.CommandError
    name: CommandError
    nameWithType: CommandError
    fullName: Discord.Commands.CommandError
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.CommandError
    name: CommandError
    nameWithType: CommandError
    fullName: Discord.Commands.CommandError
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.ICollection{Discord.Commands.PreconditionResult}
  commentId: T:System.Collections.Generic.ICollection{Discord.Commands.PreconditionResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<PreconditionResult>
  nameWithType: ICollection<PreconditionResult>
  fullName: System.Collections.Generic.ICollection<Discord.Commands.PreconditionResult>
  nameWithType.vb: ICollection(Of PreconditionResult)
  fullName.vb: System.Collections.Generic.ICollection(Of Discord.Commands.PreconditionResult)
  name.vb: ICollection(Of PreconditionResult)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.PreconditionResult
    name: PreconditionResult
    nameWithType: PreconditionResult
    fullName: Discord.Commands.PreconditionResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.PreconditionResult
    name: PreconditionResult
    nameWithType: PreconditionResult
    fullName: Discord.Commands.PreconditionResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.PreconditionGroupResult.FromSuccess*
  commentId: Overload:Discord.Commands.PreconditionGroupResult.FromSuccess
  name: FromSuccess
  nameWithType: PreconditionGroupResult.FromSuccess
  fullName: Discord.Commands.PreconditionGroupResult.FromSuccess
- uid: Discord.Commands.PreconditionGroupResult
  commentId: T:Discord.Commands.PreconditionGroupResult
  parent: Discord.Commands
  name: PreconditionGroupResult
  nameWithType: PreconditionGroupResult
  fullName: Discord.Commands.PreconditionGroupResult
- uid: Discord.Commands.PreconditionGroupResult.FromError*
  commentId: Overload:Discord.Commands.PreconditionGroupResult.FromError
  name: FromError
  nameWithType: PreconditionGroupResult.FromError
  fullName: Discord.Commands.PreconditionGroupResult.FromError
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Discord.Commands.PreconditionResult.ToString
  commentId: M:Discord.Commands.PreconditionResult.ToString
  parent: Discord.Commands.PreconditionResult
  name: ToString()
  nameWithType: PreconditionResult.ToString()
  fullName: Discord.Commands.PreconditionResult.ToString()
  spec.csharp:
  - uid: Discord.Commands.PreconditionResult.ToString
    name: ToString
    nameWithType: PreconditionResult.ToString
    fullName: Discord.Commands.PreconditionResult.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.PreconditionResult.ToString
    name: ToString
    nameWithType: PreconditionResult.ToString
    fullName: Discord.Commands.PreconditionResult.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.PreconditionGroupResult.ToString*
  commentId: Overload:Discord.Commands.PreconditionGroupResult.ToString
  name: ToString
  nameWithType: PreconditionGroupResult.ToString
  fullName: Discord.Commands.PreconditionGroupResult.ToString
