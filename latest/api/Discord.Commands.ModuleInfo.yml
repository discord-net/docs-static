### YamlMime:ManagedReference
items:
- uid: Discord.Commands.ModuleInfo
  commentId: T:Discord.Commands.ModuleInfo
  id: ModuleInfo
  parent: Discord.Commands
  children:
  - Discord.Commands.ModuleInfo.Aliases
  - Discord.Commands.ModuleInfo.Attributes
  - Discord.Commands.ModuleInfo.Commands
  - Discord.Commands.ModuleInfo.Group
  - Discord.Commands.ModuleInfo.IsSubmodule
  - Discord.Commands.ModuleInfo.Name
  - Discord.Commands.ModuleInfo.Parent
  - Discord.Commands.ModuleInfo.Preconditions
  - Discord.Commands.ModuleInfo.Remarks
  - Discord.Commands.ModuleInfo.Service
  - Discord.Commands.ModuleInfo.Submodules
  - Discord.Commands.ModuleInfo.Summary
  langs:
  - csharp
  - vb
  name: ModuleInfo
  nameWithType: ModuleInfo
  fullName: Discord.Commands.ModuleInfo
  type: Class
  source:
    remote:
      path: src/Discord.Net.Commands/Info/ModuleInfo.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ModuleInfo
    path: ../src/Discord.Net.Commands/Info/ModuleInfo.cs
    startLine: 11
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nProvides the information of a module.\n"
  example: []
  syntax:
    content: 'public class ModuleInfo : object'
    content.vb: >-
      Public Class ModuleInfo
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - Discord.Commands.ModuleInfo.Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync(Discord.Commands.ICommandContext,IServiceProvider)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.Commands.ModuleInfo.Service
  commentId: P:Discord.Commands.ModuleInfo.Service
  id: Service
  parent: Discord.Commands.ModuleInfo
  langs:
  - csharp
  - vb
  name: Service
  nameWithType: ModuleInfo.Service
  fullName: Discord.Commands.ModuleInfo.Service
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/ModuleInfo.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Service
    path: ../src/Discord.Net.Commands/Info/ModuleInfo.cs
    startLine: 16
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets the command service associated with this module.\n"
  example: []
  syntax:
    content: public CommandService Service { get; }
    parameters: []
    return:
      type: Discord.Commands.CommandService
    content.vb: Public ReadOnly Property Service As CommandService
  overload: Discord.Commands.ModuleInfo.Service*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.ModuleInfo.Name
  commentId: P:Discord.Commands.ModuleInfo.Name
  id: Name
  parent: Discord.Commands.ModuleInfo
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ModuleInfo.Name
  fullName: Discord.Commands.ModuleInfo.Name
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/ModuleInfo.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Name
    path: ../src/Discord.Net.Commands/Info/ModuleInfo.cs
    startLine: 20
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets the name of this module.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Discord.Commands.ModuleInfo.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.ModuleInfo.Summary
  commentId: P:Discord.Commands.ModuleInfo.Summary
  id: Summary
  parent: Discord.Commands.ModuleInfo
  langs:
  - csharp
  - vb
  name: Summary
  nameWithType: ModuleInfo.Summary
  fullName: Discord.Commands.ModuleInfo.Summary
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/ModuleInfo.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Summary
    path: ../src/Discord.Net.Commands/Info/ModuleInfo.cs
    startLine: 24
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets the summary of this module.\n"
  example: []
  syntax:
    content: public string Summary { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Summary As String
  overload: Discord.Commands.ModuleInfo.Summary*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.ModuleInfo.Remarks
  commentId: P:Discord.Commands.ModuleInfo.Remarks
  id: Remarks
  parent: Discord.Commands.ModuleInfo
  langs:
  - csharp
  - vb
  name: Remarks
  nameWithType: ModuleInfo.Remarks
  fullName: Discord.Commands.ModuleInfo.Remarks
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/ModuleInfo.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Remarks
    path: ../src/Discord.Net.Commands/Info/ModuleInfo.cs
    startLine: 28
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets the remarks of this module.\n"
  example: []
  syntax:
    content: public string Remarks { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Remarks As String
  overload: Discord.Commands.ModuleInfo.Remarks*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.ModuleInfo.Group
  commentId: P:Discord.Commands.ModuleInfo.Group
  id: Group
  parent: Discord.Commands.ModuleInfo
  langs:
  - csharp
  - vb
  name: Group
  nameWithType: ModuleInfo.Group
  fullName: Discord.Commands.ModuleInfo.Group
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/ModuleInfo.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Group
    path: ../src/Discord.Net.Commands/Info/ModuleInfo.cs
    startLine: 32
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets the group name (main prefix) of this module.\n"
  example: []
  syntax:
    content: public string Group { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Group As String
  overload: Discord.Commands.ModuleInfo.Group*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.ModuleInfo.Aliases
  commentId: P:Discord.Commands.ModuleInfo.Aliases
  id: Aliases
  parent: Discord.Commands.ModuleInfo
  langs:
  - csharp
  - vb
  name: Aliases
  nameWithType: ModuleInfo.Aliases
  fullName: Discord.Commands.ModuleInfo.Aliases
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/ModuleInfo.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Aliases
    path: ../src/Discord.Net.Commands/Info/ModuleInfo.cs
    startLine: 37
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets a read-only list of aliases associated with this module.\n"
  example: []
  syntax:
    content: public IReadOnlyList<string> Aliases { get; }
    parameters: []
    return:
      type: IReadOnlyList{System.String}
    content.vb: Public ReadOnly Property Aliases As IReadOnlyList(Of String)
  overload: Discord.Commands.ModuleInfo.Aliases*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.ModuleInfo.Commands
  commentId: P:Discord.Commands.ModuleInfo.Commands
  id: Commands
  parent: Discord.Commands.ModuleInfo
  langs:
  - csharp
  - vb
  name: Commands
  nameWithType: ModuleInfo.Commands
  fullName: Discord.Commands.ModuleInfo.Commands
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/ModuleInfo.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Commands
    path: ../src/Discord.Net.Commands/Info/ModuleInfo.cs
    startLine: 41
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets a read-only list of commands associated with this module.\n"
  example: []
  syntax:
    content: public IReadOnlyList<CommandInfo> Commands { get; }
    parameters: []
    return:
      type: IReadOnlyList{Discord.Commands.CommandInfo}
    content.vb: Public ReadOnly Property Commands As IReadOnlyList(Of CommandInfo)
  overload: Discord.Commands.ModuleInfo.Commands*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.ModuleInfo.Preconditions
  commentId: P:Discord.Commands.ModuleInfo.Preconditions
  id: Preconditions
  parent: Discord.Commands.ModuleInfo
  langs:
  - csharp
  - vb
  name: Preconditions
  nameWithType: ModuleInfo.Preconditions
  fullName: Discord.Commands.ModuleInfo.Preconditions
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/ModuleInfo.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Preconditions
    path: ../src/Discord.Net.Commands/Info/ModuleInfo.cs
    startLine: 45
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets a read-only list of preconditions that apply to this module.\n"
  example: []
  syntax:
    content: public IReadOnlyList<PreconditionAttribute> Preconditions { get; }
    parameters: []
    return:
      type: IReadOnlyList{Discord.Commands.PreconditionAttribute}
    content.vb: Public ReadOnly Property Preconditions As IReadOnlyList(Of PreconditionAttribute)
  overload: Discord.Commands.ModuleInfo.Preconditions*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.ModuleInfo.Attributes
  commentId: P:Discord.Commands.ModuleInfo.Attributes
  id: Attributes
  parent: Discord.Commands.ModuleInfo
  langs:
  - csharp
  - vb
  name: Attributes
  nameWithType: ModuleInfo.Attributes
  fullName: Discord.Commands.ModuleInfo.Attributes
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/ModuleInfo.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Attributes
    path: ../src/Discord.Net.Commands/Info/ModuleInfo.cs
    startLine: 49
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets a read-only list of attributes that apply to this module.\n"
  example: []
  syntax:
    content: public IReadOnlyList<Attribute> Attributes { get; }
    parameters: []
    return:
      type: IReadOnlyList{Attribute}
    content.vb: Public ReadOnly Property Attributes As IReadOnlyList(Of Attribute)
  overload: Discord.Commands.ModuleInfo.Attributes*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.ModuleInfo.Submodules
  commentId: P:Discord.Commands.ModuleInfo.Submodules
  id: Submodules
  parent: Discord.Commands.ModuleInfo
  langs:
  - csharp
  - vb
  name: Submodules
  nameWithType: ModuleInfo.Submodules
  fullName: Discord.Commands.ModuleInfo.Submodules
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/ModuleInfo.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Submodules
    path: ../src/Discord.Net.Commands/Info/ModuleInfo.cs
    startLine: 53
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets a read-only list of submodules associated with this module.\n"
  example: []
  syntax:
    content: public IReadOnlyList<ModuleInfo> Submodules { get; }
    parameters: []
    return:
      type: IReadOnlyList{Discord.Commands.ModuleInfo}
    content.vb: Public ReadOnly Property Submodules As IReadOnlyList(Of ModuleInfo)
  overload: Discord.Commands.ModuleInfo.Submodules*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.ModuleInfo.Parent
  commentId: P:Discord.Commands.ModuleInfo.Parent
  id: Parent
  parent: Discord.Commands.ModuleInfo
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: ModuleInfo.Parent
  fullName: Discord.Commands.ModuleInfo.Parent
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/ModuleInfo.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Parent
    path: ../src/Discord.Net.Commands/Info/ModuleInfo.cs
    startLine: 57
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets the parent module of this submodule if applicable.\n"
  example: []
  syntax:
    content: public ModuleInfo Parent { get; }
    parameters: []
    return:
      type: Discord.Commands.ModuleInfo
    content.vb: Public ReadOnly Property Parent As ModuleInfo
  overload: Discord.Commands.ModuleInfo.Parent*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.ModuleInfo.IsSubmodule
  commentId: P:Discord.Commands.ModuleInfo.IsSubmodule
  id: IsSubmodule
  parent: Discord.Commands.ModuleInfo
  langs:
  - csharp
  - vb
  name: IsSubmodule
  nameWithType: ModuleInfo.IsSubmodule
  fullName: Discord.Commands.ModuleInfo.IsSubmodule
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Info/ModuleInfo.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsSubmodule
    path: ../src/Discord.Net.Commands/Info/ModuleInfo.cs
    startLine: 61
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nGets a value that indicates whether this module is a submodule or not.\n"
  example: []
  syntax:
    content: public bool IsSubmodule { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSubmodule As Boolean
  overload: Discord.Commands.ModuleInfo.IsSubmodule*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Discord.Commands
  commentId: N:Discord.Commands
  name: Discord.Commands
  nameWithType: Discord.Commands
  fullName: Discord.Commands
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Commands.ModuleInfo.Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync(Discord.Commands.ICommandContext,IServiceProvider)
  commentId: M:Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync(Discord.Commands.ModuleInfo,Discord.Commands.ICommandContext,IServiceProvider)
  parent: Discord.Commands.CommandServiceExtensions
  definition: Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync(Discord.Commands.ModuleInfo,Discord.Commands.ICommandContext,IServiceProvider)
  name: GetExecutableCommandsAsync(ICommandContext, IServiceProvider)
  nameWithType: CommandServiceExtensions.GetExecutableCommandsAsync(ICommandContext, IServiceProvider)
  fullName: Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync(Discord.Commands.ICommandContext, IServiceProvider)
  spec.csharp:
  - uid: Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync(Discord.Commands.ICommandContext,IServiceProvider)
    name: GetExecutableCommandsAsync
    nameWithType: CommandServiceExtensions.GetExecutableCommandsAsync
    fullName: Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.Commands.ICommandContext
    name: ICommandContext
    nameWithType: ICommandContext
    fullName: Discord.Commands.ICommandContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: IServiceProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync(Discord.Commands.ICommandContext,IServiceProvider)
    name: GetExecutableCommandsAsync
    nameWithType: CommandServiceExtensions.GetExecutableCommandsAsync
    fullName: Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.Commands.ICommandContext
    name: ICommandContext
    nameWithType: ICommandContext
    fullName: Discord.Commands.ICommandContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: IServiceProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync(Discord.Commands.ModuleInfo,Discord.Commands.ICommandContext,IServiceProvider)
  commentId: M:Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync(Discord.Commands.ModuleInfo,Discord.Commands.ICommandContext,IServiceProvider)
  isExternal: true
  name: GetExecutableCommandsAsync(ModuleInfo, ICommandContext, IServiceProvider)
  nameWithType: CommandServiceExtensions.GetExecutableCommandsAsync(ModuleInfo, ICommandContext, IServiceProvider)
  fullName: Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync(Discord.Commands.ModuleInfo, Discord.Commands.ICommandContext, IServiceProvider)
  spec.csharp:
  - uid: Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync(Discord.Commands.ModuleInfo,Discord.Commands.ICommandContext,IServiceProvider)
    name: GetExecutableCommandsAsync
    nameWithType: CommandServiceExtensions.GetExecutableCommandsAsync
    fullName: Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.Commands.ModuleInfo
    name: ModuleInfo
    nameWithType: ModuleInfo
    fullName: Discord.Commands.ModuleInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Commands.ICommandContext
    name: ICommandContext
    nameWithType: ICommandContext
    fullName: Discord.Commands.ICommandContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: IServiceProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync(Discord.Commands.ModuleInfo,Discord.Commands.ICommandContext,IServiceProvider)
    name: GetExecutableCommandsAsync
    nameWithType: CommandServiceExtensions.GetExecutableCommandsAsync
    fullName: Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.Commands.ModuleInfo
    name: ModuleInfo
    nameWithType: ModuleInfo
    fullName: Discord.Commands.ModuleInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Commands.ICommandContext
    name: ICommandContext
    nameWithType: ICommandContext
    fullName: Discord.Commands.ICommandContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: IServiceProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.CommandServiceExtensions
  commentId: T:Discord.Commands.CommandServiceExtensions
  parent: Discord.Commands
  name: CommandServiceExtensions
  nameWithType: CommandServiceExtensions
  fullName: Discord.Commands.CommandServiceExtensions
- uid: Discord.Commands.ModuleInfo.Service*
  commentId: Overload:Discord.Commands.ModuleInfo.Service
  name: Service
  nameWithType: ModuleInfo.Service
  fullName: Discord.Commands.ModuleInfo.Service
- uid: Discord.Commands.CommandService
  commentId: T:Discord.Commands.CommandService
  parent: Discord.Commands
  name: CommandService
  nameWithType: CommandService
  fullName: Discord.Commands.CommandService
- uid: Discord.Commands.ModuleInfo.Name*
  commentId: Overload:Discord.Commands.ModuleInfo.Name
  name: Name
  nameWithType: ModuleInfo.Name
  fullName: Discord.Commands.ModuleInfo.Name
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.Commands.ModuleInfo.Summary*
  commentId: Overload:Discord.Commands.ModuleInfo.Summary
  name: Summary
  nameWithType: ModuleInfo.Summary
  fullName: Discord.Commands.ModuleInfo.Summary
- uid: Discord.Commands.ModuleInfo.Remarks*
  commentId: Overload:Discord.Commands.ModuleInfo.Remarks
  name: Remarks
  nameWithType: ModuleInfo.Remarks
  fullName: Discord.Commands.ModuleInfo.Remarks
- uid: Discord.Commands.ModuleInfo.Group*
  commentId: Overload:Discord.Commands.ModuleInfo.Group
  name: Group
  nameWithType: ModuleInfo.Group
  fullName: Discord.Commands.ModuleInfo.Group
- uid: Discord.Commands.ModuleInfo.Aliases*
  commentId: Overload:Discord.Commands.ModuleInfo.Aliases
  name: Aliases
  nameWithType: ModuleInfo.Aliases
  fullName: Discord.Commands.ModuleInfo.Aliases
- uid: IReadOnlyList{System.String}
  commentId: '!:IReadOnlyList{System.String}'
  definition: IReadOnlyList`1
  name: IReadOnlyList<String>
  nameWithType: IReadOnlyList<String>
  fullName: IReadOnlyList<System.String>
  nameWithType.vb: IReadOnlyList(Of String)
  fullName.vb: IReadOnlyList(Of System.String)
  name.vb: IReadOnlyList(Of String)
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<>
  nameWithType: IReadOnlyList<>
  fullName: IReadOnlyList<>
  nameWithType.vb: IReadOnlyList(Of )
  fullName.vb: IReadOnlyList(Of )
  name.vb: IReadOnlyList(Of )
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.ModuleInfo.Commands*
  commentId: Overload:Discord.Commands.ModuleInfo.Commands
  name: Commands
  nameWithType: ModuleInfo.Commands
  fullName: Discord.Commands.ModuleInfo.Commands
- uid: IReadOnlyList{Discord.Commands.CommandInfo}
  commentId: '!:IReadOnlyList{Discord.Commands.CommandInfo}'
  definition: IReadOnlyList`1
  name: IReadOnlyList<CommandInfo>
  nameWithType: IReadOnlyList<CommandInfo>
  fullName: IReadOnlyList<Discord.Commands.CommandInfo>
  nameWithType.vb: IReadOnlyList(Of CommandInfo)
  fullName.vb: IReadOnlyList(Of Discord.Commands.CommandInfo)
  name.vb: IReadOnlyList(Of CommandInfo)
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    nameWithType: CommandInfo
    fullName: Discord.Commands.CommandInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    nameWithType: CommandInfo
    fullName: Discord.Commands.CommandInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.ModuleInfo.Preconditions*
  commentId: Overload:Discord.Commands.ModuleInfo.Preconditions
  name: Preconditions
  nameWithType: ModuleInfo.Preconditions
  fullName: Discord.Commands.ModuleInfo.Preconditions
- uid: IReadOnlyList{Discord.Commands.PreconditionAttribute}
  commentId: '!:IReadOnlyList{Discord.Commands.PreconditionAttribute}'
  definition: IReadOnlyList`1
  name: IReadOnlyList<PreconditionAttribute>
  nameWithType: IReadOnlyList<PreconditionAttribute>
  fullName: IReadOnlyList<Discord.Commands.PreconditionAttribute>
  nameWithType.vb: IReadOnlyList(Of PreconditionAttribute)
  fullName.vb: IReadOnlyList(Of Discord.Commands.PreconditionAttribute)
  name.vb: IReadOnlyList(Of PreconditionAttribute)
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.PreconditionAttribute
    name: PreconditionAttribute
    nameWithType: PreconditionAttribute
    fullName: Discord.Commands.PreconditionAttribute
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.PreconditionAttribute
    name: PreconditionAttribute
    nameWithType: PreconditionAttribute
    fullName: Discord.Commands.PreconditionAttribute
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.ModuleInfo.Attributes*
  commentId: Overload:Discord.Commands.ModuleInfo.Attributes
  name: Attributes
  nameWithType: ModuleInfo.Attributes
  fullName: Discord.Commands.ModuleInfo.Attributes
- uid: IReadOnlyList{Attribute}
  commentId: '!:IReadOnlyList{Attribute}'
  definition: IReadOnlyList`1
  name: IReadOnlyList<Attribute>
  nameWithType: IReadOnlyList<Attribute>
  fullName: IReadOnlyList<Attribute>
  nameWithType.vb: IReadOnlyList(Of Attribute)
  fullName.vb: IReadOnlyList(Of Attribute)
  name.vb: IReadOnlyList(Of Attribute)
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Attribute
    name: Attribute
    nameWithType: Attribute
    fullName: Attribute
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Attribute
    name: Attribute
    nameWithType: Attribute
    fullName: Attribute
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.ModuleInfo.Submodules*
  commentId: Overload:Discord.Commands.ModuleInfo.Submodules
  name: Submodules
  nameWithType: ModuleInfo.Submodules
  fullName: Discord.Commands.ModuleInfo.Submodules
- uid: IReadOnlyList{Discord.Commands.ModuleInfo}
  commentId: '!:IReadOnlyList{Discord.Commands.ModuleInfo}'
  definition: IReadOnlyList`1
  name: IReadOnlyList<ModuleInfo>
  nameWithType: IReadOnlyList<ModuleInfo>
  fullName: IReadOnlyList<Discord.Commands.ModuleInfo>
  nameWithType.vb: IReadOnlyList(Of ModuleInfo)
  fullName.vb: IReadOnlyList(Of Discord.Commands.ModuleInfo)
  name.vb: IReadOnlyList(Of ModuleInfo)
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.ModuleInfo
    name: ModuleInfo
    nameWithType: ModuleInfo
    fullName: Discord.Commands.ModuleInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.ModuleInfo
    name: ModuleInfo
    nameWithType: ModuleInfo
    fullName: Discord.Commands.ModuleInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.ModuleInfo.Parent*
  commentId: Overload:Discord.Commands.ModuleInfo.Parent
  name: Parent
  nameWithType: ModuleInfo.Parent
  fullName: Discord.Commands.ModuleInfo.Parent
- uid: Discord.Commands.ModuleInfo
  commentId: T:Discord.Commands.ModuleInfo
  parent: Discord.Commands
  name: ModuleInfo
  nameWithType: ModuleInfo
  fullName: Discord.Commands.ModuleInfo
- uid: Discord.Commands.ModuleInfo.IsSubmodule*
  commentId: Overload:Discord.Commands.ModuleInfo.IsSubmodule
  name: IsSubmodule
  nameWithType: ModuleInfo.IsSubmodule
  fullName: Discord.Commands.ModuleInfo.IsSubmodule
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
