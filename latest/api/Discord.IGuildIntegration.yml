### YamlMime:ManagedReference
items:
- uid: Discord.IGuildIntegration
  commentId: T:Discord.IGuildIntegration
  id: IGuildIntegration
  parent: Discord
  children:
  - Discord.IGuildIntegration.Account
  - Discord.IGuildIntegration.ExpireBehavior
  - Discord.IGuildIntegration.ExpireGracePeriod
  - Discord.IGuildIntegration.Guild
  - Discord.IGuildIntegration.GuildId
  - Discord.IGuildIntegration.Id
  - Discord.IGuildIntegration.IsEnabled
  - Discord.IGuildIntegration.IsSyncing
  - Discord.IGuildIntegration.Name
  - Discord.IGuildIntegration.RoleId
  - Discord.IGuildIntegration.SyncedAt
  - Discord.IGuildIntegration.Type
  - Discord.IGuildIntegration.User
  langs:
  - csharp
  - vb
  name: IGuildIntegration
  nameWithType: IGuildIntegration
  fullName: Discord.IGuildIntegration
  type: Interface
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuildIntegration.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: IGuildIntegration
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuildIntegration.cs
    startLine: 7
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nHolds information for a guild integration feature.\n"
  example: []
  syntax:
    content: public interface IGuildIntegration
    content.vb: Public Interface IGuildIntegration
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Discord.IGuildIntegration.Id
  commentId: P:Discord.IGuildIntegration.Id
  id: Id
  parent: Discord.IGuildIntegration
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: IGuildIntegration.Id
  fullName: Discord.IGuildIntegration.Id
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuildIntegration.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Id
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuildIntegration.cs
    startLine: 15
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the integration ID.\n"
  example: []
  syntax:
    content: ulong Id { get; }
    parameters: []
    return:
      type: System.UInt64
      description: "\nAn <see cref=\"!:UInt64\"></see> representing the unique identifier value of this integration.\n"
    content.vb: ReadOnly Property Id As ULong
  overload: Discord.IGuildIntegration.Id*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuildIntegration.Name
  commentId: P:Discord.IGuildIntegration.Name
  id: Name
  parent: Discord.IGuildIntegration
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: IGuildIntegration.Name
  fullName: Discord.IGuildIntegration.Name
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuildIntegration.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Name
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuildIntegration.cs
    startLine: 22
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the integration name.\n"
  example: []
  syntax:
    content: string Name { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA string containing the name of this integration.\n"
    content.vb: ReadOnly Property Name As String
  overload: Discord.IGuildIntegration.Name*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuildIntegration.Type
  commentId: P:Discord.IGuildIntegration.Type
  id: Type
  parent: Discord.IGuildIntegration
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: IGuildIntegration.Type
  fullName: Discord.IGuildIntegration.Type
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuildIntegration.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Type
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuildIntegration.cs
    startLine: 29
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the integration type (Twitch, YouTube, etc).\n"
  example: []
  syntax:
    content: string Type { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA string containing the name of the type of integration.\n"
    content.vb: ReadOnly Property Type As String
  overload: Discord.IGuildIntegration.Type*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuildIntegration.IsEnabled
  commentId: P:Discord.IGuildIntegration.IsEnabled
  id: IsEnabled
  parent: Discord.IGuildIntegration
  langs:
  - csharp
  - vb
  name: IsEnabled
  nameWithType: IGuildIntegration.IsEnabled
  fullName: Discord.IGuildIntegration.IsEnabled
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuildIntegration.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: IsEnabled
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuildIntegration.cs
    startLine: 36
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a value that indicates whether this integration is enabled or not.\n"
  example: []
  syntax:
    content: bool IsEnabled { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this integration is enabled; otherwise <code>false</code>.\n"
    content.vb: ReadOnly Property IsEnabled As Boolean
  overload: Discord.IGuildIntegration.IsEnabled*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuildIntegration.IsSyncing
  commentId: P:Discord.IGuildIntegration.IsSyncing
  id: IsSyncing
  parent: Discord.IGuildIntegration
  langs:
  - csharp
  - vb
  name: IsSyncing
  nameWithType: IGuildIntegration.IsSyncing
  fullName: Discord.IGuildIntegration.IsSyncing
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuildIntegration.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: IsSyncing
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuildIntegration.cs
    startLine: 47
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets a value that indicates whether this integration is syncing or not.\n"
  remarks: "\nAn integration with syncing enabled will update its &quot;subscribers&quot; on an interval, while one with syncing\ndisabled will not. A user must manually choose when sync the integration if syncing is disabled.\n"
  example: []
  syntax:
    content: bool IsSyncing { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this integration is syncing; otherwise <code>false</code>.\n"
    content.vb: ReadOnly Property IsSyncing As Boolean
  overload: Discord.IGuildIntegration.IsSyncing*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuildIntegration.ExpireBehavior
  commentId: P:Discord.IGuildIntegration.ExpireBehavior
  id: ExpireBehavior
  parent: Discord.IGuildIntegration
  langs:
  - csharp
  - vb
  name: ExpireBehavior
  nameWithType: IGuildIntegration.ExpireBehavior
  fullName: Discord.IGuildIntegration.ExpireBehavior
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuildIntegration.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ExpireBehavior
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuildIntegration.cs
    startLine: 51
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the ID that this integration uses for &quot;subscribers&quot;.\n"
  example: []
  syntax:
    content: ulong ExpireBehavior { get; }
    parameters: []
    return:
      type: System.UInt64
    content.vb: ReadOnly Property ExpireBehavior As ULong
  overload: Discord.IGuildIntegration.ExpireBehavior*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuildIntegration.ExpireGracePeriod
  commentId: P:Discord.IGuildIntegration.ExpireGracePeriod
  id: ExpireGracePeriod
  parent: Discord.IGuildIntegration
  langs:
  - csharp
  - vb
  name: ExpireGracePeriod
  nameWithType: IGuildIntegration.ExpireGracePeriod
  fullName: Discord.IGuildIntegration.ExpireGracePeriod
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuildIntegration.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ExpireGracePeriod
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuildIntegration.cs
    startLine: 55
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the grace period before expiring &quot;subscribers&quot;.\n"
  example: []
  syntax:
    content: ulong ExpireGracePeriod { get; }
    parameters: []
    return:
      type: System.UInt64
    content.vb: ReadOnly Property ExpireGracePeriod As ULong
  overload: Discord.IGuildIntegration.ExpireGracePeriod*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuildIntegration.SyncedAt
  commentId: P:Discord.IGuildIntegration.SyncedAt
  id: SyncedAt
  parent: Discord.IGuildIntegration
  langs:
  - csharp
  - vb
  name: SyncedAt
  nameWithType: IGuildIntegration.SyncedAt
  fullName: Discord.IGuildIntegration.SyncedAt
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuildIntegration.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: SyncedAt
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuildIntegration.cs
    startLine: 62
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets when this integration was last synced.\n"
  example: []
  syntax:
    content: DateTimeOffset SyncedAt { get; }
    parameters: []
    return:
      type: DateTimeOffset
      description: "\nA <see cref=\"!:DateTimeOffset\"></see> containing a date and time of day when the integration was last synced.\n"
    content.vb: ReadOnly Property SyncedAt As DateTimeOffset
  overload: Discord.IGuildIntegration.SyncedAt*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuildIntegration.Account
  commentId: P:Discord.IGuildIntegration.Account
  id: Account
  parent: Discord.IGuildIntegration
  langs:
  - csharp
  - vb
  name: Account
  nameWithType: IGuildIntegration.Account
  fullName: Discord.IGuildIntegration.Account
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuildIntegration.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Account
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuildIntegration.cs
    startLine: 66
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets integration account information.\n"
  example: []
  syntax:
    content: IntegrationAccount Account { get; }
    parameters: []
    return:
      type: Discord.IntegrationAccount
    content.vb: ReadOnly Property Account As IntegrationAccount
  overload: Discord.IGuildIntegration.Account*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuildIntegration.Guild
  commentId: P:Discord.IGuildIntegration.Guild
  id: Guild
  parent: Discord.IGuildIntegration
  langs:
  - csharp
  - vb
  name: Guild
  nameWithType: IGuildIntegration.Guild
  fullName: Discord.IGuildIntegration.Guild
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuildIntegration.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Guild
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuildIntegration.cs
    startLine: 68
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  syntax:
    content: IGuild Guild { get; }
    parameters: []
    return:
      type: Discord.IGuild
    content.vb: ReadOnly Property Guild As IGuild
  overload: Discord.IGuildIntegration.Guild*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuildIntegration.GuildId
  commentId: P:Discord.IGuildIntegration.GuildId
  id: GuildId
  parent: Discord.IGuildIntegration
  langs:
  - csharp
  - vb
  name: GuildId
  nameWithType: IGuildIntegration.GuildId
  fullName: Discord.IGuildIntegration.GuildId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuildIntegration.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GuildId
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuildIntegration.cs
    startLine: 69
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  syntax:
    content: ulong GuildId { get; }
    parameters: []
    return:
      type: System.UInt64
    content.vb: ReadOnly Property GuildId As ULong
  overload: Discord.IGuildIntegration.GuildId*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuildIntegration.RoleId
  commentId: P:Discord.IGuildIntegration.RoleId
  id: RoleId
  parent: Discord.IGuildIntegration
  langs:
  - csharp
  - vb
  name: RoleId
  nameWithType: IGuildIntegration.RoleId
  fullName: Discord.IGuildIntegration.RoleId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuildIntegration.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: RoleId
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuildIntegration.cs
    startLine: 70
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  syntax:
    content: ulong RoleId { get; }
    parameters: []
    return:
      type: System.UInt64
    content.vb: ReadOnly Property RoleId As ULong
  overload: Discord.IGuildIntegration.RoleId*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IGuildIntegration.User
  commentId: P:Discord.IGuildIntegration.User
  id: User
  parent: Discord.IGuildIntegration
  langs:
  - csharp
  - vb
  name: User
  nameWithType: IGuildIntegration.User
  fullName: Discord.IGuildIntegration.User
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Guilds/IGuildIntegration.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: User
    path: ../src/Discord.Net.Core/Entities/Guilds/IGuildIntegration.cs
    startLine: 71
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  syntax:
    content: IUser User { get; }
    parameters: []
    return:
      type: Discord.IUser
    content.vb: ReadOnly Property User As IUser
  overload: Discord.IGuildIntegration.User*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.IGuildIntegration.Id*
  commentId: Overload:Discord.IGuildIntegration.Id
  name: Id
  nameWithType: IGuildIntegration.Id
  fullName: Discord.IGuildIntegration.Id
- uid: System.UInt64
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Discord.IGuildIntegration.Name*
  commentId: Overload:Discord.IGuildIntegration.Name
  name: Name
  nameWithType: IGuildIntegration.Name
  fullName: Discord.IGuildIntegration.Name
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.IGuildIntegration.Type*
  commentId: Overload:Discord.IGuildIntegration.Type
  name: Type
  nameWithType: IGuildIntegration.Type
  fullName: Discord.IGuildIntegration.Type
- uid: Discord.IGuildIntegration.IsEnabled*
  commentId: Overload:Discord.IGuildIntegration.IsEnabled
  name: IsEnabled
  nameWithType: IGuildIntegration.IsEnabled
  fullName: Discord.IGuildIntegration.IsEnabled
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.IGuildIntegration.IsSyncing*
  commentId: Overload:Discord.IGuildIntegration.IsSyncing
  name: IsSyncing
  nameWithType: IGuildIntegration.IsSyncing
  fullName: Discord.IGuildIntegration.IsSyncing
- uid: Discord.IGuildIntegration.ExpireBehavior*
  commentId: Overload:Discord.IGuildIntegration.ExpireBehavior
  name: ExpireBehavior
  nameWithType: IGuildIntegration.ExpireBehavior
  fullName: Discord.IGuildIntegration.ExpireBehavior
- uid: Discord.IGuildIntegration.ExpireGracePeriod*
  commentId: Overload:Discord.IGuildIntegration.ExpireGracePeriod
  name: ExpireGracePeriod
  nameWithType: IGuildIntegration.ExpireGracePeriod
  fullName: Discord.IGuildIntegration.ExpireGracePeriod
- uid: Discord.IGuildIntegration.SyncedAt*
  commentId: Overload:Discord.IGuildIntegration.SyncedAt
  name: SyncedAt
  nameWithType: IGuildIntegration.SyncedAt
  fullName: Discord.IGuildIntegration.SyncedAt
- uid: DateTimeOffset
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: DateTimeOffset
- uid: Discord.IGuildIntegration.Account*
  commentId: Overload:Discord.IGuildIntegration.Account
  name: Account
  nameWithType: IGuildIntegration.Account
  fullName: Discord.IGuildIntegration.Account
- uid: Discord.IntegrationAccount
  commentId: T:Discord.IntegrationAccount
  parent: Discord
  name: IntegrationAccount
  nameWithType: IntegrationAccount
  fullName: Discord.IntegrationAccount
- uid: Discord.IGuildIntegration.Guild*
  commentId: Overload:Discord.IGuildIntegration.Guild
  name: Guild
  nameWithType: IGuildIntegration.Guild
  fullName: Discord.IGuildIntegration.Guild
- uid: Discord.IGuild
  commentId: T:Discord.IGuild
  parent: Discord
  name: IGuild
  nameWithType: IGuild
  fullName: Discord.IGuild
- uid: Discord.IGuildIntegration.GuildId*
  commentId: Overload:Discord.IGuildIntegration.GuildId
  name: GuildId
  nameWithType: IGuildIntegration.GuildId
  fullName: Discord.IGuildIntegration.GuildId
- uid: Discord.IGuildIntegration.RoleId*
  commentId: Overload:Discord.IGuildIntegration.RoleId
  name: RoleId
  nameWithType: IGuildIntegration.RoleId
  fullName: Discord.IGuildIntegration.RoleId
- uid: Discord.IGuildIntegration.User*
  commentId: Overload:Discord.IGuildIntegration.User
  name: User
  nameWithType: IGuildIntegration.User
  fullName: Discord.IGuildIntegration.User
- uid: Discord.IUser
  commentId: T:Discord.IUser
  parent: Discord
  name: IUser
  nameWithType: IUser
  fullName: Discord.IUser
