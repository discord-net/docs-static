### YamlMime:ManagedReference
items:
- uid: Discord.Commands.CommandServiceExtensions
  commentId: T:Discord.Commands.CommandServiceExtensions
  id: CommandServiceExtensions
  parent: Discord.Commands
  children:
  - Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync(Discord.Commands.CommandService,Discord.Commands.ICommandContext,IServiceProvider)
  - Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync(Discord.Commands.ModuleInfo,Discord.Commands.ICommandContext,IServiceProvider)
  - Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync(ICollection{Discord.Commands.CommandInfo},Discord.Commands.ICommandContext,IServiceProvider)
  langs:
  - csharp
  - vb
  name: CommandServiceExtensions
  nameWithType: CommandServiceExtensions
  fullName: Discord.Commands.CommandServiceExtensions
  type: Class
  source:
    remote:
      path: src/Discord.Net.Commands/Extensions/CommandServiceExtensions.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: CommandServiceExtensions
    path: ../src/Discord.Net.Commands/Extensions/CommandServiceExtensions.cs
    startLine: 10
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nProvides extension methods for the <xref href=\"Discord.Commands.CommandService\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: 'public static class CommandServiceExtensions : object'
    content.vb: >-
      Public Module CommandServiceExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync(ICollection{Discord.Commands.CommandInfo},Discord.Commands.ICommandContext,IServiceProvider)
  commentId: M:Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync(ICollection{Discord.Commands.CommandInfo},Discord.Commands.ICommandContext,IServiceProvider)
  id: GetExecutableCommandsAsync(ICollection{Discord.Commands.CommandInfo},Discord.Commands.ICommandContext,IServiceProvider)
  isExtensionMethod: true
  parent: Discord.Commands.CommandServiceExtensions
  langs:
  - csharp
  - vb
  name: GetExecutableCommandsAsync(ICollection<CommandInfo>, ICommandContext, IServiceProvider)
  nameWithType: CommandServiceExtensions.GetExecutableCommandsAsync(ICollection<CommandInfo>, ICommandContext, IServiceProvider)
  fullName: Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync(ICollection<Discord.Commands.CommandInfo>, Discord.Commands.ICommandContext, IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Extensions/CommandServiceExtensions.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetExecutableCommandsAsync
    path: ../src/Discord.Net.Commands/Extensions/CommandServiceExtensions.cs
    startLine: 21
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nReturns commands that can be executed under the current context.\n"
  example: []
  syntax:
    content: public static Task<IReadOnlyCollection<CommandInfo>> GetExecutableCommandsAsync(this ICollection<CommandInfo> commands, ICommandContext context, IServiceProvider provider)
    parameters:
    - id: commands
      type: ICollection{Discord.Commands.CommandInfo}
      description: The set of commands to be checked against.
    - id: context
      type: Discord.Commands.ICommandContext
      description: The current command context.
    - id: provider
      type: IServiceProvider
      description: The service provider used for dependency injection upon precondition check.
    return:
      type: Task{IReadOnlyCollection{Discord.Commands.CommandInfo}}
      description: "\nA read-only collection of commands that can be executed under the current context.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetExecutableCommandsAsync(commands As ICollection(Of CommandInfo), context As ICommandContext, provider As IServiceProvider) As Task(Of IReadOnlyCollection(Of CommandInfo))
  overload: Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync*
  nameWithType.vb: CommandServiceExtensions.GetExecutableCommandsAsync(ICollection(Of CommandInfo), ICommandContext, IServiceProvider)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync(ICollection(Of Discord.Commands.CommandInfo), Discord.Commands.ICommandContext, IServiceProvider)
  name.vb: GetExecutableCommandsAsync(ICollection(Of CommandInfo), ICommandContext, IServiceProvider)
- uid: Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync(Discord.Commands.CommandService,Discord.Commands.ICommandContext,IServiceProvider)
  commentId: M:Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync(Discord.Commands.CommandService,Discord.Commands.ICommandContext,IServiceProvider)
  id: GetExecutableCommandsAsync(Discord.Commands.CommandService,Discord.Commands.ICommandContext,IServiceProvider)
  isExtensionMethod: true
  parent: Discord.Commands.CommandServiceExtensions
  langs:
  - csharp
  - vb
  name: GetExecutableCommandsAsync(CommandService, ICommandContext, IServiceProvider)
  nameWithType: CommandServiceExtensions.GetExecutableCommandsAsync(CommandService, ICommandContext, IServiceProvider)
  fullName: Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync(Discord.Commands.CommandService, Discord.Commands.ICommandContext, IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Extensions/CommandServiceExtensions.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetExecutableCommandsAsync
    path: ../src/Discord.Net.Commands/Extensions/CommandServiceExtensions.cs
    startLine: 50
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nReturns commands that can be executed under the current context.\n"
  example: []
  syntax:
    content: public static Task<IReadOnlyCollection<CommandInfo>> GetExecutableCommandsAsync(this CommandService commandService, ICommandContext context, IServiceProvider provider)
    parameters:
    - id: commandService
      type: Discord.Commands.CommandService
      description: The desired command service class to check against.
    - id: context
      type: Discord.Commands.ICommandContext
      description: The current command context.
    - id: provider
      type: IServiceProvider
      description: The service provider used for dependency injection upon precondition check.
    return:
      type: Task{IReadOnlyCollection{Discord.Commands.CommandInfo}}
      description: "\nA read-only collection of commands that can be executed under the current context.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetExecutableCommandsAsync(commandService As CommandService, context As ICommandContext, provider As IServiceProvider) As Task(Of IReadOnlyCollection(Of CommandInfo))
  overload: Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync(Discord.Commands.ModuleInfo,Discord.Commands.ICommandContext,IServiceProvider)
  commentId: M:Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync(Discord.Commands.ModuleInfo,Discord.Commands.ICommandContext,IServiceProvider)
  id: GetExecutableCommandsAsync(Discord.Commands.ModuleInfo,Discord.Commands.ICommandContext,IServiceProvider)
  isExtensionMethod: true
  parent: Discord.Commands.CommandServiceExtensions
  langs:
  - csharp
  - vb
  name: GetExecutableCommandsAsync(ModuleInfo, ICommandContext, IServiceProvider)
  nameWithType: CommandServiceExtensions.GetExecutableCommandsAsync(ModuleInfo, ICommandContext, IServiceProvider)
  fullName: Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync(Discord.Commands.ModuleInfo, Discord.Commands.ICommandContext, IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Extensions/CommandServiceExtensions.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetExecutableCommandsAsync
    path: ../src/Discord.Net.Commands/Extensions/CommandServiceExtensions.cs
    startLine: 61
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nReturns commands that can be executed under the current context.\n"
  example: []
  syntax:
    content: public static Task<IReadOnlyCollection<CommandInfo>> GetExecutableCommandsAsync(this ModuleInfo module, ICommandContext context, IServiceProvider provider)
    parameters:
    - id: module
      type: Discord.Commands.ModuleInfo
      description: The module to be checked against.
    - id: context
      type: Discord.Commands.ICommandContext
      description: The current command context.
    - id: provider
      type: IServiceProvider
      description: The service provider used for dependency injection upon precondition check.
    return:
      type: Task{IReadOnlyCollection{Discord.Commands.CommandInfo}}
      description: "\nA read-only collection of commands that can be executed under the current context.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetExecutableCommandsAsync(module As ModuleInfo, context As ICommandContext, provider As IServiceProvider) As Task(Of IReadOnlyCollection(Of CommandInfo))
  overload: Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Discord.Commands.CommandService
  commentId: T:Discord.Commands.CommandService
  parent: Discord.Commands
  name: CommandService
  nameWithType: CommandService
  fullName: Discord.Commands.CommandService
- uid: Discord.Commands
  commentId: N:Discord.Commands
  name: Discord.Commands
  nameWithType: Discord.Commands
  fullName: Discord.Commands
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync*
  commentId: Overload:Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync
  name: GetExecutableCommandsAsync
  nameWithType: CommandServiceExtensions.GetExecutableCommandsAsync
  fullName: Discord.Commands.CommandServiceExtensions.GetExecutableCommandsAsync
- uid: ICollection{Discord.Commands.CommandInfo}
  commentId: '!:ICollection{Discord.Commands.CommandInfo}'
  definition: ICollection`1
  name: ICollection<CommandInfo>
  nameWithType: ICollection<CommandInfo>
  fullName: ICollection<Discord.Commands.CommandInfo>
  nameWithType.vb: ICollection(Of CommandInfo)
  fullName.vb: ICollection(Of Discord.Commands.CommandInfo)
  name.vb: ICollection(Of CommandInfo)
  spec.csharp:
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    nameWithType: CommandInfo
    fullName: Discord.Commands.CommandInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    nameWithType: CommandInfo
    fullName: Discord.Commands.CommandInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.ICommandContext
  commentId: T:Discord.Commands.ICommandContext
  parent: Discord.Commands
  name: ICommandContext
  nameWithType: ICommandContext
  fullName: Discord.Commands.ICommandContext
- uid: IServiceProvider
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: IServiceProvider
- uid: Task{IReadOnlyCollection{Discord.Commands.CommandInfo}}
  commentId: '!:Task{IReadOnlyCollection{Discord.Commands.CommandInfo}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<CommandInfo>>
  nameWithType: Task<IReadOnlyCollection<CommandInfo>>
  fullName: Task<IReadOnlyCollection<Discord.Commands.CommandInfo>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of CommandInfo))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.Commands.CommandInfo))
  name.vb: Task(Of IReadOnlyCollection(Of CommandInfo))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    nameWithType: CommandInfo
    fullName: Discord.Commands.CommandInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.CommandInfo
    name: CommandInfo
    nameWithType: CommandInfo
    fullName: Discord.Commands.CommandInfo
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: ICollection`1
  isExternal: true
  name: ICollection<>
  nameWithType: ICollection<>
  fullName: ICollection<>
  nameWithType.vb: ICollection(Of )
  fullName.vb: ICollection(Of )
  name.vb: ICollection(Of )
  spec.csharp:
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.ModuleInfo
  commentId: T:Discord.Commands.ModuleInfo
  parent: Discord.Commands
  name: ModuleInfo
  nameWithType: ModuleInfo
  fullName: Discord.Commands.ModuleInfo
