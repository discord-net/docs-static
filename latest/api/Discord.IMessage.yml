### YamlMime:ManagedReference
items:
- uid: Discord.IMessage
  commentId: T:Discord.IMessage
  id: IMessage
  parent: Discord
  children:
  - Discord.IMessage.Activity
  - Discord.IMessage.AddReactionAsync(Discord.IEmote,Discord.RequestOptions)
  - Discord.IMessage.Application
  - Discord.IMessage.Attachments
  - Discord.IMessage.Author
  - Discord.IMessage.Channel
  - Discord.IMessage.Content
  - Discord.IMessage.EditedTimestamp
  - Discord.IMessage.Embeds
  - Discord.IMessage.GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions)
  - Discord.IMessage.IsPinned
  - Discord.IMessage.IsSuppressed
  - Discord.IMessage.IsTTS
  - Discord.IMessage.MentionedChannelIds
  - Discord.IMessage.MentionedRoleIds
  - Discord.IMessage.MentionedUserIds
  - Discord.IMessage.Reactions
  - Discord.IMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
  - Discord.IMessage.RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)
  - Discord.IMessage.RemoveReactionAsync(Discord.IEmote,System.UInt64,Discord.RequestOptions)
  - Discord.IMessage.Source
  - Discord.IMessage.Tags
  - Discord.IMessage.Timestamp
  - Discord.IMessage.Type
  langs:
  - csharp
  - vb
  name: IMessage
  nameWithType: IMessage
  fullName: Discord.IMessage
  type: Interface
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IMessage
    path: ../src/Discord.Net.Core/Entities/Messages/IMessage.cs
    startLine: 9
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nRepresents a message object.\n"
  example: []
  syntax:
    content: 'public interface IMessage : ISnowflakeEntity, IEntity<ulong>, IDeletable'
    content.vb: >-
      Public Interface IMessage
          Inherits ISnowflakeEntity, IDeletable
  inheritedMembers:
  - Discord.ISnowflakeEntity.CreatedAt
  - Discord.IEntity{System.UInt64}.Id
  - Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  extensionMethods:
  - Discord.IMessage.Discord.MessageExtensions.GetJumpUrl
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Discord.IMessage.Type
  commentId: P:Discord.IMessage.Type
  id: Type
  parent: Discord.IMessage
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: IMessage.Type
  fullName: Discord.IMessage.Type
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Type
    path: ../src/Discord.Net.Core/Entities/Messages/IMessage.cs
    startLine: 14
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the type of this system message.\n"
  example: []
  syntax:
    content: MessageType Type { get; }
    parameters: []
    return:
      type: Discord.MessageType
    content.vb: ReadOnly Property Type As MessageType
  overload: Discord.IMessage.Type*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IMessage.Source
  commentId: P:Discord.IMessage.Source
  id: Source
  parent: Discord.IMessage
  langs:
  - csharp
  - vb
  name: Source
  nameWithType: IMessage.Source
  fullName: Discord.IMessage.Source
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Source
    path: ../src/Discord.Net.Core/Entities/Messages/IMessage.cs
    startLine: 18
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the source type of this message.\n"
  example: []
  syntax:
    content: MessageSource Source { get; }
    parameters: []
    return:
      type: Discord.MessageSource
    content.vb: ReadOnly Property Source As MessageSource
  overload: Discord.IMessage.Source*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IMessage.IsTTS
  commentId: P:Discord.IMessage.IsTTS
  id: IsTTS
  parent: Discord.IMessage
  langs:
  - csharp
  - vb
  name: IsTTS
  nameWithType: IMessage.IsTTS
  fullName: Discord.IMessage.IsTTS
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsTTS
    path: ../src/Discord.Net.Core/Entities/Messages/IMessage.cs
    startLine: 25
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the value that indicates whether this message was meant to be read-aloud by Discord.\n"
  example: []
  syntax:
    content: bool IsTTS { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this message was sent as a text-to-speech message; otherwise <code>false</code>.\n"
    content.vb: ReadOnly Property IsTTS As Boolean
  overload: Discord.IMessage.IsTTS*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IMessage.IsPinned
  commentId: P:Discord.IMessage.IsPinned
  id: IsPinned
  parent: Discord.IMessage
  langs:
  - csharp
  - vb
  name: IsPinned
  nameWithType: IMessage.IsPinned
  fullName: Discord.IMessage.IsPinned
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsPinned
    path: ../src/Discord.Net.Core/Entities/Messages/IMessage.cs
    startLine: 32
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the value that indicates whether this message is pinned.\n"
  example: []
  syntax:
    content: bool IsPinned { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this message was added to its channel&apos;s pinned messages; otherwise <code>false</code>.\n"
    content.vb: ReadOnly Property IsPinned As Boolean
  overload: Discord.IMessage.IsPinned*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IMessage.IsSuppressed
  commentId: P:Discord.IMessage.IsSuppressed
  id: IsSuppressed
  parent: Discord.IMessage
  langs:
  - csharp
  - vb
  name: IsSuppressed
  nameWithType: IMessage.IsSuppressed
  fullName: Discord.IMessage.IsSuppressed
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsSuppressed
    path: ../src/Discord.Net.Core/Entities/Messages/IMessage.cs
    startLine: 39
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the value that indicates whether or not this message&apos;s embeds are suppressed.\n"
  example: []
  syntax:
    content: bool IsSuppressed { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the embeds in this message have been suppressed (made invisible); otherwise <code>false</code>.\n"
    content.vb: ReadOnly Property IsSuppressed As Boolean
  overload: Discord.IMessage.IsSuppressed*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IMessage.Content
  commentId: P:Discord.IMessage.Content
  id: Content
  parent: Discord.IMessage
  langs:
  - csharp
  - vb
  name: Content
  nameWithType: IMessage.Content
  fullName: Discord.IMessage.Content
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Content
    path: ../src/Discord.Net.Core/Entities/Messages/IMessage.cs
    startLine: 46
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the content for this message.\n"
  example: []
  syntax:
    content: string Content { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA string that contains the body of the message; note that this field may be empty if there is an embed.\n"
    content.vb: ReadOnly Property Content As String
  overload: Discord.IMessage.Content*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IMessage.Timestamp
  commentId: P:Discord.IMessage.Timestamp
  id: Timestamp
  parent: Discord.IMessage
  langs:
  - csharp
  - vb
  name: Timestamp
  nameWithType: IMessage.Timestamp
  fullName: Discord.IMessage.Timestamp
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Timestamp
    path: ../src/Discord.Net.Core/Entities/Messages/IMessage.cs
    startLine: 53
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the time this message was sent.\n"
  example: []
  syntax:
    content: DateTimeOffset Timestamp { get; }
    parameters: []
    return:
      type: System.DateTimeOffset
      description: "\nTime of when the message was sent.\n"
    content.vb: ReadOnly Property Timestamp As DateTimeOffset
  overload: Discord.IMessage.Timestamp*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IMessage.EditedTimestamp
  commentId: P:Discord.IMessage.EditedTimestamp
  id: EditedTimestamp
  parent: Discord.IMessage
  langs:
  - csharp
  - vb
  name: EditedTimestamp
  nameWithType: IMessage.EditedTimestamp
  fullName: Discord.IMessage.EditedTimestamp
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: EditedTimestamp
    path: ../src/Discord.Net.Core/Entities/Messages/IMessage.cs
    startLine: 60
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the time of this message&apos;s last edit.\n"
  example: []
  syntax:
    content: DateTimeOffset? EditedTimestamp { get; }
    parameters: []
    return:
      type: System.Nullable{System.DateTimeOffset}
      description: "\nTime of when the message was last edited; <code>null</code> if the message is never edited.\n"
    content.vb: ReadOnly Property EditedTimestamp As DateTimeOffset?
  overload: Discord.IMessage.EditedTimestamp*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IMessage.Channel
  commentId: P:Discord.IMessage.Channel
  id: Channel
  parent: Discord.IMessage
  langs:
  - csharp
  - vb
  name: Channel
  nameWithType: IMessage.Channel
  fullName: Discord.IMessage.Channel
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Channel
    path: ../src/Discord.Net.Core/Entities/Messages/IMessage.cs
    startLine: 65
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the source channel of the message.\n"
  example: []
  syntax:
    content: IMessageChannel Channel { get; }
    parameters: []
    return:
      type: Discord.IMessageChannel
    content.vb: ReadOnly Property Channel As IMessageChannel
  overload: Discord.IMessage.Channel*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IMessage.Author
  commentId: P:Discord.IMessage.Author
  id: Author
  parent: Discord.IMessage
  langs:
  - csharp
  - vb
  name: Author
  nameWithType: IMessage.Author
  fullName: Discord.IMessage.Author
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Author
    path: ../src/Discord.Net.Core/Entities/Messages/IMessage.cs
    startLine: 69
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the author of this message.\n"
  example: []
  syntax:
    content: IUser Author { get; }
    parameters: []
    return:
      type: Discord.IUser
    content.vb: ReadOnly Property Author As IUser
  overload: Discord.IMessage.Author*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IMessage.Attachments
  commentId: P:Discord.IMessage.Attachments
  id: Attachments
  parent: Discord.IMessage
  langs:
  - csharp
  - vb
  name: Attachments
  nameWithType: IMessage.Attachments
  fullName: Discord.IMessage.Attachments
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Attachments
    path: ../src/Discord.Net.Core/Entities/Messages/IMessage.cs
    startLine: 82
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets all attachments included in this message.\n"
  remarks: "\nThis property gets a read-only collection of attachments associated with this message. Depending on the\nuser&apos;s end-client, a sent message may contain one or more attachments. For example, mobile users may\nattach more than one file in their message, while the desktop client only allows for one.\n"
  example: []
  syntax:
    content: IReadOnlyCollection<IAttachment> Attachments { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.IAttachment}
      description: "\nA read-only collection of attachments.\n"
    content.vb: ReadOnly Property Attachments As IReadOnlyCollection(Of IAttachment)
  overload: Discord.IMessage.Attachments*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IMessage.Embeds
  commentId: P:Discord.IMessage.Embeds
  id: Embeds
  parent: Discord.IMessage
  langs:
  - csharp
  - vb
  name: Embeds
  nameWithType: IMessage.Embeds
  fullName: Discord.IMessage.Embeds
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Embeds
    path: ../src/Discord.Net.Core/Entities/Messages/IMessage.cs
    startLine: 94
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets all embeds included in this message.\n"
  remarks: "\n"
  example: []
  syntax:
    content: IReadOnlyCollection<IEmbed> Embeds { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.IEmbed}
      description: "\nA read-only collection of embed objects.\n"
    content.vb: ReadOnly Property Embeds As IReadOnlyCollection(Of IEmbed)
  overload: Discord.IMessage.Embeds*
  see:
  - linkId: Discord.EmbedType.Rich
    commentId: F:Discord.EmbedType.Rich
  - linkId: Discord.Embed
    commentId: T:Discord.Embed
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IMessage.Tags
  commentId: P:Discord.IMessage.Tags
  id: Tags
  parent: Discord.IMessage
  langs:
  - csharp
  - vb
  name: Tags
  nameWithType: IMessage.Tags
  fullName: Discord.IMessage.Tags
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Tags
    path: ../src/Discord.Net.Core/Entities/Messages/IMessage.cs
    startLine: 98
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets all tags included in this message&apos;s content.\n"
  example: []
  syntax:
    content: IReadOnlyCollection<ITag> Tags { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.ITag}
    content.vb: ReadOnly Property Tags As IReadOnlyCollection(Of ITag)
  overload: Discord.IMessage.Tags*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IMessage.MentionedChannelIds
  commentId: P:Discord.IMessage.MentionedChannelIds
  id: MentionedChannelIds
  parent: Discord.IMessage
  langs:
  - csharp
  - vb
  name: MentionedChannelIds
  nameWithType: IMessage.MentionedChannelIds
  fullName: Discord.IMessage.MentionedChannelIds
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: MentionedChannelIds
    path: ../src/Discord.Net.Core/Entities/Messages/IMessage.cs
    startLine: 105
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the IDs of channels mentioned in this message.\n"
  example: []
  syntax:
    content: IReadOnlyCollection<ulong> MentionedChannelIds { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{System.UInt64}
      description: "\nA read-only collection of channel IDs.\n"
    content.vb: ReadOnly Property MentionedChannelIds As IReadOnlyCollection(Of ULong)
  overload: Discord.IMessage.MentionedChannelIds*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IMessage.MentionedRoleIds
  commentId: P:Discord.IMessage.MentionedRoleIds
  id: MentionedRoleIds
  parent: Discord.IMessage
  langs:
  - csharp
  - vb
  name: MentionedRoleIds
  nameWithType: IMessage.MentionedRoleIds
  fullName: Discord.IMessage.MentionedRoleIds
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: MentionedRoleIds
    path: ../src/Discord.Net.Core/Entities/Messages/IMessage.cs
    startLine: 112
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the IDs of roles mentioned in this message.\n"
  example: []
  syntax:
    content: IReadOnlyCollection<ulong> MentionedRoleIds { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{System.UInt64}
      description: "\nA read-only collection of role IDs.\n"
    content.vb: ReadOnly Property MentionedRoleIds As IReadOnlyCollection(Of ULong)
  overload: Discord.IMessage.MentionedRoleIds*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IMessage.MentionedUserIds
  commentId: P:Discord.IMessage.MentionedUserIds
  id: MentionedUserIds
  parent: Discord.IMessage
  langs:
  - csharp
  - vb
  name: MentionedUserIds
  nameWithType: IMessage.MentionedUserIds
  fullName: Discord.IMessage.MentionedUserIds
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: MentionedUserIds
    path: ../src/Discord.Net.Core/Entities/Messages/IMessage.cs
    startLine: 119
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the IDs of users mentioned in this message.\n"
  example: []
  syntax:
    content: IReadOnlyCollection<ulong> MentionedUserIds { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{System.UInt64}
      description: "\nA read-only collection of user IDs.\n"
    content.vb: ReadOnly Property MentionedUserIds As IReadOnlyCollection(Of ULong)
  overload: Discord.IMessage.MentionedUserIds*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IMessage.Activity
  commentId: P:Discord.IMessage.Activity
  id: Activity
  parent: Discord.IMessage
  langs:
  - csharp
  - vb
  name: Activity
  nameWithType: IMessage.Activity
  fullName: Discord.IMessage.Activity
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Activity
    path: ../src/Discord.Net.Core/Entities/Messages/IMessage.cs
    startLine: 130
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the activity associated with a message.\n"
  remarks: "\nSent with Rich Presence-related chat embeds. This often refers to activity that requires end-user&apos;s\ninteraction, such as a Spotify Invite activity.\n"
  example: []
  syntax:
    content: MessageActivity Activity { get; }
    parameters: []
    return:
      type: Discord.MessageActivity
      description: "\nA message&apos;s activity, if any is associated.\n"
    content.vb: ReadOnly Property Activity As MessageActivity
  overload: Discord.IMessage.Activity*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IMessage.Application
  commentId: P:Discord.IMessage.Application
  id: Application
  parent: Discord.IMessage
  langs:
  - csharp
  - vb
  name: Application
  nameWithType: IMessage.Application
  fullName: Discord.IMessage.Application
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Application
    path: ../src/Discord.Net.Core/Entities/Messages/IMessage.cs
    startLine: 140
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the application associated with a message.\n"
  remarks: "\nSent with Rich-Presence-related chat embeds.\n"
  example: []
  syntax:
    content: MessageApplication Application { get; }
    parameters: []
    return:
      type: Discord.MessageApplication
      description: "\nA message&apos;s application, if any is associated.\n"
    content.vb: ReadOnly Property Application As MessageApplication
  overload: Discord.IMessage.Application*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IMessage.Reactions
  commentId: P:Discord.IMessage.Reactions
  id: Reactions
  parent: Discord.IMessage
  langs:
  - csharp
  - vb
  name: Reactions
  nameWithType: IMessage.Reactions
  fullName: Discord.IMessage.Reactions
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Reactions
    path: ../src/Discord.Net.Core/Entities/Messages/IMessage.cs
    startLine: 145
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets all reactions included in this message.\n"
  example: []
  syntax:
    content: IReadOnlyDictionary<IEmote, ReactionMetadata> Reactions { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyDictionary{Discord.IEmote,Discord.ReactionMetadata}
    content.vb: ReadOnly Property Reactions As IReadOnlyDictionary(Of IEmote, ReactionMetadata)
  overload: Discord.IMessage.Reactions*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IMessage.AddReactionAsync(Discord.IEmote,Discord.RequestOptions)
  commentId: M:Discord.IMessage.AddReactionAsync(Discord.IEmote,Discord.RequestOptions)
  id: AddReactionAsync(Discord.IEmote,Discord.RequestOptions)
  parent: Discord.IMessage
  langs:
  - csharp
  - vb
  name: AddReactionAsync(IEmote, RequestOptions)
  nameWithType: IMessage.AddReactionAsync(IEmote, RequestOptions)
  fullName: Discord.IMessage.AddReactionAsync(Discord.IEmote, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: AddReactionAsync
    path: ../src/Discord.Net.Core/Entities/Messages/IMessage.cs
    startLine: 162
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nAdds a reaction to this message.\n"
  example:
  - "\nThe following example adds the reaction, <code>\U0001F495</code>, to the message.\n<pre><code class=\"lang-cs\">await msg.AddReactionAsync(new Emoji(&quot;\\U0001f495&quot;));</code></pre>\n"
  syntax:
    content: Task AddReactionAsync(IEmote emote, RequestOptions options = null)
    parameters:
    - id: emote
      type: Discord.IEmote
      description: The emoji used to react to this message.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous operation for adding a reaction to this message.\n"
    content.vb: Function AddReactionAsync(emote As IEmote, options As RequestOptions = Nothing) As Task
  overload: Discord.IMessage.AddReactionAsync*
  seealso:
  - linkId: Discord.IEmote
    commentId: T:Discord.IEmote
- uid: Discord.IMessage.RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)
  commentId: M:Discord.IMessage.RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)
  id: RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)
  parent: Discord.IMessage
  langs:
  - csharp
  - vb
  name: RemoveReactionAsync(IEmote, IUser, RequestOptions)
  nameWithType: IMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions)
  fullName: Discord.IMessage.RemoveReactionAsync(Discord.IEmote, Discord.IUser, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RemoveReactionAsync
    path: ../src/Discord.Net.Core/Entities/Messages/IMessage.cs
    startLine: 179
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nRemoves a reaction from message.\n"
  example:
  - "\nThe following example removes the reaction, <code>\U0001F495</code>, added by the message author from the message.\n<pre><code class=\"lang-cs\">await msg.RemoveReactionAsync(new Emoji(&quot;\\U0001f495&quot;), msg.Author);</code></pre>\n"
  syntax:
    content: Task RemoveReactionAsync(IEmote emote, IUser user, RequestOptions options = null)
    parameters:
    - id: emote
      type: Discord.IEmote
      description: The emoji used to react to this message.
    - id: user
      type: Discord.IUser
      description: The user that added the emoji.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous operation for removing a reaction to this message.\n"
    content.vb: Function RemoveReactionAsync(emote As IEmote, user As IUser, options As RequestOptions = Nothing) As Task
  overload: Discord.IMessage.RemoveReactionAsync*
  seealso:
  - linkId: Discord.IEmote
    commentId: T:Discord.IEmote
- uid: Discord.IMessage.RemoveReactionAsync(Discord.IEmote,System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.IMessage.RemoveReactionAsync(Discord.IEmote,System.UInt64,Discord.RequestOptions)
  id: RemoveReactionAsync(Discord.IEmote,System.UInt64,Discord.RequestOptions)
  parent: Discord.IMessage
  langs:
  - csharp
  - vb
  name: RemoveReactionAsync(IEmote, UInt64, RequestOptions)
  nameWithType: IMessage.RemoveReactionAsync(IEmote, UInt64, RequestOptions)
  fullName: Discord.IMessage.RemoveReactionAsync(Discord.IEmote, System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RemoveReactionAsync
    path: ../src/Discord.Net.Core/Entities/Messages/IMessage.cs
    startLine: 196
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nRemoves a reaction from message.\n"
  example:
  - "\nThe following example removes the reaction, <code>\U0001F495</code>, added by the user with ID 84291986575613952 from the message.\n<pre><code class=\"lang-cs\">await msg.RemoveReactionAsync(new Emoji(&quot;\\U0001f495&quot;), 84291986575613952);</code></pre>\n"
  syntax:
    content: Task RemoveReactionAsync(IEmote emote, ulong userId, RequestOptions options = null)
    parameters:
    - id: emote
      type: Discord.IEmote
      description: The emoji used to react to this message.
    - id: userId
      type: System.UInt64
      description: The ID of the user that added the emoji.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous operation for removing a reaction to this message.\n"
    content.vb: Function RemoveReactionAsync(emote As IEmote, userId As ULong, options As RequestOptions = Nothing) As Task
  overload: Discord.IMessage.RemoveReactionAsync*
  seealso:
  - linkId: Discord.IEmote
    commentId: T:Discord.IEmote
- uid: Discord.IMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
  commentId: M:Discord.IMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
  id: RemoveAllReactionsAsync(Discord.RequestOptions)
  parent: Discord.IMessage
  langs:
  - csharp
  - vb
  name: RemoveAllReactionsAsync(RequestOptions)
  nameWithType: IMessage.RemoveAllReactionsAsync(RequestOptions)
  fullName: Discord.IMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RemoveAllReactionsAsync
    path: ../src/Discord.Net.Core/Entities/Messages/IMessage.cs
    startLine: 204
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nRemoves all reactions from this message.\n"
  example: []
  syntax:
    content: Task RemoveAllReactionsAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous removal operation.\n"
    content.vb: Function RemoveAllReactionsAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.IMessage.RemoveAllReactionsAsync*
- uid: Discord.IMessage.GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions)
  commentId: M:Discord.IMessage.GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions)
  id: GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions)
  parent: Discord.IMessage
  langs:
  - csharp
  - vb
  name: GetReactionUsersAsync(IEmote, Int32, RequestOptions)
  nameWithType: IMessage.GetReactionUsersAsync(IEmote, Int32, RequestOptions)
  fullName: Discord.IMessage.GetReactionUsersAsync(Discord.IEmote, System.Int32, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/IMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetReactionUsersAsync
    path: ../src/Discord.Net.Core/Entities/Messages/IMessage.cs
    startLine: 224
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets all users that reacted to a message with a given emote.\n"
  example:
  - "\nThe following example gets the users that have reacted with the emoji <code>\U0001F495</code> to the message.\n<pre><code class=\"lang-cs\">var emoji = new Emoji(&quot;\\U0001f495&quot;);\nvar reactedUsers = await message.GetReactionUsersAsync(emoji, 100).FlattenAsync();</code></pre>\n"
  syntax:
    content: IAsyncEnumerable<IReadOnlyCollection<IUser>> GetReactionUsersAsync(IEmote emoji, int limit, RequestOptions options = null)
    parameters:
    - id: emoji
      type: Discord.IEmote
      description: The emoji that represents the reaction that you wish to get.
    - id: limit
      type: System.Int32
      description: The number of users to request.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IUser}}
      description: "\nA paged collection containing a read-only collection of users that has reacted to this message.\nFlattening the paginated response into a collection of users with \n<xref href=\"Discord.AsyncEnumerableExtensions.FlattenAsync%60%601(System.Collections.Generic.IAsyncEnumerable%7bSystem.Collections.Generic.IEnumerable%7b%60%600%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref> is required if you wish to access the users.\n"
    content.vb: Function GetReactionUsersAsync(emoji As IEmote, limit As Integer, options As RequestOptions = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of IUser))
  overload: Discord.IMessage.GetReactionUsersAsync*
references:
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.ISnowflakeEntity.CreatedAt
  commentId: P:Discord.ISnowflakeEntity.CreatedAt
  parent: Discord.ISnowflakeEntity
  name: CreatedAt
  nameWithType: ISnowflakeEntity.CreatedAt
  fullName: Discord.ISnowflakeEntity.CreatedAt
- uid: Discord.IEntity{System.UInt64}.Id
  commentId: P:Discord.IEntity{System.UInt64}.Id
  parent: Discord.IEntity{System.UInt64}
  definition: Discord.IEntity`1.Id
  name: Id
  nameWithType: IEntity<UInt64>.Id
  fullName: Discord.IEntity<System.UInt64>.Id
  nameWithType.vb: IEntity(Of UInt64).Id
  fullName.vb: Discord.IEntity(Of System.UInt64).Id
- uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  commentId: M:Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  parent: Discord.IDeletable
  name: DeleteAsync(RequestOptions)
  nameWithType: IDeletable.DeleteAsync(RequestOptions)
  fullName: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: IDeletable.DeleteAsync
    fullName: Discord.IDeletable.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: IDeletable.DeleteAsync
    fullName: Discord.IDeletable.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessage.Discord.MessageExtensions.GetJumpUrl
  commentId: M:Discord.MessageExtensions.GetJumpUrl(Discord.IMessage)
  parent: Discord.MessageExtensions
  definition: Discord.MessageExtensions.GetJumpUrl(Discord.IMessage)
  name: GetJumpUrl()
  nameWithType: MessageExtensions.GetJumpUrl()
  fullName: Discord.MessageExtensions.GetJumpUrl()
  spec.csharp:
  - uid: Discord.MessageExtensions.GetJumpUrl
    name: GetJumpUrl
    nameWithType: MessageExtensions.GetJumpUrl
    fullName: Discord.MessageExtensions.GetJumpUrl
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.MessageExtensions.GetJumpUrl
    name: GetJumpUrl
    nameWithType: MessageExtensions.GetJumpUrl
    fullName: Discord.MessageExtensions.GetJumpUrl
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IEntity`1.Id
  commentId: P:Discord.IEntity`1.Id
  name: Id
  nameWithType: IEntity<TId>.Id
  fullName: Discord.IEntity<TId>.Id
  nameWithType.vb: IEntity(Of TId).Id
  fullName.vb: Discord.IEntity(Of TId).Id
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IDeletable
  commentId: T:Discord.IDeletable
  parent: Discord
  name: IDeletable
  nameWithType: IDeletable
  fullName: Discord.IDeletable
- uid: Discord.MessageExtensions.GetJumpUrl(Discord.IMessage)
  commentId: M:Discord.MessageExtensions.GetJumpUrl(Discord.IMessage)
  name: GetJumpUrl(IMessage)
  nameWithType: MessageExtensions.GetJumpUrl(IMessage)
  fullName: Discord.MessageExtensions.GetJumpUrl(Discord.IMessage)
  spec.csharp:
  - uid: Discord.MessageExtensions.GetJumpUrl(Discord.IMessage)
    name: GetJumpUrl
    nameWithType: MessageExtensions.GetJumpUrl
    fullName: Discord.MessageExtensions.GetJumpUrl
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.MessageExtensions.GetJumpUrl(Discord.IMessage)
    name: GetJumpUrl
    nameWithType: MessageExtensions.GetJumpUrl
    fullName: Discord.MessageExtensions.GetJumpUrl
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.MessageExtensions
  commentId: T:Discord.MessageExtensions
  parent: Discord
  name: MessageExtensions
  nameWithType: MessageExtensions
  fullName: Discord.MessageExtensions
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessage.Type*
  commentId: Overload:Discord.IMessage.Type
  name: Type
  nameWithType: IMessage.Type
  fullName: Discord.IMessage.Type
- uid: Discord.MessageType
  commentId: T:Discord.MessageType
  parent: Discord
  name: MessageType
  nameWithType: MessageType
  fullName: Discord.MessageType
- uid: Discord.IMessage.Source*
  commentId: Overload:Discord.IMessage.Source
  name: Source
  nameWithType: IMessage.Source
  fullName: Discord.IMessage.Source
- uid: Discord.MessageSource
  commentId: T:Discord.MessageSource
  parent: Discord
  name: MessageSource
  nameWithType: MessageSource
  fullName: Discord.MessageSource
- uid: Discord.IMessage.IsTTS*
  commentId: Overload:Discord.IMessage.IsTTS
  name: IsTTS
  nameWithType: IMessage.IsTTS
  fullName: Discord.IMessage.IsTTS
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.IMessage.IsPinned*
  commentId: Overload:Discord.IMessage.IsPinned
  name: IsPinned
  nameWithType: IMessage.IsPinned
  fullName: Discord.IMessage.IsPinned
- uid: Discord.IMessage.IsSuppressed*
  commentId: Overload:Discord.IMessage.IsSuppressed
  name: IsSuppressed
  nameWithType: IMessage.IsSuppressed
  fullName: Discord.IMessage.IsSuppressed
- uid: Discord.IMessage.Content*
  commentId: Overload:Discord.IMessage.Content
  name: Content
  nameWithType: IMessage.Content
  fullName: Discord.IMessage.Content
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.IMessage.Timestamp*
  commentId: Overload:Discord.IMessage.Timestamp
  name: Timestamp
  nameWithType: IMessage.Timestamp
  fullName: Discord.IMessage.Timestamp
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: Discord.IMessage.EditedTimestamp*
  commentId: Overload:Discord.IMessage.EditedTimestamp
  name: EditedTimestamp
  nameWithType: IMessage.EditedTimestamp
  fullName: Discord.IMessage.EditedTimestamp
- uid: System.Nullable{System.DateTimeOffset}
  commentId: T:System.Nullable{System.DateTimeOffset}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTimeOffset>
  nameWithType: Nullable<DateTimeOffset>
  fullName: System.Nullable<System.DateTimeOffset>
  nameWithType.vb: Nullable(Of DateTimeOffset)
  fullName.vb: System.Nullable(Of System.DateTimeOffset)
  name.vb: Nullable(Of DateTimeOffset)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessage.Channel*
  commentId: Overload:Discord.IMessage.Channel
  name: Channel
  nameWithType: IMessage.Channel
  fullName: Discord.IMessage.Channel
- uid: Discord.IMessageChannel
  commentId: T:Discord.IMessageChannel
  parent: Discord
  name: IMessageChannel
  nameWithType: IMessageChannel
  fullName: Discord.IMessageChannel
- uid: Discord.IMessage.Author*
  commentId: Overload:Discord.IMessage.Author
  name: Author
  nameWithType: IMessage.Author
  fullName: Discord.IMessage.Author
- uid: Discord.IUser
  commentId: T:Discord.IUser
  parent: Discord
  name: IUser
  nameWithType: IUser
  fullName: Discord.IUser
- uid: Discord.IMessage.Attachments*
  commentId: Overload:Discord.IMessage.Attachments
  name: Attachments
  nameWithType: IMessage.Attachments
  fullName: Discord.IMessage.Attachments
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.IAttachment}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.IAttachment}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<IAttachment>
  nameWithType: IReadOnlyCollection<IAttachment>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.IAttachment>
  nameWithType.vb: IReadOnlyCollection(Of IAttachment)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.IAttachment)
  name.vb: IReadOnlyCollection(Of IAttachment)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IAttachment
    name: IAttachment
    nameWithType: IAttachment
    fullName: Discord.IAttachment
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IAttachment
    name: IAttachment
    nameWithType: IAttachment
    fullName: Discord.IAttachment
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Discord.EmbedType.Rich
  commentId: F:Discord.EmbedType.Rich
  isExternal: true
- uid: Discord.Embed
  commentId: T:Discord.Embed
  parent: Discord
  name: Embed
  nameWithType: Embed
  fullName: Discord.Embed
- uid: Discord.IMessage.Embeds*
  commentId: Overload:Discord.IMessage.Embeds
  name: Embeds
  nameWithType: IMessage.Embeds
  fullName: Discord.IMessage.Embeds
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.IEmbed}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.IEmbed}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<IEmbed>
  nameWithType: IReadOnlyCollection<IEmbed>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.IEmbed>
  nameWithType.vb: IReadOnlyCollection(Of IEmbed)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.IEmbed)
  name.vb: IReadOnlyCollection(Of IEmbed)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IEmbed
    name: IEmbed
    nameWithType: IEmbed
    fullName: Discord.IEmbed
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IEmbed
    name: IEmbed
    nameWithType: IEmbed
    fullName: Discord.IEmbed
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessage.Tags*
  commentId: Overload:Discord.IMessage.Tags
  name: Tags
  nameWithType: IMessage.Tags
  fullName: Discord.IMessage.Tags
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.ITag}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.ITag}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<ITag>
  nameWithType: IReadOnlyCollection<ITag>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.ITag>
  nameWithType.vb: IReadOnlyCollection(Of ITag)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.ITag)
  name.vb: IReadOnlyCollection(Of ITag)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ITag
    name: ITag
    nameWithType: ITag
    fullName: Discord.ITag
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ITag
    name: ITag
    nameWithType: ITag
    fullName: Discord.ITag
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessage.MentionedChannelIds*
  commentId: Overload:Discord.IMessage.MentionedChannelIds
  name: MentionedChannelIds
  nameWithType: IMessage.MentionedChannelIds
  fullName: Discord.IMessage.MentionedChannelIds
- uid: System.Collections.Generic.IReadOnlyCollection{System.UInt64}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{System.UInt64}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<UInt64>
  nameWithType: IReadOnlyCollection<UInt64>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.UInt64>
  nameWithType.vb: IReadOnlyCollection(Of UInt64)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of System.UInt64)
  name.vb: IReadOnlyCollection(Of UInt64)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessage.MentionedRoleIds*
  commentId: Overload:Discord.IMessage.MentionedRoleIds
  name: MentionedRoleIds
  nameWithType: IMessage.MentionedRoleIds
  fullName: Discord.IMessage.MentionedRoleIds
- uid: Discord.IMessage.MentionedUserIds*
  commentId: Overload:Discord.IMessage.MentionedUserIds
  name: MentionedUserIds
  nameWithType: IMessage.MentionedUserIds
  fullName: Discord.IMessage.MentionedUserIds
- uid: Discord.IMessage.Activity*
  commentId: Overload:Discord.IMessage.Activity
  name: Activity
  nameWithType: IMessage.Activity
  fullName: Discord.IMessage.Activity
- uid: Discord.MessageActivity
  commentId: T:Discord.MessageActivity
  parent: Discord
  name: MessageActivity
  nameWithType: MessageActivity
  fullName: Discord.MessageActivity
- uid: Discord.IMessage.Application*
  commentId: Overload:Discord.IMessage.Application
  name: Application
  nameWithType: IMessage.Application
  fullName: Discord.IMessage.Application
- uid: Discord.MessageApplication
  commentId: T:Discord.MessageApplication
  parent: Discord
  name: MessageApplication
  nameWithType: MessageApplication
  fullName: Discord.MessageApplication
- uid: Discord.IMessage.Reactions*
  commentId: Overload:Discord.IMessage.Reactions
  name: Reactions
  nameWithType: IMessage.Reactions
  fullName: Discord.IMessage.Reactions
- uid: System.Collections.Generic.IReadOnlyDictionary{Discord.IEmote,Discord.ReactionMetadata}
  commentId: T:System.Collections.Generic.IReadOnlyDictionary{Discord.IEmote,Discord.ReactionMetadata}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: IReadOnlyDictionary<IEmote, ReactionMetadata>
  nameWithType: IReadOnlyDictionary<IEmote, ReactionMetadata>
  fullName: System.Collections.Generic.IReadOnlyDictionary<Discord.IEmote, Discord.ReactionMetadata>
  nameWithType.vb: IReadOnlyDictionary(Of IEmote, ReactionMetadata)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of Discord.IEmote, Discord.ReactionMetadata)
  name.vb: IReadOnlyDictionary(Of IEmote, ReactionMetadata)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.ReactionMetadata
    name: ReactionMetadata
    nameWithType: ReactionMetadata
    fullName: Discord.ReactionMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.ReactionMetadata
    name: ReactionMetadata
    nameWithType: ReactionMetadata
    fullName: Discord.ReactionMetadata
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IEmote
  commentId: T:Discord.IEmote
  parent: Discord
  name: IEmote
  nameWithType: IEmote
  fullName: Discord.IEmote
- uid: Discord.IMessage.AddReactionAsync*
  commentId: Overload:Discord.IMessage.AddReactionAsync
  name: AddReactionAsync
  nameWithType: IMessage.AddReactionAsync
  fullName: Discord.IMessage.AddReactionAsync
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Discord.IMessage.RemoveReactionAsync*
  commentId: Overload:Discord.IMessage.RemoveReactionAsync
  name: RemoveReactionAsync
  nameWithType: IMessage.RemoveReactionAsync
  fullName: Discord.IMessage.RemoveReactionAsync
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Discord.IMessage.RemoveAllReactionsAsync*
  commentId: Overload:Discord.IMessage.RemoveAllReactionsAsync
  name: RemoveAllReactionsAsync
  nameWithType: IMessage.RemoveAllReactionsAsync
  fullName: Discord.IMessage.RemoveAllReactionsAsync
- uid: Discord.AsyncEnumerableExtensions.FlattenAsync``1(System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IEnumerable{``0}})
  commentId: M:Discord.AsyncEnumerableExtensions.FlattenAsync``1(System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
- uid: Discord.IMessage.GetReactionUsersAsync*
  commentId: Overload:Discord.IMessage.GetReactionUsersAsync
  name: GetReactionUsersAsync
  nameWithType: IMessage.GetReactionUsersAsync
  fullName: Discord.IMessage.GetReactionUsersAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IUser}}
  commentId: T:System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IUser}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IAsyncEnumerable`1
  name: IAsyncEnumerable<IReadOnlyCollection<IUser>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<IUser>>
  fullName: System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyCollection<Discord.IUser>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IUser))
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IUser))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IUser))
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IAsyncEnumerable`1
  commentId: T:System.Collections.Generic.IAsyncEnumerable`1
  isExternal: true
  name: IAsyncEnumerable<T>
  nameWithType: IAsyncEnumerable<T>
  fullName: System.Collections.Generic.IAsyncEnumerable<T>
  nameWithType.vb: IAsyncEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of T)
  name.vb: IAsyncEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
