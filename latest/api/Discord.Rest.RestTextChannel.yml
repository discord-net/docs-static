### YamlMime:ManagedReference
items:
- uid: Discord.Rest.RestTextChannel
  commentId: T:Discord.Rest.RestTextChannel
  id: RestTextChannel
  parent: Discord.Rest
  children:
  - Discord.Rest.RestTextChannel.CategoryId
  - Discord.Rest.RestTextChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.CreateWebhookAsync(System.String,Stream,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.DeleteMessagesAsync(IEnumerable{Discord.IMessage},Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.DeleteMessagesAsync(IEnumerable{System.UInt64},Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.EnterTypingState(Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.GetCategoryAsync(Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.GetInvitesAsync(Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.GetUserAsync(System.UInt64,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.GetUsersAsync(Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.GetWebhooksAsync(Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.IsNsfw
  - Discord.Rest.RestTextChannel.Mention
  - Discord.Rest.RestTextChannel.ModifyAsync(Action{Discord.TextChannelProperties},Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.SendFileAsync(Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  - Discord.Rest.RestTextChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  - Discord.Rest.RestTextChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.SlowModeInterval
  - Discord.Rest.RestTextChannel.SyncPermissionsAsync(Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.Topic
  - Discord.Rest.RestTextChannel.TriggerTypingAsync(Discord.RequestOptions)
  langs:
  - csharp
  - vb
  name: RestTextChannel
  nameWithType: RestTextChannel
  fullName: Discord.Rest.RestTextChannel
  type: Class
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: RestTextChannel
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 13
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nRepresents a REST-based channel in a guild that can send and receive messages.\n"
  example: []
  syntax:
    content: 'public class RestTextChannel : RestGuildChannel, IEntity<ulong>, IUpdateable, IRestMessageChannel, ITextChannel, IMessageChannel, IMentionable, INestedChannel, IGuildChannel, IChannel, ISnowflakeEntity, IEntity<ulong>, IDeletable'
    content.vb: >-
      Public Class RestTextChannel
          Inherits RestGuildChannel
          Implements IEntity(Of ULong), IUpdateable, IRestMessageChannel, ITextChannel, IMessageChannel, IMentionable, INestedChannel, IGuildChannel, IChannel, ISnowflakeEntity, IEntity(Of ULong), IDeletable
  inheritance:
  - System.Object
  - Discord.Rest.RestEntity{System.UInt64}
  - Discord.Rest.RestChannel
  - Discord.Rest.RestGuildChannel
  derivedClasses:
  - Discord.Rest.RestNewsChannel
  implements:
  - Discord.IEntity{System.UInt64}
  - Discord.IUpdateable
  - Discord.Rest.IRestMessageChannel
  - Discord.ITextChannel
  - Discord.IMessageChannel
  - Discord.IMentionable
  - Discord.INestedChannel
  - Discord.IGuildChannel
  - Discord.IChannel
  - Discord.ISnowflakeEntity
  - Discord.IEntity{System.UInt64}
  - Discord.IDeletable
  inheritedMembers:
  - Discord.Rest.RestGuildChannel.PermissionOverwrites
  - Discord.Rest.RestGuildChannel.Name
  - Discord.Rest.RestGuildChannel.Position
  - Discord.Rest.RestGuildChannel.GuildId
  - Discord.Rest.RestGuildChannel.UpdateAsync(Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.ModifyAsync(Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.DeleteAsync(Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IUser)
  - Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IRole)
  - Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.ToString
  - Discord.Rest.RestGuildChannel.Discord#IGuildChannel#Guild
  - Discord.Rest.RestChannel.CreatedAt
  - Discord.Rest.RestEntity{System.UInt64}.Id
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.Rest.RestTextChannel.Topic
  commentId: P:Discord.Rest.RestTextChannel.Topic
  id: Topic
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: Topic
  nameWithType: RestTextChannel.Topic
  fullName: Discord.Rest.RestTextChannel.Topic
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Topic
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 17
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public string Topic { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Topic As String
  overload: Discord.Rest.RestTextChannel.Topic*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestTextChannel.SlowModeInterval
  commentId: P:Discord.Rest.RestTextChannel.SlowModeInterval
  id: SlowModeInterval
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: SlowModeInterval
  nameWithType: RestTextChannel.SlowModeInterval
  fullName: Discord.Rest.RestTextChannel.SlowModeInterval
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: SlowModeInterval
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 19
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public virtual int SlowModeInterval { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Overridable ReadOnly Property SlowModeInterval As Integer
  overload: Discord.Rest.RestTextChannel.SlowModeInterval*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.Rest.RestTextChannel.CategoryId
  commentId: P:Discord.Rest.RestTextChannel.CategoryId
  id: CategoryId
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: CategoryId
  nameWithType: RestTextChannel.CategoryId
  fullName: Discord.Rest.RestTextChannel.CategoryId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: CategoryId
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 21
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public ulong? CategoryId { get; }
    parameters: []
    return:
      type: System.Nullable{System.UInt64}
    content.vb: Public ReadOnly Property CategoryId As ULong?
  overload: Discord.Rest.RestTextChannel.CategoryId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestTextChannel.Mention
  commentId: P:Discord.Rest.RestTextChannel.Mention
  id: Mention
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: Mention
  nameWithType: RestTextChannel.Mention
  fullName: Discord.Rest.RestTextChannel.Mention
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Mention
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 24
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public string Mention { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Mention As String
  overload: Discord.Rest.RestTextChannel.Mention*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestTextChannel.IsNsfw
  commentId: P:Discord.Rest.RestTextChannel.IsNsfw
  id: IsNsfw
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: IsNsfw
  nameWithType: RestTextChannel.IsNsfw
  fullName: Discord.Rest.RestTextChannel.IsNsfw
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: IsNsfw
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 26
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public bool IsNsfw { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsNsfw As Boolean
  overload: Discord.Rest.RestTextChannel.IsNsfw*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestTextChannel.ModifyAsync(Action{Discord.TextChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.ModifyAsync(Action{Discord.TextChannelProperties},Discord.RequestOptions)
  id: ModifyAsync(Action{Discord.TextChannelProperties},Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: ModifyAsync(Action<TextChannelProperties>, RequestOptions)
  nameWithType: RestTextChannel.ModifyAsync(Action<TextChannelProperties>, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.ModifyAsync(Action<Discord.TextChannelProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ModifyAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 49
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task ModifyAsync(Action<TextChannelProperties> func, RequestOptions options = null)
    parameters:
    - id: func
      type: Action{Discord.TextChannelProperties}
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function ModifyAsync(func As Action(Of TextChannelProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestTextChannel.ModifyAsync*
  nameWithType.vb: RestTextChannel.ModifyAsync(Action(Of TextChannelProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestTextChannel.ModifyAsync(Action(Of Discord.TextChannelProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of TextChannelProperties), RequestOptions)
- uid: Discord.Rest.RestTextChannel.GetUserAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.GetUserAsync(System.UInt64,Discord.RequestOptions)
  id: GetUserAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: GetUserAsync(UInt64, RequestOptions)
  nameWithType: RestTextChannel.GetUserAsync(UInt64, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.GetUserAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetUserAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 67
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a user in this channel.\n"
  example: []
  syntax:
    content: public Task<RestGuildUser> GetUserAsync(ulong id, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the user.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestGuildUser}
      description: "\nA task representing the asynchronous get operation. The task result contains a guild user object that\nrepresents the user; <code>null</code> if none is found.\n"
    content.vb: Public Function GetUserAsync(id As ULong, options As RequestOptions = Nothing) As Task(Of RestGuildUser)
  overload: Discord.Rest.RestTextChannel.GetUserAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.GetUsersAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.GetUsersAsync(Discord.RequestOptions)
  id: GetUsersAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: GetUsersAsync(RequestOptions)
  nameWithType: RestTextChannel.GetUsersAsync(RequestOptions)
  fullName: Discord.Rest.RestTextChannel.GetUsersAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetUsersAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 82
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of users that are able to view the channel.\n"
  example: []
  syntax:
    content: public IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> GetUsersAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: IAsyncEnumerable{IReadOnlyCollection{Discord.Rest.RestGuildUser}}
      description: "\nA paged collection containing a collection of guild users that can access this channel. Flattening the\npaginated response into a collection of users with \n<xref href=\"Discord.AsyncEnumerableExtensions.FlattenAsync%60%601(IAsyncEnumerable%7b%600%7d)\" data-throw-if-not-resolved=\"false\"></xref> is required if you wish to access the users.\n"
    content.vb: Public Function GetUsersAsync(options As RequestOptions = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of RestGuildUser))
  overload: Discord.Rest.RestTextChannel.GetUsersAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
  id: GetMessageAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: GetMessageAsync(UInt64, RequestOptions)
  nameWithType: RestTextChannel.GetMessageAsync(UInt64, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.GetMessageAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetMessageAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 86
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a message from this message channel.\n"
  remarks: "\nThis method follows the same behavior as described in <see cref=\"!:IMessageChannel.GetMessageAsync(ulong, CacheMode, RequestOptions)\"></see>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public Task<RestMessage> GetMessageAsync(ulong id, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the message.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestMessage}
      description: "\nA task that represents an asynchronous get operation for retrieving the message. The task result contains\nthe retrieved message; <code>null</code> if no message is found with the specified identifier.\n"
    content.vb: Public Function GetMessageAsync(id As ULong, options As RequestOptions = Nothing) As Task(Of RestMessage)
  overload: Discord.Rest.RestTextChannel.GetMessageAsync*
  implements:
  - Discord.Rest.IRestMessageChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
  id: GetMessagesAsync(System.Int32,Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: GetMessagesAsync(Int32, RequestOptions)
  nameWithType: RestTextChannel.GetMessagesAsync(Int32, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.GetMessagesAsync(System.Int32, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetMessagesAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 89
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the last N messages from this message channel.\n"
  remarks: "\nThis method follows the same behavior as described in <see cref=\"!:IMessageChannel.GetMessagesAsync(int, CacheMode, RequestOptions)\"></see>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(int limit = null, RequestOptions options = null)
    parameters:
    - id: limit
      type: System.Int32
      description: The numbers of message to be gotten from.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: IAsyncEnumerable{IReadOnlyCollection{Discord.Rest.RestMessage}}
      description: "\nPaged collection of messages.\n"
    content.vb: Public Function GetMessagesAsync(limit As Integer = Nothing, options As RequestOptions = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of RestMessage))
  overload: Discord.Rest.RestTextChannel.GetMessagesAsync*
  implements:
  - Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
  id: GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: GetMessagesAsync(UInt64, Direction, Int32, RequestOptions)
  nameWithType: RestTextChannel.GetMessagesAsync(UInt64, Direction, Int32, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.GetMessagesAsync(System.UInt64, Discord.Direction, System.Int32, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetMessagesAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 92
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of messages in this channel.\n"
  remarks: "\nThis method follows the same behavior as described in <see cref=\"!:IMessageChannel.GetMessagesAsync(ulong, Direction, int, CacheMode, RequestOptions)\"></see>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(ulong fromMessageId, Direction dir, int limit = null, RequestOptions options = null)
    parameters:
    - id: fromMessageId
      type: System.UInt64
      description: The ID of the starting message to get the messages from.
    - id: dir
      type: Discord.Direction
      description: The direction of the messages to be gotten from.
    - id: limit
      type: System.Int32
      description: The numbers of message to be gotten from.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: IAsyncEnumerable{IReadOnlyCollection{Discord.Rest.RestMessage}}
      description: "\nPaged collection of messages.\n"
    content.vb: Public Function GetMessagesAsync(fromMessageId As ULong, dir As Direction, limit As Integer = Nothing, options As RequestOptions = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of RestMessage))
  overload: Discord.Rest.RestTextChannel.GetMessagesAsync*
  implements:
  - Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
  id: GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: GetMessagesAsync(IMessage, Direction, Int32, RequestOptions)
  nameWithType: RestTextChannel.GetMessagesAsync(IMessage, Direction, Int32, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.GetMessagesAsync(Discord.IMessage, Discord.Direction, System.Int32, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetMessagesAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 95
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of messages in this channel.\n"
  remarks: "\nThis method follows the same behavior as described in <see cref=\"!:IMessageChannel.GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions)\"></see>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(IMessage fromMessage, Direction dir, int limit = null, RequestOptions options = null)
    parameters:
    - id: fromMessage
      type: Discord.IMessage
      description: The starting message to get the messages from.
    - id: dir
      type: Discord.Direction
      description: The direction of the messages to be gotten from.
    - id: limit
      type: System.Int32
      description: The numbers of message to be gotten from.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: IAsyncEnumerable{IReadOnlyCollection{Discord.Rest.RestMessage}}
      description: "\nPaged collection of messages.\n"
    content.vb: Public Function GetMessagesAsync(fromMessage As IMessage, dir As Direction, limit As Integer = Nothing, options As RequestOptions = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of RestMessage))
  overload: Discord.Rest.RestTextChannel.GetMessagesAsync*
  implements:
  - Discord.Rest.IRestMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  id: GetPinnedMessagesAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: GetPinnedMessagesAsync(RequestOptions)
  nameWithType: RestTextChannel.GetPinnedMessagesAsync(RequestOptions)
  fullName: Discord.Rest.RestTextChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetPinnedMessagesAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 98
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of pinned messages in this channel.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<RestMessage>> GetPinnedMessagesAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{IReadOnlyCollection{Discord.Rest.RestMessage}}
      description: "\nA task that represents the asynchronous get operation for retrieving pinned messages in this channel.\nThe task result contains a collection of messages found in the pinned messages.\n"
    content.vb: Public Function GetPinnedMessagesAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestMessage))
  overload: Discord.Rest.RestTextChannel.GetPinnedMessagesAsync*
  implements:
  - Discord.Rest.IRestMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  id: SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: SendMessageAsync(String, Boolean, Embed, RequestOptions)
  nameWithType: RestTextChannel.SendMessageAsync(String, Boolean, Embed, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.SendMessageAsync(System.String, System.Boolean, Discord.Embed, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: SendMessageAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 103
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nSends a message to this message channel.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IMessageChannel.SendMessageAsync(System.String%2cSystem.Boolean%2cDiscord.Embed%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public Task<RestUserMessage> SendMessageAsync(string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null)
    parameters:
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Determines whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Public Function SendMessageAsync(text As String = Nothing, isTTS As Boolean = False, embed As Embed = Nothing, options As RequestOptions = Nothing) As Task(Of RestUserMessage)
  overload: Discord.Rest.RestTextChannel.SendMessageAsync*
  implements:
  - Discord.Rest.IRestMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.Rest.RestTextChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  id: SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: RestTextChannel.SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.Rest.RestTextChannel.SendFileAsync(System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: SendFileAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 131
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nSends a file to this message channel with an optional caption.\n"
  remarks: "\nThis method follows the same behavior as described in \n<see cref=\"!:IMessageChannel.SendFileAsync(string, string, bool, Embed, RequestOptions, bool)\"></see>. Please visit\nits documentation for more details on this method.\n"
  example: []
  syntax:
    content: public Task<RestUserMessage> SendFileAsync(string filePath, string text, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false)
    parameters:
    - id: filePath
      type: System.String
      description: The file path of the file.
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    - id: isSpoiler
      type: System.Boolean
    return:
      type: Task{Discord.Rest.RestUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Public Function SendFileAsync(filePath As String, text As String, isTTS As Boolean = False, embed As Embed = Nothing, options As RequestOptions = Nothing, isSpoiler As Boolean = False) As Task(Of RestUserMessage)
  overload: Discord.Rest.RestTextChannel.SendFileAsync*
  implements:
  - Discord.Rest.IRestMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.SendFileAsync(Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.Rest.RestTextChannel.SendFileAsync(Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  id: SendFileAsync(Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: RestTextChannel.SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.Rest.RestTextChannel.SendFileAsync(Stream, System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: SendFileAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 136
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nSends a file to this message channel with an optional caption.\n"
  remarks: "\nThis method follows the same behavior as described in <see cref=\"!:IMessageChannel.SendFileAsync(Stream, string, string, bool, Embed, RequestOptions, bool)\"></see>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public Task<RestUserMessage> SendFileAsync(Stream stream, string filename, string text, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false)
    parameters:
    - id: stream
      type: Stream
      description: The <see cref="!:Stream"></see> of the file to be sent.
    - id: filename
      type: System.String
      description: The name of the attachment.
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    - id: isSpoiler
      type: System.Boolean
    return:
      type: Task{Discord.Rest.RestUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Public Function SendFileAsync(stream As Stream, filename As String, text As String, isTTS As Boolean = False, embed As Embed = Nothing, options As RequestOptions = Nothing, isSpoiler As Boolean = False) As Task(Of RestUserMessage)
  overload: Discord.Rest.RestTextChannel.SendFileAsync*
  implements:
  - Discord.Rest.IRestMessageChannel.SendFileAsync(Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  id: DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: DeleteMessageAsync(UInt64, RequestOptions)
  nameWithType: RestTextChannel.DeleteMessageAsync(UInt64, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.DeleteMessageAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteMessageAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 140
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task DeleteMessageAsync(ulong messageId, RequestOptions options = null)
    parameters:
    - id: messageId
      type: System.UInt64
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function DeleteMessageAsync(messageId As ULong, options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestTextChannel.DeleteMessageAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  id: DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: DeleteMessageAsync(IMessage, RequestOptions)
  nameWithType: RestTextChannel.DeleteMessageAsync(IMessage, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.DeleteMessageAsync(Discord.IMessage, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteMessageAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 143
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task DeleteMessageAsync(IMessage message, RequestOptions options = null)
    parameters:
    - id: message
      type: Discord.IMessage
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function DeleteMessageAsync(message As IMessage, options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestTextChannel.DeleteMessageAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.DeleteMessagesAsync(IEnumerable{Discord.IMessage},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.DeleteMessagesAsync(IEnumerable{Discord.IMessage},Discord.RequestOptions)
  id: DeleteMessagesAsync(IEnumerable{Discord.IMessage},Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: DeleteMessagesAsync(IEnumerable<IMessage>, RequestOptions)
  nameWithType: RestTextChannel.DeleteMessagesAsync(IEnumerable<IMessage>, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.DeleteMessagesAsync(IEnumerable<Discord.IMessage>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteMessagesAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 147
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task DeleteMessagesAsync(IEnumerable<IMessage> messages, RequestOptions options = null)
    parameters:
    - id: messages
      type: IEnumerable{Discord.IMessage}
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function DeleteMessagesAsync(messages As IEnumerable(Of IMessage), options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestTextChannel.DeleteMessagesAsync*
  nameWithType.vb: RestTextChannel.DeleteMessagesAsync(IEnumerable(Of IMessage), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestTextChannel.DeleteMessagesAsync(IEnumerable(Of Discord.IMessage), Discord.RequestOptions)
  name.vb: DeleteMessagesAsync(IEnumerable(Of IMessage), RequestOptions)
- uid: Discord.Rest.RestTextChannel.DeleteMessagesAsync(IEnumerable{System.UInt64},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.DeleteMessagesAsync(IEnumerable{System.UInt64},Discord.RequestOptions)
  id: DeleteMessagesAsync(IEnumerable{System.UInt64},Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: DeleteMessagesAsync(IEnumerable<UInt64>, RequestOptions)
  nameWithType: RestTextChannel.DeleteMessagesAsync(IEnumerable<UInt64>, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.DeleteMessagesAsync(IEnumerable<System.UInt64>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteMessagesAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 150
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task DeleteMessagesAsync(IEnumerable<ulong> messageIds, RequestOptions options = null)
    parameters:
    - id: messageIds
      type: IEnumerable{System.UInt64}
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function DeleteMessagesAsync(messageIds As IEnumerable(Of ULong), options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestTextChannel.DeleteMessagesAsync*
  nameWithType.vb: RestTextChannel.DeleteMessagesAsync(IEnumerable(Of UInt64), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestTextChannel.DeleteMessagesAsync(IEnumerable(Of System.UInt64), Discord.RequestOptions)
  name.vb: DeleteMessagesAsync(IEnumerable(Of UInt64), RequestOptions)
- uid: Discord.Rest.RestTextChannel.TriggerTypingAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.TriggerTypingAsync(Discord.RequestOptions)
  id: TriggerTypingAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: TriggerTypingAsync(RequestOptions)
  nameWithType: RestTextChannel.TriggerTypingAsync(RequestOptions)
  fullName: Discord.Rest.RestTextChannel.TriggerTypingAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: TriggerTypingAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 154
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task TriggerTypingAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function TriggerTypingAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestTextChannel.TriggerTypingAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.EnterTypingState(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.EnterTypingState(Discord.RequestOptions)
  id: EnterTypingState(Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: EnterTypingState(RequestOptions)
  nameWithType: RestTextChannel.EnterTypingState(RequestOptions)
  fullName: Discord.Rest.RestTextChannel.EnterTypingState(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: EnterTypingState
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 157
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public IDisposable EnterTypingState(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: IDisposable
    content.vb: Public Function EnterTypingState(options As RequestOptions = Nothing) As IDisposable
  overload: Discord.Rest.RestTextChannel.EnterTypingState*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.CreateWebhookAsync(System.String,Stream,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.CreateWebhookAsync(System.String,Stream,Discord.RequestOptions)
  id: CreateWebhookAsync(System.String,Stream,Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: CreateWebhookAsync(String, Stream, RequestOptions)
  nameWithType: RestTextChannel.CreateWebhookAsync(String, Stream, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.CreateWebhookAsync(System.String, Stream, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: CreateWebhookAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 170
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nCreates a webhook in this text channel.\n"
  example: []
  syntax:
    content: public Task<RestWebhook> CreateWebhookAsync(string name, Stream avatar = null, RequestOptions options = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the webhook.
    - id: avatar
      type: Stream
      description: The avatar of the webhook.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestWebhook}
      description: "\nA task that represents the asynchronous creation operation. The task result contains the newly created\nwebhook.\n"
    content.vb: Public Function CreateWebhookAsync(name As String, avatar As Stream = Nothing, options As RequestOptions = Nothing) As Task(Of RestWebhook)
  overload: Discord.Rest.RestTextChannel.CreateWebhookAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  id: GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: GetWebhookAsync(UInt64, RequestOptions)
  nameWithType: RestTextChannel.GetWebhookAsync(UInt64, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.GetWebhookAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetWebhookAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 181
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a webhook available in this text channel.\n"
  example: []
  syntax:
    content: public Task<RestWebhook> GetWebhookAsync(ulong id, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
      description: The identifier of the webhook.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestWebhook}
      description: "\nA task that represents the asynchronous get operation. The task result contains a webhook associated\nwith the identifier; <code>null</code> if the webhook is not found.\n"
    content.vb: Public Function GetWebhookAsync(id As ULong, options As RequestOptions = Nothing) As Task(Of RestWebhook)
  overload: Discord.Rest.RestTextChannel.GetWebhookAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.GetWebhooksAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.GetWebhooksAsync(Discord.RequestOptions)
  id: GetWebhooksAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: GetWebhooksAsync(RequestOptions)
  nameWithType: RestTextChannel.GetWebhooksAsync(RequestOptions)
  fullName: Discord.Rest.RestTextChannel.GetWebhooksAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetWebhooksAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 191
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the webhooks available in this text channel.\n"
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<RestWebhook>> GetWebhooksAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{IReadOnlyCollection{Discord.Rest.RestWebhook}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection\nof webhooks that is available in this channel.\n"
    content.vb: Public Function GetWebhooksAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestWebhook))
  overload: Discord.Rest.RestTextChannel.GetWebhooksAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.GetCategoryAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.GetCategoryAsync(Discord.RequestOptions)
  id: GetCategoryAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: GetCategoryAsync(RequestOptions)
  nameWithType: RestTextChannel.GetCategoryAsync(RequestOptions)
  fullName: Discord.Rest.RestTextChannel.GetCategoryAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetCategoryAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 202
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the parent (category) channel of this channel.\n"
  example: []
  syntax:
    content: public Task<ICategoryChannel> GetCategoryAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.ICategoryChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains the category channel\nrepresenting the parent of this channel; <code>null</code> if none is set.\n"
    content.vb: Public Function GetCategoryAsync(options As RequestOptions = Nothing) As Task(Of ICategoryChannel)
  overload: Discord.Rest.RestTextChannel.GetCategoryAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.SyncPermissionsAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.SyncPermissionsAsync(Discord.RequestOptions)
  id: SyncPermissionsAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: SyncPermissionsAsync(RequestOptions)
  nameWithType: RestTextChannel.SyncPermissionsAsync(RequestOptions)
  fullName: Discord.Rest.RestTextChannel.SyncPermissionsAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: SyncPermissionsAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 205
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task SyncPermissionsAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function SyncPermissionsAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestTextChannel.SyncPermissionsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
  id: CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: CreateInviteAsync(Nullable<Int32>, Nullable<Int32>, Boolean, Boolean, RequestOptions)
  nameWithType: RestTextChannel.CreateInviteAsync(Nullable<Int32>, Nullable<Int32>, Boolean, Boolean, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.CreateInviteAsync(System.Nullable<System.Int32>, System.Nullable<System.Int32>, System.Boolean, System.Boolean, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: CreateInviteAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 210
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task<IInviteMetadata> CreateInviteAsync(int? maxAge, int? maxUses = null, bool isTemporary = false, bool isUnique = false, RequestOptions options = null)
    parameters:
    - id: maxAge
      type: System.Nullable{System.Int32}
    - id: maxUses
      type: System.Nullable{System.Int32}
    - id: isTemporary
      type: System.Boolean
    - id: isUnique
      type: System.Boolean
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task{Discord.IInviteMetadata}
    content.vb: Public Function CreateInviteAsync(maxAge As Integer?, maxUses As Integer? = Nothing, isTemporary As Boolean = False, isUnique As Boolean = False, options As RequestOptions = Nothing) As Task(Of IInviteMetadata)
  overload: Discord.Rest.RestTextChannel.CreateInviteAsync*
  nameWithType.vb: RestTextChannel.CreateInviteAsync(Nullable(Of Int32), Nullable(Of Int32), Boolean, Boolean, RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestTextChannel.CreateInviteAsync(System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), System.Boolean, System.Boolean, Discord.RequestOptions)
  name.vb: CreateInviteAsync(Nullable(Of Int32), Nullable(Of Int32), Boolean, Boolean, RequestOptions)
- uid: Discord.Rest.RestTextChannel.GetInvitesAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.GetInvitesAsync(Discord.RequestOptions)
  id: GetInvitesAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: GetInvitesAsync(RequestOptions)
  nameWithType: RestTextChannel.GetInvitesAsync(RequestOptions)
  fullName: Discord.Rest.RestTextChannel.GetInvitesAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetInvitesAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 213
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<IInviteMetadata>> GetInvitesAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task{IReadOnlyCollection{Discord.IInviteMetadata}}
    content.vb: Public Function GetInvitesAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of IInviteMetadata))
  overload: Discord.Rest.RestTextChannel.GetInvitesAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Discord.Rest
  commentId: N:Discord.Rest
  name: Discord.Rest
  nameWithType: Discord.Rest
  fullName: Discord.Rest
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Rest.RestEntity{System.UInt64}
  commentId: T:Discord.Rest.RestEntity{System.UInt64}
  parent: Discord.Rest
  definition: Discord.Rest.RestEntity`1
  name: RestEntity<UInt64>
  nameWithType: RestEntity<UInt64>
  fullName: Discord.Rest.RestEntity<System.UInt64>
  nameWithType.vb: RestEntity(Of UInt64)
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64)
  name.vb: RestEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestChannel
  commentId: T:Discord.Rest.RestChannel
  parent: Discord.Rest
  name: RestChannel
  nameWithType: RestChannel
  fullName: Discord.Rest.RestChannel
- uid: Discord.Rest.RestGuildChannel
  commentId: T:Discord.Rest.RestGuildChannel
  parent: Discord.Rest
  name: RestGuildChannel
  nameWithType: RestGuildChannel
  fullName: Discord.Rest.RestGuildChannel
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IUpdateable
  commentId: T:Discord.IUpdateable
  parent: Discord
  name: IUpdateable
  nameWithType: IUpdateable
  fullName: Discord.IUpdateable
- uid: Discord.Rest.IRestMessageChannel
  commentId: T:Discord.Rest.IRestMessageChannel
  parent: Discord.Rest
  name: IRestMessageChannel
  nameWithType: IRestMessageChannel
  fullName: Discord.Rest.IRestMessageChannel
- uid: Discord.ITextChannel
  commentId: T:Discord.ITextChannel
  parent: Discord
  name: ITextChannel
  nameWithType: ITextChannel
  fullName: Discord.ITextChannel
- uid: Discord.IMessageChannel
  commentId: T:Discord.IMessageChannel
  parent: Discord
  name: IMessageChannel
  nameWithType: IMessageChannel
  fullName: Discord.IMessageChannel
- uid: Discord.IMentionable
  commentId: T:Discord.IMentionable
  parent: Discord
  name: IMentionable
  nameWithType: IMentionable
  fullName: Discord.IMentionable
- uid: Discord.INestedChannel
  commentId: T:Discord.INestedChannel
  parent: Discord
  name: INestedChannel
  nameWithType: INestedChannel
  fullName: Discord.INestedChannel
- uid: Discord.IGuildChannel
  commentId: T:Discord.IGuildChannel
  parent: Discord
  name: IGuildChannel
  nameWithType: IGuildChannel
  fullName: Discord.IGuildChannel
- uid: Discord.IChannel
  commentId: T:Discord.IChannel
  parent: Discord
  name: IChannel
  nameWithType: IChannel
  fullName: Discord.IChannel
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IDeletable
  commentId: T:Discord.IDeletable
  parent: Discord
  name: IDeletable
  nameWithType: IDeletable
  fullName: Discord.IDeletable
- uid: Discord.Rest.RestGuildChannel.PermissionOverwrites
  commentId: P:Discord.Rest.RestGuildChannel.PermissionOverwrites
  parent: Discord.Rest.RestGuildChannel
  name: PermissionOverwrites
  nameWithType: RestGuildChannel.PermissionOverwrites
  fullName: Discord.Rest.RestGuildChannel.PermissionOverwrites
- uid: Discord.Rest.RestGuildChannel.Name
  commentId: P:Discord.Rest.RestGuildChannel.Name
  parent: Discord.Rest.RestGuildChannel
  name: Name
  nameWithType: RestGuildChannel.Name
  fullName: Discord.Rest.RestGuildChannel.Name
- uid: Discord.Rest.RestGuildChannel.Position
  commentId: P:Discord.Rest.RestGuildChannel.Position
  parent: Discord.Rest.RestGuildChannel
  name: Position
  nameWithType: RestGuildChannel.Position
  fullName: Discord.Rest.RestGuildChannel.Position
- uid: Discord.Rest.RestGuildChannel.GuildId
  commentId: P:Discord.Rest.RestGuildChannel.GuildId
  parent: Discord.Rest.RestGuildChannel
  name: GuildId
  nameWithType: RestGuildChannel.GuildId
  fullName: Discord.Rest.RestGuildChannel.GuildId
- uid: Discord.Rest.RestGuildChannel.UpdateAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.UpdateAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  name: UpdateAsync(RequestOptions)
  nameWithType: RestGuildChannel.UpdateAsync(RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.UpdateAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.UpdateAsync(Discord.RequestOptions)
    name: UpdateAsync
    nameWithType: RestGuildChannel.UpdateAsync
    fullName: Discord.Rest.RestGuildChannel.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.UpdateAsync(Discord.RequestOptions)
    name: UpdateAsync
    nameWithType: RestGuildChannel.UpdateAsync
    fullName: Discord.Rest.RestGuildChannel.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.ModifyAsync(Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.ModifyAsync(Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  isExternal: true
  name: ModifyAsync(Action<GuildChannelProperties>, RequestOptions)
  nameWithType: RestGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.ModifyAsync(Action<Discord.GuildChannelProperties>, Discord.RequestOptions)
  nameWithType.vb: RestGuildChannel.ModifyAsync(Action(Of GuildChannelProperties), RequestOptions)
  fullName.vb: Discord.Rest.RestGuildChannel.ModifyAsync(Action(Of Discord.GuildChannelProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of GuildChannelProperties), RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.ModifyAsync(Action{Discord.GuildChannelProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: RestGuildChannel.ModifyAsync
    fullName: Discord.Rest.RestGuildChannel.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildChannelProperties
    name: GuildChannelProperties
    nameWithType: GuildChannelProperties
    fullName: Discord.GuildChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.ModifyAsync(Action{Discord.GuildChannelProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: RestGuildChannel.ModifyAsync
    fullName: Discord.Rest.RestGuildChannel.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildChannelProperties
    name: GuildChannelProperties
    nameWithType: GuildChannelProperties
    fullName: Discord.GuildChannelProperties
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.DeleteAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.DeleteAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  name: DeleteAsync(RequestOptions)
  nameWithType: RestGuildChannel.DeleteAsync(RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.DeleteAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: RestGuildChannel.DeleteAsync
    fullName: Discord.Rest.RestGuildChannel.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: RestGuildChannel.DeleteAsync
    fullName: Discord.Rest.RestGuildChannel.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IUser)
  commentId: M:Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IUser)
  parent: Discord.Rest.RestGuildChannel
  name: GetPermissionOverwrite(IUser)
  nameWithType: RestGuildChannel.GetPermissionOverwrite(IUser)
  fullName: Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IUser)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IUser)
    name: GetPermissionOverwrite
    nameWithType: RestGuildChannel.GetPermissionOverwrite
    fullName: Discord.Rest.RestGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IUser)
    name: GetPermissionOverwrite
    nameWithType: RestGuildChannel.GetPermissionOverwrite
    fullName: Discord.Rest.RestGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IRole)
  commentId: M:Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IRole)
  parent: Discord.Rest.RestGuildChannel
  name: GetPermissionOverwrite(IRole)
  nameWithType: RestGuildChannel.GetPermissionOverwrite(IRole)
  fullName: Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IRole)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IRole)
    name: GetPermissionOverwrite
    nameWithType: RestGuildChannel.GetPermissionOverwrite
    fullName: Discord.Rest.RestGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IRole)
    name: GetPermissionOverwrite
    nameWithType: RestGuildChannel.GetPermissionOverwrite
    fullName: Discord.Rest.RestGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  name: AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  nameWithType: RestGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IUser, Discord.OverwritePermissions, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
    name: AddPermissionOverwriteAsync
    nameWithType: RestGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
    name: AddPermissionOverwriteAsync
    nameWithType: RestGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  name: AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  nameWithType: RestGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IRole, Discord.OverwritePermissions, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
    name: AddPermissionOverwriteAsync
    nameWithType: RestGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
    name: AddPermissionOverwriteAsync
    nameWithType: RestGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  name: RemovePermissionOverwriteAsync(IUser, RequestOptions)
  nameWithType: RestGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
    name: RemovePermissionOverwriteAsync
    nameWithType: RestGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
    name: RemovePermissionOverwriteAsync
    nameWithType: RestGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  name: RemovePermissionOverwriteAsync(IRole, RequestOptions)
  nameWithType: RestGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
    name: RemovePermissionOverwriteAsync
    nameWithType: RestGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
    name: RemovePermissionOverwriteAsync
    nameWithType: RestGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.ToString
  commentId: M:Discord.Rest.RestGuildChannel.ToString
  parent: Discord.Rest.RestGuildChannel
  name: ToString()
  nameWithType: RestGuildChannel.ToString()
  fullName: Discord.Rest.RestGuildChannel.ToString()
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.ToString
    name: ToString
    nameWithType: RestGuildChannel.ToString
    fullName: Discord.Rest.RestGuildChannel.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.ToString
    name: ToString
    nameWithType: RestGuildChannel.ToString
    fullName: Discord.Rest.RestGuildChannel.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#Guild
  commentId: P:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#Guild
  parent: Discord.Rest.RestGuildChannel
  name: IGuildChannel.Guild
  nameWithType: RestGuildChannel.IGuildChannel.Guild
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.Guild
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.Guild
  name.vb: Discord.IGuildChannel.Guild
- uid: Discord.Rest.RestChannel.CreatedAt
  commentId: P:Discord.Rest.RestChannel.CreatedAt
  parent: Discord.Rest.RestChannel
  name: CreatedAt
  nameWithType: RestChannel.CreatedAt
  fullName: Discord.Rest.RestChannel.CreatedAt
- uid: Discord.Rest.RestEntity{System.UInt64}.Id
  commentId: P:Discord.Rest.RestEntity{System.UInt64}.Id
  parent: Discord.Rest.RestEntity{System.UInt64}
  definition: Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<UInt64>.Id
  fullName: Discord.Rest.RestEntity<System.UInt64>.Id
  nameWithType.vb: RestEntity(Of UInt64).Id
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64).Id
- uid: Discord.Rest.RestEntity`1
  commentId: T:Discord.Rest.RestEntity`1
  name: RestEntity<T>
  nameWithType: RestEntity<T>
  fullName: Discord.Rest.RestEntity<T>
  nameWithType.vb: RestEntity(Of T)
  fullName.vb: Discord.Rest.RestEntity(Of T)
  name.vb: RestEntity(Of T)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.Rest.RestEntity`1.Id
  commentId: P:Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<T>.Id
  fullName: Discord.Rest.RestEntity<T>.Id
  nameWithType.vb: RestEntity(Of T).Id
  fullName.vb: Discord.Rest.RestEntity(Of T).Id
- uid: Discord.Rest.RestTextChannel.Topic*
  commentId: Overload:Discord.Rest.RestTextChannel.Topic
  name: Topic
  nameWithType: RestTextChannel.Topic
  fullName: Discord.Rest.RestTextChannel.Topic
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.Rest.RestTextChannel.SlowModeInterval*
  commentId: Overload:Discord.Rest.RestTextChannel.SlowModeInterval
  name: SlowModeInterval
  nameWithType: RestTextChannel.SlowModeInterval
  fullName: Discord.Rest.RestTextChannel.SlowModeInterval
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Discord.Rest.RestTextChannel.CategoryId*
  commentId: Overload:Discord.Rest.RestTextChannel.CategoryId
  name: CategoryId
  nameWithType: RestTextChannel.CategoryId
  fullName: Discord.Rest.RestTextChannel.CategoryId
- uid: System.Nullable{System.UInt64}
  commentId: '!:System.Nullable{System.UInt64}'
  definition: System.Nullable`1
  name: Nullable<UInt64>
  nameWithType: Nullable<UInt64>
  fullName: System.Nullable<System.UInt64>
  nameWithType.vb: Nullable(Of UInt64)
  fullName.vb: System.Nullable(Of System.UInt64)
  name.vb: Nullable(Of UInt64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.Mention*
  commentId: Overload:Discord.Rest.RestTextChannel.Mention
  name: Mention
  nameWithType: RestTextChannel.Mention
  fullName: Discord.Rest.RestTextChannel.Mention
- uid: Discord.Rest.RestTextChannel.IsNsfw*
  commentId: Overload:Discord.Rest.RestTextChannel.IsNsfw
  name: IsNsfw
  nameWithType: RestTextChannel.IsNsfw
  fullName: Discord.Rest.RestTextChannel.IsNsfw
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.Rest.RestTextChannel.ModifyAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.ModifyAsync
  name: ModifyAsync
  nameWithType: RestTextChannel.ModifyAsync
  fullName: Discord.Rest.RestTextChannel.ModifyAsync
- uid: Action{Discord.TextChannelProperties}
  commentId: '!:Action{Discord.TextChannelProperties}'
  definition: Action`1
  name: Action<TextChannelProperties>
  nameWithType: Action<TextChannelProperties>
  fullName: Action<Discord.TextChannelProperties>
  nameWithType.vb: Action(Of TextChannelProperties)
  fullName.vb: Action(Of Discord.TextChannelProperties)
  name.vb: Action(Of TextChannelProperties)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.TextChannelProperties
    name: TextChannelProperties
    nameWithType: TextChannelProperties
    fullName: Discord.TextChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.TextChannelProperties
    name: TextChannelProperties
    nameWithType: TextChannelProperties
    fullName: Discord.TextChannelProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.GetUserAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.GetUserAsync
  name: GetUserAsync
  nameWithType: RestTextChannel.GetUserAsync
  fullName: Discord.Rest.RestTextChannel.GetUserAsync
- uid: System.UInt64
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Task{Discord.Rest.RestGuildUser}
  commentId: '!:Task{Discord.Rest.RestGuildUser}'
  definition: Task`1
  name: Task<RestGuildUser>
  nameWithType: Task<RestGuildUser>
  fullName: Task<Discord.Rest.RestGuildUser>
  nameWithType.vb: Task(Of RestGuildUser)
  fullName.vb: Task(Of Discord.Rest.RestGuildUser)
  name.vb: Task(Of RestGuildUser)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestGuildUser
    name: RestGuildUser
    nameWithType: RestGuildUser
    fullName: Discord.Rest.RestGuildUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestGuildUser
    name: RestGuildUser
    nameWithType: RestGuildUser
    fullName: Discord.Rest.RestGuildUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.AsyncEnumerableExtensions.FlattenAsync``1(IAsyncEnumerable{`0})
  commentId: M:Discord.AsyncEnumerableExtensions.FlattenAsync``1(IAsyncEnumerable{`0})
  isExternal: true
- uid: Discord.Rest.RestTextChannel.GetUsersAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.GetUsersAsync
  name: GetUsersAsync
  nameWithType: RestTextChannel.GetUsersAsync
  fullName: Discord.Rest.RestTextChannel.GetUsersAsync
- uid: IAsyncEnumerable{IReadOnlyCollection{Discord.Rest.RestGuildUser}}
  commentId: '!:IAsyncEnumerable{IReadOnlyCollection{Discord.Rest.RestGuildUser}}'
  definition: IAsyncEnumerable`1
  name: IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>>
  fullName: IAsyncEnumerable<IReadOnlyCollection<Discord.Rest.RestGuildUser>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of RestGuildUser))
  fullName.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of Discord.Rest.RestGuildUser))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of RestGuildUser))
  spec.csharp:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestGuildUser
    name: RestGuildUser
    nameWithType: RestGuildUser
    fullName: Discord.Rest.RestGuildUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestGuildUser
    name: RestGuildUser
    nameWithType: RestGuildUser
    fullName: Discord.Rest.RestGuildUser
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IAsyncEnumerable`1
  isExternal: true
  name: IAsyncEnumerable<>
  nameWithType: IAsyncEnumerable<>
  fullName: IAsyncEnumerable<>
  nameWithType.vb: IAsyncEnumerable(Of )
  fullName.vb: IAsyncEnumerable(Of )
  name.vb: IAsyncEnumerable(Of )
  spec.csharp:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.GetMessageAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.GetMessageAsync
  name: GetMessageAsync
  nameWithType: RestTextChannel.GetMessageAsync
  fullName: Discord.Rest.RestTextChannel.GetMessageAsync
- uid: Discord.Rest.IRestMessageChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.Rest.IRestMessageChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.Rest.IRestMessageChannel
  isExternal: true
  name: GetMessageAsync(UInt64, RequestOptions)
  nameWithType: IRestMessageChannel.GetMessageAsync(UInt64, RequestOptions)
  fullName: Discord.Rest.IRestMessageChannel.GetMessageAsync(System.UInt64, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.IRestMessageChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
    name: GetMessageAsync
    nameWithType: IRestMessageChannel.GetMessageAsync
    fullName: Discord.Rest.IRestMessageChannel.GetMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.IRestMessageChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
    name: GetMessageAsync
    nameWithType: IRestMessageChannel.GetMessageAsync
    fullName: Discord.Rest.IRestMessageChannel.GetMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{Discord.Rest.RestMessage}
  commentId: '!:Task{Discord.Rest.RestMessage}'
  definition: Task`1
  name: Task<RestMessage>
  nameWithType: Task<RestMessage>
  fullName: Task<Discord.Rest.RestMessage>
  nameWithType.vb: Task(Of RestMessage)
  fullName.vb: Task(Of Discord.Rest.RestMessage)
  name.vb: Task(Of RestMessage)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestMessage
    name: RestMessage
    nameWithType: RestMessage
    fullName: Discord.Rest.RestMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestMessage
    name: RestMessage
    nameWithType: RestMessage
    fullName: Discord.Rest.RestMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.GetMessagesAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.GetMessagesAsync
  name: GetMessagesAsync
  nameWithType: RestTextChannel.GetMessagesAsync
  fullName: Discord.Rest.RestTextChannel.GetMessagesAsync
- uid: Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
  commentId: M:Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
  parent: Discord.Rest.IRestMessageChannel
  isExternal: true
  name: GetMessagesAsync(Int32, RequestOptions)
  nameWithType: IRestMessageChannel.GetMessagesAsync(Int32, RequestOptions)
  fullName: Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.Int32, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IRestMessageChannel.GetMessagesAsync
    fullName: Discord.Rest.IRestMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IRestMessageChannel.GetMessagesAsync
    fullName: Discord.Rest.IRestMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: IAsyncEnumerable{IReadOnlyCollection{Discord.Rest.RestMessage}}
  commentId: '!:IAsyncEnumerable{IReadOnlyCollection{Discord.Rest.RestMessage}}'
  definition: IAsyncEnumerable`1
  name: IAsyncEnumerable<IReadOnlyCollection<RestMessage>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<RestMessage>>
  fullName: IAsyncEnumerable<IReadOnlyCollection<Discord.Rest.RestMessage>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of RestMessage))
  fullName.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of Discord.Rest.RestMessage))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of RestMessage))
  spec.csharp:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestMessage
    name: RestMessage
    nameWithType: RestMessage
    fullName: Discord.Rest.RestMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestMessage
    name: RestMessage
    nameWithType: RestMessage
    fullName: Discord.Rest.RestMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
  commentId: M:Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
  parent: Discord.Rest.IRestMessageChannel
  isExternal: true
  name: GetMessagesAsync(UInt64, Direction, Int32, RequestOptions)
  nameWithType: IRestMessageChannel.GetMessagesAsync(UInt64, Direction, Int32, RequestOptions)
  fullName: Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.UInt64, Discord.Direction, System.Int32, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IRestMessageChannel.GetMessagesAsync
    fullName: Discord.Rest.IRestMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IRestMessageChannel.GetMessagesAsync
    fullName: Discord.Rest.IRestMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Direction
  commentId: T:Discord.Direction
  parent: Discord
  name: Direction
  nameWithType: Direction
  fullName: Discord.Direction
- uid: Discord.Rest.IRestMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
  commentId: M:Discord.Rest.IRestMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
  parent: Discord.Rest.IRestMessageChannel
  isExternal: true
  name: GetMessagesAsync(IMessage, Direction, Int32, RequestOptions)
  nameWithType: IRestMessageChannel.GetMessagesAsync(IMessage, Direction, Int32, RequestOptions)
  fullName: Discord.Rest.IRestMessageChannel.GetMessagesAsync(Discord.IMessage, Discord.Direction, System.Int32, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.IRestMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IRestMessageChannel.GetMessagesAsync
    fullName: Discord.Rest.IRestMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.IRestMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IRestMessageChannel.GetMessagesAsync
    fullName: Discord.Rest.IRestMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessage
  commentId: T:Discord.IMessage
  parent: Discord
  name: IMessage
  nameWithType: IMessage
  fullName: Discord.IMessage
- uid: Discord.Rest.RestTextChannel.GetPinnedMessagesAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.GetPinnedMessagesAsync
  name: GetPinnedMessagesAsync
  nameWithType: RestTextChannel.GetPinnedMessagesAsync
  fullName: Discord.Rest.RestTextChannel.GetPinnedMessagesAsync
- uid: Discord.Rest.IRestMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.IRestMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  parent: Discord.Rest.IRestMessageChannel
  name: GetPinnedMessagesAsync(RequestOptions)
  nameWithType: IRestMessageChannel.GetPinnedMessagesAsync(RequestOptions)
  fullName: Discord.Rest.IRestMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.IRestMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
    name: GetPinnedMessagesAsync
    nameWithType: IRestMessageChannel.GetPinnedMessagesAsync
    fullName: Discord.Rest.IRestMessageChannel.GetPinnedMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.IRestMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
    name: GetPinnedMessagesAsync
    nameWithType: IRestMessageChannel.GetPinnedMessagesAsync
    fullName: Discord.Rest.IRestMessageChannel.GetPinnedMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{IReadOnlyCollection{Discord.Rest.RestMessage}}
  commentId: '!:Task{IReadOnlyCollection{Discord.Rest.RestMessage}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<RestMessage>>
  nameWithType: Task<IReadOnlyCollection<RestMessage>>
  fullName: Task<IReadOnlyCollection<Discord.Rest.RestMessage>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestMessage))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.Rest.RestMessage))
  name.vb: Task(Of IReadOnlyCollection(Of RestMessage))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestMessage
    name: RestMessage
    nameWithType: RestMessage
    fullName: Discord.Rest.RestMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestMessage
    name: RestMessage
    nameWithType: RestMessage
    fullName: Discord.Rest.RestMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.DiscordConfig.MaxMessageSize
  commentId: F:Discord.DiscordConfig.MaxMessageSize
  parent: Discord.DiscordConfig
  name: MaxMessageSize
  nameWithType: DiscordConfig.MaxMessageSize
  fullName: Discord.DiscordConfig.MaxMessageSize
- uid: Discord.Rest.RestTextChannel.SendMessageAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.SendMessageAsync
  name: SendMessageAsync
  nameWithType: RestTextChannel.SendMessageAsync
  fullName: Discord.Rest.RestTextChannel.SendMessageAsync
- uid: Discord.Rest.IRestMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  commentId: M:Discord.Rest.IRestMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  parent: Discord.Rest.IRestMessageChannel
  isExternal: true
  name: SendMessageAsync(String, Boolean, Embed, RequestOptions)
  nameWithType: IRestMessageChannel.SendMessageAsync(String, Boolean, Embed, RequestOptions)
  fullName: Discord.Rest.IRestMessageChannel.SendMessageAsync(System.String, System.Boolean, Discord.Embed, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.IRestMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
    name: SendMessageAsync
    nameWithType: IRestMessageChannel.SendMessageAsync
    fullName: Discord.Rest.IRestMessageChannel.SendMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.IRestMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
    name: SendMessageAsync
    nameWithType: IRestMessageChannel.SendMessageAsync
    fullName: Discord.Rest.IRestMessageChannel.SendMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Embed
  commentId: T:Discord.Embed
  parent: Discord
  name: Embed
  nameWithType: Embed
  fullName: Discord.Embed
- uid: Task{Discord.Rest.RestUserMessage}
  commentId: '!:Task{Discord.Rest.RestUserMessage}'
  definition: Task`1
  name: Task<RestUserMessage>
  nameWithType: Task<RestUserMessage>
  fullName: Task<Discord.Rest.RestUserMessage>
  nameWithType.vb: Task(Of RestUserMessage)
  fullName.vb: Task(Of Discord.Rest.RestUserMessage)
  name.vb: Task(Of RestUserMessage)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestUserMessage
    name: RestUserMessage
    nameWithType: RestUserMessage
    fullName: Discord.Rest.RestUserMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestUserMessage
    name: RestUserMessage
    nameWithType: RestUserMessage
    fullName: Discord.Rest.RestUserMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.DiscordConfig
  commentId: T:Discord.DiscordConfig
  parent: Discord
  name: DiscordConfig
  nameWithType: DiscordConfig
  fullName: Discord.DiscordConfig
- uid: Discord.Rest.RestTextChannel.SendFileAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.SendFileAsync
  name: SendFileAsync
  nameWithType: RestTextChannel.SendFileAsync
  fullName: Discord.Rest.RestTextChannel.SendFileAsync
- uid: Discord.Rest.IRestMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.Rest.IRestMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.Rest.IRestMessageChannel
  isExternal: true
  name: SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: IRestMessageChannel.SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.Rest.IRestMessageChannel.SendFileAsync(System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  spec.csharp:
  - uid: Discord.Rest.IRestMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: IRestMessageChannel.SendFileAsync
    fullName: Discord.Rest.IRestMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.IRestMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: IRestMessageChannel.SendFileAsync
    fullName: Discord.Rest.IRestMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.IRestMessageChannel.SendFileAsync(Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.Rest.IRestMessageChannel.SendFileAsync(Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.Rest.IRestMessageChannel
  isExternal: true
  name: SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: IRestMessageChannel.SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.Rest.IRestMessageChannel.SendFileAsync(Stream, System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  spec.csharp:
  - uid: Discord.Rest.IRestMessageChannel.SendFileAsync(Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: IRestMessageChannel.SendFileAsync
    fullName: Discord.Rest.IRestMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Stream
    name: Stream
    nameWithType: Stream
    fullName: Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.IRestMessageChannel.SendFileAsync(Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: IRestMessageChannel.SendFileAsync
    fullName: Discord.Rest.IRestMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Stream
    name: Stream
    nameWithType: Stream
    fullName: Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Stream
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: Stream
- uid: Discord.Rest.RestTextChannel.DeleteMessageAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.DeleteMessageAsync
  name: DeleteMessageAsync
  nameWithType: RestTextChannel.DeleteMessageAsync
  fullName: Discord.Rest.RestTextChannel.DeleteMessageAsync
- uid: Discord.Rest.RestTextChannel.DeleteMessagesAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.DeleteMessagesAsync
  name: DeleteMessagesAsync
  nameWithType: RestTextChannel.DeleteMessagesAsync
  fullName: Discord.Rest.RestTextChannel.DeleteMessagesAsync
- uid: IEnumerable{Discord.IMessage}
  commentId: '!:IEnumerable{Discord.IMessage}'
  definition: IEnumerable`1
  name: IEnumerable<IMessage>
  nameWithType: IEnumerable<IMessage>
  fullName: IEnumerable<Discord.IMessage>
  nameWithType.vb: IEnumerable(Of IMessage)
  fullName.vb: IEnumerable(Of Discord.IMessage)
  name.vb: IEnumerable(Of IMessage)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable{System.UInt64}
  commentId: '!:IEnumerable{System.UInt64}'
  definition: IEnumerable`1
  name: IEnumerable<UInt64>
  nameWithType: IEnumerable<UInt64>
  fullName: IEnumerable<System.UInt64>
  nameWithType.vb: IEnumerable(Of UInt64)
  fullName.vb: IEnumerable(Of System.UInt64)
  name.vb: IEnumerable(Of UInt64)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.TriggerTypingAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.TriggerTypingAsync
  name: TriggerTypingAsync
  nameWithType: RestTextChannel.TriggerTypingAsync
  fullName: Discord.Rest.RestTextChannel.TriggerTypingAsync
- uid: Discord.Rest.RestTextChannel.EnterTypingState*
  commentId: Overload:Discord.Rest.RestTextChannel.EnterTypingState
  name: EnterTypingState
  nameWithType: RestTextChannel.EnterTypingState
  fullName: Discord.Rest.RestTextChannel.EnterTypingState
- uid: IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: IDisposable
- uid: Discord.Rest.RestTextChannel.CreateWebhookAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.CreateWebhookAsync
  name: CreateWebhookAsync
  nameWithType: RestTextChannel.CreateWebhookAsync
  fullName: Discord.Rest.RestTextChannel.CreateWebhookAsync
- uid: Task{Discord.Rest.RestWebhook}
  commentId: '!:Task{Discord.Rest.RestWebhook}'
  definition: Task`1
  name: Task<RestWebhook>
  nameWithType: Task<RestWebhook>
  fullName: Task<Discord.Rest.RestWebhook>
  nameWithType.vb: Task(Of RestWebhook)
  fullName.vb: Task(Of Discord.Rest.RestWebhook)
  name.vb: Task(Of RestWebhook)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestWebhook
    name: RestWebhook
    nameWithType: RestWebhook
    fullName: Discord.Rest.RestWebhook
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestWebhook
    name: RestWebhook
    nameWithType: RestWebhook
    fullName: Discord.Rest.RestWebhook
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.GetWebhookAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.GetWebhookAsync
  name: GetWebhookAsync
  nameWithType: RestTextChannel.GetWebhookAsync
  fullName: Discord.Rest.RestTextChannel.GetWebhookAsync
- uid: Discord.Rest.RestTextChannel.GetWebhooksAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.GetWebhooksAsync
  name: GetWebhooksAsync
  nameWithType: RestTextChannel.GetWebhooksAsync
  fullName: Discord.Rest.RestTextChannel.GetWebhooksAsync
- uid: Task{IReadOnlyCollection{Discord.Rest.RestWebhook}}
  commentId: '!:Task{IReadOnlyCollection{Discord.Rest.RestWebhook}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<RestWebhook>>
  nameWithType: Task<IReadOnlyCollection<RestWebhook>>
  fullName: Task<IReadOnlyCollection<Discord.Rest.RestWebhook>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestWebhook))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.Rest.RestWebhook))
  name.vb: Task(Of IReadOnlyCollection(Of RestWebhook))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestWebhook
    name: RestWebhook
    nameWithType: RestWebhook
    fullName: Discord.Rest.RestWebhook
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestWebhook
    name: RestWebhook
    nameWithType: RestWebhook
    fullName: Discord.Rest.RestWebhook
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.GetCategoryAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.GetCategoryAsync
  name: GetCategoryAsync
  nameWithType: RestTextChannel.GetCategoryAsync
  fullName: Discord.Rest.RestTextChannel.GetCategoryAsync
- uid: Task{Discord.ICategoryChannel}
  commentId: '!:Task{Discord.ICategoryChannel}'
  definition: Task`1
  name: Task<ICategoryChannel>
  nameWithType: Task<ICategoryChannel>
  fullName: Task<Discord.ICategoryChannel>
  nameWithType.vb: Task(Of ICategoryChannel)
  fullName.vb: Task(Of Discord.ICategoryChannel)
  name.vb: Task(Of ICategoryChannel)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ICategoryChannel
    name: ICategoryChannel
    nameWithType: ICategoryChannel
    fullName: Discord.ICategoryChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ICategoryChannel
    name: ICategoryChannel
    nameWithType: ICategoryChannel
    fullName: Discord.ICategoryChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.SyncPermissionsAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.SyncPermissionsAsync
  name: SyncPermissionsAsync
  nameWithType: RestTextChannel.SyncPermissionsAsync
  fullName: Discord.Rest.RestTextChannel.SyncPermissionsAsync
- uid: Discord.Rest.RestTextChannel.CreateInviteAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.CreateInviteAsync
  name: CreateInviteAsync
  nameWithType: RestTextChannel.CreateInviteAsync
  fullName: Discord.Rest.RestTextChannel.CreateInviteAsync
- uid: System.Nullable{System.Int32}
  commentId: '!:System.Nullable{System.Int32}'
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{Discord.IInviteMetadata}
  commentId: '!:Task{Discord.IInviteMetadata}'
  definition: Task`1
  name: Task<IInviteMetadata>
  nameWithType: Task<IInviteMetadata>
  fullName: Task<Discord.IInviteMetadata>
  nameWithType.vb: Task(Of IInviteMetadata)
  fullName.vb: Task(Of Discord.IInviteMetadata)
  name.vb: Task(Of IInviteMetadata)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IInviteMetadata
    name: IInviteMetadata
    nameWithType: IInviteMetadata
    fullName: Discord.IInviteMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IInviteMetadata
    name: IInviteMetadata
    nameWithType: IInviteMetadata
    fullName: Discord.IInviteMetadata
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.GetInvitesAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.GetInvitesAsync
  name: GetInvitesAsync
  nameWithType: RestTextChannel.GetInvitesAsync
  fullName: Discord.Rest.RestTextChannel.GetInvitesAsync
- uid: Task{IReadOnlyCollection{Discord.IInviteMetadata}}
  commentId: '!:Task{IReadOnlyCollection{Discord.IInviteMetadata}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<IInviteMetadata>>
  nameWithType: Task<IReadOnlyCollection<IInviteMetadata>>
  fullName: Task<IReadOnlyCollection<Discord.IInviteMetadata>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IInviteMetadata))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.IInviteMetadata))
  name.vb: Task(Of IReadOnlyCollection(Of IInviteMetadata))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IInviteMetadata
    name: IInviteMetadata
    nameWithType: IInviteMetadata
    fullName: Discord.IInviteMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IInviteMetadata
    name: IInviteMetadata
    nameWithType: IInviteMetadata
    fullName: Discord.IInviteMetadata
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
