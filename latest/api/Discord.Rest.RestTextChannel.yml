### YamlMime:ManagedReference
items:
- uid: Discord.Rest.RestTextChannel
  commentId: T:Discord.Rest.RestTextChannel
  id: RestTextChannel
  parent: Discord.Rest
  children:
  - Discord.Rest.RestTextChannel.CategoryId
  - Discord.Rest.RestTextChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{Discord.IMessage},Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{System.UInt64},Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.Discord#IGuildChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.Discord#IGuildChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetPinnedMessagesAsync(Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.Discord#IMessageChannel#SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  - Discord.Rest.RestTextChannel.Discord#IMessageChannel#SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  - Discord.Rest.RestTextChannel.Discord#IMessageChannel#SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.Discord#INestedChannel#GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.Discord#ITextChannel#CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.Discord#ITextChannel#GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.Discord#ITextChannel#GetWebhooksAsync(Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.EnterTypingState(Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.GetCategoryAsync(Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.GetInvitesAsync(Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.GetUserAsync(System.UInt64,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.GetUsersAsync(Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.GetWebhooksAsync(Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.IsNsfw
  - Discord.Rest.RestTextChannel.Mention
  - Discord.Rest.RestTextChannel.ModifyAsync(System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  - Discord.Rest.RestTextChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  - Discord.Rest.RestTextChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.SlowModeInterval
  - Discord.Rest.RestTextChannel.SyncPermissionsAsync(Discord.RequestOptions)
  - Discord.Rest.RestTextChannel.Topic
  - Discord.Rest.RestTextChannel.TriggerTypingAsync(Discord.RequestOptions)
  langs:
  - csharp
  - vb
  name: RestTextChannel
  nameWithType: RestTextChannel
  fullName: Discord.Rest.RestTextChannel
  type: Class
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RestTextChannel
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 13
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nRepresents a REST-based channel in a guild that can send and receive messages.\n"
  example: []
  syntax:
    content: 'public class RestTextChannel : RestGuildChannel, IUpdateable, IRestMessageChannel, ITextChannel, IMessageChannel, IMentionable, INestedChannel, IGuildChannel, IChannel, ISnowflakeEntity, IEntity<ulong>, IDeletable'
    content.vb: >-
      Public Class RestTextChannel
          Inherits RestGuildChannel
          Implements IUpdateable, IRestMessageChannel, ITextChannel, IMessageChannel, IMentionable, INestedChannel, IGuildChannel, IChannel, ISnowflakeEntity, IEntity(Of ULong), IDeletable
  inheritance:
  - System.Object
  - Discord.Rest.RestEntity{System.UInt64}
  - Discord.Rest.RestChannel
  - Discord.Rest.RestGuildChannel
  derivedClasses:
  - Discord.Rest.RestNewsChannel
  implements:
  - Discord.IUpdateable
  - Discord.Rest.IRestMessageChannel
  - Discord.ITextChannel
  - Discord.IMessageChannel
  - Discord.IMentionable
  - Discord.INestedChannel
  - Discord.IGuildChannel
  - Discord.IChannel
  - Discord.ISnowflakeEntity
  - Discord.IEntity{System.UInt64}
  - Discord.IDeletable
  inheritedMembers:
  - Discord.Rest.RestGuildChannel.PermissionOverwrites
  - Discord.Rest.RestGuildChannel.Name
  - Discord.Rest.RestGuildChannel.Position
  - Discord.Rest.RestGuildChannel.GuildId
  - Discord.Rest.RestGuildChannel.UpdateAsync(Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.ModifyAsync(System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.DeleteAsync(Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IUser)
  - Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IRole)
  - Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.ToString
  - Discord.Rest.RestGuildChannel.Discord#IGuildChannel#Guild
  - Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IRole)
  - Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IUser)
  - Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  - Discord.Rest.RestChannel.CreatedAt
  - Discord.Rest.RestChannel.Discord#IChannel#Name
  - Discord.Rest.RestEntity{System.UInt64}.Id
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.Rest.RestTextChannel.Topic
  commentId: P:Discord.Rest.RestTextChannel.Topic
  id: Topic
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: Topic
  nameWithType: RestTextChannel.Topic
  fullName: Discord.Rest.RestTextChannel.Topic
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Topic
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 17
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the current topic for this text channel.\n"
  example: []
  syntax:
    content: public string Topic { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA string representing the topic set in the channel; <code>null</code> if none is set.\n"
    content.vb: Public ReadOnly Property Topic As String
  overload: Discord.Rest.RestTextChannel.Topic*
  implements:
  - Discord.ITextChannel.Topic
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestTextChannel.SlowModeInterval
  commentId: P:Discord.Rest.RestTextChannel.SlowModeInterval
  id: SlowModeInterval
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: SlowModeInterval
  nameWithType: RestTextChannel.SlowModeInterval
  fullName: Discord.Rest.RestTextChannel.SlowModeInterval
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SlowModeInterval
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 19
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the current slow-mode delay for this channel.\n"
  example: []
  syntax:
    content: public virtual int SlowModeInterval { get; }
    parameters: []
    return:
      type: System.Int32
      description: "\nAn <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> representing the time in seconds required before the user can send another\nmessage; <code>0</code> if disabled.\n"
    content.vb: Public Overridable ReadOnly Property SlowModeInterval As Integer
  overload: Discord.Rest.RestTextChannel.SlowModeInterval*
  implements:
  - Discord.ITextChannel.SlowModeInterval
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.Rest.RestTextChannel.CategoryId
  commentId: P:Discord.Rest.RestTextChannel.CategoryId
  id: CategoryId
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: CategoryId
  nameWithType: RestTextChannel.CategoryId
  fullName: Discord.Rest.RestTextChannel.CategoryId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CategoryId
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 21
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the parent (category) ID of this channel in the guild&apos;s channel list.\n"
  example: []
  syntax:
    content: public ulong? CategoryId { get; }
    parameters: []
    return:
      type: System.Nullable{System.UInt64}
      description: "\nA <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> representing the snowflake identifier of the parent of this channel; \n<code>null</code> if none is set.\n"
    content.vb: Public ReadOnly Property CategoryId As ULong?
  overload: Discord.Rest.RestTextChannel.CategoryId*
  implements:
  - Discord.INestedChannel.CategoryId
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestTextChannel.Mention
  commentId: P:Discord.Rest.RestTextChannel.Mention
  id: Mention
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: Mention
  nameWithType: RestTextChannel.Mention
  fullName: Discord.Rest.RestTextChannel.Mention
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Mention
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 24
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nReturns a special string used to mention this object.\n"
  example: []
  syntax:
    content: public string Mention { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA string that is recognized by Discord as a mention (e.g. &lt;@168693960628371456>).\n"
    content.vb: Public ReadOnly Property Mention As String
  overload: Discord.Rest.RestTextChannel.Mention*
  implements:
  - Discord.IMentionable.Mention
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestTextChannel.IsNsfw
  commentId: P:Discord.Rest.RestTextChannel.IsNsfw
  id: IsNsfw
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: IsNsfw
  nameWithType: RestTextChannel.IsNsfw
  fullName: Discord.Rest.RestTextChannel.IsNsfw
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsNsfw
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 26
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a value that indicates whether the channel is NSFW.\n"
  example: []
  syntax:
    content: public bool IsNsfw { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the channel has the NSFW flag enabled; otherwise <code>false</code>.\n"
    content.vb: Public ReadOnly Property IsNsfw As Boolean
  overload: Discord.Rest.RestTextChannel.IsNsfw*
  implements:
  - Discord.ITextChannel.IsNsfw
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestTextChannel.ModifyAsync(System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.ModifyAsync(System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
  id: ModifyAsync(System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: ModifyAsync(Action<TextChannelProperties>, RequestOptions)
  nameWithType: RestTextChannel.ModifyAsync(Action<TextChannelProperties>, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.ModifyAsync(System.Action<Discord.TextChannelProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ModifyAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 49
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nModifies this text channel.\n"
  example: []
  syntax:
    content: public Task ModifyAsync(Action<TextChannelProperties> func, RequestOptions options = null)
    parameters:
    - id: func
      type: System.Action{Discord.TextChannelProperties}
      description: The delegate containing the properties to modify the channel with.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous modification operation.\n"
    content.vb: Public Function ModifyAsync(func As Action(Of TextChannelProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestTextChannel.ModifyAsync*
  seealso:
  - linkId: Discord.TextChannelProperties
    commentId: T:Discord.TextChannelProperties
  implements:
  - Discord.ITextChannel.ModifyAsync(System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
  nameWithType.vb: RestTextChannel.ModifyAsync(Action(Of TextChannelProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestTextChannel.ModifyAsync(System.Action(Of Discord.TextChannelProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of TextChannelProperties), RequestOptions)
- uid: Discord.Rest.RestTextChannel.GetUserAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.GetUserAsync(System.UInt64,Discord.RequestOptions)
  id: GetUserAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: GetUserAsync(UInt64, RequestOptions)
  nameWithType: RestTextChannel.GetUserAsync(UInt64, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.GetUserAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetUserAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 67
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a user in this channel.\n"
  example: []
  syntax:
    content: public Task<RestGuildUser> GetUserAsync(ulong id, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the user.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestGuildUser}
      description: "\nA task representing the asynchronous get operation. The task result contains a guild user object that\nrepresents the user; <code>null</code> if none is found.\n"
    content.vb: Public Function GetUserAsync(id As ULong, options As RequestOptions = Nothing) As Task(Of RestGuildUser)
  overload: Discord.Rest.RestTextChannel.GetUserAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nResolving permissions requires the parent guild to be downloaded.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.GetUsersAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.GetUsersAsync(Discord.RequestOptions)
  id: GetUsersAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: GetUsersAsync(RequestOptions)
  nameWithType: RestTextChannel.GetUsersAsync(RequestOptions)
  fullName: Discord.Rest.RestTextChannel.GetUsersAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetUsersAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 82
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of users that are able to view the channel.\n"
  example: []
  syntax:
    content: public IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> GetUsersAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestGuildUser}}
      description: "\nA paged collection containing a collection of guild users that can access this channel. Flattening the\npaginated response into a collection of users with \n<xref href=\"Discord.AsyncEnumerableExtensions.FlattenAsync%60%601(System.Collections.Generic.IAsyncEnumerable%7bSystem.Collections.Generic.IEnumerable%7b%60%600%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref> is required if you wish to access the users.\n"
    content.vb: Public Function GetUsersAsync(options As RequestOptions = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of RestGuildUser))
  overload: Discord.Rest.RestTextChannel.GetUsersAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nResolving permissions requires the parent guild to be downloaded.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
  id: GetMessageAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: GetMessageAsync(UInt64, RequestOptions)
  nameWithType: RestTextChannel.GetMessageAsync(UInt64, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.GetMessageAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetMessageAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 86
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a message from this message channel.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IMessageChannel.GetMessageAsync(System.UInt64%2cDiscord.CacheMode%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public Task<RestMessage> GetMessageAsync(ulong id, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the message.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestMessage}
      description: "\nA task that represents an asynchronous get operation for retrieving the message. The task result contains\nthe retrieved message; <code>null</code> if no message is found with the specified identifier.\n"
    content.vb: Public Function GetMessageAsync(id As ULong, options As RequestOptions = Nothing) As Task(Of RestMessage)
  overload: Discord.Rest.RestTextChannel.GetMessageAsync*
  implements:
  - Discord.Rest.IRestMessageChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
  id: GetMessagesAsync(System.Int32,Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: GetMessagesAsync(Int32, RequestOptions)
  nameWithType: RestTextChannel.GetMessagesAsync(Int32, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.GetMessagesAsync(System.Int32, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetMessagesAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 89
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the last N messages from this message channel.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IMessageChannel.GetMessagesAsync(System.Int32%2cDiscord.CacheMode%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(int limit = 100, RequestOptions options = null)
    parameters:
    - id: limit
      type: System.Int32
      description: The numbers of message to be gotten from.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestMessage}}
      description: "\nPaged collection of messages.\n"
    content.vb: Public Function GetMessagesAsync(limit As Integer = 100, options As RequestOptions = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of RestMessage))
  overload: Discord.Rest.RestTextChannel.GetMessagesAsync*
  implements:
  - Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
  id: GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: GetMessagesAsync(UInt64, Direction, Int32, RequestOptions)
  nameWithType: RestTextChannel.GetMessagesAsync(UInt64, Direction, Int32, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.GetMessagesAsync(System.UInt64, Discord.Direction, System.Int32, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetMessagesAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 92
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of messages in this channel.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IMessageChannel.GetMessagesAsync(System.UInt64%2cDiscord.Direction%2cSystem.Int32%2cDiscord.CacheMode%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(ulong fromMessageId, Direction dir, int limit = 100, RequestOptions options = null)
    parameters:
    - id: fromMessageId
      type: System.UInt64
      description: The ID of the starting message to get the messages from.
    - id: dir
      type: Discord.Direction
      description: The direction of the messages to be gotten from.
    - id: limit
      type: System.Int32
      description: The numbers of message to be gotten from.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestMessage}}
      description: "\nPaged collection of messages.\n"
    content.vb: Public Function GetMessagesAsync(fromMessageId As ULong, dir As Direction, limit As Integer = 100, options As RequestOptions = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of RestMessage))
  overload: Discord.Rest.RestTextChannel.GetMessagesAsync*
  implements:
  - Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
  id: GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: GetMessagesAsync(IMessage, Direction, Int32, RequestOptions)
  nameWithType: RestTextChannel.GetMessagesAsync(IMessage, Direction, Int32, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.GetMessagesAsync(Discord.IMessage, Discord.Direction, System.Int32, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetMessagesAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 95
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of messages in this channel.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage%2cDiscord.Direction%2cSystem.Int32%2cDiscord.CacheMode%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(IMessage fromMessage, Direction dir, int limit = 100, RequestOptions options = null)
    parameters:
    - id: fromMessage
      type: Discord.IMessage
      description: The starting message to get the messages from.
    - id: dir
      type: Discord.Direction
      description: The direction of the messages to be gotten from.
    - id: limit
      type: System.Int32
      description: The numbers of message to be gotten from.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestMessage}}
      description: "\nPaged collection of messages.\n"
    content.vb: Public Function GetMessagesAsync(fromMessage As IMessage, dir As Direction, limit As Integer = 100, options As RequestOptions = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of RestMessage))
  overload: Discord.Rest.RestTextChannel.GetMessagesAsync*
  implements:
  - Discord.Rest.IRestMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  id: GetPinnedMessagesAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: GetPinnedMessagesAsync(RequestOptions)
  nameWithType: RestTextChannel.GetPinnedMessagesAsync(RequestOptions)
  fullName: Discord.Rest.RestTextChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetPinnedMessagesAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 98
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of pinned messages in this channel.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<RestMessage>> GetPinnedMessagesAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestMessage}}
      description: "\nA task that represents the asynchronous get operation for retrieving pinned messages in this channel.\nThe task result contains a collection of messages found in the pinned messages.\n"
    content.vb: Public Function GetPinnedMessagesAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestMessage))
  overload: Discord.Rest.RestTextChannel.GetPinnedMessagesAsync*
  implements:
  - Discord.Rest.IRestMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  id: SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: SendMessageAsync(String, Boolean, Embed, RequestOptions)
  nameWithType: RestTextChannel.SendMessageAsync(String, Boolean, Embed, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.SendMessageAsync(System.String, System.Boolean, Discord.Embed, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SendMessageAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 103
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nSends a message to this message channel.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IMessageChannel.SendMessageAsync(System.String%2cSystem.Boolean%2cDiscord.Embed%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public Task<RestUserMessage> SendMessageAsync(string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null)
    parameters:
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Determines whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Public Function SendMessageAsync(text As String = Nothing, isTTS As Boolean = False, embed As Embed = Nothing, options As RequestOptions = Nothing) As Task(Of RestUserMessage)
  overload: Discord.Rest.RestTextChannel.SendMessageAsync*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Message content is too long, length must be less or equal to <xref href="Discord.DiscordConfig.MaxMessageSize" data-throw-if-not-resolved="false"></xref>.
  implements:
  - Discord.Rest.IRestMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.Rest.RestTextChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  id: SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: RestTextChannel.SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.Rest.RestTextChannel.SendFileAsync(System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SendFileAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 131
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nSends a file to this message channel with an optional caption.\n"
  remarks: "\nThis method follows the same behavior as described in \n<xref href=\"Discord.IMessageChannel.SendFileAsync(System.String%2cSystem.String%2cSystem.Boolean%2cDiscord.Embed%2cDiscord.RequestOptions%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>. Please visit\nits documentation for more details on this method.\n"
  example: []
  syntax:
    content: public Task<RestUserMessage> SendFileAsync(string filePath, string text, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false)
    parameters:
    - id: filePath
      type: System.String
      description: The file path of the file.
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    - id: isSpoiler
      type: System.Boolean
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Public Function SendFileAsync(filePath As String, text As String, isTTS As Boolean = False, embed As Embed = Nothing, options As RequestOptions = Nothing, isSpoiler As Boolean = False) As Task(Of RestUserMessage)
  overload: Discord.Rest.RestTextChannel.SendFileAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">filePath</code> is a zero-length string, contains only white space, or contains one or more\ninvalid characters as defined by <xref href=\"System.IO.Path.GetInvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">filePath</code> is <code>null</code>.\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\nThe specified path, file name, or both exceed the system-defined maximum length. For example, on\nWindows-based platforms, paths must be less than 248 characters, and file names must be less than 260\ncharacters.\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\nThe specified path is invalid, (for example, it is on an unmapped drive).\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">filePath</code> specified a directory.-or- The caller does not have the required permission.\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\nThe file specified in <code data-dev-comment-type=\"paramref\" class=\"paramref\">filePath</code> was not found.\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: <code data-dev-comment-type="paramref" class="paramref">filePath</code> is in an invalid format.
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: An I/O error occurred while opening the file.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Message content is too long, length must be less or equal to <xref href="Discord.DiscordConfig.MaxMessageSize" data-throw-if-not-resolved="false"></xref>.
  implements:
  - Discord.Rest.IRestMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.Rest.RestTextChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  id: SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: RestTextChannel.SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.Rest.RestTextChannel.SendFileAsync(System.IO.Stream, System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SendFileAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 136
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nSends a file to this message channel with an optional caption.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IMessageChannel.SendFileAsync(System.IO.Stream%2cSystem.String%2cSystem.String%2cSystem.Boolean%2cDiscord.Embed%2cDiscord.RequestOptions%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public Task<RestUserMessage> SendFileAsync(Stream stream, string filename, string text, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref> of the file to be sent.
    - id: filename
      type: System.String
      description: The name of the attachment.
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    - id: isSpoiler
      type: System.Boolean
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Public Function SendFileAsync(stream As Stream, filename As String, text As String, isTTS As Boolean = False, embed As Embed = Nothing, options As RequestOptions = Nothing, isSpoiler As Boolean = False) As Task(Of RestUserMessage)
  overload: Discord.Rest.RestTextChannel.SendFileAsync*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Message content is too long, length must be less or equal to <xref href="Discord.DiscordConfig.MaxMessageSize" data-throw-if-not-resolved="false"></xref>.
  implements:
  - Discord.Rest.IRestMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  id: DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: DeleteMessageAsync(UInt64, RequestOptions)
  nameWithType: RestTextChannel.DeleteMessageAsync(UInt64, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.DeleteMessageAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteMessageAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 140
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nDeletes a message.\n"
  example: []
  syntax:
    content: public Task DeleteMessageAsync(ulong messageId, RequestOptions options = null)
    parameters:
    - id: messageId
      type: System.UInt64
      description: The snowflake identifier of the message that would be removed.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous removal operation.\n"
    content.vb: Public Function DeleteMessageAsync(messageId As ULong, options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestTextChannel.DeleteMessageAsync*
  implements:
  - Discord.IMessageChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  id: DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: DeleteMessageAsync(IMessage, RequestOptions)
  nameWithType: RestTextChannel.DeleteMessageAsync(IMessage, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.DeleteMessageAsync(Discord.IMessage, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteMessageAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 143
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: 'Deletes a message based on the provided message in this channel. '
  example: []
  syntax:
    content: public Task DeleteMessageAsync(IMessage message, RequestOptions options = null)
    parameters:
    - id: message
      type: Discord.IMessage
      description: The message that would be removed.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous removal operation.\n"
    content.vb: Public Function DeleteMessageAsync(message As IMessage, options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestTextChannel.DeleteMessageAsync*
  implements:
  - Discord.IMessageChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{Discord.IMessage},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{Discord.IMessage},Discord.RequestOptions)
  id: DeleteMessagesAsync(System.Collections.Generic.IEnumerable{Discord.IMessage},Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: DeleteMessagesAsync(IEnumerable<IMessage>, RequestOptions)
  nameWithType: RestTextChannel.DeleteMessagesAsync(IEnumerable<IMessage>, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable<Discord.IMessage>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteMessagesAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 147
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nBulk-deletes multiple messages.\n"
  remarks: "\nThis method attempts to remove the messages specified in bulk.\n<div class=\"IMPORTANT\"><h5>important</h5><p>\n    Due to the limitation set by Discord, this method can only remove messages that are posted within 14 days!\n</p></div>\n"
  example: []
  syntax:
    content: public Task DeleteMessagesAsync(IEnumerable<IMessage> messages, RequestOptions options = null)
    parameters:
    - id: messages
      type: System.Collections.Generic.IEnumerable{Discord.IMessage}
      description: The messages to be bulk-deleted.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous bulk-removal operation.\n"
    content.vb: Public Function DeleteMessagesAsync(messages As IEnumerable(Of IMessage), options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestTextChannel.DeleteMessagesAsync*
  implements:
  - Discord.ITextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{Discord.IMessage},Discord.RequestOptions)
  nameWithType.vb: RestTextChannel.DeleteMessagesAsync(IEnumerable(Of IMessage), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestTextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable(Of Discord.IMessage), Discord.RequestOptions)
  name.vb: DeleteMessagesAsync(IEnumerable(Of IMessage), RequestOptions)
- uid: Discord.Rest.RestTextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{System.UInt64},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{System.UInt64},Discord.RequestOptions)
  id: DeleteMessagesAsync(System.Collections.Generic.IEnumerable{System.UInt64},Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: DeleteMessagesAsync(IEnumerable<UInt64>, RequestOptions)
  nameWithType: RestTextChannel.DeleteMessagesAsync(IEnumerable<UInt64>, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable<System.UInt64>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteMessagesAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 150
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nBulk-deletes multiple messages.\n"
  remarks: "\nThis method attempts to remove the messages specified in bulk.\n<div class=\"IMPORTANT\"><h5>important</h5><p>\n    Due to the limitation set by Discord, this method can only remove messages that are posted within 14 days!\n</p></div>\n"
  example: []
  syntax:
    content: public Task DeleteMessagesAsync(IEnumerable<ulong> messageIds, RequestOptions options = null)
    parameters:
    - id: messageIds
      type: System.Collections.Generic.IEnumerable{System.UInt64}
      description: The snowflake identifier of the messages to be bulk-deleted.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous bulk-removal operation.\n"
    content.vb: Public Function DeleteMessagesAsync(messageIds As IEnumerable(Of ULong), options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestTextChannel.DeleteMessagesAsync*
  implements:
  - Discord.ITextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{System.UInt64},Discord.RequestOptions)
  nameWithType.vb: RestTextChannel.DeleteMessagesAsync(IEnumerable(Of UInt64), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestTextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable(Of System.UInt64), Discord.RequestOptions)
  name.vb: DeleteMessagesAsync(IEnumerable(Of UInt64), RequestOptions)
- uid: Discord.Rest.RestTextChannel.TriggerTypingAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.TriggerTypingAsync(Discord.RequestOptions)
  id: TriggerTypingAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: TriggerTypingAsync(RequestOptions)
  nameWithType: RestTextChannel.TriggerTypingAsync(RequestOptions)
  fullName: Discord.Rest.RestTextChannel.TriggerTypingAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: TriggerTypingAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 154
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nBroadcasts the &quot;user is typing&quot; message to all users in this channel, lasting 10 seconds.\n"
  example: []
  syntax:
    content: public Task TriggerTypingAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous operation that triggers the broadcast.\n"
    content.vb: Public Function TriggerTypingAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestTextChannel.TriggerTypingAsync*
  implements:
  - Discord.IMessageChannel.TriggerTypingAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.EnterTypingState(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.EnterTypingState(Discord.RequestOptions)
  id: EnterTypingState(Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: EnterTypingState(RequestOptions)
  nameWithType: RestTextChannel.EnterTypingState(RequestOptions)
  fullName: Discord.Rest.RestTextChannel.EnterTypingState(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: EnterTypingState
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 157
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nContinuously broadcasts the &quot;user is typing&quot; message to all users in this channel until the returned\nobject is disposed.\n"
  example: []
  syntax:
    content: public IDisposable EnterTypingState(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.IDisposable
      description: "\nA disposable object that, upon its disposal, will stop the client from broadcasting its typing state in\nthis channel.\n"
    content.vb: Public Function EnterTypingState(options As RequestOptions = Nothing) As IDisposable
  overload: Discord.Rest.RestTextChannel.EnterTypingState*
  implements:
  - Discord.IMessageChannel.EnterTypingState(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)
  id: CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: CreateWebhookAsync(String, Stream, RequestOptions)
  nameWithType: RestTextChannel.CreateWebhookAsync(String, Stream, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.CreateWebhookAsync(System.String, System.IO.Stream, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreateWebhookAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 170
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nCreates a webhook in this text channel.\n"
  example: []
  syntax:
    content: public Task<RestWebhook> CreateWebhookAsync(string name, Stream avatar = null, RequestOptions options = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the webhook.
    - id: avatar
      type: System.IO.Stream
      description: The avatar of the webhook.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestWebhook}
      description: "\nA task that represents the asynchronous creation operation. The task result contains the newly created\nwebhook.\n"
    content.vb: Public Function CreateWebhookAsync(name As String, avatar As Stream = Nothing, options As RequestOptions = Nothing) As Task(Of RestWebhook)
  overload: Discord.Rest.RestTextChannel.CreateWebhookAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  id: GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: GetWebhookAsync(UInt64, RequestOptions)
  nameWithType: RestTextChannel.GetWebhookAsync(UInt64, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.GetWebhookAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetWebhookAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 181
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a webhook available in this text channel.\n"
  example: []
  syntax:
    content: public Task<RestWebhook> GetWebhookAsync(ulong id, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
      description: The identifier of the webhook.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestWebhook}
      description: "\nA task that represents the asynchronous get operation. The task result contains a webhook associated\nwith the identifier; <code>null</code> if the webhook is not found.\n"
    content.vb: Public Function GetWebhookAsync(id As ULong, options As RequestOptions = Nothing) As Task(Of RestWebhook)
  overload: Discord.Rest.RestTextChannel.GetWebhookAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.GetWebhooksAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.GetWebhooksAsync(Discord.RequestOptions)
  id: GetWebhooksAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: GetWebhooksAsync(RequestOptions)
  nameWithType: RestTextChannel.GetWebhooksAsync(RequestOptions)
  fullName: Discord.Rest.RestTextChannel.GetWebhooksAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetWebhooksAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 191
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the webhooks available in this text channel.\n"
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<RestWebhook>> GetWebhooksAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestWebhook}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection\nof webhooks that is available in this channel.\n"
    content.vb: Public Function GetWebhooksAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestWebhook))
  overload: Discord.Rest.RestTextChannel.GetWebhooksAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.GetCategoryAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.GetCategoryAsync(Discord.RequestOptions)
  id: GetCategoryAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: GetCategoryAsync(RequestOptions)
  nameWithType: RestTextChannel.GetCategoryAsync(RequestOptions)
  fullName: Discord.Rest.RestTextChannel.GetCategoryAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetCategoryAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 202
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the parent (category) channel of this channel.\n"
  example: []
  syntax:
    content: public Task<ICategoryChannel> GetCategoryAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.ICategoryChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains the category channel\nrepresenting the parent of this channel; <code>null</code> if none is set.\n"
    content.vb: Public Function GetCategoryAsync(options As RequestOptions = Nothing) As Task(Of ICategoryChannel)
  overload: Discord.Rest.RestTextChannel.GetCategoryAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.SyncPermissionsAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.SyncPermissionsAsync(Discord.RequestOptions)
  id: SyncPermissionsAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: SyncPermissionsAsync(RequestOptions)
  nameWithType: RestTextChannel.SyncPermissionsAsync(RequestOptions)
  fullName: Discord.Rest.RestTextChannel.SyncPermissionsAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SyncPermissionsAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 205
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nSyncs the permissions of this nested channel with its parent&apos;s.\n"
  example: []
  syntax:
    content: public Task SyncPermissionsAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous operation for syncing channel permissions with its parent&apos;s.\n"
    content.vb: Public Function SyncPermissionsAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestTextChannel.SyncPermissionsAsync*
  implements:
  - Discord.INestedChannel.SyncPermissionsAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
  id: CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: CreateInviteAsync(Nullable<Int32>, Nullable<Int32>, Boolean, Boolean, RequestOptions)
  nameWithType: RestTextChannel.CreateInviteAsync(Nullable<Int32>, Nullable<Int32>, Boolean, Boolean, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.CreateInviteAsync(System.Nullable<System.Int32>, System.Nullable<System.Int32>, System.Boolean, System.Boolean, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreateInviteAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 210
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nCreates a new invite to this channel.\n"
  example: []
  syntax:
    content: public Task<IInviteMetadata> CreateInviteAsync(int? maxAge, int? maxUses = default(int? ), bool isTemporary = false, bool isUnique = false, RequestOptions options = null)
    parameters:
    - id: maxAge
      type: System.Nullable{System.Int32}
      description: The time (in seconds) until the invite expires. Set to <code>null</code> to never expire.
    - id: maxUses
      type: System.Nullable{System.Int32}
      description: The max amount of times this invite may be used. Set to <code>null</code> to have unlimited uses.
    - id: isTemporary
      type: System.Boolean
      description: If <code>true</code>, the user accepting this invite will be kicked from the guild after closing their client.
    - id: isUnique
      type: System.Boolean
      description: If <code>true</code>, don&apos;t try to reuse a similar invite (useful for creating many unique one time use invites).
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IInviteMetadata}
      description: "\nA task that represents the asynchronous invite creation operation. The task result contains an invite\nmetadata object containing information for the created invite.\n"
    content.vb: Public Function CreateInviteAsync(maxAge As Integer?, maxUses As Integer? = Nothing, isTemporary As Boolean = False, isUnique As Boolean = False, options As RequestOptions = Nothing) As Task(Of IInviteMetadata)
  overload: Discord.Rest.RestTextChannel.CreateInviteAsync*
  implements:
  - Discord.INestedChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
  nameWithType.vb: RestTextChannel.CreateInviteAsync(Nullable(Of Int32), Nullable(Of Int32), Boolean, Boolean, RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestTextChannel.CreateInviteAsync(System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), System.Boolean, System.Boolean, Discord.RequestOptions)
  name.vb: CreateInviteAsync(Nullable(Of Int32), Nullable(Of Int32), Boolean, Boolean, RequestOptions)
- uid: Discord.Rest.RestTextChannel.GetInvitesAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.GetInvitesAsync(Discord.RequestOptions)
  id: GetInvitesAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: GetInvitesAsync(RequestOptions)
  nameWithType: RestTextChannel.GetInvitesAsync(RequestOptions)
  fullName: Discord.Rest.RestTextChannel.GetInvitesAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetInvitesAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 213
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of all invites to this channel.\n"
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<IInviteMetadata>> GetInvitesAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IInviteMetadata}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection\nof invite metadata that are created for this channel.\n"
    content.vb: Public Function GetInvitesAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of IInviteMetadata))
  overload: Discord.Rest.RestTextChannel.GetInvitesAsync*
  implements:
  - Discord.INestedChannel.GetInvitesAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestTextChannel.Discord#ITextChannel#CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.Discord#ITextChannel#CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)
  id: Discord#ITextChannel#CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: ITextChannel.CreateWebhookAsync(String, Stream, RequestOptions)
  nameWithType: RestTextChannel.ITextChannel.CreateWebhookAsync(String, Stream, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.Discord.ITextChannel.CreateWebhookAsync(System.String, System.IO.Stream, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.ITextChannel.CreateWebhookAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 220
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nCreates a webhook in this text channel.\n"
  example: []
  syntax:
    content: Task<IWebhook> ITextChannel.CreateWebhookAsync(string name, Stream avatar, RequestOptions options)
    parameters:
    - id: name
      type: System.String
      description: The name of the webhook.
    - id: avatar
      type: System.IO.Stream
      description: The avatar of the webhook.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IWebhook}
      description: "\nA task that represents the asynchronous creation operation. The task result contains the newly created\nwebhook.\n"
    content.vb: Function Discord.ITextChannel.CreateWebhookAsync(name As String, avatar As Stream, options As RequestOptions) As Task(Of IWebhook) Implements ITextChannel.CreateWebhookAsync
  overload: Discord.Rest.RestTextChannel.Discord#ITextChannel#CreateWebhookAsync*
  implements:
  - Discord.ITextChannel.CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)
  nameWithType.vb: RestTextChannel.Discord.ITextChannel.CreateWebhookAsync(String, Stream, RequestOptions)
  name.vb: Discord.ITextChannel.CreateWebhookAsync(String, Stream, RequestOptions)
- uid: Discord.Rest.RestTextChannel.Discord#ITextChannel#GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.Discord#ITextChannel#GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  id: Discord#ITextChannel#GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: ITextChannel.GetWebhookAsync(UInt64, RequestOptions)
  nameWithType: RestTextChannel.ITextChannel.GetWebhookAsync(UInt64, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.Discord.ITextChannel.GetWebhookAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.ITextChannel.GetWebhookAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 223
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a webhook available in this text channel.\n"
  example: []
  syntax:
    content: Task<IWebhook> ITextChannel.GetWebhookAsync(ulong id, RequestOptions options)
    parameters:
    - id: id
      type: System.UInt64
      description: The identifier of the webhook.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IWebhook}
      description: "\nA task that represents the asynchronous get operation. The task result contains a webhook associated\nwith the identifier; <code>null</code> if the webhook is not found.\n"
    content.vb: Function Discord.ITextChannel.GetWebhookAsync(id As ULong, options As RequestOptions) As Task(Of IWebhook) Implements ITextChannel.GetWebhookAsync
  overload: Discord.Rest.RestTextChannel.Discord#ITextChannel#GetWebhookAsync*
  implements:
  - Discord.ITextChannel.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  nameWithType.vb: RestTextChannel.Discord.ITextChannel.GetWebhookAsync(UInt64, RequestOptions)
  name.vb: Discord.ITextChannel.GetWebhookAsync(UInt64, RequestOptions)
- uid: Discord.Rest.RestTextChannel.Discord#ITextChannel#GetWebhooksAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.Discord#ITextChannel#GetWebhooksAsync(Discord.RequestOptions)
  id: Discord#ITextChannel#GetWebhooksAsync(Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: ITextChannel.GetWebhooksAsync(RequestOptions)
  nameWithType: RestTextChannel.ITextChannel.GetWebhooksAsync(RequestOptions)
  fullName: Discord.Rest.RestTextChannel.Discord.ITextChannel.GetWebhooksAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.ITextChannel.GetWebhooksAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 226
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the webhooks available in this text channel.\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<IWebhook>> ITextChannel.GetWebhooksAsync(RequestOptions options)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IWebhook}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection\nof webhooks that is available in this channel.\n"
    content.vb: Function Discord.ITextChannel.GetWebhooksAsync(options As RequestOptions) As Task(Of IReadOnlyCollection(Of IWebhook)) Implements ITextChannel.GetWebhooksAsync
  overload: Discord.Rest.RestTextChannel.Discord#ITextChannel#GetWebhooksAsync*
  implements:
  - Discord.ITextChannel.GetWebhooksAsync(Discord.RequestOptions)
  nameWithType.vb: RestTextChannel.Discord.ITextChannel.GetWebhooksAsync(RequestOptions)
  name.vb: Discord.ITextChannel.GetWebhooksAsync(RequestOptions)
- uid: Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IMessageChannel#GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: IMessageChannel.GetMessageAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: RestTextChannel.IMessageChannel.GetMessageAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.Discord.IMessageChannel.GetMessageAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessageChannel.GetMessageAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 231
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a message from this message channel.\n"
  example: []
  syntax:
    content: Task<IMessage> IMessageChannel.GetMessageAsync(ulong id, CacheMode mode, RequestOptions options)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the message.
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IMessage}
      description: "\nA task that represents an asynchronous get operation for retrieving the message. The task result contains\nthe retrieved message; <code>null</code> if no message is found with the specified identifier.\n"
    content.vb: Function Discord.IMessageChannel.GetMessageAsync(id As ULong, mode As CacheMode, options As RequestOptions) As Task(Of IMessage) Implements IMessageChannel.GetMessageAsync
  overload: Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetMessageAsync*
  implements:
  - Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: RestTextChannel.Discord.IMessageChannel.GetMessageAsync(UInt64, CacheMode, RequestOptions)
  name.vb: Discord.IMessageChannel.GetMessageAsync(UInt64, CacheMode, RequestOptions)
- uid: Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IMessageChannel#GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: IMessageChannel.GetMessagesAsync(Int32, CacheMode, RequestOptions)
  nameWithType: RestTextChannel.IMessageChannel.GetMessagesAsync(Int32, CacheMode, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.Discord.IMessageChannel.GetMessagesAsync(System.Int32, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessageChannel.GetMessagesAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 239
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the last N messages from this message channel.\n"
  remarks: "\n<div class=\"IMPORTANT\"><h5>important</h5><p>\n    The returned collection is an asynchronous enumerable object; one must call \n<xref href=\"Discord.AsyncEnumerableExtensions.FlattenAsync%60%601(System.Collections.Generic.IAsyncEnumerable%7bSystem.Collections.Generic.IEnumerable%7b%60%600%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref> to access the individual messages as a\ncollection.\n</p></div>\n<div class=\"WARNING\"><h5>warning</h5><p>\n    Do not fetch too many messages at once! This may cause unwanted preemptive rate limit or even actual\n    rate limit, causing your bot to freeze!\n</p></div>\nThis method will attempt to fetch the number of messages specified under <code data-dev-comment-type=\"paramref\" class=\"paramref\">limit</code>. The\nlibrary will attempt to split up the requests according to your <code data-dev-comment-type=\"paramref\" class=\"paramref\">limit</code> and \n<xref href=\"Discord.DiscordConfig.MaxMessagesPerBatch\" data-throw-if-not-resolved=\"false\"></xref>. In other words, should the user request 500 messages,\nand the <xref href=\"Discord.DiscordConfig.MaxMessagesPerBatch\" data-throw-if-not-resolved=\"false\"></xref> constant is <code>100</code>, the request will\nbe split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need\nof flattening.\n"
  example: []
  syntax:
    content: IAsyncEnumerable<IReadOnlyCollection<IMessage>> IMessageChannel.GetMessagesAsync(int limit, CacheMode mode, RequestOptions options)
    parameters:
    - id: limit
      type: System.Int32
      description: The numbers of message to be gotten from.
    - id: mode
      type: Discord.CacheMode
      description: >-
        The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from

        cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IMessage}}
      description: "\nPaged collection of messages.\n"
    content.vb: Function Discord.IMessageChannel.GetMessagesAsync(limit As Integer, mode As CacheMode, options As RequestOptions) As IAsyncEnumerable(Of IReadOnlyCollection(Of IMessage)) Implements IMessageChannel.GetMessagesAsync
  overload: Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetMessagesAsync*
  implements:
  - Discord.IMessageChannel.GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: RestTextChannel.Discord.IMessageChannel.GetMessagesAsync(Int32, CacheMode, RequestOptions)
  name.vb: Discord.IMessageChannel.GetMessagesAsync(Int32, CacheMode, RequestOptions)
- uid: Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IMessageChannel#GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: IMessageChannel.GetMessagesAsync(UInt64, Direction, Int32, CacheMode, RequestOptions)
  nameWithType: RestTextChannel.IMessageChannel.GetMessagesAsync(UInt64, Direction, Int32, CacheMode, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.Discord.IMessageChannel.GetMessagesAsync(System.UInt64, Discord.Direction, System.Int32, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessageChannel.GetMessagesAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 248
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of messages in this channel.\n"
  remarks: "\n<div class=\"IMPORTANT\"><h5>important</h5><p>\n    The returned collection is an asynchronous enumerable object; one must call \n<xref href=\"Discord.AsyncEnumerableExtensions.FlattenAsync%60%601(System.Collections.Generic.IAsyncEnumerable%7bSystem.Collections.Generic.IEnumerable%7b%60%600%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref> to access the individual messages as a\ncollection.\n</p></div>\n<div class=\"WARNING\"><h5>warning</h5><p>\n    Do not fetch too many messages at once! This may cause unwanted preemptive rate limit or even actual\n    rate limit, causing your bot to freeze!\n</p></div>\nThis method will attempt to fetch the number of messages specified under <code data-dev-comment-type=\"paramref\" class=\"paramref\">limit</code> around\nthe message <code data-dev-comment-type=\"paramref\" class=\"paramref\">fromMessageId</code> depending on the <code data-dev-comment-type=\"paramref\" class=\"paramref\">dir</code>. The library will\nattempt to split up the requests according to your <code data-dev-comment-type=\"paramref\" class=\"paramref\">limit</code> and \n<xref href=\"Discord.DiscordConfig.MaxMessagesPerBatch\" data-throw-if-not-resolved=\"false\"></xref>. In other words, should the user request 500 messages,\nand the <xref href=\"Discord.DiscordConfig.MaxMessagesPerBatch\" data-throw-if-not-resolved=\"false\"></xref> constant is <code>100</code>, the request will\nbe split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need\nof flattening.\n"
  example: []
  syntax:
    content: IAsyncEnumerable<IReadOnlyCollection<IMessage>> IMessageChannel.GetMessagesAsync(ulong fromMessageId, Direction dir, int limit, CacheMode mode, RequestOptions options)
    parameters:
    - id: fromMessageId
      type: System.UInt64
      description: The ID of the starting message to get the messages from.
    - id: dir
      type: Discord.Direction
      description: The direction of the messages to be gotten from.
    - id: limit
      type: System.Int32
      description: The numbers of message to be gotten from.
    - id: mode
      type: Discord.CacheMode
      description: >-
        The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from

        cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IMessage}}
      description: "\nPaged collection of messages.\n"
    content.vb: Function Discord.IMessageChannel.GetMessagesAsync(fromMessageId As ULong, dir As Direction, limit As Integer, mode As CacheMode, options As RequestOptions) As IAsyncEnumerable(Of IReadOnlyCollection(Of IMessage)) Implements IMessageChannel.GetMessagesAsync
  overload: Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetMessagesAsync*
  implements:
  - Discord.IMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: RestTextChannel.Discord.IMessageChannel.GetMessagesAsync(UInt64, Direction, Int32, CacheMode, RequestOptions)
  name.vb: Discord.IMessageChannel.GetMessagesAsync(UInt64, Direction, Int32, CacheMode, RequestOptions)
- uid: Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IMessageChannel#GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: IMessageChannel.GetMessagesAsync(IMessage, Direction, Int32, CacheMode, RequestOptions)
  nameWithType: RestTextChannel.IMessageChannel.GetMessagesAsync(IMessage, Direction, Int32, CacheMode, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage, Discord.Direction, System.Int32, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessageChannel.GetMessagesAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 256
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of messages in this channel.\n"
  remarks: "\n<div class=\"IMPORTANT\"><h5>important</h5><p>\n    The returned collection is an asynchronous enumerable object; one must call \n<xref href=\"Discord.AsyncEnumerableExtensions.FlattenAsync%60%601(System.Collections.Generic.IAsyncEnumerable%7bSystem.Collections.Generic.IEnumerable%7b%60%600%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref> to access the individual messages as a\ncollection.\n</p></div>\n<div class=\"WARNING\"><h5>warning</h5><p>\n    Do not fetch too many messages at once! This may cause unwanted preemptive rate limit or even actual\n    rate limit, causing your bot to freeze!\n</p></div>\nThis method will attempt to fetch the number of messages specified under <code data-dev-comment-type=\"paramref\" class=\"paramref\">limit</code> around\nthe message <code data-dev-comment-type=\"paramref\" class=\"paramref\">fromMessage</code> depending on the <code data-dev-comment-type=\"paramref\" class=\"paramref\">dir</code>. The library will\nattempt to split up the requests according to your <code data-dev-comment-type=\"paramref\" class=\"paramref\">limit</code> and \n<xref href=\"Discord.DiscordConfig.MaxMessagesPerBatch\" data-throw-if-not-resolved=\"false\"></xref>. In other words, should the user request 500 messages,\nand the <xref href=\"Discord.DiscordConfig.MaxMessagesPerBatch\" data-throw-if-not-resolved=\"false\"></xref> constant is <code>100</code>, the request will\nbe split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need\nof flattening.\n"
  example: []
  syntax:
    content: IAsyncEnumerable<IReadOnlyCollection<IMessage>> IMessageChannel.GetMessagesAsync(IMessage fromMessage, Direction dir, int limit, CacheMode mode, RequestOptions options)
    parameters:
    - id: fromMessage
      type: Discord.IMessage
      description: The starting message to get the messages from.
    - id: dir
      type: Discord.Direction
      description: The direction of the messages to be gotten from.
    - id: limit
      type: System.Int32
      description: The numbers of message to be gotten from.
    - id: mode
      type: Discord.CacheMode
      description: >-
        The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from

        cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IMessage}}
      description: "\nPaged collection of messages.\n"
    content.vb: Function Discord.IMessageChannel.GetMessagesAsync(fromMessage As IMessage, dir As Direction, limit As Integer, mode As CacheMode, options As RequestOptions) As IAsyncEnumerable(Of IReadOnlyCollection(Of IMessage)) Implements IMessageChannel.GetMessagesAsync
  overload: Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetMessagesAsync*
  implements:
  - Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: RestTextChannel.Discord.IMessageChannel.GetMessagesAsync(IMessage, Direction, Int32, CacheMode, RequestOptions)
  name.vb: Discord.IMessageChannel.GetMessagesAsync(IMessage, Direction, Int32, CacheMode, RequestOptions)
- uid: Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetPinnedMessagesAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetPinnedMessagesAsync(Discord.RequestOptions)
  id: Discord#IMessageChannel#GetPinnedMessagesAsync(Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: IMessageChannel.GetPinnedMessagesAsync(RequestOptions)
  nameWithType: RestTextChannel.IMessageChannel.GetPinnedMessagesAsync(RequestOptions)
  fullName: Discord.Rest.RestTextChannel.Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessageChannel.GetPinnedMessagesAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 264
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of pinned messages in this channel.\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<IMessage>> IMessageChannel.GetPinnedMessagesAsync(RequestOptions options)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IMessage}}
      description: "\nA task that represents the asynchronous get operation for retrieving pinned messages in this channel.\nThe task result contains a collection of messages found in the pinned messages.\n"
    content.vb: Function Discord.IMessageChannel.GetPinnedMessagesAsync(options As RequestOptions) As Task(Of IReadOnlyCollection(Of IMessage)) Implements IMessageChannel.GetPinnedMessagesAsync
  overload: Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetPinnedMessagesAsync*
  implements:
  - Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  nameWithType.vb: RestTextChannel.Discord.IMessageChannel.GetPinnedMessagesAsync(RequestOptions)
  name.vb: Discord.IMessageChannel.GetPinnedMessagesAsync(RequestOptions)
- uid: Discord.Rest.RestTextChannel.Discord#IMessageChannel#SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.Rest.RestTextChannel.Discord#IMessageChannel#SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  id: Discord#IMessageChannel#SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  isEii: true
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: IMessageChannel.SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: RestTextChannel.IMessageChannel.SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.Rest.RestTextChannel.Discord.IMessageChannel.SendFileAsync(System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessageChannel.SendFileAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 268
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nSends a file to this message channel with an optional caption.\n"
  remarks: "\nThis method sends a file as if you are uploading an attachment directly from your Discord client.\n<div class=\"NOTE\"><h5>note</h5><p>\n    If you wish to upload an image and have it embedded in a <xref href=\"Discord.EmbedType.Rich\" data-throw-if-not-resolved=\"false\"></xref> embed,\n    you may upload the file and refer to the file with &quot;attachment://filename.ext&quot; in the\n<xref href=\"Discord.EmbedBuilder.ImageUrl\" data-throw-if-not-resolved=\"false\"></xref>. See the example section for its usage.\n</p></div>\n"
  example: []
  syntax:
    content: Task<IUserMessage> IMessageChannel.SendFileAsync(string filePath, string text, bool isTTS, Embed embed, RequestOptions options, bool isSpoiler)
    parameters:
    - id: filePath
      type: System.String
      description: The file path of the file.
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    - id: isSpoiler
      type: System.Boolean
      description: Whether the message attachment should be hidden as a spoiler.
    return:
      type: System.Threading.Tasks.Task{Discord.IUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Function Discord.IMessageChannel.SendFileAsync(filePath As String, text As String, isTTS As Boolean, embed As Embed, options As RequestOptions, isSpoiler As Boolean) As Task(Of IUserMessage) Implements IMessageChannel.SendFileAsync
  overload: Discord.Rest.RestTextChannel.Discord#IMessageChannel#SendFileAsync*
  implements:
  - Discord.IMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  nameWithType.vb: RestTextChannel.Discord.IMessageChannel.SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  name.vb: Discord.IMessageChannel.SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
- uid: Discord.Rest.RestTextChannel.Discord#IMessageChannel#SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.Rest.RestTextChannel.Discord#IMessageChannel#SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  id: Discord#IMessageChannel#SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  isEii: true
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: IMessageChannel.SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: RestTextChannel.IMessageChannel.SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.Rest.RestTextChannel.Discord.IMessageChannel.SendFileAsync(System.IO.Stream, System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessageChannel.SendFileAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 272
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nSends a file to this message channel with an optional caption.\n"
  remarks: "\nThis method sends a file as if you are uploading an attachment directly from your Discord client.\n<div class=\"NOTE\"><h5>note</h5><p>\n    If you wish to upload an image and have it embedded in a <xref href=\"Discord.EmbedType.Rich\" data-throw-if-not-resolved=\"false\"></xref> embed,\n    you may upload the file and refer to the file with &quot;attachment://filename.ext&quot; in the\n<xref href=\"Discord.EmbedBuilder.ImageUrl\" data-throw-if-not-resolved=\"false\"></xref>. See the example section for its usage.\n</p></div>\n"
  example: []
  syntax:
    content: Task<IUserMessage> IMessageChannel.SendFileAsync(Stream stream, string filename, string text, bool isTTS, Embed embed, RequestOptions options, bool isSpoiler)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref> of the file to be sent.
    - id: filename
      type: System.String
      description: The name of the attachment.
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    - id: isSpoiler
      type: System.Boolean
      description: Whether the message attachment should be hidden as a spoiler.
    return:
      type: System.Threading.Tasks.Task{Discord.IUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Function Discord.IMessageChannel.SendFileAsync(stream As Stream, filename As String, text As String, isTTS As Boolean, embed As Embed, options As RequestOptions, isSpoiler As Boolean) As Task(Of IUserMessage) Implements IMessageChannel.SendFileAsync
  overload: Discord.Rest.RestTextChannel.Discord#IMessageChannel#SendFileAsync*
  implements:
  - Discord.IMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  nameWithType.vb: RestTextChannel.Discord.IMessageChannel.SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  name.vb: Discord.IMessageChannel.SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
- uid: Discord.Rest.RestTextChannel.Discord#IMessageChannel#SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.Discord#IMessageChannel#SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  id: Discord#IMessageChannel#SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: IMessageChannel.SendMessageAsync(String, Boolean, Embed, RequestOptions)
  nameWithType: RestTextChannel.IMessageChannel.SendMessageAsync(String, Boolean, Embed, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.Discord.IMessageChannel.SendMessageAsync(System.String, System.Boolean, Discord.Embed, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessageChannel.SendMessageAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 275
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nSends a message to this message channel.\n"
  example: []
  syntax:
    content: Task<IUserMessage> IMessageChannel.SendMessageAsync(string text, bool isTTS, Embed embed, RequestOptions options)
    parameters:
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Determines whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Function Discord.IMessageChannel.SendMessageAsync(text As String, isTTS As Boolean, embed As Embed, options As RequestOptions) As Task(Of IUserMessage) Implements IMessageChannel.SendMessageAsync
  overload: Discord.Rest.RestTextChannel.Discord#IMessageChannel#SendMessageAsync*
  implements:
  - Discord.IMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  nameWithType.vb: RestTextChannel.Discord.IMessageChannel.SendMessageAsync(String, Boolean, Embed, RequestOptions)
  name.vb: Discord.IMessageChannel.SendMessageAsync(String, Boolean, Embed, RequestOptions)
- uid: Discord.Rest.RestTextChannel.Discord#IGuildChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.Discord#IGuildChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IGuildChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: IGuildChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: RestTextChannel.IGuildChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.Discord.IGuildChannel.GetUserAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuildChannel.GetUserAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 280
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a user in this channel.\n"
  example: []
  syntax:
    content: Task<IGuildUser> IGuildChannel.GetUserAsync(ulong id, CacheMode mode, RequestOptions options)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the user.
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IGuildUser}
      description: "\nA task representing the asynchronous get operation. The task result contains a guild user object that\nrepresents the user; <code>null</code> if none is found.\n"
    content.vb: Function Discord.IGuildChannel.GetUserAsync(id As ULong, mode As CacheMode, options As RequestOptions) As Task(Of IGuildUser) Implements IGuildChannel.GetUserAsync
  overload: Discord.Rest.RestTextChannel.Discord#IGuildChannel#GetUserAsync*
  implements:
  - Discord.IGuildChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: RestTextChannel.Discord.IGuildChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  name.vb: Discord.IGuildChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
- uid: Discord.Rest.RestTextChannel.Discord#IGuildChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.Discord#IGuildChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IGuildChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: IGuildChannel.GetUsersAsync(CacheMode, RequestOptions)
  nameWithType: RestTextChannel.IGuildChannel.GetUsersAsync(CacheMode, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuildChannel.GetUsersAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 288
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of users that are able to view the channel or are currently in this channel.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IChannel.GetUsersAsync(Discord.CacheMode%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> IGuildChannel.GetUsersAsync(CacheMode mode, RequestOptions options)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IGuildUser}}
      description: "\nPaged collection of users.\n"
    content.vb: Function Discord.IGuildChannel.GetUsersAsync(mode As CacheMode, options As RequestOptions) As IAsyncEnumerable(Of IReadOnlyCollection(Of IGuildUser)) Implements IGuildChannel.GetUsersAsync
  overload: Discord.Rest.RestTextChannel.Discord#IGuildChannel#GetUsersAsync*
  implements:
  - Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: RestTextChannel.Discord.IGuildChannel.GetUsersAsync(CacheMode, RequestOptions)
  name.vb: Discord.IGuildChannel.GetUsersAsync(CacheMode, RequestOptions)
- uid: Discord.Rest.RestTextChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: RestTextChannel.IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.Discord.IChannel.GetUserAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IChannel.GetUserAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 298
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a user in this channel.\n"
  example: []
  syntax:
    content: Task<IUser> IChannel.GetUserAsync(ulong id, CacheMode mode, RequestOptions options)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the user (e.g. <code>168693960628371456</code>).
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IUser}
      description: "\nA task that represents the asynchronous get operation. The task result contains a user object that\nrepresents the found user; <code>null</code> if none is found.\n"
    content.vb: Function Discord.IChannel.GetUserAsync(id As ULong, mode As CacheMode, options As RequestOptions) As Task(Of IUser) Implements IChannel.GetUserAsync
  overload: Discord.Rest.RestTextChannel.Discord#IChannel#GetUserAsync*
  implements:
  - Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: RestTextChannel.Discord.IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  name.vb: Discord.IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
- uid: Discord.Rest.RestTextChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: IChannel.GetUsersAsync(CacheMode, RequestOptions)
  nameWithType: RestTextChannel.IChannel.GetUsersAsync(CacheMode, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.Discord.IChannel.GetUsersAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IChannel.GetUsersAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 306
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of users that are able to view the channel or are currently in this channel.\n"
  remarks: "\n<div class=\"IMPORTANT\"><h5>important</h5><p>\n    The returned collection is an asynchronous enumerable object; one must call \n<xref href=\"Discord.AsyncEnumerableExtensions.FlattenAsync%60%601(System.Collections.Generic.IAsyncEnumerable%7bSystem.Collections.Generic.IEnumerable%7b%60%600%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref> to access the individual messages as a\ncollection.\n</p></div>\nThis method will attempt to fetch all users that is able to view this channel or is currently in this channel.\nThe library will attempt to split up the requests according to and <xref href=\"Discord.DiscordConfig.MaxUsersPerBatch\" data-throw-if-not-resolved=\"false\"></xref>.\nIn other words, if there are 3000 users, and the <xref href=\"Discord.DiscordConfig.MaxUsersPerBatch\" data-throw-if-not-resolved=\"false\"></xref> constant\nis <code>1000</code>, the request will be split into 3 individual requests; thus returning 53individual asynchronous\nresponses, hence the need of flattening.\n"
  example: []
  syntax:
    content: IAsyncEnumerable<IReadOnlyCollection<IUser>> IChannel.GetUsersAsync(CacheMode mode, RequestOptions options)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IUser}}
      description: "\nPaged collection of users.\n"
    content.vb: Function Discord.IChannel.GetUsersAsync(mode As CacheMode, options As RequestOptions) As IAsyncEnumerable(Of IReadOnlyCollection(Of IUser)) Implements IChannel.GetUsersAsync
  overload: Discord.Rest.RestTextChannel.Discord#IChannel#GetUsersAsync*
  implements:
  - Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: RestTextChannel.Discord.IChannel.GetUsersAsync(CacheMode, RequestOptions)
  name.vb: Discord.IChannel.GetUsersAsync(CacheMode, RequestOptions)
- uid: Discord.Rest.RestTextChannel.Discord#INestedChannel#GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestTextChannel.Discord#INestedChannel#GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)
  id: Discord#INestedChannel#GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestTextChannel
  langs:
  - csharp
  - vb
  name: INestedChannel.GetCategoryAsync(CacheMode, RequestOptions)
  nameWithType: RestTextChannel.INestedChannel.GetCategoryAsync(CacheMode, RequestOptions)
  fullName: Discord.Rest.RestTextChannel.Discord.INestedChannel.GetCategoryAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.INestedChannel.GetCategoryAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestTextChannel.cs
    startLine: 316
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the parent (category) channel of this channel.\n"
  example: []
  syntax:
    content: Task<ICategoryChannel> INestedChannel.GetCategoryAsync(CacheMode mode, RequestOptions options)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.ICategoryChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains the category channel\nrepresenting the parent of this channel; <code>null</code> if none is set.\n"
    content.vb: Function Discord.INestedChannel.GetCategoryAsync(mode As CacheMode, options As RequestOptions) As Task(Of ICategoryChannel) Implements INestedChannel.GetCategoryAsync
  overload: Discord.Rest.RestTextChannel.Discord#INestedChannel#GetCategoryAsync*
  implements:
  - Discord.INestedChannel.GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: RestTextChannel.Discord.INestedChannel.GetCategoryAsync(CacheMode, RequestOptions)
  name.vb: Discord.INestedChannel.GetCategoryAsync(CacheMode, RequestOptions)
references:
- uid: Discord.Rest
  commentId: N:Discord.Rest
  name: Discord.Rest
  nameWithType: Discord.Rest
  fullName: Discord.Rest
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Rest.RestEntity{System.UInt64}
  commentId: T:Discord.Rest.RestEntity{System.UInt64}
  parent: Discord.Rest
  definition: Discord.Rest.RestEntity`1
  name: RestEntity<UInt64>
  nameWithType: RestEntity<UInt64>
  fullName: Discord.Rest.RestEntity<System.UInt64>
  nameWithType.vb: RestEntity(Of UInt64)
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64)
  name.vb: RestEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestChannel
  commentId: T:Discord.Rest.RestChannel
  parent: Discord.Rest
  name: RestChannel
  nameWithType: RestChannel
  fullName: Discord.Rest.RestChannel
- uid: Discord.Rest.RestGuildChannel
  commentId: T:Discord.Rest.RestGuildChannel
  parent: Discord.Rest
  name: RestGuildChannel
  nameWithType: RestGuildChannel
  fullName: Discord.Rest.RestGuildChannel
- uid: Discord.IUpdateable
  commentId: T:Discord.IUpdateable
  parent: Discord
  name: IUpdateable
  nameWithType: IUpdateable
  fullName: Discord.IUpdateable
- uid: Discord.Rest.IRestMessageChannel
  commentId: T:Discord.Rest.IRestMessageChannel
  parent: Discord.Rest
  name: IRestMessageChannel
  nameWithType: IRestMessageChannel
  fullName: Discord.Rest.IRestMessageChannel
- uid: Discord.ITextChannel
  commentId: T:Discord.ITextChannel
  parent: Discord
  name: ITextChannel
  nameWithType: ITextChannel
  fullName: Discord.ITextChannel
- uid: Discord.IMessageChannel
  commentId: T:Discord.IMessageChannel
  parent: Discord
  name: IMessageChannel
  nameWithType: IMessageChannel
  fullName: Discord.IMessageChannel
- uid: Discord.IMentionable
  commentId: T:Discord.IMentionable
  parent: Discord
  name: IMentionable
  nameWithType: IMentionable
  fullName: Discord.IMentionable
- uid: Discord.INestedChannel
  commentId: T:Discord.INestedChannel
  parent: Discord
  name: INestedChannel
  nameWithType: INestedChannel
  fullName: Discord.INestedChannel
- uid: Discord.IGuildChannel
  commentId: T:Discord.IGuildChannel
  parent: Discord
  name: IGuildChannel
  nameWithType: IGuildChannel
  fullName: Discord.IGuildChannel
- uid: Discord.IChannel
  commentId: T:Discord.IChannel
  parent: Discord
  name: IChannel
  nameWithType: IChannel
  fullName: Discord.IChannel
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IDeletable
  commentId: T:Discord.IDeletable
  parent: Discord
  name: IDeletable
  nameWithType: IDeletable
  fullName: Discord.IDeletable
- uid: Discord.Rest.RestGuildChannel.PermissionOverwrites
  commentId: P:Discord.Rest.RestGuildChannel.PermissionOverwrites
  parent: Discord.Rest.RestGuildChannel
  name: PermissionOverwrites
  nameWithType: RestGuildChannel.PermissionOverwrites
  fullName: Discord.Rest.RestGuildChannel.PermissionOverwrites
- uid: Discord.Rest.RestGuildChannel.Name
  commentId: P:Discord.Rest.RestGuildChannel.Name
  parent: Discord.Rest.RestGuildChannel
  name: Name
  nameWithType: RestGuildChannel.Name
  fullName: Discord.Rest.RestGuildChannel.Name
- uid: Discord.Rest.RestGuildChannel.Position
  commentId: P:Discord.Rest.RestGuildChannel.Position
  parent: Discord.Rest.RestGuildChannel
  name: Position
  nameWithType: RestGuildChannel.Position
  fullName: Discord.Rest.RestGuildChannel.Position
- uid: Discord.Rest.RestGuildChannel.GuildId
  commentId: P:Discord.Rest.RestGuildChannel.GuildId
  parent: Discord.Rest.RestGuildChannel
  name: GuildId
  nameWithType: RestGuildChannel.GuildId
  fullName: Discord.Rest.RestGuildChannel.GuildId
- uid: Discord.Rest.RestGuildChannel.UpdateAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.UpdateAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  name: UpdateAsync(RequestOptions)
  nameWithType: RestGuildChannel.UpdateAsync(RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.UpdateAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.UpdateAsync(Discord.RequestOptions)
    name: UpdateAsync
    nameWithType: RestGuildChannel.UpdateAsync
    fullName: Discord.Rest.RestGuildChannel.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.UpdateAsync(Discord.RequestOptions)
    name: UpdateAsync
    nameWithType: RestGuildChannel.UpdateAsync
    fullName: Discord.Rest.RestGuildChannel.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.ModifyAsync(System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.ModifyAsync(System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  isExternal: true
  name: ModifyAsync(Action<GuildChannelProperties>, RequestOptions)
  nameWithType: RestGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.ModifyAsync(System.Action<Discord.GuildChannelProperties>, Discord.RequestOptions)
  nameWithType.vb: RestGuildChannel.ModifyAsync(Action(Of GuildChannelProperties), RequestOptions)
  fullName.vb: Discord.Rest.RestGuildChannel.ModifyAsync(System.Action(Of Discord.GuildChannelProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of GuildChannelProperties), RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.ModifyAsync(System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: RestGuildChannel.ModifyAsync
    fullName: Discord.Rest.RestGuildChannel.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildChannelProperties
    name: GuildChannelProperties
    nameWithType: GuildChannelProperties
    fullName: Discord.GuildChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.ModifyAsync(System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: RestGuildChannel.ModifyAsync
    fullName: Discord.Rest.RestGuildChannel.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildChannelProperties
    name: GuildChannelProperties
    nameWithType: GuildChannelProperties
    fullName: Discord.GuildChannelProperties
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.DeleteAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.DeleteAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  name: DeleteAsync(RequestOptions)
  nameWithType: RestGuildChannel.DeleteAsync(RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.DeleteAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: RestGuildChannel.DeleteAsync
    fullName: Discord.Rest.RestGuildChannel.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: RestGuildChannel.DeleteAsync
    fullName: Discord.Rest.RestGuildChannel.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IUser)
  commentId: M:Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IUser)
  parent: Discord.Rest.RestGuildChannel
  name: GetPermissionOverwrite(IUser)
  nameWithType: RestGuildChannel.GetPermissionOverwrite(IUser)
  fullName: Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IUser)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IUser)
    name: GetPermissionOverwrite
    nameWithType: RestGuildChannel.GetPermissionOverwrite
    fullName: Discord.Rest.RestGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IUser)
    name: GetPermissionOverwrite
    nameWithType: RestGuildChannel.GetPermissionOverwrite
    fullName: Discord.Rest.RestGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IRole)
  commentId: M:Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IRole)
  parent: Discord.Rest.RestGuildChannel
  name: GetPermissionOverwrite(IRole)
  nameWithType: RestGuildChannel.GetPermissionOverwrite(IRole)
  fullName: Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IRole)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IRole)
    name: GetPermissionOverwrite
    nameWithType: RestGuildChannel.GetPermissionOverwrite
    fullName: Discord.Rest.RestGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IRole)
    name: GetPermissionOverwrite
    nameWithType: RestGuildChannel.GetPermissionOverwrite
    fullName: Discord.Rest.RestGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  name: AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  nameWithType: RestGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IUser, Discord.OverwritePermissions, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
    name: AddPermissionOverwriteAsync
    nameWithType: RestGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
    name: AddPermissionOverwriteAsync
    nameWithType: RestGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  name: AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  nameWithType: RestGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IRole, Discord.OverwritePermissions, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
    name: AddPermissionOverwriteAsync
    nameWithType: RestGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
    name: AddPermissionOverwriteAsync
    nameWithType: RestGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  name: RemovePermissionOverwriteAsync(IUser, RequestOptions)
  nameWithType: RestGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
    name: RemovePermissionOverwriteAsync
    nameWithType: RestGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
    name: RemovePermissionOverwriteAsync
    nameWithType: RestGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  name: RemovePermissionOverwriteAsync(IRole, RequestOptions)
  nameWithType: RestGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
    name: RemovePermissionOverwriteAsync
    nameWithType: RestGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
    name: RemovePermissionOverwriteAsync
    nameWithType: RestGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.ToString
  commentId: M:Discord.Rest.RestGuildChannel.ToString
  parent: Discord.Rest.RestGuildChannel
  name: ToString()
  nameWithType: RestGuildChannel.ToString()
  fullName: Discord.Rest.RestGuildChannel.ToString()
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.ToString
    name: ToString
    nameWithType: RestGuildChannel.ToString
    fullName: Discord.Rest.RestGuildChannel.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.ToString
    name: ToString
    nameWithType: RestGuildChannel.ToString
    fullName: Discord.Rest.RestGuildChannel.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#Guild
  commentId: P:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#Guild
  parent: Discord.Rest.RestGuildChannel
  name: IGuildChannel.Guild
  nameWithType: RestGuildChannel.IGuildChannel.Guild
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.Guild
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.Guild
  name.vb: Discord.IGuildChannel.Guild
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IRole)
  commentId: M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IRole)
  parent: Discord.Rest.RestGuildChannel
  name: IGuildChannel.GetPermissionOverwrite(IRole)
  nameWithType: RestGuildChannel.IGuildChannel.GetPermissionOverwrite(IRole)
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite(Discord.IRole)
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite(IRole)
  name.vb: Discord.IGuildChannel.GetPermissionOverwrite(IRole)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IRole)
    name: IGuildChannel.GetPermissionOverwrite
    nameWithType: RestGuildChannel.IGuildChannel.GetPermissionOverwrite
    fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IRole)
    name: Discord.IGuildChannel.GetPermissionOverwrite
    nameWithType: RestGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite
    fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IUser)
  commentId: M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IUser)
  parent: Discord.Rest.RestGuildChannel
  name: IGuildChannel.GetPermissionOverwrite(IUser)
  nameWithType: RestGuildChannel.IGuildChannel.GetPermissionOverwrite(IUser)
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite(Discord.IUser)
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite(IUser)
  name.vb: Discord.IGuildChannel.GetPermissionOverwrite(IUser)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IUser)
    name: IGuildChannel.GetPermissionOverwrite
    nameWithType: RestGuildChannel.IGuildChannel.GetPermissionOverwrite
    fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IUser)
    name: Discord.IGuildChannel.GetPermissionOverwrite
    nameWithType: RestGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite
    fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  name: IGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  nameWithType: RestGuildChannel.IGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync(Discord.IRole, Discord.OverwritePermissions, Discord.RequestOptions)
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  name.vb: Discord.IGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
    name: IGuildChannel.AddPermissionOverwriteAsync
    nameWithType: RestGuildChannel.IGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
    name: Discord.IGuildChannel.AddPermissionOverwriteAsync
    nameWithType: RestGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  name: IGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  nameWithType: RestGuildChannel.IGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync(Discord.IUser, Discord.OverwritePermissions, Discord.RequestOptions)
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  name.vb: Discord.IGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
    name: IGuildChannel.AddPermissionOverwriteAsync
    nameWithType: RestGuildChannel.IGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
    name: Discord.IGuildChannel.AddPermissionOverwriteAsync
    nameWithType: RestGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  name: IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions)
  nameWithType: RestGuildChannel.IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole, Discord.RequestOptions)
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions)
  name.vb: Discord.IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
    name: IGuildChannel.RemovePermissionOverwriteAsync
    nameWithType: RestGuildChannel.IGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
    name: Discord.IGuildChannel.RemovePermissionOverwriteAsync
    nameWithType: RestGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  name: IGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions)
  nameWithType: RestGuildChannel.IGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser, Discord.RequestOptions)
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions)
  name.vb: Discord.IGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
    name: IGuildChannel.RemovePermissionOverwriteAsync
    nameWithType: RestGuildChannel.IGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
    name: Discord.IGuildChannel.RemovePermissionOverwriteAsync
    nameWithType: RestGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestChannel.CreatedAt
  commentId: P:Discord.Rest.RestChannel.CreatedAt
  parent: Discord.Rest.RestChannel
  name: CreatedAt
  nameWithType: RestChannel.CreatedAt
  fullName: Discord.Rest.RestChannel.CreatedAt
- uid: Discord.Rest.RestChannel.Discord#IChannel#Name
  commentId: P:Discord.Rest.RestChannel.Discord#IChannel#Name
  parent: Discord.Rest.RestChannel
  name: IChannel.Name
  nameWithType: RestChannel.IChannel.Name
  fullName: Discord.Rest.RestChannel.Discord.IChannel.Name
  nameWithType.vb: RestChannel.Discord.IChannel.Name
  name.vb: Discord.IChannel.Name
- uid: Discord.Rest.RestEntity{System.UInt64}.Id
  commentId: P:Discord.Rest.RestEntity{System.UInt64}.Id
  parent: Discord.Rest.RestEntity{System.UInt64}
  definition: Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<UInt64>.Id
  fullName: Discord.Rest.RestEntity<System.UInt64>.Id
  nameWithType.vb: RestEntity(Of UInt64).Id
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64).Id
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Rest.RestEntity`1
  commentId: T:Discord.Rest.RestEntity`1
  name: RestEntity<T>
  nameWithType: RestEntity<T>
  fullName: Discord.Rest.RestEntity<T>
  nameWithType.vb: RestEntity(Of T)
  fullName.vb: Discord.Rest.RestEntity(Of T)
  name.vb: RestEntity(Of T)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestEntity`1.Id
  commentId: P:Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<T>.Id
  fullName: Discord.Rest.RestEntity<T>.Id
  nameWithType.vb: RestEntity(Of T).Id
  fullName.vb: Discord.Rest.RestEntity(Of T).Id
- uid: Discord.Rest.RestTextChannel.Topic*
  commentId: Overload:Discord.Rest.RestTextChannel.Topic
  name: Topic
  nameWithType: RestTextChannel.Topic
  fullName: Discord.Rest.RestTextChannel.Topic
- uid: Discord.ITextChannel.Topic
  commentId: P:Discord.ITextChannel.Topic
  parent: Discord.ITextChannel
  name: Topic
  nameWithType: ITextChannel.Topic
  fullName: Discord.ITextChannel.Topic
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.Rest.RestTextChannel.SlowModeInterval*
  commentId: Overload:Discord.Rest.RestTextChannel.SlowModeInterval
  name: SlowModeInterval
  nameWithType: RestTextChannel.SlowModeInterval
  fullName: Discord.Rest.RestTextChannel.SlowModeInterval
- uid: Discord.ITextChannel.SlowModeInterval
  commentId: P:Discord.ITextChannel.SlowModeInterval
  parent: Discord.ITextChannel
  name: SlowModeInterval
  nameWithType: ITextChannel.SlowModeInterval
  fullName: Discord.ITextChannel.SlowModeInterval
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Discord.Rest.RestTextChannel.CategoryId*
  commentId: Overload:Discord.Rest.RestTextChannel.CategoryId
  name: CategoryId
  nameWithType: RestTextChannel.CategoryId
  fullName: Discord.Rest.RestTextChannel.CategoryId
- uid: Discord.INestedChannel.CategoryId
  commentId: P:Discord.INestedChannel.CategoryId
  parent: Discord.INestedChannel
  name: CategoryId
  nameWithType: INestedChannel.CategoryId
  fullName: Discord.INestedChannel.CategoryId
- uid: System.Nullable{System.UInt64}
  commentId: T:System.Nullable{System.UInt64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<UInt64>
  nameWithType: Nullable<UInt64>
  fullName: System.Nullable<System.UInt64>
  nameWithType.vb: Nullable(Of UInt64)
  fullName.vb: System.Nullable(Of System.UInt64)
  name.vb: Nullable(Of UInt64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.Mention*
  commentId: Overload:Discord.Rest.RestTextChannel.Mention
  name: Mention
  nameWithType: RestTextChannel.Mention
  fullName: Discord.Rest.RestTextChannel.Mention
- uid: Discord.IMentionable.Mention
  commentId: P:Discord.IMentionable.Mention
  parent: Discord.IMentionable
  name: Mention
  nameWithType: IMentionable.Mention
  fullName: Discord.IMentionable.Mention
- uid: Discord.Rest.RestTextChannel.IsNsfw*
  commentId: Overload:Discord.Rest.RestTextChannel.IsNsfw
  name: IsNsfw
  nameWithType: RestTextChannel.IsNsfw
  fullName: Discord.Rest.RestTextChannel.IsNsfw
- uid: Discord.ITextChannel.IsNsfw
  commentId: P:Discord.ITextChannel.IsNsfw
  parent: Discord.ITextChannel
  name: IsNsfw
  nameWithType: ITextChannel.IsNsfw
  fullName: Discord.ITextChannel.IsNsfw
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.Rest.RestTextChannel.ModifyAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.ModifyAsync
  name: ModifyAsync
  nameWithType: RestTextChannel.ModifyAsync
  fullName: Discord.Rest.RestTextChannel.ModifyAsync
- uid: Discord.ITextChannel.ModifyAsync(System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.ITextChannel.ModifyAsync(System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
  parent: Discord.ITextChannel
  isExternal: true
  name: ModifyAsync(Action<TextChannelProperties>, RequestOptions)
  nameWithType: ITextChannel.ModifyAsync(Action<TextChannelProperties>, RequestOptions)
  fullName: Discord.ITextChannel.ModifyAsync(System.Action<Discord.TextChannelProperties>, Discord.RequestOptions)
  nameWithType.vb: ITextChannel.ModifyAsync(Action(Of TextChannelProperties), RequestOptions)
  fullName.vb: Discord.ITextChannel.ModifyAsync(System.Action(Of Discord.TextChannelProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of TextChannelProperties), RequestOptions)
  spec.csharp:
  - uid: Discord.ITextChannel.ModifyAsync(System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: ITextChannel.ModifyAsync
    fullName: Discord.ITextChannel.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.TextChannelProperties
    name: TextChannelProperties
    nameWithType: TextChannelProperties
    fullName: Discord.TextChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.ITextChannel.ModifyAsync(System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: ITextChannel.ModifyAsync
    fullName: Discord.ITextChannel.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.TextChannelProperties
    name: TextChannelProperties
    nameWithType: TextChannelProperties
    fullName: Discord.TextChannelProperties
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.TextChannelProperties
  commentId: T:Discord.TextChannelProperties
  name: TextChannelProperties
  nameWithType: TextChannelProperties
  fullName: Discord.TextChannelProperties
- uid: System.Action{Discord.TextChannelProperties}
  commentId: T:System.Action{Discord.TextChannelProperties}
  parent: System
  definition: System.Action`1
  name: Action<TextChannelProperties>
  nameWithType: Action<TextChannelProperties>
  fullName: System.Action<Discord.TextChannelProperties>
  nameWithType.vb: Action(Of TextChannelProperties)
  fullName.vb: System.Action(Of Discord.TextChannelProperties)
  name.vb: Action(Of TextChannelProperties)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.TextChannelProperties
    name: TextChannelProperties
    nameWithType: TextChannelProperties
    fullName: Discord.TextChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.TextChannelProperties
    name: TextChannelProperties
    nameWithType: TextChannelProperties
    fullName: Discord.TextChannelProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: Discord.Rest.RestTextChannel.GetUserAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.GetUserAsync
  name: GetUserAsync
  nameWithType: RestTextChannel.GetUserAsync
  fullName: Discord.Rest.RestTextChannel.GetUserAsync
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.Threading.Tasks.Task{Discord.Rest.RestGuildUser}
  commentId: T:System.Threading.Tasks.Task{Discord.Rest.RestGuildUser}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RestGuildUser>
  nameWithType: Task<RestGuildUser>
  fullName: System.Threading.Tasks.Task<Discord.Rest.RestGuildUser>
  nameWithType.vb: Task(Of RestGuildUser)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.Rest.RestGuildUser)
  name.vb: Task(Of RestGuildUser)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestGuildUser
    name: RestGuildUser
    nameWithType: RestGuildUser
    fullName: Discord.Rest.RestGuildUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestGuildUser
    name: RestGuildUser
    nameWithType: RestGuildUser
    fullName: Discord.Rest.RestGuildUser
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.AsyncEnumerableExtensions.FlattenAsync``1(System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IEnumerable{``0}})
  commentId: M:Discord.AsyncEnumerableExtensions.FlattenAsync``1(System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IEnumerable{``0}})
  isExternal: true
- uid: Discord.Rest.RestTextChannel.GetUsersAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.GetUsersAsync
  name: GetUsersAsync
  nameWithType: RestTextChannel.GetUsersAsync
  fullName: Discord.Rest.RestTextChannel.GetUsersAsync
- uid: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestGuildUser}}
  commentId: T:System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestGuildUser}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IAsyncEnumerable`1
  name: IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>>
  fullName: System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyCollection<Discord.Rest.RestGuildUser>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of RestGuildUser))
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.Rest.RestGuildUser))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of RestGuildUser))
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestGuildUser
    name: RestGuildUser
    nameWithType: RestGuildUser
    fullName: Discord.Rest.RestGuildUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestGuildUser
    name: RestGuildUser
    nameWithType: RestGuildUser
    fullName: Discord.Rest.RestGuildUser
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IAsyncEnumerable`1
  commentId: T:System.Collections.Generic.IAsyncEnumerable`1
  isExternal: true
  name: IAsyncEnumerable<T>
  nameWithType: IAsyncEnumerable<T>
  fullName: System.Collections.Generic.IAsyncEnumerable<T>
  nameWithType.vb: IAsyncEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of T)
  name.vb: IAsyncEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Discord.Rest.RestTextChannel.GetMessageAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.GetMessageAsync
  name: GetMessageAsync
  nameWithType: RestTextChannel.GetMessageAsync
  fullName: Discord.Rest.RestTextChannel.GetMessageAsync
- uid: Discord.Rest.IRestMessageChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.Rest.IRestMessageChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.Rest.IRestMessageChannel
  isExternal: true
  name: GetMessageAsync(UInt64, RequestOptions)
  nameWithType: IRestMessageChannel.GetMessageAsync(UInt64, RequestOptions)
  fullName: Discord.Rest.IRestMessageChannel.GetMessageAsync(System.UInt64, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.IRestMessageChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
    name: GetMessageAsync
    nameWithType: IRestMessageChannel.GetMessageAsync
    fullName: Discord.Rest.IRestMessageChannel.GetMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.IRestMessageChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
    name: GetMessageAsync
    nameWithType: IRestMessageChannel.GetMessageAsync
    fullName: Discord.Rest.IRestMessageChannel.GetMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.Rest.RestMessage}
  commentId: T:System.Threading.Tasks.Task{Discord.Rest.RestMessage}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RestMessage>
  nameWithType: Task<RestMessage>
  fullName: System.Threading.Tasks.Task<Discord.Rest.RestMessage>
  nameWithType.vb: Task(Of RestMessage)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.Rest.RestMessage)
  name.vb: Task(Of RestMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestMessage
    name: RestMessage
    nameWithType: RestMessage
    fullName: Discord.Rest.RestMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestMessage
    name: RestMessage
    nameWithType: RestMessage
    fullName: Discord.Rest.RestMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.GetMessagesAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.GetMessagesAsync
  name: GetMessagesAsync
  nameWithType: RestTextChannel.GetMessagesAsync
  fullName: Discord.Rest.RestTextChannel.GetMessagesAsync
- uid: Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
  commentId: M:Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
  parent: Discord.Rest.IRestMessageChannel
  isExternal: true
  name: GetMessagesAsync(Int32, RequestOptions)
  nameWithType: IRestMessageChannel.GetMessagesAsync(Int32, RequestOptions)
  fullName: Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.Int32, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IRestMessageChannel.GetMessagesAsync
    fullName: Discord.Rest.IRestMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IRestMessageChannel.GetMessagesAsync
    fullName: Discord.Rest.IRestMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestMessage}}
  commentId: T:System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestMessage}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IAsyncEnumerable`1
  name: IAsyncEnumerable<IReadOnlyCollection<RestMessage>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<RestMessage>>
  fullName: System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyCollection<Discord.Rest.RestMessage>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of RestMessage))
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.Rest.RestMessage))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of RestMessage))
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestMessage
    name: RestMessage
    nameWithType: RestMessage
    fullName: Discord.Rest.RestMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestMessage
    name: RestMessage
    nameWithType: RestMessage
    fullName: Discord.Rest.RestMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
  commentId: M:Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
  parent: Discord.Rest.IRestMessageChannel
  isExternal: true
  name: GetMessagesAsync(UInt64, Direction, Int32, RequestOptions)
  nameWithType: IRestMessageChannel.GetMessagesAsync(UInt64, Direction, Int32, RequestOptions)
  fullName: Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.UInt64, Discord.Direction, System.Int32, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IRestMessageChannel.GetMessagesAsync
    fullName: Discord.Rest.IRestMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IRestMessageChannel.GetMessagesAsync
    fullName: Discord.Rest.IRestMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Direction
  commentId: T:Discord.Direction
  parent: Discord
  name: Direction
  nameWithType: Direction
  fullName: Discord.Direction
- uid: Discord.Rest.IRestMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
  commentId: M:Discord.Rest.IRestMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
  parent: Discord.Rest.IRestMessageChannel
  isExternal: true
  name: GetMessagesAsync(IMessage, Direction, Int32, RequestOptions)
  nameWithType: IRestMessageChannel.GetMessagesAsync(IMessage, Direction, Int32, RequestOptions)
  fullName: Discord.Rest.IRestMessageChannel.GetMessagesAsync(Discord.IMessage, Discord.Direction, System.Int32, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.IRestMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IRestMessageChannel.GetMessagesAsync
    fullName: Discord.Rest.IRestMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.IRestMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IRestMessageChannel.GetMessagesAsync
    fullName: Discord.Rest.IRestMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessage
  commentId: T:Discord.IMessage
  parent: Discord
  name: IMessage
  nameWithType: IMessage
  fullName: Discord.IMessage
- uid: Discord.Rest.RestTextChannel.GetPinnedMessagesAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.GetPinnedMessagesAsync
  name: GetPinnedMessagesAsync
  nameWithType: RestTextChannel.GetPinnedMessagesAsync
  fullName: Discord.Rest.RestTextChannel.GetPinnedMessagesAsync
- uid: Discord.Rest.IRestMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.IRestMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  parent: Discord.Rest.IRestMessageChannel
  name: GetPinnedMessagesAsync(RequestOptions)
  nameWithType: IRestMessageChannel.GetPinnedMessagesAsync(RequestOptions)
  fullName: Discord.Rest.IRestMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.IRestMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
    name: GetPinnedMessagesAsync
    nameWithType: IRestMessageChannel.GetPinnedMessagesAsync
    fullName: Discord.Rest.IRestMessageChannel.GetPinnedMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.IRestMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
    name: GetPinnedMessagesAsync
    nameWithType: IRestMessageChannel.GetPinnedMessagesAsync
    fullName: Discord.Rest.IRestMessageChannel.GetPinnedMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestMessage}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestMessage}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<RestMessage>>
  nameWithType: Task<IReadOnlyCollection<RestMessage>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.Rest.RestMessage>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestMessage))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.Rest.RestMessage))
  name.vb: Task(Of IReadOnlyCollection(Of RestMessage))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestMessage
    name: RestMessage
    nameWithType: RestMessage
    fullName: Discord.Rest.RestMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestMessage
    name: RestMessage
    nameWithType: RestMessage
    fullName: Discord.Rest.RestMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.DiscordConfig.MaxMessageSize
  commentId: F:Discord.DiscordConfig.MaxMessageSize
  parent: Discord.DiscordConfig
  name: MaxMessageSize
  nameWithType: DiscordConfig.MaxMessageSize
  fullName: Discord.DiscordConfig.MaxMessageSize
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
- uid: Discord.Rest.RestTextChannel.SendMessageAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.SendMessageAsync
  name: SendMessageAsync
  nameWithType: RestTextChannel.SendMessageAsync
  fullName: Discord.Rest.RestTextChannel.SendMessageAsync
- uid: Discord.Rest.IRestMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  commentId: M:Discord.Rest.IRestMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  parent: Discord.Rest.IRestMessageChannel
  isExternal: true
  name: SendMessageAsync(String, Boolean, Embed, RequestOptions)
  nameWithType: IRestMessageChannel.SendMessageAsync(String, Boolean, Embed, RequestOptions)
  fullName: Discord.Rest.IRestMessageChannel.SendMessageAsync(System.String, System.Boolean, Discord.Embed, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.IRestMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
    name: SendMessageAsync
    nameWithType: IRestMessageChannel.SendMessageAsync
    fullName: Discord.Rest.IRestMessageChannel.SendMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.IRestMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
    name: SendMessageAsync
    nameWithType: IRestMessageChannel.SendMessageAsync
    fullName: Discord.Rest.IRestMessageChannel.SendMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Embed
  commentId: T:Discord.Embed
  parent: Discord
  name: Embed
  nameWithType: Embed
  fullName: Discord.Embed
- uid: System.Threading.Tasks.Task{Discord.Rest.RestUserMessage}
  commentId: T:System.Threading.Tasks.Task{Discord.Rest.RestUserMessage}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RestUserMessage>
  nameWithType: Task<RestUserMessage>
  fullName: System.Threading.Tasks.Task<Discord.Rest.RestUserMessage>
  nameWithType.vb: Task(Of RestUserMessage)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.Rest.RestUserMessage)
  name.vb: Task(Of RestUserMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestUserMessage
    name: RestUserMessage
    nameWithType: RestUserMessage
    fullName: Discord.Rest.RestUserMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestUserMessage
    name: RestUserMessage
    nameWithType: RestUserMessage
    fullName: Discord.Rest.RestUserMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.DiscordConfig
  commentId: T:Discord.DiscordConfig
  parent: Discord
  name: DiscordConfig
  nameWithType: DiscordConfig
  fullName: Discord.DiscordConfig
- uid: System.IO.Path.GetInvalidPathChars
  commentId: M:System.IO.Path.GetInvalidPathChars
  isExternal: true
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: System.IO.PathTooLongException
  commentId: T:System.IO.PathTooLongException
  isExternal: true
- uid: System.IO.DirectoryNotFoundException
  commentId: T:System.IO.DirectoryNotFoundException
  isExternal: true
- uid: System.UnauthorizedAccessException
  commentId: T:System.UnauthorizedAccessException
  isExternal: true
- uid: System.IO.FileNotFoundException
  commentId: T:System.IO.FileNotFoundException
  isExternal: true
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  isExternal: true
- uid: System.IO.IOException
  commentId: T:System.IO.IOException
  isExternal: true
- uid: Discord.Rest.RestTextChannel.SendFileAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.SendFileAsync
  name: SendFileAsync
  nameWithType: RestTextChannel.SendFileAsync
  fullName: Discord.Rest.RestTextChannel.SendFileAsync
- uid: Discord.Rest.IRestMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.Rest.IRestMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.Rest.IRestMessageChannel
  isExternal: true
  name: SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: IRestMessageChannel.SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.Rest.IRestMessageChannel.SendFileAsync(System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  spec.csharp:
  - uid: Discord.Rest.IRestMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: IRestMessageChannel.SendFileAsync
    fullName: Discord.Rest.IRestMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.IRestMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: IRestMessageChannel.SendFileAsync
    fullName: Discord.Rest.IRestMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.IRestMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.Rest.IRestMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.Rest.IRestMessageChannel
  isExternal: true
  name: SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: IRestMessageChannel.SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.Rest.IRestMessageChannel.SendFileAsync(System.IO.Stream, System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  spec.csharp:
  - uid: Discord.Rest.IRestMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: IRestMessageChannel.SendFileAsync
    fullName: Discord.Rest.IRestMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.IRestMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: IRestMessageChannel.SendFileAsync
    fullName: Discord.Rest.IRestMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Discord.Rest.RestTextChannel.DeleteMessageAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.DeleteMessageAsync
  name: DeleteMessageAsync
  nameWithType: RestTextChannel.DeleteMessageAsync
  fullName: Discord.Rest.RestTextChannel.DeleteMessageAsync
- uid: Discord.IMessageChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  isExternal: true
  name: DeleteMessageAsync(UInt64, RequestOptions)
  nameWithType: IMessageChannel.DeleteMessageAsync(UInt64, RequestOptions)
  fullName: Discord.IMessageChannel.DeleteMessageAsync(System.UInt64, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
    name: DeleteMessageAsync
    nameWithType: IMessageChannel.DeleteMessageAsync
    fullName: Discord.IMessageChannel.DeleteMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
    name: DeleteMessageAsync
    nameWithType: IMessageChannel.DeleteMessageAsync
    fullName: Discord.IMessageChannel.DeleteMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessageChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  name: DeleteMessageAsync(IMessage, RequestOptions)
  nameWithType: IMessageChannel.DeleteMessageAsync(IMessage, RequestOptions)
  fullName: Discord.IMessageChannel.DeleteMessageAsync(Discord.IMessage, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
    name: DeleteMessageAsync
    nameWithType: IMessageChannel.DeleteMessageAsync
    fullName: Discord.IMessageChannel.DeleteMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
    name: DeleteMessageAsync
    nameWithType: IMessageChannel.DeleteMessageAsync
    fullName: Discord.IMessageChannel.DeleteMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.DeleteMessagesAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.DeleteMessagesAsync
  name: DeleteMessagesAsync
  nameWithType: RestTextChannel.DeleteMessagesAsync
  fullName: Discord.Rest.RestTextChannel.DeleteMessagesAsync
- uid: Discord.ITextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{Discord.IMessage},Discord.RequestOptions)
  commentId: M:Discord.ITextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{Discord.IMessage},Discord.RequestOptions)
  parent: Discord.ITextChannel
  isExternal: true
  name: DeleteMessagesAsync(IEnumerable<IMessage>, RequestOptions)
  nameWithType: ITextChannel.DeleteMessagesAsync(IEnumerable<IMessage>, RequestOptions)
  fullName: Discord.ITextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable<Discord.IMessage>, Discord.RequestOptions)
  nameWithType.vb: ITextChannel.DeleteMessagesAsync(IEnumerable(Of IMessage), RequestOptions)
  fullName.vb: Discord.ITextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable(Of Discord.IMessage), Discord.RequestOptions)
  name.vb: DeleteMessagesAsync(IEnumerable(Of IMessage), RequestOptions)
  spec.csharp:
  - uid: Discord.ITextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{Discord.IMessage},Discord.RequestOptions)
    name: DeleteMessagesAsync
    nameWithType: ITextChannel.DeleteMessagesAsync
    fullName: Discord.ITextChannel.DeleteMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.ITextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{Discord.IMessage},Discord.RequestOptions)
    name: DeleteMessagesAsync
    nameWithType: ITextChannel.DeleteMessagesAsync
    fullName: Discord.ITextChannel.DeleteMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Discord.IMessage}
  commentId: T:System.Collections.Generic.IEnumerable{Discord.IMessage}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IMessage>
  nameWithType: IEnumerable<IMessage>
  fullName: System.Collections.Generic.IEnumerable<Discord.IMessage>
  nameWithType.vb: IEnumerable(Of IMessage)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Discord.IMessage)
  name.vb: IEnumerable(Of IMessage)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.ITextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{System.UInt64},Discord.RequestOptions)
  commentId: M:Discord.ITextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{System.UInt64},Discord.RequestOptions)
  parent: Discord.ITextChannel
  isExternal: true
  name: DeleteMessagesAsync(IEnumerable<UInt64>, RequestOptions)
  nameWithType: ITextChannel.DeleteMessagesAsync(IEnumerable<UInt64>, RequestOptions)
  fullName: Discord.ITextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable<System.UInt64>, Discord.RequestOptions)
  nameWithType.vb: ITextChannel.DeleteMessagesAsync(IEnumerable(Of UInt64), RequestOptions)
  fullName.vb: Discord.ITextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable(Of System.UInt64), Discord.RequestOptions)
  name.vb: DeleteMessagesAsync(IEnumerable(Of UInt64), RequestOptions)
  spec.csharp:
  - uid: Discord.ITextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{System.UInt64},Discord.RequestOptions)
    name: DeleteMessagesAsync
    nameWithType: ITextChannel.DeleteMessagesAsync
    fullName: Discord.ITextChannel.DeleteMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.ITextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{System.UInt64},Discord.RequestOptions)
    name: DeleteMessagesAsync
    nameWithType: ITextChannel.DeleteMessagesAsync
    fullName: Discord.ITextChannel.DeleteMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.UInt64}
  commentId: T:System.Collections.Generic.IEnumerable{System.UInt64}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<UInt64>
  nameWithType: IEnumerable<UInt64>
  fullName: System.Collections.Generic.IEnumerable<System.UInt64>
  nameWithType.vb: IEnumerable(Of UInt64)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.UInt64)
  name.vb: IEnumerable(Of UInt64)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.TriggerTypingAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.TriggerTypingAsync
  name: TriggerTypingAsync
  nameWithType: RestTextChannel.TriggerTypingAsync
  fullName: Discord.Rest.RestTextChannel.TriggerTypingAsync
- uid: Discord.IMessageChannel.TriggerTypingAsync(Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.TriggerTypingAsync(Discord.RequestOptions)
  parent: Discord.IMessageChannel
  name: TriggerTypingAsync(RequestOptions)
  nameWithType: IMessageChannel.TriggerTypingAsync(RequestOptions)
  fullName: Discord.IMessageChannel.TriggerTypingAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.TriggerTypingAsync(Discord.RequestOptions)
    name: TriggerTypingAsync
    nameWithType: IMessageChannel.TriggerTypingAsync
    fullName: Discord.IMessageChannel.TriggerTypingAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.TriggerTypingAsync(Discord.RequestOptions)
    name: TriggerTypingAsync
    nameWithType: IMessageChannel.TriggerTypingAsync
    fullName: Discord.IMessageChannel.TriggerTypingAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.EnterTypingState*
  commentId: Overload:Discord.Rest.RestTextChannel.EnterTypingState
  name: EnterTypingState
  nameWithType: RestTextChannel.EnterTypingState
  fullName: Discord.Rest.RestTextChannel.EnterTypingState
- uid: Discord.IMessageChannel.EnterTypingState(Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.EnterTypingState(Discord.RequestOptions)
  parent: Discord.IMessageChannel
  name: EnterTypingState(RequestOptions)
  nameWithType: IMessageChannel.EnterTypingState(RequestOptions)
  fullName: Discord.IMessageChannel.EnterTypingState(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.EnterTypingState(Discord.RequestOptions)
    name: EnterTypingState
    nameWithType: IMessageChannel.EnterTypingState
    fullName: Discord.IMessageChannel.EnterTypingState
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.EnterTypingState(Discord.RequestOptions)
    name: EnterTypingState
    nameWithType: IMessageChannel.EnterTypingState
    fullName: Discord.IMessageChannel.EnterTypingState
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Discord.Rest.RestTextChannel.CreateWebhookAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.CreateWebhookAsync
  name: CreateWebhookAsync
  nameWithType: RestTextChannel.CreateWebhookAsync
  fullName: Discord.Rest.RestTextChannel.CreateWebhookAsync
- uid: System.Threading.Tasks.Task{Discord.Rest.RestWebhook}
  commentId: T:System.Threading.Tasks.Task{Discord.Rest.RestWebhook}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RestWebhook>
  nameWithType: Task<RestWebhook>
  fullName: System.Threading.Tasks.Task<Discord.Rest.RestWebhook>
  nameWithType.vb: Task(Of RestWebhook)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.Rest.RestWebhook)
  name.vb: Task(Of RestWebhook)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestWebhook
    name: RestWebhook
    nameWithType: RestWebhook
    fullName: Discord.Rest.RestWebhook
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestWebhook
    name: RestWebhook
    nameWithType: RestWebhook
    fullName: Discord.Rest.RestWebhook
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.GetWebhookAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.GetWebhookAsync
  name: GetWebhookAsync
  nameWithType: RestTextChannel.GetWebhookAsync
  fullName: Discord.Rest.RestTextChannel.GetWebhookAsync
- uid: Discord.Rest.RestTextChannel.GetWebhooksAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.GetWebhooksAsync
  name: GetWebhooksAsync
  nameWithType: RestTextChannel.GetWebhooksAsync
  fullName: Discord.Rest.RestTextChannel.GetWebhooksAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestWebhook}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestWebhook}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<RestWebhook>>
  nameWithType: Task<IReadOnlyCollection<RestWebhook>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.Rest.RestWebhook>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestWebhook))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.Rest.RestWebhook))
  name.vb: Task(Of IReadOnlyCollection(Of RestWebhook))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestWebhook
    name: RestWebhook
    nameWithType: RestWebhook
    fullName: Discord.Rest.RestWebhook
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestWebhook
    name: RestWebhook
    nameWithType: RestWebhook
    fullName: Discord.Rest.RestWebhook
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.GetCategoryAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.GetCategoryAsync
  name: GetCategoryAsync
  nameWithType: RestTextChannel.GetCategoryAsync
  fullName: Discord.Rest.RestTextChannel.GetCategoryAsync
- uid: System.Threading.Tasks.Task{Discord.ICategoryChannel}
  commentId: T:System.Threading.Tasks.Task{Discord.ICategoryChannel}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ICategoryChannel>
  nameWithType: Task<ICategoryChannel>
  fullName: System.Threading.Tasks.Task<Discord.ICategoryChannel>
  nameWithType.vb: Task(Of ICategoryChannel)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.ICategoryChannel)
  name.vb: Task(Of ICategoryChannel)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ICategoryChannel
    name: ICategoryChannel
    nameWithType: ICategoryChannel
    fullName: Discord.ICategoryChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ICategoryChannel
    name: ICategoryChannel
    nameWithType: ICategoryChannel
    fullName: Discord.ICategoryChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.SyncPermissionsAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.SyncPermissionsAsync
  name: SyncPermissionsAsync
  nameWithType: RestTextChannel.SyncPermissionsAsync
  fullName: Discord.Rest.RestTextChannel.SyncPermissionsAsync
- uid: Discord.INestedChannel.SyncPermissionsAsync(Discord.RequestOptions)
  commentId: M:Discord.INestedChannel.SyncPermissionsAsync(Discord.RequestOptions)
  parent: Discord.INestedChannel
  name: SyncPermissionsAsync(RequestOptions)
  nameWithType: INestedChannel.SyncPermissionsAsync(RequestOptions)
  fullName: Discord.INestedChannel.SyncPermissionsAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.INestedChannel.SyncPermissionsAsync(Discord.RequestOptions)
    name: SyncPermissionsAsync
    nameWithType: INestedChannel.SyncPermissionsAsync
    fullName: Discord.INestedChannel.SyncPermissionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.INestedChannel.SyncPermissionsAsync(Discord.RequestOptions)
    name: SyncPermissionsAsync
    nameWithType: INestedChannel.SyncPermissionsAsync
    fullName: Discord.INestedChannel.SyncPermissionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.CreateInviteAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.CreateInviteAsync
  name: CreateInviteAsync
  nameWithType: RestTextChannel.CreateInviteAsync
  fullName: Discord.Rest.RestTextChannel.CreateInviteAsync
- uid: Discord.INestedChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
  commentId: M:Discord.INestedChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
  parent: Discord.INestedChannel
  isExternal: true
  name: CreateInviteAsync(Nullable<Int32>, Nullable<Int32>, Boolean, Boolean, RequestOptions)
  nameWithType: INestedChannel.CreateInviteAsync(Nullable<Int32>, Nullable<Int32>, Boolean, Boolean, RequestOptions)
  fullName: Discord.INestedChannel.CreateInviteAsync(System.Nullable<System.Int32>, System.Nullable<System.Int32>, System.Boolean, System.Boolean, Discord.RequestOptions)
  nameWithType.vb: INestedChannel.CreateInviteAsync(Nullable(Of Int32), Nullable(Of Int32), Boolean, Boolean, RequestOptions)
  fullName.vb: Discord.INestedChannel.CreateInviteAsync(System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), System.Boolean, System.Boolean, Discord.RequestOptions)
  name.vb: CreateInviteAsync(Nullable(Of Int32), Nullable(Of Int32), Boolean, Boolean, RequestOptions)
  spec.csharp:
  - uid: Discord.INestedChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
    name: CreateInviteAsync
    nameWithType: INestedChannel.CreateInviteAsync
    fullName: Discord.INestedChannel.CreateInviteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.INestedChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
    name: CreateInviteAsync
    nameWithType: INestedChannel.CreateInviteAsync
    fullName: Discord.INestedChannel.CreateInviteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.IInviteMetadata}
  commentId: T:System.Threading.Tasks.Task{Discord.IInviteMetadata}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IInviteMetadata>
  nameWithType: Task<IInviteMetadata>
  fullName: System.Threading.Tasks.Task<Discord.IInviteMetadata>
  nameWithType.vb: Task(Of IInviteMetadata)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IInviteMetadata)
  name.vb: Task(Of IInviteMetadata)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IInviteMetadata
    name: IInviteMetadata
    nameWithType: IInviteMetadata
    fullName: Discord.IInviteMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IInviteMetadata
    name: IInviteMetadata
    nameWithType: IInviteMetadata
    fullName: Discord.IInviteMetadata
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.GetInvitesAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.GetInvitesAsync
  name: GetInvitesAsync
  nameWithType: RestTextChannel.GetInvitesAsync
  fullName: Discord.Rest.RestTextChannel.GetInvitesAsync
- uid: Discord.INestedChannel.GetInvitesAsync(Discord.RequestOptions)
  commentId: M:Discord.INestedChannel.GetInvitesAsync(Discord.RequestOptions)
  parent: Discord.INestedChannel
  name: GetInvitesAsync(RequestOptions)
  nameWithType: INestedChannel.GetInvitesAsync(RequestOptions)
  fullName: Discord.INestedChannel.GetInvitesAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.INestedChannel.GetInvitesAsync(Discord.RequestOptions)
    name: GetInvitesAsync
    nameWithType: INestedChannel.GetInvitesAsync
    fullName: Discord.INestedChannel.GetInvitesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.INestedChannel.GetInvitesAsync(Discord.RequestOptions)
    name: GetInvitesAsync
    nameWithType: INestedChannel.GetInvitesAsync
    fullName: Discord.INestedChannel.GetInvitesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IInviteMetadata}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IInviteMetadata}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<IInviteMetadata>>
  nameWithType: Task<IReadOnlyCollection<IInviteMetadata>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.IInviteMetadata>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IInviteMetadata))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IInviteMetadata))
  name.vb: Task(Of IReadOnlyCollection(Of IInviteMetadata))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IInviteMetadata
    name: IInviteMetadata
    nameWithType: IInviteMetadata
    fullName: Discord.IInviteMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IInviteMetadata
    name: IInviteMetadata
    nameWithType: IInviteMetadata
    fullName: Discord.IInviteMetadata
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.Discord#ITextChannel#CreateWebhookAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.Discord#ITextChannel#CreateWebhookAsync
  name: ITextChannel.CreateWebhookAsync
  nameWithType: RestTextChannel.ITextChannel.CreateWebhookAsync
  fullName: Discord.Rest.RestTextChannel.Discord.ITextChannel.CreateWebhookAsync
  nameWithType.vb: RestTextChannel.Discord.ITextChannel.CreateWebhookAsync
  name.vb: Discord.ITextChannel.CreateWebhookAsync
- uid: Discord.ITextChannel.CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)
  commentId: M:Discord.ITextChannel.CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)
  parent: Discord.ITextChannel
  isExternal: true
  name: CreateWebhookAsync(String, Stream, RequestOptions)
  nameWithType: ITextChannel.CreateWebhookAsync(String, Stream, RequestOptions)
  fullName: Discord.ITextChannel.CreateWebhookAsync(System.String, System.IO.Stream, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.ITextChannel.CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)
    name: CreateWebhookAsync
    nameWithType: ITextChannel.CreateWebhookAsync
    fullName: Discord.ITextChannel.CreateWebhookAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.ITextChannel.CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)
    name: CreateWebhookAsync
    nameWithType: ITextChannel.CreateWebhookAsync
    fullName: Discord.ITextChannel.CreateWebhookAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.IWebhook}
  commentId: T:System.Threading.Tasks.Task{Discord.IWebhook}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IWebhook>
  nameWithType: Task<IWebhook>
  fullName: System.Threading.Tasks.Task<Discord.IWebhook>
  nameWithType.vb: Task(Of IWebhook)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IWebhook)
  name.vb: Task(Of IWebhook)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IWebhook
    name: IWebhook
    nameWithType: IWebhook
    fullName: Discord.IWebhook
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IWebhook
    name: IWebhook
    nameWithType: IWebhook
    fullName: Discord.IWebhook
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.Discord#ITextChannel#GetWebhookAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.Discord#ITextChannel#GetWebhookAsync
  name: ITextChannel.GetWebhookAsync
  nameWithType: RestTextChannel.ITextChannel.GetWebhookAsync
  fullName: Discord.Rest.RestTextChannel.Discord.ITextChannel.GetWebhookAsync
  nameWithType.vb: RestTextChannel.Discord.ITextChannel.GetWebhookAsync
  name.vb: Discord.ITextChannel.GetWebhookAsync
- uid: Discord.ITextChannel.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.ITextChannel.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.ITextChannel
  isExternal: true
  name: GetWebhookAsync(UInt64, RequestOptions)
  nameWithType: ITextChannel.GetWebhookAsync(UInt64, RequestOptions)
  fullName: Discord.ITextChannel.GetWebhookAsync(System.UInt64, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.ITextChannel.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
    name: GetWebhookAsync
    nameWithType: ITextChannel.GetWebhookAsync
    fullName: Discord.ITextChannel.GetWebhookAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.ITextChannel.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
    name: GetWebhookAsync
    nameWithType: ITextChannel.GetWebhookAsync
    fullName: Discord.ITextChannel.GetWebhookAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.Discord#ITextChannel#GetWebhooksAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.Discord#ITextChannel#GetWebhooksAsync
  name: ITextChannel.GetWebhooksAsync
  nameWithType: RestTextChannel.ITextChannel.GetWebhooksAsync
  fullName: Discord.Rest.RestTextChannel.Discord.ITextChannel.GetWebhooksAsync
  nameWithType.vb: RestTextChannel.Discord.ITextChannel.GetWebhooksAsync
  name.vb: Discord.ITextChannel.GetWebhooksAsync
- uid: Discord.ITextChannel.GetWebhooksAsync(Discord.RequestOptions)
  commentId: M:Discord.ITextChannel.GetWebhooksAsync(Discord.RequestOptions)
  parent: Discord.ITextChannel
  name: GetWebhooksAsync(RequestOptions)
  nameWithType: ITextChannel.GetWebhooksAsync(RequestOptions)
  fullName: Discord.ITextChannel.GetWebhooksAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.ITextChannel.GetWebhooksAsync(Discord.RequestOptions)
    name: GetWebhooksAsync
    nameWithType: ITextChannel.GetWebhooksAsync
    fullName: Discord.ITextChannel.GetWebhooksAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.ITextChannel.GetWebhooksAsync(Discord.RequestOptions)
    name: GetWebhooksAsync
    nameWithType: ITextChannel.GetWebhooksAsync
    fullName: Discord.ITextChannel.GetWebhooksAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IWebhook}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IWebhook}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<IWebhook>>
  nameWithType: Task<IReadOnlyCollection<IWebhook>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.IWebhook>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IWebhook))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IWebhook))
  name.vb: Task(Of IReadOnlyCollection(Of IWebhook))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IWebhook
    name: IWebhook
    nameWithType: IWebhook
    fullName: Discord.IWebhook
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IWebhook
    name: IWebhook
    nameWithType: IWebhook
    fullName: Discord.IWebhook
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetMessageAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetMessageAsync
  name: IMessageChannel.GetMessageAsync
  nameWithType: RestTextChannel.IMessageChannel.GetMessageAsync
  fullName: Discord.Rest.RestTextChannel.Discord.IMessageChannel.GetMessageAsync
  nameWithType.vb: RestTextChannel.Discord.IMessageChannel.GetMessageAsync
  name.vb: Discord.IMessageChannel.GetMessageAsync
- uid: Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  isExternal: true
  name: GetMessageAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: IMessageChannel.GetMessageAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.IMessageChannel.GetMessageAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessageAsync
    nameWithType: IMessageChannel.GetMessageAsync
    fullName: Discord.IMessageChannel.GetMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessageAsync
    nameWithType: IMessageChannel.GetMessageAsync
    fullName: Discord.IMessageChannel.GetMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.CacheMode
  commentId: T:Discord.CacheMode
  parent: Discord
  name: CacheMode
  nameWithType: CacheMode
  fullName: Discord.CacheMode
- uid: System.Threading.Tasks.Task{Discord.IMessage}
  commentId: T:System.Threading.Tasks.Task{Discord.IMessage}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IMessage>
  nameWithType: Task<IMessage>
  fullName: System.Threading.Tasks.Task<Discord.IMessage>
  nameWithType.vb: Task(Of IMessage)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IMessage)
  name.vb: Task(Of IMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetMessagesAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetMessagesAsync
  name: IMessageChannel.GetMessagesAsync
  nameWithType: RestTextChannel.IMessageChannel.GetMessagesAsync
  fullName: Discord.Rest.RestTextChannel.Discord.IMessageChannel.GetMessagesAsync
  nameWithType.vb: RestTextChannel.Discord.IMessageChannel.GetMessagesAsync
  name.vb: Discord.IMessageChannel.GetMessagesAsync
- uid: Discord.IMessageChannel.GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  isExternal: true
  name: GetMessagesAsync(Int32, CacheMode, RequestOptions)
  nameWithType: IMessageChannel.GetMessagesAsync(Int32, CacheMode, RequestOptions)
  fullName: Discord.IMessageChannel.GetMessagesAsync(System.Int32, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IMessageChannel.GetMessagesAsync
    fullName: Discord.IMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IMessageChannel.GetMessagesAsync
    fullName: Discord.IMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IMessage}}
  commentId: T:System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IMessage}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IAsyncEnumerable`1
  name: IAsyncEnumerable<IReadOnlyCollection<IMessage>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<IMessage>>
  fullName: System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyCollection<Discord.IMessage>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IMessage))
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IMessage))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IMessage))
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  isExternal: true
  name: GetMessagesAsync(UInt64, Direction, Int32, CacheMode, RequestOptions)
  nameWithType: IMessageChannel.GetMessagesAsync(UInt64, Direction, Int32, CacheMode, RequestOptions)
  fullName: Discord.IMessageChannel.GetMessagesAsync(System.UInt64, Discord.Direction, System.Int32, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IMessageChannel.GetMessagesAsync
    fullName: Discord.IMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IMessageChannel.GetMessagesAsync
    fullName: Discord.IMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  isExternal: true
  name: GetMessagesAsync(IMessage, Direction, Int32, CacheMode, RequestOptions)
  nameWithType: IMessageChannel.GetMessagesAsync(IMessage, Direction, Int32, CacheMode, RequestOptions)
  fullName: Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage, Discord.Direction, System.Int32, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IMessageChannel.GetMessagesAsync
    fullName: Discord.IMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IMessageChannel.GetMessagesAsync
    fullName: Discord.IMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetPinnedMessagesAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetPinnedMessagesAsync
  name: IMessageChannel.GetPinnedMessagesAsync
  nameWithType: RestTextChannel.IMessageChannel.GetPinnedMessagesAsync
  fullName: Discord.Rest.RestTextChannel.Discord.IMessageChannel.GetPinnedMessagesAsync
  nameWithType.vb: RestTextChannel.Discord.IMessageChannel.GetPinnedMessagesAsync
  name.vb: Discord.IMessageChannel.GetPinnedMessagesAsync
- uid: Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  parent: Discord.IMessageChannel
  name: GetPinnedMessagesAsync(RequestOptions)
  nameWithType: IMessageChannel.GetPinnedMessagesAsync(RequestOptions)
  fullName: Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
    name: GetPinnedMessagesAsync
    nameWithType: IMessageChannel.GetPinnedMessagesAsync
    fullName: Discord.IMessageChannel.GetPinnedMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
    name: GetPinnedMessagesAsync
    nameWithType: IMessageChannel.GetPinnedMessagesAsync
    fullName: Discord.IMessageChannel.GetPinnedMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IMessage}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IMessage}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<IMessage>>
  nameWithType: Task<IReadOnlyCollection<IMessage>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.IMessage>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IMessage))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IMessage))
  name.vb: Task(Of IReadOnlyCollection(Of IMessage))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.Discord#IMessageChannel#SendFileAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.Discord#IMessageChannel#SendFileAsync
  name: IMessageChannel.SendFileAsync
  nameWithType: RestTextChannel.IMessageChannel.SendFileAsync
  fullName: Discord.Rest.RestTextChannel.Discord.IMessageChannel.SendFileAsync
  nameWithType.vb: RestTextChannel.Discord.IMessageChannel.SendFileAsync
  name.vb: Discord.IMessageChannel.SendFileAsync
- uid: Discord.IMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.IMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.IMessageChannel
  isExternal: true
  name: SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: IMessageChannel.SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.IMessageChannel.SendFileAsync(System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  spec.csharp:
  - uid: Discord.IMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: IMessageChannel.SendFileAsync
    fullName: Discord.IMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: IMessageChannel.SendFileAsync
    fullName: Discord.IMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.IUserMessage}
  commentId: T:System.Threading.Tasks.Task{Discord.IUserMessage}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IUserMessage>
  nameWithType: Task<IUserMessage>
  fullName: System.Threading.Tasks.Task<Discord.IUserMessage>
  nameWithType.vb: Task(Of IUserMessage)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IUserMessage)
  name.vb: Task(Of IUserMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.IMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.IMessageChannel
  isExternal: true
  name: SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: IMessageChannel.SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.IMessageChannel.SendFileAsync(System.IO.Stream, System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  spec.csharp:
  - uid: Discord.IMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: IMessageChannel.SendFileAsync
    fullName: Discord.IMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: IMessageChannel.SendFileAsync
    fullName: Discord.IMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.Discord#IMessageChannel#SendMessageAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.Discord#IMessageChannel#SendMessageAsync
  name: IMessageChannel.SendMessageAsync
  nameWithType: RestTextChannel.IMessageChannel.SendMessageAsync
  fullName: Discord.Rest.RestTextChannel.Discord.IMessageChannel.SendMessageAsync
  nameWithType.vb: RestTextChannel.Discord.IMessageChannel.SendMessageAsync
  name.vb: Discord.IMessageChannel.SendMessageAsync
- uid: Discord.IMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  isExternal: true
  name: SendMessageAsync(String, Boolean, Embed, RequestOptions)
  nameWithType: IMessageChannel.SendMessageAsync(String, Boolean, Embed, RequestOptions)
  fullName: Discord.IMessageChannel.SendMessageAsync(System.String, System.Boolean, Discord.Embed, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
    name: SendMessageAsync
    nameWithType: IMessageChannel.SendMessageAsync
    fullName: Discord.IMessageChannel.SendMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
    name: SendMessageAsync
    nameWithType: IMessageChannel.SendMessageAsync
    fullName: Discord.IMessageChannel.SendMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.Discord#IGuildChannel#GetUserAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.Discord#IGuildChannel#GetUserAsync
  name: IGuildChannel.GetUserAsync
  nameWithType: RestTextChannel.IGuildChannel.GetUserAsync
  fullName: Discord.Rest.RestTextChannel.Discord.IGuildChannel.GetUserAsync
  nameWithType.vb: RestTextChannel.Discord.IGuildChannel.GetUserAsync
  name.vb: Discord.IGuildChannel.GetUserAsync
- uid: Discord.IGuildChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuildChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuildChannel
  isExternal: true
  name: GetUserAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: IGuildChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.IGuildChannel.GetUserAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuildChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetUserAsync
    nameWithType: IGuildChannel.GetUserAsync
    fullName: Discord.IGuildChannel.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuildChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetUserAsync
    nameWithType: IGuildChannel.GetUserAsync
    fullName: Discord.IGuildChannel.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.IGuildUser}
  commentId: T:System.Threading.Tasks.Task{Discord.IGuildUser}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IGuildUser>
  nameWithType: Task<IGuildUser>
  fullName: System.Threading.Tasks.Task<Discord.IGuildUser>
  nameWithType.vb: Task(Of IGuildUser)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IGuildUser)
  name.vb: Task(Of IGuildUser)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IGuildUser
    name: IGuildUser
    nameWithType: IGuildUser
    fullName: Discord.IGuildUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IGuildUser
    name: IGuildUser
    nameWithType: IGuildUser
    fullName: Discord.IGuildUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.Discord#IGuildChannel#GetUsersAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.Discord#IGuildChannel#GetUsersAsync
  name: IGuildChannel.GetUsersAsync
  nameWithType: RestTextChannel.IGuildChannel.GetUsersAsync
  fullName: Discord.Rest.RestTextChannel.Discord.IGuildChannel.GetUsersAsync
  nameWithType.vb: RestTextChannel.Discord.IGuildChannel.GetUsersAsync
  name.vb: Discord.IGuildChannel.GetUsersAsync
- uid: Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuildChannel
  name: GetUsersAsync(CacheMode, RequestOptions)
  nameWithType: IGuildChannel.GetUsersAsync(CacheMode, RequestOptions)
  fullName: Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetUsersAsync
    nameWithType: IGuildChannel.GetUsersAsync
    fullName: Discord.IGuildChannel.GetUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetUsersAsync
    nameWithType: IGuildChannel.GetUsersAsync
    fullName: Discord.IGuildChannel.GetUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IGuildUser}}
  commentId: T:System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IGuildUser}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IAsyncEnumerable`1
  name: IAsyncEnumerable<IReadOnlyCollection<IGuildUser>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<IGuildUser>>
  fullName: System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyCollection<Discord.IGuildUser>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IGuildUser))
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IGuildUser))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IGuildUser))
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IGuildUser
    name: IGuildUser
    nameWithType: IGuildUser
    fullName: Discord.IGuildUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IGuildUser
    name: IGuildUser
    nameWithType: IGuildUser
    fullName: Discord.IGuildUser
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.Discord#IChannel#GetUserAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.Discord#IChannel#GetUserAsync
  name: IChannel.GetUserAsync
  nameWithType: RestTextChannel.IChannel.GetUserAsync
  fullName: Discord.Rest.RestTextChannel.Discord.IChannel.GetUserAsync
  nameWithType.vb: RestTextChannel.Discord.IChannel.GetUserAsync
  name.vb: Discord.IChannel.GetUserAsync
- uid: Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IChannel
  isExternal: true
  name: GetUserAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.IChannel.GetUserAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetUserAsync
    nameWithType: IChannel.GetUserAsync
    fullName: Discord.IChannel.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetUserAsync
    nameWithType: IChannel.GetUserAsync
    fullName: Discord.IChannel.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.IUser}
  commentId: T:System.Threading.Tasks.Task{Discord.IUser}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IUser>
  nameWithType: Task<IUser>
  fullName: System.Threading.Tasks.Task<Discord.IUser>
  nameWithType.vb: Task(Of IUser)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IUser)
  name.vb: Task(Of IUser)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.Discord#IChannel#GetUsersAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.Discord#IChannel#GetUsersAsync
  name: IChannel.GetUsersAsync
  nameWithType: RestTextChannel.IChannel.GetUsersAsync
  fullName: Discord.Rest.RestTextChannel.Discord.IChannel.GetUsersAsync
  nameWithType.vb: RestTextChannel.Discord.IChannel.GetUsersAsync
  name.vb: Discord.IChannel.GetUsersAsync
- uid: Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IChannel
  name: GetUsersAsync(CacheMode, RequestOptions)
  nameWithType: IChannel.GetUsersAsync(CacheMode, RequestOptions)
  fullName: Discord.IChannel.GetUsersAsync(Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetUsersAsync
    nameWithType: IChannel.GetUsersAsync
    fullName: Discord.IChannel.GetUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetUsersAsync
    nameWithType: IChannel.GetUsersAsync
    fullName: Discord.IChannel.GetUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IUser}}
  commentId: T:System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IUser}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IAsyncEnumerable`1
  name: IAsyncEnumerable<IReadOnlyCollection<IUser>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<IUser>>
  fullName: System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyCollection<Discord.IUser>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IUser))
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IUser))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IUser))
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestTextChannel.Discord#INestedChannel#GetCategoryAsync*
  commentId: Overload:Discord.Rest.RestTextChannel.Discord#INestedChannel#GetCategoryAsync
  name: INestedChannel.GetCategoryAsync
  nameWithType: RestTextChannel.INestedChannel.GetCategoryAsync
  fullName: Discord.Rest.RestTextChannel.Discord.INestedChannel.GetCategoryAsync
  nameWithType.vb: RestTextChannel.Discord.INestedChannel.GetCategoryAsync
  name.vb: Discord.INestedChannel.GetCategoryAsync
- uid: Discord.INestedChannel.GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.INestedChannel.GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.INestedChannel
  name: GetCategoryAsync(CacheMode, RequestOptions)
  nameWithType: INestedChannel.GetCategoryAsync(CacheMode, RequestOptions)
  fullName: Discord.INestedChannel.GetCategoryAsync(Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.INestedChannel.GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetCategoryAsync
    nameWithType: INestedChannel.GetCategoryAsync
    fullName: Discord.INestedChannel.GetCategoryAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.INestedChannel.GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetCategoryAsync
    nameWithType: INestedChannel.GetCategoryAsync
    fullName: Discord.INestedChannel.GetCategoryAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
