### YamlMime:ManagedReference
items:
- uid: Discord.Rest.RestGuild
  commentId: T:Discord.Rest.RestGuild
  id: RestGuild
  parent: Discord.Rest
  children:
  - Discord.Rest.RestGuild.AddBanAsync(Discord.IUser,System.Int32,System.String,Discord.RequestOptions)
  - Discord.Rest.RestGuild.AddBanAsync(System.UInt64,System.Int32,System.String,Discord.RequestOptions)
  - Discord.Rest.RestGuild.AddGuildUserAsync(System.UInt64,System.String,Action{Discord.AddGuildUserProperties},Discord.RequestOptions)
  - Discord.Rest.RestGuild.AFKChannelId
  - Discord.Rest.RestGuild.AFKTimeout
  - Discord.Rest.RestGuild.ApplicationId
  - Discord.Rest.RestGuild.BannerId
  - Discord.Rest.RestGuild.BannerUrl
  - Discord.Rest.RestGuild.CreateCategoryChannelAsync(System.String,Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  - Discord.Rest.RestGuild.CreatedAt
  - Discord.Rest.RestGuild.CreateEmoteAsync(System.String,Discord.Image,Discord.Optional{IEnumerable{Discord.IRole}},Discord.RequestOptions)
  - Discord.Rest.RestGuild.CreateIntegrationAsync(System.UInt64,System.String,Discord.RequestOptions)
  - Discord.Rest.RestGuild.CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)
  - Discord.Rest.RestGuild.CreateTextChannelAsync(System.String,Action{Discord.TextChannelProperties},Discord.RequestOptions)
  - Discord.Rest.RestGuild.CreateVoiceChannelAsync(System.String,Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  - Discord.Rest.RestGuild.DefaultChannelId
  - Discord.Rest.RestGuild.DefaultMessageNotifications
  - Discord.Rest.RestGuild.DeleteAsync(Discord.RequestOptions)
  - Discord.Rest.RestGuild.DeleteEmoteAsync(Discord.GuildEmote,Discord.RequestOptions)
  - Discord.Rest.RestGuild.Description
  - Discord.Rest.RestGuild.Discord#IGuild#AudioClient
  - Discord.Rest.RestGuild.Discord#IGuild#EveryoneRole
  - Discord.Rest.RestGuild.EmbedChannelId
  - Discord.Rest.RestGuild.Emotes
  - Discord.Rest.RestGuild.EveryoneRole
  - Discord.Rest.RestGuild.ExplicitContentFilter
  - Discord.Rest.RestGuild.Features
  - Discord.Rest.RestGuild.GetAFKChannelAsync(Discord.RequestOptions)
  - Discord.Rest.RestGuild.GetAuditLogsAsync(System.Int32,Discord.RequestOptions,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{Discord.ActionType})
  - Discord.Rest.RestGuild.GetBanAsync(Discord.IUser,Discord.RequestOptions)
  - Discord.Rest.RestGuild.GetBanAsync(System.UInt64,Discord.RequestOptions)
  - Discord.Rest.RestGuild.GetBansAsync(Discord.RequestOptions)
  - Discord.Rest.RestGuild.GetCategoryChannelsAsync(Discord.RequestOptions)
  - Discord.Rest.RestGuild.GetChannelAsync(System.UInt64,Discord.RequestOptions)
  - Discord.Rest.RestGuild.GetChannelsAsync(Discord.RequestOptions)
  - Discord.Rest.RestGuild.GetCurrentUserAsync(Discord.RequestOptions)
  - Discord.Rest.RestGuild.GetDefaultChannelAsync(Discord.RequestOptions)
  - Discord.Rest.RestGuild.GetEmbedChannelAsync(Discord.RequestOptions)
  - Discord.Rest.RestGuild.GetEmoteAsync(System.UInt64,Discord.RequestOptions)
  - Discord.Rest.RestGuild.GetIntegrationsAsync(Discord.RequestOptions)
  - Discord.Rest.RestGuild.GetInvitesAsync(Discord.RequestOptions)
  - Discord.Rest.RestGuild.GetOwnerAsync(Discord.RequestOptions)
  - Discord.Rest.RestGuild.GetRole(System.UInt64)
  - Discord.Rest.RestGuild.GetSystemChannelAsync(Discord.RequestOptions)
  - Discord.Rest.RestGuild.GetTextChannelAsync(System.UInt64,Discord.RequestOptions)
  - Discord.Rest.RestGuild.GetTextChannelsAsync(Discord.RequestOptions)
  - Discord.Rest.RestGuild.GetUserAsync(System.UInt64,Discord.RequestOptions)
  - Discord.Rest.RestGuild.GetUsersAsync(Discord.RequestOptions)
  - Discord.Rest.RestGuild.GetVanityInviteAsync(Discord.RequestOptions)
  - Discord.Rest.RestGuild.GetVoiceChannelAsync(System.UInt64,Discord.RequestOptions)
  - Discord.Rest.RestGuild.GetVoiceChannelsAsync(Discord.RequestOptions)
  - Discord.Rest.RestGuild.GetVoiceRegionsAsync(Discord.RequestOptions)
  - Discord.Rest.RestGuild.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  - Discord.Rest.RestGuild.GetWebhooksAsync(Discord.RequestOptions)
  - Discord.Rest.RestGuild.IconId
  - Discord.Rest.RestGuild.IconUrl
  - Discord.Rest.RestGuild.IsEmbeddable
  - Discord.Rest.RestGuild.LeaveAsync(Discord.RequestOptions)
  - Discord.Rest.RestGuild.MfaLevel
  - Discord.Rest.RestGuild.ModifyAsync(Action{Discord.GuildProperties},Discord.RequestOptions)
  - Discord.Rest.RestGuild.ModifyEmbedAsync(Action{Discord.GuildEmbedProperties},Discord.RequestOptions)
  - Discord.Rest.RestGuild.ModifyEmoteAsync(Discord.GuildEmote,Action{Discord.EmoteProperties},Discord.RequestOptions)
  - Discord.Rest.RestGuild.Name
  - Discord.Rest.RestGuild.OwnerId
  - Discord.Rest.RestGuild.PreferredCulture
  - Discord.Rest.RestGuild.PreferredLocale
  - Discord.Rest.RestGuild.PremiumSubscriptionCount
  - Discord.Rest.RestGuild.PremiumTier
  - Discord.Rest.RestGuild.PruneUsersAsync(System.Int32,System.Boolean,Discord.RequestOptions)
  - Discord.Rest.RestGuild.RemoveBanAsync(Discord.IUser,Discord.RequestOptions)
  - Discord.Rest.RestGuild.RemoveBanAsync(System.UInt64,Discord.RequestOptions)
  - Discord.Rest.RestGuild.ReorderChannelsAsync(IEnumerable{Discord.ReorderChannelProperties},Discord.RequestOptions)
  - Discord.Rest.RestGuild.ReorderRolesAsync(IEnumerable{Discord.ReorderRoleProperties},Discord.RequestOptions)
  - Discord.Rest.RestGuild.Roles
  - Discord.Rest.RestGuild.SplashId
  - Discord.Rest.RestGuild.SplashUrl
  - Discord.Rest.RestGuild.SystemChannelFlags
  - Discord.Rest.RestGuild.SystemChannelId
  - Discord.Rest.RestGuild.ToString
  - Discord.Rest.RestGuild.UpdateAsync(Discord.RequestOptions)
  - Discord.Rest.RestGuild.VanityURLCode
  - Discord.Rest.RestGuild.VerificationLevel
  - Discord.Rest.RestGuild.VoiceRegionId
  langs:
  - csharp
  - vb
  name: RestGuild
  nameWithType: RestGuild
  fullName: Discord.Rest.RestGuild
  type: Class
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RestGuild
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 16
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nRepresents a REST-based guild/server.\n"
  example: []
  syntax:
    content: 'public class RestGuild : RestEntity<ulong>, IEntity<ulong>, IGuild, IDeletable, ISnowflakeEntity, IEntity<ulong>, IUpdateable'
    content.vb: >-
      Public Class RestGuild
          Inherits RestEntity(Of ULong)
          Implements IEntity(Of ULong), IGuild, IDeletable, ISnowflakeEntity, IEntity(Of ULong), IUpdateable
  inheritance:
  - System.Object
  - Discord.Rest.RestEntity{System.UInt64}
  implements:
  - Discord.IEntity{System.UInt64}
  - Discord.IGuild
  - Discord.IDeletable
  - Discord.ISnowflakeEntity
  - Discord.IEntity{System.UInt64}
  - Discord.IUpdateable
  inheritedMembers:
  - Discord.Rest.RestEntity{System.UInt64}.Id
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.Rest.RestGuild.Name
  commentId: P:Discord.Rest.RestGuild.Name
  id: Name
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: RestGuild.Name
  fullName: Discord.Rest.RestGuild.Name
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Name
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 24
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Discord.Rest.RestGuild.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.AFKTimeout
  commentId: P:Discord.Rest.RestGuild.AFKTimeout
  id: AFKTimeout
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: AFKTimeout
  nameWithType: RestGuild.AFKTimeout
  fullName: Discord.Rest.RestGuild.AFKTimeout
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: AFKTimeout
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 26
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public int AFKTimeout { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property AFKTimeout As Integer
  overload: Discord.Rest.RestGuild.AFKTimeout*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.IsEmbeddable
  commentId: P:Discord.Rest.RestGuild.IsEmbeddable
  id: IsEmbeddable
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: IsEmbeddable
  nameWithType: RestGuild.IsEmbeddable
  fullName: Discord.Rest.RestGuild.IsEmbeddable
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsEmbeddable
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 28
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public bool IsEmbeddable { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsEmbeddable As Boolean
  overload: Discord.Rest.RestGuild.IsEmbeddable*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.VerificationLevel
  commentId: P:Discord.Rest.RestGuild.VerificationLevel
  id: VerificationLevel
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: VerificationLevel
  nameWithType: RestGuild.VerificationLevel
  fullName: Discord.Rest.RestGuild.VerificationLevel
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: VerificationLevel
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 30
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the level of requirements a user must fulfill before being allowed to post messages in this guild.\n"
  example: []
  syntax:
    content: public VerificationLevel VerificationLevel { get; }
    parameters: []
    return:
      type: Discord.VerificationLevel
      description: "\nThe level of requirements.\n"
    content.vb: Public ReadOnly Property VerificationLevel As VerificationLevel
  overload: Discord.Rest.RestGuild.VerificationLevel*
  implements:
  - Discord.IGuild.VerificationLevel
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.MfaLevel
  commentId: P:Discord.Rest.RestGuild.MfaLevel
  id: MfaLevel
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: MfaLevel
  nameWithType: RestGuild.MfaLevel
  fullName: Discord.Rest.RestGuild.MfaLevel
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: MfaLevel
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 32
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the level of Multi-Factor Authentication requirements a user must fulfill before being allowed to\nperform administrative actions in this guild.\n"
  example: []
  syntax:
    content: public MfaLevel MfaLevel { get; }
    parameters: []
    return:
      type: Discord.MfaLevel
      description: "\nThe level of MFA requirement.\n"
    content.vb: Public ReadOnly Property MfaLevel As MfaLevel
  overload: Discord.Rest.RestGuild.MfaLevel*
  implements:
  - Discord.IGuild.MfaLevel
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.DefaultMessageNotifications
  commentId: P:Discord.Rest.RestGuild.DefaultMessageNotifications
  id: DefaultMessageNotifications
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: DefaultMessageNotifications
  nameWithType: RestGuild.DefaultMessageNotifications
  fullName: Discord.Rest.RestGuild.DefaultMessageNotifications
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DefaultMessageNotifications
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 34
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the default message notifications for users who haven&apos;t explicitly set their notification settings.\n"
  example: []
  syntax:
    content: public DefaultMessageNotifications DefaultMessageNotifications { get; }
    parameters: []
    return:
      type: Discord.DefaultMessageNotifications
    content.vb: Public ReadOnly Property DefaultMessageNotifications As DefaultMessageNotifications
  overload: Discord.Rest.RestGuild.DefaultMessageNotifications*
  implements:
  - Discord.IGuild.DefaultMessageNotifications
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.ExplicitContentFilter
  commentId: P:Discord.Rest.RestGuild.ExplicitContentFilter
  id: ExplicitContentFilter
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: ExplicitContentFilter
  nameWithType: RestGuild.ExplicitContentFilter
  fullName: Discord.Rest.RestGuild.ExplicitContentFilter
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ExplicitContentFilter
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 36
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the level of content filtering applied to user&apos;s content in a Guild.\n"
  example: []
  syntax:
    content: public ExplicitContentFilterLevel ExplicitContentFilter { get; }
    parameters: []
    return:
      type: Discord.ExplicitContentFilterLevel
      description: "\nThe level of explicit content filtering.\n"
    content.vb: Public ReadOnly Property ExplicitContentFilter As ExplicitContentFilterLevel
  overload: Discord.Rest.RestGuild.ExplicitContentFilter*
  implements:
  - Discord.IGuild.ExplicitContentFilter
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.AFKChannelId
  commentId: P:Discord.Rest.RestGuild.AFKChannelId
  id: AFKChannelId
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: AFKChannelId
  nameWithType: RestGuild.AFKChannelId
  fullName: Discord.Rest.RestGuild.AFKChannelId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: AFKChannelId
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 39
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public ulong? AFKChannelId { get; }
    parameters: []
    return:
      type: System.Nullable{System.UInt64}
    content.vb: Public ReadOnly Property AFKChannelId As ULong?
  overload: Discord.Rest.RestGuild.AFKChannelId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.EmbedChannelId
  commentId: P:Discord.Rest.RestGuild.EmbedChannelId
  id: EmbedChannelId
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: EmbedChannelId
  nameWithType: RestGuild.EmbedChannelId
  fullName: Discord.Rest.RestGuild.EmbedChannelId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: EmbedChannelId
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 41
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public ulong? EmbedChannelId { get; }
    parameters: []
    return:
      type: System.Nullable{System.UInt64}
    content.vb: Public ReadOnly Property EmbedChannelId As ULong?
  overload: Discord.Rest.RestGuild.EmbedChannelId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.SystemChannelId
  commentId: P:Discord.Rest.RestGuild.SystemChannelId
  id: SystemChannelId
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: SystemChannelId
  nameWithType: RestGuild.SystemChannelId
  fullName: Discord.Rest.RestGuild.SystemChannelId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SystemChannelId
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 43
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public ulong? SystemChannelId { get; }
    parameters: []
    return:
      type: System.Nullable{System.UInt64}
    content.vb: Public ReadOnly Property SystemChannelId As ULong?
  overload: Discord.Rest.RestGuild.SystemChannelId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.OwnerId
  commentId: P:Discord.Rest.RestGuild.OwnerId
  id: OwnerId
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: OwnerId
  nameWithType: RestGuild.OwnerId
  fullName: Discord.Rest.RestGuild.OwnerId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: OwnerId
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 45
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public ulong OwnerId { get; }
    parameters: []
    return:
      type: System.UInt64
    content.vb: Public ReadOnly Property OwnerId As ULong
  overload: Discord.Rest.RestGuild.OwnerId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.VoiceRegionId
  commentId: P:Discord.Rest.RestGuild.VoiceRegionId
  id: VoiceRegionId
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: VoiceRegionId
  nameWithType: RestGuild.VoiceRegionId
  fullName: Discord.Rest.RestGuild.VoiceRegionId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: VoiceRegionId
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 47
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public string VoiceRegionId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property VoiceRegionId As String
  overload: Discord.Rest.RestGuild.VoiceRegionId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.IconId
  commentId: P:Discord.Rest.RestGuild.IconId
  id: IconId
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: IconId
  nameWithType: RestGuild.IconId
  fullName: Discord.Rest.RestGuild.IconId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IconId
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 49
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public string IconId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property IconId As String
  overload: Discord.Rest.RestGuild.IconId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.SplashId
  commentId: P:Discord.Rest.RestGuild.SplashId
  id: SplashId
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: SplashId
  nameWithType: RestGuild.SplashId
  fullName: Discord.Rest.RestGuild.SplashId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SplashId
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 51
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public string SplashId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property SplashId As String
  overload: Discord.Rest.RestGuild.SplashId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.ApplicationId
  commentId: P:Discord.Rest.RestGuild.ApplicationId
  id: ApplicationId
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: ApplicationId
  nameWithType: RestGuild.ApplicationId
  fullName: Discord.Rest.RestGuild.ApplicationId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ApplicationId
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 54
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public ulong? ApplicationId { get; }
    parameters: []
    return:
      type: System.Nullable{System.UInt64}
    content.vb: Public ReadOnly Property ApplicationId As ULong?
  overload: Discord.Rest.RestGuild.ApplicationId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.PremiumTier
  commentId: P:Discord.Rest.RestGuild.PremiumTier
  id: PremiumTier
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: PremiumTier
  nameWithType: RestGuild.PremiumTier
  fullName: Discord.Rest.RestGuild.PremiumTier
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: PremiumTier
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 56
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the tier of guild boosting in this guild.\n"
  example: []
  syntax:
    content: public PremiumTier PremiumTier { get; }
    parameters: []
    return:
      type: Discord.PremiumTier
      description: "\nThe tier of guild boosting in this guild.\n"
    content.vb: Public ReadOnly Property PremiumTier As PremiumTier
  overload: Discord.Rest.RestGuild.PremiumTier*
  implements:
  - Discord.IGuild.PremiumTier
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.BannerId
  commentId: P:Discord.Rest.RestGuild.BannerId
  id: BannerId
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: BannerId
  nameWithType: RestGuild.BannerId
  fullName: Discord.Rest.RestGuild.BannerId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: BannerId
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 58
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public string BannerId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property BannerId As String
  overload: Discord.Rest.RestGuild.BannerId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.VanityURLCode
  commentId: P:Discord.Rest.RestGuild.VanityURLCode
  id: VanityURLCode
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: VanityURLCode
  nameWithType: RestGuild.VanityURLCode
  fullName: Discord.Rest.RestGuild.VanityURLCode
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: VanityURLCode
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 60
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public string VanityURLCode { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property VanityURLCode As String
  overload: Discord.Rest.RestGuild.VanityURLCode*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.SystemChannelFlags
  commentId: P:Discord.Rest.RestGuild.SystemChannelFlags
  id: SystemChannelFlags
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: SystemChannelFlags
  nameWithType: RestGuild.SystemChannelFlags
  fullName: Discord.Rest.RestGuild.SystemChannelFlags
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SystemChannelFlags
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 62
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the flags for the types of system channel messages that are disabled.\n"
  example: []
  syntax:
    content: public SystemChannelMessageDeny SystemChannelFlags { get; }
    parameters: []
    return:
      type: Discord.SystemChannelMessageDeny
      description: "\nThe flags for the types of system channel messages that are disabled.\n"
    content.vb: Public ReadOnly Property SystemChannelFlags As SystemChannelMessageDeny
  overload: Discord.Rest.RestGuild.SystemChannelFlags*
  implements:
  - Discord.IGuild.SystemChannelFlags
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.Description
  commentId: P:Discord.Rest.RestGuild.Description
  id: Description
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: RestGuild.Description
  fullName: Discord.Rest.RestGuild.Description
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Description
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 64
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public string Description { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Description As String
  overload: Discord.Rest.RestGuild.Description*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.PremiumSubscriptionCount
  commentId: P:Discord.Rest.RestGuild.PremiumSubscriptionCount
  id: PremiumSubscriptionCount
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: PremiumSubscriptionCount
  nameWithType: RestGuild.PremiumSubscriptionCount
  fullName: Discord.Rest.RestGuild.PremiumSubscriptionCount
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: PremiumSubscriptionCount
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 66
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public int PremiumSubscriptionCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property PremiumSubscriptionCount As Integer
  overload: Discord.Rest.RestGuild.PremiumSubscriptionCount*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.PreferredLocale
  commentId: P:Discord.Rest.RestGuild.PreferredLocale
  id: PreferredLocale
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: PreferredLocale
  nameWithType: RestGuild.PreferredLocale
  fullName: Discord.Rest.RestGuild.PreferredLocale
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: PreferredLocale
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 68
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public string PreferredLocale { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property PreferredLocale As String
  overload: Discord.Rest.RestGuild.PreferredLocale*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.PreferredCulture
  commentId: P:Discord.Rest.RestGuild.PreferredCulture
  id: PreferredCulture
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: PreferredCulture
  nameWithType: RestGuild.PreferredCulture
  fullName: Discord.Rest.RestGuild.PreferredCulture
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: PreferredCulture
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 71
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public CultureInfo PreferredCulture { get; }
    parameters: []
    return:
      type: CultureInfo
    content.vb: Public ReadOnly Property PreferredCulture As CultureInfo
  overload: Discord.Rest.RestGuild.PreferredCulture*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.CreatedAt
  commentId: P:Discord.Rest.RestGuild.CreatedAt
  id: CreatedAt
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: CreatedAt
  nameWithType: RestGuild.CreatedAt
  fullName: Discord.Rest.RestGuild.CreatedAt
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreatedAt
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 74
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public DateTimeOffset CreatedAt { get; }
    parameters: []
    return:
      type: DateTimeOffset
    content.vb: Public ReadOnly Property CreatedAt As DateTimeOffset
  overload: Discord.Rest.RestGuild.CreatedAt*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.DefaultChannelId
  commentId: P:Discord.Rest.RestGuild.DefaultChannelId
  id: DefaultChannelId
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: DefaultChannelId
  nameWithType: RestGuild.DefaultChannelId
  fullName: Discord.Rest.RestGuild.DefaultChannelId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DefaultChannelId
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 76
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  syntax:
    content: public ulong DefaultChannelId { get; }
    parameters: []
    return:
      type: System.UInt64
    content.vb: Public ReadOnly Property DefaultChannelId As ULong
  overload: Discord.Rest.RestGuild.DefaultChannelId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.IconUrl
  commentId: P:Discord.Rest.RestGuild.IconUrl
  id: IconUrl
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: IconUrl
  nameWithType: RestGuild.IconUrl
  fullName: Discord.Rest.RestGuild.IconUrl
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IconUrl
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 79
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public string IconUrl { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property IconUrl As String
  overload: Discord.Rest.RestGuild.IconUrl*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.SplashUrl
  commentId: P:Discord.Rest.RestGuild.SplashUrl
  id: SplashUrl
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: SplashUrl
  nameWithType: RestGuild.SplashUrl
  fullName: Discord.Rest.RestGuild.SplashUrl
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SplashUrl
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 81
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public string SplashUrl { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property SplashUrl As String
  overload: Discord.Rest.RestGuild.SplashUrl*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.BannerUrl
  commentId: P:Discord.Rest.RestGuild.BannerUrl
  id: BannerUrl
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: BannerUrl
  nameWithType: RestGuild.BannerUrl
  fullName: Discord.Rest.RestGuild.BannerUrl
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: BannerUrl
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 83
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public string BannerUrl { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property BannerUrl As String
  overload: Discord.Rest.RestGuild.BannerUrl*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.EveryoneRole
  commentId: P:Discord.Rest.RestGuild.EveryoneRole
  id: EveryoneRole
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: EveryoneRole
  nameWithType: RestGuild.EveryoneRole
  fullName: Discord.Rest.RestGuild.EveryoneRole
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: EveryoneRole
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 88
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the built-in role containing all users in this guild.\n"
  example: []
  syntax:
    content: public RestRole EveryoneRole { get; }
    parameters: []
    return:
      type: Discord.Rest.RestRole
    content.vb: Public ReadOnly Property EveryoneRole As RestRole
  overload: Discord.Rest.RestGuild.EveryoneRole*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.Roles
  commentId: P:Discord.Rest.RestGuild.Roles
  id: Roles
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: Roles
  nameWithType: RestGuild.Roles
  fullName: Discord.Rest.RestGuild.Roles
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Roles
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 93
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of all roles in this guild.\n"
  example: []
  syntax:
    content: public IReadOnlyCollection<RestRole> Roles { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.Rest.RestRole}
    content.vb: Public ReadOnly Property Roles As IReadOnlyCollection(Of RestRole)
  overload: Discord.Rest.RestGuild.Roles*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.Emotes
  commentId: P:Discord.Rest.RestGuild.Emotes
  id: Emotes
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: Emotes
  nameWithType: RestGuild.Emotes
  fullName: Discord.Rest.RestGuild.Emotes
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Emotes
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 95
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public IReadOnlyCollection<GuildEmote> Emotes { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.GuildEmote}
    content.vb: Public ReadOnly Property Emotes As IReadOnlyCollection(Of GuildEmote)
  overload: Discord.Rest.RestGuild.Emotes*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.Features
  commentId: P:Discord.Rest.RestGuild.Features
  id: Features
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: Features
  nameWithType: RestGuild.Features
  fullName: Discord.Rest.RestGuild.Features
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Features
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 97
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public IReadOnlyCollection<string> Features { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{System.String}
    content.vb: Public ReadOnly Property Features As IReadOnlyCollection(Of String)
  overload: Discord.Rest.RestGuild.Features*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestGuild.UpdateAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.UpdateAsync(Discord.RequestOptions)
  id: UpdateAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: UpdateAsync(RequestOptions)
  nameWithType: RestGuild.UpdateAsync(RequestOptions)
  fullName: Discord.Rest.RestGuild.UpdateAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: UpdateAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 168
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task UpdateAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function UpdateAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestGuild.UpdateAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.DeleteAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.DeleteAsync(Discord.RequestOptions)
  id: DeleteAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: DeleteAsync(RequestOptions)
  nameWithType: RestGuild.DeleteAsync(RequestOptions)
  fullName: Discord.Rest.RestGuild.DeleteAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 171
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task DeleteAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function DeleteAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestGuild.DeleteAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.ModifyAsync(Action{Discord.GuildProperties},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.ModifyAsync(Action{Discord.GuildProperties},Discord.RequestOptions)
  id: ModifyAsync(Action{Discord.GuildProperties},Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: ModifyAsync(Action<GuildProperties>, RequestOptions)
  nameWithType: RestGuild.ModifyAsync(Action<GuildProperties>, RequestOptions)
  fullName: Discord.Rest.RestGuild.ModifyAsync(Action<Discord.GuildProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ModifyAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 176
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task ModifyAsync(Action<GuildProperties> func, RequestOptions options = null)
    parameters:
    - id: func
      type: Action{Discord.GuildProperties}
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function ModifyAsync(func As Action(Of GuildProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestGuild.ModifyAsync*
  nameWithType.vb: RestGuild.ModifyAsync(Action(Of GuildProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestGuild.ModifyAsync(Action(Of Discord.GuildProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of GuildProperties), RequestOptions)
- uid: Discord.Rest.RestGuild.ModifyEmbedAsync(Action{Discord.GuildEmbedProperties},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.ModifyEmbedAsync(Action{Discord.GuildEmbedProperties},Discord.RequestOptions)
  id: ModifyEmbedAsync(Action{Discord.GuildEmbedProperties},Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: ModifyEmbedAsync(Action<GuildEmbedProperties>, RequestOptions)
  nameWithType: RestGuild.ModifyEmbedAsync(Action<GuildEmbedProperties>, RequestOptions)
  fullName: Discord.Rest.RestGuild.ModifyEmbedAsync(Action<Discord.GuildEmbedProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ModifyEmbedAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 184
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task ModifyEmbedAsync(Action<GuildEmbedProperties> func, RequestOptions options = null)
    parameters:
    - id: func
      type: Action{Discord.GuildEmbedProperties}
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function ModifyEmbedAsync(func As Action(Of GuildEmbedProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestGuild.ModifyEmbedAsync*
  nameWithType.vb: RestGuild.ModifyEmbedAsync(Action(Of GuildEmbedProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestGuild.ModifyEmbedAsync(Action(Of Discord.GuildEmbedProperties), Discord.RequestOptions)
  name.vb: ModifyEmbedAsync(Action(Of GuildEmbedProperties), RequestOptions)
- uid: Discord.Rest.RestGuild.ReorderChannelsAsync(IEnumerable{Discord.ReorderChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.ReorderChannelsAsync(IEnumerable{Discord.ReorderChannelProperties},Discord.RequestOptions)
  id: ReorderChannelsAsync(IEnumerable{Discord.ReorderChannelProperties},Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: ReorderChannelsAsync(IEnumerable<ReorderChannelProperties>, RequestOptions)
  nameWithType: RestGuild.ReorderChannelsAsync(IEnumerable<ReorderChannelProperties>, RequestOptions)
  fullName: Discord.Rest.RestGuild.ReorderChannelsAsync(IEnumerable<Discord.ReorderChannelProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ReorderChannelsAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 192
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task ReorderChannelsAsync(IEnumerable<ReorderChannelProperties> args, RequestOptions options = null)
    parameters:
    - id: args
      type: IEnumerable{Discord.ReorderChannelProperties}
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function ReorderChannelsAsync(args As IEnumerable(Of ReorderChannelProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestGuild.ReorderChannelsAsync*
  nameWithType.vb: RestGuild.ReorderChannelsAsync(IEnumerable(Of ReorderChannelProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestGuild.ReorderChannelsAsync(IEnumerable(Of Discord.ReorderChannelProperties), Discord.RequestOptions)
  name.vb: ReorderChannelsAsync(IEnumerable(Of ReorderChannelProperties), RequestOptions)
- uid: Discord.Rest.RestGuild.ReorderRolesAsync(IEnumerable{Discord.ReorderRoleProperties},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.ReorderRolesAsync(IEnumerable{Discord.ReorderRoleProperties},Discord.RequestOptions)
  id: ReorderRolesAsync(IEnumerable{Discord.ReorderRoleProperties},Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: ReorderRolesAsync(IEnumerable<ReorderRoleProperties>, RequestOptions)
  nameWithType: RestGuild.ReorderRolesAsync(IEnumerable<ReorderRoleProperties>, RequestOptions)
  fullName: Discord.Rest.RestGuild.ReorderRolesAsync(IEnumerable<Discord.ReorderRoleProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ReorderRolesAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 198
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task ReorderRolesAsync(IEnumerable<ReorderRoleProperties> args, RequestOptions options = null)
    parameters:
    - id: args
      type: IEnumerable{Discord.ReorderRoleProperties}
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function ReorderRolesAsync(args As IEnumerable(Of ReorderRoleProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestGuild.ReorderRolesAsync*
  nameWithType.vb: RestGuild.ReorderRolesAsync(IEnumerable(Of ReorderRoleProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestGuild.ReorderRolesAsync(IEnumerable(Of Discord.ReorderRoleProperties), Discord.RequestOptions)
  name.vb: ReorderRolesAsync(IEnumerable(Of ReorderRoleProperties), RequestOptions)
- uid: Discord.Rest.RestGuild.LeaveAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.LeaveAsync(Discord.RequestOptions)
  id: LeaveAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: LeaveAsync(RequestOptions)
  nameWithType: RestGuild.LeaveAsync(RequestOptions)
  fullName: Discord.Rest.RestGuild.LeaveAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: LeaveAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 209
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task LeaveAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function LeaveAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestGuild.LeaveAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.GetBansAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.GetBansAsync(Discord.RequestOptions)
  id: GetBansAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: GetBansAsync(RequestOptions)
  nameWithType: RestGuild.GetBansAsync(RequestOptions)
  fullName: Discord.Rest.RestGuild.GetBansAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetBansAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 223
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of all users banned in this guild.\n"
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<RestBan>> GetBansAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{IReadOnlyCollection{Discord.Rest.RestBan}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection of\nban objects that this guild currently possesses, with each object containing the user banned and reason\nbehind the ban.\n"
    content.vb: Public Function GetBansAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestBan))
  overload: Discord.Rest.RestGuild.GetBansAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.GetBanAsync(Discord.IUser,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.GetBanAsync(Discord.IUser,Discord.RequestOptions)
  id: GetBanAsync(Discord.IUser,Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: GetBanAsync(IUser, RequestOptions)
  nameWithType: RestGuild.GetBanAsync(IUser, RequestOptions)
  fullName: Discord.Rest.RestGuild.GetBanAsync(Discord.IUser, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetBanAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 234
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a ban object for a banned user.\n"
  example: []
  syntax:
    content: public Task<RestBan> GetBanAsync(IUser user, RequestOptions options = null)
    parameters:
    - id: user
      type: Discord.IUser
      description: The banned user.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestBan}
      description: "\nA task that represents the asynchronous get operation. The task result contains a ban object, which\ncontains the user information and the reason for the ban; <code>null</code> if the ban entry cannot be found.\n"
    content.vb: Public Function GetBanAsync(user As IUser, options As RequestOptions = Nothing) As Task(Of RestBan)
  overload: Discord.Rest.RestGuild.GetBanAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.GetBanAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.GetBanAsync(System.UInt64,Discord.RequestOptions)
  id: GetBanAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: GetBanAsync(UInt64, RequestOptions)
  nameWithType: RestGuild.GetBanAsync(UInt64, RequestOptions)
  fullName: Discord.Rest.RestGuild.GetBanAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetBanAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 245
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a ban object for a banned user.\n"
  example: []
  syntax:
    content: public Task<RestBan> GetBanAsync(ulong userId, RequestOptions options = null)
    parameters:
    - id: userId
      type: System.UInt64
      description: The snowflake identifier for the banned user.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestBan}
      description: "\nA task that represents the asynchronous get operation. The task result contains a ban object, which\ncontains the user information and the reason for the ban; <code>null</code> if the ban entry cannot be found.\n"
    content.vb: Public Function GetBanAsync(userId As ULong, options As RequestOptions = Nothing) As Task(Of RestBan)
  overload: Discord.Rest.RestGuild.GetBanAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.AddBanAsync(Discord.IUser,System.Int32,System.String,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.AddBanAsync(Discord.IUser,System.Int32,System.String,Discord.RequestOptions)
  id: AddBanAsync(Discord.IUser,System.Int32,System.String,Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: AddBanAsync(IUser, Int32, String, RequestOptions)
  nameWithType: RestGuild.AddBanAsync(IUser, Int32, String, RequestOptions)
  fullName: Discord.Rest.RestGuild.AddBanAsync(Discord.IUser, System.Int32, System.String, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: AddBanAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 249
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task AddBanAsync(IUser user, int pruneDays = 0, string reason = null, RequestOptions options = null)
    parameters:
    - id: user
      type: Discord.IUser
    - id: pruneDays
      type: System.Int32
    - id: reason
      type: System.String
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function AddBanAsync(user As IUser, pruneDays As Integer = 0, reason As String = Nothing, options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestGuild.AddBanAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.AddBanAsync(System.UInt64,System.Int32,System.String,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.AddBanAsync(System.UInt64,System.Int32,System.String,Discord.RequestOptions)
  id: AddBanAsync(System.UInt64,System.Int32,System.String,Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: AddBanAsync(UInt64, Int32, String, RequestOptions)
  nameWithType: RestGuild.AddBanAsync(UInt64, Int32, String, RequestOptions)
  fullName: Discord.Rest.RestGuild.AddBanAsync(System.UInt64, System.Int32, System.String, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: AddBanAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 252
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task AddBanAsync(ulong userId, int pruneDays = 0, string reason = null, RequestOptions options = null)
    parameters:
    - id: userId
      type: System.UInt64
    - id: pruneDays
      type: System.Int32
    - id: reason
      type: System.String
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function AddBanAsync(userId As ULong, pruneDays As Integer = 0, reason As String = Nothing, options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestGuild.AddBanAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.RemoveBanAsync(Discord.IUser,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.RemoveBanAsync(Discord.IUser,Discord.RequestOptions)
  id: RemoveBanAsync(Discord.IUser,Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: RemoveBanAsync(IUser, RequestOptions)
  nameWithType: RestGuild.RemoveBanAsync(IUser, RequestOptions)
  fullName: Discord.Rest.RestGuild.RemoveBanAsync(Discord.IUser, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RemoveBanAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 256
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task RemoveBanAsync(IUser user, RequestOptions options = null)
    parameters:
    - id: user
      type: Discord.IUser
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function RemoveBanAsync(user As IUser, options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestGuild.RemoveBanAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.RemoveBanAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.RemoveBanAsync(System.UInt64,Discord.RequestOptions)
  id: RemoveBanAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: RemoveBanAsync(UInt64, RequestOptions)
  nameWithType: RestGuild.RemoveBanAsync(UInt64, RequestOptions)
  fullName: Discord.Rest.RestGuild.RemoveBanAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RemoveBanAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 259
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task RemoveBanAsync(ulong userId, RequestOptions options = null)
    parameters:
    - id: userId
      type: System.UInt64
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function RemoveBanAsync(userId As ULong, options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestGuild.RemoveBanAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.GetChannelsAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.GetChannelsAsync(Discord.RequestOptions)
  id: GetChannelsAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: GetChannelsAsync(RequestOptions)
  nameWithType: RestGuild.GetChannelsAsync(RequestOptions)
  fullName: Discord.Rest.RestGuild.GetChannelsAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetChannelsAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 271
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of all channels in this guild.\n"
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<RestGuildChannel>> GetChannelsAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{IReadOnlyCollection{Discord.Rest.RestGuildChannel}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection of\ngeneric channels found within this guild.\n"
    content.vb: Public Function GetChannelsAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestGuildChannel))
  overload: Discord.Rest.RestGuild.GetChannelsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.GetChannelAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.GetChannelAsync(System.UInt64,Discord.RequestOptions)
  id: GetChannelAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: GetChannelAsync(UInt64, RequestOptions)
  nameWithType: RestGuild.GetChannelAsync(UInt64, RequestOptions)
  fullName: Discord.Rest.RestGuild.GetChannelAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetChannelAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 283
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a channel in this guild.\n"
  example: []
  syntax:
    content: public Task<RestGuildChannel> GetChannelAsync(ulong id, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier for the channel.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestGuildChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains the generic channel\nassociated with the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Public Function GetChannelAsync(id As ULong, options As RequestOptions = Nothing) As Task(Of RestGuildChannel)
  overload: Discord.Rest.RestGuild.GetChannelAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.GetTextChannelAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.GetTextChannelAsync(System.UInt64,Discord.RequestOptions)
  id: GetTextChannelAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: GetTextChannelAsync(UInt64, RequestOptions)
  nameWithType: RestGuild.GetTextChannelAsync(UInt64, RequestOptions)
  fullName: Discord.Rest.RestGuild.GetTextChannelAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetTextChannelAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 295
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a text channel in this guild.\n"
  example: []
  syntax:
    content: public Task<RestTextChannel> GetTextChannelAsync(ulong id, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier for the text channel.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestTextChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains the text channel\nassociated with the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Public Function GetTextChannelAsync(id As ULong, options As RequestOptions = Nothing) As Task(Of RestTextChannel)
  overload: Discord.Rest.RestGuild.GetTextChannelAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.GetTextChannelsAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.GetTextChannelsAsync(Discord.RequestOptions)
  id: GetTextChannelsAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: GetTextChannelsAsync(RequestOptions)
  nameWithType: RestGuild.GetTextChannelsAsync(RequestOptions)
  fullName: Discord.Rest.RestGuild.GetTextChannelsAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetTextChannelsAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 309
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of all text channels in this guild.\n"
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<RestTextChannel>> GetTextChannelsAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{IReadOnlyCollection{Discord.Rest.RestTextChannel}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection of\nmessage channels found within this guild.\n"
    content.vb: Public Function GetTextChannelsAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestTextChannel))
  overload: Discord.Rest.RestGuild.GetTextChannelsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.GetVoiceChannelAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.GetVoiceChannelAsync(System.UInt64,Discord.RequestOptions)
  id: GetVoiceChannelAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: GetVoiceChannelAsync(UInt64, RequestOptions)
  nameWithType: RestGuild.GetVoiceChannelAsync(UInt64, RequestOptions)
  fullName: Discord.Rest.RestGuild.GetVoiceChannelAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetVoiceChannelAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 324
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a voice channel in this guild.\n"
  example: []
  syntax:
    content: public Task<RestVoiceChannel> GetVoiceChannelAsync(ulong id, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier for the voice channel.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestVoiceChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains the voice channel associated\nwith the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Public Function GetVoiceChannelAsync(id As ULong, options As RequestOptions = Nothing) As Task(Of RestVoiceChannel)
  overload: Discord.Rest.RestGuild.GetVoiceChannelAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.GetVoiceChannelsAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.GetVoiceChannelsAsync(Discord.RequestOptions)
  id: GetVoiceChannelsAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: GetVoiceChannelsAsync(RequestOptions)
  nameWithType: RestGuild.GetVoiceChannelsAsync(RequestOptions)
  fullName: Discord.Rest.RestGuild.GetVoiceChannelsAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetVoiceChannelsAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 338
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of all voice channels in this guild.\n"
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<RestVoiceChannel>> GetVoiceChannelsAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{IReadOnlyCollection{Discord.Rest.RestVoiceChannel}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection of\nvoice channels found within this guild.\n"
    content.vb: Public Function GetVoiceChannelsAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestVoiceChannel))
  overload: Discord.Rest.RestGuild.GetVoiceChannelsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.GetCategoryChannelsAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.GetCategoryChannelsAsync(Discord.RequestOptions)
  id: GetCategoryChannelsAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: GetCategoryChannelsAsync(RequestOptions)
  nameWithType: RestGuild.GetCategoryChannelsAsync(RequestOptions)
  fullName: Discord.Rest.RestGuild.GetCategoryChannelsAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetCategoryChannelsAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 352
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of all category channels in this guild.\n"
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<RestCategoryChannel>> GetCategoryChannelsAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{IReadOnlyCollection{Discord.Rest.RestCategoryChannel}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection of\ncategory channels found within this guild.\n"
    content.vb: Public Function GetCategoryChannelsAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestCategoryChannel))
  overload: Discord.Rest.RestGuild.GetCategoryChannelsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.GetAFKChannelAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.GetAFKChannelAsync(Discord.RequestOptions)
  id: GetAFKChannelAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: GetAFKChannelAsync(RequestOptions)
  nameWithType: RestGuild.GetAFKChannelAsync(RequestOptions)
  fullName: Discord.Rest.RestGuild.GetAFKChannelAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetAFKChannelAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 366
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the AFK voice channel in this guild.\n"
  example: []
  syntax:
    content: public Task<RestVoiceChannel> GetAFKChannelAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestVoiceChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains the voice channel that the\nAFK users will be moved to after they have idled for too long; <code>null</code> if none is set.\n"
    content.vb: Public Function GetAFKChannelAsync(options As RequestOptions = Nothing) As Task(Of RestVoiceChannel)
  overload: Discord.Rest.RestGuild.GetAFKChannelAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.GetDefaultChannelAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.GetDefaultChannelAsync(Discord.RequestOptions)
  id: GetDefaultChannelAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: GetDefaultChannelAsync(RequestOptions)
  nameWithType: RestGuild.GetDefaultChannelAsync(RequestOptions)
  fullName: Discord.Rest.RestGuild.GetDefaultChannelAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetDefaultChannelAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 385
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the first viewable text channel in this guild.\n"
  example: []
  syntax:
    content: public Task<RestTextChannel> GetDefaultChannelAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestTextChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains the first viewable text\nchannel in this guild; <code>null</code> if none is found.\n"
    content.vb: Public Function GetDefaultChannelAsync(options As RequestOptions = Nothing) As Task(Of RestTextChannel)
  overload: Discord.Rest.RestGuild.GetDefaultChannelAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.GetEmbedChannelAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.GetEmbedChannelAsync(Discord.RequestOptions)
  id: GetEmbedChannelAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: GetEmbedChannelAsync(RequestOptions)
  nameWithType: RestGuild.GetEmbedChannelAsync(RequestOptions)
  fullName: Discord.Rest.RestGuild.GetEmbedChannelAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetEmbedChannelAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 403
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the embed channel (i.e. the channel set in the guild&apos;s widget settings) in this guild.\n"
  example: []
  syntax:
    content: public Task<RestGuildChannel> GetEmbedChannelAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestGuildChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains the embed channel set\nwithin the server&apos;s widget settings; <code>null</code> if none is set.\n"
    content.vb: Public Function GetEmbedChannelAsync(options As RequestOptions = Nothing) As Task(Of RestGuildChannel)
  overload: Discord.Rest.RestGuild.GetEmbedChannelAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.GetSystemChannelAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.GetSystemChannelAsync(Discord.RequestOptions)
  id: GetSystemChannelAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: GetSystemChannelAsync(RequestOptions)
  nameWithType: RestGuild.GetSystemChannelAsync(RequestOptions)
  fullName: Discord.Rest.RestGuild.GetSystemChannelAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetSystemChannelAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 419
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the first viewable text channel in this guild.\n"
  example: []
  syntax:
    content: public Task<RestTextChannel> GetSystemChannelAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestTextChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains the first viewable text\nchannel in this guild; <code>null</code> if none is found.\n"
    content.vb: Public Function GetSystemChannelAsync(options As RequestOptions = Nothing) As Task(Of RestTextChannel)
  overload: Discord.Rest.RestGuild.GetSystemChannelAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.CreateTextChannelAsync(System.String,Action{Discord.TextChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.CreateTextChannelAsync(System.String,Action{Discord.TextChannelProperties},Discord.RequestOptions)
  id: CreateTextChannelAsync(System.String,Action{Discord.TextChannelProperties},Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: CreateTextChannelAsync(String, Action<TextChannelProperties>, RequestOptions)
  nameWithType: RestGuild.CreateTextChannelAsync(String, Action<TextChannelProperties>, RequestOptions)
  fullName: Discord.Rest.RestGuild.CreateTextChannelAsync(System.String, Action<Discord.TextChannelProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreateTextChannelAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 452
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nCreates a new text channel in this guild.\n"
  example:
  - "\nThe following example creates a new text channel under an existing category named <code>Wumpus</code> with a set topic.\n<pre><code class=\"lang-cs\">var categories = await guild.GetCategoriesAsync();\nvar targetCategory = categories.FirstOrDefault(x => x.Name == &quot;wumpus&quot;);\nif (targetCategory == null) return;\nawait Context.Guild.CreateTextChannelAsync(name, x =>\n{\n    x.CategoryId = targetCategory.Id;\n    x.Topic = $&quot;This channel was created at {DateTimeOffset.UtcNow} by {user}.&quot;;\n});</code></pre>\n"
  syntax:
    content: public Task<RestTextChannel> CreateTextChannelAsync(string name, Action<TextChannelProperties> func = null, RequestOptions options = null)
    parameters:
    - id: name
      type: System.String
      description: The new name for the text channel.
    - id: func
      type: Action{Discord.TextChannelProperties}
      description: The delegate containing the properties to be applied to the channel upon its creation.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestTextChannel}
      description: "\nA task that represents the asynchronous creation operation. The task result contains the newly created\ntext channel.\n"
    content.vb: Public Function CreateTextChannelAsync(name As String, func As Action(Of TextChannelProperties) = Nothing, options As RequestOptions = Nothing) As Task(Of RestTextChannel)
  overload: Discord.Rest.RestGuild.CreateTextChannelAsync*
  nameWithType.vb: RestGuild.CreateTextChannelAsync(String, Action(Of TextChannelProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestGuild.CreateTextChannelAsync(System.String, Action(Of Discord.TextChannelProperties), Discord.RequestOptions)
  name.vb: CreateTextChannelAsync(String, Action(Of TextChannelProperties), RequestOptions)
- uid: Discord.Rest.RestGuild.CreateVoiceChannelAsync(System.String,Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.CreateVoiceChannelAsync(System.String,Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  id: CreateVoiceChannelAsync(System.String,Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: CreateVoiceChannelAsync(String, Action<VoiceChannelProperties>, RequestOptions)
  nameWithType: RestGuild.CreateVoiceChannelAsync(String, Action<VoiceChannelProperties>, RequestOptions)
  fullName: Discord.Rest.RestGuild.CreateVoiceChannelAsync(System.String, Action<Discord.VoiceChannelProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreateVoiceChannelAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 464
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nCreates a voice channel with the provided name.\n"
  example: []
  syntax:
    content: public Task<RestVoiceChannel> CreateVoiceChannelAsync(string name, Action<VoiceChannelProperties> func = null, RequestOptions options = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the new channel.
    - id: func
      type: Action{Discord.VoiceChannelProperties}
      description: The delegate containing the properties to be applied to the channel upon its creation.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestVoiceChannel}
      description: "\nThe created voice channel.\n"
    content.vb: Public Function CreateVoiceChannelAsync(name As String, func As Action(Of VoiceChannelProperties) = Nothing, options As RequestOptions = Nothing) As Task(Of RestVoiceChannel)
  overload: Discord.Rest.RestGuild.CreateVoiceChannelAsync*
  nameWithType.vb: RestGuild.CreateVoiceChannelAsync(String, Action(Of VoiceChannelProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestGuild.CreateVoiceChannelAsync(System.String, Action(Of Discord.VoiceChannelProperties), Discord.RequestOptions)
  name.vb: CreateVoiceChannelAsync(String, Action(Of VoiceChannelProperties), RequestOptions)
- uid: Discord.Rest.RestGuild.CreateCategoryChannelAsync(System.String,Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.CreateCategoryChannelAsync(System.String,Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  id: CreateCategoryChannelAsync(System.String,Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: CreateCategoryChannelAsync(String, Action<GuildChannelProperties>, RequestOptions)
  nameWithType: RestGuild.CreateCategoryChannelAsync(String, Action<GuildChannelProperties>, RequestOptions)
  fullName: Discord.Rest.RestGuild.CreateCategoryChannelAsync(System.String, Action<Discord.GuildChannelProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreateCategoryChannelAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 476
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nCreates a category channel with the provided name.\n"
  example: []
  syntax:
    content: public Task<RestCategoryChannel> CreateCategoryChannelAsync(string name, Action<GuildChannelProperties> func = null, RequestOptions options = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the new channel.
    - id: func
      type: Action{Discord.GuildChannelProperties}
      description: The delegate containing the properties to be applied to the channel upon its creation.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestCategoryChannel}
      description: "\nThe created category channel.\n"
    content.vb: Public Function CreateCategoryChannelAsync(name As String, func As Action(Of GuildChannelProperties) = Nothing, options As RequestOptions = Nothing) As Task(Of RestCategoryChannel)
  overload: Discord.Rest.RestGuild.CreateCategoryChannelAsync*
  nameWithType.vb: RestGuild.CreateCategoryChannelAsync(String, Action(Of GuildChannelProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestGuild.CreateCategoryChannelAsync(System.String, Action(Of Discord.GuildChannelProperties), Discord.RequestOptions)
  name.vb: CreateCategoryChannelAsync(String, Action(Of GuildChannelProperties), RequestOptions)
- uid: Discord.Rest.RestGuild.GetVoiceRegionsAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.GetVoiceRegionsAsync(Discord.RequestOptions)
  id: GetVoiceRegionsAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: GetVoiceRegionsAsync(RequestOptions)
  nameWithType: RestGuild.GetVoiceRegionsAsync(RequestOptions)
  fullName: Discord.Rest.RestGuild.GetVoiceRegionsAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetVoiceRegionsAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 487
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of all the voice regions this guild can access.\n"
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<RestVoiceRegion>> GetVoiceRegionsAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{IReadOnlyCollection{Discord.Rest.RestVoiceRegion}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection of\nvoice regions the guild can access.\n"
    content.vb: Public Function GetVoiceRegionsAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestVoiceRegion))
  overload: Discord.Rest.RestGuild.GetVoiceRegionsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.GetIntegrationsAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.GetIntegrationsAsync(Discord.RequestOptions)
  id: GetIntegrationsAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: GetIntegrationsAsync(RequestOptions)
  nameWithType: RestGuild.GetIntegrationsAsync(RequestOptions)
  fullName: Discord.Rest.RestGuild.GetIntegrationsAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetIntegrationsAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 491
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  syntax:
    content: public Task<IReadOnlyCollection<RestGuildIntegration>> GetIntegrationsAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task{IReadOnlyCollection{Discord.Rest.RestGuildIntegration}}
    content.vb: Public Function GetIntegrationsAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestGuildIntegration))
  overload: Discord.Rest.RestGuild.GetIntegrationsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.CreateIntegrationAsync(System.UInt64,System.String,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.CreateIntegrationAsync(System.UInt64,System.String,Discord.RequestOptions)
  id: CreateIntegrationAsync(System.UInt64,System.String,Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: CreateIntegrationAsync(UInt64, String, RequestOptions)
  nameWithType: RestGuild.CreateIntegrationAsync(UInt64, String, RequestOptions)
  fullName: Discord.Rest.RestGuild.CreateIntegrationAsync(System.UInt64, System.String, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreateIntegrationAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 493
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  syntax:
    content: public Task<RestGuildIntegration> CreateIntegrationAsync(ulong id, string type, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
    - id: type
      type: System.String
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task{Discord.Rest.RestGuildIntegration}
    content.vb: Public Function CreateIntegrationAsync(id As ULong, type As String, options As RequestOptions = Nothing) As Task(Of RestGuildIntegration)
  overload: Discord.Rest.RestGuild.CreateIntegrationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.GetInvitesAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.GetInvitesAsync(Discord.RequestOptions)
  id: GetInvitesAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: GetInvitesAsync(RequestOptions)
  nameWithType: RestGuild.GetInvitesAsync(RequestOptions)
  fullName: Discord.Rest.RestGuild.GetInvitesAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetInvitesAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 505
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of all invites in this guild.\n"
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<RestInviteMetadata>> GetInvitesAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{IReadOnlyCollection{Discord.Rest.RestInviteMetadata}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection of\ninvite metadata, each representing information for an invite found within this guild.\n"
    content.vb: Public Function GetInvitesAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestInviteMetadata))
  overload: Discord.Rest.RestGuild.GetInvitesAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.GetVanityInviteAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.GetVanityInviteAsync(Discord.RequestOptions)
  id: GetVanityInviteAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: GetVanityInviteAsync(RequestOptions)
  nameWithType: RestGuild.GetVanityInviteAsync(RequestOptions)
  fullName: Discord.Rest.RestGuild.GetVanityInviteAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetVanityInviteAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 514
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the vanity invite URL of this guild.\n"
  example: []
  syntax:
    content: public Task<RestInviteMetadata> GetVanityInviteAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestInviteMetadata}
      description: "\nA partial metadata of the vanity invite found within this guild.\n"
    content.vb: Public Function GetVanityInviteAsync(options As RequestOptions = Nothing) As Task(Of RestInviteMetadata)
  overload: Discord.Rest.RestGuild.GetVanityInviteAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.GetRole(System.UInt64)
  commentId: M:Discord.Rest.RestGuild.GetRole(System.UInt64)
  id: GetRole(System.UInt64)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: GetRole(UInt64)
  nameWithType: RestGuild.GetRole(UInt64)
  fullName: Discord.Rest.RestGuild.GetRole(System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetRole
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 525
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a role in this guild.\n"
  example: []
  syntax:
    content: public RestRole GetRole(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier for the role.
    return:
      type: Discord.Rest.RestRole
      description: "\nA role that is associated with the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Public Function GetRole(id As ULong) As RestRole
  overload: Discord.Rest.RestGuild.GetRole*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)
  id: CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: CreateRoleAsync(String, Nullable<GuildPermissions>, Nullable<Color>, Boolean, RequestOptions)
  nameWithType: RestGuild.CreateRoleAsync(String, Nullable<GuildPermissions>, Nullable<Color>, Boolean, RequestOptions)
  fullName: Discord.Rest.RestGuild.CreateRoleAsync(System.String, System.Nullable<Discord.GuildPermissions>, System.Nullable<Discord.Color>, System.Boolean, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreateRoleAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 544
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nCreates a new role with the provided name.\n"
  example: []
  syntax:
    content: public Task<RestRole> CreateRoleAsync(string name, GuildPermissions? permissions = null, Color? color = null, bool isHoisted = false, RequestOptions options = null)
    parameters:
    - id: name
      type: System.String
      description: The new name for the role.
    - id: permissions
      type: System.Nullable{Discord.GuildPermissions}
      description: The guild permission that the role should possess.
    - id: color
      type: System.Nullable{Discord.Color}
      description: The color of the role.
    - id: isHoisted
      type: System.Boolean
      description: Whether the role is separated from others on the sidebar.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestRole}
      description: "\nA task that represents the asynchronous creation operation. The task result contains the newly created\nrole.\n"
    content.vb: Public Function CreateRoleAsync(name As String, permissions As GuildPermissions? = Nothing, color As Color? = Nothing, isHoisted As Boolean = False, options As RequestOptions = Nothing) As Task(Of RestRole)
  overload: Discord.Rest.RestGuild.CreateRoleAsync*
  nameWithType.vb: RestGuild.CreateRoleAsync(String, Nullable(Of GuildPermissions), Nullable(Of Color), Boolean, RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestGuild.CreateRoleAsync(System.String, System.Nullable(Of Discord.GuildPermissions), System.Nullable(Of Discord.Color), System.Boolean, Discord.RequestOptions)
  name.vb: CreateRoleAsync(String, Nullable(Of GuildPermissions), Nullable(Of Color), Boolean, RequestOptions)
- uid: Discord.Rest.RestGuild.GetUsersAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.GetUsersAsync(Discord.RequestOptions)
  id: GetUsersAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: GetUsersAsync(RequestOptions)
  nameWithType: RestGuild.GetUsersAsync(RequestOptions)
  fullName: Discord.Rest.RestGuild.GetUsersAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetUsersAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 564
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of all users in this guild.\n"
  remarks: "\nThis method retrieves all users found within this guild.\n"
  example: []
  syntax:
    content: public IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> GetUsersAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: IAsyncEnumerable{IReadOnlyCollection{Discord.Rest.RestGuildUser}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a collection of guild\nusers found within this guild.\n"
    content.vb: Public Function GetUsersAsync(options As RequestOptions = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of RestGuildUser))
  overload: Discord.Rest.RestGuild.GetUsersAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.AddGuildUserAsync(System.UInt64,System.String,Action{Discord.AddGuildUserProperties},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.AddGuildUserAsync(System.UInt64,System.String,Action{Discord.AddGuildUserProperties},Discord.RequestOptions)
  id: AddGuildUserAsync(System.UInt64,System.String,Action{Discord.AddGuildUserProperties},Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: AddGuildUserAsync(UInt64, String, Action<AddGuildUserProperties>, RequestOptions)
  nameWithType: RestGuild.AddGuildUserAsync(UInt64, String, Action<AddGuildUserProperties>, RequestOptions)
  fullName: Discord.Rest.RestGuild.AddGuildUserAsync(System.UInt64, System.String, Action<Discord.AddGuildUserProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: AddGuildUserAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 568
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task<RestGuildUser> AddGuildUserAsync(ulong id, string accessToken, Action<AddGuildUserProperties> func = null, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
    - id: accessToken
      type: System.String
    - id: func
      type: Action{Discord.AddGuildUserProperties}
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task{Discord.Rest.RestGuildUser}
    content.vb: Public Function AddGuildUserAsync(id As ULong, accessToken As String, func As Action(Of AddGuildUserProperties) = Nothing, options As RequestOptions = Nothing) As Task(Of RestGuildUser)
  overload: Discord.Rest.RestGuild.AddGuildUserAsync*
  nameWithType.vb: RestGuild.AddGuildUserAsync(UInt64, String, Action(Of AddGuildUserProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestGuild.AddGuildUserAsync(System.UInt64, System.String, Action(Of Discord.AddGuildUserProperties), Discord.RequestOptions)
  name.vb: AddGuildUserAsync(UInt64, String, Action(Of AddGuildUserProperties), RequestOptions)
- uid: Discord.Rest.RestGuild.GetUserAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.GetUserAsync(System.UInt64,Discord.RequestOptions)
  id: GetUserAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: GetUserAsync(UInt64, RequestOptions)
  nameWithType: RestGuild.GetUserAsync(UInt64, RequestOptions)
  fullName: Discord.Rest.RestGuild.GetUserAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetUserAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 583
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a user from this guild.\n"
  remarks: "\nThis method retrieves a user found within this guild.\n"
  example: []
  syntax:
    content: public Task<RestGuildUser> GetUserAsync(ulong id, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the user.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestGuildUser}
      description: "\nA task that represents the asynchronous get operation. The task result contains the guild user\nassociated with the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Public Function GetUserAsync(id As ULong, options As RequestOptions = Nothing) As Task(Of RestGuildUser)
  overload: Discord.Rest.RestGuild.GetUserAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.GetCurrentUserAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.GetCurrentUserAsync(Discord.RequestOptions)
  id: GetCurrentUserAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: GetCurrentUserAsync(RequestOptions)
  nameWithType: RestGuild.GetCurrentUserAsync(RequestOptions)
  fullName: Discord.Rest.RestGuild.GetCurrentUserAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetCurrentUserAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 594
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the current user for this guild.\n"
  example: []
  syntax:
    content: public Task<RestGuildUser> GetCurrentUserAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestGuildUser}
      description: "\nA task that represents the asynchronous get operation. The task result contains the currently logged-in\nuser within this guild.\n"
    content.vb: Public Function GetCurrentUserAsync(options As RequestOptions = Nothing) As Task(Of RestGuildUser)
  overload: Discord.Rest.RestGuild.GetCurrentUserAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.GetOwnerAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.GetOwnerAsync(Discord.RequestOptions)
  id: GetOwnerAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: GetOwnerAsync(RequestOptions)
  nameWithType: RestGuild.GetOwnerAsync(RequestOptions)
  fullName: Discord.Rest.RestGuild.GetOwnerAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetOwnerAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 604
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the owner of this guild.\n"
  example: []
  syntax:
    content: public Task<RestGuildUser> GetOwnerAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestGuildUser}
      description: "\nA task that represents the asynchronous get operation. The task result contains the owner of this guild.\n"
    content.vb: Public Function GetOwnerAsync(options As RequestOptions = Nothing) As Task(Of RestGuildUser)
  overload: Discord.Rest.RestGuild.GetOwnerAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.PruneUsersAsync(System.Int32,System.Boolean,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.PruneUsersAsync(System.Int32,System.Boolean,Discord.RequestOptions)
  id: PruneUsersAsync(System.Int32,System.Boolean,Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: PruneUsersAsync(Int32, Boolean, RequestOptions)
  nameWithType: RestGuild.PruneUsersAsync(Int32, Boolean, RequestOptions)
  fullName: Discord.Rest.RestGuild.PruneUsersAsync(System.Int32, System.Boolean, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: PruneUsersAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 627
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nPrunes inactive users.\n"
  remarks: "\n<p>\n    This method removes all users that have not logged on in the provided number of <code data-dev-comment-type=\"paramref\" class=\"paramref\">days</code>.\n</p>\n<p>\n    If <code data-dev-comment-type=\"paramref\" class=\"paramref\">simulate</code> is <code>true</code>, this method will only return the number of users that\n    would be removed without kicking the users.\n</p>\n"
  example: []
  syntax:
    content: public Task<int> PruneUsersAsync(int days = 30, bool simulate = false, RequestOptions options = null)
    parameters:
    - id: days
      type: System.Int32
      description: The number of days required for the users to be kicked.
    - id: simulate
      type: System.Boolean
      description: Whether this prune action is a simulation.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{System.Int32}
      description: "\nA task that represents the asynchronous prune operation. The task result contains the number of users to\nbe or has been removed from this guild.\n"
    content.vb: Public Function PruneUsersAsync(days As Integer = 30, simulate As Boolean = False, options As RequestOptions = Nothing) As Task(Of Integer)
  overload: Discord.Rest.RestGuild.PruneUsersAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.GetAuditLogsAsync(System.Int32,Discord.RequestOptions,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{Discord.ActionType})
  commentId: M:Discord.Rest.RestGuild.GetAuditLogsAsync(System.Int32,Discord.RequestOptions,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{Discord.ActionType})
  id: GetAuditLogsAsync(System.Int32,Discord.RequestOptions,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{Discord.ActionType})
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: GetAuditLogsAsync(Int32, RequestOptions, Nullable<UInt64>, Nullable<UInt64>, Nullable<ActionType>)
  nameWithType: RestGuild.GetAuditLogsAsync(Int32, RequestOptions, Nullable<UInt64>, Nullable<UInt64>, Nullable<ActionType>)
  fullName: Discord.Rest.RestGuild.GetAuditLogsAsync(System.Int32, Discord.RequestOptions, System.Nullable<System.UInt64>, System.Nullable<System.UInt64>, System.Nullable<Discord.ActionType>)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetAuditLogsAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 643
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the specified number of audit log entries for this guild.\n"
  example: []
  syntax:
    content: public IAsyncEnumerable<IReadOnlyCollection<RestAuditLogEntry>> GetAuditLogsAsync(int limit, RequestOptions options = null, ulong? beforeId = null, ulong? userId = null, ActionType? actionType = null)
    parameters:
    - id: limit
      type: System.Int32
      description: The number of audit log entries to fetch.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    - id: beforeId
      type: System.Nullable{System.UInt64}
      description: The audit log entry ID to get entries before.
    - id: userId
      type: System.Nullable{System.UInt64}
      description: The user ID to filter entries for.
    - id: actionType
      type: System.Nullable{Discord.ActionType}
      description: The type of actions to filter.
    return:
      type: IAsyncEnumerable{IReadOnlyCollection{Discord.Rest.RestAuditLogEntry}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection\nof the requested audit log entries.\n"
    content.vb: Public Function GetAuditLogsAsync(limit As Integer, options As RequestOptions = Nothing, beforeId As ULong? = Nothing, userId As ULong? = Nothing, actionType As ActionType? = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of RestAuditLogEntry))
  overload: Discord.Rest.RestGuild.GetAuditLogsAsync*
  nameWithType.vb: RestGuild.GetAuditLogsAsync(Int32, RequestOptions, Nullable(Of UInt64), Nullable(Of UInt64), Nullable(Of ActionType))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestGuild.GetAuditLogsAsync(System.Int32, Discord.RequestOptions, System.Nullable(Of System.UInt64), System.Nullable(Of System.UInt64), System.Nullable(Of Discord.ActionType))
  name.vb: GetAuditLogsAsync(Int32, RequestOptions, Nullable(Of UInt64), Nullable(Of UInt64), Nullable(Of ActionType))
- uid: Discord.Rest.RestGuild.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  id: GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: GetWebhookAsync(UInt64, RequestOptions)
  nameWithType: RestGuild.GetWebhookAsync(UInt64, RequestOptions)
  fullName: Discord.Rest.RestGuild.GetWebhookAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetWebhookAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 656
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a webhook found within this guild.\n"
  example: []
  syntax:
    content: public Task<RestWebhook> GetWebhookAsync(ulong id, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
      description: The identifier for the webhook.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestWebhook}
      description: "\nA task that represents the asynchronous get operation. The task result contains the webhook with the\nspecified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Public Function GetWebhookAsync(id As ULong, options As RequestOptions = Nothing) As Task(Of RestWebhook)
  overload: Discord.Rest.RestGuild.GetWebhookAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.GetWebhooksAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.GetWebhooksAsync(Discord.RequestOptions)
  id: GetWebhooksAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: GetWebhooksAsync(RequestOptions)
  nameWithType: RestGuild.GetWebhooksAsync(RequestOptions)
  fullName: Discord.Rest.RestGuild.GetWebhooksAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetWebhooksAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 667
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of all webhook from this guild.\n"
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<RestWebhook>> GetWebhooksAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{IReadOnlyCollection{Discord.Rest.RestWebhook}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection\nof webhooks found within the guild.\n"
    content.vb: Public Function GetWebhooksAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestWebhook))
  overload: Discord.Rest.RestGuild.GetWebhooksAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.ToString
  commentId: M:Discord.Rest.RestGuild.ToString
  id: ToString
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: RestGuild.ToString()
  fullName: Discord.Rest.RestGuild.ToString()
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ToString
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 676
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nReturns the name of the guild.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nThe name of the guild.\n"
    content.vb: Public Overrides Function ToString As String
  overload: Discord.Rest.RestGuild.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.Rest.RestGuild.GetEmoteAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.GetEmoteAsync(System.UInt64,Discord.RequestOptions)
  id: GetEmoteAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: GetEmoteAsync(UInt64, RequestOptions)
  nameWithType: RestGuild.GetEmoteAsync(UInt64, RequestOptions)
  fullName: Discord.Rest.RestGuild.GetEmoteAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetEmoteAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 681
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task<GuildEmote> GetEmoteAsync(ulong id, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task{Discord.GuildEmote}
    content.vb: Public Function GetEmoteAsync(id As ULong, options As RequestOptions = Nothing) As Task(Of GuildEmote)
  overload: Discord.Rest.RestGuild.GetEmoteAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.CreateEmoteAsync(System.String,Discord.Image,Discord.Optional{IEnumerable{Discord.IRole}},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.CreateEmoteAsync(System.String,Discord.Image,Discord.Optional{IEnumerable{Discord.IRole}},Discord.RequestOptions)
  id: CreateEmoteAsync(System.String,Discord.Image,Discord.Optional{IEnumerable{Discord.IRole}},Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: CreateEmoteAsync(String, Image, Optional<IEnumerable<IRole>>, RequestOptions)
  nameWithType: RestGuild.CreateEmoteAsync(String, Image, Optional<IEnumerable<IRole>>, RequestOptions)
  fullName: Discord.Rest.RestGuild.CreateEmoteAsync(System.String, Discord.Image, Discord.Optional<IEnumerable<Discord.IRole>>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreateEmoteAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 684
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task<GuildEmote> CreateEmoteAsync(string name, Image image, Optional<IEnumerable<IRole>> roles = default(Optional<IEnumerable<IRole>>), RequestOptions options = null)
    parameters:
    - id: name
      type: System.String
    - id: image
      type: Discord.Image
    - id: roles
      type: Discord.Optional{IEnumerable{Discord.IRole}}
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task{Discord.GuildEmote}
    content.vb: Public Function CreateEmoteAsync(name As String, image As Image, roles As  Optional  (Of IEnumerable(Of IRole))  = Nothing, options As RequestOptions = Nothing) As Task(Of GuildEmote)
  overload: Discord.Rest.RestGuild.CreateEmoteAsync*
  nameWithType.vb: RestGuild.CreateEmoteAsync(String, Image, Optional(Of IEnumerable(Of IRole)), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestGuild.CreateEmoteAsync(System.String, Discord.Image, Discord.Optional(Of IEnumerable(Of Discord.IRole)), Discord.RequestOptions)
  name.vb: CreateEmoteAsync(String, Image, Optional(Of IEnumerable(Of IRole)), RequestOptions)
- uid: Discord.Rest.RestGuild.ModifyEmoteAsync(Discord.GuildEmote,Action{Discord.EmoteProperties},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.ModifyEmoteAsync(Discord.GuildEmote,Action{Discord.EmoteProperties},Discord.RequestOptions)
  id: ModifyEmoteAsync(Discord.GuildEmote,Action{Discord.EmoteProperties},Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: ModifyEmoteAsync(GuildEmote, Action<EmoteProperties>, RequestOptions)
  nameWithType: RestGuild.ModifyEmoteAsync(GuildEmote, Action<EmoteProperties>, RequestOptions)
  fullName: Discord.Rest.RestGuild.ModifyEmoteAsync(Discord.GuildEmote, Action<Discord.EmoteProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ModifyEmoteAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 688
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task<GuildEmote> ModifyEmoteAsync(GuildEmote emote, Action<EmoteProperties> func, RequestOptions options = null)
    parameters:
    - id: emote
      type: Discord.GuildEmote
    - id: func
      type: Action{Discord.EmoteProperties}
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task{Discord.GuildEmote}
    content.vb: Public Function ModifyEmoteAsync(emote As GuildEmote, func As Action(Of EmoteProperties), options As RequestOptions = Nothing) As Task(Of GuildEmote)
  overload: Discord.Rest.RestGuild.ModifyEmoteAsync*
  nameWithType.vb: RestGuild.ModifyEmoteAsync(GuildEmote, Action(Of EmoteProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestGuild.ModifyEmoteAsync(Discord.GuildEmote, Action(Of Discord.EmoteProperties), Discord.RequestOptions)
  name.vb: ModifyEmoteAsync(GuildEmote, Action(Of EmoteProperties), RequestOptions)
- uid: Discord.Rest.RestGuild.DeleteEmoteAsync(Discord.GuildEmote,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuild.DeleteEmoteAsync(Discord.GuildEmote,Discord.RequestOptions)
  id: DeleteEmoteAsync(Discord.GuildEmote,Discord.RequestOptions)
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: DeleteEmoteAsync(GuildEmote, RequestOptions)
  nameWithType: RestGuild.DeleteEmoteAsync(GuildEmote, RequestOptions)
  fullName: Discord.Rest.RestGuild.DeleteEmoteAsync(Discord.GuildEmote, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteEmoteAsync
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 691
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task DeleteEmoteAsync(GuildEmote emote, RequestOptions options = null)
    parameters:
    - id: emote
      type: Discord.GuildEmote
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function DeleteEmoteAsync(emote As GuildEmote, options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestGuild.DeleteEmoteAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestGuild.Discord#IGuild#AudioClient
  commentId: P:Discord.Rest.RestGuild.Discord#IGuild#AudioClient
  id: Discord#IGuild#AudioClient
  isEii: true
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: IGuild.AudioClient
  nameWithType: RestGuild.IGuild.AudioClient
  fullName: Discord.Rest.RestGuild.Discord.IGuild.AudioClient
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.AudioClient
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 698
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the <xref href=\"Discord.Audio.IAudioClient\" data-throw-if-not-resolved=\"false\"></xref> currently associated with this guild.\n"
  example: []
  syntax:
    content: IAudioClient IGuild.AudioClient { get; }
    parameters: []
    return:
      type: Discord.Audio.IAudioClient
      description: "\nAn <xref href=\"Discord.Audio.IAudioClient\" data-throw-if-not-resolved=\"false\"></xref> currently associated with this guild.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IGuild.AudioClient As IAudioClient Implements IGuild.AudioClient
  overload: Discord.Rest.RestGuild.Discord#IGuild#AudioClient*
  implements:
  - Discord.IGuild.AudioClient
  nameWithType.vb: RestGuild.Discord.IGuild.AudioClient
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IGuild.AudioClient
- uid: Discord.Rest.RestGuild.Discord#IGuild#EveryoneRole
  commentId: P:Discord.Rest.RestGuild.Discord#IGuild#EveryoneRole
  id: Discord#IGuild#EveryoneRole
  isEii: true
  parent: Discord.Rest.RestGuild
  langs:
  - csharp
  - vb
  name: IGuild.EveryoneRole
  nameWithType: RestGuild.IGuild.EveryoneRole
  fullName: Discord.Rest.RestGuild.Discord.IGuild.EveryoneRole
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.EveryoneRole
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestGuild.cs
    startLine: 700
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the built-in role containing all users in this guild.\n"
  example: []
  syntax:
    content: IRole IGuild.EveryoneRole { get; }
    parameters: []
    return:
      type: Discord.IRole
      description: "\nA role object that represents an <code>@everyone</code> role in this guild.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IGuild.EveryoneRole As IRole Implements IGuild.EveryoneRole
  overload: Discord.Rest.RestGuild.Discord#IGuild#EveryoneRole*
  implements:
  - Discord.IGuild.EveryoneRole
  nameWithType.vb: RestGuild.Discord.IGuild.EveryoneRole
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IGuild.EveryoneRole
references:
- uid: Discord.Rest
  commentId: N:Discord.Rest
  name: Discord.Rest
  nameWithType: Discord.Rest
  fullName: Discord.Rest
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Rest.RestEntity{System.UInt64}
  commentId: T:Discord.Rest.RestEntity{System.UInt64}
  parent: Discord.Rest
  definition: Discord.Rest.RestEntity`1
  name: RestEntity<UInt64>
  nameWithType: RestEntity<UInt64>
  fullName: Discord.Rest.RestEntity<System.UInt64>
  nameWithType.vb: RestEntity(Of UInt64)
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64)
  name.vb: RestEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild
  commentId: T:Discord.IGuild
  parent: Discord
  name: IGuild
  nameWithType: IGuild
  fullName: Discord.IGuild
- uid: Discord.IDeletable
  commentId: T:Discord.IDeletable
  parent: Discord
  name: IDeletable
  nameWithType: IDeletable
  fullName: Discord.IDeletable
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IUpdateable
  commentId: T:Discord.IUpdateable
  parent: Discord
  name: IUpdateable
  nameWithType: IUpdateable
  fullName: Discord.IUpdateable
- uid: Discord.Rest.RestEntity{System.UInt64}.Id
  commentId: P:Discord.Rest.RestEntity{System.UInt64}.Id
  parent: Discord.Rest.RestEntity{System.UInt64}
  definition: Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<UInt64>.Id
  fullName: Discord.Rest.RestEntity<System.UInt64>.Id
  nameWithType.vb: RestEntity(Of UInt64).Id
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64).Id
- uid: Discord.Rest.RestEntity`1
  commentId: T:Discord.Rest.RestEntity`1
  name: RestEntity<T>
  nameWithType: RestEntity<T>
  fullName: Discord.Rest.RestEntity<T>
  nameWithType.vb: RestEntity(Of T)
  fullName.vb: Discord.Rest.RestEntity(Of T)
  name.vb: RestEntity(Of T)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.Rest.RestEntity`1.Id
  commentId: P:Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<T>.Id
  fullName: Discord.Rest.RestEntity<T>.Id
  nameWithType.vb: RestEntity(Of T).Id
  fullName.vb: Discord.Rest.RestEntity(Of T).Id
- uid: Discord.Rest.RestGuild.Name*
  commentId: Overload:Discord.Rest.RestGuild.Name
  name: Name
  nameWithType: RestGuild.Name
  fullName: Discord.Rest.RestGuild.Name
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.Rest.RestGuild.AFKTimeout*
  commentId: Overload:Discord.Rest.RestGuild.AFKTimeout
  name: AFKTimeout
  nameWithType: RestGuild.AFKTimeout
  fullName: Discord.Rest.RestGuild.AFKTimeout
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Discord.Rest.RestGuild.IsEmbeddable*
  commentId: Overload:Discord.Rest.RestGuild.IsEmbeddable
  name: IsEmbeddable
  nameWithType: RestGuild.IsEmbeddable
  fullName: Discord.Rest.RestGuild.IsEmbeddable
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.Rest.RestGuild.VerificationLevel*
  commentId: Overload:Discord.Rest.RestGuild.VerificationLevel
  name: VerificationLevel
  nameWithType: RestGuild.VerificationLevel
  fullName: Discord.Rest.RestGuild.VerificationLevel
- uid: Discord.IGuild.VerificationLevel
  commentId: P:Discord.IGuild.VerificationLevel
  parent: Discord.IGuild
  name: VerificationLevel
  nameWithType: IGuild.VerificationLevel
  fullName: Discord.IGuild.VerificationLevel
- uid: Discord.VerificationLevel
  commentId: T:Discord.VerificationLevel
  parent: Discord
  name: VerificationLevel
  nameWithType: VerificationLevel
  fullName: Discord.VerificationLevel
- uid: Discord.Rest.RestGuild.MfaLevel*
  commentId: Overload:Discord.Rest.RestGuild.MfaLevel
  name: MfaLevel
  nameWithType: RestGuild.MfaLevel
  fullName: Discord.Rest.RestGuild.MfaLevel
- uid: Discord.IGuild.MfaLevel
  commentId: P:Discord.IGuild.MfaLevel
  parent: Discord.IGuild
  name: MfaLevel
  nameWithType: IGuild.MfaLevel
  fullName: Discord.IGuild.MfaLevel
- uid: Discord.MfaLevel
  commentId: T:Discord.MfaLevel
  parent: Discord
  name: MfaLevel
  nameWithType: MfaLevel
  fullName: Discord.MfaLevel
- uid: Discord.Rest.RestGuild.DefaultMessageNotifications*
  commentId: Overload:Discord.Rest.RestGuild.DefaultMessageNotifications
  name: DefaultMessageNotifications
  nameWithType: RestGuild.DefaultMessageNotifications
  fullName: Discord.Rest.RestGuild.DefaultMessageNotifications
- uid: Discord.IGuild.DefaultMessageNotifications
  commentId: P:Discord.IGuild.DefaultMessageNotifications
  parent: Discord.IGuild
  name: DefaultMessageNotifications
  nameWithType: IGuild.DefaultMessageNotifications
  fullName: Discord.IGuild.DefaultMessageNotifications
- uid: Discord.DefaultMessageNotifications
  commentId: T:Discord.DefaultMessageNotifications
  parent: Discord
  name: DefaultMessageNotifications
  nameWithType: DefaultMessageNotifications
  fullName: Discord.DefaultMessageNotifications
- uid: Discord.Rest.RestGuild.ExplicitContentFilter*
  commentId: Overload:Discord.Rest.RestGuild.ExplicitContentFilter
  name: ExplicitContentFilter
  nameWithType: RestGuild.ExplicitContentFilter
  fullName: Discord.Rest.RestGuild.ExplicitContentFilter
- uid: Discord.IGuild.ExplicitContentFilter
  commentId: P:Discord.IGuild.ExplicitContentFilter
  parent: Discord.IGuild
  name: ExplicitContentFilter
  nameWithType: IGuild.ExplicitContentFilter
  fullName: Discord.IGuild.ExplicitContentFilter
- uid: Discord.ExplicitContentFilterLevel
  commentId: T:Discord.ExplicitContentFilterLevel
  parent: Discord
  name: ExplicitContentFilterLevel
  nameWithType: ExplicitContentFilterLevel
  fullName: Discord.ExplicitContentFilterLevel
- uid: Discord.Rest.RestGuild.AFKChannelId*
  commentId: Overload:Discord.Rest.RestGuild.AFKChannelId
  name: AFKChannelId
  nameWithType: RestGuild.AFKChannelId
  fullName: Discord.Rest.RestGuild.AFKChannelId
- uid: System.Nullable{System.UInt64}
  commentId: '!:System.Nullable{System.UInt64}'
  definition: System.Nullable`1
  name: Nullable<UInt64>
  nameWithType: Nullable<UInt64>
  fullName: System.Nullable<System.UInt64>
  nameWithType.vb: Nullable(Of UInt64)
  fullName.vb: System.Nullable(Of System.UInt64)
  name.vb: Nullable(Of UInt64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.EmbedChannelId*
  commentId: Overload:Discord.Rest.RestGuild.EmbedChannelId
  name: EmbedChannelId
  nameWithType: RestGuild.EmbedChannelId
  fullName: Discord.Rest.RestGuild.EmbedChannelId
- uid: Discord.Rest.RestGuild.SystemChannelId*
  commentId: Overload:Discord.Rest.RestGuild.SystemChannelId
  name: SystemChannelId
  nameWithType: RestGuild.SystemChannelId
  fullName: Discord.Rest.RestGuild.SystemChannelId
- uid: Discord.Rest.RestGuild.OwnerId*
  commentId: Overload:Discord.Rest.RestGuild.OwnerId
  name: OwnerId
  nameWithType: RestGuild.OwnerId
  fullName: Discord.Rest.RestGuild.OwnerId
- uid: System.UInt64
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Discord.Rest.RestGuild.VoiceRegionId*
  commentId: Overload:Discord.Rest.RestGuild.VoiceRegionId
  name: VoiceRegionId
  nameWithType: RestGuild.VoiceRegionId
  fullName: Discord.Rest.RestGuild.VoiceRegionId
- uid: Discord.Rest.RestGuild.IconId*
  commentId: Overload:Discord.Rest.RestGuild.IconId
  name: IconId
  nameWithType: RestGuild.IconId
  fullName: Discord.Rest.RestGuild.IconId
- uid: Discord.Rest.RestGuild.SplashId*
  commentId: Overload:Discord.Rest.RestGuild.SplashId
  name: SplashId
  nameWithType: RestGuild.SplashId
  fullName: Discord.Rest.RestGuild.SplashId
- uid: Discord.Rest.RestGuild.ApplicationId*
  commentId: Overload:Discord.Rest.RestGuild.ApplicationId
  name: ApplicationId
  nameWithType: RestGuild.ApplicationId
  fullName: Discord.Rest.RestGuild.ApplicationId
- uid: Discord.Rest.RestGuild.PremiumTier*
  commentId: Overload:Discord.Rest.RestGuild.PremiumTier
  name: PremiumTier
  nameWithType: RestGuild.PremiumTier
  fullName: Discord.Rest.RestGuild.PremiumTier
- uid: Discord.IGuild.PremiumTier
  commentId: P:Discord.IGuild.PremiumTier
  parent: Discord.IGuild
  name: PremiumTier
  nameWithType: IGuild.PremiumTier
  fullName: Discord.IGuild.PremiumTier
- uid: Discord.PremiumTier
  commentId: T:Discord.PremiumTier
  parent: Discord
  name: PremiumTier
  nameWithType: PremiumTier
  fullName: Discord.PremiumTier
- uid: Discord.Rest.RestGuild.BannerId*
  commentId: Overload:Discord.Rest.RestGuild.BannerId
  name: BannerId
  nameWithType: RestGuild.BannerId
  fullName: Discord.Rest.RestGuild.BannerId
- uid: Discord.Rest.RestGuild.VanityURLCode*
  commentId: Overload:Discord.Rest.RestGuild.VanityURLCode
  name: VanityURLCode
  nameWithType: RestGuild.VanityURLCode
  fullName: Discord.Rest.RestGuild.VanityURLCode
- uid: Discord.Rest.RestGuild.SystemChannelFlags*
  commentId: Overload:Discord.Rest.RestGuild.SystemChannelFlags
  name: SystemChannelFlags
  nameWithType: RestGuild.SystemChannelFlags
  fullName: Discord.Rest.RestGuild.SystemChannelFlags
- uid: Discord.IGuild.SystemChannelFlags
  commentId: P:Discord.IGuild.SystemChannelFlags
  parent: Discord.IGuild
  name: SystemChannelFlags
  nameWithType: IGuild.SystemChannelFlags
  fullName: Discord.IGuild.SystemChannelFlags
- uid: Discord.SystemChannelMessageDeny
  commentId: T:Discord.SystemChannelMessageDeny
  parent: Discord
  name: SystemChannelMessageDeny
  nameWithType: SystemChannelMessageDeny
  fullName: Discord.SystemChannelMessageDeny
- uid: Discord.Rest.RestGuild.Description*
  commentId: Overload:Discord.Rest.RestGuild.Description
  name: Description
  nameWithType: RestGuild.Description
  fullName: Discord.Rest.RestGuild.Description
- uid: Discord.Rest.RestGuild.PremiumSubscriptionCount*
  commentId: Overload:Discord.Rest.RestGuild.PremiumSubscriptionCount
  name: PremiumSubscriptionCount
  nameWithType: RestGuild.PremiumSubscriptionCount
  fullName: Discord.Rest.RestGuild.PremiumSubscriptionCount
- uid: Discord.Rest.RestGuild.PreferredLocale*
  commentId: Overload:Discord.Rest.RestGuild.PreferredLocale
  name: PreferredLocale
  nameWithType: RestGuild.PreferredLocale
  fullName: Discord.Rest.RestGuild.PreferredLocale
- uid: Discord.Rest.RestGuild.PreferredCulture*
  commentId: Overload:Discord.Rest.RestGuild.PreferredCulture
  name: PreferredCulture
  nameWithType: RestGuild.PreferredCulture
  fullName: Discord.Rest.RestGuild.PreferredCulture
- uid: CultureInfo
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: CultureInfo
- uid: Discord.Rest.RestGuild.CreatedAt*
  commentId: Overload:Discord.Rest.RestGuild.CreatedAt
  name: CreatedAt
  nameWithType: RestGuild.CreatedAt
  fullName: Discord.Rest.RestGuild.CreatedAt
- uid: DateTimeOffset
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: DateTimeOffset
- uid: Discord.Rest.RestGuild.DefaultChannelId*
  commentId: Overload:Discord.Rest.RestGuild.DefaultChannelId
  name: DefaultChannelId
  nameWithType: RestGuild.DefaultChannelId
  fullName: Discord.Rest.RestGuild.DefaultChannelId
- uid: Discord.Rest.RestGuild.IconUrl*
  commentId: Overload:Discord.Rest.RestGuild.IconUrl
  name: IconUrl
  nameWithType: RestGuild.IconUrl
  fullName: Discord.Rest.RestGuild.IconUrl
- uid: Discord.Rest.RestGuild.SplashUrl*
  commentId: Overload:Discord.Rest.RestGuild.SplashUrl
  name: SplashUrl
  nameWithType: RestGuild.SplashUrl
  fullName: Discord.Rest.RestGuild.SplashUrl
- uid: Discord.Rest.RestGuild.BannerUrl*
  commentId: Overload:Discord.Rest.RestGuild.BannerUrl
  name: BannerUrl
  nameWithType: RestGuild.BannerUrl
  fullName: Discord.Rest.RestGuild.BannerUrl
- uid: Discord.Rest.RestGuild.EveryoneRole*
  commentId: Overload:Discord.Rest.RestGuild.EveryoneRole
  name: EveryoneRole
  nameWithType: RestGuild.EveryoneRole
  fullName: Discord.Rest.RestGuild.EveryoneRole
- uid: Discord.Rest.RestRole
  commentId: T:Discord.Rest.RestRole
  parent: Discord.Rest
  name: RestRole
  nameWithType: RestRole
  fullName: Discord.Rest.RestRole
- uid: Discord.Rest.RestGuild.Roles*
  commentId: Overload:Discord.Rest.RestGuild.Roles
  name: Roles
  nameWithType: RestGuild.Roles
  fullName: Discord.Rest.RestGuild.Roles
- uid: IReadOnlyCollection{Discord.Rest.RestRole}
  commentId: '!:IReadOnlyCollection{Discord.Rest.RestRole}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<RestRole>
  nameWithType: IReadOnlyCollection<RestRole>
  fullName: IReadOnlyCollection<Discord.Rest.RestRole>
  nameWithType.vb: IReadOnlyCollection(Of RestRole)
  fullName.vb: IReadOnlyCollection(Of Discord.Rest.RestRole)
  name.vb: IReadOnlyCollection(Of RestRole)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestRole
    name: RestRole
    nameWithType: RestRole
    fullName: Discord.Rest.RestRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestRole
    name: RestRole
    nameWithType: RestRole
    fullName: Discord.Rest.RestRole
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<>
  nameWithType: IReadOnlyCollection<>
  fullName: IReadOnlyCollection<>
  nameWithType.vb: IReadOnlyCollection(Of )
  fullName.vb: IReadOnlyCollection(Of )
  name.vb: IReadOnlyCollection(Of )
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.Emotes*
  commentId: Overload:Discord.Rest.RestGuild.Emotes
  name: Emotes
  nameWithType: RestGuild.Emotes
  fullName: Discord.Rest.RestGuild.Emotes
- uid: IReadOnlyCollection{Discord.GuildEmote}
  commentId: '!:IReadOnlyCollection{Discord.GuildEmote}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<GuildEmote>
  nameWithType: IReadOnlyCollection<GuildEmote>
  fullName: IReadOnlyCollection<Discord.GuildEmote>
  nameWithType.vb: IReadOnlyCollection(Of GuildEmote)
  fullName.vb: IReadOnlyCollection(Of Discord.GuildEmote)
  name.vb: IReadOnlyCollection(Of GuildEmote)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildEmote
    name: GuildEmote
    nameWithType: GuildEmote
    fullName: Discord.GuildEmote
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildEmote
    name: GuildEmote
    nameWithType: GuildEmote
    fullName: Discord.GuildEmote
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.Features*
  commentId: Overload:Discord.Rest.RestGuild.Features
  name: Features
  nameWithType: RestGuild.Features
  fullName: Discord.Rest.RestGuild.Features
- uid: IReadOnlyCollection{System.String}
  commentId: '!:IReadOnlyCollection{System.String}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<String>
  nameWithType: IReadOnlyCollection<String>
  fullName: IReadOnlyCollection<System.String>
  nameWithType.vb: IReadOnlyCollection(Of String)
  fullName.vb: IReadOnlyCollection(Of System.String)
  name.vb: IReadOnlyCollection(Of String)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.UpdateAsync*
  commentId: Overload:Discord.Rest.RestGuild.UpdateAsync
  name: UpdateAsync
  nameWithType: RestGuild.UpdateAsync
  fullName: Discord.Rest.RestGuild.UpdateAsync
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Discord.Rest.RestGuild.DeleteAsync*
  commentId: Overload:Discord.Rest.RestGuild.DeleteAsync
  name: DeleteAsync
  nameWithType: RestGuild.DeleteAsync
  fullName: Discord.Rest.RestGuild.DeleteAsync
- uid: Discord.Rest.RestGuild.ModifyAsync*
  commentId: Overload:Discord.Rest.RestGuild.ModifyAsync
  name: ModifyAsync
  nameWithType: RestGuild.ModifyAsync
  fullName: Discord.Rest.RestGuild.ModifyAsync
- uid: Action{Discord.GuildProperties}
  commentId: '!:Action{Discord.GuildProperties}'
  definition: Action`1
  name: Action<GuildProperties>
  nameWithType: Action<GuildProperties>
  fullName: Action<Discord.GuildProperties>
  nameWithType.vb: Action(Of GuildProperties)
  fullName.vb: Action(Of Discord.GuildProperties)
  name.vb: Action(Of GuildProperties)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildProperties
    name: GuildProperties
    nameWithType: GuildProperties
    fullName: Discord.GuildProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildProperties
    name: GuildProperties
    nameWithType: GuildProperties
    fullName: Discord.GuildProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.ModifyEmbedAsync*
  commentId: Overload:Discord.Rest.RestGuild.ModifyEmbedAsync
  name: ModifyEmbedAsync
  nameWithType: RestGuild.ModifyEmbedAsync
  fullName: Discord.Rest.RestGuild.ModifyEmbedAsync
- uid: Action{Discord.GuildEmbedProperties}
  commentId: '!:Action{Discord.GuildEmbedProperties}'
  definition: Action`1
  name: Action<GuildEmbedProperties>
  nameWithType: Action<GuildEmbedProperties>
  fullName: Action<Discord.GuildEmbedProperties>
  nameWithType.vb: Action(Of GuildEmbedProperties)
  fullName.vb: Action(Of Discord.GuildEmbedProperties)
  name.vb: Action(Of GuildEmbedProperties)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildEmbedProperties
    name: GuildEmbedProperties
    nameWithType: GuildEmbedProperties
    fullName: Discord.GuildEmbedProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildEmbedProperties
    name: GuildEmbedProperties
    nameWithType: GuildEmbedProperties
    fullName: Discord.GuildEmbedProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.ReorderChannelsAsync*
  commentId: Overload:Discord.Rest.RestGuild.ReorderChannelsAsync
  name: ReorderChannelsAsync
  nameWithType: RestGuild.ReorderChannelsAsync
  fullName: Discord.Rest.RestGuild.ReorderChannelsAsync
- uid: IEnumerable{Discord.ReorderChannelProperties}
  commentId: '!:IEnumerable{Discord.ReorderChannelProperties}'
  definition: IEnumerable`1
  name: IEnumerable<ReorderChannelProperties>
  nameWithType: IEnumerable<ReorderChannelProperties>
  fullName: IEnumerable<Discord.ReorderChannelProperties>
  nameWithType.vb: IEnumerable(Of ReorderChannelProperties)
  fullName.vb: IEnumerable(Of Discord.ReorderChannelProperties)
  name.vb: IEnumerable(Of ReorderChannelProperties)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ReorderChannelProperties
    name: ReorderChannelProperties
    nameWithType: ReorderChannelProperties
    fullName: Discord.ReorderChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ReorderChannelProperties
    name: ReorderChannelProperties
    nameWithType: ReorderChannelProperties
    fullName: Discord.ReorderChannelProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.ReorderRolesAsync*
  commentId: Overload:Discord.Rest.RestGuild.ReorderRolesAsync
  name: ReorderRolesAsync
  nameWithType: RestGuild.ReorderRolesAsync
  fullName: Discord.Rest.RestGuild.ReorderRolesAsync
- uid: IEnumerable{Discord.ReorderRoleProperties}
  commentId: '!:IEnumerable{Discord.ReorderRoleProperties}'
  definition: IEnumerable`1
  name: IEnumerable<ReorderRoleProperties>
  nameWithType: IEnumerable<ReorderRoleProperties>
  fullName: IEnumerable<Discord.ReorderRoleProperties>
  nameWithType.vb: IEnumerable(Of ReorderRoleProperties)
  fullName.vb: IEnumerable(Of Discord.ReorderRoleProperties)
  name.vb: IEnumerable(Of ReorderRoleProperties)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ReorderRoleProperties
    name: ReorderRoleProperties
    nameWithType: ReorderRoleProperties
    fullName: Discord.ReorderRoleProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ReorderRoleProperties
    name: ReorderRoleProperties
    nameWithType: ReorderRoleProperties
    fullName: Discord.ReorderRoleProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.LeaveAsync*
  commentId: Overload:Discord.Rest.RestGuild.LeaveAsync
  name: LeaveAsync
  nameWithType: RestGuild.LeaveAsync
  fullName: Discord.Rest.RestGuild.LeaveAsync
- uid: Discord.Rest.RestGuild.GetBansAsync*
  commentId: Overload:Discord.Rest.RestGuild.GetBansAsync
  name: GetBansAsync
  nameWithType: RestGuild.GetBansAsync
  fullName: Discord.Rest.RestGuild.GetBansAsync
- uid: Task{IReadOnlyCollection{Discord.Rest.RestBan}}
  commentId: '!:Task{IReadOnlyCollection{Discord.Rest.RestBan}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<RestBan>>
  nameWithType: Task<IReadOnlyCollection<RestBan>>
  fullName: Task<IReadOnlyCollection<Discord.Rest.RestBan>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestBan))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.Rest.RestBan))
  name.vb: Task(Of IReadOnlyCollection(Of RestBan))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestBan
    name: RestBan
    nameWithType: RestBan
    fullName: Discord.Rest.RestBan
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestBan
    name: RestBan
    nameWithType: RestBan
    fullName: Discord.Rest.RestBan
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.GetBanAsync*
  commentId: Overload:Discord.Rest.RestGuild.GetBanAsync
  name: GetBanAsync
  nameWithType: RestGuild.GetBanAsync
  fullName: Discord.Rest.RestGuild.GetBanAsync
- uid: Discord.IUser
  commentId: T:Discord.IUser
  parent: Discord
  name: IUser
  nameWithType: IUser
  fullName: Discord.IUser
- uid: Task{Discord.Rest.RestBan}
  commentId: '!:Task{Discord.Rest.RestBan}'
  definition: Task`1
  name: Task<RestBan>
  nameWithType: Task<RestBan>
  fullName: Task<Discord.Rest.RestBan>
  nameWithType.vb: Task(Of RestBan)
  fullName.vb: Task(Of Discord.Rest.RestBan)
  name.vb: Task(Of RestBan)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestBan
    name: RestBan
    nameWithType: RestBan
    fullName: Discord.Rest.RestBan
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestBan
    name: RestBan
    nameWithType: RestBan
    fullName: Discord.Rest.RestBan
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.AddBanAsync*
  commentId: Overload:Discord.Rest.RestGuild.AddBanAsync
  name: AddBanAsync
  nameWithType: RestGuild.AddBanAsync
  fullName: Discord.Rest.RestGuild.AddBanAsync
- uid: Discord.Rest.RestGuild.RemoveBanAsync*
  commentId: Overload:Discord.Rest.RestGuild.RemoveBanAsync
  name: RemoveBanAsync
  nameWithType: RestGuild.RemoveBanAsync
  fullName: Discord.Rest.RestGuild.RemoveBanAsync
- uid: Discord.Rest.RestGuild.GetChannelsAsync*
  commentId: Overload:Discord.Rest.RestGuild.GetChannelsAsync
  name: GetChannelsAsync
  nameWithType: RestGuild.GetChannelsAsync
  fullName: Discord.Rest.RestGuild.GetChannelsAsync
- uid: Task{IReadOnlyCollection{Discord.Rest.RestGuildChannel}}
  commentId: '!:Task{IReadOnlyCollection{Discord.Rest.RestGuildChannel}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<RestGuildChannel>>
  nameWithType: Task<IReadOnlyCollection<RestGuildChannel>>
  fullName: Task<IReadOnlyCollection<Discord.Rest.RestGuildChannel>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestGuildChannel))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.Rest.RestGuildChannel))
  name.vb: Task(Of IReadOnlyCollection(Of RestGuildChannel))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestGuildChannel
    name: RestGuildChannel
    nameWithType: RestGuildChannel
    fullName: Discord.Rest.RestGuildChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestGuildChannel
    name: RestGuildChannel
    nameWithType: RestGuildChannel
    fullName: Discord.Rest.RestGuildChannel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.GetChannelAsync*
  commentId: Overload:Discord.Rest.RestGuild.GetChannelAsync
  name: GetChannelAsync
  nameWithType: RestGuild.GetChannelAsync
  fullName: Discord.Rest.RestGuild.GetChannelAsync
- uid: Task{Discord.Rest.RestGuildChannel}
  commentId: '!:Task{Discord.Rest.RestGuildChannel}'
  definition: Task`1
  name: Task<RestGuildChannel>
  nameWithType: Task<RestGuildChannel>
  fullName: Task<Discord.Rest.RestGuildChannel>
  nameWithType.vb: Task(Of RestGuildChannel)
  fullName.vb: Task(Of Discord.Rest.RestGuildChannel)
  name.vb: Task(Of RestGuildChannel)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestGuildChannel
    name: RestGuildChannel
    nameWithType: RestGuildChannel
    fullName: Discord.Rest.RestGuildChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestGuildChannel
    name: RestGuildChannel
    nameWithType: RestGuildChannel
    fullName: Discord.Rest.RestGuildChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.GetTextChannelAsync*
  commentId: Overload:Discord.Rest.RestGuild.GetTextChannelAsync
  name: GetTextChannelAsync
  nameWithType: RestGuild.GetTextChannelAsync
  fullName: Discord.Rest.RestGuild.GetTextChannelAsync
- uid: Task{Discord.Rest.RestTextChannel}
  commentId: '!:Task{Discord.Rest.RestTextChannel}'
  definition: Task`1
  name: Task<RestTextChannel>
  nameWithType: Task<RestTextChannel>
  fullName: Task<Discord.Rest.RestTextChannel>
  nameWithType.vb: Task(Of RestTextChannel)
  fullName.vb: Task(Of Discord.Rest.RestTextChannel)
  name.vb: Task(Of RestTextChannel)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestTextChannel
    name: RestTextChannel
    nameWithType: RestTextChannel
    fullName: Discord.Rest.RestTextChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestTextChannel
    name: RestTextChannel
    nameWithType: RestTextChannel
    fullName: Discord.Rest.RestTextChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.GetTextChannelsAsync*
  commentId: Overload:Discord.Rest.RestGuild.GetTextChannelsAsync
  name: GetTextChannelsAsync
  nameWithType: RestGuild.GetTextChannelsAsync
  fullName: Discord.Rest.RestGuild.GetTextChannelsAsync
- uid: Task{IReadOnlyCollection{Discord.Rest.RestTextChannel}}
  commentId: '!:Task{IReadOnlyCollection{Discord.Rest.RestTextChannel}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<RestTextChannel>>
  nameWithType: Task<IReadOnlyCollection<RestTextChannel>>
  fullName: Task<IReadOnlyCollection<Discord.Rest.RestTextChannel>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestTextChannel))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.Rest.RestTextChannel))
  name.vb: Task(Of IReadOnlyCollection(Of RestTextChannel))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestTextChannel
    name: RestTextChannel
    nameWithType: RestTextChannel
    fullName: Discord.Rest.RestTextChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestTextChannel
    name: RestTextChannel
    nameWithType: RestTextChannel
    fullName: Discord.Rest.RestTextChannel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.GetVoiceChannelAsync*
  commentId: Overload:Discord.Rest.RestGuild.GetVoiceChannelAsync
  name: GetVoiceChannelAsync
  nameWithType: RestGuild.GetVoiceChannelAsync
  fullName: Discord.Rest.RestGuild.GetVoiceChannelAsync
- uid: Task{Discord.Rest.RestVoiceChannel}
  commentId: '!:Task{Discord.Rest.RestVoiceChannel}'
  definition: Task`1
  name: Task<RestVoiceChannel>
  nameWithType: Task<RestVoiceChannel>
  fullName: Task<Discord.Rest.RestVoiceChannel>
  nameWithType.vb: Task(Of RestVoiceChannel)
  fullName.vb: Task(Of Discord.Rest.RestVoiceChannel)
  name.vb: Task(Of RestVoiceChannel)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestVoiceChannel
    name: RestVoiceChannel
    nameWithType: RestVoiceChannel
    fullName: Discord.Rest.RestVoiceChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestVoiceChannel
    name: RestVoiceChannel
    nameWithType: RestVoiceChannel
    fullName: Discord.Rest.RestVoiceChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.GetVoiceChannelsAsync*
  commentId: Overload:Discord.Rest.RestGuild.GetVoiceChannelsAsync
  name: GetVoiceChannelsAsync
  nameWithType: RestGuild.GetVoiceChannelsAsync
  fullName: Discord.Rest.RestGuild.GetVoiceChannelsAsync
- uid: Task{IReadOnlyCollection{Discord.Rest.RestVoiceChannel}}
  commentId: '!:Task{IReadOnlyCollection{Discord.Rest.RestVoiceChannel}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<RestVoiceChannel>>
  nameWithType: Task<IReadOnlyCollection<RestVoiceChannel>>
  fullName: Task<IReadOnlyCollection<Discord.Rest.RestVoiceChannel>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestVoiceChannel))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.Rest.RestVoiceChannel))
  name.vb: Task(Of IReadOnlyCollection(Of RestVoiceChannel))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestVoiceChannel
    name: RestVoiceChannel
    nameWithType: RestVoiceChannel
    fullName: Discord.Rest.RestVoiceChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestVoiceChannel
    name: RestVoiceChannel
    nameWithType: RestVoiceChannel
    fullName: Discord.Rest.RestVoiceChannel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.GetCategoryChannelsAsync*
  commentId: Overload:Discord.Rest.RestGuild.GetCategoryChannelsAsync
  name: GetCategoryChannelsAsync
  nameWithType: RestGuild.GetCategoryChannelsAsync
  fullName: Discord.Rest.RestGuild.GetCategoryChannelsAsync
- uid: Task{IReadOnlyCollection{Discord.Rest.RestCategoryChannel}}
  commentId: '!:Task{IReadOnlyCollection{Discord.Rest.RestCategoryChannel}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<RestCategoryChannel>>
  nameWithType: Task<IReadOnlyCollection<RestCategoryChannel>>
  fullName: Task<IReadOnlyCollection<Discord.Rest.RestCategoryChannel>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestCategoryChannel))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.Rest.RestCategoryChannel))
  name.vb: Task(Of IReadOnlyCollection(Of RestCategoryChannel))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestCategoryChannel
    name: RestCategoryChannel
    nameWithType: RestCategoryChannel
    fullName: Discord.Rest.RestCategoryChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestCategoryChannel
    name: RestCategoryChannel
    nameWithType: RestCategoryChannel
    fullName: Discord.Rest.RestCategoryChannel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.GetAFKChannelAsync*
  commentId: Overload:Discord.Rest.RestGuild.GetAFKChannelAsync
  name: GetAFKChannelAsync
  nameWithType: RestGuild.GetAFKChannelAsync
  fullName: Discord.Rest.RestGuild.GetAFKChannelAsync
- uid: Discord.Rest.RestGuild.GetDefaultChannelAsync*
  commentId: Overload:Discord.Rest.RestGuild.GetDefaultChannelAsync
  name: GetDefaultChannelAsync
  nameWithType: RestGuild.GetDefaultChannelAsync
  fullName: Discord.Rest.RestGuild.GetDefaultChannelAsync
- uid: Discord.Rest.RestGuild.GetEmbedChannelAsync*
  commentId: Overload:Discord.Rest.RestGuild.GetEmbedChannelAsync
  name: GetEmbedChannelAsync
  nameWithType: RestGuild.GetEmbedChannelAsync
  fullName: Discord.Rest.RestGuild.GetEmbedChannelAsync
- uid: Discord.Rest.RestGuild.GetSystemChannelAsync*
  commentId: Overload:Discord.Rest.RestGuild.GetSystemChannelAsync
  name: GetSystemChannelAsync
  nameWithType: RestGuild.GetSystemChannelAsync
  fullName: Discord.Rest.RestGuild.GetSystemChannelAsync
- uid: Discord.Rest.RestGuild.CreateTextChannelAsync*
  commentId: Overload:Discord.Rest.RestGuild.CreateTextChannelAsync
  name: CreateTextChannelAsync
  nameWithType: RestGuild.CreateTextChannelAsync
  fullName: Discord.Rest.RestGuild.CreateTextChannelAsync
- uid: Action{Discord.TextChannelProperties}
  commentId: '!:Action{Discord.TextChannelProperties}'
  definition: Action`1
  name: Action<TextChannelProperties>
  nameWithType: Action<TextChannelProperties>
  fullName: Action<Discord.TextChannelProperties>
  nameWithType.vb: Action(Of TextChannelProperties)
  fullName.vb: Action(Of Discord.TextChannelProperties)
  name.vb: Action(Of TextChannelProperties)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.TextChannelProperties
    name: TextChannelProperties
    nameWithType: TextChannelProperties
    fullName: Discord.TextChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.TextChannelProperties
    name: TextChannelProperties
    nameWithType: TextChannelProperties
    fullName: Discord.TextChannelProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.CreateVoiceChannelAsync*
  commentId: Overload:Discord.Rest.RestGuild.CreateVoiceChannelAsync
  name: CreateVoiceChannelAsync
  nameWithType: RestGuild.CreateVoiceChannelAsync
  fullName: Discord.Rest.RestGuild.CreateVoiceChannelAsync
- uid: Action{Discord.VoiceChannelProperties}
  commentId: '!:Action{Discord.VoiceChannelProperties}'
  definition: Action`1
  name: Action<VoiceChannelProperties>
  nameWithType: Action<VoiceChannelProperties>
  fullName: Action<Discord.VoiceChannelProperties>
  nameWithType.vb: Action(Of VoiceChannelProperties)
  fullName.vb: Action(Of Discord.VoiceChannelProperties)
  name.vb: Action(Of VoiceChannelProperties)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.VoiceChannelProperties
    name: VoiceChannelProperties
    nameWithType: VoiceChannelProperties
    fullName: Discord.VoiceChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.VoiceChannelProperties
    name: VoiceChannelProperties
    nameWithType: VoiceChannelProperties
    fullName: Discord.VoiceChannelProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.CreateCategoryChannelAsync*
  commentId: Overload:Discord.Rest.RestGuild.CreateCategoryChannelAsync
  name: CreateCategoryChannelAsync
  nameWithType: RestGuild.CreateCategoryChannelAsync
  fullName: Discord.Rest.RestGuild.CreateCategoryChannelAsync
- uid: Action{Discord.GuildChannelProperties}
  commentId: '!:Action{Discord.GuildChannelProperties}'
  definition: Action`1
  name: Action<GuildChannelProperties>
  nameWithType: Action<GuildChannelProperties>
  fullName: Action<Discord.GuildChannelProperties>
  nameWithType.vb: Action(Of GuildChannelProperties)
  fullName.vb: Action(Of Discord.GuildChannelProperties)
  name.vb: Action(Of GuildChannelProperties)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildChannelProperties
    name: GuildChannelProperties
    nameWithType: GuildChannelProperties
    fullName: Discord.GuildChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildChannelProperties
    name: GuildChannelProperties
    nameWithType: GuildChannelProperties
    fullName: Discord.GuildChannelProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{Discord.Rest.RestCategoryChannel}
  commentId: '!:Task{Discord.Rest.RestCategoryChannel}'
  definition: Task`1
  name: Task<RestCategoryChannel>
  nameWithType: Task<RestCategoryChannel>
  fullName: Task<Discord.Rest.RestCategoryChannel>
  nameWithType.vb: Task(Of RestCategoryChannel)
  fullName.vb: Task(Of Discord.Rest.RestCategoryChannel)
  name.vb: Task(Of RestCategoryChannel)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestCategoryChannel
    name: RestCategoryChannel
    nameWithType: RestCategoryChannel
    fullName: Discord.Rest.RestCategoryChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestCategoryChannel
    name: RestCategoryChannel
    nameWithType: RestCategoryChannel
    fullName: Discord.Rest.RestCategoryChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.GetVoiceRegionsAsync*
  commentId: Overload:Discord.Rest.RestGuild.GetVoiceRegionsAsync
  name: GetVoiceRegionsAsync
  nameWithType: RestGuild.GetVoiceRegionsAsync
  fullName: Discord.Rest.RestGuild.GetVoiceRegionsAsync
- uid: Task{IReadOnlyCollection{Discord.Rest.RestVoiceRegion}}
  commentId: '!:Task{IReadOnlyCollection{Discord.Rest.RestVoiceRegion}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<RestVoiceRegion>>
  nameWithType: Task<IReadOnlyCollection<RestVoiceRegion>>
  fullName: Task<IReadOnlyCollection<Discord.Rest.RestVoiceRegion>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestVoiceRegion))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.Rest.RestVoiceRegion))
  name.vb: Task(Of IReadOnlyCollection(Of RestVoiceRegion))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestVoiceRegion
    name: RestVoiceRegion
    nameWithType: RestVoiceRegion
    fullName: Discord.Rest.RestVoiceRegion
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestVoiceRegion
    name: RestVoiceRegion
    nameWithType: RestVoiceRegion
    fullName: Discord.Rest.RestVoiceRegion
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.GetIntegrationsAsync*
  commentId: Overload:Discord.Rest.RestGuild.GetIntegrationsAsync
  name: GetIntegrationsAsync
  nameWithType: RestGuild.GetIntegrationsAsync
  fullName: Discord.Rest.RestGuild.GetIntegrationsAsync
- uid: Task{IReadOnlyCollection{Discord.Rest.RestGuildIntegration}}
  commentId: '!:Task{IReadOnlyCollection{Discord.Rest.RestGuildIntegration}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<RestGuildIntegration>>
  nameWithType: Task<IReadOnlyCollection<RestGuildIntegration>>
  fullName: Task<IReadOnlyCollection<Discord.Rest.RestGuildIntegration>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestGuildIntegration))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.Rest.RestGuildIntegration))
  name.vb: Task(Of IReadOnlyCollection(Of RestGuildIntegration))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestGuildIntegration
    name: RestGuildIntegration
    nameWithType: RestGuildIntegration
    fullName: Discord.Rest.RestGuildIntegration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestGuildIntegration
    name: RestGuildIntegration
    nameWithType: RestGuildIntegration
    fullName: Discord.Rest.RestGuildIntegration
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.CreateIntegrationAsync*
  commentId: Overload:Discord.Rest.RestGuild.CreateIntegrationAsync
  name: CreateIntegrationAsync
  nameWithType: RestGuild.CreateIntegrationAsync
  fullName: Discord.Rest.RestGuild.CreateIntegrationAsync
- uid: Task{Discord.Rest.RestGuildIntegration}
  commentId: '!:Task{Discord.Rest.RestGuildIntegration}'
  definition: Task`1
  name: Task<RestGuildIntegration>
  nameWithType: Task<RestGuildIntegration>
  fullName: Task<Discord.Rest.RestGuildIntegration>
  nameWithType.vb: Task(Of RestGuildIntegration)
  fullName.vb: Task(Of Discord.Rest.RestGuildIntegration)
  name.vb: Task(Of RestGuildIntegration)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestGuildIntegration
    name: RestGuildIntegration
    nameWithType: RestGuildIntegration
    fullName: Discord.Rest.RestGuildIntegration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestGuildIntegration
    name: RestGuildIntegration
    nameWithType: RestGuildIntegration
    fullName: Discord.Rest.RestGuildIntegration
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.GetInvitesAsync*
  commentId: Overload:Discord.Rest.RestGuild.GetInvitesAsync
  name: GetInvitesAsync
  nameWithType: RestGuild.GetInvitesAsync
  fullName: Discord.Rest.RestGuild.GetInvitesAsync
- uid: Task{IReadOnlyCollection{Discord.Rest.RestInviteMetadata}}
  commentId: '!:Task{IReadOnlyCollection{Discord.Rest.RestInviteMetadata}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<RestInviteMetadata>>
  nameWithType: Task<IReadOnlyCollection<RestInviteMetadata>>
  fullName: Task<IReadOnlyCollection<Discord.Rest.RestInviteMetadata>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestInviteMetadata))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.Rest.RestInviteMetadata))
  name.vb: Task(Of IReadOnlyCollection(Of RestInviteMetadata))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestInviteMetadata
    name: RestInviteMetadata
    nameWithType: RestInviteMetadata
    fullName: Discord.Rest.RestInviteMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestInviteMetadata
    name: RestInviteMetadata
    nameWithType: RestInviteMetadata
    fullName: Discord.Rest.RestInviteMetadata
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.GetVanityInviteAsync*
  commentId: Overload:Discord.Rest.RestGuild.GetVanityInviteAsync
  name: GetVanityInviteAsync
  nameWithType: RestGuild.GetVanityInviteAsync
  fullName: Discord.Rest.RestGuild.GetVanityInviteAsync
- uid: Task{Discord.Rest.RestInviteMetadata}
  commentId: '!:Task{Discord.Rest.RestInviteMetadata}'
  definition: Task`1
  name: Task<RestInviteMetadata>
  nameWithType: Task<RestInviteMetadata>
  fullName: Task<Discord.Rest.RestInviteMetadata>
  nameWithType.vb: Task(Of RestInviteMetadata)
  fullName.vb: Task(Of Discord.Rest.RestInviteMetadata)
  name.vb: Task(Of RestInviteMetadata)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestInviteMetadata
    name: RestInviteMetadata
    nameWithType: RestInviteMetadata
    fullName: Discord.Rest.RestInviteMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestInviteMetadata
    name: RestInviteMetadata
    nameWithType: RestInviteMetadata
    fullName: Discord.Rest.RestInviteMetadata
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.GetRole*
  commentId: Overload:Discord.Rest.RestGuild.GetRole
  name: GetRole
  nameWithType: RestGuild.GetRole
  fullName: Discord.Rest.RestGuild.GetRole
- uid: Discord.Rest.RestGuild.CreateRoleAsync*
  commentId: Overload:Discord.Rest.RestGuild.CreateRoleAsync
  name: CreateRoleAsync
  nameWithType: RestGuild.CreateRoleAsync
  fullName: Discord.Rest.RestGuild.CreateRoleAsync
- uid: System.Nullable{Discord.GuildPermissions}
  commentId: '!:System.Nullable{Discord.GuildPermissions}'
  definition: System.Nullable`1
  name: Nullable<GuildPermissions>
  nameWithType: Nullable<GuildPermissions>
  fullName: System.Nullable<Discord.GuildPermissions>
  nameWithType.vb: Nullable(Of GuildPermissions)
  fullName.vb: System.Nullable(Of Discord.GuildPermissions)
  name.vb: Nullable(Of GuildPermissions)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildPermissions
    name: GuildPermissions
    nameWithType: GuildPermissions
    fullName: Discord.GuildPermissions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildPermissions
    name: GuildPermissions
    nameWithType: GuildPermissions
    fullName: Discord.GuildPermissions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{Discord.Color}
  commentId: '!:System.Nullable{Discord.Color}'
  definition: System.Nullable`1
  name: Nullable<Color>
  nameWithType: Nullable<Color>
  fullName: System.Nullable<Discord.Color>
  nameWithType.vb: Nullable(Of Color)
  fullName.vb: System.Nullable(Of Discord.Color)
  name.vb: Nullable(Of Color)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Color
    name: Color
    nameWithType: Color
    fullName: Discord.Color
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Color
    name: Color
    nameWithType: Color
    fullName: Discord.Color
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{Discord.Rest.RestRole}
  commentId: '!:Task{Discord.Rest.RestRole}'
  definition: Task`1
  name: Task<RestRole>
  nameWithType: Task<RestRole>
  fullName: Task<Discord.Rest.RestRole>
  nameWithType.vb: Task(Of RestRole)
  fullName.vb: Task(Of Discord.Rest.RestRole)
  name.vb: Task(Of RestRole)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestRole
    name: RestRole
    nameWithType: RestRole
    fullName: Discord.Rest.RestRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestRole
    name: RestRole
    nameWithType: RestRole
    fullName: Discord.Rest.RestRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.GetUsersAsync*
  commentId: Overload:Discord.Rest.RestGuild.GetUsersAsync
  name: GetUsersAsync
  nameWithType: RestGuild.GetUsersAsync
  fullName: Discord.Rest.RestGuild.GetUsersAsync
- uid: IAsyncEnumerable{IReadOnlyCollection{Discord.Rest.RestGuildUser}}
  commentId: '!:IAsyncEnumerable{IReadOnlyCollection{Discord.Rest.RestGuildUser}}'
  definition: IAsyncEnumerable`1
  name: IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>>
  fullName: IAsyncEnumerable<IReadOnlyCollection<Discord.Rest.RestGuildUser>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of RestGuildUser))
  fullName.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of Discord.Rest.RestGuildUser))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of RestGuildUser))
  spec.csharp:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestGuildUser
    name: RestGuildUser
    nameWithType: RestGuildUser
    fullName: Discord.Rest.RestGuildUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestGuildUser
    name: RestGuildUser
    nameWithType: RestGuildUser
    fullName: Discord.Rest.RestGuildUser
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IAsyncEnumerable`1
  isExternal: true
  name: IAsyncEnumerable<>
  nameWithType: IAsyncEnumerable<>
  fullName: IAsyncEnumerable<>
  nameWithType.vb: IAsyncEnumerable(Of )
  fullName.vb: IAsyncEnumerable(Of )
  name.vb: IAsyncEnumerable(Of )
  spec.csharp:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.AddGuildUserAsync*
  commentId: Overload:Discord.Rest.RestGuild.AddGuildUserAsync
  name: AddGuildUserAsync
  nameWithType: RestGuild.AddGuildUserAsync
  fullName: Discord.Rest.RestGuild.AddGuildUserAsync
- uid: Action{Discord.AddGuildUserProperties}
  commentId: '!:Action{Discord.AddGuildUserProperties}'
  definition: Action`1
  name: Action<AddGuildUserProperties>
  nameWithType: Action<AddGuildUserProperties>
  fullName: Action<Discord.AddGuildUserProperties>
  nameWithType.vb: Action(Of AddGuildUserProperties)
  fullName.vb: Action(Of Discord.AddGuildUserProperties)
  name.vb: Action(Of AddGuildUserProperties)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.AddGuildUserProperties
    name: AddGuildUserProperties
    nameWithType: AddGuildUserProperties
    fullName: Discord.AddGuildUserProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.AddGuildUserProperties
    name: AddGuildUserProperties
    nameWithType: AddGuildUserProperties
    fullName: Discord.AddGuildUserProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{Discord.Rest.RestGuildUser}
  commentId: '!:Task{Discord.Rest.RestGuildUser}'
  definition: Task`1
  name: Task<RestGuildUser>
  nameWithType: Task<RestGuildUser>
  fullName: Task<Discord.Rest.RestGuildUser>
  nameWithType.vb: Task(Of RestGuildUser)
  fullName.vb: Task(Of Discord.Rest.RestGuildUser)
  name.vb: Task(Of RestGuildUser)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestGuildUser
    name: RestGuildUser
    nameWithType: RestGuildUser
    fullName: Discord.Rest.RestGuildUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestGuildUser
    name: RestGuildUser
    nameWithType: RestGuildUser
    fullName: Discord.Rest.RestGuildUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.GetUserAsync*
  commentId: Overload:Discord.Rest.RestGuild.GetUserAsync
  name: GetUserAsync
  nameWithType: RestGuild.GetUserAsync
  fullName: Discord.Rest.RestGuild.GetUserAsync
- uid: Discord.Rest.RestGuild.GetCurrentUserAsync*
  commentId: Overload:Discord.Rest.RestGuild.GetCurrentUserAsync
  name: GetCurrentUserAsync
  nameWithType: RestGuild.GetCurrentUserAsync
  fullName: Discord.Rest.RestGuild.GetCurrentUserAsync
- uid: Discord.Rest.RestGuild.GetOwnerAsync*
  commentId: Overload:Discord.Rest.RestGuild.GetOwnerAsync
  name: GetOwnerAsync
  nameWithType: RestGuild.GetOwnerAsync
  fullName: Discord.Rest.RestGuild.GetOwnerAsync
- uid: Discord.Rest.RestGuild.PruneUsersAsync*
  commentId: Overload:Discord.Rest.RestGuild.PruneUsersAsync
  name: PruneUsersAsync
  nameWithType: RestGuild.PruneUsersAsync
  fullName: Discord.Rest.RestGuild.PruneUsersAsync
- uid: Task{System.Int32}
  commentId: '!:Task{System.Int32}'
  definition: Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.GetAuditLogsAsync*
  commentId: Overload:Discord.Rest.RestGuild.GetAuditLogsAsync
  name: GetAuditLogsAsync
  nameWithType: RestGuild.GetAuditLogsAsync
  fullName: Discord.Rest.RestGuild.GetAuditLogsAsync
- uid: System.Nullable{Discord.ActionType}
  commentId: '!:System.Nullable{Discord.ActionType}'
  definition: System.Nullable`1
  name: Nullable<ActionType>
  nameWithType: Nullable<ActionType>
  fullName: System.Nullable<Discord.ActionType>
  nameWithType.vb: Nullable(Of ActionType)
  fullName.vb: System.Nullable(Of Discord.ActionType)
  name.vb: Nullable(Of ActionType)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: Discord.ActionType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: Discord.ActionType
  - name: )
    nameWithType: )
    fullName: )
- uid: IAsyncEnumerable{IReadOnlyCollection{Discord.Rest.RestAuditLogEntry}}
  commentId: '!:IAsyncEnumerable{IReadOnlyCollection{Discord.Rest.RestAuditLogEntry}}'
  definition: IAsyncEnumerable`1
  name: IAsyncEnumerable<IReadOnlyCollection<RestAuditLogEntry>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<RestAuditLogEntry>>
  fullName: IAsyncEnumerable<IReadOnlyCollection<Discord.Rest.RestAuditLogEntry>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of RestAuditLogEntry))
  fullName.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of Discord.Rest.RestAuditLogEntry))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of RestAuditLogEntry))
  spec.csharp:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestAuditLogEntry
    name: RestAuditLogEntry
    nameWithType: RestAuditLogEntry
    fullName: Discord.Rest.RestAuditLogEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestAuditLogEntry
    name: RestAuditLogEntry
    nameWithType: RestAuditLogEntry
    fullName: Discord.Rest.RestAuditLogEntry
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.GetWebhookAsync*
  commentId: Overload:Discord.Rest.RestGuild.GetWebhookAsync
  name: GetWebhookAsync
  nameWithType: RestGuild.GetWebhookAsync
  fullName: Discord.Rest.RestGuild.GetWebhookAsync
- uid: Task{Discord.Rest.RestWebhook}
  commentId: '!:Task{Discord.Rest.RestWebhook}'
  definition: Task`1
  name: Task<RestWebhook>
  nameWithType: Task<RestWebhook>
  fullName: Task<Discord.Rest.RestWebhook>
  nameWithType.vb: Task(Of RestWebhook)
  fullName.vb: Task(Of Discord.Rest.RestWebhook)
  name.vb: Task(Of RestWebhook)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestWebhook
    name: RestWebhook
    nameWithType: RestWebhook
    fullName: Discord.Rest.RestWebhook
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestWebhook
    name: RestWebhook
    nameWithType: RestWebhook
    fullName: Discord.Rest.RestWebhook
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.GetWebhooksAsync*
  commentId: Overload:Discord.Rest.RestGuild.GetWebhooksAsync
  name: GetWebhooksAsync
  nameWithType: RestGuild.GetWebhooksAsync
  fullName: Discord.Rest.RestGuild.GetWebhooksAsync
- uid: Task{IReadOnlyCollection{Discord.Rest.RestWebhook}}
  commentId: '!:Task{IReadOnlyCollection{Discord.Rest.RestWebhook}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<RestWebhook>>
  nameWithType: Task<IReadOnlyCollection<RestWebhook>>
  fullName: Task<IReadOnlyCollection<Discord.Rest.RestWebhook>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestWebhook))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.Rest.RestWebhook))
  name.vb: Task(Of IReadOnlyCollection(Of RestWebhook))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestWebhook
    name: RestWebhook
    nameWithType: RestWebhook
    fullName: Discord.Rest.RestWebhook
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestWebhook
    name: RestWebhook
    nameWithType: RestWebhook
    fullName: Discord.Rest.RestWebhook
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.ToString*
  commentId: Overload:Discord.Rest.RestGuild.ToString
  name: ToString
  nameWithType: RestGuild.ToString
  fullName: Discord.Rest.RestGuild.ToString
- uid: Discord.Rest.RestGuild.GetEmoteAsync*
  commentId: Overload:Discord.Rest.RestGuild.GetEmoteAsync
  name: GetEmoteAsync
  nameWithType: RestGuild.GetEmoteAsync
  fullName: Discord.Rest.RestGuild.GetEmoteAsync
- uid: Task{Discord.GuildEmote}
  commentId: '!:Task{Discord.GuildEmote}'
  definition: Task`1
  name: Task<GuildEmote>
  nameWithType: Task<GuildEmote>
  fullName: Task<Discord.GuildEmote>
  nameWithType.vb: Task(Of GuildEmote)
  fullName.vb: Task(Of Discord.GuildEmote)
  name.vb: Task(Of GuildEmote)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildEmote
    name: GuildEmote
    nameWithType: GuildEmote
    fullName: Discord.GuildEmote
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildEmote
    name: GuildEmote
    nameWithType: GuildEmote
    fullName: Discord.GuildEmote
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.CreateEmoteAsync*
  commentId: Overload:Discord.Rest.RestGuild.CreateEmoteAsync
  name: CreateEmoteAsync
  nameWithType: RestGuild.CreateEmoteAsync
  fullName: Discord.Rest.RestGuild.CreateEmoteAsync
- uid: Discord.Image
  commentId: T:Discord.Image
  parent: Discord
  name: Image
  nameWithType: Image
  fullName: Discord.Image
- uid: Discord.Optional{IEnumerable{Discord.IRole}}
  commentId: T:Discord.Optional{IEnumerable{Discord.IRole}}
  parent: Discord
  definition: Discord.Optional`1
  name: Optional<IEnumerable<IRole>>
  nameWithType: Optional<IEnumerable<IRole>>
  fullName: Discord.Optional<IEnumerable<Discord.IRole>>
  nameWithType.vb: Optional(Of IEnumerable(Of IRole))
  fullName.vb: Discord.Optional(Of IEnumerable(Of Discord.IRole))
  name.vb: Optional(Of IEnumerable(Of IRole))
  spec.csharp:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: <
    nameWithType: <
    fullName: <
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Optional`1
  commentId: T:Discord.Optional`1
  parent: Discord
  name: Optional<T>
  nameWithType: Optional<T>
  fullName: Discord.Optional<T>
  nameWithType.vb: Optional(Of T)
  fullName.vb: Discord.Optional(Of T)
  name.vb: Optional(Of T)
  spec.csharp:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.ModifyEmoteAsync*
  commentId: Overload:Discord.Rest.RestGuild.ModifyEmoteAsync
  name: ModifyEmoteAsync
  nameWithType: RestGuild.ModifyEmoteAsync
  fullName: Discord.Rest.RestGuild.ModifyEmoteAsync
- uid: Discord.GuildEmote
  commentId: T:Discord.GuildEmote
  parent: Discord
  name: GuildEmote
  nameWithType: GuildEmote
  fullName: Discord.GuildEmote
- uid: Action{Discord.EmoteProperties}
  commentId: '!:Action{Discord.EmoteProperties}'
  definition: Action`1
  name: Action<EmoteProperties>
  nameWithType: Action<EmoteProperties>
  fullName: Action<Discord.EmoteProperties>
  nameWithType.vb: Action(Of EmoteProperties)
  fullName.vb: Action(Of Discord.EmoteProperties)
  name.vb: Action(Of EmoteProperties)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.EmoteProperties
    name: EmoteProperties
    nameWithType: EmoteProperties
    fullName: Discord.EmoteProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.EmoteProperties
    name: EmoteProperties
    nameWithType: EmoteProperties
    fullName: Discord.EmoteProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuild.DeleteEmoteAsync*
  commentId: Overload:Discord.Rest.RestGuild.DeleteEmoteAsync
  name: DeleteEmoteAsync
  nameWithType: RestGuild.DeleteEmoteAsync
  fullName: Discord.Rest.RestGuild.DeleteEmoteAsync
- uid: Discord.Rest.RestGuild.Discord#IGuild#AudioClient*
  commentId: Overload:Discord.Rest.RestGuild.Discord#IGuild#AudioClient
  name: IGuild.AudioClient
  nameWithType: RestGuild.IGuild.AudioClient
  fullName: Discord.Rest.RestGuild.Discord.IGuild.AudioClient
  nameWithType.vb: RestGuild.Discord.IGuild.AudioClient
  name.vb: Discord.IGuild.AudioClient
- uid: Discord.IGuild.AudioClient
  commentId: P:Discord.IGuild.AudioClient
  parent: Discord.IGuild
  name: AudioClient
  nameWithType: IGuild.AudioClient
  fullName: Discord.IGuild.AudioClient
- uid: Discord.Audio.IAudioClient
  commentId: T:Discord.Audio.IAudioClient
  parent: Discord.Audio
  name: IAudioClient
  nameWithType: IAudioClient
  fullName: Discord.Audio.IAudioClient
- uid: Discord.Audio
  commentId: N:Discord.Audio
  name: Discord.Audio
  nameWithType: Discord.Audio
  fullName: Discord.Audio
- uid: Discord.Rest.RestGuild.Discord#IGuild#EveryoneRole*
  commentId: Overload:Discord.Rest.RestGuild.Discord#IGuild#EveryoneRole
  name: IGuild.EveryoneRole
  nameWithType: RestGuild.IGuild.EveryoneRole
  fullName: Discord.Rest.RestGuild.Discord.IGuild.EveryoneRole
  nameWithType.vb: RestGuild.Discord.IGuild.EveryoneRole
  name.vb: Discord.IGuild.EveryoneRole
- uid: Discord.IGuild.EveryoneRole
  commentId: P:Discord.IGuild.EveryoneRole
  parent: Discord.IGuild
  name: EveryoneRole
  nameWithType: IGuild.EveryoneRole
  fullName: Discord.IGuild.EveryoneRole
- uid: Discord.IRole
  commentId: T:Discord.IRole
  parent: Discord
  name: IRole
  nameWithType: IRole
  fullName: Discord.IRole
