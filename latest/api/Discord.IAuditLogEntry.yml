### YamlMime:ManagedReference
items:
- uid: Discord.IAuditLogEntry
  commentId: T:Discord.IAuditLogEntry
  id: IAuditLogEntry
  parent: Discord
  children:
  - Discord.IAuditLogEntry.Action
  - Discord.IAuditLogEntry.Data
  - Discord.IAuditLogEntry.Reason
  - Discord.IAuditLogEntry.User
  langs:
  - csharp
  - vb
  name: IAuditLogEntry
  nameWithType: IAuditLogEntry
  fullName: Discord.IAuditLogEntry
  type: Interface
  source:
    remote:
      path: src/Discord.Net.Core/Entities/AuditLogs/IAuditLogEntry.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IAuditLogEntry
    path: ../src/Discord.Net.Core/Entities/AuditLogs/IAuditLogEntry.cs
    startLine: 11
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nRepresents a generic audit log entry.\n"
  example: []
  syntax:
    content: 'public interface IAuditLogEntry : ISnowflakeEntity, IEntity<ulong>'
    content.vb: >-
      Public Interface IAuditLogEntry
          Inherits ISnowflakeEntity
  inheritedMembers:
  - Discord.ISnowflakeEntity.CreatedAt
  - Discord.IEntity{System.UInt64}.Id
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Discord.IAuditLogEntry.Action
  commentId: P:Discord.IAuditLogEntry.Action
  id: Action
  parent: Discord.IAuditLogEntry
  langs:
  - csharp
  - vb
  name: Action
  nameWithType: IAuditLogEntry.Action
  fullName: Discord.IAuditLogEntry.Action
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/AuditLogs/IAuditLogEntry.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Action
    path: ../src/Discord.Net.Core/Entities/AuditLogs/IAuditLogEntry.cs
    startLine: 19
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the action which occurred to create this entry.\n"
  example: []
  syntax:
    content: ActionType Action { get; }
    parameters: []
    return:
      type: Discord.ActionType
      description: "\nThe type of action for this audit log entry.\n"
    content.vb: ReadOnly Property Action As ActionType
  overload: Discord.IAuditLogEntry.Action*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IAuditLogEntry.Data
  commentId: P:Discord.IAuditLogEntry.Data
  id: Data
  parent: Discord.IAuditLogEntry
  langs:
  - csharp
  - vb
  name: Data
  nameWithType: IAuditLogEntry.Data
  fullName: Discord.IAuditLogEntry.Data
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/AuditLogs/IAuditLogEntry.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Data
    path: ../src/Discord.Net.Core/Entities/AuditLogs/IAuditLogEntry.cs
    startLine: 27
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the data for this entry.\n"
  example: []
  syntax:
    content: IAuditLogData Data { get; }
    parameters: []
    return:
      type: Discord.IAuditLogData
      description: "\nAn <xref href=\"Discord.IAuditLogData\" data-throw-if-not-resolved=\"false\"></xref> for this audit log entry; <code>null</code> if no data is available.\n"
    content.vb: ReadOnly Property Data As IAuditLogData
  overload: Discord.IAuditLogEntry.Data*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IAuditLogEntry.User
  commentId: P:Discord.IAuditLogEntry.User
  id: User
  parent: Discord.IAuditLogEntry
  langs:
  - csharp
  - vb
  name: User
  nameWithType: IAuditLogEntry.User
  fullName: Discord.IAuditLogEntry.User
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/AuditLogs/IAuditLogEntry.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: User
    path: ../src/Discord.Net.Core/Entities/AuditLogs/IAuditLogEntry.cs
    startLine: 35
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the user responsible for causing the changes.\n"
  example: []
  syntax:
    content: IUser User { get; }
    parameters: []
    return:
      type: Discord.IUser
      description: "\nA user object.\n"
    content.vb: ReadOnly Property User As IUser
  overload: Discord.IAuditLogEntry.User*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.IAuditLogEntry.Reason
  commentId: P:Discord.IAuditLogEntry.Reason
  id: Reason
  parent: Discord.IAuditLogEntry
  langs:
  - csharp
  - vb
  name: Reason
  nameWithType: IAuditLogEntry.Reason
  fullName: Discord.IAuditLogEntry.Reason
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/AuditLogs/IAuditLogEntry.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Reason
    path: ../src/Discord.Net.Core/Entities/AuditLogs/IAuditLogEntry.cs
    startLine: 43
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the reason behind the change.\n"
  example: []
  syntax:
    content: string Reason { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA string containing the reason for the change; <code>null</code> if none is provided.\n"
    content.vb: ReadOnly Property Reason As String
  overload: Discord.IAuditLogEntry.Reason*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.ISnowflakeEntity.CreatedAt
  commentId: P:Discord.ISnowflakeEntity.CreatedAt
  parent: Discord.ISnowflakeEntity
  name: CreatedAt
  nameWithType: ISnowflakeEntity.CreatedAt
  fullName: Discord.ISnowflakeEntity.CreatedAt
- uid: Discord.IEntity{System.UInt64}.Id
  commentId: P:Discord.IEntity{System.UInt64}.Id
  parent: Discord.IEntity{System.UInt64}
  definition: Discord.IEntity`1.Id
  name: Id
  nameWithType: IEntity<UInt64>.Id
  fullName: Discord.IEntity<System.UInt64>.Id
  nameWithType.vb: IEntity(Of UInt64).Id
  fullName.vb: Discord.IEntity(Of System.UInt64).Id
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IEntity`1.Id
  commentId: P:Discord.IEntity`1.Id
  name: Id
  nameWithType: IEntity<TId>.Id
  fullName: Discord.IEntity<TId>.Id
  nameWithType.vb: IEntity(Of TId).Id
  fullName.vb: Discord.IEntity(Of TId).Id
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IAuditLogEntry.Action*
  commentId: Overload:Discord.IAuditLogEntry.Action
  name: Action
  nameWithType: IAuditLogEntry.Action
  fullName: Discord.IAuditLogEntry.Action
- uid: Discord.ActionType
  commentId: T:Discord.ActionType
  parent: Discord
  name: ActionType
  nameWithType: ActionType
  fullName: Discord.ActionType
- uid: Discord.IAuditLogData
  commentId: T:Discord.IAuditLogData
  parent: Discord
  name: IAuditLogData
  nameWithType: IAuditLogData
  fullName: Discord.IAuditLogData
- uid: Discord.IAuditLogEntry.Data*
  commentId: Overload:Discord.IAuditLogEntry.Data
  name: Data
  nameWithType: IAuditLogEntry.Data
  fullName: Discord.IAuditLogEntry.Data
- uid: Discord.IAuditLogEntry.User*
  commentId: Overload:Discord.IAuditLogEntry.User
  name: User
  nameWithType: IAuditLogEntry.User
  fullName: Discord.IAuditLogEntry.User
- uid: Discord.IUser
  commentId: T:Discord.IUser
  parent: Discord
  name: IUser
  nameWithType: IUser
  fullName: Discord.IUser
- uid: Discord.IAuditLogEntry.Reason*
  commentId: Overload:Discord.IAuditLogEntry.Reason
  name: Reason
  nameWithType: IAuditLogEntry.Reason
  fullName: Discord.IAuditLogEntry.Reason
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
