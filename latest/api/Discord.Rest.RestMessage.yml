### YamlMime:ManagedReference
items:
- uid: Discord.Rest.RestMessage
  commentId: T:Discord.Rest.RestMessage
  id: RestMessage
  parent: Discord.Rest
  children:
  - Discord.Rest.RestMessage.Activity
  - Discord.Rest.RestMessage.Application
  - Discord.Rest.RestMessage.Attachments
  - Discord.Rest.RestMessage.Author
  - Discord.Rest.RestMessage.Channel
  - Discord.Rest.RestMessage.Content
  - Discord.Rest.RestMessage.CreatedAt
  - Discord.Rest.RestMessage.DeleteAsync(Discord.RequestOptions)
  - Discord.Rest.RestMessage.Discord#IMessage#Author
  - Discord.Rest.RestMessage.Discord#IMessage#Type
  - Discord.Rest.RestMessage.EditedTimestamp
  - Discord.Rest.RestMessage.Embeds
  - Discord.Rest.RestMessage.IsPinned
  - Discord.Rest.RestMessage.IsSuppressed
  - Discord.Rest.RestMessage.IsTTS
  - Discord.Rest.RestMessage.MentionedChannelIds
  - Discord.Rest.RestMessage.MentionedRoleIds
  - Discord.Rest.RestMessage.MentionedUsers
  - Discord.Rest.RestMessage.Source
  - Discord.Rest.RestMessage.Tags
  - Discord.Rest.RestMessage.Timestamp
  - Discord.Rest.RestMessage.ToString
  - Discord.Rest.RestMessage.UpdateAsync(Discord.RequestOptions)
  langs:
  - csharp
  - vb
  name: RestMessage
  nameWithType: RestMessage
  fullName: Discord.Rest.RestMessage
  type: Class
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: RestMessage
    path: ../src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
    startLine: 12
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nRepresents a REST-based message.\n"
  example: []
  syntax:
    content: 'public abstract class RestMessage : RestEntity<ulong>, IEntity<ulong>, IMessage, ISnowflakeEntity, IEntity<ulong>, IDeletable, IUpdateable'
    content.vb: >-
      Public MustInherit Class RestMessage
          Inherits RestEntity(Of ULong)
          Implements IEntity(Of ULong), IMessage, ISnowflakeEntity, IEntity(Of ULong), IDeletable, IUpdateable
  inheritance:
  - System.Object
  - Discord.Rest.RestEntity{System.UInt64}
  derivedClasses:
  - Discord.Rest.RestSystemMessage
  - Discord.Rest.RestUserMessage
  implements:
  - Discord.IEntity{System.UInt64}
  - Discord.IMessage
  - Discord.ISnowflakeEntity
  - Discord.IEntity{System.UInt64}
  - Discord.IDeletable
  - Discord.IUpdateable
  inheritedMembers:
  - Discord.Rest.RestEntity{System.UInt64}.Id
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Discord.Rest.RestMessage.Channel
  commentId: P:Discord.Rest.RestMessage.Channel
  id: Channel
  parent: Discord.Rest.RestMessage
  langs:
  - csharp
  - vb
  name: Channel
  nameWithType: RestMessage.Channel
  fullName: Discord.Rest.RestMessage.Channel
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Channel
    path: ../src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
    startLine: 17
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the source channel of the message.\n"
  example: []
  syntax:
    content: public IMessageChannel Channel { get; }
    parameters: []
    return:
      type: Discord.IMessageChannel
    content.vb: Public ReadOnly Property Channel As IMessageChannel
  overload: Discord.Rest.RestMessage.Channel*
  implements:
  - Discord.IMessage.Channel
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestMessage.Author
  commentId: P:Discord.Rest.RestMessage.Author
  id: Author
  parent: Discord.Rest.RestMessage
  langs:
  - csharp
  - vb
  name: Author
  nameWithType: RestMessage.Author
  fullName: Discord.Rest.RestMessage.Author
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Author
    path: ../src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
    startLine: 21
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the Author of the message.\n"
  example: []
  syntax:
    content: public IUser Author { get; }
    parameters: []
    return:
      type: Discord.IUser
    content.vb: Public ReadOnly Property Author As IUser
  overload: Discord.Rest.RestMessage.Author*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestMessage.Source
  commentId: P:Discord.Rest.RestMessage.Source
  id: Source
  parent: Discord.Rest.RestMessage
  langs:
  - csharp
  - vb
  name: Source
  nameWithType: RestMessage.Source
  fullName: Discord.Rest.RestMessage.Source
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Source
    path: ../src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
    startLine: 23
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the source type of this message.\n"
  example: []
  syntax:
    content: public MessageSource Source { get; }
    parameters: []
    return:
      type: Discord.MessageSource
    content.vb: Public ReadOnly Property Source As MessageSource
  overload: Discord.Rest.RestMessage.Source*
  implements:
  - Discord.IMessage.Source
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestMessage.Content
  commentId: P:Discord.Rest.RestMessage.Content
  id: Content
  parent: Discord.Rest.RestMessage
  langs:
  - csharp
  - vb
  name: Content
  nameWithType: RestMessage.Content
  fullName: Discord.Rest.RestMessage.Content
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Content
    path: ../src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
    startLine: 26
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public string Content { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Content As String
  overload: Discord.Rest.RestMessage.Content*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestMessage.CreatedAt
  commentId: P:Discord.Rest.RestMessage.CreatedAt
  id: CreatedAt
  parent: Discord.Rest.RestMessage
  langs:
  - csharp
  - vb
  name: CreatedAt
  nameWithType: RestMessage.CreatedAt
  fullName: Discord.Rest.RestMessage.CreatedAt
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: CreatedAt
    path: ../src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
    startLine: 29
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public DateTimeOffset CreatedAt { get; }
    parameters: []
    return:
      type: DateTimeOffset
    content.vb: Public ReadOnly Property CreatedAt As DateTimeOffset
  overload: Discord.Rest.RestMessage.CreatedAt*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestMessage.IsTTS
  commentId: P:Discord.Rest.RestMessage.IsTTS
  id: IsTTS
  parent: Discord.Rest.RestMessage
  langs:
  - csharp
  - vb
  name: IsTTS
  nameWithType: RestMessage.IsTTS
  fullName: Discord.Rest.RestMessage.IsTTS
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: IsTTS
    path: ../src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
    startLine: 31
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public virtual bool IsTTS { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable ReadOnly Property IsTTS As Boolean
  overload: Discord.Rest.RestMessage.IsTTS*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.Rest.RestMessage.IsPinned
  commentId: P:Discord.Rest.RestMessage.IsPinned
  id: IsPinned
  parent: Discord.Rest.RestMessage
  langs:
  - csharp
  - vb
  name: IsPinned
  nameWithType: RestMessage.IsPinned
  fullName: Discord.Rest.RestMessage.IsPinned
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: IsPinned
    path: ../src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
    startLine: 33
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public virtual bool IsPinned { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable ReadOnly Property IsPinned As Boolean
  overload: Discord.Rest.RestMessage.IsPinned*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.Rest.RestMessage.IsSuppressed
  commentId: P:Discord.Rest.RestMessage.IsSuppressed
  id: IsSuppressed
  parent: Discord.Rest.RestMessage
  langs:
  - csharp
  - vb
  name: IsSuppressed
  nameWithType: RestMessage.IsSuppressed
  fullName: Discord.Rest.RestMessage.IsSuppressed
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: IsSuppressed
    path: ../src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
    startLine: 35
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public virtual bool IsSuppressed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable ReadOnly Property IsSuppressed As Boolean
  overload: Discord.Rest.RestMessage.IsSuppressed*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.Rest.RestMessage.EditedTimestamp
  commentId: P:Discord.Rest.RestMessage.EditedTimestamp
  id: EditedTimestamp
  parent: Discord.Rest.RestMessage
  langs:
  - csharp
  - vb
  name: EditedTimestamp
  nameWithType: RestMessage.EditedTimestamp
  fullName: Discord.Rest.RestMessage.EditedTimestamp
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: EditedTimestamp
    path: ../src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
    startLine: 37
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public virtual DateTimeOffset? EditedTimestamp { get; }
    parameters: []
    return:
      type: System.Nullable{DateTimeOffset}
    content.vb: Public Overridable ReadOnly Property EditedTimestamp As DateTimeOffset?
  overload: Discord.Rest.RestMessage.EditedTimestamp*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.Rest.RestMessage.Attachments
  commentId: P:Discord.Rest.RestMessage.Attachments
  id: Attachments
  parent: Discord.Rest.RestMessage
  langs:
  - csharp
  - vb
  name: Attachments
  nameWithType: RestMessage.Attachments
  fullName: Discord.Rest.RestMessage.Attachments
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Attachments
    path: ../src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
    startLine: 41
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of the <xref href=\"Discord.Attachment\" data-throw-if-not-resolved=\"false\"></xref>&apos;s on the message.\n"
  example: []
  syntax:
    content: public virtual IReadOnlyCollection<Attachment> Attachments { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.Attachment}
    content.vb: Public Overridable ReadOnly Property Attachments As IReadOnlyCollection(Of Attachment)
  overload: Discord.Rest.RestMessage.Attachments*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.Rest.RestMessage.Embeds
  commentId: P:Discord.Rest.RestMessage.Embeds
  id: Embeds
  parent: Discord.Rest.RestMessage
  langs:
  - csharp
  - vb
  name: Embeds
  nameWithType: RestMessage.Embeds
  fullName: Discord.Rest.RestMessage.Embeds
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Embeds
    path: ../src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
    startLine: 45
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of the <xref href=\"Discord.Embed\" data-throw-if-not-resolved=\"false\"></xref>&apos;s on the message.\n"
  example: []
  syntax:
    content: public virtual IReadOnlyCollection<Embed> Embeds { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.Embed}
    content.vb: Public Overridable ReadOnly Property Embeds As IReadOnlyCollection(Of Embed)
  overload: Discord.Rest.RestMessage.Embeds*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.Rest.RestMessage.MentionedChannelIds
  commentId: P:Discord.Rest.RestMessage.MentionedChannelIds
  id: MentionedChannelIds
  parent: Discord.Rest.RestMessage
  langs:
  - csharp
  - vb
  name: MentionedChannelIds
  nameWithType: RestMessage.MentionedChannelIds
  fullName: Discord.Rest.RestMessage.MentionedChannelIds
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: MentionedChannelIds
    path: ../src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
    startLine: 47
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public virtual IReadOnlyCollection<ulong> MentionedChannelIds { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{System.UInt64}
    content.vb: Public Overridable ReadOnly Property MentionedChannelIds As IReadOnlyCollection(Of ULong)
  overload: Discord.Rest.RestMessage.MentionedChannelIds*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.Rest.RestMessage.MentionedRoleIds
  commentId: P:Discord.Rest.RestMessage.MentionedRoleIds
  id: MentionedRoleIds
  parent: Discord.Rest.RestMessage
  langs:
  - csharp
  - vb
  name: MentionedRoleIds
  nameWithType: RestMessage.MentionedRoleIds
  fullName: Discord.Rest.RestMessage.MentionedRoleIds
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: MentionedRoleIds
    path: ../src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
    startLine: 49
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public virtual IReadOnlyCollection<ulong> MentionedRoleIds { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{System.UInt64}
    content.vb: Public Overridable ReadOnly Property MentionedRoleIds As IReadOnlyCollection(Of ULong)
  overload: Discord.Rest.RestMessage.MentionedRoleIds*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.Rest.RestMessage.MentionedUsers
  commentId: P:Discord.Rest.RestMessage.MentionedUsers
  id: MentionedUsers
  parent: Discord.Rest.RestMessage
  langs:
  - csharp
  - vb
  name: MentionedUsers
  nameWithType: RestMessage.MentionedUsers
  fullName: Discord.Rest.RestMessage.MentionedUsers
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: MentionedUsers
    path: ../src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
    startLine: 53
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of the mentioned users in the message.\n"
  example: []
  syntax:
    content: public virtual IReadOnlyCollection<RestUser> MentionedUsers { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.Rest.RestUser}
    content.vb: Public Overridable ReadOnly Property MentionedUsers As IReadOnlyCollection(Of RestUser)
  overload: Discord.Rest.RestMessage.MentionedUsers*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.Rest.RestMessage.Tags
  commentId: P:Discord.Rest.RestMessage.Tags
  id: Tags
  parent: Discord.Rest.RestMessage
  langs:
  - csharp
  - vb
  name: Tags
  nameWithType: RestMessage.Tags
  fullName: Discord.Rest.RestMessage.Tags
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Tags
    path: ../src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
    startLine: 55
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public virtual IReadOnlyCollection<ITag> Tags { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.ITag}
    content.vb: Public Overridable ReadOnly Property Tags As IReadOnlyCollection(Of ITag)
  overload: Discord.Rest.RestMessage.Tags*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.Rest.RestMessage.Timestamp
  commentId: P:Discord.Rest.RestMessage.Timestamp
  id: Timestamp
  parent: Discord.Rest.RestMessage
  langs:
  - csharp
  - vb
  name: Timestamp
  nameWithType: RestMessage.Timestamp
  fullName: Discord.Rest.RestMessage.Timestamp
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Timestamp
    path: ../src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
    startLine: 58
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public DateTimeOffset Timestamp { get; }
    parameters: []
    return:
      type: DateTimeOffset
    content.vb: Public ReadOnly Property Timestamp As DateTimeOffset
  overload: Discord.Rest.RestMessage.Timestamp*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestMessage.Activity
  commentId: P:Discord.Rest.RestMessage.Activity
  id: Activity
  parent: Discord.Rest.RestMessage
  langs:
  - csharp
  - vb
  name: Activity
  nameWithType: RestMessage.Activity
  fullName: Discord.Rest.RestMessage.Activity
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Activity
    path: ../src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
    startLine: 60
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the activity associated with a message.\n"
  remarks: "\nSent with Rich Presence-related chat embeds. This often refers to activity that requires end-user&apos;s\ninteraction, such as a Spotify Invite activity.\n"
  example: []
  syntax:
    content: public MessageActivity Activity { get; }
    parameters: []
    return:
      type: Discord.MessageActivity
      description: "\nA message&apos;s activity, if any is associated.\n"
    content.vb: Public ReadOnly Property Activity As MessageActivity
  overload: Discord.Rest.RestMessage.Activity*
  implements:
  - Discord.IMessage.Activity
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestMessage.Application
  commentId: P:Discord.Rest.RestMessage.Application
  id: Application
  parent: Discord.Rest.RestMessage
  langs:
  - csharp
  - vb
  name: Application
  nameWithType: RestMessage.Application
  fullName: Discord.Rest.RestMessage.Application
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Application
    path: ../src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
    startLine: 62
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the application associated with a message.\n"
  remarks: "\nSent with Rich-Presence-related chat embeds.\n"
  example: []
  syntax:
    content: public MessageApplication Application { get; }
    parameters: []
    return:
      type: Discord.MessageApplication
      description: "\nA message&apos;s application, if any is associated.\n"
    content.vb: Public ReadOnly Property Application As MessageApplication
  overload: Discord.Rest.RestMessage.Application*
  implements:
  - Discord.IMessage.Application
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestMessage.UpdateAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestMessage.UpdateAsync(Discord.RequestOptions)
  id: UpdateAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestMessage
  langs:
  - csharp
  - vb
  name: UpdateAsync(RequestOptions)
  nameWithType: RestMessage.UpdateAsync(RequestOptions)
  fullName: Discord.Rest.RestMessage.UpdateAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: UpdateAsync
    path: ../src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
    startLine: 111
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task UpdateAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function UpdateAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestMessage.UpdateAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestMessage.DeleteAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestMessage.DeleteAsync(Discord.RequestOptions)
  id: DeleteAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestMessage
  langs:
  - csharp
  - vb
  name: DeleteAsync(RequestOptions)
  nameWithType: RestMessage.DeleteAsync(RequestOptions)
  fullName: Discord.Rest.RestMessage.DeleteAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteAsync
    path: ../src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
    startLine: 117
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task DeleteAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function DeleteAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestMessage.DeleteAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestMessage.ToString
  commentId: M:Discord.Rest.RestMessage.ToString
  id: ToString
  parent: Discord.Rest.RestMessage
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: RestMessage.ToString()
  fullName: Discord.Rest.RestMessage.ToString()
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ToString
    path: ../src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
    startLine: 126
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the <xref href=\"Discord.Rest.RestMessage.Content\" data-throw-if-not-resolved=\"false\"></xref> of the message.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nA string that is the <xref href=\"Discord.Rest.RestMessage.Content\" data-throw-if-not-resolved=\"false\"></xref> of the message.\n"
    content.vb: Public Overrides Function ToString As String
  overload: Discord.Rest.RestMessage.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.Rest.RestMessage.Discord#IMessage#Type
  commentId: P:Discord.Rest.RestMessage.Discord#IMessage#Type
  id: Discord#IMessage#Type
  isEii: true
  parent: Discord.Rest.RestMessage
  langs:
  - csharp
  - vb
  name: IMessage.Type
  nameWithType: RestMessage.IMessage.Type
  fullName: Discord.Rest.RestMessage.Discord.IMessage.Type
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessage.Type
    path: ../src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
    startLine: 129
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the type of this system message.\n"
  example: []
  syntax:
    content: MessageType IMessage.Type { get; }
    parameters: []
    return:
      type: Discord.MessageType
    content.vb: ReadOnly WriteOnly Property Discord.IMessage.Type As MessageType Implements IMessage.Type
  overload: Discord.Rest.RestMessage.Discord#IMessage#Type*
  implements:
  - Discord.IMessage.Type
  nameWithType.vb: RestMessage.Discord.IMessage.Type
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IMessage.Type
- uid: Discord.Rest.RestMessage.Discord#IMessage#Author
  commentId: P:Discord.Rest.RestMessage.Discord#IMessage#Author
  id: Discord#IMessage#Author
  isEii: true
  parent: Discord.Rest.RestMessage
  langs:
  - csharp
  - vb
  name: IMessage.Author
  nameWithType: RestMessage.IMessage.Author
  fullName: Discord.Rest.RestMessage.Discord.IMessage.Author
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessage.Author
    path: ../src/Discord.Net.Rest/Entities/Messages/RestMessage.cs
    startLine: 130
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  syntax:
    content: IUser IMessage.Author { get; }
    parameters: []
    return:
      type: Discord.IUser
    content.vb: ReadOnly WriteOnly Property Discord.IMessage.Author As IUser Implements IMessage.Author
  overload: Discord.Rest.RestMessage.Discord#IMessage#Author*
  implements:
  - Discord.IMessage.Author
  nameWithType.vb: RestMessage.Discord.IMessage.Author
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IMessage.Author
references:
- uid: Discord.Rest
  commentId: N:Discord.Rest
  name: Discord.Rest
  nameWithType: Discord.Rest
  fullName: Discord.Rest
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Rest.RestEntity{System.UInt64}
  commentId: T:Discord.Rest.RestEntity{System.UInt64}
  parent: Discord.Rest
  definition: Discord.Rest.RestEntity`1
  name: RestEntity<UInt64>
  nameWithType: RestEntity<UInt64>
  fullName: Discord.Rest.RestEntity<System.UInt64>
  nameWithType.vb: RestEntity(Of UInt64)
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64)
  name.vb: RestEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessage
  commentId: T:Discord.IMessage
  parent: Discord
  name: IMessage
  nameWithType: IMessage
  fullName: Discord.IMessage
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IDeletable
  commentId: T:Discord.IDeletable
  parent: Discord
  name: IDeletable
  nameWithType: IDeletable
  fullName: Discord.IDeletable
- uid: Discord.IUpdateable
  commentId: T:Discord.IUpdateable
  parent: Discord
  name: IUpdateable
  nameWithType: IUpdateable
  fullName: Discord.IUpdateable
- uid: Discord.Rest.RestEntity{System.UInt64}.Id
  commentId: P:Discord.Rest.RestEntity{System.UInt64}.Id
  parent: Discord.Rest.RestEntity{System.UInt64}
  definition: Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<UInt64>.Id
  fullName: Discord.Rest.RestEntity<System.UInt64>.Id
  nameWithType.vb: RestEntity(Of UInt64).Id
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64).Id
- uid: Discord.Rest.RestEntity`1
  commentId: T:Discord.Rest.RestEntity`1
  name: RestEntity<T>
  nameWithType: RestEntity<T>
  fullName: Discord.Rest.RestEntity<T>
  nameWithType.vb: RestEntity(Of T)
  fullName.vb: Discord.Rest.RestEntity(Of T)
  name.vb: RestEntity(Of T)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.Rest.RestEntity`1.Id
  commentId: P:Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<T>.Id
  fullName: Discord.Rest.RestEntity<T>.Id
  nameWithType.vb: RestEntity(Of T).Id
  fullName.vb: Discord.Rest.RestEntity(Of T).Id
- uid: Discord.Rest.RestMessage.Channel*
  commentId: Overload:Discord.Rest.RestMessage.Channel
  name: Channel
  nameWithType: RestMessage.Channel
  fullName: Discord.Rest.RestMessage.Channel
- uid: Discord.IMessage.Channel
  commentId: P:Discord.IMessage.Channel
  parent: Discord.IMessage
  name: Channel
  nameWithType: IMessage.Channel
  fullName: Discord.IMessage.Channel
- uid: Discord.IMessageChannel
  commentId: T:Discord.IMessageChannel
  parent: Discord
  name: IMessageChannel
  nameWithType: IMessageChannel
  fullName: Discord.IMessageChannel
- uid: Discord.Rest.RestMessage.Author*
  commentId: Overload:Discord.Rest.RestMessage.Author
  name: Author
  nameWithType: RestMessage.Author
  fullName: Discord.Rest.RestMessage.Author
- uid: Discord.IUser
  commentId: T:Discord.IUser
  parent: Discord
  name: IUser
  nameWithType: IUser
  fullName: Discord.IUser
- uid: Discord.Rest.RestMessage.Source*
  commentId: Overload:Discord.Rest.RestMessage.Source
  name: Source
  nameWithType: RestMessage.Source
  fullName: Discord.Rest.RestMessage.Source
- uid: Discord.IMessage.Source
  commentId: P:Discord.IMessage.Source
  parent: Discord.IMessage
  name: Source
  nameWithType: IMessage.Source
  fullName: Discord.IMessage.Source
- uid: Discord.MessageSource
  commentId: T:Discord.MessageSource
  parent: Discord
  name: MessageSource
  nameWithType: MessageSource
  fullName: Discord.MessageSource
- uid: Discord.Rest.RestMessage.Content*
  commentId: Overload:Discord.Rest.RestMessage.Content
  name: Content
  nameWithType: RestMessage.Content
  fullName: Discord.Rest.RestMessage.Content
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.Rest.RestMessage.CreatedAt*
  commentId: Overload:Discord.Rest.RestMessage.CreatedAt
  name: CreatedAt
  nameWithType: RestMessage.CreatedAt
  fullName: Discord.Rest.RestMessage.CreatedAt
- uid: DateTimeOffset
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: DateTimeOffset
- uid: Discord.Rest.RestMessage.IsTTS*
  commentId: Overload:Discord.Rest.RestMessage.IsTTS
  name: IsTTS
  nameWithType: RestMessage.IsTTS
  fullName: Discord.Rest.RestMessage.IsTTS
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.Rest.RestMessage.IsPinned*
  commentId: Overload:Discord.Rest.RestMessage.IsPinned
  name: IsPinned
  nameWithType: RestMessage.IsPinned
  fullName: Discord.Rest.RestMessage.IsPinned
- uid: Discord.Rest.RestMessage.IsSuppressed*
  commentId: Overload:Discord.Rest.RestMessage.IsSuppressed
  name: IsSuppressed
  nameWithType: RestMessage.IsSuppressed
  fullName: Discord.Rest.RestMessage.IsSuppressed
- uid: Discord.Rest.RestMessage.EditedTimestamp*
  commentId: Overload:Discord.Rest.RestMessage.EditedTimestamp
  name: EditedTimestamp
  nameWithType: RestMessage.EditedTimestamp
  fullName: Discord.Rest.RestMessage.EditedTimestamp
- uid: System.Nullable{DateTimeOffset}
  commentId: '!:System.Nullable{DateTimeOffset}'
  definition: System.Nullable`1
  name: Nullable<DateTimeOffset>
  nameWithType: Nullable<DateTimeOffset>
  fullName: System.Nullable<DateTimeOffset>
  nameWithType.vb: Nullable(Of DateTimeOffset)
  fullName.vb: System.Nullable(Of DateTimeOffset)
  name.vb: Nullable(Of DateTimeOffset)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Attachment
  commentId: T:Discord.Attachment
  name: Attachment
  nameWithType: Attachment
  fullName: Discord.Attachment
- uid: Discord.Rest.RestMessage.Attachments*
  commentId: Overload:Discord.Rest.RestMessage.Attachments
  name: Attachments
  nameWithType: RestMessage.Attachments
  fullName: Discord.Rest.RestMessage.Attachments
- uid: IReadOnlyCollection{Discord.Attachment}
  commentId: '!:IReadOnlyCollection{Discord.Attachment}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<Attachment>
  nameWithType: IReadOnlyCollection<Attachment>
  fullName: IReadOnlyCollection<Discord.Attachment>
  nameWithType.vb: IReadOnlyCollection(Of Attachment)
  fullName.vb: IReadOnlyCollection(Of Discord.Attachment)
  name.vb: IReadOnlyCollection(Of Attachment)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Attachment
    name: Attachment
    nameWithType: Attachment
    fullName: Discord.Attachment
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Attachment
    name: Attachment
    nameWithType: Attachment
    fullName: Discord.Attachment
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<>
  nameWithType: IReadOnlyCollection<>
  fullName: IReadOnlyCollection<>
  nameWithType.vb: IReadOnlyCollection(Of )
  fullName.vb: IReadOnlyCollection(Of )
  name.vb: IReadOnlyCollection(Of )
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Embed
  commentId: T:Discord.Embed
  parent: Discord
  name: Embed
  nameWithType: Embed
  fullName: Discord.Embed
- uid: Discord.Rest.RestMessage.Embeds*
  commentId: Overload:Discord.Rest.RestMessage.Embeds
  name: Embeds
  nameWithType: RestMessage.Embeds
  fullName: Discord.Rest.RestMessage.Embeds
- uid: IReadOnlyCollection{Discord.Embed}
  commentId: '!:IReadOnlyCollection{Discord.Embed}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<Embed>
  nameWithType: IReadOnlyCollection<Embed>
  fullName: IReadOnlyCollection<Discord.Embed>
  nameWithType.vb: IReadOnlyCollection(Of Embed)
  fullName.vb: IReadOnlyCollection(Of Discord.Embed)
  name.vb: IReadOnlyCollection(Of Embed)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestMessage.MentionedChannelIds*
  commentId: Overload:Discord.Rest.RestMessage.MentionedChannelIds
  name: MentionedChannelIds
  nameWithType: RestMessage.MentionedChannelIds
  fullName: Discord.Rest.RestMessage.MentionedChannelIds
- uid: IReadOnlyCollection{System.UInt64}
  commentId: '!:IReadOnlyCollection{System.UInt64}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<UInt64>
  nameWithType: IReadOnlyCollection<UInt64>
  fullName: IReadOnlyCollection<System.UInt64>
  nameWithType.vb: IReadOnlyCollection(Of UInt64)
  fullName.vb: IReadOnlyCollection(Of System.UInt64)
  name.vb: IReadOnlyCollection(Of UInt64)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestMessage.MentionedRoleIds*
  commentId: Overload:Discord.Rest.RestMessage.MentionedRoleIds
  name: MentionedRoleIds
  nameWithType: RestMessage.MentionedRoleIds
  fullName: Discord.Rest.RestMessage.MentionedRoleIds
- uid: Discord.Rest.RestMessage.MentionedUsers*
  commentId: Overload:Discord.Rest.RestMessage.MentionedUsers
  name: MentionedUsers
  nameWithType: RestMessage.MentionedUsers
  fullName: Discord.Rest.RestMessage.MentionedUsers
- uid: IReadOnlyCollection{Discord.Rest.RestUser}
  commentId: '!:IReadOnlyCollection{Discord.Rest.RestUser}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<RestUser>
  nameWithType: IReadOnlyCollection<RestUser>
  fullName: IReadOnlyCollection<Discord.Rest.RestUser>
  nameWithType.vb: IReadOnlyCollection(Of RestUser)
  fullName.vb: IReadOnlyCollection(Of Discord.Rest.RestUser)
  name.vb: IReadOnlyCollection(Of RestUser)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestUser
    name: RestUser
    nameWithType: RestUser
    fullName: Discord.Rest.RestUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestUser
    name: RestUser
    nameWithType: RestUser
    fullName: Discord.Rest.RestUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestMessage.Tags*
  commentId: Overload:Discord.Rest.RestMessage.Tags
  name: Tags
  nameWithType: RestMessage.Tags
  fullName: Discord.Rest.RestMessage.Tags
- uid: IReadOnlyCollection{Discord.ITag}
  commentId: '!:IReadOnlyCollection{Discord.ITag}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<ITag>
  nameWithType: IReadOnlyCollection<ITag>
  fullName: IReadOnlyCollection<Discord.ITag>
  nameWithType.vb: IReadOnlyCollection(Of ITag)
  fullName.vb: IReadOnlyCollection(Of Discord.ITag)
  name.vb: IReadOnlyCollection(Of ITag)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ITag
    name: ITag
    nameWithType: ITag
    fullName: Discord.ITag
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ITag
    name: ITag
    nameWithType: ITag
    fullName: Discord.ITag
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestMessage.Timestamp*
  commentId: Overload:Discord.Rest.RestMessage.Timestamp
  name: Timestamp
  nameWithType: RestMessage.Timestamp
  fullName: Discord.Rest.RestMessage.Timestamp
- uid: Discord.Rest.RestMessage.Activity*
  commentId: Overload:Discord.Rest.RestMessage.Activity
  name: Activity
  nameWithType: RestMessage.Activity
  fullName: Discord.Rest.RestMessage.Activity
- uid: Discord.IMessage.Activity
  commentId: P:Discord.IMessage.Activity
  parent: Discord.IMessage
  name: Activity
  nameWithType: IMessage.Activity
  fullName: Discord.IMessage.Activity
- uid: Discord.MessageActivity
  commentId: T:Discord.MessageActivity
  parent: Discord
  name: MessageActivity
  nameWithType: MessageActivity
  fullName: Discord.MessageActivity
- uid: Discord.Rest.RestMessage.Application*
  commentId: Overload:Discord.Rest.RestMessage.Application
  name: Application
  nameWithType: RestMessage.Application
  fullName: Discord.Rest.RestMessage.Application
- uid: Discord.IMessage.Application
  commentId: P:Discord.IMessage.Application
  parent: Discord.IMessage
  name: Application
  nameWithType: IMessage.Application
  fullName: Discord.IMessage.Application
- uid: Discord.MessageApplication
  commentId: T:Discord.MessageApplication
  parent: Discord
  name: MessageApplication
  nameWithType: MessageApplication
  fullName: Discord.MessageApplication
- uid: Discord.Rest.RestMessage.UpdateAsync*
  commentId: Overload:Discord.Rest.RestMessage.UpdateAsync
  name: UpdateAsync
  nameWithType: RestMessage.UpdateAsync
  fullName: Discord.Rest.RestMessage.UpdateAsync
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Discord.Rest.RestMessage.DeleteAsync*
  commentId: Overload:Discord.Rest.RestMessage.DeleteAsync
  name: DeleteAsync
  nameWithType: RestMessage.DeleteAsync
  fullName: Discord.Rest.RestMessage.DeleteAsync
- uid: Discord.Rest.RestMessage.Content
  commentId: P:Discord.Rest.RestMessage.Content
  parent: Discord.Rest.RestMessage
  name: Content
  nameWithType: RestMessage.Content
  fullName: Discord.Rest.RestMessage.Content
- uid: Discord.Rest.RestMessage.ToString*
  commentId: Overload:Discord.Rest.RestMessage.ToString
  name: ToString
  nameWithType: RestMessage.ToString
  fullName: Discord.Rest.RestMessage.ToString
- uid: Discord.Rest.RestMessage
  commentId: T:Discord.Rest.RestMessage
  parent: Discord.Rest
  name: RestMessage
  nameWithType: RestMessage
  fullName: Discord.Rest.RestMessage
- uid: Discord.Rest.RestMessage.Discord#IMessage#Type*
  commentId: Overload:Discord.Rest.RestMessage.Discord#IMessage#Type
  name: IMessage.Type
  nameWithType: RestMessage.IMessage.Type
  fullName: Discord.Rest.RestMessage.Discord.IMessage.Type
  nameWithType.vb: RestMessage.Discord.IMessage.Type
  name.vb: Discord.IMessage.Type
- uid: Discord.IMessage.Type
  commentId: P:Discord.IMessage.Type
  parent: Discord.IMessage
  name: Type
  nameWithType: IMessage.Type
  fullName: Discord.IMessage.Type
- uid: Discord.MessageType
  commentId: T:Discord.MessageType
  parent: Discord
  name: MessageType
  nameWithType: MessageType
  fullName: Discord.MessageType
- uid: Discord.Rest.RestMessage.Discord#IMessage#Author*
  commentId: Overload:Discord.Rest.RestMessage.Discord#IMessage#Author
  name: IMessage.Author
  nameWithType: RestMessage.IMessage.Author
  fullName: Discord.Rest.RestMessage.Discord.IMessage.Author
  nameWithType.vb: RestMessage.Discord.IMessage.Author
  name.vb: Discord.IMessage.Author
- uid: Discord.IMessage.Author
  commentId: P:Discord.IMessage.Author
  parent: Discord.IMessage
  name: Author
  nameWithType: IMessage.Author
  fullName: Discord.IMessage.Author
