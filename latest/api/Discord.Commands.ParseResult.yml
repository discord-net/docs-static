### YamlMime:ManagedReference
items:
- uid: Discord.Commands.ParseResult
  commentId: T:Discord.Commands.ParseResult
  id: ParseResult
  parent: Discord.Commands
  children:
  - Discord.Commands.ParseResult.ArgValues
  - Discord.Commands.ParseResult.Error
  - Discord.Commands.ParseResult.ErrorReason
  - Discord.Commands.ParseResult.FromError(Discord.Commands.CommandError,System.String)
  - Discord.Commands.ParseResult.FromError(Discord.Commands.IResult)
  - Discord.Commands.ParseResult.FromError(Exception)
  - Discord.Commands.ParseResult.FromSuccess(IReadOnlyList{Discord.Commands.TypeReaderResult},IReadOnlyList{Discord.Commands.TypeReaderResult})
  - Discord.Commands.ParseResult.FromSuccess(IReadOnlyList{Discord.Commands.TypeReaderValue},IReadOnlyList{Discord.Commands.TypeReaderValue})
  - Discord.Commands.ParseResult.IsSuccess
  - Discord.Commands.ParseResult.ParamValues
  - Discord.Commands.ParseResult.ToString
  langs:
  - csharp
  - vb
  name: ParseResult
  nameWithType: ParseResult
  fullName: Discord.Commands.ParseResult
  type: Struct
  source:
    remote:
      path: src/Discord.Net.Commands/Results/ParseResult.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ParseResult
    path: ../src/Discord.Net.Commands/Results/ParseResult.cs
    startLine: 9
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nContains information for the parsing result from the command service&apos;s parser.\n"
  example: []
  syntax:
    content: 'public struct ParseResult : IResult'
    content.vb: >-
      Public Structure ParseResult
          Implements IResult
  implements:
  - Discord.Commands.IResult
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Discord.Commands.ParseResult.ArgValues
  commentId: P:Discord.Commands.ParseResult.ArgValues
  id: ArgValues
  parent: Discord.Commands.ParseResult
  langs:
  - csharp
  - vb
  name: ArgValues
  nameWithType: ParseResult.ArgValues
  fullName: Discord.Commands.ParseResult.ArgValues
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Results/ParseResult.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ArgValues
    path: ../src/Discord.Net.Commands/Results/ParseResult.cs
    startLine: 12
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public IReadOnlyList<TypeReaderResult> ArgValues { get; }
    parameters: []
    return:
      type: IReadOnlyList{Discord.Commands.TypeReaderResult}
    content.vb: Public ReadOnly Property ArgValues As IReadOnlyList(Of TypeReaderResult)
  overload: Discord.Commands.ParseResult.ArgValues*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.ParseResult.ParamValues
  commentId: P:Discord.Commands.ParseResult.ParamValues
  id: ParamValues
  parent: Discord.Commands.ParseResult
  langs:
  - csharp
  - vb
  name: ParamValues
  nameWithType: ParseResult.ParamValues
  fullName: Discord.Commands.ParseResult.ParamValues
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Results/ParseResult.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ParamValues
    path: ../src/Discord.Net.Commands/Results/ParseResult.cs
    startLine: 13
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public IReadOnlyList<TypeReaderResult> ParamValues { get; }
    parameters: []
    return:
      type: IReadOnlyList{Discord.Commands.TypeReaderResult}
    content.vb: Public ReadOnly Property ParamValues As IReadOnlyList(Of TypeReaderResult)
  overload: Discord.Commands.ParseResult.ParamValues*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.ParseResult.Error
  commentId: P:Discord.Commands.ParseResult.Error
  id: Error
  parent: Discord.Commands.ParseResult
  langs:
  - csharp
  - vb
  name: Error
  nameWithType: ParseResult.Error
  fullName: Discord.Commands.ParseResult.Error
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Results/ParseResult.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Error
    path: ../src/Discord.Net.Commands/Results/ParseResult.cs
    startLine: 16
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nDescribes the error type that may have occurred during the operation.\n"
  example: []
  syntax:
    content: public CommandError? Error { get; }
    parameters: []
    return:
      type: System.Nullable{Discord.Commands.CommandError}
      description: "\nA <xref href=\"Discord.Commands.CommandError\" data-throw-if-not-resolved=\"false\"></xref> indicating the type of error that may have occurred during the operation; \n<code>null</code> if the operation was successful.\n"
    content.vb: Public ReadOnly Property Error As CommandError?
  overload: Discord.Commands.ParseResult.Error*
  implements:
  - Discord.Commands.IResult.Error
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.ParseResult.ErrorReason
  commentId: P:Discord.Commands.ParseResult.ErrorReason
  id: ErrorReason
  parent: Discord.Commands.ParseResult
  langs:
  - csharp
  - vb
  name: ErrorReason
  nameWithType: ParseResult.ErrorReason
  fullName: Discord.Commands.ParseResult.ErrorReason
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Results/ParseResult.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ErrorReason
    path: ../src/Discord.Net.Commands/Results/ParseResult.cs
    startLine: 18
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nDescribes the reason for the error.\n"
  example: []
  syntax:
    content: public string ErrorReason { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA string containing the error reason.\n"
    content.vb: Public ReadOnly Property ErrorReason As String
  overload: Discord.Commands.ParseResult.ErrorReason*
  implements:
  - Discord.Commands.IResult.ErrorReason
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.ParseResult.IsSuccess
  commentId: P:Discord.Commands.ParseResult.IsSuccess
  id: IsSuccess
  parent: Discord.Commands.ParseResult
  langs:
  - csharp
  - vb
  name: IsSuccess
  nameWithType: ParseResult.IsSuccess
  fullName: Discord.Commands.ParseResult.IsSuccess
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Results/ParseResult.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: IsSuccess
    path: ../src/Discord.Net.Commands/Results/ParseResult.cs
    startLine: 21
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nIndicates whether the operation was successful or not.\n"
  example: []
  syntax:
    content: public bool IsSuccess { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the result is positive; otherwise <code>false</code>.\n"
    content.vb: Public ReadOnly Property IsSuccess As Boolean
  overload: Discord.Commands.ParseResult.IsSuccess*
  implements:
  - Discord.Commands.IResult.IsSuccess
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Commands.ParseResult.FromSuccess(IReadOnlyList{Discord.Commands.TypeReaderResult},IReadOnlyList{Discord.Commands.TypeReaderResult})
  commentId: M:Discord.Commands.ParseResult.FromSuccess(IReadOnlyList{Discord.Commands.TypeReaderResult},IReadOnlyList{Discord.Commands.TypeReaderResult})
  id: FromSuccess(IReadOnlyList{Discord.Commands.TypeReaderResult},IReadOnlyList{Discord.Commands.TypeReaderResult})
  parent: Discord.Commands.ParseResult
  langs:
  - csharp
  - vb
  name: FromSuccess(IReadOnlyList<TypeReaderResult>, IReadOnlyList<TypeReaderResult>)
  nameWithType: ParseResult.FromSuccess(IReadOnlyList<TypeReaderResult>, IReadOnlyList<TypeReaderResult>)
  fullName: Discord.Commands.ParseResult.FromSuccess(IReadOnlyList<Discord.Commands.TypeReaderResult>, IReadOnlyList<Discord.Commands.TypeReaderResult>)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Results/ParseResult.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: FromSuccess
    path: ../src/Discord.Net.Commands/Results/ParseResult.cs
    startLine: 31
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public static ParseResult FromSuccess(IReadOnlyList<TypeReaderResult> argValues, IReadOnlyList<TypeReaderResult> paramValues)
    parameters:
    - id: argValues
      type: IReadOnlyList{Discord.Commands.TypeReaderResult}
    - id: paramValues
      type: IReadOnlyList{Discord.Commands.TypeReaderResult}
    return:
      type: Discord.Commands.ParseResult
    content.vb: Public Shared Function FromSuccess(argValues As IReadOnlyList(Of TypeReaderResult), paramValues As IReadOnlyList(Of TypeReaderResult)) As ParseResult
  overload: Discord.Commands.ParseResult.FromSuccess*
  nameWithType.vb: ParseResult.FromSuccess(IReadOnlyList(Of TypeReaderResult), IReadOnlyList(Of TypeReaderResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Discord.Commands.ParseResult.FromSuccess(IReadOnlyList(Of Discord.Commands.TypeReaderResult), IReadOnlyList(Of Discord.Commands.TypeReaderResult))
  name.vb: FromSuccess(IReadOnlyList(Of TypeReaderResult), IReadOnlyList(Of TypeReaderResult))
- uid: Discord.Commands.ParseResult.FromSuccess(IReadOnlyList{Discord.Commands.TypeReaderValue},IReadOnlyList{Discord.Commands.TypeReaderValue})
  commentId: M:Discord.Commands.ParseResult.FromSuccess(IReadOnlyList{Discord.Commands.TypeReaderValue},IReadOnlyList{Discord.Commands.TypeReaderValue})
  id: FromSuccess(IReadOnlyList{Discord.Commands.TypeReaderValue},IReadOnlyList{Discord.Commands.TypeReaderValue})
  parent: Discord.Commands.ParseResult
  langs:
  - csharp
  - vb
  name: FromSuccess(IReadOnlyList<TypeReaderValue>, IReadOnlyList<TypeReaderValue>)
  nameWithType: ParseResult.FromSuccess(IReadOnlyList<TypeReaderValue>, IReadOnlyList<TypeReaderValue>)
  fullName: Discord.Commands.ParseResult.FromSuccess(IReadOnlyList<Discord.Commands.TypeReaderValue>, IReadOnlyList<Discord.Commands.TypeReaderValue>)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Results/ParseResult.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: FromSuccess
    path: ../src/Discord.Net.Commands/Results/ParseResult.cs
    startLine: 45
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public static ParseResult FromSuccess(IReadOnlyList<TypeReaderValue> argValues, IReadOnlyList<TypeReaderValue> paramValues)
    parameters:
    - id: argValues
      type: IReadOnlyList{Discord.Commands.TypeReaderValue}
    - id: paramValues
      type: IReadOnlyList{Discord.Commands.TypeReaderValue}
    return:
      type: Discord.Commands.ParseResult
    content.vb: Public Shared Function FromSuccess(argValues As IReadOnlyList(Of TypeReaderValue), paramValues As IReadOnlyList(Of TypeReaderValue)) As ParseResult
  overload: Discord.Commands.ParseResult.FromSuccess*
  nameWithType.vb: ParseResult.FromSuccess(IReadOnlyList(Of TypeReaderValue), IReadOnlyList(Of TypeReaderValue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Discord.Commands.ParseResult.FromSuccess(IReadOnlyList(Of Discord.Commands.TypeReaderValue), IReadOnlyList(Of Discord.Commands.TypeReaderValue))
  name.vb: FromSuccess(IReadOnlyList(Of TypeReaderValue), IReadOnlyList(Of TypeReaderValue))
- uid: Discord.Commands.ParseResult.FromError(Discord.Commands.CommandError,System.String)
  commentId: M:Discord.Commands.ParseResult.FromError(Discord.Commands.CommandError,System.String)
  id: FromError(Discord.Commands.CommandError,System.String)
  parent: Discord.Commands.ParseResult
  langs:
  - csharp
  - vb
  name: FromError(CommandError, String)
  nameWithType: ParseResult.FromError(CommandError, String)
  fullName: Discord.Commands.ParseResult.FromError(Discord.Commands.CommandError, System.String)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Results/ParseResult.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: FromError
    path: ../src/Discord.Net.Commands/Results/ParseResult.cs
    startLine: 60
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public static ParseResult FromError(CommandError error, string reason)
    parameters:
    - id: error
      type: Discord.Commands.CommandError
    - id: reason
      type: System.String
    return:
      type: Discord.Commands.ParseResult
    content.vb: Public Shared Function FromError(error As CommandError, reason As String) As ParseResult
  overload: Discord.Commands.ParseResult.FromError*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Discord.Commands.ParseResult.FromError(Exception)
  commentId: M:Discord.Commands.ParseResult.FromError(Exception)
  id: FromError(Exception)
  parent: Discord.Commands.ParseResult
  langs:
  - csharp
  - vb
  name: FromError(Exception)
  nameWithType: ParseResult.FromError(Exception)
  fullName: Discord.Commands.ParseResult.FromError(Exception)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Results/ParseResult.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: FromError
    path: ../src/Discord.Net.Commands/Results/ParseResult.cs
    startLine: 62
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public static ParseResult FromError(Exception ex)
    parameters:
    - id: ex
      type: Exception
    return:
      type: Discord.Commands.ParseResult
    content.vb: Public Shared Function FromError(ex As Exception) As ParseResult
  overload: Discord.Commands.ParseResult.FromError*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Discord.Commands.ParseResult.FromError(Discord.Commands.IResult)
  commentId: M:Discord.Commands.ParseResult.FromError(Discord.Commands.IResult)
  id: FromError(Discord.Commands.IResult)
  parent: Discord.Commands.ParseResult
  langs:
  - csharp
  - vb
  name: FromError(IResult)
  nameWithType: ParseResult.FromError(IResult)
  fullName: Discord.Commands.ParseResult.FromError(Discord.Commands.IResult)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Results/ParseResult.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: FromError
    path: ../src/Discord.Net.Commands/Results/ParseResult.cs
    startLine: 64
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public static ParseResult FromError(IResult result)
    parameters:
    - id: result
      type: Discord.Commands.IResult
    return:
      type: Discord.Commands.ParseResult
    content.vb: Public Shared Function FromError(result As IResult) As ParseResult
  overload: Discord.Commands.ParseResult.FromError*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Discord.Commands.ParseResult.ToString
  commentId: M:Discord.Commands.ParseResult.ToString
  id: ToString
  parent: Discord.Commands.ParseResult
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: ParseResult.ToString()
  fullName: Discord.Commands.ParseResult.ToString()
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Results/ParseResult.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ToString
    path: ../src/Discord.Net.Commands/Results/ParseResult.cs
    startLine: 67
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overload: Discord.Commands.ParseResult.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Discord.Commands
  commentId: N:Discord.Commands
  name: Discord.Commands
  nameWithType: Discord.Commands
  fullName: Discord.Commands
- uid: Discord.Commands.IResult
  commentId: T:Discord.Commands.IResult
  parent: Discord.Commands
  name: IResult
  nameWithType: IResult
  fullName: Discord.Commands.IResult
- uid: Discord.Commands.ParseResult.ArgValues*
  commentId: Overload:Discord.Commands.ParseResult.ArgValues
  name: ArgValues
  nameWithType: ParseResult.ArgValues
  fullName: Discord.Commands.ParseResult.ArgValues
- uid: IReadOnlyList{Discord.Commands.TypeReaderResult}
  commentId: '!:IReadOnlyList{Discord.Commands.TypeReaderResult}'
  definition: IReadOnlyList`1
  name: IReadOnlyList<TypeReaderResult>
  nameWithType: IReadOnlyList<TypeReaderResult>
  fullName: IReadOnlyList<Discord.Commands.TypeReaderResult>
  nameWithType.vb: IReadOnlyList(Of TypeReaderResult)
  fullName.vb: IReadOnlyList(Of Discord.Commands.TypeReaderResult)
  name.vb: IReadOnlyList(Of TypeReaderResult)
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.TypeReaderResult
    name: TypeReaderResult
    nameWithType: TypeReaderResult
    fullName: Discord.Commands.TypeReaderResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.TypeReaderResult
    name: TypeReaderResult
    nameWithType: TypeReaderResult
    fullName: Discord.Commands.TypeReaderResult
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<>
  nameWithType: IReadOnlyList<>
  fullName: IReadOnlyList<>
  nameWithType.vb: IReadOnlyList(Of )
  fullName.vb: IReadOnlyList(Of )
  name.vb: IReadOnlyList(Of )
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.ParseResult.ParamValues*
  commentId: Overload:Discord.Commands.ParseResult.ParamValues
  name: ParamValues
  nameWithType: ParseResult.ParamValues
  fullName: Discord.Commands.ParseResult.ParamValues
- uid: Discord.Commands.ParseResult.Error*
  commentId: Overload:Discord.Commands.ParseResult.Error
  name: Error
  nameWithType: ParseResult.Error
  fullName: Discord.Commands.ParseResult.Error
- uid: Discord.Commands.IResult.Error
  commentId: P:Discord.Commands.IResult.Error
  parent: Discord.Commands.IResult
  name: Error
  nameWithType: IResult.Error
  fullName: Discord.Commands.IResult.Error
- uid: System.Nullable{Discord.Commands.CommandError}
  commentId: '!:System.Nullable{Discord.Commands.CommandError}'
  definition: System.Nullable`1
  name: Nullable<CommandError>
  nameWithType: Nullable<CommandError>
  fullName: System.Nullable<Discord.Commands.CommandError>
  nameWithType.vb: Nullable(Of CommandError)
  fullName.vb: System.Nullable(Of Discord.Commands.CommandError)
  name.vb: Nullable(Of CommandError)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.CommandError
    name: CommandError
    nameWithType: CommandError
    fullName: Discord.Commands.CommandError
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.CommandError
    name: CommandError
    nameWithType: CommandError
    fullName: Discord.Commands.CommandError
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.ParseResult.ErrorReason*
  commentId: Overload:Discord.Commands.ParseResult.ErrorReason
  name: ErrorReason
  nameWithType: ParseResult.ErrorReason
  fullName: Discord.Commands.ParseResult.ErrorReason
- uid: Discord.Commands.IResult.ErrorReason
  commentId: P:Discord.Commands.IResult.ErrorReason
  parent: Discord.Commands.IResult
  name: ErrorReason
  nameWithType: IResult.ErrorReason
  fullName: Discord.Commands.IResult.ErrorReason
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.Commands.ParseResult.IsSuccess*
  commentId: Overload:Discord.Commands.ParseResult.IsSuccess
  name: IsSuccess
  nameWithType: ParseResult.IsSuccess
  fullName: Discord.Commands.ParseResult.IsSuccess
- uid: Discord.Commands.IResult.IsSuccess
  commentId: P:Discord.Commands.IResult.IsSuccess
  parent: Discord.Commands.IResult
  name: IsSuccess
  nameWithType: IResult.IsSuccess
  fullName: Discord.Commands.IResult.IsSuccess
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.Commands.ParseResult.FromSuccess*
  commentId: Overload:Discord.Commands.ParseResult.FromSuccess
  name: FromSuccess
  nameWithType: ParseResult.FromSuccess
  fullName: Discord.Commands.ParseResult.FromSuccess
- uid: Discord.Commands.ParseResult
  commentId: T:Discord.Commands.ParseResult
  parent: Discord.Commands
  name: ParseResult
  nameWithType: ParseResult
  fullName: Discord.Commands.ParseResult
- uid: IReadOnlyList{Discord.Commands.TypeReaderValue}
  commentId: '!:IReadOnlyList{Discord.Commands.TypeReaderValue}'
  definition: IReadOnlyList`1
  name: IReadOnlyList<TypeReaderValue>
  nameWithType: IReadOnlyList<TypeReaderValue>
  fullName: IReadOnlyList<Discord.Commands.TypeReaderValue>
  nameWithType.vb: IReadOnlyList(Of TypeReaderValue)
  fullName.vb: IReadOnlyList(Of Discord.Commands.TypeReaderValue)
  name.vb: IReadOnlyList(Of TypeReaderValue)
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.TypeReaderValue
    name: TypeReaderValue
    nameWithType: TypeReaderValue
    fullName: Discord.Commands.TypeReaderValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.TypeReaderValue
    name: TypeReaderValue
    nameWithType: TypeReaderValue
    fullName: Discord.Commands.TypeReaderValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.ParseResult.FromError*
  commentId: Overload:Discord.Commands.ParseResult.FromError
  name: FromError
  nameWithType: ParseResult.FromError
  fullName: Discord.Commands.ParseResult.FromError
- uid: Discord.Commands.CommandError
  commentId: T:Discord.Commands.CommandError
  parent: Discord.Commands
  name: CommandError
  nameWithType: CommandError
  fullName: Discord.Commands.CommandError
- uid: Exception
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: Exception
- uid: Discord.Commands.ParseResult.ToString*
  commentId: Overload:Discord.Commands.ParseResult.ToString
  name: ToString
  nameWithType: ParseResult.ToString
  fullName: Discord.Commands.ParseResult.ToString
