### YamlMime:ManagedReference
items:
- uid: Discord.Tag`1
  commentId: T:Discord.Tag`1
  id: Tag`1
  parent: Discord
  children:
  - Discord.Tag`1.Discord#ITag#Value
  - Discord.Tag`1.Index
  - Discord.Tag`1.Key
  - Discord.Tag`1.Length
  - Discord.Tag`1.ToString
  - Discord.Tag`1.Type
  - Discord.Tag`1.Value
  langs:
  - csharp
  - vb
  name: Tag<T>
  nameWithType: Tag<T>
  fullName: Discord.Tag<T>
  type: Class
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/Tag.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Tag
    path: ../src/Discord.Net.Core/Entities/Messages/Tag.cs
    startLine: 4
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  syntax:
    content: 'public class Tag<T> : ITag'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class Tag(Of T)
          Implements ITag
  inheritance:
  - System.Object
  implements:
  - Discord.ITag
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType.vb: Tag(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Discord.Tag(Of T)
  name.vb: Tag(Of T)
- uid: Discord.Tag`1.Type
  commentId: P:Discord.Tag`1.Type
  id: Type
  parent: Discord.Tag`1
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Tag<T>.Type
  fullName: Discord.Tag<T>.Type
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/Tag.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Type
    path: ../src/Discord.Net.Core/Entities/Messages/Tag.cs
    startLine: 7
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  syntax:
    content: public TagType Type { get; }
    parameters: []
    return:
      type: Discord.TagType
    content.vb: Public ReadOnly Property Type As TagType
  overload: Discord.Tag`1.Type*
  implements:
  - Discord.ITag.Type
  nameWithType.vb: Tag(Of T).Type
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Discord.Tag(Of T).Type
- uid: Discord.Tag`1.Index
  commentId: P:Discord.Tag`1.Index
  id: Index
  parent: Discord.Tag`1
  langs:
  - csharp
  - vb
  name: Index
  nameWithType: Tag<T>.Index
  fullName: Discord.Tag<T>.Index
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/Tag.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Index
    path: ../src/Discord.Net.Core/Entities/Messages/Tag.cs
    startLine: 8
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  syntax:
    content: public int Index { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Index As Integer
  overload: Discord.Tag`1.Index*
  implements:
  - Discord.ITag.Index
  nameWithType.vb: Tag(Of T).Index
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Discord.Tag(Of T).Index
- uid: Discord.Tag`1.Length
  commentId: P:Discord.Tag`1.Length
  id: Length
  parent: Discord.Tag`1
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: Tag<T>.Length
  fullName: Discord.Tag<T>.Length
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/Tag.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Length
    path: ../src/Discord.Net.Core/Entities/Messages/Tag.cs
    startLine: 9
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  syntax:
    content: public int Length { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Length As Integer
  overload: Discord.Tag`1.Length*
  implements:
  - Discord.ITag.Length
  nameWithType.vb: Tag(Of T).Length
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Discord.Tag(Of T).Length
- uid: Discord.Tag`1.Key
  commentId: P:Discord.Tag`1.Key
  id: Key
  parent: Discord.Tag`1
  langs:
  - csharp
  - vb
  name: Key
  nameWithType: Tag<T>.Key
  fullName: Discord.Tag<T>.Key
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/Tag.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Key
    path: ../src/Discord.Net.Core/Entities/Messages/Tag.cs
    startLine: 10
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  syntax:
    content: public ulong Key { get; }
    parameters: []
    return:
      type: System.UInt64
    content.vb: Public ReadOnly Property Key As ULong
  overload: Discord.Tag`1.Key*
  implements:
  - Discord.ITag.Key
  nameWithType.vb: Tag(Of T).Key
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Discord.Tag(Of T).Key
- uid: Discord.Tag`1.Value
  commentId: P:Discord.Tag`1.Value
  id: Value
  parent: Discord.Tag`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: Tag<T>.Value
  fullName: Discord.Tag<T>.Value
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/Tag.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Value
    path: ../src/Discord.Net.Core/Entities/Messages/Tag.cs
    startLine: 11
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  syntax:
    content: public T Value { get; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public ReadOnly Property Value As T
  overload: Discord.Tag`1.Value*
  nameWithType.vb: Tag(Of T).Value
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Discord.Tag(Of T).Value
- uid: Discord.Tag`1.ToString
  commentId: M:Discord.Tag`1.ToString
  id: ToString
  parent: Discord.Tag`1
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Tag<T>.ToString()
  fullName: Discord.Tag<T>.ToString()
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/Tag.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ToString
    path: ../src/Discord.Net.Core/Entities/Messages/Tag.cs
    startLine: 23
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Discord.Tag`1.ToString*
  nameWithType.vb: Tag(Of T).ToString()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Discord.Tag(Of T).ToString()
- uid: Discord.Tag`1.Discord#ITag#Value
  commentId: P:Discord.Tag`1.Discord#ITag#Value
  id: Discord#ITag#Value
  isEii: true
  parent: Discord.Tag`1
  langs:
  - csharp
  - vb
  name: ITag.Value
  nameWithType: Tag<T>.ITag.Value
  fullName: Discord.Tag<T>.Discord.ITag.Value
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/Tag.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.ITag.Value
    path: ../src/Discord.Net.Core/Entities/Messages/Tag.cs
    startLine: 25
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  syntax:
    content: object ITag.Value { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: ReadOnly WriteOnly Property Discord.ITag.Value As Object Implements ITag.Value
  overload: Discord.Tag`1.Discord#ITag#Value*
  implements:
  - Discord.ITag.Value
  nameWithType.vb: Tag(Of T).Discord.ITag.Value
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Discord.Tag(Of T).Discord.ITag.Value
  name.vb: Discord.ITag.Value
references:
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.ITag
  commentId: T:Discord.ITag
  parent: Discord
  name: ITag
  nameWithType: ITag
  fullName: Discord.ITag
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Tag`1.Type*
  commentId: Overload:Discord.Tag`1.Type
  name: Type
  nameWithType: Tag<T>.Type
  fullName: Discord.Tag<T>.Type
  nameWithType.vb: Tag(Of T).Type
  fullName.vb: Discord.Tag(Of T).Type
- uid: Discord.ITag.Type
  commentId: P:Discord.ITag.Type
  parent: Discord.ITag
  name: Type
  nameWithType: ITag.Type
  fullName: Discord.ITag.Type
- uid: Discord.TagType
  commentId: T:Discord.TagType
  parent: Discord
  name: TagType
  nameWithType: TagType
  fullName: Discord.TagType
- uid: Discord.Tag`1.Index*
  commentId: Overload:Discord.Tag`1.Index
  name: Index
  nameWithType: Tag<T>.Index
  fullName: Discord.Tag<T>.Index
  nameWithType.vb: Tag(Of T).Index
  fullName.vb: Discord.Tag(Of T).Index
- uid: Discord.ITag.Index
  commentId: P:Discord.ITag.Index
  parent: Discord.ITag
  name: Index
  nameWithType: ITag.Index
  fullName: Discord.ITag.Index
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Discord.Tag`1.Length*
  commentId: Overload:Discord.Tag`1.Length
  name: Length
  nameWithType: Tag<T>.Length
  fullName: Discord.Tag<T>.Length
  nameWithType.vb: Tag(Of T).Length
  fullName.vb: Discord.Tag(Of T).Length
- uid: Discord.ITag.Length
  commentId: P:Discord.ITag.Length
  parent: Discord.ITag
  name: Length
  nameWithType: ITag.Length
  fullName: Discord.ITag.Length
- uid: Discord.Tag`1.Key*
  commentId: Overload:Discord.Tag`1.Key
  name: Key
  nameWithType: Tag<T>.Key
  fullName: Discord.Tag<T>.Key
  nameWithType.vb: Tag(Of T).Key
  fullName.vb: Discord.Tag(Of T).Key
- uid: Discord.ITag.Key
  commentId: P:Discord.ITag.Key
  parent: Discord.ITag
  name: Key
  nameWithType: ITag.Key
  fullName: Discord.ITag.Key
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Discord.Tag`1.Value*
  commentId: Overload:Discord.Tag`1.Value
  name: Value
  nameWithType: Tag<T>.Value
  fullName: Discord.Tag<T>.Value
  nameWithType.vb: Tag(Of T).Value
  fullName.vb: Discord.Tag(Of T).Value
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Tag`1.ToString*
  commentId: Overload:Discord.Tag`1.ToString
  name: ToString
  nameWithType: Tag<T>.ToString
  fullName: Discord.Tag<T>.ToString
  nameWithType.vb: Tag(Of T).ToString
  fullName.vb: Discord.Tag(Of T).ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.Tag`1.Discord#ITag#Value*
  commentId: Overload:Discord.Tag`1.Discord#ITag#Value
  name: ITag.Value
  nameWithType: Tag<T>.ITag.Value
  fullName: Discord.Tag<T>.Discord.ITag.Value
  nameWithType.vb: Tag(Of T).Discord.ITag.Value
  fullName.vb: Discord.Tag(Of T).Discord.ITag.Value
  name.vb: Discord.ITag.Value
- uid: Discord.ITag.Value
  commentId: P:Discord.ITag.Value
  parent: Discord.ITag
  name: Value
  nameWithType: ITag.Value
  fullName: Discord.ITag.Value
