### YamlMime:ManagedReference
items:
- uid: Discord.GuildUserProperties
  commentId: T:Discord.GuildUserProperties
  id: GuildUserProperties
  parent: Discord
  children:
  - Discord.GuildUserProperties.Channel
  - Discord.GuildUserProperties.ChannelId
  - Discord.GuildUserProperties.Deaf
  - Discord.GuildUserProperties.Mute
  - Discord.GuildUserProperties.Nickname
  - Discord.GuildUserProperties.RoleIds
  - Discord.GuildUserProperties.Roles
  langs:
  - csharp
  - vb
  name: GuildUserProperties
  nameWithType: GuildUserProperties
  fullName: Discord.GuildUserProperties
  type: Class
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Users/GuildUserProperties.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GuildUserProperties
    path: ../src/Discord.Net.Core/Entities/Users/GuildUserProperties.cs
    startLine: 8
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nProperties that are used to modify an <xref href=\"Discord.IGuildUser\" data-throw-if-not-resolved=\"false\"></xref> with the following parameters.\n"
  example: []
  syntax:
    content: 'public class GuildUserProperties : object'
    content.vb: >-
      Public Class GuildUserProperties
          Inherits Object
  seealso:
  - linkId: Discord.IGuildUser.ModifyAsync(Action{Discord.GuildUserProperties},Discord.RequestOptions)
    commentId: M:Discord.IGuildUser.ModifyAsync(Action{Discord.GuildUserProperties},Discord.RequestOptions)
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.GuildUserProperties.Mute
  commentId: P:Discord.GuildUserProperties.Mute
  id: Mute
  parent: Discord.GuildUserProperties
  langs:
  - csharp
  - vb
  name: Mute
  nameWithType: GuildUserProperties.Mute
  fullName: Discord.GuildUserProperties.Mute
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Users/GuildUserProperties.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Mute
    path: ../src/Discord.Net.Core/Entities/Users/GuildUserProperties.cs
    startLine: 16
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets or sets whether the user should be muted in a voice channel.\n"
  remarks: "\nIf this value is set to <code>true</code>, no user will be able to hear this user speak in the guild.\n"
  example: []
  syntax:
    content: public Optional<bool> Mute { get; set; }
    parameters: []
    return:
      type: Discord.Optional{System.Boolean}
    content.vb: 'Public Property Mute As '
  overload: Discord.GuildUserProperties.Mute*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Discord.GuildUserProperties.Deaf
  commentId: P:Discord.GuildUserProperties.Deaf
  id: Deaf
  parent: Discord.GuildUserProperties
  langs:
  - csharp
  - vb
  name: Deaf
  nameWithType: GuildUserProperties.Deaf
  fullName: Discord.GuildUserProperties.Deaf
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Users/GuildUserProperties.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Deaf
    path: ../src/Discord.Net.Core/Entities/Users/GuildUserProperties.cs
    startLine: 23
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets or sets whether the user should be deafened in a voice channel.\n"
  remarks: "\nIf this value is set to <code>true</code>, this user will not be able to hear anyone speak in the guild.\n"
  example: []
  syntax:
    content: public Optional<bool> Deaf { get; set; }
    parameters: []
    return:
      type: Discord.Optional{System.Boolean}
    content.vb: 'Public Property Deaf As '
  overload: Discord.GuildUserProperties.Deaf*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Discord.GuildUserProperties.Nickname
  commentId: P:Discord.GuildUserProperties.Nickname
  id: Nickname
  parent: Discord.GuildUserProperties
  langs:
  - csharp
  - vb
  name: Nickname
  nameWithType: GuildUserProperties.Nickname
  fullName: Discord.GuildUserProperties.Nickname
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Users/GuildUserProperties.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Nickname
    path: ../src/Discord.Net.Core/Entities/Users/GuildUserProperties.cs
    startLine: 31
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets or sets the user&apos;s nickname.\n"
  remarks: "\nTo clear the user&apos;s nickname, this value can be set to <code>null</code> or\n<see cref=\"!:string.Empty\"></see>.\n"
  example: []
  syntax:
    content: public Optional<string> Nickname { get; set; }
    parameters: []
    return:
      type: Discord.Optional{System.String}
    content.vb: 'Public Property Nickname As '
  overload: Discord.GuildUserProperties.Nickname*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Discord.GuildUserProperties.Roles
  commentId: P:Discord.GuildUserProperties.Roles
  id: Roles
  parent: Discord.GuildUserProperties
  langs:
  - csharp
  - vb
  name: Roles
  nameWithType: GuildUserProperties.Roles
  fullName: Discord.GuildUserProperties.Roles
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Users/GuildUserProperties.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Roles
    path: ../src/Discord.Net.Core/Entities/Users/GuildUserProperties.cs
    startLine: 45
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets or sets the roles the user should have.\n"
  remarks: "\n<p>\n    To add a role to a user:\n<xref href=\"Discord.IGuildUser.AddRolesAsync(IEnumerable%7bDiscord.IRole%7d%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p>\n    To remove a role from a user:\n<xref href=\"Discord.IGuildUser.RemoveRolesAsync(IEnumerable%7bDiscord.IRole%7d%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n"
  example: []
  syntax:
    content: public Optional<IEnumerable<IRole>> Roles { get; set; }
    parameters: []
    return:
      type: Discord.Optional{IEnumerable{Discord.IRole}}
    content.vb: 'Public Property Roles As '
  overload: Discord.GuildUserProperties.Roles*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Discord.GuildUserProperties.RoleIds
  commentId: P:Discord.GuildUserProperties.RoleIds
  id: RoleIds
  parent: Discord.GuildUserProperties
  langs:
  - csharp
  - vb
  name: RoleIds
  nameWithType: GuildUserProperties.RoleIds
  fullName: Discord.GuildUserProperties.RoleIds
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Users/GuildUserProperties.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: RoleIds
    path: ../src/Discord.Net.Core/Entities/Users/GuildUserProperties.cs
    startLine: 59
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets or sets the roles the user should have.\n"
  remarks: "\n<p>\n    To add a role to a user:\n<xref href=\"Discord.IGuildUser.AddRolesAsync(IEnumerable%7bDiscord.IRole%7d%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n<p>\n    To remove a role from a user:\n<xref href=\"Discord.IGuildUser.RemoveRolesAsync(IEnumerable%7bDiscord.IRole%7d%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n"
  example: []
  syntax:
    content: public Optional<IEnumerable<ulong>> RoleIds { get; set; }
    parameters: []
    return:
      type: Discord.Optional{IEnumerable{System.UInt64}}
    content.vb: 'Public Property RoleIds As '
  overload: Discord.GuildUserProperties.RoleIds*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Discord.GuildUserProperties.Channel
  commentId: P:Discord.GuildUserProperties.Channel
  id: Channel
  parent: Discord.GuildUserProperties
  langs:
  - csharp
  - vb
  name: Channel
  nameWithType: GuildUserProperties.Channel
  fullName: Discord.GuildUserProperties.Channel
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Users/GuildUserProperties.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Channel
    path: ../src/Discord.Net.Core/Entities/Users/GuildUserProperties.cs
    startLine: 67
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nMoves a user to a voice channel. If <code>null</code>, this user will be disconnected from their current voice channel.\n"
  remarks: "\nThis user MUST already be in a <xref href=\"Discord.IVoiceChannel\" data-throw-if-not-resolved=\"false\"></xref> for this to work.\nWhen set, this property takes precedence over <xref href=\"Discord.GuildUserProperties.ChannelId\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Optional<IVoiceChannel> Channel { get; set; }
    parameters: []
    return:
      type: Discord.Optional{Discord.IVoiceChannel}
    content.vb: 'Public Property Channel As '
  overload: Discord.GuildUserProperties.Channel*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Discord.GuildUserProperties.ChannelId
  commentId: P:Discord.GuildUserProperties.ChannelId
  id: ChannelId
  parent: Discord.GuildUserProperties
  langs:
  - csharp
  - vb
  name: ChannelId
  nameWithType: GuildUserProperties.ChannelId
  fullName: Discord.GuildUserProperties.ChannelId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Users/GuildUserProperties.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ChannelId
    path: ../src/Discord.Net.Core/Entities/Users/GuildUserProperties.cs
    startLine: 74
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nMoves a user to a voice channel. Set <xref href=\"Discord.GuildUserProperties.Channel\" data-throw-if-not-resolved=\"false\"></xref> to <code>null</code> to disconnect this user from their current voice channel.\n"
  remarks: "\nThis user MUST already be in a <xref href=\"Discord.IVoiceChannel\" data-throw-if-not-resolved=\"false\"></xref> for this to work.\n"
  example: []
  syntax:
    content: public Optional<ulong> ChannelId { get; set; }
    parameters: []
    return:
      type: Discord.Optional{System.UInt64}
    content.vb: 'Public Property ChannelId As '
  overload: Discord.GuildUserProperties.ChannelId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Discord.IGuildUser
  commentId: T:Discord.IGuildUser
  parent: Discord
  name: IGuildUser
  nameWithType: IGuildUser
  fullName: Discord.IGuildUser
- uid: Discord.IGuildUser.ModifyAsync(Action{Discord.GuildUserProperties},Discord.RequestOptions)
  commentId: M:Discord.IGuildUser.ModifyAsync(Action{Discord.GuildUserProperties},Discord.RequestOptions)
  parent: Discord.IGuildUser
  isExternal: true
  name: ModifyAsync(Action<GuildUserProperties>, RequestOptions)
  nameWithType: IGuildUser.ModifyAsync(Action<GuildUserProperties>, RequestOptions)
  fullName: Discord.IGuildUser.ModifyAsync(Action<Discord.GuildUserProperties>, Discord.RequestOptions)
  nameWithType.vb: IGuildUser.ModifyAsync(Action(Of GuildUserProperties), RequestOptions)
  fullName.vb: Discord.IGuildUser.ModifyAsync(Action(Of Discord.GuildUserProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of GuildUserProperties), RequestOptions)
  spec.csharp:
  - uid: Discord.IGuildUser.ModifyAsync(Action{Discord.GuildUserProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: IGuildUser.ModifyAsync
    fullName: Discord.IGuildUser.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildUserProperties
    name: GuildUserProperties
    nameWithType: GuildUserProperties
    fullName: Discord.GuildUserProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuildUser.ModifyAsync(Action{Discord.GuildUserProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: IGuildUser.ModifyAsync
    fullName: Discord.IGuildUser.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildUserProperties
    name: GuildUserProperties
    nameWithType: GuildUserProperties
    fullName: Discord.GuildUserProperties
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.GuildUserProperties.Mute*
  commentId: Overload:Discord.GuildUserProperties.Mute
  name: Mute
  nameWithType: GuildUserProperties.Mute
  fullName: Discord.GuildUserProperties.Mute
- uid: Discord.Optional{System.Boolean}
  commentId: T:Discord.Optional{System.Boolean}
  parent: Discord
  definition: Discord.Optional`1
  name: Optional<Boolean>
  nameWithType: Optional<Boolean>
  fullName: Discord.Optional<System.Boolean>
  nameWithType.vb: Optional(Of Boolean)
  fullName.vb: Discord.Optional(Of System.Boolean)
  name.vb: Optional(Of Boolean)
  spec.csharp:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Optional`1
  commentId: T:Discord.Optional`1
  parent: Discord
  name: Optional<T>
  nameWithType: Optional<T>
  fullName: Discord.Optional<T>
  nameWithType.vb: Optional(Of T)
  fullName.vb: Discord.Optional(Of T)
  name.vb: Optional(Of T)
  spec.csharp:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.GuildUserProperties.Deaf*
  commentId: Overload:Discord.GuildUserProperties.Deaf
  name: Deaf
  nameWithType: GuildUserProperties.Deaf
  fullName: Discord.GuildUserProperties.Deaf
- uid: Discord.GuildUserProperties.Nickname*
  commentId: Overload:Discord.GuildUserProperties.Nickname
  name: Nickname
  nameWithType: GuildUserProperties.Nickname
  fullName: Discord.GuildUserProperties.Nickname
- uid: Discord.Optional{System.String}
  commentId: T:Discord.Optional{System.String}
  parent: Discord
  definition: Discord.Optional`1
  name: Optional<String>
  nameWithType: Optional<String>
  fullName: Discord.Optional<System.String>
  nameWithType.vb: Optional(Of String)
  fullName.vb: Discord.Optional(Of System.String)
  name.vb: Optional(Of String)
  spec.csharp:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuildUser.AddRolesAsync(IEnumerable{Discord.IRole},Discord.RequestOptions)
  commentId: M:Discord.IGuildUser.AddRolesAsync(IEnumerable{Discord.IRole},Discord.RequestOptions)
  parent: Discord.IGuildUser
  isExternal: true
  name: AddRolesAsync(IEnumerable<IRole>, RequestOptions)
  nameWithType: IGuildUser.AddRolesAsync(IEnumerable<IRole>, RequestOptions)
  fullName: Discord.IGuildUser.AddRolesAsync(IEnumerable<Discord.IRole>, Discord.RequestOptions)
  nameWithType.vb: IGuildUser.AddRolesAsync(IEnumerable(Of IRole), RequestOptions)
  fullName.vb: Discord.IGuildUser.AddRolesAsync(IEnumerable(Of Discord.IRole), Discord.RequestOptions)
  name.vb: AddRolesAsync(IEnumerable(Of IRole), RequestOptions)
  spec.csharp:
  - uid: Discord.IGuildUser.AddRolesAsync(IEnumerable{Discord.IRole},Discord.RequestOptions)
    name: AddRolesAsync
    nameWithType: IGuildUser.AddRolesAsync
    fullName: Discord.IGuildUser.AddRolesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuildUser.AddRolesAsync(IEnumerable{Discord.IRole},Discord.RequestOptions)
    name: AddRolesAsync
    nameWithType: IGuildUser.AddRolesAsync
    fullName: Discord.IGuildUser.AddRolesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuildUser.RemoveRolesAsync(IEnumerable{Discord.IRole},Discord.RequestOptions)
  commentId: M:Discord.IGuildUser.RemoveRolesAsync(IEnumerable{Discord.IRole},Discord.RequestOptions)
  parent: Discord.IGuildUser
  isExternal: true
  name: RemoveRolesAsync(IEnumerable<IRole>, RequestOptions)
  nameWithType: IGuildUser.RemoveRolesAsync(IEnumerable<IRole>, RequestOptions)
  fullName: Discord.IGuildUser.RemoveRolesAsync(IEnumerable<Discord.IRole>, Discord.RequestOptions)
  nameWithType.vb: IGuildUser.RemoveRolesAsync(IEnumerable(Of IRole), RequestOptions)
  fullName.vb: Discord.IGuildUser.RemoveRolesAsync(IEnumerable(Of Discord.IRole), Discord.RequestOptions)
  name.vb: RemoveRolesAsync(IEnumerable(Of IRole), RequestOptions)
  spec.csharp:
  - uid: Discord.IGuildUser.RemoveRolesAsync(IEnumerable{Discord.IRole},Discord.RequestOptions)
    name: RemoveRolesAsync
    nameWithType: IGuildUser.RemoveRolesAsync
    fullName: Discord.IGuildUser.RemoveRolesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuildUser.RemoveRolesAsync(IEnumerable{Discord.IRole},Discord.RequestOptions)
    name: RemoveRolesAsync
    nameWithType: IGuildUser.RemoveRolesAsync
    fullName: Discord.IGuildUser.RemoveRolesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.GuildUserProperties.Roles*
  commentId: Overload:Discord.GuildUserProperties.Roles
  name: Roles
  nameWithType: GuildUserProperties.Roles
  fullName: Discord.GuildUserProperties.Roles
- uid: Discord.Optional{IEnumerable{Discord.IRole}}
  commentId: T:Discord.Optional{IEnumerable{Discord.IRole}}
  parent: Discord
  definition: Discord.Optional`1
  name: Optional<IEnumerable<IRole>>
  nameWithType: Optional<IEnumerable<IRole>>
  fullName: Discord.Optional<IEnumerable<Discord.IRole>>
  nameWithType.vb: Optional(Of IEnumerable(Of IRole))
  fullName.vb: Discord.Optional(Of IEnumerable(Of Discord.IRole))
  name.vb: Optional(Of IEnumerable(Of IRole))
  spec.csharp:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: <
    nameWithType: <
    fullName: <
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.GuildUserProperties.RoleIds*
  commentId: Overload:Discord.GuildUserProperties.RoleIds
  name: RoleIds
  nameWithType: GuildUserProperties.RoleIds
  fullName: Discord.GuildUserProperties.RoleIds
- uid: Discord.Optional{IEnumerable{System.UInt64}}
  commentId: T:Discord.Optional{IEnumerable{System.UInt64}}
  parent: Discord
  definition: Discord.Optional`1
  name: Optional<IEnumerable<UInt64>>
  nameWithType: Optional<IEnumerable<UInt64>>
  fullName: Discord.Optional<IEnumerable<System.UInt64>>
  nameWithType.vb: Optional(Of IEnumerable(Of UInt64))
  fullName.vb: Discord.Optional(Of IEnumerable(Of System.UInt64))
  name.vb: Optional(Of IEnumerable(Of UInt64))
  spec.csharp:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: <
    nameWithType: <
    fullName: <
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IVoiceChannel
  commentId: T:Discord.IVoiceChannel
  parent: Discord
  name: IVoiceChannel
  nameWithType: IVoiceChannel
  fullName: Discord.IVoiceChannel
- uid: Discord.GuildUserProperties.ChannelId
  commentId: P:Discord.GuildUserProperties.ChannelId
  isExternal: true
- uid: Discord.GuildUserProperties.Channel*
  commentId: Overload:Discord.GuildUserProperties.Channel
  name: Channel
  nameWithType: GuildUserProperties.Channel
  fullName: Discord.GuildUserProperties.Channel
- uid: Discord.Optional{Discord.IVoiceChannel}
  commentId: T:Discord.Optional{Discord.IVoiceChannel}
  parent: Discord
  definition: Discord.Optional`1
  name: Optional<IVoiceChannel>
  nameWithType: Optional<IVoiceChannel>
  fullName: Discord.Optional<Discord.IVoiceChannel>
  nameWithType.vb: Optional(Of IVoiceChannel)
  fullName.vb: Discord.Optional(Of Discord.IVoiceChannel)
  name.vb: Optional(Of IVoiceChannel)
  spec.csharp:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IVoiceChannel
    name: IVoiceChannel
    nameWithType: IVoiceChannel
    fullName: Discord.IVoiceChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IVoiceChannel
    name: IVoiceChannel
    nameWithType: IVoiceChannel
    fullName: Discord.IVoiceChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.GuildUserProperties.Channel
  commentId: P:Discord.GuildUserProperties.Channel
  isExternal: true
- uid: Discord.GuildUserProperties.ChannelId*
  commentId: Overload:Discord.GuildUserProperties.ChannelId
  name: ChannelId
  nameWithType: GuildUserProperties.ChannelId
  fullName: Discord.GuildUserProperties.ChannelId
- uid: Discord.Optional{System.UInt64}
  commentId: T:Discord.Optional{System.UInt64}
  parent: Discord
  definition: Discord.Optional`1
  name: Optional<UInt64>
  nameWithType: Optional<UInt64>
  fullName: Discord.Optional<System.UInt64>
  nameWithType.vb: Optional(Of UInt64)
  fullName.vb: Discord.Optional(Of System.UInt64)
  name.vb: Optional(Of UInt64)
  spec.csharp:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
