### YamlMime:ManagedReference
items:
- uid: Discord.Rest.RestDMChannel
  commentId: T:Discord.Rest.RestDMChannel
  id: RestDMChannel
  parent: Discord.Rest
  children:
  - Discord.Rest.RestDMChannel.CloseAsync(Discord.RequestOptions)
  - Discord.Rest.RestDMChannel.CurrentUser
  - Discord.Rest.RestDMChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  - Discord.Rest.RestDMChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  - Discord.Rest.RestDMChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  - Discord.Rest.RestDMChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.Rest.RestDMChannel.Discord#IChannel#Name
  - Discord.Rest.RestDMChannel.Discord#IDMChannel#Recipient
  - Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  - Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  - Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  - Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  - Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetPinnedMessagesAsync(Discord.RequestOptions)
  - Discord.Rest.RestDMChannel.Discord#IMessageChannel#SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  - Discord.Rest.RestDMChannel.Discord#IMessageChannel#SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  - Discord.Rest.RestDMChannel.Discord#IMessageChannel#SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  - Discord.Rest.RestDMChannel.Discord#IPrivateChannel#Recipients
  - Discord.Rest.RestDMChannel.Discord#Rest#IRestPrivateChannel#Recipients
  - Discord.Rest.RestDMChannel.EnterTypingState(Discord.RequestOptions)
  - Discord.Rest.RestDMChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
  - Discord.Rest.RestDMChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
  - Discord.Rest.RestDMChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
  - Discord.Rest.RestDMChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
  - Discord.Rest.RestDMChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  - Discord.Rest.RestDMChannel.GetUser(System.UInt64)
  - Discord.Rest.RestDMChannel.Recipient
  - Discord.Rest.RestDMChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  - Discord.Rest.RestDMChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  - Discord.Rest.RestDMChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  - Discord.Rest.RestDMChannel.ToString
  - Discord.Rest.RestDMChannel.TriggerTypingAsync(Discord.RequestOptions)
  - Discord.Rest.RestDMChannel.UpdateAsync(Discord.RequestOptions)
  - Discord.Rest.RestDMChannel.Users
  langs:
  - csharp
  - vb
  name: RestDMChannel
  nameWithType: RestDMChannel
  fullName: Discord.Rest.RestDMChannel
  type: Class
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RestDMChannel
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 14
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nRepresents a REST-based direct-message channel.\n"
  example: []
  syntax:
    content: 'public class RestDMChannel : RestChannel, IUpdateable, IDMChannel, IRestPrivateChannel, IPrivateChannel, IRestMessageChannel, IMessageChannel, IChannel, ISnowflakeEntity, IEntity<ulong>'
    content.vb: >-
      Public Class RestDMChannel
          Inherits RestChannel
          Implements IUpdateable, IDMChannel, IRestPrivateChannel, IPrivateChannel, IRestMessageChannel, IMessageChannel, IChannel, ISnowflakeEntity, IEntity(Of ULong)
  inheritance:
  - System.Object
  - Discord.Rest.RestEntity{System.UInt64}
  - Discord.Rest.RestChannel
  implements:
  - Discord.IUpdateable
  - Discord.IDMChannel
  - Discord.Rest.IRestPrivateChannel
  - Discord.IPrivateChannel
  - Discord.Rest.IRestMessageChannel
  - Discord.IMessageChannel
  - Discord.IChannel
  - Discord.ISnowflakeEntity
  - Discord.IEntity{System.UInt64}
  inheritedMembers:
  - Discord.Rest.RestChannel.CreatedAt
  - Discord.Rest.RestEntity{System.UInt64}.Id
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.Rest.RestDMChannel.CurrentUser
  commentId: P:Discord.Rest.RestDMChannel.CurrentUser
  id: CurrentUser
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: CurrentUser
  nameWithType: RestDMChannel.CurrentUser
  fullName: Discord.Rest.RestDMChannel.CurrentUser
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CurrentUser
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 20
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the current logged-in user.\n"
  example: []
  syntax:
    content: public RestUser CurrentUser { get; }
    parameters: []
    return:
      type: Discord.Rest.RestUser
    content.vb: Public ReadOnly Property CurrentUser As RestUser
  overload: Discord.Rest.RestDMChannel.CurrentUser*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestDMChannel.Recipient
  commentId: P:Discord.Rest.RestDMChannel.Recipient
  id: Recipient
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: Recipient
  nameWithType: RestDMChannel.Recipient
  fullName: Discord.Rest.RestDMChannel.Recipient
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Recipient
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 25
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the recipient of the channel.\n"
  example: []
  syntax:
    content: public RestUser Recipient { get; }
    parameters: []
    return:
      type: Discord.Rest.RestUser
    content.vb: Public ReadOnly Property Recipient As RestUser
  overload: Discord.Rest.RestDMChannel.Recipient*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestDMChannel.Users
  commentId: P:Discord.Rest.RestDMChannel.Users
  id: Users
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: Users
  nameWithType: RestDMChannel.Users
  fullName: Discord.Rest.RestDMChannel.Users
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Users
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 30
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection that is the current logged-in user and the recipient.\n"
  example: []
  syntax:
    content: public IReadOnlyCollection<RestUser> Users { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestUser}
    content.vb: Public ReadOnly Property Users As IReadOnlyCollection(Of RestUser)
  overload: Discord.Rest.RestDMChannel.Users*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestDMChannel.UpdateAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestDMChannel.UpdateAsync(Discord.RequestOptions)
  id: UpdateAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: UpdateAsync(RequestOptions)
  nameWithType: RestDMChannel.UpdateAsync(RequestOptions)
  fullName: Discord.Rest.RestDMChannel.UpdateAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: UpdateAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 50
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nUpdates this object&apos;s properties with its current state.\n"
  example: []
  syntax:
    content: public override Task UpdateAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overrides Function UpdateAsync(options As RequestOptions = Nothing) As Task
  overridden: Discord.Rest.RestChannel.UpdateAsync(Discord.RequestOptions)
  overload: Discord.Rest.RestDMChannel.UpdateAsync*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.Rest.RestDMChannel.CloseAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestDMChannel.CloseAsync(Discord.RequestOptions)
  id: CloseAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: CloseAsync(RequestOptions)
  nameWithType: RestDMChannel.CloseAsync(RequestOptions)
  fullName: Discord.Rest.RestDMChannel.CloseAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CloseAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 56
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nCloses this private channel, removing it from your channel list.\n"
  example: []
  syntax:
    content: public Task CloseAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous close operation.\n"
    content.vb: Public Function CloseAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestDMChannel.CloseAsync*
  implements:
  - Discord.IDMChannel.CloseAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestDMChannel.GetUser(System.UInt64)
  commentId: M:Discord.Rest.RestDMChannel.GetUser(System.UInt64)
  id: GetUser(System.UInt64)
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: GetUser(UInt64)
  nameWithType: RestDMChannel.GetUser(UInt64)
  fullName: Discord.Rest.RestDMChannel.GetUser(System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetUser
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 67
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a user in this channel from the provided <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>.\n"
  example: []
  syntax:
    content: public RestUser GetUser(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the user.
    return:
      type: Discord.Rest.RestUser
      description: "\nA <xref href=\"Discord.Rest.RestUser\" data-throw-if-not-resolved=\"false\"></xref> object that is a recipient of this channel; otherwise <code>null</code>.\n"
    content.vb: Public Function GetUser(id As ULong) As RestUser
  overload: Discord.Rest.RestDMChannel.GetUser*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestDMChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestDMChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
  id: GetMessageAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: GetMessageAsync(UInt64, RequestOptions)
  nameWithType: RestDMChannel.GetMessageAsync(UInt64, RequestOptions)
  fullName: Discord.Rest.RestDMChannel.GetMessageAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetMessageAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 78
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a message from this message channel.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IMessageChannel.GetMessageAsync(System.UInt64%2cDiscord.CacheMode%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public Task<RestMessage> GetMessageAsync(ulong id, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the message.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestMessage}
      description: "\nA task that represents an asynchronous get operation for retrieving the message. The task result contains\nthe retrieved message; <code>null</code> if no message is found with the specified identifier.\n"
    content.vb: Public Function GetMessageAsync(id As ULong, options As RequestOptions = Nothing) As Task(Of RestMessage)
  overload: Discord.Rest.RestDMChannel.GetMessageAsync*
  implements:
  - Discord.Rest.IRestMessageChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestDMChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestDMChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
  id: GetMessagesAsync(System.Int32,Discord.RequestOptions)
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: GetMessagesAsync(Int32, RequestOptions)
  nameWithType: RestDMChannel.GetMessagesAsync(Int32, RequestOptions)
  fullName: Discord.Rest.RestDMChannel.GetMessagesAsync(System.Int32, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetMessagesAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 81
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the last N messages from this message channel.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IMessageChannel.GetMessagesAsync(System.Int32%2cDiscord.CacheMode%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(int limit = 100, RequestOptions options = null)
    parameters:
    - id: limit
      type: System.Int32
      description: The numbers of message to be gotten from.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestMessage}}
      description: "\nPaged collection of messages.\n"
    content.vb: Public Function GetMessagesAsync(limit As Integer = 100, options As RequestOptions = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of RestMessage))
  overload: Discord.Rest.RestDMChannel.GetMessagesAsync*
  implements:
  - Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestDMChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestDMChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
  id: GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: GetMessagesAsync(UInt64, Direction, Int32, RequestOptions)
  nameWithType: RestDMChannel.GetMessagesAsync(UInt64, Direction, Int32, RequestOptions)
  fullName: Discord.Rest.RestDMChannel.GetMessagesAsync(System.UInt64, Discord.Direction, System.Int32, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetMessagesAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 84
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of messages in this channel.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IMessageChannel.GetMessagesAsync(System.UInt64%2cDiscord.Direction%2cSystem.Int32%2cDiscord.CacheMode%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(ulong fromMessageId, Direction dir, int limit = 100, RequestOptions options = null)
    parameters:
    - id: fromMessageId
      type: System.UInt64
      description: The ID of the starting message to get the messages from.
    - id: dir
      type: Discord.Direction
      description: The direction of the messages to be gotten from.
    - id: limit
      type: System.Int32
      description: The numbers of message to be gotten from.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestMessage}}
      description: "\nPaged collection of messages.\n"
    content.vb: Public Function GetMessagesAsync(fromMessageId As ULong, dir As Direction, limit As Integer = 100, options As RequestOptions = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of RestMessage))
  overload: Discord.Rest.RestDMChannel.GetMessagesAsync*
  implements:
  - Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestDMChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestDMChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
  id: GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: GetMessagesAsync(IMessage, Direction, Int32, RequestOptions)
  nameWithType: RestDMChannel.GetMessagesAsync(IMessage, Direction, Int32, RequestOptions)
  fullName: Discord.Rest.RestDMChannel.GetMessagesAsync(Discord.IMessage, Discord.Direction, System.Int32, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetMessagesAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 87
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of messages in this channel.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage%2cDiscord.Direction%2cSystem.Int32%2cDiscord.CacheMode%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(IMessage fromMessage, Direction dir, int limit = 100, RequestOptions options = null)
    parameters:
    - id: fromMessage
      type: Discord.IMessage
      description: The starting message to get the messages from.
    - id: dir
      type: Discord.Direction
      description: The direction of the messages to be gotten from.
    - id: limit
      type: System.Int32
      description: The numbers of message to be gotten from.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestMessage}}
      description: "\nPaged collection of messages.\n"
    content.vb: Public Function GetMessagesAsync(fromMessage As IMessage, dir As Direction, limit As Integer = 100, options As RequestOptions = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of RestMessage))
  overload: Discord.Rest.RestDMChannel.GetMessagesAsync*
  implements:
  - Discord.Rest.IRestMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestDMChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestDMChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  id: GetPinnedMessagesAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: GetPinnedMessagesAsync(RequestOptions)
  nameWithType: RestDMChannel.GetPinnedMessagesAsync(RequestOptions)
  fullName: Discord.Rest.RestDMChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetPinnedMessagesAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 90
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of pinned messages in this channel.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<RestMessage>> GetPinnedMessagesAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestMessage}}
      description: "\nA task that represents the asynchronous get operation for retrieving pinned messages in this channel.\nThe task result contains a collection of messages found in the pinned messages.\n"
    content.vb: Public Function GetPinnedMessagesAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestMessage))
  overload: Discord.Rest.RestDMChannel.GetPinnedMessagesAsync*
  implements:
  - Discord.Rest.IRestMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestDMChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestDMChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  id: SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: SendMessageAsync(String, Boolean, Embed, RequestOptions)
  nameWithType: RestDMChannel.SendMessageAsync(String, Boolean, Embed, RequestOptions)
  fullName: Discord.Rest.RestDMChannel.SendMessageAsync(System.String, System.Boolean, Discord.Embed, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SendMessageAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 95
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nSends a message to this message channel.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IMessageChannel.SendMessageAsync(System.String%2cSystem.Boolean%2cDiscord.Embed%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public Task<RestUserMessage> SendMessageAsync(string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null)
    parameters:
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Determines whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Public Function SendMessageAsync(text As String = Nothing, isTTS As Boolean = False, embed As Embed = Nothing, options As RequestOptions = Nothing) As Task(Of RestUserMessage)
  overload: Discord.Rest.RestDMChannel.SendMessageAsync*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Message content is too long, length must be less or equal to <xref href="Discord.DiscordConfig.MaxMessageSize" data-throw-if-not-resolved="false"></xref>.
  implements:
  - Discord.Rest.IRestMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestDMChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.Rest.RestDMChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  id: SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: RestDMChannel.SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.Rest.RestDMChannel.SendFileAsync(System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SendFileAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 123
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nSends a file to this message channel with an optional caption.\n"
  remarks: "\nThis method follows the same behavior as described in \n<xref href=\"Discord.IMessageChannel.SendFileAsync(System.String%2cSystem.String%2cSystem.Boolean%2cDiscord.Embed%2cDiscord.RequestOptions%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>. Please visit\nits documentation for more details on this method.\n"
  example: []
  syntax:
    content: public Task<RestUserMessage> SendFileAsync(string filePath, string text, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false)
    parameters:
    - id: filePath
      type: System.String
      description: The file path of the file.
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    - id: isSpoiler
      type: System.Boolean
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Public Function SendFileAsync(filePath As String, text As String, isTTS As Boolean = False, embed As Embed = Nothing, options As RequestOptions = Nothing, isSpoiler As Boolean = False) As Task(Of RestUserMessage)
  overload: Discord.Rest.RestDMChannel.SendFileAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">filePath</code> is a zero-length string, contains only white space, or contains one or more\ninvalid characters as defined by <xref href=\"System.IO.Path.GetInvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">filePath</code> is <code>null</code>.\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\nThe specified path, file name, or both exceed the system-defined maximum length. For example, on\nWindows-based platforms, paths must be less than 248 characters, and file names must be less than 260\ncharacters.\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\nThe specified path is invalid, (for example, it is on an unmapped drive).\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">filePath</code> specified a directory.-or- The caller does not have the required permission.\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\nThe file specified in <code data-dev-comment-type=\"paramref\" class=\"paramref\">filePath</code> was not found.\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: <code data-dev-comment-type="paramref" class="paramref">filePath</code> is in an invalid format.
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: An I/O error occurred while opening the file.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Message content is too long, length must be less or equal to <xref href="Discord.DiscordConfig.MaxMessageSize" data-throw-if-not-resolved="false"></xref>.
  implements:
  - Discord.Rest.IRestMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestDMChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.Rest.RestDMChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  id: SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: RestDMChannel.SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.Rest.RestDMChannel.SendFileAsync(System.IO.Stream, System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SendFileAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 127
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nSends a file to this message channel with an optional caption.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IMessageChannel.SendFileAsync(System.IO.Stream%2cSystem.String%2cSystem.String%2cSystem.Boolean%2cDiscord.Embed%2cDiscord.RequestOptions%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: public Task<RestUserMessage> SendFileAsync(Stream stream, string filename, string text, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref> of the file to be sent.
    - id: filename
      type: System.String
      description: The name of the attachment.
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    - id: isSpoiler
      type: System.Boolean
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Public Function SendFileAsync(stream As Stream, filename As String, text As String, isTTS As Boolean = False, embed As Embed = Nothing, options As RequestOptions = Nothing, isSpoiler As Boolean = False) As Task(Of RestUserMessage)
  overload: Discord.Rest.RestDMChannel.SendFileAsync*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Message content is too long, length must be less or equal to <xref href="Discord.DiscordConfig.MaxMessageSize" data-throw-if-not-resolved="false"></xref>.
  implements:
  - Discord.Rest.IRestMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestDMChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestDMChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  id: DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: DeleteMessageAsync(UInt64, RequestOptions)
  nameWithType: RestDMChannel.DeleteMessageAsync(UInt64, RequestOptions)
  fullName: Discord.Rest.RestDMChannel.DeleteMessageAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteMessageAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 131
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nDeletes a message.\n"
  example: []
  syntax:
    content: public Task DeleteMessageAsync(ulong messageId, RequestOptions options = null)
    parameters:
    - id: messageId
      type: System.UInt64
      description: The snowflake identifier of the message that would be removed.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous removal operation.\n"
    content.vb: Public Function DeleteMessageAsync(messageId As ULong, options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestDMChannel.DeleteMessageAsync*
  implements:
  - Discord.IMessageChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestDMChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestDMChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  id: DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: DeleteMessageAsync(IMessage, RequestOptions)
  nameWithType: RestDMChannel.DeleteMessageAsync(IMessage, RequestOptions)
  fullName: Discord.Rest.RestDMChannel.DeleteMessageAsync(Discord.IMessage, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteMessageAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 134
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: 'Deletes a message based on the provided message in this channel. '
  example: []
  syntax:
    content: public Task DeleteMessageAsync(IMessage message, RequestOptions options = null)
    parameters:
    - id: message
      type: Discord.IMessage
      description: The message that would be removed.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous removal operation.\n"
    content.vb: Public Function DeleteMessageAsync(message As IMessage, options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestDMChannel.DeleteMessageAsync*
  implements:
  - Discord.IMessageChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestDMChannel.TriggerTypingAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestDMChannel.TriggerTypingAsync(Discord.RequestOptions)
  id: TriggerTypingAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: TriggerTypingAsync(RequestOptions)
  nameWithType: RestDMChannel.TriggerTypingAsync(RequestOptions)
  fullName: Discord.Rest.RestDMChannel.TriggerTypingAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: TriggerTypingAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 138
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nBroadcasts the &quot;user is typing&quot; message to all users in this channel, lasting 10 seconds.\n"
  example: []
  syntax:
    content: public Task TriggerTypingAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous operation that triggers the broadcast.\n"
    content.vb: Public Function TriggerTypingAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestDMChannel.TriggerTypingAsync*
  implements:
  - Discord.IMessageChannel.TriggerTypingAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestDMChannel.EnterTypingState(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestDMChannel.EnterTypingState(Discord.RequestOptions)
  id: EnterTypingState(Discord.RequestOptions)
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: EnterTypingState(RequestOptions)
  nameWithType: RestDMChannel.EnterTypingState(RequestOptions)
  fullName: Discord.Rest.RestDMChannel.EnterTypingState(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: EnterTypingState
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 141
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nContinuously broadcasts the &quot;user is typing&quot; message to all users in this channel until the returned\nobject is disposed.\n"
  example: []
  syntax:
    content: public IDisposable EnterTypingState(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.IDisposable
      description: "\nA disposable object that, upon its disposal, will stop the client from broadcasting its typing state in\nthis channel.\n"
    content.vb: Public Function EnterTypingState(options As RequestOptions = Nothing) As IDisposable
  overload: Discord.Rest.RestDMChannel.EnterTypingState*
  implements:
  - Discord.IMessageChannel.EnterTypingState(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestDMChannel.ToString
  commentId: M:Discord.Rest.RestDMChannel.ToString
  id: ToString
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: RestDMChannel.ToString()
  fullName: Discord.Rest.RestDMChannel.ToString()
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ToString
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 150
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a string that represents the Username#Discriminator of the recipient.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nA string that resolves to the Recipient of this channel.\n"
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Discord.Rest.RestDMChannel.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.Rest.RestDMChannel.Discord#IDMChannel#Recipient
  commentId: P:Discord.Rest.RestDMChannel.Discord#IDMChannel#Recipient
  id: Discord#IDMChannel#Recipient
  isEii: true
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: IDMChannel.Recipient
  nameWithType: RestDMChannel.IDMChannel.Recipient
  fullName: Discord.Rest.RestDMChannel.Discord.IDMChannel.Recipient
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IDMChannel.Recipient
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 155
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the recipient of all messages in this channel.\n"
  example: []
  syntax:
    content: IUser IDMChannel.Recipient { get; }
    parameters: []
    return:
      type: Discord.IUser
      description: "\nA user object that represents the other user in this channel.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IDMChannel.Recipient As IUser Implements IDMChannel.Recipient
  overload: Discord.Rest.RestDMChannel.Discord#IDMChannel#Recipient*
  implements:
  - Discord.IDMChannel.Recipient
  nameWithType.vb: RestDMChannel.Discord.IDMChannel.Recipient
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IDMChannel.Recipient
- uid: Discord.Rest.RestDMChannel.Discord#Rest#IRestPrivateChannel#Recipients
  commentId: P:Discord.Rest.RestDMChannel.Discord#Rest#IRestPrivateChannel#Recipients
  id: Discord#Rest#IRestPrivateChannel#Recipients
  isEii: true
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: IRestPrivateChannel.Recipients
  nameWithType: RestDMChannel.IRestPrivateChannel.Recipients
  fullName: Discord.Rest.RestDMChannel.Discord.Rest.IRestPrivateChannel.Recipients
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.Rest.IRestPrivateChannel.Recipients
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 159
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nUsers that can access this channel.\n"
  example: []
  syntax:
    content: IReadOnlyCollection<RestUser> IRestPrivateChannel.Recipients { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestUser}
    content.vb: ReadOnly WriteOnly Property Discord.Rest.IRestPrivateChannel.Recipients As IReadOnlyCollection(Of RestUser) Implements IRestPrivateChannel.Recipients
  overload: Discord.Rest.RestDMChannel.Discord#Rest#IRestPrivateChannel#Recipients*
  implements:
  - Discord.Rest.IRestPrivateChannel.Recipients
  nameWithType.vb: RestDMChannel.Discord.Rest.IRestPrivateChannel.Recipients
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.Rest.IRestPrivateChannel.Recipients
- uid: Discord.Rest.RestDMChannel.Discord#IPrivateChannel#Recipients
  commentId: P:Discord.Rest.RestDMChannel.Discord#IPrivateChannel#Recipients
  id: Discord#IPrivateChannel#Recipients
  isEii: true
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: IPrivateChannel.Recipients
  nameWithType: RestDMChannel.IPrivateChannel.Recipients
  fullName: Discord.Rest.RestDMChannel.Discord.IPrivateChannel.Recipients
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IPrivateChannel.Recipients
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 163
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the users that can access this channel.\n"
  example: []
  syntax:
    content: IReadOnlyCollection<IUser> IPrivateChannel.Recipients { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.IUser}
      description: "\nA read-only collection of users that can access this channel.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IPrivateChannel.Recipients As IReadOnlyCollection(Of IUser) Implements IPrivateChannel.Recipients
  overload: Discord.Rest.RestDMChannel.Discord#IPrivateChannel#Recipients*
  implements:
  - Discord.IPrivateChannel.Recipients
  nameWithType.vb: RestDMChannel.Discord.IPrivateChannel.Recipients
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IPrivateChannel.Recipients
- uid: Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IMessageChannel#GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: IMessageChannel.GetMessageAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: RestDMChannel.IMessageChannel.GetMessageAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.Rest.RestDMChannel.Discord.IMessageChannel.GetMessageAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessageChannel.GetMessageAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 167
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a message from this message channel.\n"
  example: []
  syntax:
    content: Task<IMessage> IMessageChannel.GetMessageAsync(ulong id, CacheMode mode, RequestOptions options)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the message.
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IMessage}
      description: "\nA task that represents an asynchronous get operation for retrieving the message. The task result contains\nthe retrieved message; <code>null</code> if no message is found with the specified identifier.\n"
    content.vb: Function Discord.IMessageChannel.GetMessageAsync(id As ULong, mode As CacheMode, options As RequestOptions) As Task(Of IMessage) Implements IMessageChannel.GetMessageAsync
  overload: Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetMessageAsync*
  implements:
  - Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: RestDMChannel.Discord.IMessageChannel.GetMessageAsync(UInt64, CacheMode, RequestOptions)
  name.vb: Discord.IMessageChannel.GetMessageAsync(UInt64, CacheMode, RequestOptions)
- uid: Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IMessageChannel#GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: IMessageChannel.GetMessagesAsync(Int32, CacheMode, RequestOptions)
  nameWithType: RestDMChannel.IMessageChannel.GetMessagesAsync(Int32, CacheMode, RequestOptions)
  fullName: Discord.Rest.RestDMChannel.Discord.IMessageChannel.GetMessagesAsync(System.Int32, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessageChannel.GetMessagesAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 175
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the last N messages from this message channel.\n"
  remarks: "\n<div class=\"IMPORTANT\"><h5>important</h5><p>\n    The returned collection is an asynchronous enumerable object; one must call \n<xref href=\"Discord.AsyncEnumerableExtensions.FlattenAsync%60%601(System.Collections.Generic.IAsyncEnumerable%7bSystem.Collections.Generic.IEnumerable%7b%60%600%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref> to access the individual messages as a\ncollection.\n</p></div>\n<div class=\"WARNING\"><h5>warning</h5><p>\n    Do not fetch too many messages at once! This may cause unwanted preemptive rate limit or even actual\n    rate limit, causing your bot to freeze!\n</p></div>\nThis method will attempt to fetch the number of messages specified under <code data-dev-comment-type=\"paramref\" class=\"paramref\">limit</code>. The\nlibrary will attempt to split up the requests according to your <code data-dev-comment-type=\"paramref\" class=\"paramref\">limit</code> and \n<xref href=\"Discord.DiscordConfig.MaxMessagesPerBatch\" data-throw-if-not-resolved=\"false\"></xref>. In other words, should the user request 500 messages,\nand the <xref href=\"Discord.DiscordConfig.MaxMessagesPerBatch\" data-throw-if-not-resolved=\"false\"></xref> constant is <code>100</code>, the request will\nbe split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need\nof flattening.\n"
  example: []
  syntax:
    content: IAsyncEnumerable<IReadOnlyCollection<IMessage>> IMessageChannel.GetMessagesAsync(int limit, CacheMode mode, RequestOptions options)
    parameters:
    - id: limit
      type: System.Int32
      description: The numbers of message to be gotten from.
    - id: mode
      type: Discord.CacheMode
      description: >-
        The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from

        cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IMessage}}
      description: "\nPaged collection of messages.\n"
    content.vb: Function Discord.IMessageChannel.GetMessagesAsync(limit As Integer, mode As CacheMode, options As RequestOptions) As IAsyncEnumerable(Of IReadOnlyCollection(Of IMessage)) Implements IMessageChannel.GetMessagesAsync
  overload: Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetMessagesAsync*
  implements:
  - Discord.IMessageChannel.GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: RestDMChannel.Discord.IMessageChannel.GetMessagesAsync(Int32, CacheMode, RequestOptions)
  name.vb: Discord.IMessageChannel.GetMessagesAsync(Int32, CacheMode, RequestOptions)
- uid: Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IMessageChannel#GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: IMessageChannel.GetMessagesAsync(UInt64, Direction, Int32, CacheMode, RequestOptions)
  nameWithType: RestDMChannel.IMessageChannel.GetMessagesAsync(UInt64, Direction, Int32, CacheMode, RequestOptions)
  fullName: Discord.Rest.RestDMChannel.Discord.IMessageChannel.GetMessagesAsync(System.UInt64, Discord.Direction, System.Int32, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessageChannel.GetMessagesAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 183
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of messages in this channel.\n"
  remarks: "\n<div class=\"IMPORTANT\"><h5>important</h5><p>\n    The returned collection is an asynchronous enumerable object; one must call \n<xref href=\"Discord.AsyncEnumerableExtensions.FlattenAsync%60%601(System.Collections.Generic.IAsyncEnumerable%7bSystem.Collections.Generic.IEnumerable%7b%60%600%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref> to access the individual messages as a\ncollection.\n</p></div>\n<div class=\"WARNING\"><h5>warning</h5><p>\n    Do not fetch too many messages at once! This may cause unwanted preemptive rate limit or even actual\n    rate limit, causing your bot to freeze!\n</p></div>\nThis method will attempt to fetch the number of messages specified under <code data-dev-comment-type=\"paramref\" class=\"paramref\">limit</code> around\nthe message <code data-dev-comment-type=\"paramref\" class=\"paramref\">fromMessageId</code> depending on the <code data-dev-comment-type=\"paramref\" class=\"paramref\">dir</code>. The library will\nattempt to split up the requests according to your <code data-dev-comment-type=\"paramref\" class=\"paramref\">limit</code> and \n<xref href=\"Discord.DiscordConfig.MaxMessagesPerBatch\" data-throw-if-not-resolved=\"false\"></xref>. In other words, should the user request 500 messages,\nand the <xref href=\"Discord.DiscordConfig.MaxMessagesPerBatch\" data-throw-if-not-resolved=\"false\"></xref> constant is <code>100</code>, the request will\nbe split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need\nof flattening.\n"
  example: []
  syntax:
    content: IAsyncEnumerable<IReadOnlyCollection<IMessage>> IMessageChannel.GetMessagesAsync(ulong fromMessageId, Direction dir, int limit, CacheMode mode, RequestOptions options)
    parameters:
    - id: fromMessageId
      type: System.UInt64
      description: The ID of the starting message to get the messages from.
    - id: dir
      type: Discord.Direction
      description: The direction of the messages to be gotten from.
    - id: limit
      type: System.Int32
      description: The numbers of message to be gotten from.
    - id: mode
      type: Discord.CacheMode
      description: >-
        The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from

        cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IMessage}}
      description: "\nPaged collection of messages.\n"
    content.vb: Function Discord.IMessageChannel.GetMessagesAsync(fromMessageId As ULong, dir As Direction, limit As Integer, mode As CacheMode, options As RequestOptions) As IAsyncEnumerable(Of IReadOnlyCollection(Of IMessage)) Implements IMessageChannel.GetMessagesAsync
  overload: Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetMessagesAsync*
  implements:
  - Discord.IMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: RestDMChannel.Discord.IMessageChannel.GetMessagesAsync(UInt64, Direction, Int32, CacheMode, RequestOptions)
  name.vb: Discord.IMessageChannel.GetMessagesAsync(UInt64, Direction, Int32, CacheMode, RequestOptions)
- uid: Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IMessageChannel#GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: IMessageChannel.GetMessagesAsync(IMessage, Direction, Int32, CacheMode, RequestOptions)
  nameWithType: RestDMChannel.IMessageChannel.GetMessagesAsync(IMessage, Direction, Int32, CacheMode, RequestOptions)
  fullName: Discord.Rest.RestDMChannel.Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage, Discord.Direction, System.Int32, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessageChannel.GetMessagesAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 191
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of messages in this channel.\n"
  remarks: "\n<div class=\"IMPORTANT\"><h5>important</h5><p>\n    The returned collection is an asynchronous enumerable object; one must call \n<xref href=\"Discord.AsyncEnumerableExtensions.FlattenAsync%60%601(System.Collections.Generic.IAsyncEnumerable%7bSystem.Collections.Generic.IEnumerable%7b%60%600%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref> to access the individual messages as a\ncollection.\n</p></div>\n<div class=\"WARNING\"><h5>warning</h5><p>\n    Do not fetch too many messages at once! This may cause unwanted preemptive rate limit or even actual\n    rate limit, causing your bot to freeze!\n</p></div>\nThis method will attempt to fetch the number of messages specified under <code data-dev-comment-type=\"paramref\" class=\"paramref\">limit</code> around\nthe message <code data-dev-comment-type=\"paramref\" class=\"paramref\">fromMessage</code> depending on the <code data-dev-comment-type=\"paramref\" class=\"paramref\">dir</code>. The library will\nattempt to split up the requests according to your <code data-dev-comment-type=\"paramref\" class=\"paramref\">limit</code> and \n<xref href=\"Discord.DiscordConfig.MaxMessagesPerBatch\" data-throw-if-not-resolved=\"false\"></xref>. In other words, should the user request 500 messages,\nand the <xref href=\"Discord.DiscordConfig.MaxMessagesPerBatch\" data-throw-if-not-resolved=\"false\"></xref> constant is <code>100</code>, the request will\nbe split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need\nof flattening.\n"
  example: []
  syntax:
    content: IAsyncEnumerable<IReadOnlyCollection<IMessage>> IMessageChannel.GetMessagesAsync(IMessage fromMessage, Direction dir, int limit, CacheMode mode, RequestOptions options)
    parameters:
    - id: fromMessage
      type: Discord.IMessage
      description: The starting message to get the messages from.
    - id: dir
      type: Discord.Direction
      description: The direction of the messages to be gotten from.
    - id: limit
      type: System.Int32
      description: The numbers of message to be gotten from.
    - id: mode
      type: Discord.CacheMode
      description: >-
        The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from

        cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IMessage}}
      description: "\nPaged collection of messages.\n"
    content.vb: Function Discord.IMessageChannel.GetMessagesAsync(fromMessage As IMessage, dir As Direction, limit As Integer, mode As CacheMode, options As RequestOptions) As IAsyncEnumerable(Of IReadOnlyCollection(Of IMessage)) Implements IMessageChannel.GetMessagesAsync
  overload: Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetMessagesAsync*
  implements:
  - Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: RestDMChannel.Discord.IMessageChannel.GetMessagesAsync(IMessage, Direction, Int32, CacheMode, RequestOptions)
  name.vb: Discord.IMessageChannel.GetMessagesAsync(IMessage, Direction, Int32, CacheMode, RequestOptions)
- uid: Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetPinnedMessagesAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetPinnedMessagesAsync(Discord.RequestOptions)
  id: Discord#IMessageChannel#GetPinnedMessagesAsync(Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: IMessageChannel.GetPinnedMessagesAsync(RequestOptions)
  nameWithType: RestDMChannel.IMessageChannel.GetPinnedMessagesAsync(RequestOptions)
  fullName: Discord.Rest.RestDMChannel.Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessageChannel.GetPinnedMessagesAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 199
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of pinned messages in this channel.\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<IMessage>> IMessageChannel.GetPinnedMessagesAsync(RequestOptions options)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IMessage}}
      description: "\nA task that represents the asynchronous get operation for retrieving pinned messages in this channel.\nThe task result contains a collection of messages found in the pinned messages.\n"
    content.vb: Function Discord.IMessageChannel.GetPinnedMessagesAsync(options As RequestOptions) As Task(Of IReadOnlyCollection(Of IMessage)) Implements IMessageChannel.GetPinnedMessagesAsync
  overload: Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetPinnedMessagesAsync*
  implements:
  - Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  nameWithType.vb: RestDMChannel.Discord.IMessageChannel.GetPinnedMessagesAsync(RequestOptions)
  name.vb: Discord.IMessageChannel.GetPinnedMessagesAsync(RequestOptions)
- uid: Discord.Rest.RestDMChannel.Discord#IMessageChannel#SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.Rest.RestDMChannel.Discord#IMessageChannel#SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  id: Discord#IMessageChannel#SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  isEii: true
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: IMessageChannel.SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: RestDMChannel.IMessageChannel.SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.Rest.RestDMChannel.Discord.IMessageChannel.SendFileAsync(System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessageChannel.SendFileAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 202
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nSends a file to this message channel with an optional caption.\n"
  remarks: "\nThis method sends a file as if you are uploading an attachment directly from your Discord client.\n<div class=\"NOTE\"><h5>note</h5><p>\n    If you wish to upload an image and have it embedded in a <xref href=\"Discord.EmbedType.Rich\" data-throw-if-not-resolved=\"false\"></xref> embed,\n    you may upload the file and refer to the file with &quot;attachment://filename.ext&quot; in the\n<xref href=\"Discord.EmbedBuilder.ImageUrl\" data-throw-if-not-resolved=\"false\"></xref>. See the example section for its usage.\n</p></div>\n"
  example: []
  syntax:
    content: Task<IUserMessage> IMessageChannel.SendFileAsync(string filePath, string text, bool isTTS, Embed embed, RequestOptions options, bool isSpoiler)
    parameters:
    - id: filePath
      type: System.String
      description: The file path of the file.
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    - id: isSpoiler
      type: System.Boolean
      description: Whether the message attachment should be hidden as a spoiler.
    return:
      type: System.Threading.Tasks.Task{Discord.IUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Function Discord.IMessageChannel.SendFileAsync(filePath As String, text As String, isTTS As Boolean, embed As Embed, options As RequestOptions, isSpoiler As Boolean) As Task(Of IUserMessage) Implements IMessageChannel.SendFileAsync
  overload: Discord.Rest.RestDMChannel.Discord#IMessageChannel#SendFileAsync*
  implements:
  - Discord.IMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  nameWithType.vb: RestDMChannel.Discord.IMessageChannel.SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  name.vb: Discord.IMessageChannel.SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
- uid: Discord.Rest.RestDMChannel.Discord#IMessageChannel#SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.Rest.RestDMChannel.Discord#IMessageChannel#SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  id: Discord#IMessageChannel#SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  isEii: true
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: IMessageChannel.SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: RestDMChannel.IMessageChannel.SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.Rest.RestDMChannel.Discord.IMessageChannel.SendFileAsync(System.IO.Stream, System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessageChannel.SendFileAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 205
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nSends a file to this message channel with an optional caption.\n"
  remarks: "\nThis method sends a file as if you are uploading an attachment directly from your Discord client.\n<div class=\"NOTE\"><h5>note</h5><p>\n    If you wish to upload an image and have it embedded in a <xref href=\"Discord.EmbedType.Rich\" data-throw-if-not-resolved=\"false\"></xref> embed,\n    you may upload the file and refer to the file with &quot;attachment://filename.ext&quot; in the\n<xref href=\"Discord.EmbedBuilder.ImageUrl\" data-throw-if-not-resolved=\"false\"></xref>. See the example section for its usage.\n</p></div>\n"
  example: []
  syntax:
    content: Task<IUserMessage> IMessageChannel.SendFileAsync(Stream stream, string filename, string text, bool isTTS, Embed embed, RequestOptions options, bool isSpoiler)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref> of the file to be sent.
    - id: filename
      type: System.String
      description: The name of the attachment.
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    - id: isSpoiler
      type: System.Boolean
      description: Whether the message attachment should be hidden as a spoiler.
    return:
      type: System.Threading.Tasks.Task{Discord.IUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Function Discord.IMessageChannel.SendFileAsync(stream As Stream, filename As String, text As String, isTTS As Boolean, embed As Embed, options As RequestOptions, isSpoiler As Boolean) As Task(Of IUserMessage) Implements IMessageChannel.SendFileAsync
  overload: Discord.Rest.RestDMChannel.Discord#IMessageChannel#SendFileAsync*
  implements:
  - Discord.IMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  nameWithType.vb: RestDMChannel.Discord.IMessageChannel.SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  name.vb: Discord.IMessageChannel.SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
- uid: Discord.Rest.RestDMChannel.Discord#IMessageChannel#SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestDMChannel.Discord#IMessageChannel#SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  id: Discord#IMessageChannel#SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: IMessageChannel.SendMessageAsync(String, Boolean, Embed, RequestOptions)
  nameWithType: RestDMChannel.IMessageChannel.SendMessageAsync(String, Boolean, Embed, RequestOptions)
  fullName: Discord.Rest.RestDMChannel.Discord.IMessageChannel.SendMessageAsync(System.String, System.Boolean, Discord.Embed, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessageChannel.SendMessageAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 208
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nSends a message to this message channel.\n"
  example: []
  syntax:
    content: Task<IUserMessage> IMessageChannel.SendMessageAsync(string text, bool isTTS, Embed embed, RequestOptions options)
    parameters:
    - id: text
      type: System.String
      description: The message to be sent.
    - id: isTTS
      type: System.Boolean
      description: Determines whether the message should be read aloud by Discord or not.
    - id: embed
      type: Discord.Embed
      description: The <xref href="Discord.EmbedType.Rich" data-throw-if-not-resolved="false"></xref> <xref href="Discord.Embed" data-throw-if-not-resolved="false"></xref> to be sent.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IUserMessage}
      description: "\nA task that represents an asynchronous send operation for delivering the message. The task result\ncontains the sent message.\n"
    content.vb: Function Discord.IMessageChannel.SendMessageAsync(text As String, isTTS As Boolean, embed As Embed, options As RequestOptions) As Task(Of IUserMessage) Implements IMessageChannel.SendMessageAsync
  overload: Discord.Rest.RestDMChannel.Discord#IMessageChannel#SendMessageAsync*
  implements:
  - Discord.IMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  nameWithType.vb: RestDMChannel.Discord.IMessageChannel.SendMessageAsync(String, Boolean, Embed, RequestOptions)
  name.vb: Discord.IMessageChannel.SendMessageAsync(String, Boolean, Embed, RequestOptions)
- uid: Discord.Rest.RestDMChannel.Discord#IChannel#Name
  commentId: P:Discord.Rest.RestDMChannel.Discord#IChannel#Name
  id: Discord#IChannel#Name
  isEii: true
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: IChannel.Name
  nameWithType: RestDMChannel.IChannel.Name
  fullName: Discord.Rest.RestDMChannel.Discord.IChannel.Name
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IChannel.Name
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 213
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the name of this channel.\n"
  example: []
  syntax:
    content: string IChannel.Name { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA string containing the name of this channel.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IChannel.Name As String Implements IChannel.Name
  overload: Discord.Rest.RestDMChannel.Discord#IChannel#Name*
  implements:
  - Discord.IChannel.Name
  nameWithType.vb: RestDMChannel.Discord.IChannel.Name
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IChannel.Name
- uid: Discord.Rest.RestDMChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestDMChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: RestDMChannel.IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.Rest.RestDMChannel.Discord.IChannel.GetUserAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IChannel.GetUserAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 216
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a user in this channel.\n"
  example: []
  syntax:
    content: Task<IUser> IChannel.GetUserAsync(ulong id, CacheMode mode, RequestOptions options)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the user (e.g. <code>168693960628371456</code>).
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IUser}
      description: "\nA task that represents the asynchronous get operation. The task result contains a user object that\nrepresents the found user; <code>null</code> if none is found.\n"
    content.vb: Function Discord.IChannel.GetUserAsync(id As ULong, mode As CacheMode, options As RequestOptions) As Task(Of IUser) Implements IChannel.GetUserAsync
  overload: Discord.Rest.RestDMChannel.Discord#IChannel#GetUserAsync*
  implements:
  - Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: RestDMChannel.Discord.IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  name.vb: Discord.IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
- uid: Discord.Rest.RestDMChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestDMChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestDMChannel
  langs:
  - csharp
  - vb
  name: IChannel.GetUsersAsync(CacheMode, RequestOptions)
  nameWithType: RestDMChannel.IChannel.GetUsersAsync(CacheMode, RequestOptions)
  fullName: Discord.Rest.RestDMChannel.Discord.IChannel.GetUsersAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IChannel.GetUsersAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestDMChannel.cs
    startLine: 219
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of users that are able to view the channel or are currently in this channel.\n"
  remarks: "\n<div class=\"IMPORTANT\"><h5>important</h5><p>\n    The returned collection is an asynchronous enumerable object; one must call \n<xref href=\"Discord.AsyncEnumerableExtensions.FlattenAsync%60%601(System.Collections.Generic.IAsyncEnumerable%7bSystem.Collections.Generic.IEnumerable%7b%60%600%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref> to access the individual messages as a\ncollection.\n</p></div>\nThis method will attempt to fetch all users that is able to view this channel or is currently in this channel.\nThe library will attempt to split up the requests according to and <xref href=\"Discord.DiscordConfig.MaxUsersPerBatch\" data-throw-if-not-resolved=\"false\"></xref>.\nIn other words, if there are 3000 users, and the <xref href=\"Discord.DiscordConfig.MaxUsersPerBatch\" data-throw-if-not-resolved=\"false\"></xref> constant\nis <code>1000</code>, the request will be split into 3 individual requests; thus returning 53individual asynchronous\nresponses, hence the need of flattening.\n"
  example: []
  syntax:
    content: IAsyncEnumerable<IReadOnlyCollection<IUser>> IChannel.GetUsersAsync(CacheMode mode, RequestOptions options)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IUser}}
      description: "\nPaged collection of users.\n"
    content.vb: Function Discord.IChannel.GetUsersAsync(mode As CacheMode, options As RequestOptions) As IAsyncEnumerable(Of IReadOnlyCollection(Of IUser)) Implements IChannel.GetUsersAsync
  overload: Discord.Rest.RestDMChannel.Discord#IChannel#GetUsersAsync*
  implements:
  - Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: RestDMChannel.Discord.IChannel.GetUsersAsync(CacheMode, RequestOptions)
  name.vb: Discord.IChannel.GetUsersAsync(CacheMode, RequestOptions)
references:
- uid: Discord.Rest
  commentId: N:Discord.Rest
  name: Discord.Rest
  nameWithType: Discord.Rest
  fullName: Discord.Rest
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Rest.RestEntity{System.UInt64}
  commentId: T:Discord.Rest.RestEntity{System.UInt64}
  parent: Discord.Rest
  definition: Discord.Rest.RestEntity`1
  name: RestEntity<UInt64>
  nameWithType: RestEntity<UInt64>
  fullName: Discord.Rest.RestEntity<System.UInt64>
  nameWithType.vb: RestEntity(Of UInt64)
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64)
  name.vb: RestEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestChannel
  commentId: T:Discord.Rest.RestChannel
  parent: Discord.Rest
  name: RestChannel
  nameWithType: RestChannel
  fullName: Discord.Rest.RestChannel
- uid: Discord.IUpdateable
  commentId: T:Discord.IUpdateable
  parent: Discord
  name: IUpdateable
  nameWithType: IUpdateable
  fullName: Discord.IUpdateable
- uid: Discord.IDMChannel
  commentId: T:Discord.IDMChannel
  parent: Discord
  name: IDMChannel
  nameWithType: IDMChannel
  fullName: Discord.IDMChannel
- uid: Discord.Rest.IRestPrivateChannel
  commentId: T:Discord.Rest.IRestPrivateChannel
  parent: Discord.Rest
  name: IRestPrivateChannel
  nameWithType: IRestPrivateChannel
  fullName: Discord.Rest.IRestPrivateChannel
- uid: Discord.IPrivateChannel
  commentId: T:Discord.IPrivateChannel
  parent: Discord
  name: IPrivateChannel
  nameWithType: IPrivateChannel
  fullName: Discord.IPrivateChannel
- uid: Discord.Rest.IRestMessageChannel
  commentId: T:Discord.Rest.IRestMessageChannel
  parent: Discord.Rest
  name: IRestMessageChannel
  nameWithType: IRestMessageChannel
  fullName: Discord.Rest.IRestMessageChannel
- uid: Discord.IMessageChannel
  commentId: T:Discord.IMessageChannel
  parent: Discord
  name: IMessageChannel
  nameWithType: IMessageChannel
  fullName: Discord.IMessageChannel
- uid: Discord.IChannel
  commentId: T:Discord.IChannel
  parent: Discord
  name: IChannel
  nameWithType: IChannel
  fullName: Discord.IChannel
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestChannel.CreatedAt
  commentId: P:Discord.Rest.RestChannel.CreatedAt
  parent: Discord.Rest.RestChannel
  name: CreatedAt
  nameWithType: RestChannel.CreatedAt
  fullName: Discord.Rest.RestChannel.CreatedAt
- uid: Discord.Rest.RestEntity{System.UInt64}.Id
  commentId: P:Discord.Rest.RestEntity{System.UInt64}.Id
  parent: Discord.Rest.RestEntity{System.UInt64}
  definition: Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<UInt64>.Id
  fullName: Discord.Rest.RestEntity<System.UInt64>.Id
  nameWithType.vb: RestEntity(Of UInt64).Id
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64).Id
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Rest.RestEntity`1
  commentId: T:Discord.Rest.RestEntity`1
  name: RestEntity<T>
  nameWithType: RestEntity<T>
  fullName: Discord.Rest.RestEntity<T>
  nameWithType.vb: RestEntity(Of T)
  fullName.vb: Discord.Rest.RestEntity(Of T)
  name.vb: RestEntity(Of T)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestEntity`1.Id
  commentId: P:Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<T>.Id
  fullName: Discord.Rest.RestEntity<T>.Id
  nameWithType.vb: RestEntity(Of T).Id
  fullName.vb: Discord.Rest.RestEntity(Of T).Id
- uid: Discord.Rest.RestDMChannel.CurrentUser*
  commentId: Overload:Discord.Rest.RestDMChannel.CurrentUser
  name: CurrentUser
  nameWithType: RestDMChannel.CurrentUser
  fullName: Discord.Rest.RestDMChannel.CurrentUser
- uid: Discord.Rest.RestUser
  commentId: T:Discord.Rest.RestUser
  parent: Discord.Rest
  name: RestUser
  nameWithType: RestUser
  fullName: Discord.Rest.RestUser
- uid: Discord.Rest.RestDMChannel.Recipient*
  commentId: Overload:Discord.Rest.RestDMChannel.Recipient
  name: Recipient
  nameWithType: RestDMChannel.Recipient
  fullName: Discord.Rest.RestDMChannel.Recipient
- uid: Discord.Rest.RestDMChannel.Users*
  commentId: Overload:Discord.Rest.RestDMChannel.Users
  name: Users
  nameWithType: RestDMChannel.Users
  fullName: Discord.Rest.RestDMChannel.Users
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestUser}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestUser}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<RestUser>
  nameWithType: IReadOnlyCollection<RestUser>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.Rest.RestUser>
  nameWithType.vb: IReadOnlyCollection(Of RestUser)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.Rest.RestUser)
  name.vb: IReadOnlyCollection(Of RestUser)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestUser
    name: RestUser
    nameWithType: RestUser
    fullName: Discord.Rest.RestUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestUser
    name: RestUser
    nameWithType: RestUser
    fullName: Discord.Rest.RestUser
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Discord.Rest.RestChannel.UpdateAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestChannel.UpdateAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestChannel
  name: UpdateAsync(RequestOptions)
  nameWithType: RestChannel.UpdateAsync(RequestOptions)
  fullName: Discord.Rest.RestChannel.UpdateAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestChannel.UpdateAsync(Discord.RequestOptions)
    name: UpdateAsync
    nameWithType: RestChannel.UpdateAsync
    fullName: Discord.Rest.RestChannel.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestChannel.UpdateAsync(Discord.RequestOptions)
    name: UpdateAsync
    nameWithType: RestChannel.UpdateAsync
    fullName: Discord.Rest.RestChannel.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestDMChannel.UpdateAsync*
  commentId: Overload:Discord.Rest.RestDMChannel.UpdateAsync
  name: UpdateAsync
  nameWithType: RestDMChannel.UpdateAsync
  fullName: Discord.Rest.RestDMChannel.UpdateAsync
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Discord.Rest.RestDMChannel.CloseAsync*
  commentId: Overload:Discord.Rest.RestDMChannel.CloseAsync
  name: CloseAsync
  nameWithType: RestDMChannel.CloseAsync
  fullName: Discord.Rest.RestDMChannel.CloseAsync
- uid: Discord.IDMChannel.CloseAsync(Discord.RequestOptions)
  commentId: M:Discord.IDMChannel.CloseAsync(Discord.RequestOptions)
  parent: Discord.IDMChannel
  name: CloseAsync(RequestOptions)
  nameWithType: IDMChannel.CloseAsync(RequestOptions)
  fullName: Discord.IDMChannel.CloseAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IDMChannel.CloseAsync(Discord.RequestOptions)
    name: CloseAsync
    nameWithType: IDMChannel.CloseAsync
    fullName: Discord.IDMChannel.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IDMChannel.CloseAsync(Discord.RequestOptions)
    name: CloseAsync
    nameWithType: IDMChannel.CloseAsync
    fullName: Discord.IDMChannel.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestDMChannel.GetUser*
  commentId: Overload:Discord.Rest.RestDMChannel.GetUser
  name: GetUser
  nameWithType: RestDMChannel.GetUser
  fullName: Discord.Rest.RestDMChannel.GetUser
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Discord.Rest.RestDMChannel.GetMessageAsync*
  commentId: Overload:Discord.Rest.RestDMChannel.GetMessageAsync
  name: GetMessageAsync
  nameWithType: RestDMChannel.GetMessageAsync
  fullName: Discord.Rest.RestDMChannel.GetMessageAsync
- uid: Discord.Rest.IRestMessageChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.Rest.IRestMessageChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.Rest.IRestMessageChannel
  isExternal: true
  name: GetMessageAsync(UInt64, RequestOptions)
  nameWithType: IRestMessageChannel.GetMessageAsync(UInt64, RequestOptions)
  fullName: Discord.Rest.IRestMessageChannel.GetMessageAsync(System.UInt64, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.IRestMessageChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
    name: GetMessageAsync
    nameWithType: IRestMessageChannel.GetMessageAsync
    fullName: Discord.Rest.IRestMessageChannel.GetMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.IRestMessageChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)
    name: GetMessageAsync
    nameWithType: IRestMessageChannel.GetMessageAsync
    fullName: Discord.Rest.IRestMessageChannel.GetMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.Rest.RestMessage}
  commentId: T:System.Threading.Tasks.Task{Discord.Rest.RestMessage}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RestMessage>
  nameWithType: Task<RestMessage>
  fullName: System.Threading.Tasks.Task<Discord.Rest.RestMessage>
  nameWithType.vb: Task(Of RestMessage)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.Rest.RestMessage)
  name.vb: Task(Of RestMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestMessage
    name: RestMessage
    nameWithType: RestMessage
    fullName: Discord.Rest.RestMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestMessage
    name: RestMessage
    nameWithType: RestMessage
    fullName: Discord.Rest.RestMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestDMChannel.GetMessagesAsync*
  commentId: Overload:Discord.Rest.RestDMChannel.GetMessagesAsync
  name: GetMessagesAsync
  nameWithType: RestDMChannel.GetMessagesAsync
  fullName: Discord.Rest.RestDMChannel.GetMessagesAsync
- uid: Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
  commentId: M:Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
  parent: Discord.Rest.IRestMessageChannel
  isExternal: true
  name: GetMessagesAsync(Int32, RequestOptions)
  nameWithType: IRestMessageChannel.GetMessagesAsync(Int32, RequestOptions)
  fullName: Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.Int32, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IRestMessageChannel.GetMessagesAsync
    fullName: Discord.Rest.IRestMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IRestMessageChannel.GetMessagesAsync
    fullName: Discord.Rest.IRestMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestMessage}}
  commentId: T:System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestMessage}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IAsyncEnumerable`1
  name: IAsyncEnumerable<IReadOnlyCollection<RestMessage>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<RestMessage>>
  fullName: System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyCollection<Discord.Rest.RestMessage>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of RestMessage))
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.Rest.RestMessage))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of RestMessage))
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestMessage
    name: RestMessage
    nameWithType: RestMessage
    fullName: Discord.Rest.RestMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestMessage
    name: RestMessage
    nameWithType: RestMessage
    fullName: Discord.Rest.RestMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IAsyncEnumerable`1
  commentId: T:System.Collections.Generic.IAsyncEnumerable`1
  isExternal: true
  name: IAsyncEnumerable<T>
  nameWithType: IAsyncEnumerable<T>
  fullName: System.Collections.Generic.IAsyncEnumerable<T>
  nameWithType.vb: IAsyncEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of T)
  name.vb: IAsyncEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
  commentId: M:Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
  parent: Discord.Rest.IRestMessageChannel
  isExternal: true
  name: GetMessagesAsync(UInt64, Direction, Int32, RequestOptions)
  nameWithType: IRestMessageChannel.GetMessagesAsync(UInt64, Direction, Int32, RequestOptions)
  fullName: Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.UInt64, Discord.Direction, System.Int32, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IRestMessageChannel.GetMessagesAsync
    fullName: Discord.Rest.IRestMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IRestMessageChannel.GetMessagesAsync
    fullName: Discord.Rest.IRestMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Direction
  commentId: T:Discord.Direction
  parent: Discord
  name: Direction
  nameWithType: Direction
  fullName: Discord.Direction
- uid: Discord.Rest.IRestMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
  commentId: M:Discord.Rest.IRestMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
  parent: Discord.Rest.IRestMessageChannel
  isExternal: true
  name: GetMessagesAsync(IMessage, Direction, Int32, RequestOptions)
  nameWithType: IRestMessageChannel.GetMessagesAsync(IMessage, Direction, Int32, RequestOptions)
  fullName: Discord.Rest.IRestMessageChannel.GetMessagesAsync(Discord.IMessage, Discord.Direction, System.Int32, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.IRestMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IRestMessageChannel.GetMessagesAsync
    fullName: Discord.Rest.IRestMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.IRestMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IRestMessageChannel.GetMessagesAsync
    fullName: Discord.Rest.IRestMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessage
  commentId: T:Discord.IMessage
  parent: Discord
  name: IMessage
  nameWithType: IMessage
  fullName: Discord.IMessage
- uid: Discord.Rest.RestDMChannel.GetPinnedMessagesAsync*
  commentId: Overload:Discord.Rest.RestDMChannel.GetPinnedMessagesAsync
  name: GetPinnedMessagesAsync
  nameWithType: RestDMChannel.GetPinnedMessagesAsync
  fullName: Discord.Rest.RestDMChannel.GetPinnedMessagesAsync
- uid: Discord.Rest.IRestMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.IRestMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  parent: Discord.Rest.IRestMessageChannel
  name: GetPinnedMessagesAsync(RequestOptions)
  nameWithType: IRestMessageChannel.GetPinnedMessagesAsync(RequestOptions)
  fullName: Discord.Rest.IRestMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.IRestMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
    name: GetPinnedMessagesAsync
    nameWithType: IRestMessageChannel.GetPinnedMessagesAsync
    fullName: Discord.Rest.IRestMessageChannel.GetPinnedMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.IRestMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
    name: GetPinnedMessagesAsync
    nameWithType: IRestMessageChannel.GetPinnedMessagesAsync
    fullName: Discord.Rest.IRestMessageChannel.GetPinnedMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestMessage}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestMessage}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<RestMessage>>
  nameWithType: Task<IReadOnlyCollection<RestMessage>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.Rest.RestMessage>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestMessage))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.Rest.RestMessage))
  name.vb: Task(Of IReadOnlyCollection(Of RestMessage))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestMessage
    name: RestMessage
    nameWithType: RestMessage
    fullName: Discord.Rest.RestMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestMessage
    name: RestMessage
    nameWithType: RestMessage
    fullName: Discord.Rest.RestMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.DiscordConfig.MaxMessageSize
  commentId: F:Discord.DiscordConfig.MaxMessageSize
  parent: Discord.DiscordConfig
  name: MaxMessageSize
  nameWithType: DiscordConfig.MaxMessageSize
  fullName: Discord.DiscordConfig.MaxMessageSize
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
- uid: Discord.Rest.RestDMChannel.SendMessageAsync*
  commentId: Overload:Discord.Rest.RestDMChannel.SendMessageAsync
  name: SendMessageAsync
  nameWithType: RestDMChannel.SendMessageAsync
  fullName: Discord.Rest.RestDMChannel.SendMessageAsync
- uid: Discord.Rest.IRestMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  commentId: M:Discord.Rest.IRestMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  parent: Discord.Rest.IRestMessageChannel
  isExternal: true
  name: SendMessageAsync(String, Boolean, Embed, RequestOptions)
  nameWithType: IRestMessageChannel.SendMessageAsync(String, Boolean, Embed, RequestOptions)
  fullName: Discord.Rest.IRestMessageChannel.SendMessageAsync(System.String, System.Boolean, Discord.Embed, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.IRestMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
    name: SendMessageAsync
    nameWithType: IRestMessageChannel.SendMessageAsync
    fullName: Discord.Rest.IRestMessageChannel.SendMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.IRestMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
    name: SendMessageAsync
    nameWithType: IRestMessageChannel.SendMessageAsync
    fullName: Discord.Rest.IRestMessageChannel.SendMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.Embed
  commentId: T:Discord.Embed
  parent: Discord
  name: Embed
  nameWithType: Embed
  fullName: Discord.Embed
- uid: System.Threading.Tasks.Task{Discord.Rest.RestUserMessage}
  commentId: T:System.Threading.Tasks.Task{Discord.Rest.RestUserMessage}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RestUserMessage>
  nameWithType: Task<RestUserMessage>
  fullName: System.Threading.Tasks.Task<Discord.Rest.RestUserMessage>
  nameWithType.vb: Task(Of RestUserMessage)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.Rest.RestUserMessage)
  name.vb: Task(Of RestUserMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestUserMessage
    name: RestUserMessage
    nameWithType: RestUserMessage
    fullName: Discord.Rest.RestUserMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestUserMessage
    name: RestUserMessage
    nameWithType: RestUserMessage
    fullName: Discord.Rest.RestUserMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.DiscordConfig
  commentId: T:Discord.DiscordConfig
  parent: Discord
  name: DiscordConfig
  nameWithType: DiscordConfig
  fullName: Discord.DiscordConfig
- uid: System.IO.Path.GetInvalidPathChars
  commentId: M:System.IO.Path.GetInvalidPathChars
  isExternal: true
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: System.IO.PathTooLongException
  commentId: T:System.IO.PathTooLongException
  isExternal: true
- uid: System.IO.DirectoryNotFoundException
  commentId: T:System.IO.DirectoryNotFoundException
  isExternal: true
- uid: System.UnauthorizedAccessException
  commentId: T:System.UnauthorizedAccessException
  isExternal: true
- uid: System.IO.FileNotFoundException
  commentId: T:System.IO.FileNotFoundException
  isExternal: true
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  isExternal: true
- uid: System.IO.IOException
  commentId: T:System.IO.IOException
  isExternal: true
- uid: Discord.Rest.RestDMChannel.SendFileAsync*
  commentId: Overload:Discord.Rest.RestDMChannel.SendFileAsync
  name: SendFileAsync
  nameWithType: RestDMChannel.SendFileAsync
  fullName: Discord.Rest.RestDMChannel.SendFileAsync
- uid: Discord.Rest.IRestMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.Rest.IRestMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.Rest.IRestMessageChannel
  isExternal: true
  name: SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: IRestMessageChannel.SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.Rest.IRestMessageChannel.SendFileAsync(System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  spec.csharp:
  - uid: Discord.Rest.IRestMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: IRestMessageChannel.SendFileAsync
    fullName: Discord.Rest.IRestMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.IRestMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: IRestMessageChannel.SendFileAsync
    fullName: Discord.Rest.IRestMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.IRestMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.Rest.IRestMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.Rest.IRestMessageChannel
  isExternal: true
  name: SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: IRestMessageChannel.SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.Rest.IRestMessageChannel.SendFileAsync(System.IO.Stream, System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  spec.csharp:
  - uid: Discord.Rest.IRestMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: IRestMessageChannel.SendFileAsync
    fullName: Discord.Rest.IRestMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.IRestMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: IRestMessageChannel.SendFileAsync
    fullName: Discord.Rest.IRestMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Discord.Rest.RestDMChannel.DeleteMessageAsync*
  commentId: Overload:Discord.Rest.RestDMChannel.DeleteMessageAsync
  name: DeleteMessageAsync
  nameWithType: RestDMChannel.DeleteMessageAsync
  fullName: Discord.Rest.RestDMChannel.DeleteMessageAsync
- uid: Discord.IMessageChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  isExternal: true
  name: DeleteMessageAsync(UInt64, RequestOptions)
  nameWithType: IMessageChannel.DeleteMessageAsync(UInt64, RequestOptions)
  fullName: Discord.IMessageChannel.DeleteMessageAsync(System.UInt64, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
    name: DeleteMessageAsync
    nameWithType: IMessageChannel.DeleteMessageAsync
    fullName: Discord.IMessageChannel.DeleteMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)
    name: DeleteMessageAsync
    nameWithType: IMessageChannel.DeleteMessageAsync
    fullName: Discord.IMessageChannel.DeleteMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessageChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  name: DeleteMessageAsync(IMessage, RequestOptions)
  nameWithType: IMessageChannel.DeleteMessageAsync(IMessage, RequestOptions)
  fullName: Discord.IMessageChannel.DeleteMessageAsync(Discord.IMessage, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
    name: DeleteMessageAsync
    nameWithType: IMessageChannel.DeleteMessageAsync
    fullName: Discord.IMessageChannel.DeleteMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)
    name: DeleteMessageAsync
    nameWithType: IMessageChannel.DeleteMessageAsync
    fullName: Discord.IMessageChannel.DeleteMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestDMChannel.TriggerTypingAsync*
  commentId: Overload:Discord.Rest.RestDMChannel.TriggerTypingAsync
  name: TriggerTypingAsync
  nameWithType: RestDMChannel.TriggerTypingAsync
  fullName: Discord.Rest.RestDMChannel.TriggerTypingAsync
- uid: Discord.IMessageChannel.TriggerTypingAsync(Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.TriggerTypingAsync(Discord.RequestOptions)
  parent: Discord.IMessageChannel
  name: TriggerTypingAsync(RequestOptions)
  nameWithType: IMessageChannel.TriggerTypingAsync(RequestOptions)
  fullName: Discord.IMessageChannel.TriggerTypingAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.TriggerTypingAsync(Discord.RequestOptions)
    name: TriggerTypingAsync
    nameWithType: IMessageChannel.TriggerTypingAsync
    fullName: Discord.IMessageChannel.TriggerTypingAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.TriggerTypingAsync(Discord.RequestOptions)
    name: TriggerTypingAsync
    nameWithType: IMessageChannel.TriggerTypingAsync
    fullName: Discord.IMessageChannel.TriggerTypingAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestDMChannel.EnterTypingState*
  commentId: Overload:Discord.Rest.RestDMChannel.EnterTypingState
  name: EnterTypingState
  nameWithType: RestDMChannel.EnterTypingState
  fullName: Discord.Rest.RestDMChannel.EnterTypingState
- uid: Discord.IMessageChannel.EnterTypingState(Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.EnterTypingState(Discord.RequestOptions)
  parent: Discord.IMessageChannel
  name: EnterTypingState(RequestOptions)
  nameWithType: IMessageChannel.EnterTypingState(RequestOptions)
  fullName: Discord.IMessageChannel.EnterTypingState(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.EnterTypingState(Discord.RequestOptions)
    name: EnterTypingState
    nameWithType: IMessageChannel.EnterTypingState
    fullName: Discord.IMessageChannel.EnterTypingState
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.EnterTypingState(Discord.RequestOptions)
    name: EnterTypingState
    nameWithType: IMessageChannel.EnterTypingState
    fullName: Discord.IMessageChannel.EnterTypingState
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestDMChannel.ToString*
  commentId: Overload:Discord.Rest.RestDMChannel.ToString
  name: ToString
  nameWithType: RestDMChannel.ToString
  fullName: Discord.Rest.RestDMChannel.ToString
- uid: Discord.Rest.RestDMChannel.Discord#IDMChannel#Recipient*
  commentId: Overload:Discord.Rest.RestDMChannel.Discord#IDMChannel#Recipient
  name: IDMChannel.Recipient
  nameWithType: RestDMChannel.IDMChannel.Recipient
  fullName: Discord.Rest.RestDMChannel.Discord.IDMChannel.Recipient
  nameWithType.vb: RestDMChannel.Discord.IDMChannel.Recipient
  name.vb: Discord.IDMChannel.Recipient
- uid: Discord.IDMChannel.Recipient
  commentId: P:Discord.IDMChannel.Recipient
  parent: Discord.IDMChannel
  name: Recipient
  nameWithType: IDMChannel.Recipient
  fullName: Discord.IDMChannel.Recipient
- uid: Discord.IUser
  commentId: T:Discord.IUser
  parent: Discord
  name: IUser
  nameWithType: IUser
  fullName: Discord.IUser
- uid: Discord.Rest.RestDMChannel.Discord#Rest#IRestPrivateChannel#Recipients*
  commentId: Overload:Discord.Rest.RestDMChannel.Discord#Rest#IRestPrivateChannel#Recipients
  name: IRestPrivateChannel.Recipients
  nameWithType: RestDMChannel.IRestPrivateChannel.Recipients
  fullName: Discord.Rest.RestDMChannel.Discord.Rest.IRestPrivateChannel.Recipients
  nameWithType.vb: RestDMChannel.Discord.Rest.IRestPrivateChannel.Recipients
  name.vb: Discord.Rest.IRestPrivateChannel.Recipients
- uid: Discord.Rest.IRestPrivateChannel.Recipients
  commentId: P:Discord.Rest.IRestPrivateChannel.Recipients
  parent: Discord.Rest.IRestPrivateChannel
  name: Recipients
  nameWithType: IRestPrivateChannel.Recipients
  fullName: Discord.Rest.IRestPrivateChannel.Recipients
- uid: Discord.Rest.RestDMChannel.Discord#IPrivateChannel#Recipients*
  commentId: Overload:Discord.Rest.RestDMChannel.Discord#IPrivateChannel#Recipients
  name: IPrivateChannel.Recipients
  nameWithType: RestDMChannel.IPrivateChannel.Recipients
  fullName: Discord.Rest.RestDMChannel.Discord.IPrivateChannel.Recipients
  nameWithType.vb: RestDMChannel.Discord.IPrivateChannel.Recipients
  name.vb: Discord.IPrivateChannel.Recipients
- uid: Discord.IPrivateChannel.Recipients
  commentId: P:Discord.IPrivateChannel.Recipients
  parent: Discord.IPrivateChannel
  name: Recipients
  nameWithType: IPrivateChannel.Recipients
  fullName: Discord.IPrivateChannel.Recipients
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.IUser}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.IUser}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<IUser>
  nameWithType: IReadOnlyCollection<IUser>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.IUser>
  nameWithType.vb: IReadOnlyCollection(Of IUser)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.IUser)
  name.vb: IReadOnlyCollection(Of IUser)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetMessageAsync*
  commentId: Overload:Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetMessageAsync
  name: IMessageChannel.GetMessageAsync
  nameWithType: RestDMChannel.IMessageChannel.GetMessageAsync
  fullName: Discord.Rest.RestDMChannel.Discord.IMessageChannel.GetMessageAsync
  nameWithType.vb: RestDMChannel.Discord.IMessageChannel.GetMessageAsync
  name.vb: Discord.IMessageChannel.GetMessageAsync
- uid: Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  isExternal: true
  name: GetMessageAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: IMessageChannel.GetMessageAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.IMessageChannel.GetMessageAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessageAsync
    nameWithType: IMessageChannel.GetMessageAsync
    fullName: Discord.IMessageChannel.GetMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessageAsync
    nameWithType: IMessageChannel.GetMessageAsync
    fullName: Discord.IMessageChannel.GetMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.CacheMode
  commentId: T:Discord.CacheMode
  parent: Discord
  name: CacheMode
  nameWithType: CacheMode
  fullName: Discord.CacheMode
- uid: System.Threading.Tasks.Task{Discord.IMessage}
  commentId: T:System.Threading.Tasks.Task{Discord.IMessage}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IMessage>
  nameWithType: Task<IMessage>
  fullName: System.Threading.Tasks.Task<Discord.IMessage>
  nameWithType.vb: Task(Of IMessage)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IMessage)
  name.vb: Task(Of IMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetMessagesAsync*
  commentId: Overload:Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetMessagesAsync
  name: IMessageChannel.GetMessagesAsync
  nameWithType: RestDMChannel.IMessageChannel.GetMessagesAsync
  fullName: Discord.Rest.RestDMChannel.Discord.IMessageChannel.GetMessagesAsync
  nameWithType.vb: RestDMChannel.Discord.IMessageChannel.GetMessagesAsync
  name.vb: Discord.IMessageChannel.GetMessagesAsync
- uid: Discord.IMessageChannel.GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  isExternal: true
  name: GetMessagesAsync(Int32, CacheMode, RequestOptions)
  nameWithType: IMessageChannel.GetMessagesAsync(Int32, CacheMode, RequestOptions)
  fullName: Discord.IMessageChannel.GetMessagesAsync(System.Int32, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IMessageChannel.GetMessagesAsync
    fullName: Discord.IMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IMessageChannel.GetMessagesAsync
    fullName: Discord.IMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IMessage}}
  commentId: T:System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IMessage}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IAsyncEnumerable`1
  name: IAsyncEnumerable<IReadOnlyCollection<IMessage>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<IMessage>>
  fullName: System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyCollection<Discord.IMessage>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IMessage))
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IMessage))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IMessage))
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  isExternal: true
  name: GetMessagesAsync(UInt64, Direction, Int32, CacheMode, RequestOptions)
  nameWithType: IMessageChannel.GetMessagesAsync(UInt64, Direction, Int32, CacheMode, RequestOptions)
  fullName: Discord.IMessageChannel.GetMessagesAsync(System.UInt64, Discord.Direction, System.Int32, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IMessageChannel.GetMessagesAsync
    fullName: Discord.IMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IMessageChannel.GetMessagesAsync
    fullName: Discord.IMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  isExternal: true
  name: GetMessagesAsync(IMessage, Direction, Int32, CacheMode, RequestOptions)
  nameWithType: IMessageChannel.GetMessagesAsync(IMessage, Direction, Int32, CacheMode, RequestOptions)
  fullName: Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage, Discord.Direction, System.Int32, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IMessageChannel.GetMessagesAsync
    fullName: Discord.IMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)
    name: GetMessagesAsync
    nameWithType: IMessageChannel.GetMessagesAsync
    fullName: Discord.IMessageChannel.GetMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Direction
    name: Direction
    nameWithType: Direction
    fullName: Discord.Direction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetPinnedMessagesAsync*
  commentId: Overload:Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetPinnedMessagesAsync
  name: IMessageChannel.GetPinnedMessagesAsync
  nameWithType: RestDMChannel.IMessageChannel.GetPinnedMessagesAsync
  fullName: Discord.Rest.RestDMChannel.Discord.IMessageChannel.GetPinnedMessagesAsync
  nameWithType.vb: RestDMChannel.Discord.IMessageChannel.GetPinnedMessagesAsync
  name.vb: Discord.IMessageChannel.GetPinnedMessagesAsync
- uid: Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  parent: Discord.IMessageChannel
  name: GetPinnedMessagesAsync(RequestOptions)
  nameWithType: IMessageChannel.GetPinnedMessagesAsync(RequestOptions)
  fullName: Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
    name: GetPinnedMessagesAsync
    nameWithType: IMessageChannel.GetPinnedMessagesAsync
    fullName: Discord.IMessageChannel.GetPinnedMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)
    name: GetPinnedMessagesAsync
    nameWithType: IMessageChannel.GetPinnedMessagesAsync
    fullName: Discord.IMessageChannel.GetPinnedMessagesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IMessage}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IMessage}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<IMessage>>
  nameWithType: Task<IReadOnlyCollection<IMessage>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.IMessage>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IMessage))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IMessage))
  name.vb: Task(Of IReadOnlyCollection(Of IMessage))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IMessage
    name: IMessage
    nameWithType: IMessage
    fullName: Discord.IMessage
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestDMChannel.Discord#IMessageChannel#SendFileAsync*
  commentId: Overload:Discord.Rest.RestDMChannel.Discord#IMessageChannel#SendFileAsync
  name: IMessageChannel.SendFileAsync
  nameWithType: RestDMChannel.IMessageChannel.SendFileAsync
  fullName: Discord.Rest.RestDMChannel.Discord.IMessageChannel.SendFileAsync
  nameWithType.vb: RestDMChannel.Discord.IMessageChannel.SendFileAsync
  name.vb: Discord.IMessageChannel.SendFileAsync
- uid: Discord.IMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.IMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.IMessageChannel
  isExternal: true
  name: SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: IMessageChannel.SendFileAsync(String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.IMessageChannel.SendFileAsync(System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  spec.csharp:
  - uid: Discord.IMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: IMessageChannel.SendFileAsync
    fullName: Discord.IMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: IMessageChannel.SendFileAsync
    fullName: Discord.IMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.IUserMessage}
  commentId: T:System.Threading.Tasks.Task{Discord.IUserMessage}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IUserMessage>
  nameWithType: Task<IUserMessage>
  fullName: System.Threading.Tasks.Task<Discord.IUserMessage>
  nameWithType.vb: Task(Of IUserMessage)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IUserMessage)
  name.vb: Task(Of IUserMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  commentId: M:Discord.IMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
  parent: Discord.IMessageChannel
  isExternal: true
  name: SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  nameWithType: IMessageChannel.SendFileAsync(Stream, String, String, Boolean, Embed, RequestOptions, Boolean)
  fullName: Discord.IMessageChannel.SendFileAsync(System.IO.Stream, System.String, System.String, System.Boolean, Discord.Embed, Discord.RequestOptions, System.Boolean)
  spec.csharp:
  - uid: Discord.IMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: IMessageChannel.SendFileAsync
    fullName: Discord.IMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)
    name: SendFileAsync
    nameWithType: IMessageChannel.SendFileAsync
    fullName: Discord.IMessageChannel.SendFileAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestDMChannel.Discord#IMessageChannel#SendMessageAsync*
  commentId: Overload:Discord.Rest.RestDMChannel.Discord#IMessageChannel#SendMessageAsync
  name: IMessageChannel.SendMessageAsync
  nameWithType: RestDMChannel.IMessageChannel.SendMessageAsync
  fullName: Discord.Rest.RestDMChannel.Discord.IMessageChannel.SendMessageAsync
  nameWithType.vb: RestDMChannel.Discord.IMessageChannel.SendMessageAsync
  name.vb: Discord.IMessageChannel.SendMessageAsync
- uid: Discord.IMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  commentId: M:Discord.IMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  parent: Discord.IMessageChannel
  isExternal: true
  name: SendMessageAsync(String, Boolean, Embed, RequestOptions)
  nameWithType: IMessageChannel.SendMessageAsync(String, Boolean, Embed, RequestOptions)
  fullName: Discord.IMessageChannel.SendMessageAsync(System.String, System.Boolean, Discord.Embed, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
    name: SendMessageAsync
    nameWithType: IMessageChannel.SendMessageAsync
    fullName: Discord.IMessageChannel.SendMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
    name: SendMessageAsync
    nameWithType: IMessageChannel.SendMessageAsync
    fullName: Discord.IMessageChannel.SendMessageAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestDMChannel.Discord#IChannel#Name*
  commentId: Overload:Discord.Rest.RestDMChannel.Discord#IChannel#Name
  name: IChannel.Name
  nameWithType: RestDMChannel.IChannel.Name
  fullName: Discord.Rest.RestDMChannel.Discord.IChannel.Name
  nameWithType.vb: RestDMChannel.Discord.IChannel.Name
  name.vb: Discord.IChannel.Name
- uid: Discord.IChannel.Name
  commentId: P:Discord.IChannel.Name
  parent: Discord.IChannel
  name: Name
  nameWithType: IChannel.Name
  fullName: Discord.IChannel.Name
- uid: Discord.Rest.RestDMChannel.Discord#IChannel#GetUserAsync*
  commentId: Overload:Discord.Rest.RestDMChannel.Discord#IChannel#GetUserAsync
  name: IChannel.GetUserAsync
  nameWithType: RestDMChannel.IChannel.GetUserAsync
  fullName: Discord.Rest.RestDMChannel.Discord.IChannel.GetUserAsync
  nameWithType.vb: RestDMChannel.Discord.IChannel.GetUserAsync
  name.vb: Discord.IChannel.GetUserAsync
- uid: Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IChannel
  isExternal: true
  name: GetUserAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.IChannel.GetUserAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetUserAsync
    nameWithType: IChannel.GetUserAsync
    fullName: Discord.IChannel.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetUserAsync
    nameWithType: IChannel.GetUserAsync
    fullName: Discord.IChannel.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.IUser}
  commentId: T:System.Threading.Tasks.Task{Discord.IUser}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IUser>
  nameWithType: Task<IUser>
  fullName: System.Threading.Tasks.Task<Discord.IUser>
  nameWithType.vb: Task(Of IUser)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IUser)
  name.vb: Task(Of IUser)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestDMChannel.Discord#IChannel#GetUsersAsync*
  commentId: Overload:Discord.Rest.RestDMChannel.Discord#IChannel#GetUsersAsync
  name: IChannel.GetUsersAsync
  nameWithType: RestDMChannel.IChannel.GetUsersAsync
  fullName: Discord.Rest.RestDMChannel.Discord.IChannel.GetUsersAsync
  nameWithType.vb: RestDMChannel.Discord.IChannel.GetUsersAsync
  name.vb: Discord.IChannel.GetUsersAsync
- uid: Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IChannel
  name: GetUsersAsync(CacheMode, RequestOptions)
  nameWithType: IChannel.GetUsersAsync(CacheMode, RequestOptions)
  fullName: Discord.IChannel.GetUsersAsync(Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetUsersAsync
    nameWithType: IChannel.GetUsersAsync
    fullName: Discord.IChannel.GetUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetUsersAsync
    nameWithType: IChannel.GetUsersAsync
    fullName: Discord.IChannel.GetUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IUser}}
  commentId: T:System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IUser}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IAsyncEnumerable`1
  name: IAsyncEnumerable<IReadOnlyCollection<IUser>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<IUser>>
  fullName: System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyCollection<Discord.IUser>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IUser))
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IUser))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IUser))
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
