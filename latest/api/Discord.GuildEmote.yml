### YamlMime:ManagedReference
items:
- uid: Discord.GuildEmote
  commentId: T:Discord.GuildEmote
  id: GuildEmote
  parent: Discord
  children:
  - Discord.GuildEmote.CreatorId
  - Discord.GuildEmote.IsManaged
  - Discord.GuildEmote.RequireColons
  - Discord.GuildEmote.RoleIds
  - Discord.GuildEmote.ToString
  langs:
  - csharp
  - vb
  name: GuildEmote
  nameWithType: GuildEmote
  fullName: Discord.GuildEmote
  type: Class
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Emotes/GuildEmote.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GuildEmote
    path: ../src/Discord.Net.Core/Entities/Emotes/GuildEmote.cs
    startLine: 8
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nAn image-based emote that is attached to a guild.\n"
  example: []
  syntax:
    content: 'public class GuildEmote : Emote, IEmote, ISnowflakeEntity, IEntity<ulong>'
    content.vb: >-
      Public Class GuildEmote
          Inherits Emote
          Implements IEmote, ISnowflakeEntity, IEntity(Of ULong)
  inheritance:
  - System.Object
  - Discord.Emote
  implements:
  - Discord.IEmote
  - Discord.ISnowflakeEntity
  - Discord.IEntity{System.UInt64}
  inheritedMembers:
  - Discord.Emote.Name
  - Discord.Emote.Id
  - Discord.Emote.Animated
  - Discord.Emote.CreatedAt
  - Discord.Emote.Url
  - Discord.Emote.Equals(System.Object)
  - Discord.Emote.GetHashCode
  - Discord.Emote.Parse(System.String)
  - Discord.Emote.TryParse(System.String,Discord.Emote@)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.GuildEmote.IsManaged
  commentId: P:Discord.GuildEmote.IsManaged
  id: IsManaged
  parent: Discord.GuildEmote
  langs:
  - csharp
  - vb
  name: IsManaged
  nameWithType: GuildEmote.IsManaged
  fullName: Discord.GuildEmote.IsManaged
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Emotes/GuildEmote.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsManaged
    path: ../src/Discord.Net.Core/Entities/Emotes/GuildEmote.cs
    startLine: 17
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets whether this emoji is managed by an integration.\n"
  example: []
  syntax:
    content: public bool IsManaged { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\nA boolean that determines whether or not this emote is managed by a Twitch integration.\n"
    content.vb: Public ReadOnly Property IsManaged As Boolean
  overload: Discord.GuildEmote.IsManaged*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.GuildEmote.RequireColons
  commentId: P:Discord.GuildEmote.RequireColons
  id: RequireColons
  parent: Discord.GuildEmote
  langs:
  - csharp
  - vb
  name: RequireColons
  nameWithType: GuildEmote.RequireColons
  fullName: Discord.GuildEmote.RequireColons
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Emotes/GuildEmote.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RequireColons
    path: ../src/Discord.Net.Core/Entities/Emotes/GuildEmote.cs
    startLine: 24
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets whether this emoji must be wrapped in colons.\n"
  example: []
  syntax:
    content: public bool RequireColons { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\nA boolean that determines whether or not this emote requires the use of colons in chat to be used.\n"
    content.vb: Public ReadOnly Property RequireColons As Boolean
  overload: Discord.GuildEmote.RequireColons*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.GuildEmote.RoleIds
  commentId: P:Discord.GuildEmote.RoleIds
  id: RoleIds
  parent: Discord.GuildEmote
  langs:
  - csharp
  - vb
  name: RoleIds
  nameWithType: GuildEmote.RoleIds
  fullName: Discord.GuildEmote.RoleIds
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Emotes/GuildEmote.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RoleIds
    path: ../src/Discord.Net.Core/Entities/Emotes/GuildEmote.cs
    startLine: 31
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the roles that are allowed to use this emoji.\n"
  example: []
  syntax:
    content: public IReadOnlyList<ulong> RoleIds { get; }
    parameters: []
    return:
      type: IReadOnlyList{System.UInt64}
      description: "\nA read-only list containing snowflake identifiers for roles that are allowed to use this emoji.\n"
    content.vb: Public ReadOnly Property RoleIds As IReadOnlyList(Of ULong)
  overload: Discord.GuildEmote.RoleIds*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.GuildEmote.CreatorId
  commentId: P:Discord.GuildEmote.CreatorId
  id: CreatorId
  parent: Discord.GuildEmote
  langs:
  - csharp
  - vb
  name: CreatorId
  nameWithType: GuildEmote.CreatorId
  fullName: Discord.GuildEmote.CreatorId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Emotes/GuildEmote.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreatorId
    path: ../src/Discord.Net.Core/Entities/Emotes/GuildEmote.cs
    startLine: 39
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the user ID associated with the creation of this emoji.\n"
  example: []
  syntax:
    content: public ulong? CreatorId { get; }
    parameters: []
    return:
      type: System.Nullable{System.UInt64}
      description: "\nAn <see cref=\"!:System.UInt64\"></see> snowflake identifier representing the user who created this emoji; \n<code>null</code> if unknown.\n"
    content.vb: Public ReadOnly Property CreatorId As ULong?
  overload: Discord.GuildEmote.CreatorId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.GuildEmote.ToString
  commentId: M:Discord.GuildEmote.ToString
  id: ToString
  parent: Discord.GuildEmote
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: GuildEmote.ToString()
  fullName: Discord.GuildEmote.ToString()
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Emotes/GuildEmote.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ToString
    path: ../src/Discord.Net.Core/Entities/Emotes/GuildEmote.cs
    startLine: 56
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the raw representation of the emote.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nA string representing the raw presentation of the emote (e.g. <code>&lt;:thonkang:282745590985523200></code>).\n"
    content.vb: Public Overrides Function ToString As String
  overridden: Discord.Emote.ToString
  overload: Discord.GuildEmote.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Emote
  commentId: T:Discord.Emote
  parent: Discord
  name: Emote
  nameWithType: Emote
  fullName: Discord.Emote
- uid: Discord.IEmote
  commentId: T:Discord.IEmote
  parent: Discord
  name: IEmote
  nameWithType: IEmote
  fullName: Discord.IEmote
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Emote.Name
  commentId: P:Discord.Emote.Name
  parent: Discord.Emote
  name: Name
  nameWithType: Emote.Name
  fullName: Discord.Emote.Name
- uid: Discord.Emote.Id
  commentId: P:Discord.Emote.Id
  parent: Discord.Emote
  name: Id
  nameWithType: Emote.Id
  fullName: Discord.Emote.Id
- uid: Discord.Emote.Animated
  commentId: P:Discord.Emote.Animated
  parent: Discord.Emote
  name: Animated
  nameWithType: Emote.Animated
  fullName: Discord.Emote.Animated
- uid: Discord.Emote.CreatedAt
  commentId: P:Discord.Emote.CreatedAt
  parent: Discord.Emote
  name: CreatedAt
  nameWithType: Emote.CreatedAt
  fullName: Discord.Emote.CreatedAt
- uid: Discord.Emote.Url
  commentId: P:Discord.Emote.Url
  parent: Discord.Emote
  name: Url
  nameWithType: Emote.Url
  fullName: Discord.Emote.Url
- uid: Discord.Emote.Equals(System.Object)
  commentId: M:Discord.Emote.Equals(System.Object)
  parent: Discord.Emote
  isExternal: true
  name: Equals(Object)
  nameWithType: Emote.Equals(Object)
  fullName: Discord.Emote.Equals(System.Object)
  spec.csharp:
  - uid: Discord.Emote.Equals(System.Object)
    name: Equals
    nameWithType: Emote.Equals
    fullName: Discord.Emote.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Emote.Equals(System.Object)
    name: Equals
    nameWithType: Emote.Equals
    fullName: Discord.Emote.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Emote.GetHashCode
  commentId: M:Discord.Emote.GetHashCode
  parent: Discord.Emote
  name: GetHashCode()
  nameWithType: Emote.GetHashCode()
  fullName: Discord.Emote.GetHashCode()
  spec.csharp:
  - uid: Discord.Emote.GetHashCode
    name: GetHashCode
    nameWithType: Emote.GetHashCode
    fullName: Discord.Emote.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Emote.GetHashCode
    name: GetHashCode
    nameWithType: Emote.GetHashCode
    fullName: Discord.Emote.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Emote.Parse(System.String)
  commentId: M:Discord.Emote.Parse(System.String)
  parent: Discord.Emote
  isExternal: true
  name: Parse(String)
  nameWithType: Emote.Parse(String)
  fullName: Discord.Emote.Parse(System.String)
  spec.csharp:
  - uid: Discord.Emote.Parse(System.String)
    name: Parse
    nameWithType: Emote.Parse
    fullName: Discord.Emote.Parse
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Emote.Parse(System.String)
    name: Parse
    nameWithType: Emote.Parse
    fullName: Discord.Emote.Parse
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Emote.TryParse(System.String,Discord.Emote@)
  commentId: M:Discord.Emote.TryParse(System.String,Discord.Emote@)
  parent: Discord.Emote
  isExternal: true
  name: TryParse(String, Emote)
  nameWithType: Emote.TryParse(String, Emote)
  fullName: Discord.Emote.TryParse(System.String, Discord.Emote)
  spec.csharp:
  - uid: Discord.Emote.TryParse(System.String,Discord.Emote@)
    name: TryParse
    nameWithType: Emote.TryParse
    fullName: Discord.Emote.TryParse
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Emote
    name: Emote
    nameWithType: Emote
    fullName: Discord.Emote
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Emote.TryParse(System.String,Discord.Emote@)
    name: TryParse
    nameWithType: Emote.TryParse
    fullName: Discord.Emote.TryParse
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Emote
    name: Emote
    nameWithType: Emote
    fullName: Discord.Emote
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.GuildEmote.IsManaged*
  commentId: Overload:Discord.GuildEmote.IsManaged
  name: IsManaged
  nameWithType: GuildEmote.IsManaged
  fullName: Discord.GuildEmote.IsManaged
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.GuildEmote.RequireColons*
  commentId: Overload:Discord.GuildEmote.RequireColons
  name: RequireColons
  nameWithType: GuildEmote.RequireColons
  fullName: Discord.GuildEmote.RequireColons
- uid: Discord.GuildEmote.RoleIds*
  commentId: Overload:Discord.GuildEmote.RoleIds
  name: RoleIds
  nameWithType: GuildEmote.RoleIds
  fullName: Discord.GuildEmote.RoleIds
- uid: IReadOnlyList{System.UInt64}
  commentId: '!:IReadOnlyList{System.UInt64}'
  definition: IReadOnlyList`1
  name: IReadOnlyList<UInt64>
  nameWithType: IReadOnlyList<UInt64>
  fullName: IReadOnlyList<System.UInt64>
  nameWithType.vb: IReadOnlyList(Of UInt64)
  fullName.vb: IReadOnlyList(Of System.UInt64)
  name.vb: IReadOnlyList(Of UInt64)
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<>
  nameWithType: IReadOnlyList<>
  fullName: IReadOnlyList<>
  nameWithType.vb: IReadOnlyList(Of )
  fullName.vb: IReadOnlyList(Of )
  name.vb: IReadOnlyList(Of )
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.GuildEmote.CreatorId*
  commentId: Overload:Discord.GuildEmote.CreatorId
  name: CreatorId
  nameWithType: GuildEmote.CreatorId
  fullName: Discord.GuildEmote.CreatorId
- uid: System.Nullable{System.UInt64}
  commentId: '!:System.Nullable{System.UInt64}'
  definition: System.Nullable`1
  name: Nullable<UInt64>
  nameWithType: Nullable<UInt64>
  fullName: System.Nullable<System.UInt64>
  nameWithType.vb: Nullable(Of UInt64)
  fullName.vb: System.Nullable(Of System.UInt64)
  name.vb: Nullable(Of UInt64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Emote.ToString
  commentId: M:Discord.Emote.ToString
  parent: Discord.Emote
  name: ToString()
  nameWithType: Emote.ToString()
  fullName: Discord.Emote.ToString()
  spec.csharp:
  - uid: Discord.Emote.ToString
    name: ToString
    nameWithType: Emote.ToString
    fullName: Discord.Emote.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Emote.ToString
    name: ToString
    nameWithType: Emote.ToString
    fullName: Discord.Emote.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.GuildEmote.ToString*
  commentId: Overload:Discord.GuildEmote.ToString
  name: ToString
  nameWithType: GuildEmote.ToString
  fullName: Discord.GuildEmote.ToString
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
