### YamlMime:ManagedReference
items:
- uid: Discord.Commands.ModuleBase`1
  commentId: T:Discord.Commands.ModuleBase`1
  id: ModuleBase`1
  parent: Discord.Commands
  children:
  - Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
  - Discord.Commands.ModuleBase`1.BeforeExecute(Discord.Commands.CommandInfo)
  - Discord.Commands.ModuleBase`1.Context
  - Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  - Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  langs:
  - csharp
  - vb
  name: ModuleBase<T>
  nameWithType: ModuleBase<T>
  fullName: Discord.Commands.ModuleBase<T>
  type: Class
  source:
    remote:
      path: src/Discord.Net.Commands/ModuleBase.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ModuleBase
    path: ../src/Discord.Net.Commands/ModuleBase.cs
    startLine: 15
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nProvides a base class for a command module to inherit from.\n"
  example: []
  syntax:
    content: 'public abstract class ModuleBase<T> : IModuleBase where T : class, ICommandContext'
    typeParameters:
    - id: T
      description: A class that implements <xref href="Discord.Commands.ICommandContext" data-throw-if-not-resolved="false"></xref>.
    content.vb: >-
      Public MustInherit Class ModuleBase(Of T As {Class, ICommandContext})
          Implements IModuleBase
  inheritance:
  - System.Object
  derivedClasses:
  - Discord.Commands.ModuleBase
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: ModuleBase(Of T)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Discord.Commands.ModuleBase(Of T)
  name.vb: ModuleBase(Of T)
- uid: Discord.Commands.ModuleBase`1.Context
  commentId: P:Discord.Commands.ModuleBase`1.Context
  id: Context
  parent: Discord.Commands.ModuleBase`1
  langs:
  - csharp
  - vb
  name: Context
  nameWithType: ModuleBase<T>.Context
  fullName: Discord.Commands.ModuleBase<T>.Context
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/ModuleBase.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Context
    path: ../src/Discord.Net.Commands/ModuleBase.cs
    startLine: 23
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nThe underlying context of the command.\n"
  example: []
  syntax:
    content: public T Context { get; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public ReadOnly Property Context As T
  overload: Discord.Commands.ModuleBase`1.Context*
  seealso:
  - linkId: Discord.Commands.ICommandContext
    commentId: T:Discord.Commands.ICommandContext
  - linkId: Discord.Commands.CommandContext
    commentId: T:Discord.Commands.CommandContext
  nameWithType.vb: ModuleBase(Of T).Context
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Discord.Commands.ModuleBase(Of T).Context
- uid: Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  commentId: M:Discord.Commands.ModuleBase`1.ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  id: ReplyAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)
  parent: Discord.Commands.ModuleBase`1
  langs:
  - csharp
  - vb
  name: ReplyAsync(String, Boolean, Embed, RequestOptions)
  nameWithType: ModuleBase<T>.ReplyAsync(String, Boolean, Embed, RequestOptions)
  fullName: Discord.Commands.ModuleBase<T>.ReplyAsync(System.String, System.Boolean, Discord.Embed, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/ModuleBase.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ReplyAsync
    path: ../src/Discord.Net.Commands/ModuleBase.cs
    startLine: 33
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nSends a message to the source channel.\n"
  example: []
  syntax:
    content: protected virtual Task<IUserMessage> ReplyAsync(string message = null, bool isTTS = false, Embed embed = null, RequestOptions options = null)
    parameters:
    - id: message
      type: System.String
      description: "\nContents of the message; optional only if <code data-dev-comment-type=\"paramref\" class=\"paramref\">embed</code> is specified.\n"
    - id: isTTS
      type: System.Boolean
      description: Specifies if Discord should read this <code data-dev-comment-type="paramref" class="paramref">message</code> aloud using text-to-speech.
    - id: embed
      type: Discord.Embed
      description: An embed to be displayed alongside the <code data-dev-comment-type="paramref" class="paramref">message</code>.
    - id: options
      type: Discord.RequestOptions
    return:
      type: System.Threading.Tasks.Task{Discord.IUserMessage}
    content.vb: Protected Overridable Function ReplyAsync(message As String = Nothing, isTTS As Boolean = False, embed As Embed = Nothing, options As RequestOptions = Nothing) As Task(Of IUserMessage)
  overload: Discord.Commands.ModuleBase`1.ReplyAsync*
  nameWithType.vb: ModuleBase(Of T).ReplyAsync(String, Boolean, Embed, RequestOptions)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Discord.Commands.ModuleBase(Of T).ReplyAsync(System.String, System.Boolean, Discord.Embed, Discord.RequestOptions)
- uid: Discord.Commands.ModuleBase`1.BeforeExecute(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase`1.BeforeExecute(Discord.Commands.CommandInfo)
  id: BeforeExecute(Discord.Commands.CommandInfo)
  parent: Discord.Commands.ModuleBase`1
  langs:
  - csharp
  - vb
  name: BeforeExecute(CommandInfo)
  nameWithType: ModuleBase<T>.BeforeExecute(CommandInfo)
  fullName: Discord.Commands.ModuleBase<T>.BeforeExecute(Discord.Commands.CommandInfo)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/ModuleBase.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: BeforeExecute
    path: ../src/Discord.Net.Commands/ModuleBase.cs
    startLine: 41
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nThe method to execute before executing the command.\n"
  example: []
  syntax:
    content: protected virtual void BeforeExecute(CommandInfo command)
    parameters:
    - id: command
      type: Discord.Commands.CommandInfo
      description: The <xref href="Discord.Commands.CommandInfo" data-throw-if-not-resolved="false"></xref> of the command to be executed.
    content.vb: Protected Overridable Sub BeforeExecute(command As CommandInfo)
  overload: Discord.Commands.ModuleBase`1.BeforeExecute*
  nameWithType.vb: ModuleBase(Of T).BeforeExecute(CommandInfo)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Discord.Commands.ModuleBase(Of T).BeforeExecute(Discord.Commands.CommandInfo)
- uid: Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
  commentId: M:Discord.Commands.ModuleBase`1.AfterExecute(Discord.Commands.CommandInfo)
  id: AfterExecute(Discord.Commands.CommandInfo)
  parent: Discord.Commands.ModuleBase`1
  langs:
  - csharp
  - vb
  name: AfterExecute(CommandInfo)
  nameWithType: ModuleBase<T>.AfterExecute(CommandInfo)
  fullName: Discord.Commands.ModuleBase<T>.AfterExecute(Discord.Commands.CommandInfo)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/ModuleBase.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: AfterExecute
    path: ../src/Discord.Net.Commands/ModuleBase.cs
    startLine: 48
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nThe method to execute after executing the command.\n"
  example: []
  syntax:
    content: protected virtual void AfterExecute(CommandInfo command)
    parameters:
    - id: command
      type: Discord.Commands.CommandInfo
      description: The <xref href="Discord.Commands.CommandInfo" data-throw-if-not-resolved="false"></xref> of the command to be executed.
    content.vb: Protected Overridable Sub AfterExecute(command As CommandInfo)
  overload: Discord.Commands.ModuleBase`1.AfterExecute*
  nameWithType.vb: ModuleBase(Of T).AfterExecute(CommandInfo)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Discord.Commands.ModuleBase(Of T).AfterExecute(Discord.Commands.CommandInfo)
- uid: Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  commentId: M:Discord.Commands.ModuleBase`1.OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  id: OnModuleBuilding(Discord.Commands.CommandService,Discord.Commands.Builders.ModuleBuilder)
  parent: Discord.Commands.ModuleBase`1
  langs:
  - csharp
  - vb
  name: OnModuleBuilding(CommandService, ModuleBuilder)
  nameWithType: ModuleBase<T>.OnModuleBuilding(CommandService, ModuleBuilder)
  fullName: Discord.Commands.ModuleBase<T>.OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/ModuleBase.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: OnModuleBuilding
    path: ../src/Discord.Net.Commands/ModuleBase.cs
    startLine: 57
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nThe method to execute when building the module.\n"
  example: []
  syntax:
    content: protected virtual void OnModuleBuilding(CommandService commandService, ModuleBuilder builder)
    parameters:
    - id: commandService
      type: Discord.Commands.CommandService
      description: The <xref href="Discord.Commands.CommandService" data-throw-if-not-resolved="false"></xref> used to create the module.
    - id: builder
      type: Discord.Commands.Builders.ModuleBuilder
      description: The builder used to build the module.
    content.vb: Protected Overridable Sub OnModuleBuilding(commandService As CommandService, builder As ModuleBuilder)
  overload: Discord.Commands.ModuleBase`1.OnModuleBuilding*
  nameWithType.vb: ModuleBase(Of T).OnModuleBuilding(CommandService, ModuleBuilder)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Discord.Commands.ModuleBase(Of T).OnModuleBuilding(Discord.Commands.CommandService, Discord.Commands.Builders.ModuleBuilder)
references:
- uid: Discord.Commands.ICommandContext
  commentId: T:Discord.Commands.ICommandContext
  parent: Discord.Commands
  name: ICommandContext
  nameWithType: ICommandContext
  fullName: Discord.Commands.ICommandContext
- uid: Discord.Commands
  commentId: N:Discord.Commands
  name: Discord.Commands
  nameWithType: Discord.Commands
  fullName: Discord.Commands
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Commands.CommandContext
  commentId: T:Discord.Commands.CommandContext
  name: CommandContext
  nameWithType: CommandContext
  fullName: Discord.Commands.CommandContext
- uid: Discord.Commands.ModuleBase`1.Context*
  commentId: Overload:Discord.Commands.ModuleBase`1.Context
  name: Context
  nameWithType: ModuleBase<T>.Context
  fullName: Discord.Commands.ModuleBase<T>.Context
  nameWithType.vb: ModuleBase(Of T).Context
  fullName.vb: Discord.Commands.ModuleBase(Of T).Context
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Discord.Commands.ModuleBase`1.ReplyAsync*
  commentId: Overload:Discord.Commands.ModuleBase`1.ReplyAsync
  name: ReplyAsync
  nameWithType: ModuleBase<T>.ReplyAsync
  fullName: Discord.Commands.ModuleBase<T>.ReplyAsync
  nameWithType.vb: ModuleBase(Of T).ReplyAsync
  fullName.vb: Discord.Commands.ModuleBase(Of T).ReplyAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.Embed
  commentId: T:Discord.Embed
  parent: Discord
  name: Embed
  nameWithType: Embed
  fullName: Discord.Embed
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: System.Threading.Tasks.Task{Discord.IUserMessage}
  commentId: T:System.Threading.Tasks.Task{Discord.IUserMessage}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IUserMessage>
  nameWithType: Task<IUserMessage>
  fullName: System.Threading.Tasks.Task<Discord.IUserMessage>
  nameWithType.vb: Task(Of IUserMessage)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IUserMessage)
  name.vb: Task(Of IUserMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Discord.Commands.CommandInfo
  commentId: T:Discord.Commands.CommandInfo
  parent: Discord.Commands
  name: CommandInfo
  nameWithType: CommandInfo
  fullName: Discord.Commands.CommandInfo
- uid: Discord.Commands.ModuleBase`1.BeforeExecute*
  commentId: Overload:Discord.Commands.ModuleBase`1.BeforeExecute
  name: BeforeExecute
  nameWithType: ModuleBase<T>.BeforeExecute
  fullName: Discord.Commands.ModuleBase<T>.BeforeExecute
  nameWithType.vb: ModuleBase(Of T).BeforeExecute
  fullName.vb: Discord.Commands.ModuleBase(Of T).BeforeExecute
- uid: Discord.Commands.ModuleBase`1.AfterExecute*
  commentId: Overload:Discord.Commands.ModuleBase`1.AfterExecute
  name: AfterExecute
  nameWithType: ModuleBase<T>.AfterExecute
  fullName: Discord.Commands.ModuleBase<T>.AfterExecute
  nameWithType.vb: ModuleBase(Of T).AfterExecute
  fullName.vb: Discord.Commands.ModuleBase(Of T).AfterExecute
- uid: Discord.Commands.CommandService
  commentId: T:Discord.Commands.CommandService
  parent: Discord.Commands
  name: CommandService
  nameWithType: CommandService
  fullName: Discord.Commands.CommandService
- uid: Discord.Commands.ModuleBase`1.OnModuleBuilding*
  commentId: Overload:Discord.Commands.ModuleBase`1.OnModuleBuilding
  name: OnModuleBuilding
  nameWithType: ModuleBase<T>.OnModuleBuilding
  fullName: Discord.Commands.ModuleBase<T>.OnModuleBuilding
  nameWithType.vb: ModuleBase(Of T).OnModuleBuilding
  fullName.vb: Discord.Commands.ModuleBase(Of T).OnModuleBuilding
- uid: Discord.Commands.Builders.ModuleBuilder
  commentId: T:Discord.Commands.Builders.ModuleBuilder
  parent: Discord.Commands.Builders
  name: ModuleBuilder
  nameWithType: ModuleBuilder
  fullName: Discord.Commands.Builders.ModuleBuilder
- uid: Discord.Commands.Builders
  commentId: N:Discord.Commands.Builders
  name: Discord.Commands.Builders
  nameWithType: Discord.Commands.Builders
  fullName: Discord.Commands.Builders
