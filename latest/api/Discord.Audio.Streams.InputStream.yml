### YamlMime:ManagedReference
items:
- uid: Discord.Audio.Streams.InputStream
  commentId: T:Discord.Audio.Streams.InputStream
  id: InputStream
  parent: Discord.Audio.Streams
  children:
  - Discord.Audio.Streams.InputStream.#ctor
  - Discord.Audio.Streams.InputStream.AvailableFrames
  - Discord.Audio.Streams.InputStream.CanRead
  - Discord.Audio.Streams.InputStream.CanSeek
  - Discord.Audio.Streams.InputStream.CanWrite
  - Discord.Audio.Streams.InputStream.Dispose(System.Boolean)
  - Discord.Audio.Streams.InputStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - Discord.Audio.Streams.InputStream.ReadFrameAsync(System.Threading.CancellationToken)
  - Discord.Audio.Streams.InputStream.TryReadFrame(System.Threading.CancellationToken,Discord.Audio.RTPFrame@)
  - Discord.Audio.Streams.InputStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - Discord.Audio.Streams.InputStream.WriteHeader(System.UInt16,System.UInt32,System.Boolean)
  langs:
  - csharp
  - vb
  name: InputStream
  nameWithType: InputStream
  fullName: Discord.Audio.Streams.InputStream
  type: Class
  source:
    remote:
      path: src/Discord.Net.WebSocket/Audio/Streams/InputStream.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: InputStream
    path: ../src/Discord.Net.WebSocket/Audio/Streams/InputStream.cs
    startLine: 8
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.Audio.Streams
  summary: 'Reads the payload from an RTP frame '
  example: []
  syntax:
    content: 'public class InputStream : AudioInStream, IDisposable'
    content.vb: >-
      Public Class InputStream
          Inherits AudioInStream
          Implements IDisposable
  inheritance:
  - System.Object
  - System.IO.Stream
  - Discord.Audio.AudioStream
  - Discord.Audio.AudioInStream
  implements:
  - System.IDisposable
  inheritedMembers:
  - Discord.Audio.AudioInStream.FlushAsync(System.Threading.CancellationToken)
  - Discord.Audio.AudioStream.Write(System.Byte[],System.Int32,System.Int32)
  - Discord.Audio.AudioStream.Flush
  - Discord.Audio.AudioStream.Clear
  - Discord.Audio.AudioStream.ClearAsync(System.Threading.CancellationToken)
  - Discord.Audio.AudioStream.Length
  - Discord.Audio.AudioStream.Position
  - Discord.Audio.AudioStream.Read(System.Byte[],System.Int32,System.Int32)
  - Discord.Audio.AudioStream.SetLength(System.Int64)
  - Discord.Audio.AudioStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.IO.Stream.Null
  - System.IO.Stream.CopyTo(System.IO.Stream)
  - System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
  - System.IO.Stream.CopyToAsync(System.IO.Stream)
  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  - System.IO.Stream.Dispose
  - System.IO.Stream.FlushAsync
  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
  - System.IO.Stream.ReadByte
  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
  - System.IO.Stream.WriteByte(System.Byte)
  - System.IO.Stream.CanTimeout
  - System.IO.Stream.ReadTimeout
  - System.IO.Stream.WriteTimeout
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.Audio.Streams.InputStream.CanRead
  commentId: P:Discord.Audio.Streams.InputStream.CanRead
  id: CanRead
  parent: Discord.Audio.Streams.InputStream
  langs:
  - csharp
  - vb
  name: CanRead
  nameWithType: InputStream.CanRead
  fullName: Discord.Audio.Streams.InputStream.CanRead
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Audio/Streams/InputStream.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CanRead
    path: ../src/Discord.Net.WebSocket/Audio/Streams/InputStream.cs
    startLine: 20
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.Audio.Streams
  syntax:
    content: public override bool CanRead { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property CanRead As Boolean
  overridden: Discord.Audio.AudioInStream.CanRead
  overload: Discord.Audio.Streams.InputStream.CanRead*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.Audio.Streams.InputStream.CanSeek
  commentId: P:Discord.Audio.Streams.InputStream.CanSeek
  id: CanSeek
  parent: Discord.Audio.Streams.InputStream
  langs:
  - csharp
  - vb
  name: CanSeek
  nameWithType: InputStream.CanSeek
  fullName: Discord.Audio.Streams.InputStream.CanSeek
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Audio/Streams/InputStream.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CanSeek
    path: ../src/Discord.Net.WebSocket/Audio/Streams/InputStream.cs
    startLine: 21
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.Audio.Streams
  syntax:
    content: public override bool CanSeek { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property CanSeek As Boolean
  overridden: Discord.Audio.AudioStream.CanSeek
  overload: Discord.Audio.Streams.InputStream.CanSeek*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.Audio.Streams.InputStream.CanWrite
  commentId: P:Discord.Audio.Streams.InputStream.CanWrite
  id: CanWrite
  parent: Discord.Audio.Streams.InputStream
  langs:
  - csharp
  - vb
  name: CanWrite
  nameWithType: InputStream.CanWrite
  fullName: Discord.Audio.Streams.InputStream.CanWrite
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Audio/Streams/InputStream.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CanWrite
    path: ../src/Discord.Net.WebSocket/Audio/Streams/InputStream.cs
    startLine: 22
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.Audio.Streams
  syntax:
    content: public override bool CanWrite { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property CanWrite As Boolean
  overridden: Discord.Audio.AudioInStream.CanWrite
  overload: Discord.Audio.Streams.InputStream.CanWrite*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.Audio.Streams.InputStream.AvailableFrames
  commentId: P:Discord.Audio.Streams.InputStream.AvailableFrames
  id: AvailableFrames
  parent: Discord.Audio.Streams.InputStream
  langs:
  - csharp
  - vb
  name: AvailableFrames
  nameWithType: InputStream.AvailableFrames
  fullName: Discord.Audio.Streams.InputStream.AvailableFrames
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Audio/Streams/InputStream.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: AvailableFrames
    path: ../src/Discord.Net.WebSocket/Audio/Streams/InputStream.cs
    startLine: 23
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.Audio.Streams
  syntax:
    content: public override int AvailableFrames { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Overrides ReadOnly Property AvailableFrames As Integer
  overridden: Discord.Audio.AudioInStream.AvailableFrames
  overload: Discord.Audio.Streams.InputStream.AvailableFrames*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.Audio.Streams.InputStream.#ctor
  commentId: M:Discord.Audio.Streams.InputStream.#ctor
  id: '#ctor'
  parent: Discord.Audio.Streams.InputStream
  langs:
  - csharp
  - vb
  name: InputStream()
  nameWithType: InputStream.InputStream()
  fullName: Discord.Audio.Streams.InputStream.InputStream()
  type: Constructor
  source:
    remote:
      path: src/Discord.Net.WebSocket/Audio/Streams/InputStream.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: .ctor
    path: ../src/Discord.Net.WebSocket/Audio/Streams/InputStream.cs
    startLine: 25
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.Audio.Streams
  syntax:
    content: public InputStream()
    content.vb: Public Sub New
  overload: Discord.Audio.Streams.InputStream.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Audio.Streams.InputStream.TryReadFrame(System.Threading.CancellationToken,Discord.Audio.RTPFrame@)
  commentId: M:Discord.Audio.Streams.InputStream.TryReadFrame(System.Threading.CancellationToken,Discord.Audio.RTPFrame@)
  id: TryReadFrame(System.Threading.CancellationToken,Discord.Audio.RTPFrame@)
  parent: Discord.Audio.Streams.InputStream
  langs:
  - csharp
  - vb
  name: TryReadFrame(CancellationToken, out RTPFrame)
  nameWithType: InputStream.TryReadFrame(CancellationToken, out RTPFrame)
  fullName: Discord.Audio.Streams.InputStream.TryReadFrame(System.Threading.CancellationToken, out Discord.Audio.RTPFrame)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Audio/Streams/InputStream.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: TryReadFrame
    path: ../src/Discord.Net.WebSocket/Audio/Streams/InputStream.cs
    startLine: 31
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.Audio.Streams
  syntax:
    content: public override bool TryReadFrame(CancellationToken cancelToken, out RTPFrame frame)
    parameters:
    - id: cancelToken
      type: System.Threading.CancellationToken
    - id: frame
      type: Discord.Audio.RTPFrame
    return:
      type: System.Boolean
    content.vb: Public Overrides Function TryReadFrame(cancelToken As CancellationToken, ByRef frame As RTPFrame) As Boolean
  overridden: Discord.Audio.AudioInStream.TryReadFrame(System.Threading.CancellationToken,Discord.Audio.RTPFrame@)
  overload: Discord.Audio.Streams.InputStream.TryReadFrame*
  nameWithType.vb: InputStream.TryReadFrame(CancellationToken, ByRef RTPFrame)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Discord.Audio.Streams.InputStream.TryReadFrame(System.Threading.CancellationToken, ByRef Discord.Audio.RTPFrame)
  name.vb: TryReadFrame(CancellationToken, ByRef RTPFrame)
- uid: Discord.Audio.Streams.InputStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Discord.Audio.Streams.InputStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Discord.Audio.Streams.InputStream
  langs:
  - csharp
  - vb
  name: ReadAsync(Byte[], Int32, Int32, CancellationToken)
  nameWithType: InputStream.ReadAsync(Byte[], Int32, Int32, CancellationToken)
  fullName: Discord.Audio.Streams.InputStream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Audio/Streams/InputStream.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ReadAsync
    path: ../src/Discord.Net.WebSocket/Audio/Streams/InputStream.cs
    startLine: 43
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.Audio.Streams
  syntax:
    content: public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancelToken)
    parameters:
    - id: buffer
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: count
      type: System.Int32
    - id: cancelToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Overrides Function ReadAsync(buffer As Byte(), offset As Integer, count As Integer, cancelToken As CancellationToken) As Task(Of Integer)
  overridden: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  overload: Discord.Audio.Streams.InputStream.ReadAsync*
  nameWithType.vb: InputStream.ReadAsync(Byte(), Int32, Int32, CancellationToken)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Discord.Audio.Streams.InputStream.ReadAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: ReadAsync(Byte(), Int32, Int32, CancellationToken)
- uid: Discord.Audio.Streams.InputStream.ReadFrameAsync(System.Threading.CancellationToken)
  commentId: M:Discord.Audio.Streams.InputStream.ReadFrameAsync(System.Threading.CancellationToken)
  id: ReadFrameAsync(System.Threading.CancellationToken)
  parent: Discord.Audio.Streams.InputStream
  langs:
  - csharp
  - vb
  name: ReadFrameAsync(CancellationToken)
  nameWithType: InputStream.ReadFrameAsync(CancellationToken)
  fullName: Discord.Audio.Streams.InputStream.ReadFrameAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Audio/Streams/InputStream.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ReadFrameAsync
    path: ../src/Discord.Net.WebSocket/Audio/Streams/InputStream.cs
    startLine: 53
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.Audio.Streams
  syntax:
    content: public override Task<RTPFrame> ReadFrameAsync(CancellationToken cancelToken)
    parameters:
    - id: cancelToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Discord.Audio.RTPFrame}
    content.vb: Public Overrides Function ReadFrameAsync(cancelToken As CancellationToken) As Task(Of RTPFrame)
  overridden: Discord.Audio.AudioInStream.ReadFrameAsync(System.Threading.CancellationToken)
  overload: Discord.Audio.Streams.InputStream.ReadFrameAsync*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.Audio.Streams.InputStream.WriteHeader(System.UInt16,System.UInt32,System.Boolean)
  commentId: M:Discord.Audio.Streams.InputStream.WriteHeader(System.UInt16,System.UInt32,System.Boolean)
  id: WriteHeader(System.UInt16,System.UInt32,System.Boolean)
  parent: Discord.Audio.Streams.InputStream
  langs:
  - csharp
  - vb
  name: WriteHeader(UInt16, UInt32, Boolean)
  nameWithType: InputStream.WriteHeader(UInt16, UInt32, Boolean)
  fullName: Discord.Audio.Streams.InputStream.WriteHeader(System.UInt16, System.UInt32, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Audio/Streams/InputStream.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: WriteHeader
    path: ../src/Discord.Net.WebSocket/Audio/Streams/InputStream.cs
    startLine: 62
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.Audio.Streams
  syntax:
    content: public override void WriteHeader(ushort seq, uint timestamp, bool missed)
    parameters:
    - id: seq
      type: System.UInt16
    - id: timestamp
      type: System.UInt32
    - id: missed
      type: System.Boolean
    content.vb: Public Overrides Sub WriteHeader(seq As UShort, timestamp As UInteger, missed As Boolean)
  overridden: Discord.Audio.AudioStream.WriteHeader(System.UInt16,System.UInt32,System.Boolean)
  overload: Discord.Audio.Streams.InputStream.WriteHeader*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.Audio.Streams.InputStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:Discord.Audio.Streams.InputStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: Discord.Audio.Streams.InputStream
  langs:
  - csharp
  - vb
  name: WriteAsync(Byte[], Int32, Int32, CancellationToken)
  nameWithType: InputStream.WriteAsync(Byte[], Int32, Int32, CancellationToken)
  fullName: Discord.Audio.Streams.InputStream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Audio/Streams/InputStream.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: WriteAsync
    path: ../src/Discord.Net.WebSocket/Audio/Streams/InputStream.cs
    startLine: 71
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.Audio.Streams
  syntax:
    content: public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancelToken)
    parameters:
    - id: buffer
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: count
      type: System.Int32
    - id: cancelToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Overrides Function WriteAsync(buffer As Byte(), offset As Integer, count As Integer, cancelToken As CancellationToken) As Task
  overridden: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  overload: Discord.Audio.Streams.InputStream.WriteAsync*
  nameWithType.vb: InputStream.WriteAsync(Byte(), Int32, Int32, CancellationToken)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Discord.Audio.Streams.InputStream.WriteAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: WriteAsync(Byte(), Int32, Int32, CancellationToken)
- uid: Discord.Audio.Streams.InputStream.Dispose(System.Boolean)
  commentId: M:Discord.Audio.Streams.InputStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Discord.Audio.Streams.InputStream
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: InputStream.Dispose(Boolean)
  fullName: Discord.Audio.Streams.InputStream.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Audio/Streams/InputStream.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Dispose
    path: ../src/Discord.Net.WebSocket/Audio/Streams/InputStream.cs
    startLine: 96
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.Audio.Streams
  syntax:
    content: protected override void Dispose(bool isDisposing)
    parameters:
    - id: isDisposing
      type: System.Boolean
    content.vb: Protected Overrides Sub Dispose(isDisposing As Boolean)
  overridden: System.IO.Stream.Dispose(System.Boolean)
  overload: Discord.Audio.Streams.InputStream.Dispose*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: Discord.Audio.Streams
  commentId: N:Discord.Audio.Streams
  name: Discord.Audio.Streams
  nameWithType: Discord.Audio.Streams
  fullName: Discord.Audio.Streams
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: Discord.Audio.AudioStream
  commentId: T:Discord.Audio.AudioStream
  parent: Discord.Audio
  name: AudioStream
  nameWithType: AudioStream
  fullName: Discord.Audio.AudioStream
- uid: Discord.Audio.AudioInStream
  commentId: T:Discord.Audio.AudioInStream
  parent: Discord.Audio
  name: AudioInStream
  nameWithType: AudioInStream
  fullName: Discord.Audio.AudioInStream
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Discord.Audio.AudioInStream.FlushAsync(System.Threading.CancellationToken)
  commentId: M:Discord.Audio.AudioInStream.FlushAsync(System.Threading.CancellationToken)
  parent: Discord.Audio.AudioInStream
  isExternal: true
  name: FlushAsync(CancellationToken)
  nameWithType: AudioInStream.FlushAsync(CancellationToken)
  fullName: Discord.Audio.AudioInStream.FlushAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Discord.Audio.AudioInStream.FlushAsync(System.Threading.CancellationToken)
    name: FlushAsync
    nameWithType: AudioInStream.FlushAsync
    fullName: Discord.Audio.AudioInStream.FlushAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Audio.AudioInStream.FlushAsync(System.Threading.CancellationToken)
    name: FlushAsync
    nameWithType: AudioInStream.FlushAsync
    fullName: Discord.Audio.AudioInStream.FlushAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Audio.AudioStream.Write(System.Byte[],System.Int32,System.Int32)
  commentId: M:Discord.Audio.AudioStream.Write(System.Byte[],System.Int32,System.Int32)
  parent: Discord.Audio.AudioStream
  isExternal: true
  name: Write(Byte[], Int32, Int32)
  nameWithType: AudioStream.Write(Byte[], Int32, Int32)
  fullName: Discord.Audio.AudioStream.Write(System.Byte[], System.Int32, System.Int32)
  nameWithType.vb: AudioStream.Write(Byte(), Int32, Int32)
  fullName.vb: Discord.Audio.AudioStream.Write(System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Byte(), Int32, Int32)
  spec.csharp:
  - uid: Discord.Audio.AudioStream.Write(System.Byte[],System.Int32,System.Int32)
    name: Write
    nameWithType: AudioStream.Write
    fullName: Discord.Audio.AudioStream.Write
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Audio.AudioStream.Write(System.Byte[],System.Int32,System.Int32)
    name: Write
    nameWithType: AudioStream.Write
    fullName: Discord.Audio.AudioStream.Write
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Audio.AudioStream.Flush
  commentId: M:Discord.Audio.AudioStream.Flush
  parent: Discord.Audio.AudioStream
  name: Flush()
  nameWithType: AudioStream.Flush()
  fullName: Discord.Audio.AudioStream.Flush()
  spec.csharp:
  - uid: Discord.Audio.AudioStream.Flush
    name: Flush
    nameWithType: AudioStream.Flush
    fullName: Discord.Audio.AudioStream.Flush
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Audio.AudioStream.Flush
    name: Flush
    nameWithType: AudioStream.Flush
    fullName: Discord.Audio.AudioStream.Flush
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Audio.AudioStream.Clear
  commentId: M:Discord.Audio.AudioStream.Clear
  parent: Discord.Audio.AudioStream
  name: Clear()
  nameWithType: AudioStream.Clear()
  fullName: Discord.Audio.AudioStream.Clear()
  spec.csharp:
  - uid: Discord.Audio.AudioStream.Clear
    name: Clear
    nameWithType: AudioStream.Clear
    fullName: Discord.Audio.AudioStream.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Audio.AudioStream.Clear
    name: Clear
    nameWithType: AudioStream.Clear
    fullName: Discord.Audio.AudioStream.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Audio.AudioStream.ClearAsync(System.Threading.CancellationToken)
  commentId: M:Discord.Audio.AudioStream.ClearAsync(System.Threading.CancellationToken)
  parent: Discord.Audio.AudioStream
  isExternal: true
  name: ClearAsync(CancellationToken)
  nameWithType: AudioStream.ClearAsync(CancellationToken)
  fullName: Discord.Audio.AudioStream.ClearAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Discord.Audio.AudioStream.ClearAsync(System.Threading.CancellationToken)
    name: ClearAsync
    nameWithType: AudioStream.ClearAsync
    fullName: Discord.Audio.AudioStream.ClearAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Audio.AudioStream.ClearAsync(System.Threading.CancellationToken)
    name: ClearAsync
    nameWithType: AudioStream.ClearAsync
    fullName: Discord.Audio.AudioStream.ClearAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Audio.AudioStream.Length
  commentId: P:Discord.Audio.AudioStream.Length
  parent: Discord.Audio.AudioStream
  name: Length
  nameWithType: AudioStream.Length
  fullName: Discord.Audio.AudioStream.Length
- uid: Discord.Audio.AudioStream.Position
  commentId: P:Discord.Audio.AudioStream.Position
  parent: Discord.Audio.AudioStream
  name: Position
  nameWithType: AudioStream.Position
  fullName: Discord.Audio.AudioStream.Position
- uid: Discord.Audio.AudioStream.Read(System.Byte[],System.Int32,System.Int32)
  commentId: M:Discord.Audio.AudioStream.Read(System.Byte[],System.Int32,System.Int32)
  parent: Discord.Audio.AudioStream
  isExternal: true
  name: Read(Byte[], Int32, Int32)
  nameWithType: AudioStream.Read(Byte[], Int32, Int32)
  fullName: Discord.Audio.AudioStream.Read(System.Byte[], System.Int32, System.Int32)
  nameWithType.vb: AudioStream.Read(Byte(), Int32, Int32)
  fullName.vb: Discord.Audio.AudioStream.Read(System.Byte(), System.Int32, System.Int32)
  name.vb: Read(Byte(), Int32, Int32)
  spec.csharp:
  - uid: Discord.Audio.AudioStream.Read(System.Byte[],System.Int32,System.Int32)
    name: Read
    nameWithType: AudioStream.Read
    fullName: Discord.Audio.AudioStream.Read
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Audio.AudioStream.Read(System.Byte[],System.Int32,System.Int32)
    name: Read
    nameWithType: AudioStream.Read
    fullName: Discord.Audio.AudioStream.Read
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Audio.AudioStream.SetLength(System.Int64)
  commentId: M:Discord.Audio.AudioStream.SetLength(System.Int64)
  parent: Discord.Audio.AudioStream
  isExternal: true
  name: SetLength(Int64)
  nameWithType: AudioStream.SetLength(Int64)
  fullName: Discord.Audio.AudioStream.SetLength(System.Int64)
  spec.csharp:
  - uid: Discord.Audio.AudioStream.SetLength(System.Int64)
    name: SetLength
    nameWithType: AudioStream.SetLength
    fullName: Discord.Audio.AudioStream.SetLength
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Audio.AudioStream.SetLength(System.Int64)
    name: SetLength
    nameWithType: AudioStream.SetLength
    fullName: Discord.Audio.AudioStream.SetLength
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Audio.AudioStream.Seek(System.Int64,System.IO.SeekOrigin)
  commentId: M:Discord.Audio.AudioStream.Seek(System.Int64,System.IO.SeekOrigin)
  parent: Discord.Audio.AudioStream
  isExternal: true
  name: Seek(Int64, SeekOrigin)
  nameWithType: AudioStream.Seek(Int64, SeekOrigin)
  fullName: Discord.Audio.AudioStream.Seek(System.Int64, System.IO.SeekOrigin)
  spec.csharp:
  - uid: Discord.Audio.AudioStream.Seek(System.Int64,System.IO.SeekOrigin)
    name: Seek
    nameWithType: AudioStream.Seek
    fullName: Discord.Audio.AudioStream.Seek
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.SeekOrigin
    name: SeekOrigin
    nameWithType: SeekOrigin
    fullName: System.IO.SeekOrigin
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Audio.AudioStream.Seek(System.Int64,System.IO.SeekOrigin)
    name: Seek
    nameWithType: AudioStream.Seek
    fullName: Discord.Audio.AudioStream.Seek
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.SeekOrigin
    name: SeekOrigin
    nameWithType: SeekOrigin
    fullName: System.IO.SeekOrigin
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.Null
  commentId: F:System.IO.Stream.Null
  parent: System.IO.Stream
  isExternal: true
  name: "Null"
  nameWithType: Stream.Null
  fullName: System.IO.Stream.Null
- uid: System.IO.Stream.CopyTo(System.IO.Stream)
  commentId: M:System.IO.Stream.CopyTo(System.IO.Stream)
  parent: System.IO.Stream
  isExternal: true
  name: CopyTo(Stream)
  nameWithType: Stream.CopyTo(Stream)
  fullName: System.IO.Stream.CopyTo(System.IO.Stream)
  spec.csharp:
  - uid: System.IO.Stream.CopyTo(System.IO.Stream)
    name: CopyTo
    nameWithType: Stream.CopyTo
    fullName: System.IO.Stream.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyTo(System.IO.Stream)
    name: CopyTo
    nameWithType: Stream.CopyTo
    fullName: System.IO.Stream.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
  commentId: M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: CopyTo(Stream, Int32)
  nameWithType: Stream.CopyTo(Stream, Int32)
  fullName: System.IO.Stream.CopyTo(System.IO.Stream, System.Int32)
  spec.csharp:
  - uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
    name: CopyTo
    nameWithType: Stream.CopyTo
    fullName: System.IO.Stream.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
    name: CopyTo
    nameWithType: Stream.CopyTo
    fullName: System.IO.Stream.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream)
  commentId: M:System.IO.Stream.CopyToAsync(System.IO.Stream)
  parent: System.IO.Stream
  isExternal: true
  name: CopyToAsync(Stream)
  nameWithType: Stream.CopyToAsync(Stream)
  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream)
  spec.csharp:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream)
    name: CopyToAsync
    nameWithType: Stream.CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream)
    name: CopyToAsync
    nameWithType: Stream.CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
  commentId: M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: CopyToAsync(Stream, Int32)
  nameWithType: Stream.CopyToAsync(Stream, Int32)
  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32)
  spec.csharp:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
    name: CopyToAsync
    nameWithType: Stream.CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
    name: CopyToAsync
    nameWithType: Stream.CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: CopyToAsync(Stream, Int32, CancellationToken)
  nameWithType: Stream.CopyToAsync(Stream, Int32, CancellationToken)
  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
    name: CopyToAsync
    nameWithType: Stream.CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
    name: CopyToAsync
    nameWithType: Stream.CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.Dispose
  commentId: M:System.IO.Stream.Dispose
  parent: System.IO.Stream
  isExternal: true
  name: Dispose()
  nameWithType: Stream.Dispose()
  fullName: System.IO.Stream.Dispose()
  spec.csharp:
  - uid: System.IO.Stream.Dispose
    name: Dispose
    nameWithType: Stream.Dispose
    fullName: System.IO.Stream.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Dispose
    name: Dispose
    nameWithType: Stream.Dispose
    fullName: System.IO.Stream.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.FlushAsync
  commentId: M:System.IO.Stream.FlushAsync
  parent: System.IO.Stream
  isExternal: true
  name: FlushAsync()
  nameWithType: Stream.FlushAsync()
  fullName: System.IO.Stream.FlushAsync()
  spec.csharp:
  - uid: System.IO.Stream.FlushAsync
    name: FlushAsync
    nameWithType: Stream.FlushAsync
    fullName: System.IO.Stream.FlushAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.FlushAsync
    name: FlushAsync
    nameWithType: Stream.FlushAsync
    fullName: System.IO.Stream.FlushAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: ReadAsync(Byte[], Int32, Int32)
  nameWithType: Stream.ReadAsync(Byte[], Int32, Int32)
  fullName: System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32)
  nameWithType.vb: Stream.ReadAsync(Byte(), Int32, Int32)
  fullName.vb: System.IO.Stream.ReadAsync(System.Byte(), System.Int32, System.Int32)
  name.vb: ReadAsync(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
    name: ReadAsync
    nameWithType: Stream.ReadAsync
    fullName: System.IO.Stream.ReadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
    name: ReadAsync
    nameWithType: Stream.ReadAsync
    fullName: System.IO.Stream.ReadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.ReadByte
  commentId: M:System.IO.Stream.ReadByte
  parent: System.IO.Stream
  isExternal: true
  name: ReadByte()
  nameWithType: Stream.ReadByte()
  fullName: System.IO.Stream.ReadByte()
  spec.csharp:
  - uid: System.IO.Stream.ReadByte
    name: ReadByte
    nameWithType: Stream.ReadByte
    fullName: System.IO.Stream.ReadByte
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadByte
    name: ReadByte
    nameWithType: Stream.ReadByte
    fullName: System.IO.Stream.ReadByte
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: WriteAsync(Byte[], Int32, Int32)
  nameWithType: Stream.WriteAsync(Byte[], Int32, Int32)
  fullName: System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32)
  nameWithType.vb: Stream.WriteAsync(Byte(), Int32, Int32)
  fullName.vb: System.IO.Stream.WriteAsync(System.Byte(), System.Int32, System.Int32)
  name.vb: WriteAsync(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
    name: WriteAsync
    nameWithType: Stream.WriteAsync
    fullName: System.IO.Stream.WriteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
    name: WriteAsync
    nameWithType: Stream.WriteAsync
    fullName: System.IO.Stream.WriteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.WriteByte(System.Byte)
  commentId: M:System.IO.Stream.WriteByte(System.Byte)
  parent: System.IO.Stream
  isExternal: true
  name: WriteByte(Byte)
  nameWithType: Stream.WriteByte(Byte)
  fullName: System.IO.Stream.WriteByte(System.Byte)
  spec.csharp:
  - uid: System.IO.Stream.WriteByte(System.Byte)
    name: WriteByte
    nameWithType: Stream.WriteByte
    fullName: System.IO.Stream.WriteByte
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.WriteByte(System.Byte)
    name: WriteByte
    nameWithType: Stream.WriteByte
    fullName: System.IO.Stream.WriteByte
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream.CanTimeout
  commentId: P:System.IO.Stream.CanTimeout
  parent: System.IO.Stream
  isExternal: true
  name: CanTimeout
  nameWithType: Stream.CanTimeout
  fullName: System.IO.Stream.CanTimeout
- uid: System.IO.Stream.ReadTimeout
  commentId: P:System.IO.Stream.ReadTimeout
  parent: System.IO.Stream
  isExternal: true
  name: ReadTimeout
  nameWithType: Stream.ReadTimeout
  fullName: System.IO.Stream.ReadTimeout
- uid: System.IO.Stream.WriteTimeout
  commentId: P:System.IO.Stream.WriteTimeout
  parent: System.IO.Stream
  isExternal: true
  name: WriteTimeout
  nameWithType: Stream.WriteTimeout
  fullName: System.IO.Stream.WriteTimeout
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Discord.Audio
  commentId: N:Discord.Audio
  name: Discord.Audio
  nameWithType: Discord.Audio
  fullName: Discord.Audio
- uid: Discord.Audio.AudioInStream.CanRead
  commentId: P:Discord.Audio.AudioInStream.CanRead
  parent: Discord.Audio.AudioInStream
  name: CanRead
  nameWithType: AudioInStream.CanRead
  fullName: Discord.Audio.AudioInStream.CanRead
- uid: Discord.Audio.Streams.InputStream.CanRead*
  commentId: Overload:Discord.Audio.Streams.InputStream.CanRead
  name: CanRead
  nameWithType: InputStream.CanRead
  fullName: Discord.Audio.Streams.InputStream.CanRead
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.Audio.AudioStream.CanSeek
  commentId: P:Discord.Audio.AudioStream.CanSeek
  parent: Discord.Audio.AudioStream
  name: CanSeek
  nameWithType: AudioStream.CanSeek
  fullName: Discord.Audio.AudioStream.CanSeek
- uid: Discord.Audio.Streams.InputStream.CanSeek*
  commentId: Overload:Discord.Audio.Streams.InputStream.CanSeek
  name: CanSeek
  nameWithType: InputStream.CanSeek
  fullName: Discord.Audio.Streams.InputStream.CanSeek
- uid: Discord.Audio.AudioInStream.CanWrite
  commentId: P:Discord.Audio.AudioInStream.CanWrite
  parent: Discord.Audio.AudioInStream
  name: CanWrite
  nameWithType: AudioInStream.CanWrite
  fullName: Discord.Audio.AudioInStream.CanWrite
- uid: Discord.Audio.Streams.InputStream.CanWrite*
  commentId: Overload:Discord.Audio.Streams.InputStream.CanWrite
  name: CanWrite
  nameWithType: InputStream.CanWrite
  fullName: Discord.Audio.Streams.InputStream.CanWrite
- uid: Discord.Audio.AudioInStream.AvailableFrames
  commentId: P:Discord.Audio.AudioInStream.AvailableFrames
  parent: Discord.Audio.AudioInStream
  name: AvailableFrames
  nameWithType: AudioInStream.AvailableFrames
  fullName: Discord.Audio.AudioInStream.AvailableFrames
- uid: Discord.Audio.Streams.InputStream.AvailableFrames*
  commentId: Overload:Discord.Audio.Streams.InputStream.AvailableFrames
  name: AvailableFrames
  nameWithType: InputStream.AvailableFrames
  fullName: Discord.Audio.Streams.InputStream.AvailableFrames
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Discord.Audio.Streams.InputStream.#ctor*
  commentId: Overload:Discord.Audio.Streams.InputStream.#ctor
  name: InputStream
  nameWithType: InputStream.InputStream
  fullName: Discord.Audio.Streams.InputStream.InputStream
- uid: Discord.Audio.AudioInStream.TryReadFrame(System.Threading.CancellationToken,Discord.Audio.RTPFrame@)
  commentId: M:Discord.Audio.AudioInStream.TryReadFrame(System.Threading.CancellationToken,Discord.Audio.RTPFrame@)
  parent: Discord.Audio.AudioInStream
  isExternal: true
  name: TryReadFrame(CancellationToken, RTPFrame)
  nameWithType: AudioInStream.TryReadFrame(CancellationToken, RTPFrame)
  fullName: Discord.Audio.AudioInStream.TryReadFrame(System.Threading.CancellationToken, Discord.Audio.RTPFrame)
  spec.csharp:
  - uid: Discord.Audio.AudioInStream.TryReadFrame(System.Threading.CancellationToken,Discord.Audio.RTPFrame@)
    name: TryReadFrame
    nameWithType: AudioInStream.TryReadFrame
    fullName: Discord.Audio.AudioInStream.TryReadFrame
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Audio.RTPFrame
    name: RTPFrame
    nameWithType: RTPFrame
    fullName: Discord.Audio.RTPFrame
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Audio.AudioInStream.TryReadFrame(System.Threading.CancellationToken,Discord.Audio.RTPFrame@)
    name: TryReadFrame
    nameWithType: AudioInStream.TryReadFrame
    fullName: Discord.Audio.AudioInStream.TryReadFrame
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Audio.RTPFrame
    name: RTPFrame
    nameWithType: RTPFrame
    fullName: Discord.Audio.RTPFrame
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Audio.Streams.InputStream.TryReadFrame*
  commentId: Overload:Discord.Audio.Streams.InputStream.TryReadFrame
  name: TryReadFrame
  nameWithType: InputStream.TryReadFrame
  fullName: Discord.Audio.Streams.InputStream.TryReadFrame
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: Discord.Audio.RTPFrame
  commentId: T:Discord.Audio.RTPFrame
  parent: Discord.Audio
  name: RTPFrame
  nameWithType: RTPFrame
  fullName: Discord.Audio.RTPFrame
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: ReadAsync(Byte[], Int32, Int32, CancellationToken)
  nameWithType: Stream.ReadAsync(Byte[], Int32, Int32, CancellationToken)
  fullName: System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  nameWithType.vb: Stream.ReadAsync(Byte(), Int32, Int32, CancellationToken)
  fullName.vb: System.IO.Stream.ReadAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: ReadAsync(Byte(), Int32, Int32, CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: ReadAsync
    nameWithType: Stream.ReadAsync
    fullName: System.IO.Stream.ReadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: ReadAsync
    nameWithType: Stream.ReadAsync
    fullName: System.IO.Stream.ReadAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Audio.Streams.InputStream.ReadAsync*
  commentId: Overload:Discord.Audio.Streams.InputStream.ReadAsync
  name: ReadAsync
  nameWithType: InputStream.ReadAsync
  fullName: Discord.Audio.Streams.InputStream.ReadAsync
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Discord.Audio.AudioInStream.ReadFrameAsync(System.Threading.CancellationToken)
  commentId: M:Discord.Audio.AudioInStream.ReadFrameAsync(System.Threading.CancellationToken)
  parent: Discord.Audio.AudioInStream
  isExternal: true
  name: ReadFrameAsync(CancellationToken)
  nameWithType: AudioInStream.ReadFrameAsync(CancellationToken)
  fullName: Discord.Audio.AudioInStream.ReadFrameAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Discord.Audio.AudioInStream.ReadFrameAsync(System.Threading.CancellationToken)
    name: ReadFrameAsync
    nameWithType: AudioInStream.ReadFrameAsync
    fullName: Discord.Audio.AudioInStream.ReadFrameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Audio.AudioInStream.ReadFrameAsync(System.Threading.CancellationToken)
    name: ReadFrameAsync
    nameWithType: AudioInStream.ReadFrameAsync
    fullName: Discord.Audio.AudioInStream.ReadFrameAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Audio.Streams.InputStream.ReadFrameAsync*
  commentId: Overload:Discord.Audio.Streams.InputStream.ReadFrameAsync
  name: ReadFrameAsync
  nameWithType: InputStream.ReadFrameAsync
  fullName: Discord.Audio.Streams.InputStream.ReadFrameAsync
- uid: System.Threading.Tasks.Task{Discord.Audio.RTPFrame}
  commentId: T:System.Threading.Tasks.Task{Discord.Audio.RTPFrame}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RTPFrame>
  nameWithType: Task<RTPFrame>
  fullName: System.Threading.Tasks.Task<Discord.Audio.RTPFrame>
  nameWithType.vb: Task(Of RTPFrame)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.Audio.RTPFrame)
  name.vb: Task(Of RTPFrame)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Audio.RTPFrame
    name: RTPFrame
    nameWithType: RTPFrame
    fullName: Discord.Audio.RTPFrame
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Audio.RTPFrame
    name: RTPFrame
    nameWithType: RTPFrame
    fullName: Discord.Audio.RTPFrame
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Audio.AudioStream.WriteHeader(System.UInt16,System.UInt32,System.Boolean)
  commentId: M:Discord.Audio.AudioStream.WriteHeader(System.UInt16,System.UInt32,System.Boolean)
  parent: Discord.Audio.AudioStream
  isExternal: true
  name: WriteHeader(UInt16, UInt32, Boolean)
  nameWithType: AudioStream.WriteHeader(UInt16, UInt32, Boolean)
  fullName: Discord.Audio.AudioStream.WriteHeader(System.UInt16, System.UInt32, System.Boolean)
  spec.csharp:
  - uid: Discord.Audio.AudioStream.WriteHeader(System.UInt16,System.UInt32,System.Boolean)
    name: WriteHeader
    nameWithType: AudioStream.WriteHeader
    fullName: Discord.Audio.AudioStream.WriteHeader
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Audio.AudioStream.WriteHeader(System.UInt16,System.UInt32,System.Boolean)
    name: WriteHeader
    nameWithType: AudioStream.WriteHeader
    fullName: Discord.Audio.AudioStream.WriteHeader
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Audio.Streams.InputStream.WriteHeader*
  commentId: Overload:Discord.Audio.Streams.InputStream.WriteHeader
  name: WriteHeader
  nameWithType: InputStream.WriteHeader
  fullName: Discord.Audio.Streams.InputStream.WriteHeader
- uid: System.UInt16
  commentId: T:System.UInt16
  parent: System
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: WriteAsync(Byte[], Int32, Int32, CancellationToken)
  nameWithType: Stream.WriteAsync(Byte[], Int32, Int32, CancellationToken)
  fullName: System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  nameWithType.vb: Stream.WriteAsync(Byte(), Int32, Int32, CancellationToken)
  fullName.vb: System.IO.Stream.WriteAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: WriteAsync(Byte(), Int32, Int32, CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: WriteAsync
    nameWithType: Stream.WriteAsync
    fullName: System.IO.Stream.WriteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: WriteAsync
    nameWithType: Stream.WriteAsync
    fullName: System.IO.Stream.WriteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Audio.Streams.InputStream.WriteAsync*
  commentId: Overload:Discord.Audio.Streams.InputStream.WriteAsync
  name: WriteAsync
  nameWithType: InputStream.WriteAsync
  fullName: Discord.Audio.Streams.InputStream.WriteAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.IO.Stream.Dispose(System.Boolean)
  commentId: M:System.IO.Stream.Dispose(System.Boolean)
  parent: System.IO.Stream
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: Stream.Dispose(Boolean)
  fullName: System.IO.Stream.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.IO.Stream.Dispose(System.Boolean)
    name: Dispose
    nameWithType: Stream.Dispose
    fullName: System.IO.Stream.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Dispose(System.Boolean)
    name: Dispose
    nameWithType: Stream.Dispose
    fullName: System.IO.Stream.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Audio.Streams.InputStream.Dispose*
  commentId: Overload:Discord.Audio.Streams.InputStream.Dispose
  name: Dispose
  nameWithType: InputStream.Dispose
  fullName: Discord.Audio.Streams.InputStream.Dispose
