### YamlMime:ManagedReference
items:
- uid: Discord.Rest.RestVoiceRegion
  commentId: T:Discord.Rest.RestVoiceRegion
  id: RestVoiceRegion
  parent: Discord.Rest
  children:
  - Discord.Rest.RestVoiceRegion.IsCustom
  - Discord.Rest.RestVoiceRegion.IsDeprecated
  - Discord.Rest.RestVoiceRegion.IsOptimal
  - Discord.Rest.RestVoiceRegion.IsVip
  - Discord.Rest.RestVoiceRegion.Name
  - Discord.Rest.RestVoiceRegion.ToString
  langs:
  - csharp
  - vb
  name: RestVoiceRegion
  nameWithType: RestVoiceRegion
  fullName: Discord.Rest.RestVoiceRegion
  type: Class
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestVoiceRegion.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RestVoiceRegion
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestVoiceRegion.cs
    startLine: 9
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nRepresents a REST-based voice region.\n"
  example: []
  syntax:
    content: 'public class RestVoiceRegion : RestEntity<string>, IEntity<string>, IVoiceRegion'
    content.vb: >-
      Public Class RestVoiceRegion
          Inherits RestEntity(Of String)
          Implements IEntity(Of String), IVoiceRegion
  inheritance:
  - System.Object
  - Discord.Rest.RestEntity{System.String}
  implements:
  - Discord.IEntity{System.String}
  - Discord.IVoiceRegion
  inheritedMembers:
  - Discord.Rest.RestEntity{System.String}.Id
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.Rest.RestVoiceRegion.Name
  commentId: P:Discord.Rest.RestVoiceRegion.Name
  id: Name
  parent: Discord.Rest.RestVoiceRegion
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: RestVoiceRegion.Name
  fullName: Discord.Rest.RestVoiceRegion.Name
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestVoiceRegion.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Name
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestVoiceRegion.cs
    startLine: 13
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the name of this voice region.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA string that represents the human-readable name of this voice region (e.g. <code>Central Europe</code>).\n"
    content.vb: Public ReadOnly Property Name As String
  overload: Discord.Rest.RestVoiceRegion.Name*
  implements:
  - Discord.IVoiceRegion.Name
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestVoiceRegion.IsVip
  commentId: P:Discord.Rest.RestVoiceRegion.IsVip
  id: IsVip
  parent: Discord.Rest.RestVoiceRegion
  langs:
  - csharp
  - vb
  name: IsVip
  nameWithType: RestVoiceRegion.IsVip
  fullName: Discord.Rest.RestVoiceRegion.IsVip
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestVoiceRegion.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsVip
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestVoiceRegion.cs
    startLine: 15
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a value that indicates whether or not this voice region is exclusive to partnered servers.\n"
  example: []
  syntax:
    content: public bool IsVip { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this voice region is exclusive to VIP accounts; otherwise <code>false</code>.\n"
    content.vb: Public ReadOnly Property IsVip As Boolean
  overload: Discord.Rest.RestVoiceRegion.IsVip*
  implements:
  - Discord.IVoiceRegion.IsVip
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestVoiceRegion.IsOptimal
  commentId: P:Discord.Rest.RestVoiceRegion.IsOptimal
  id: IsOptimal
  parent: Discord.Rest.RestVoiceRegion
  langs:
  - csharp
  - vb
  name: IsOptimal
  nameWithType: RestVoiceRegion.IsOptimal
  fullName: Discord.Rest.RestVoiceRegion.IsOptimal
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestVoiceRegion.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsOptimal
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestVoiceRegion.cs
    startLine: 17
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a value that indicates whether this voice region is optimal for your client in terms of latency.\n"
  example: []
  syntax:
    content: public bool IsOptimal { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this voice region is the closest to your machine; otherwise <code>false</code> .\n"
    content.vb: Public ReadOnly Property IsOptimal As Boolean
  overload: Discord.Rest.RestVoiceRegion.IsOptimal*
  implements:
  - Discord.IVoiceRegion.IsOptimal
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestVoiceRegion.IsDeprecated
  commentId: P:Discord.Rest.RestVoiceRegion.IsDeprecated
  id: IsDeprecated
  parent: Discord.Rest.RestVoiceRegion
  langs:
  - csharp
  - vb
  name: IsDeprecated
  nameWithType: RestVoiceRegion.IsDeprecated
  fullName: Discord.Rest.RestVoiceRegion.IsDeprecated
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestVoiceRegion.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsDeprecated
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestVoiceRegion.cs
    startLine: 19
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a value that indicates whether this voice region is no longer being maintained.\n"
  example: []
  syntax:
    content: public bool IsDeprecated { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this is a deprecated voice region; otherwise <code>false</code>.\n"
    content.vb: Public ReadOnly Property IsDeprecated As Boolean
  overload: Discord.Rest.RestVoiceRegion.IsDeprecated*
  implements:
  - Discord.IVoiceRegion.IsDeprecated
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestVoiceRegion.IsCustom
  commentId: P:Discord.Rest.RestVoiceRegion.IsCustom
  id: IsCustom
  parent: Discord.Rest.RestVoiceRegion
  langs:
  - csharp
  - vb
  name: IsCustom
  nameWithType: RestVoiceRegion.IsCustom
  fullName: Discord.Rest.RestVoiceRegion.IsCustom
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestVoiceRegion.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsCustom
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestVoiceRegion.cs
    startLine: 21
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a value that indicates whether this voice region is custom-made for events.\n"
  example: []
  syntax:
    content: public bool IsCustom { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this is a custom voice region (used for events/etc); otherwise <code>false</code>/\n"
    content.vb: Public ReadOnly Property IsCustom As Boolean
  overload: Discord.Rest.RestVoiceRegion.IsCustom*
  implements:
  - Discord.IVoiceRegion.IsCustom
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestVoiceRegion.ToString
  commentId: M:Discord.Rest.RestVoiceRegion.ToString
  id: ToString
  parent: Discord.Rest.RestVoiceRegion
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: RestVoiceRegion.ToString()
  fullName: Discord.Rest.RestVoiceRegion.ToString()
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Guilds/RestVoiceRegion.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ToString
    path: ../src/Discord.Net.Rest/Entities/Guilds/RestVoiceRegion.cs
    startLine: 42
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Discord.Rest.RestVoiceRegion.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Discord.Rest
  commentId: N:Discord.Rest
  name: Discord.Rest
  nameWithType: Discord.Rest
  fullName: Discord.Rest
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Rest.RestEntity{System.String}
  commentId: T:Discord.Rest.RestEntity{System.String}
  parent: Discord.Rest
  definition: Discord.Rest.RestEntity`1
  name: RestEntity<String>
  nameWithType: RestEntity<String>
  fullName: Discord.Rest.RestEntity<System.String>
  nameWithType.vb: RestEntity(Of String)
  fullName.vb: Discord.Rest.RestEntity(Of System.String)
  name.vb: RestEntity(Of String)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IEntity{System.String}
  commentId: T:Discord.IEntity{System.String}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<String>
  nameWithType: IEntity<String>
  fullName: Discord.IEntity<System.String>
  nameWithType.vb: IEntity(Of String)
  fullName.vb: Discord.IEntity(Of System.String)
  name.vb: IEntity(Of String)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IVoiceRegion
  commentId: T:Discord.IVoiceRegion
  parent: Discord
  name: IVoiceRegion
  nameWithType: IVoiceRegion
  fullName: Discord.IVoiceRegion
- uid: Discord.Rest.RestEntity{System.String}.Id
  commentId: P:Discord.Rest.RestEntity{System.String}.Id
  parent: Discord.Rest.RestEntity{System.String}
  definition: Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<String>.Id
  fullName: Discord.Rest.RestEntity<System.String>.Id
  nameWithType.vb: RestEntity(Of String).Id
  fullName.vb: Discord.Rest.RestEntity(Of System.String).Id
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Rest.RestEntity`1
  commentId: T:Discord.Rest.RestEntity`1
  name: RestEntity<T>
  nameWithType: RestEntity<T>
  fullName: Discord.Rest.RestEntity<T>
  nameWithType.vb: RestEntity(Of T)
  fullName.vb: Discord.Rest.RestEntity(Of T)
  name.vb: RestEntity(Of T)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.Rest.RestEntity`1.Id
  commentId: P:Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<T>.Id
  fullName: Discord.Rest.RestEntity<T>.Id
  nameWithType.vb: RestEntity(Of T).Id
  fullName.vb: Discord.Rest.RestEntity(Of T).Id
- uid: Discord.Rest.RestVoiceRegion.Name*
  commentId: Overload:Discord.Rest.RestVoiceRegion.Name
  name: Name
  nameWithType: RestVoiceRegion.Name
  fullName: Discord.Rest.RestVoiceRegion.Name
- uid: Discord.IVoiceRegion.Name
  commentId: P:Discord.IVoiceRegion.Name
  parent: Discord.IVoiceRegion
  name: Name
  nameWithType: IVoiceRegion.Name
  fullName: Discord.IVoiceRegion.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.Rest.RestVoiceRegion.IsVip*
  commentId: Overload:Discord.Rest.RestVoiceRegion.IsVip
  name: IsVip
  nameWithType: RestVoiceRegion.IsVip
  fullName: Discord.Rest.RestVoiceRegion.IsVip
- uid: Discord.IVoiceRegion.IsVip
  commentId: P:Discord.IVoiceRegion.IsVip
  parent: Discord.IVoiceRegion
  name: IsVip
  nameWithType: IVoiceRegion.IsVip
  fullName: Discord.IVoiceRegion.IsVip
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.Rest.RestVoiceRegion.IsOptimal*
  commentId: Overload:Discord.Rest.RestVoiceRegion.IsOptimal
  name: IsOptimal
  nameWithType: RestVoiceRegion.IsOptimal
  fullName: Discord.Rest.RestVoiceRegion.IsOptimal
- uid: Discord.IVoiceRegion.IsOptimal
  commentId: P:Discord.IVoiceRegion.IsOptimal
  parent: Discord.IVoiceRegion
  name: IsOptimal
  nameWithType: IVoiceRegion.IsOptimal
  fullName: Discord.IVoiceRegion.IsOptimal
- uid: Discord.Rest.RestVoiceRegion.IsDeprecated*
  commentId: Overload:Discord.Rest.RestVoiceRegion.IsDeprecated
  name: IsDeprecated
  nameWithType: RestVoiceRegion.IsDeprecated
  fullName: Discord.Rest.RestVoiceRegion.IsDeprecated
- uid: Discord.IVoiceRegion.IsDeprecated
  commentId: P:Discord.IVoiceRegion.IsDeprecated
  parent: Discord.IVoiceRegion
  name: IsDeprecated
  nameWithType: IVoiceRegion.IsDeprecated
  fullName: Discord.IVoiceRegion.IsDeprecated
- uid: Discord.Rest.RestVoiceRegion.IsCustom*
  commentId: Overload:Discord.Rest.RestVoiceRegion.IsCustom
  name: IsCustom
  nameWithType: RestVoiceRegion.IsCustom
  fullName: Discord.Rest.RestVoiceRegion.IsCustom
- uid: Discord.IVoiceRegion.IsCustom
  commentId: P:Discord.IVoiceRegion.IsCustom
  parent: Discord.IVoiceRegion
  name: IsCustom
  nameWithType: IVoiceRegion.IsCustom
  fullName: Discord.IVoiceRegion.IsCustom
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestVoiceRegion.ToString*
  commentId: Overload:Discord.Rest.RestVoiceRegion.ToString
  name: ToString
  nameWithType: RestVoiceRegion.ToString
  fullName: Discord.Rest.RestVoiceRegion.ToString
