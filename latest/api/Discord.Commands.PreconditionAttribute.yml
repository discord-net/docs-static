### YamlMime:ManagedReference
items:
- uid: Discord.Commands.PreconditionAttribute
  commentId: T:Discord.Commands.PreconditionAttribute
  id: PreconditionAttribute
  parent: Discord.Commands
  children:
  - Discord.Commands.PreconditionAttribute.CheckPermissionsAsync(Discord.Commands.ICommandContext,Discord.Commands.CommandInfo,IServiceProvider)
  - Discord.Commands.PreconditionAttribute.ErrorMessage
  - Discord.Commands.PreconditionAttribute.Group
  langs:
  - csharp
  - vb
  name: PreconditionAttribute
  nameWithType: PreconditionAttribute
  fullName: Discord.Commands.PreconditionAttribute
  type: Class
  source:
    remote:
      path: src/Discord.Net.Commands/Attributes/PreconditionAttribute.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: PreconditionAttribute
    path: ../src/Discord.Net.Commands/Attributes/PreconditionAttribute.cs
    startLine: 9
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nRequires the module or class to pass the specified precondition before execution can begin.\n"
  example: []
  syntax:
    content: 'public abstract class PreconditionAttribute : Attribute'
    content.vb: >-
      Public MustInherit Class PreconditionAttribute
          Inherits Attribute
  seealso:
  - linkId: Discord.Commands.ParameterPreconditionAttribute
    commentId: T:Discord.Commands.ParameterPreconditionAttribute
  inheritance:
  - System.Object
  derivedClasses:
  - Discord.Commands.RequireBotPermissionAttribute
  - Discord.Commands.RequireContextAttribute
  - Discord.Commands.RequireNsfwAttribute
  - Discord.Commands.RequireOwnerAttribute
  - Discord.Commands.RequireUserPermissionAttribute
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Discord.Commands.PreconditionAttribute.Group
  commentId: P:Discord.Commands.PreconditionAttribute.Group
  id: Group
  parent: Discord.Commands.PreconditionAttribute
  langs:
  - csharp
  - vb
  name: Group
  nameWithType: PreconditionAttribute.Group
  fullName: Discord.Commands.PreconditionAttribute.Group
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Attributes/PreconditionAttribute.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Group
    path: ../src/Discord.Net.Commands/Attributes/PreconditionAttribute.cs
    startLine: 20
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nSpecifies a group that this precondition belongs to.\n"
  remarks: "\n<xref href=\"Discord.Preconditions\" data-throw-if-not-resolved=\"false\"></xref> of the same group require only one of the preconditions to pass in order to\nbe successful (A || B). Specifying <xref href=\"Discord.Commands.PreconditionAttribute.Group\" data-throw-if-not-resolved=\"false\"></xref> = <code>null</code> or not at all will\nrequire *all* preconditions to pass, just like normal (A &amp;&amp; B).\n"
  example: []
  syntax:
    content: public string Group { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Group As String
  overload: Discord.Commands.PreconditionAttribute.Group*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Discord.Commands.PreconditionAttribute.ErrorMessage
  commentId: P:Discord.Commands.PreconditionAttribute.ErrorMessage
  id: ErrorMessage
  parent: Discord.Commands.PreconditionAttribute
  langs:
  - csharp
  - vb
  name: ErrorMessage
  nameWithType: PreconditionAttribute.ErrorMessage
  fullName: Discord.Commands.PreconditionAttribute.ErrorMessage
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Attributes/PreconditionAttribute.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: ErrorMessage
    path: ../src/Discord.Net.Commands/Attributes/PreconditionAttribute.cs
    startLine: 28
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nWhen overridden in a derived class, uses the supplied string\nas the error message if the precondition doesn&apos;t pass.\nSetting this for a class that doesn&apos;t override\nthis property is a no-op.\n"
  example: []
  syntax:
    content: public virtual string ErrorMessage { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overridable Property ErrorMessage As String
  overload: Discord.Commands.PreconditionAttribute.ErrorMessage*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Discord.Commands.PreconditionAttribute.CheckPermissionsAsync(Discord.Commands.ICommandContext,Discord.Commands.CommandInfo,IServiceProvider)
  commentId: M:Discord.Commands.PreconditionAttribute.CheckPermissionsAsync(Discord.Commands.ICommandContext,Discord.Commands.CommandInfo,IServiceProvider)
  id: CheckPermissionsAsync(Discord.Commands.ICommandContext,Discord.Commands.CommandInfo,IServiceProvider)
  parent: Discord.Commands.PreconditionAttribute
  langs:
  - csharp
  - vb
  name: CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider)
  nameWithType: PreconditionAttribute.CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider)
  fullName: Discord.Commands.PreconditionAttribute.CheckPermissionsAsync(Discord.Commands.ICommandContext, Discord.Commands.CommandInfo, IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Commands/Attributes/PreconditionAttribute.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: CheckPermissionsAsync
    path: ../src/Discord.Net.Commands/Attributes/PreconditionAttribute.cs
    startLine: 36
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nChecks if the <code data-dev-comment-type=\"paramref\" class=\"paramref\">command</code> has the sufficient permission to be executed.\n"
  example: []
  syntax:
    content: public abstract Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services)
    parameters:
    - id: context
      type: Discord.Commands.ICommandContext
      description: The context of the command.
    - id: command
      type: Discord.Commands.CommandInfo
      description: The command being executed.
    - id: services
      type: IServiceProvider
      description: The service collection used for dependency injection.
    return:
      type: Task{Discord.Commands.PreconditionResult}
    content.vb: Public MustOverride Function CheckPermissionsAsync(context As ICommandContext, command As CommandInfo, services As IServiceProvider) As Task(Of PreconditionResult)
  overload: Discord.Commands.PreconditionAttribute.CheckPermissionsAsync*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: Discord.Commands.ParameterPreconditionAttribute
  commentId: T:Discord.Commands.ParameterPreconditionAttribute
  parent: Discord.Commands
  name: ParameterPreconditionAttribute
  nameWithType: ParameterPreconditionAttribute
  fullName: Discord.Commands.ParameterPreconditionAttribute
- uid: Discord.Commands
  commentId: N:Discord.Commands
  name: Discord.Commands
  nameWithType: Discord.Commands
  fullName: Discord.Commands
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Preconditions
  commentId: T:Discord.Preconditions
  isExternal: true
- uid: Discord.Commands.PreconditionAttribute.Group
  commentId: P:Discord.Commands.PreconditionAttribute.Group
  parent: Discord.Commands.PreconditionAttribute
  name: Group
  nameWithType: PreconditionAttribute.Group
  fullName: Discord.Commands.PreconditionAttribute.Group
- uid: Discord.Commands.PreconditionAttribute.Group*
  commentId: Overload:Discord.Commands.PreconditionAttribute.Group
  name: Group
  nameWithType: PreconditionAttribute.Group
  fullName: Discord.Commands.PreconditionAttribute.Group
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.Commands.PreconditionAttribute
  commentId: T:Discord.Commands.PreconditionAttribute
  parent: Discord.Commands
  name: PreconditionAttribute
  nameWithType: PreconditionAttribute
  fullName: Discord.Commands.PreconditionAttribute
- uid: Discord.Commands.PreconditionAttribute.ErrorMessage*
  commentId: Overload:Discord.Commands.PreconditionAttribute.ErrorMessage
  name: ErrorMessage
  nameWithType: PreconditionAttribute.ErrorMessage
  fullName: Discord.Commands.PreconditionAttribute.ErrorMessage
- uid: Discord.Commands.PreconditionAttribute.CheckPermissionsAsync*
  commentId: Overload:Discord.Commands.PreconditionAttribute.CheckPermissionsAsync
  name: CheckPermissionsAsync
  nameWithType: PreconditionAttribute.CheckPermissionsAsync
  fullName: Discord.Commands.PreconditionAttribute.CheckPermissionsAsync
- uid: Discord.Commands.ICommandContext
  commentId: T:Discord.Commands.ICommandContext
  parent: Discord.Commands
  name: ICommandContext
  nameWithType: ICommandContext
  fullName: Discord.Commands.ICommandContext
- uid: Discord.Commands.CommandInfo
  commentId: T:Discord.Commands.CommandInfo
  parent: Discord.Commands
  name: CommandInfo
  nameWithType: CommandInfo
  fullName: Discord.Commands.CommandInfo
- uid: IServiceProvider
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: IServiceProvider
- uid: Task{Discord.Commands.PreconditionResult}
  commentId: '!:Task{Discord.Commands.PreconditionResult}'
  definition: Task`1
  name: Task<PreconditionResult>
  nameWithType: Task<PreconditionResult>
  fullName: Task<Discord.Commands.PreconditionResult>
  nameWithType.vb: Task(Of PreconditionResult)
  fullName.vb: Task(Of Discord.Commands.PreconditionResult)
  name.vb: Task(Of PreconditionResult)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.PreconditionResult
    name: PreconditionResult
    nameWithType: PreconditionResult
    fullName: Discord.Commands.PreconditionResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.PreconditionResult
    name: PreconditionResult
    nameWithType: PreconditionResult
    fullName: Discord.Commands.PreconditionResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
