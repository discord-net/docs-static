### YamlMime:ManagedReference
items:
- uid: Discord.Rest.MemberRoleAuditLogData
  commentId: T:Discord.Rest.MemberRoleAuditLogData
  id: MemberRoleAuditLogData
  parent: Discord.Rest
  children:
  - Discord.Rest.MemberRoleAuditLogData.Roles
  - Discord.Rest.MemberRoleAuditLogData.Target
  langs:
  - csharp
  - vb
  name: MemberRoleAuditLogData
  nameWithType: MemberRoleAuditLogData
  fullName: Discord.Rest.MemberRoleAuditLogData
  type: Class
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/AuditLogs/DataTypes/MemberRoleAuditLogData.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: MemberRoleAuditLogData
    path: ../src/Discord.Net.Rest/Entities/AuditLogs/DataTypes/MemberRoleAuditLogData.cs
    startLine: 11
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nContains a piece of audit log data related to a change in a guild member&apos;s roles.\n"
  example: []
  syntax:
    content: 'public class MemberRoleAuditLogData : object, IAuditLogData'
    content.vb: >-
      Public Class MemberRoleAuditLogData
          Inherits Object
          Implements IAuditLogData
  inheritance:
  - System.Object
  implements:
  - Discord.IAuditLogData
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.Rest.MemberRoleAuditLogData.Roles
  commentId: P:Discord.Rest.MemberRoleAuditLogData.Roles
  id: Roles
  parent: Discord.Rest.MemberRoleAuditLogData
  langs:
  - csharp
  - vb
  name: Roles
  nameWithType: MemberRoleAuditLogData.Roles
  fullName: Discord.Rest.MemberRoleAuditLogData.Roles
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/AuditLogs/DataTypes/MemberRoleAuditLogData.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Roles
    path: ../src/Discord.Net.Rest/Entities/AuditLogs/DataTypes/MemberRoleAuditLogData.cs
    startLine: 41
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of role changes that were performed on the member.\n"
  example: []
  syntax:
    content: public IReadOnlyCollection<MemberRoleEditInfo> Roles { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.Rest.MemberRoleEditInfo}
      description: "\nA read-only collection of <xref href=\"Discord.Rest.MemberRoleEditInfo\" data-throw-if-not-resolved=\"false\"></xref>, containing the roles that were changed on\nthe member.\n"
    content.vb: Public ReadOnly Property Roles As IReadOnlyCollection(Of MemberRoleEditInfo)
  overload: Discord.Rest.MemberRoleAuditLogData.Roles*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.MemberRoleAuditLogData.Target
  commentId: P:Discord.Rest.MemberRoleAuditLogData.Target
  id: Target
  parent: Discord.Rest.MemberRoleAuditLogData
  langs:
  - csharp
  - vb
  name: Target
  nameWithType: MemberRoleAuditLogData.Target
  fullName: Discord.Rest.MemberRoleAuditLogData.Target
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/AuditLogs/DataTypes/MemberRoleAuditLogData.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Target
    path: ../src/Discord.Net.Rest/Entities/AuditLogs/DataTypes/MemberRoleAuditLogData.cs
    startLine: 48
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the user that the roles changes were performed on.\n"
  example: []
  syntax:
    content: public IUser Target { get; }
    parameters: []
    return:
      type: Discord.IUser
      description: "\nA user object representing the user that the role changes were performed on.\n"
    content.vb: Public ReadOnly Property Target As IUser
  overload: Discord.Rest.MemberRoleAuditLogData.Target*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Discord.Rest
  commentId: N:Discord.Rest
  name: Discord.Rest
  nameWithType: Discord.Rest
  fullName: Discord.Rest
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.IAuditLogData
  commentId: T:Discord.IAuditLogData
  parent: Discord
  name: IAuditLogData
  nameWithType: IAuditLogData
  fullName: Discord.IAuditLogData
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.Rest.MemberRoleEditInfo
  commentId: T:Discord.Rest.MemberRoleEditInfo
  name: MemberRoleEditInfo
  nameWithType: MemberRoleEditInfo
  fullName: Discord.Rest.MemberRoleEditInfo
- uid: Discord.Rest.MemberRoleAuditLogData.Roles*
  commentId: Overload:Discord.Rest.MemberRoleAuditLogData.Roles
  name: Roles
  nameWithType: MemberRoleAuditLogData.Roles
  fullName: Discord.Rest.MemberRoleAuditLogData.Roles
- uid: IReadOnlyCollection{Discord.Rest.MemberRoleEditInfo}
  commentId: '!:IReadOnlyCollection{Discord.Rest.MemberRoleEditInfo}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<MemberRoleEditInfo>
  nameWithType: IReadOnlyCollection<MemberRoleEditInfo>
  fullName: IReadOnlyCollection<Discord.Rest.MemberRoleEditInfo>
  nameWithType.vb: IReadOnlyCollection(Of MemberRoleEditInfo)
  fullName.vb: IReadOnlyCollection(Of Discord.Rest.MemberRoleEditInfo)
  name.vb: IReadOnlyCollection(Of MemberRoleEditInfo)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.MemberRoleEditInfo
    name: MemberRoleEditInfo
    nameWithType: MemberRoleEditInfo
    fullName: Discord.Rest.MemberRoleEditInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.MemberRoleEditInfo
    name: MemberRoleEditInfo
    nameWithType: MemberRoleEditInfo
    fullName: Discord.Rest.MemberRoleEditInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<>
  nameWithType: IReadOnlyCollection<>
  fullName: IReadOnlyCollection<>
  nameWithType.vb: IReadOnlyCollection(Of )
  fullName.vb: IReadOnlyCollection(Of )
  name.vb: IReadOnlyCollection(Of )
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.MemberRoleAuditLogData.Target*
  commentId: Overload:Discord.Rest.MemberRoleAuditLogData.Target
  name: Target
  nameWithType: MemberRoleAuditLogData.Target
  fullName: Discord.Rest.MemberRoleAuditLogData.Target
- uid: Discord.IUser
  commentId: T:Discord.IUser
  parent: Discord
  name: IUser
  nameWithType: IUser
  fullName: Discord.IUser
