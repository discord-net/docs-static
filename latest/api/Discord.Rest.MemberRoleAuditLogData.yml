### YamlMime:ManagedReference
items:
- uid: Discord.Rest.MemberRoleAuditLogData
  commentId: T:Discord.Rest.MemberRoleAuditLogData
  id: MemberRoleAuditLogData
  parent: Discord.Rest
  children:
  - Discord.Rest.MemberRoleAuditLogData.Roles
  - Discord.Rest.MemberRoleAuditLogData.Target
  langs:
  - csharp
  - vb
  name: MemberRoleAuditLogData
  nameWithType: MemberRoleAuditLogData
  fullName: Discord.Rest.MemberRoleAuditLogData
  type: Class
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/AuditLogs/DataTypes/MemberRoleAuditLogData.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: MemberRoleAuditLogData
    path: ../src/Discord.Net.Rest/Entities/AuditLogs/DataTypes/MemberRoleAuditLogData.cs
    startLine: 11
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nContains a piece of audit log data related to a change in a guild member&apos;s roles.\n"
  example: []
  syntax:
    content: 'public class MemberRoleAuditLogData : IAuditLogData'
    content.vb: >-
      Public Class MemberRoleAuditLogData
          Implements IAuditLogData
  inheritance:
  - System.Object
  implements:
  - Discord.IAuditLogData
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.Rest.MemberRoleAuditLogData.Roles
  commentId: P:Discord.Rest.MemberRoleAuditLogData.Roles
  id: Roles
  parent: Discord.Rest.MemberRoleAuditLogData
  langs:
  - csharp
  - vb
  name: Roles
  nameWithType: MemberRoleAuditLogData.Roles
  fullName: Discord.Rest.MemberRoleAuditLogData.Roles
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/AuditLogs/DataTypes/MemberRoleAuditLogData.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Roles
    path: ../src/Discord.Net.Rest/Entities/AuditLogs/DataTypes/MemberRoleAuditLogData.cs
    startLine: 41
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of role changes that were performed on the member.\n"
  example: []
  syntax:
    content: public IReadOnlyCollection<MemberRoleEditInfo> Roles { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.Rest.MemberRoleEditInfo}
      description: "\nA read-only collection of <xref href=\"Discord.Rest.MemberRoleEditInfo\" data-throw-if-not-resolved=\"false\"></xref>, containing the roles that were changed on\nthe member.\n"
    content.vb: Public ReadOnly Property Roles As IReadOnlyCollection(Of MemberRoleEditInfo)
  overload: Discord.Rest.MemberRoleAuditLogData.Roles*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.MemberRoleAuditLogData.Target
  commentId: P:Discord.Rest.MemberRoleAuditLogData.Target
  id: Target
  parent: Discord.Rest.MemberRoleAuditLogData
  langs:
  - csharp
  - vb
  name: Target
  nameWithType: MemberRoleAuditLogData.Target
  fullName: Discord.Rest.MemberRoleAuditLogData.Target
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/AuditLogs/DataTypes/MemberRoleAuditLogData.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Target
    path: ../src/Discord.Net.Rest/Entities/AuditLogs/DataTypes/MemberRoleAuditLogData.cs
    startLine: 48
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the user that the roles changes were performed on.\n"
  example: []
  syntax:
    content: public IUser Target { get; }
    parameters: []
    return:
      type: Discord.IUser
      description: "\nA user object representing the user that the role changes were performed on.\n"
    content.vb: Public ReadOnly Property Target As IUser
  overload: Discord.Rest.MemberRoleAuditLogData.Target*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Discord.Rest
  commentId: N:Discord.Rest
  name: Discord.Rest
  nameWithType: Discord.Rest
  fullName: Discord.Rest
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.IAuditLogData
  commentId: T:Discord.IAuditLogData
  parent: Discord
  name: IAuditLogData
  nameWithType: IAuditLogData
  fullName: Discord.IAuditLogData
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.Rest.MemberRoleEditInfo
  commentId: T:Discord.Rest.MemberRoleEditInfo
  name: MemberRoleEditInfo
  nameWithType: MemberRoleEditInfo
  fullName: Discord.Rest.MemberRoleEditInfo
- uid: Discord.Rest.MemberRoleAuditLogData.Roles*
  commentId: Overload:Discord.Rest.MemberRoleAuditLogData.Roles
  name: Roles
  nameWithType: MemberRoleAuditLogData.Roles
  fullName: Discord.Rest.MemberRoleAuditLogData.Roles
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.Rest.MemberRoleEditInfo}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.Rest.MemberRoleEditInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<MemberRoleEditInfo>
  nameWithType: IReadOnlyCollection<MemberRoleEditInfo>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.Rest.MemberRoleEditInfo>
  nameWithType.vb: IReadOnlyCollection(Of MemberRoleEditInfo)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.Rest.MemberRoleEditInfo)
  name.vb: IReadOnlyCollection(Of MemberRoleEditInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.MemberRoleEditInfo
    name: MemberRoleEditInfo
    nameWithType: MemberRoleEditInfo
    fullName: Discord.Rest.MemberRoleEditInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.MemberRoleEditInfo
    name: MemberRoleEditInfo
    nameWithType: MemberRoleEditInfo
    fullName: Discord.Rest.MemberRoleEditInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Discord.Rest.MemberRoleAuditLogData.Target*
  commentId: Overload:Discord.Rest.MemberRoleAuditLogData.Target
  name: Target
  nameWithType: MemberRoleAuditLogData.Target
  fullName: Discord.Rest.MemberRoleAuditLogData.Target
- uid: Discord.IUser
  commentId: T:Discord.IUser
  parent: Discord
  name: IUser
  nameWithType: IUser
  fullName: Discord.IUser
