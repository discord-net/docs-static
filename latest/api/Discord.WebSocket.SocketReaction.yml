### YamlMime:ManagedReference
items:
- uid: Discord.WebSocket.SocketReaction
  commentId: T:Discord.WebSocket.SocketReaction
  id: SocketReaction
  parent: Discord.WebSocket
  children:
  - Discord.WebSocket.SocketReaction.Channel
  - Discord.WebSocket.SocketReaction.Emote
  - Discord.WebSocket.SocketReaction.Equals(System.Object)
  - Discord.WebSocket.SocketReaction.GetHashCode
  - Discord.WebSocket.SocketReaction.Message
  - Discord.WebSocket.SocketReaction.MessageId
  - Discord.WebSocket.SocketReaction.User
  - Discord.WebSocket.SocketReaction.UserId
  langs:
  - csharp
  - vb
  name: SocketReaction
  nameWithType: SocketReaction
  fullName: Discord.WebSocket.SocketReaction
  type: Class
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketReaction.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: SocketReaction
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketReaction.cs
    startLine: 7
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nRepresents a WebSocket-based reaction object.\n"
  example: []
  syntax:
    content: 'public class SocketReaction : object, IReaction'
    content.vb: >-
      Public Class SocketReaction
          Inherits Object
          Implements IReaction
  inheritance:
  - System.Object
  implements:
  - Discord.IReaction
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.WebSocket.SocketReaction.UserId
  commentId: P:Discord.WebSocket.SocketReaction.UserId
  id: UserId
  parent: Discord.WebSocket.SocketReaction
  langs:
  - csharp
  - vb
  name: UserId
  nameWithType: SocketReaction.UserId
  fullName: Discord.WebSocket.SocketReaction.UserId
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketReaction.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: UserId
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketReaction.cs
    startLine: 20
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the ID of the user who added the reaction.\n"
  remarks: "\nThis property retrieves the snowflake identifier of the user responsible for this reaction. This\nproperty will always contain the user identifier in event that\n<xref href=\"Discord.WebSocket.SocketReaction.User\" data-throw-if-not-resolved=\"false\"></xref> cannot be retrieved.\n"
  example: []
  syntax:
    content: public ulong UserId { get; }
    parameters: []
    return:
      type: System.UInt64
      description: "\nA user snowflake identifier associated with the user.\n"
    content.vb: Public ReadOnly Property UserId As ULong
  overload: Discord.WebSocket.SocketReaction.UserId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketReaction.User
  commentId: P:Discord.WebSocket.SocketReaction.User
  id: User
  parent: Discord.WebSocket.SocketReaction
  langs:
  - csharp
  - vb
  name: User
  nameWithType: SocketReaction.User
  fullName: Discord.WebSocket.SocketReaction.User
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketReaction.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: User
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketReaction.cs
    startLine: 40
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the user who added the reaction if possible.\n"
  remarks: "\n<p>\n    This property attempts to retrieve a WebSocket-cached user that is responsible for this reaction from\n    the client. In other words, when the user is not in the WebSocket cache, this property may not\n    contain a value, leaving the only identifiable information to be\n<xref href=\"Discord.WebSocket.SocketReaction.UserId\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>\n    If you wish to obtain an identifiable user object, consider utilizing\n<xref href=\"Discord.Rest.DiscordRestClient\" data-throw-if-not-resolved=\"false\"></xref> which will attempt to retrieve the user from REST.\n</p>\n"
  example: []
  syntax:
    content: public Optional<IUser> User { get; }
    parameters: []
    return:
      type: Discord.Optional{Discord.IUser}
      description: "\nA user object where possible; a value is not always returned.\n"
    content.vb: 'Public ReadOnly Property User As '
  overload: Discord.WebSocket.SocketReaction.User*
  seealso:
  - linkId: Discord.Optional`1
    commentId: T:Discord.Optional`1
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketReaction.MessageId
  commentId: P:Discord.WebSocket.SocketReaction.MessageId
  id: MessageId
  parent: Discord.WebSocket.SocketReaction
  langs:
  - csharp
  - vb
  name: MessageId
  nameWithType: SocketReaction.MessageId
  fullName: Discord.WebSocket.SocketReaction.MessageId
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketReaction.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: MessageId
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketReaction.cs
    startLine: 47
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the ID of the message that has been reacted to.\n"
  example: []
  syntax:
    content: public ulong MessageId { get; }
    parameters: []
    return:
      type: System.UInt64
      description: "\nA message snowflake identifier associated with the message.\n"
    content.vb: Public ReadOnly Property MessageId As ULong
  overload: Discord.WebSocket.SocketReaction.MessageId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketReaction.Message
  commentId: P:Discord.WebSocket.SocketReaction.Message
  id: Message
  parent: Discord.WebSocket.SocketReaction
  langs:
  - csharp
  - vb
  name: Message
  nameWithType: SocketReaction.Message
  fullName: Discord.WebSocket.SocketReaction.Message
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketReaction.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Message
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketReaction.cs
    startLine: 55
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the message that has been reacted to if possible.\n"
  example: []
  syntax:
    content: public Optional<SocketUserMessage> Message { get; }
    parameters: []
    return:
      type: Discord.Optional{Discord.WebSocket.SocketUserMessage}
      description: "\nA WebSocket-based message where possible; a value is not always returned.\n"
    content.vb: 'Public ReadOnly Property Message As '
  overload: Discord.WebSocket.SocketReaction.Message*
  seealso:
  - linkId: Discord.Optional`1
    commentId: T:Discord.Optional`1
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketReaction.Channel
  commentId: P:Discord.WebSocket.SocketReaction.Channel
  id: Channel
  parent: Discord.WebSocket.SocketReaction
  langs:
  - csharp
  - vb
  name: Channel
  nameWithType: SocketReaction.Channel
  fullName: Discord.WebSocket.SocketReaction.Channel
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketReaction.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Channel
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketReaction.cs
    startLine: 62
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the channel where the reaction takes place in.\n"
  example: []
  syntax:
    content: public ISocketMessageChannel Channel { get; }
    parameters: []
    return:
      type: Discord.WebSocket.ISocketMessageChannel
      description: "\nA WebSocket-based message channel.\n"
    content.vb: Public ReadOnly Property Channel As ISocketMessageChannel
  overload: Discord.WebSocket.SocketReaction.Channel*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketReaction.Emote
  commentId: P:Discord.WebSocket.SocketReaction.Emote
  id: Emote
  parent: Discord.WebSocket.SocketReaction
  langs:
  - csharp
  - vb
  name: Emote
  nameWithType: SocketReaction.Emote
  fullName: Discord.WebSocket.SocketReaction.Emote
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketReaction.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Emote
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketReaction.cs
    startLine: 64
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nThe <xref href=\"Discord.IEmote\" data-throw-if-not-resolved=\"false\"></xref> used in the reaction.\n"
  example: []
  syntax:
    content: public IEmote Emote { get; }
    parameters: []
    return:
      type: Discord.IEmote
    content.vb: Public ReadOnly Property Emote As IEmote
  overload: Discord.WebSocket.SocketReaction.Emote*
  implements:
  - Discord.IReaction.Emote
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketReaction.Equals(System.Object)
  commentId: M:Discord.WebSocket.SocketReaction.Equals(System.Object)
  id: Equals(System.Object)
  parent: Discord.WebSocket.SocketReaction
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: SocketReaction.Equals(Object)
  fullName: Discord.WebSocket.SocketReaction.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketReaction.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: Equals
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketReaction.cs
    startLine: 86
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public override bool Equals(object other)
    parameters:
    - id: other
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(other As Object) As Boolean
  overload: Discord.WebSocket.SocketReaction.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.WebSocket.SocketReaction.GetHashCode
  commentId: M:Discord.WebSocket.SocketReaction.GetHashCode
  id: GetHashCode
  parent: Discord.WebSocket.SocketReaction
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: SocketReaction.GetHashCode()
  fullName: Discord.WebSocket.SocketReaction.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketReaction.cs
      branch: docs
      repo: https://github.com/discord-net/Discord.Net
    id: GetHashCode
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketReaction.cs
    startLine: 98
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overload: Discord.WebSocket.SocketReaction.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Discord.WebSocket
  commentId: N:Discord.WebSocket
  name: Discord.WebSocket
  nameWithType: Discord.WebSocket
  fullName: Discord.WebSocket
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.IReaction
  commentId: T:Discord.IReaction
  parent: Discord
  name: IReaction
  nameWithType: IReaction
  fullName: Discord.IReaction
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.WebSocket.SocketReaction.User
  commentId: P:Discord.WebSocket.SocketReaction.User
  isExternal: true
- uid: Discord.WebSocket.SocketReaction.UserId*
  commentId: Overload:Discord.WebSocket.SocketReaction.UserId
  name: UserId
  nameWithType: SocketReaction.UserId
  fullName: Discord.WebSocket.SocketReaction.UserId
- uid: System.UInt64
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Discord.WebSocket.SocketReaction.UserId
  commentId: P:Discord.WebSocket.SocketReaction.UserId
  isExternal: true
- uid: Discord.Rest.DiscordRestClient
  commentId: T:Discord.Rest.DiscordRestClient
  parent: Discord.Rest
  name: DiscordRestClient
  nameWithType: DiscordRestClient
  fullName: Discord.Rest.DiscordRestClient
- uid: Discord.Optional`1
  commentId: T:Discord.Optional`1
  parent: Discord
  name: Optional<T>
  nameWithType: Optional<T>
  fullName: Discord.Optional<T>
  nameWithType.vb: Optional(Of T)
  fullName.vb: Discord.Optional(Of T)
  name.vb: Optional(Of T)
  spec.csharp:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketReaction.User*
  commentId: Overload:Discord.WebSocket.SocketReaction.User
  name: User
  nameWithType: SocketReaction.User
  fullName: Discord.WebSocket.SocketReaction.User
- uid: Discord.Optional{Discord.IUser}
  commentId: T:Discord.Optional{Discord.IUser}
  parent: Discord
  definition: Discord.Optional`1
  name: Optional<IUser>
  nameWithType: Optional<IUser>
  fullName: Discord.Optional<Discord.IUser>
  nameWithType.vb: Optional(Of IUser)
  fullName.vb: Discord.Optional(Of Discord.IUser)
  name.vb: Optional(Of IUser)
  spec.csharp:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest
  commentId: N:Discord.Rest
  name: Discord.Rest
  nameWithType: Discord.Rest
  fullName: Discord.Rest
- uid: Discord.WebSocket.SocketReaction.MessageId*
  commentId: Overload:Discord.WebSocket.SocketReaction.MessageId
  name: MessageId
  nameWithType: SocketReaction.MessageId
  fullName: Discord.WebSocket.SocketReaction.MessageId
- uid: Discord.WebSocket.SocketReaction.Message*
  commentId: Overload:Discord.WebSocket.SocketReaction.Message
  name: Message
  nameWithType: SocketReaction.Message
  fullName: Discord.WebSocket.SocketReaction.Message
- uid: Discord.Optional{Discord.WebSocket.SocketUserMessage}
  commentId: T:Discord.Optional{Discord.WebSocket.SocketUserMessage}
  parent: Discord
  definition: Discord.Optional`1
  name: Optional<SocketUserMessage>
  nameWithType: Optional<SocketUserMessage>
  fullName: Discord.Optional<Discord.WebSocket.SocketUserMessage>
  nameWithType.vb: Optional(Of SocketUserMessage)
  fullName.vb: Discord.Optional(Of Discord.WebSocket.SocketUserMessage)
  name.vb: Optional(Of SocketUserMessage)
  spec.csharp:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketUserMessage
    name: SocketUserMessage
    nameWithType: SocketUserMessage
    fullName: Discord.WebSocket.SocketUserMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketUserMessage
    name: SocketUserMessage
    nameWithType: SocketUserMessage
    fullName: Discord.WebSocket.SocketUserMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketReaction.Channel*
  commentId: Overload:Discord.WebSocket.SocketReaction.Channel
  name: Channel
  nameWithType: SocketReaction.Channel
  fullName: Discord.WebSocket.SocketReaction.Channel
- uid: Discord.WebSocket.ISocketMessageChannel
  commentId: T:Discord.WebSocket.ISocketMessageChannel
  parent: Discord.WebSocket
  name: ISocketMessageChannel
  nameWithType: ISocketMessageChannel
  fullName: Discord.WebSocket.ISocketMessageChannel
- uid: Discord.WebSocket.SocketReaction.Emote*
  commentId: Overload:Discord.WebSocket.SocketReaction.Emote
  name: Emote
  nameWithType: SocketReaction.Emote
  fullName: Discord.WebSocket.SocketReaction.Emote
- uid: Discord.IReaction.Emote
  commentId: P:Discord.IReaction.Emote
  parent: Discord.IReaction
  name: Emote
  nameWithType: IReaction.Emote
  fullName: Discord.IReaction.Emote
- uid: Discord.IEmote
  commentId: T:Discord.IEmote
  parent: Discord
  name: IEmote
  nameWithType: IEmote
  fullName: Discord.IEmote
- uid: Discord.WebSocket.SocketReaction.Equals*
  commentId: Overload:Discord.WebSocket.SocketReaction.Equals
  name: Equals
  nameWithType: SocketReaction.Equals
  fullName: Discord.WebSocket.SocketReaction.Equals
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.WebSocket.SocketReaction.GetHashCode*
  commentId: Overload:Discord.WebSocket.SocketReaction.GetHashCode
  name: GetHashCode
  nameWithType: SocketReaction.GetHashCode
  fullName: Discord.WebSocket.SocketReaction.GetHashCode
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
