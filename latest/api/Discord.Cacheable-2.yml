### YamlMime:ManagedReference
items:
- uid: Discord.Cacheable`2
  commentId: T:Discord.Cacheable`2
  id: Cacheable`2
  parent: Discord
  children:
  - Discord.Cacheable`2.DownloadAsync
  - Discord.Cacheable`2.GetOrDownloadAsync
  - Discord.Cacheable`2.HasValue
  - Discord.Cacheable`2.Id
  - Discord.Cacheable`2.Value
  langs:
  - csharp
  - vb
  name: Cacheable<TEntity, TId>
  nameWithType: Cacheable<TEntity, TId>
  fullName: Discord.Cacheable<TEntity, TId>
  type: Struct
  source:
    remote:
      path: src/Discord.Net.Core/Utils/Cacheable.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Cacheable
    path: ../src/Discord.Net.Core/Utils/Cacheable.cs
    startLine: 10
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nRepresents a cached entity.\n"
  example: []
  syntax:
    content: >-
      public struct Cacheable<TEntity, TId>
          where TEntity : IEntity<TId> where TId : IEquatable<TId>
    typeParameters:
    - id: TEntity
      description: The type of entity that is cached.
    - id: TId
      description: The type of this entity&apos;s ID.
    content.vb: Public Structure Cacheable(Of TEntity As IEntity(Of TId), TId As IEquatable(Of TId))
  nameWithType.vb: Cacheable(Of TEntity, TId)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
  fullName.vb: Discord.Cacheable(Of TEntity, TId)
  name.vb: Cacheable(Of TEntity, TId)
- uid: Discord.Cacheable`2.HasValue
  commentId: P:Discord.Cacheable`2.HasValue
  id: HasValue
  parent: Discord.Cacheable`2
  langs:
  - csharp
  - vb
  name: HasValue
  nameWithType: Cacheable<TEntity, TId>.HasValue
  fullName: Discord.Cacheable<TEntity, TId>.HasValue
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Utils/Cacheable.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: HasValue
    path: ../src/Discord.Net.Core/Utils/Cacheable.cs
    startLine: 17
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets whether this entity is cached.\n"
  example: []
  syntax:
    content: public bool HasValue { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasValue As Boolean
  overload: Discord.Cacheable`2.HasValue*
  nameWithType.vb: Cacheable(Of TEntity, TId).HasValue
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Discord.Cacheable(Of TEntity, TId).HasValue
- uid: Discord.Cacheable`2.Id
  commentId: P:Discord.Cacheable`2.Id
  id: Id
  parent: Discord.Cacheable`2
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: Cacheable<TEntity, TId>.Id
  fullName: Discord.Cacheable<TEntity, TId>.Id
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Utils/Cacheable.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Id
    path: ../src/Discord.Net.Core/Utils/Cacheable.cs
    startLine: 21
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the ID of this entity.\n"
  example: []
  syntax:
    content: public TId Id { get; }
    parameters: []
    return:
      type: '{TId}'
    content.vb: Public ReadOnly Property Id As TId
  overload: Discord.Cacheable`2.Id*
  nameWithType.vb: Cacheable(Of TEntity, TId).Id
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Discord.Cacheable(Of TEntity, TId).Id
- uid: Discord.Cacheable`2.Value
  commentId: P:Discord.Cacheable`2.Value
  id: Value
  parent: Discord.Cacheable`2
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: Cacheable<TEntity, TId>.Value
  fullName: Discord.Cacheable<TEntity, TId>.Value
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Utils/Cacheable.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Value
    path: ../src/Discord.Net.Core/Utils/Cacheable.cs
    startLine: 29
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nGets the entity if it could be pulled from cache.\n"
  remarks: "\nThis value is not guaranteed to be set; in cases where the entity cannot be pulled from cache, it is\n<code>null</code>.\n"
  example: []
  syntax:
    content: public TEntity Value { get; }
    parameters: []
    return:
      type: '{TEntity}'
    content.vb: Public ReadOnly Property Value As TEntity
  overload: Discord.Cacheable`2.Value*
  nameWithType.vb: Cacheable(Of TEntity, TId).Value
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Discord.Cacheable(Of TEntity, TId).Value
- uid: Discord.Cacheable`2.DownloadAsync
  commentId: M:Discord.Cacheable`2.DownloadAsync
  id: DownloadAsync
  parent: Discord.Cacheable`2
  langs:
  - csharp
  - vb
  name: DownloadAsync()
  nameWithType: Cacheable<TEntity, TId>.DownloadAsync()
  fullName: Discord.Cacheable<TEntity, TId>.DownloadAsync()
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Utils/Cacheable.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DownloadAsync
    path: ../src/Discord.Net.Core/Utils/Cacheable.cs
    startLine: 49
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nDownloads this entity to cache.\n"
  example: []
  syntax:
    content: public Task<TEntity> DownloadAsync()
    return:
      type: Task{{TEntity}}
      description: "\nA task that represents the asynchronous download operation. The task result contains the downloaded\nentity.\n"
    content.vb: Public Function DownloadAsync As Task(Of TEntity)
  overload: Discord.Cacheable`2.DownloadAsync*
  exceptions:
  - type: Discord.Net.HttpException
    commentId: T:Discord.Net.HttpException
    description: Thrown when used from a user account.
  nameWithType.vb: Cacheable(Of TEntity, TId).DownloadAsync()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Cacheable(Of TEntity, TId).DownloadAsync()
- uid: Discord.Cacheable`2.GetOrDownloadAsync
  commentId: M:Discord.Cacheable`2.GetOrDownloadAsync
  id: GetOrDownloadAsync
  parent: Discord.Cacheable`2
  langs:
  - csharp
  - vb
  name: GetOrDownloadAsync()
  nameWithType: Cacheable<TEntity, TId>.GetOrDownloadAsync()
  fullName: Discord.Cacheable<TEntity, TId>.GetOrDownloadAsync()
  type: Method
  source:
    remote:
      path: src/Discord.Net.Core/Utils/Cacheable.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetOrDownloadAsync
    path: ../src/Discord.Net.Core/Utils/Cacheable.cs
    startLine: 63
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  summary: "\nReturns the cached entity if it exists; otherwise downloads it.\n"
  example: []
  syntax:
    content: public Task<TEntity> GetOrDownloadAsync()
    return:
      type: Task{{TEntity}}
      description: "\nA task that represents the asynchronous operation that attempts to get the message via cache or to\ndownload the message. The task result contains the downloaded entity.\n"
    content.vb: Public Function GetOrDownloadAsync As Task(Of TEntity)
  overload: Discord.Cacheable`2.GetOrDownloadAsync*
  exceptions:
  - type: Discord.Net.HttpException
    commentId: T:Discord.Net.HttpException
    description: Thrown when used from a user account.
  nameWithType.vb: Cacheable(Of TEntity, TId).GetOrDownloadAsync()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Cacheable(Of TEntity, TId).GetOrDownloadAsync()
references:
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.Cacheable`2.HasValue*
  commentId: Overload:Discord.Cacheable`2.HasValue
  name: HasValue
  nameWithType: Cacheable<TEntity, TId>.HasValue
  fullName: Discord.Cacheable<TEntity, TId>.HasValue
  nameWithType.vb: Cacheable(Of TEntity, TId).HasValue
  fullName.vb: Discord.Cacheable(Of TEntity, TId).HasValue
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.Cacheable`2.Id*
  commentId: Overload:Discord.Cacheable`2.Id
  name: Id
  nameWithType: Cacheable<TEntity, TId>.Id
  fullName: Discord.Cacheable<TEntity, TId>.Id
  nameWithType.vb: Cacheable(Of TEntity, TId).Id
  fullName.vb: Discord.Cacheable(Of TEntity, TId).Id
- uid: '{TId}'
  commentId: '!:TId'
  definition: TId
  name: TId
  nameWithType: TId
  fullName: TId
- uid: TId
  name: TId
  nameWithType: TId
  fullName: TId
- uid: Discord.Cacheable`2.Value*
  commentId: Overload:Discord.Cacheable`2.Value
  name: Value
  nameWithType: Cacheable<TEntity, TId>.Value
  fullName: Discord.Cacheable<TEntity, TId>.Value
  nameWithType.vb: Cacheable(Of TEntity, TId).Value
  fullName.vb: Discord.Cacheable(Of TEntity, TId).Value
- uid: '{TEntity}'
  commentId: '!:TEntity'
  definition: TEntity
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: TEntity
  commentId: '!:TEntity'
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: Discord.Net.HttpException
  commentId: T:Discord.Net.HttpException
  name: HttpException
  nameWithType: HttpException
  fullName: Discord.Net.HttpException
- uid: Discord.Cacheable`2.DownloadAsync*
  commentId: Overload:Discord.Cacheable`2.DownloadAsync
  name: DownloadAsync
  nameWithType: Cacheable<TEntity, TId>.DownloadAsync
  fullName: Discord.Cacheable<TEntity, TId>.DownloadAsync
  nameWithType.vb: Cacheable(Of TEntity, TId).DownloadAsync
  fullName.vb: Discord.Cacheable(Of TEntity, TId).DownloadAsync
- uid: Task{{TEntity}}
  commentId: '!:Task{`0}'
  definition: Task`1
  name: Task<TEntity>
  nameWithType: Task<TEntity>
  fullName: Task<TEntity>
  nameWithType.vb: Task(Of TEntity)
  fullName.vb: Task(Of TEntity)
  name.vb: Task(Of TEntity)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Cacheable`2.GetOrDownloadAsync*
  commentId: Overload:Discord.Cacheable`2.GetOrDownloadAsync
  name: GetOrDownloadAsync
  nameWithType: Cacheable<TEntity, TId>.GetOrDownloadAsync
  fullName: Discord.Cacheable<TEntity, TId>.GetOrDownloadAsync
  nameWithType.vb: Cacheable(Of TEntity, TId).GetOrDownloadAsync
  fullName.vb: Discord.Cacheable(Of TEntity, TId).GetOrDownloadAsync
