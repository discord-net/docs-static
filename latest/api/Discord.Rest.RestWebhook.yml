### YamlMime:ManagedReference
items:
- uid: Discord.Rest.RestWebhook
  commentId: T:Discord.Rest.RestWebhook
  id: RestWebhook
  parent: Discord.Rest
  children:
  - Discord.Rest.RestWebhook.AvatarId
  - Discord.Rest.RestWebhook.ChannelId
  - Discord.Rest.RestWebhook.CreatedAt
  - Discord.Rest.RestWebhook.Creator
  - Discord.Rest.RestWebhook.DeleteAsync(Discord.RequestOptions)
  - Discord.Rest.RestWebhook.Discord#IWebhook#Channel
  - Discord.Rest.RestWebhook.Discord#IWebhook#Guild
  - Discord.Rest.RestWebhook.Discord#IWebhook#ModifyAsync(System.Action{Discord.WebhookProperties},Discord.RequestOptions)
  - Discord.Rest.RestWebhook.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
  - Discord.Rest.RestWebhook.GuildId
  - Discord.Rest.RestWebhook.ModifyAsync(System.Action{Discord.WebhookProperties},Discord.RequestOptions)
  - Discord.Rest.RestWebhook.Name
  - Discord.Rest.RestWebhook.Token
  - Discord.Rest.RestWebhook.ToString
  - Discord.Rest.RestWebhook.UpdateAsync(Discord.RequestOptions)
  langs:
  - csharp
  - vb
  name: RestWebhook
  nameWithType: RestWebhook
  fullName: Discord.Rest.RestWebhook
  type: Class
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RestWebhook
    path: ../src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
    startLine: 7
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  syntax:
    content: 'public class RestWebhook : RestEntity<ulong>, IWebhook, IDeletable, ISnowflakeEntity, IEntity<ulong>, IUpdateable'
    content.vb: >-
      Public Class RestWebhook
          Inherits RestEntity(Of ULong)
          Implements IWebhook, IDeletable, ISnowflakeEntity, IEntity(Of ULong), IUpdateable
  inheritance:
  - System.Object
  - Discord.Rest.RestEntity{System.UInt64}
  implements:
  - Discord.IWebhook
  - Discord.IDeletable
  - Discord.ISnowflakeEntity
  - Discord.IEntity{System.UInt64}
  - Discord.IUpdateable
  inheritedMembers:
  - Discord.Rest.RestEntity{System.UInt64}.Id
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.Rest.RestWebhook.ChannelId
  commentId: P:Discord.Rest.RestWebhook.ChannelId
  id: ChannelId
  parent: Discord.Rest.RestWebhook
  langs:
  - csharp
  - vb
  name: ChannelId
  nameWithType: RestWebhook.ChannelId
  fullName: Discord.Rest.RestWebhook.ChannelId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ChannelId
    path: ../src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
    startLine: 14
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the ID of the channel for this webhook.\n"
  example: []
  syntax:
    content: public ulong ChannelId { get; }
    parameters: []
    return:
      type: System.UInt64
    content.vb: Public ReadOnly Property ChannelId As ULong
  overload: Discord.Rest.RestWebhook.ChannelId*
  implements:
  - Discord.IWebhook.ChannelId
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestWebhook.Token
  commentId: P:Discord.Rest.RestWebhook.Token
  id: Token
  parent: Discord.Rest.RestWebhook
  langs:
  - csharp
  - vb
  name: Token
  nameWithType: RestWebhook.Token
  fullName: Discord.Rest.RestWebhook.Token
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Token
    path: ../src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
    startLine: 16
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the token of this webhook.\n"
  example: []
  syntax:
    content: public string Token { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Token As String
  overload: Discord.Rest.RestWebhook.Token*
  implements:
  - Discord.IWebhook.Token
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestWebhook.Name
  commentId: P:Discord.Rest.RestWebhook.Name
  id: Name
  parent: Discord.Rest.RestWebhook
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: RestWebhook.Name
  fullName: Discord.Rest.RestWebhook.Name
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Name
    path: ../src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
    startLine: 19
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the default name of this webhook.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Discord.Rest.RestWebhook.Name*
  implements:
  - Discord.IWebhook.Name
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestWebhook.AvatarId
  commentId: P:Discord.Rest.RestWebhook.AvatarId
  id: AvatarId
  parent: Discord.Rest.RestWebhook
  langs:
  - csharp
  - vb
  name: AvatarId
  nameWithType: RestWebhook.AvatarId
  fullName: Discord.Rest.RestWebhook.AvatarId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: AvatarId
    path: ../src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
    startLine: 21
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the ID of this webhook&apos;s default avatar.\n"
  example: []
  syntax:
    content: public string AvatarId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property AvatarId As String
  overload: Discord.Rest.RestWebhook.AvatarId*
  implements:
  - Discord.IWebhook.AvatarId
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestWebhook.GuildId
  commentId: P:Discord.Rest.RestWebhook.GuildId
  id: GuildId
  parent: Discord.Rest.RestWebhook
  langs:
  - csharp
  - vb
  name: GuildId
  nameWithType: RestWebhook.GuildId
  fullName: Discord.Rest.RestWebhook.GuildId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GuildId
    path: ../src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
    startLine: 23
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the ID of the guild owning this webhook.\n"
  example: []
  syntax:
    content: public ulong? GuildId { get; }
    parameters: []
    return:
      type: System.Nullable{System.UInt64}
    content.vb: Public ReadOnly Property GuildId As ULong?
  overload: Discord.Rest.RestWebhook.GuildId*
  implements:
  - Discord.IWebhook.GuildId
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestWebhook.Creator
  commentId: P:Discord.Rest.RestWebhook.Creator
  id: Creator
  parent: Discord.Rest.RestWebhook
  langs:
  - csharp
  - vb
  name: Creator
  nameWithType: RestWebhook.Creator
  fullName: Discord.Rest.RestWebhook.Creator
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Creator
    path: ../src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
    startLine: 25
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the user that created this webhook.\n"
  example: []
  syntax:
    content: public IUser Creator { get; }
    parameters: []
    return:
      type: Discord.IUser
    content.vb: Public ReadOnly Property Creator As IUser
  overload: Discord.Rest.RestWebhook.Creator*
  implements:
  - Discord.IWebhook.Creator
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestWebhook.CreatedAt
  commentId: P:Discord.Rest.RestWebhook.CreatedAt
  id: CreatedAt
  parent: Discord.Rest.RestWebhook
  langs:
  - csharp
  - vb
  name: CreatedAt
  nameWithType: RestWebhook.CreatedAt
  fullName: Discord.Rest.RestWebhook.CreatedAt
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreatedAt
    path: ../src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
    startLine: 28
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets when the snowflake was created.\n"
  example: []
  syntax:
    content: public DateTimeOffset CreatedAt { get; }
    parameters: []
    return:
      type: System.DateTimeOffset
      description: "\nA <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> representing when the entity was first created.\n"
    content.vb: Public ReadOnly Property CreatedAt As DateTimeOffset
  overload: Discord.Rest.RestWebhook.CreatedAt*
  implements:
  - Discord.ISnowflakeEntity.CreatedAt
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestWebhook.UpdateAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestWebhook.UpdateAsync(Discord.RequestOptions)
  id: UpdateAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestWebhook
  langs:
  - csharp
  - vb
  name: UpdateAsync(RequestOptions)
  nameWithType: RestWebhook.UpdateAsync(RequestOptions)
  fullName: Discord.Rest.RestWebhook.UpdateAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: UpdateAsync
    path: ../src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
    startLine: 69
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nUpdates this object&apos;s properties with its current state.\n"
  example: []
  syntax:
    content: public Task UpdateAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function UpdateAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestWebhook.UpdateAsync*
  implements:
  - Discord.IUpdateable.UpdateAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestWebhook.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
  commentId: M:Discord.Rest.RestWebhook.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
  id: GetAvatarUrl(Discord.ImageFormat,System.UInt16)
  parent: Discord.Rest.RestWebhook
  langs:
  - csharp
  - vb
  name: GetAvatarUrl(ImageFormat, UInt16)
  nameWithType: RestWebhook.GetAvatarUrl(ImageFormat, UInt16)
  fullName: Discord.Rest.RestWebhook.GetAvatarUrl(Discord.ImageFormat, System.UInt16)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetAvatarUrl
    path: ../src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
    startLine: 76
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the URL to this webhook&apos;s default avatar.\n"
  example: []
  syntax:
    content: public string GetAvatarUrl(ImageFormat format = ImageFormat.Auto, ushort size = 128)
    parameters:
    - id: format
      type: Discord.ImageFormat
    - id: size
      type: System.UInt16
    return:
      type: System.String
    content.vb: Public Function GetAvatarUrl(format As ImageFormat = ImageFormat.Auto, size As UShort = 128) As String
  overload: Discord.Rest.RestWebhook.GetAvatarUrl*
  implements:
  - Discord.IWebhook.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestWebhook.ModifyAsync(System.Action{Discord.WebhookProperties},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestWebhook.ModifyAsync(System.Action{Discord.WebhookProperties},Discord.RequestOptions)
  id: ModifyAsync(System.Action{Discord.WebhookProperties},Discord.RequestOptions)
  parent: Discord.Rest.RestWebhook
  langs:
  - csharp
  - vb
  name: ModifyAsync(Action<WebhookProperties>, RequestOptions)
  nameWithType: RestWebhook.ModifyAsync(Action<WebhookProperties>, RequestOptions)
  fullName: Discord.Rest.RestWebhook.ModifyAsync(System.Action<Discord.WebhookProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ModifyAsync
    path: ../src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
    startLine: 79
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  syntax:
    content: public Task ModifyAsync(Action<WebhookProperties> func, RequestOptions options = null)
    parameters:
    - id: func
      type: System.Action{Discord.WebhookProperties}
    - id: options
      type: Discord.RequestOptions
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function ModifyAsync(func As Action(Of WebhookProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestWebhook.ModifyAsync*
  nameWithType.vb: RestWebhook.ModifyAsync(Action(Of WebhookProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestWebhook.ModifyAsync(System.Action(Of Discord.WebhookProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of WebhookProperties), RequestOptions)
- uid: Discord.Rest.RestWebhook.DeleteAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestWebhook.DeleteAsync(Discord.RequestOptions)
  id: DeleteAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestWebhook
  langs:
  - csharp
  - vb
  name: DeleteAsync(RequestOptions)
  nameWithType: RestWebhook.DeleteAsync(RequestOptions)
  fullName: Discord.Rest.RestWebhook.DeleteAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteAsync
    path: ../src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
    startLine: 86
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nDeletes this object and all its children.\n"
  example: []
  syntax:
    content: public Task DeleteAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function DeleteAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestWebhook.DeleteAsync*
  implements:
  - Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestWebhook.ToString
  commentId: M:Discord.Rest.RestWebhook.ToString
  id: ToString
  parent: Discord.Rest.RestWebhook
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: RestWebhook.ToString()
  fullName: Discord.Rest.RestWebhook.ToString()
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ToString
    path: ../src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
    startLine: 89
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Discord.Rest.RestWebhook.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.Rest.RestWebhook.Discord#IWebhook#Guild
  commentId: P:Discord.Rest.RestWebhook.Discord#IWebhook#Guild
  id: Discord#IWebhook#Guild
  isEii: true
  parent: Discord.Rest.RestWebhook
  langs:
  - csharp
  - vb
  name: IWebhook.Guild
  nameWithType: RestWebhook.IWebhook.Guild
  fullName: Discord.Rest.RestWebhook.Discord.IWebhook.Guild
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IWebhook.Guild
    path: ../src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
    startLine: 94
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the guild owning this webhook.\n"
  example: []
  syntax:
    content: IGuild IWebhook.Guild { get; }
    parameters: []
    return:
      type: Discord.IGuild
    content.vb: ReadOnly WriteOnly Property Discord.IWebhook.Guild As IGuild Implements IWebhook.Guild
  overload: Discord.Rest.RestWebhook.Discord#IWebhook#Guild*
  implements:
  - Discord.IWebhook.Guild
  nameWithType.vb: RestWebhook.Discord.IWebhook.Guild
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IWebhook.Guild
- uid: Discord.Rest.RestWebhook.Discord#IWebhook#Channel
  commentId: P:Discord.Rest.RestWebhook.Discord#IWebhook#Channel
  id: Discord#IWebhook#Channel
  isEii: true
  parent: Discord.Rest.RestWebhook
  langs:
  - csharp
  - vb
  name: IWebhook.Channel
  nameWithType: RestWebhook.IWebhook.Channel
  fullName: Discord.Rest.RestWebhook.Discord.IWebhook.Channel
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IWebhook.Channel
    path: ../src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
    startLine: 97
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the channel for this webhook.\n"
  example: []
  syntax:
    content: ITextChannel IWebhook.Channel { get; }
    parameters: []
    return:
      type: Discord.ITextChannel
    content.vb: ReadOnly WriteOnly Property Discord.IWebhook.Channel As ITextChannel Implements IWebhook.Channel
  overload: Discord.Rest.RestWebhook.Discord#IWebhook#Channel*
  implements:
  - Discord.IWebhook.Channel
  nameWithType.vb: RestWebhook.Discord.IWebhook.Channel
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IWebhook.Channel
- uid: Discord.Rest.RestWebhook.Discord#IWebhook#ModifyAsync(System.Action{Discord.WebhookProperties},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestWebhook.Discord#IWebhook#ModifyAsync(System.Action{Discord.WebhookProperties},Discord.RequestOptions)
  id: Discord#IWebhook#ModifyAsync(System.Action{Discord.WebhookProperties},Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestWebhook
  langs:
  - csharp
  - vb
  name: IWebhook.ModifyAsync(Action<WebhookProperties>, RequestOptions)
  nameWithType: RestWebhook.IWebhook.ModifyAsync(Action<WebhookProperties>, RequestOptions)
  fullName: Discord.Rest.RestWebhook.Discord.IWebhook.ModifyAsync(System.Action<Discord.WebhookProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IWebhook.ModifyAsync
    path: ../src/Discord.Net.Rest/Entities/Webhooks/RestWebhook.cs
    startLine: 100
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nModifies this webhook.\n"
  example: []
  syntax:
    content: Task IWebhook.ModifyAsync(Action<WebhookProperties> func, RequestOptions options)
    parameters:
    - id: func
      type: System.Action{Discord.WebhookProperties}
    - id: options
      type: Discord.RequestOptions
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function Discord.IWebhook.ModifyAsync(func As Action(Of WebhookProperties), options As RequestOptions) As Task Implements IWebhook.ModifyAsync
  overload: Discord.Rest.RestWebhook.Discord#IWebhook#ModifyAsync*
  implements:
  - Discord.IWebhook.ModifyAsync(System.Action{Discord.WebhookProperties},Discord.RequestOptions)
  nameWithType.vb: RestWebhook.Discord.IWebhook.ModifyAsync(Action(Of WebhookProperties), RequestOptions)
  fullName.vb: Discord.Rest.RestWebhook.Discord.IWebhook.ModifyAsync(System.Action(Of Discord.WebhookProperties), Discord.RequestOptions)
  name.vb: Discord.IWebhook.ModifyAsync(Action(Of WebhookProperties), RequestOptions)
references:
- uid: Discord.Rest
  commentId: N:Discord.Rest
  name: Discord.Rest
  nameWithType: Discord.Rest
  fullName: Discord.Rest
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Rest.RestEntity{System.UInt64}
  commentId: T:Discord.Rest.RestEntity{System.UInt64}
  parent: Discord.Rest
  definition: Discord.Rest.RestEntity`1
  name: RestEntity<UInt64>
  nameWithType: RestEntity<UInt64>
  fullName: Discord.Rest.RestEntity<System.UInt64>
  nameWithType.vb: RestEntity(Of UInt64)
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64)
  name.vb: RestEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IWebhook
  commentId: T:Discord.IWebhook
  parent: Discord
  name: IWebhook
  nameWithType: IWebhook
  fullName: Discord.IWebhook
- uid: Discord.IDeletable
  commentId: T:Discord.IDeletable
  parent: Discord
  name: IDeletable
  nameWithType: IDeletable
  fullName: Discord.IDeletable
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IUpdateable
  commentId: T:Discord.IUpdateable
  parent: Discord
  name: IUpdateable
  nameWithType: IUpdateable
  fullName: Discord.IUpdateable
- uid: Discord.Rest.RestEntity{System.UInt64}.Id
  commentId: P:Discord.Rest.RestEntity{System.UInt64}.Id
  parent: Discord.Rest.RestEntity{System.UInt64}
  definition: Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<UInt64>.Id
  fullName: Discord.Rest.RestEntity<System.UInt64>.Id
  nameWithType.vb: RestEntity(Of UInt64).Id
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64).Id
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Rest.RestEntity`1
  commentId: T:Discord.Rest.RestEntity`1
  name: RestEntity<T>
  nameWithType: RestEntity<T>
  fullName: Discord.Rest.RestEntity<T>
  nameWithType.vb: RestEntity(Of T)
  fullName.vb: Discord.Rest.RestEntity(Of T)
  name.vb: RestEntity(Of T)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestEntity`1.Id
  commentId: P:Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<T>.Id
  fullName: Discord.Rest.RestEntity<T>.Id
  nameWithType.vb: RestEntity(Of T).Id
  fullName.vb: Discord.Rest.RestEntity(Of T).Id
- uid: Discord.Rest.RestWebhook.ChannelId*
  commentId: Overload:Discord.Rest.RestWebhook.ChannelId
  name: ChannelId
  nameWithType: RestWebhook.ChannelId
  fullName: Discord.Rest.RestWebhook.ChannelId
- uid: Discord.IWebhook.ChannelId
  commentId: P:Discord.IWebhook.ChannelId
  parent: Discord.IWebhook
  name: ChannelId
  nameWithType: IWebhook.ChannelId
  fullName: Discord.IWebhook.ChannelId
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Discord.Rest.RestWebhook.Token*
  commentId: Overload:Discord.Rest.RestWebhook.Token
  name: Token
  nameWithType: RestWebhook.Token
  fullName: Discord.Rest.RestWebhook.Token
- uid: Discord.IWebhook.Token
  commentId: P:Discord.IWebhook.Token
  parent: Discord.IWebhook
  name: Token
  nameWithType: IWebhook.Token
  fullName: Discord.IWebhook.Token
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.Rest.RestWebhook.Name*
  commentId: Overload:Discord.Rest.RestWebhook.Name
  name: Name
  nameWithType: RestWebhook.Name
  fullName: Discord.Rest.RestWebhook.Name
- uid: Discord.IWebhook.Name
  commentId: P:Discord.IWebhook.Name
  parent: Discord.IWebhook
  name: Name
  nameWithType: IWebhook.Name
  fullName: Discord.IWebhook.Name
- uid: Discord.Rest.RestWebhook.AvatarId*
  commentId: Overload:Discord.Rest.RestWebhook.AvatarId
  name: AvatarId
  nameWithType: RestWebhook.AvatarId
  fullName: Discord.Rest.RestWebhook.AvatarId
- uid: Discord.IWebhook.AvatarId
  commentId: P:Discord.IWebhook.AvatarId
  parent: Discord.IWebhook
  name: AvatarId
  nameWithType: IWebhook.AvatarId
  fullName: Discord.IWebhook.AvatarId
- uid: Discord.Rest.RestWebhook.GuildId*
  commentId: Overload:Discord.Rest.RestWebhook.GuildId
  name: GuildId
  nameWithType: RestWebhook.GuildId
  fullName: Discord.Rest.RestWebhook.GuildId
- uid: Discord.IWebhook.GuildId
  commentId: P:Discord.IWebhook.GuildId
  parent: Discord.IWebhook
  name: GuildId
  nameWithType: IWebhook.GuildId
  fullName: Discord.IWebhook.GuildId
- uid: System.Nullable{System.UInt64}
  commentId: T:System.Nullable{System.UInt64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<UInt64>
  nameWithType: Nullable<UInt64>
  fullName: System.Nullable<System.UInt64>
  nameWithType.vb: Nullable(Of UInt64)
  fullName.vb: System.Nullable(Of System.UInt64)
  name.vb: Nullable(Of UInt64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestWebhook.Creator*
  commentId: Overload:Discord.Rest.RestWebhook.Creator
  name: Creator
  nameWithType: RestWebhook.Creator
  fullName: Discord.Rest.RestWebhook.Creator
- uid: Discord.IWebhook.Creator
  commentId: P:Discord.IWebhook.Creator
  parent: Discord.IWebhook
  name: Creator
  nameWithType: IWebhook.Creator
  fullName: Discord.IWebhook.Creator
- uid: Discord.IUser
  commentId: T:Discord.IUser
  parent: Discord
  name: IUser
  nameWithType: IUser
  fullName: Discord.IUser
- uid: Discord.Rest.RestWebhook.CreatedAt*
  commentId: Overload:Discord.Rest.RestWebhook.CreatedAt
  name: CreatedAt
  nameWithType: RestWebhook.CreatedAt
  fullName: Discord.Rest.RestWebhook.CreatedAt
- uid: Discord.ISnowflakeEntity.CreatedAt
  commentId: P:Discord.ISnowflakeEntity.CreatedAt
  parent: Discord.ISnowflakeEntity
  name: CreatedAt
  nameWithType: ISnowflakeEntity.CreatedAt
  fullName: Discord.ISnowflakeEntity.CreatedAt
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: Discord.Rest.RestWebhook.UpdateAsync*
  commentId: Overload:Discord.Rest.RestWebhook.UpdateAsync
  name: UpdateAsync
  nameWithType: RestWebhook.UpdateAsync
  fullName: Discord.Rest.RestWebhook.UpdateAsync
- uid: Discord.IUpdateable.UpdateAsync(Discord.RequestOptions)
  commentId: M:Discord.IUpdateable.UpdateAsync(Discord.RequestOptions)
  parent: Discord.IUpdateable
  name: UpdateAsync(RequestOptions)
  nameWithType: IUpdateable.UpdateAsync(RequestOptions)
  fullName: Discord.IUpdateable.UpdateAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IUpdateable.UpdateAsync(Discord.RequestOptions)
    name: UpdateAsync
    nameWithType: IUpdateable.UpdateAsync
    fullName: Discord.IUpdateable.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IUpdateable.UpdateAsync(Discord.RequestOptions)
    name: UpdateAsync
    nameWithType: IUpdateable.UpdateAsync
    fullName: Discord.IUpdateable.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Discord.Rest.RestWebhook.GetAvatarUrl*
  commentId: Overload:Discord.Rest.RestWebhook.GetAvatarUrl
  name: GetAvatarUrl
  nameWithType: RestWebhook.GetAvatarUrl
  fullName: Discord.Rest.RestWebhook.GetAvatarUrl
- uid: Discord.IWebhook.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
  commentId: M:Discord.IWebhook.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
  parent: Discord.IWebhook
  isExternal: true
  name: GetAvatarUrl(ImageFormat, UInt16)
  nameWithType: IWebhook.GetAvatarUrl(ImageFormat, UInt16)
  fullName: Discord.IWebhook.GetAvatarUrl(Discord.ImageFormat, System.UInt16)
  spec.csharp:
  - uid: Discord.IWebhook.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
    name: GetAvatarUrl
    nameWithType: IWebhook.GetAvatarUrl
    fullName: Discord.IWebhook.GetAvatarUrl
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.ImageFormat
    name: ImageFormat
    nameWithType: ImageFormat
    fullName: Discord.ImageFormat
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IWebhook.GetAvatarUrl(Discord.ImageFormat,System.UInt16)
    name: GetAvatarUrl
    nameWithType: IWebhook.GetAvatarUrl
    fullName: Discord.IWebhook.GetAvatarUrl
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.ImageFormat
    name: ImageFormat
    nameWithType: ImageFormat
    fullName: Discord.ImageFormat
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.ImageFormat
  commentId: T:Discord.ImageFormat
  parent: Discord
  name: ImageFormat
  nameWithType: ImageFormat
  fullName: Discord.ImageFormat
- uid: System.UInt16
  commentId: T:System.UInt16
  parent: System
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: Discord.Rest.RestWebhook.ModifyAsync*
  commentId: Overload:Discord.Rest.RestWebhook.ModifyAsync
  name: ModifyAsync
  nameWithType: RestWebhook.ModifyAsync
  fullName: Discord.Rest.RestWebhook.ModifyAsync
- uid: System.Action{Discord.WebhookProperties}
  commentId: T:System.Action{Discord.WebhookProperties}
  parent: System
  definition: System.Action`1
  name: Action<WebhookProperties>
  nameWithType: Action<WebhookProperties>
  fullName: System.Action<Discord.WebhookProperties>
  nameWithType.vb: Action(Of WebhookProperties)
  fullName.vb: System.Action(Of Discord.WebhookProperties)
  name.vb: Action(Of WebhookProperties)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebhookProperties
    name: WebhookProperties
    nameWithType: WebhookProperties
    fullName: Discord.WebhookProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebhookProperties
    name: WebhookProperties
    nameWithType: WebhookProperties
    fullName: Discord.WebhookProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestWebhook.DeleteAsync*
  commentId: Overload:Discord.Rest.RestWebhook.DeleteAsync
  name: DeleteAsync
  nameWithType: RestWebhook.DeleteAsync
  fullName: Discord.Rest.RestWebhook.DeleteAsync
- uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  commentId: M:Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  parent: Discord.IDeletable
  name: DeleteAsync(RequestOptions)
  nameWithType: IDeletable.DeleteAsync(RequestOptions)
  fullName: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: IDeletable.DeleteAsync
    fullName: Discord.IDeletable.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: IDeletable.DeleteAsync
    fullName: Discord.IDeletable.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestWebhook.ToString*
  commentId: Overload:Discord.Rest.RestWebhook.ToString
  name: ToString
  nameWithType: RestWebhook.ToString
  fullName: Discord.Rest.RestWebhook.ToString
- uid: Discord.Rest.RestWebhook.Discord#IWebhook#Guild*
  commentId: Overload:Discord.Rest.RestWebhook.Discord#IWebhook#Guild
  name: IWebhook.Guild
  nameWithType: RestWebhook.IWebhook.Guild
  fullName: Discord.Rest.RestWebhook.Discord.IWebhook.Guild
  nameWithType.vb: RestWebhook.Discord.IWebhook.Guild
  name.vb: Discord.IWebhook.Guild
- uid: Discord.IWebhook.Guild
  commentId: P:Discord.IWebhook.Guild
  parent: Discord.IWebhook
  name: Guild
  nameWithType: IWebhook.Guild
  fullName: Discord.IWebhook.Guild
- uid: Discord.IGuild
  commentId: T:Discord.IGuild
  parent: Discord
  name: IGuild
  nameWithType: IGuild
  fullName: Discord.IGuild
- uid: Discord.Rest.RestWebhook.Discord#IWebhook#Channel*
  commentId: Overload:Discord.Rest.RestWebhook.Discord#IWebhook#Channel
  name: IWebhook.Channel
  nameWithType: RestWebhook.IWebhook.Channel
  fullName: Discord.Rest.RestWebhook.Discord.IWebhook.Channel
  nameWithType.vb: RestWebhook.Discord.IWebhook.Channel
  name.vb: Discord.IWebhook.Channel
- uid: Discord.IWebhook.Channel
  commentId: P:Discord.IWebhook.Channel
  parent: Discord.IWebhook
  name: Channel
  nameWithType: IWebhook.Channel
  fullName: Discord.IWebhook.Channel
- uid: Discord.ITextChannel
  commentId: T:Discord.ITextChannel
  parent: Discord
  name: ITextChannel
  nameWithType: ITextChannel
  fullName: Discord.ITextChannel
- uid: Discord.Rest.RestWebhook.Discord#IWebhook#ModifyAsync*
  commentId: Overload:Discord.Rest.RestWebhook.Discord#IWebhook#ModifyAsync
  name: IWebhook.ModifyAsync
  nameWithType: RestWebhook.IWebhook.ModifyAsync
  fullName: Discord.Rest.RestWebhook.Discord.IWebhook.ModifyAsync
  nameWithType.vb: RestWebhook.Discord.IWebhook.ModifyAsync
  name.vb: Discord.IWebhook.ModifyAsync
- uid: Discord.IWebhook.ModifyAsync(System.Action{Discord.WebhookProperties},Discord.RequestOptions)
  commentId: M:Discord.IWebhook.ModifyAsync(System.Action{Discord.WebhookProperties},Discord.RequestOptions)
  parent: Discord.IWebhook
  isExternal: true
  name: ModifyAsync(Action<WebhookProperties>, RequestOptions)
  nameWithType: IWebhook.ModifyAsync(Action<WebhookProperties>, RequestOptions)
  fullName: Discord.IWebhook.ModifyAsync(System.Action<Discord.WebhookProperties>, Discord.RequestOptions)
  nameWithType.vb: IWebhook.ModifyAsync(Action(Of WebhookProperties), RequestOptions)
  fullName.vb: Discord.IWebhook.ModifyAsync(System.Action(Of Discord.WebhookProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of WebhookProperties), RequestOptions)
  spec.csharp:
  - uid: Discord.IWebhook.ModifyAsync(System.Action{Discord.WebhookProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: IWebhook.ModifyAsync
    fullName: Discord.IWebhook.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebhookProperties
    name: WebhookProperties
    nameWithType: WebhookProperties
    fullName: Discord.WebhookProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IWebhook.ModifyAsync(System.Action{Discord.WebhookProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: IWebhook.ModifyAsync
    fullName: Discord.IWebhook.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebhookProperties
    name: WebhookProperties
    nameWithType: WebhookProperties
    fullName: Discord.WebhookProperties
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
