### YamlMime:ManagedReference
items:
- uid: Discord.WebSocket.SocketMessage
  commentId: T:Discord.WebSocket.SocketMessage
  id: SocketMessage
  parent: Discord.WebSocket
  children:
  - Discord.WebSocket.SocketMessage.Activity
  - Discord.WebSocket.SocketMessage.Application
  - Discord.WebSocket.SocketMessage.Attachments
  - Discord.WebSocket.SocketMessage.Author
  - Discord.WebSocket.SocketMessage.Channel
  - Discord.WebSocket.SocketMessage.Content
  - Discord.WebSocket.SocketMessage.CreatedAt
  - Discord.WebSocket.SocketMessage.DeleteAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketMessage.Discord#IMessage#Attachments
  - Discord.WebSocket.SocketMessage.Discord#IMessage#Author
  - Discord.WebSocket.SocketMessage.Discord#IMessage#Channel
  - Discord.WebSocket.SocketMessage.Discord#IMessage#Embeds
  - Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedChannelIds
  - Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedRoleIds
  - Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedUserIds
  - Discord.WebSocket.SocketMessage.Discord#IMessage#Type
  - Discord.WebSocket.SocketMessage.EditedTimestamp
  - Discord.WebSocket.SocketMessage.Embeds
  - Discord.WebSocket.SocketMessage.IsPinned
  - Discord.WebSocket.SocketMessage.IsSuppressed
  - Discord.WebSocket.SocketMessage.IsTTS
  - Discord.WebSocket.SocketMessage.MentionedChannels
  - Discord.WebSocket.SocketMessage.MentionedRoles
  - Discord.WebSocket.SocketMessage.MentionedUsers
  - Discord.WebSocket.SocketMessage.Source
  - Discord.WebSocket.SocketMessage.Tags
  - Discord.WebSocket.SocketMessage.Timestamp
  - Discord.WebSocket.SocketMessage.ToString
  langs:
  - csharp
  - vb
  name: SocketMessage
  nameWithType: SocketMessage
  fullName: Discord.WebSocket.SocketMessage
  type: Class
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SocketMessage
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
    startLine: 13
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nRepresents a WebSocket-based message.\n"
  example: []
  syntax:
    content: 'public abstract class SocketMessage : SocketEntity<ulong>, IMessage, ISnowflakeEntity, IEntity<ulong>, IDeletable'
    content.vb: >-
      Public MustInherit Class SocketMessage
          Inherits SocketEntity(Of ULong)
          Implements IMessage, ISnowflakeEntity, IEntity(Of ULong), IDeletable
  inheritance:
  - System.Object
  - Discord.WebSocket.SocketEntity{System.UInt64}
  derivedClasses:
  - Discord.WebSocket.SocketSystemMessage
  - Discord.WebSocket.SocketUserMessage
  implements:
  - Discord.IMessage
  - Discord.ISnowflakeEntity
  - Discord.IEntity{System.UInt64}
  - Discord.IDeletable
  inheritedMembers:
  - Discord.WebSocket.SocketEntity{System.UInt64}.Id
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Discord.WebSocket.SocketMessage.Author
  commentId: P:Discord.WebSocket.SocketMessage.Author
  id: Author
  parent: Discord.WebSocket.SocketMessage
  langs:
  - csharp
  - vb
  name: Author
  nameWithType: SocketMessage.Author
  fullName: Discord.WebSocket.SocketMessage.Author
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Author
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
    startLine: 23
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the author of this message.\n"
  example: []
  syntax:
    content: public SocketUser Author { get; }
    parameters: []
    return:
      type: Discord.WebSocket.SocketUser
      description: "\nA WebSocket-based user object.\n"
    content.vb: Public ReadOnly Property Author As SocketUser
  overload: Discord.WebSocket.SocketMessage.Author*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketMessage.Channel
  commentId: P:Discord.WebSocket.SocketMessage.Channel
  id: Channel
  parent: Discord.WebSocket.SocketMessage
  langs:
  - csharp
  - vb
  name: Channel
  nameWithType: SocketMessage.Channel
  fullName: Discord.WebSocket.SocketMessage.Channel
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Channel
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
    startLine: 30
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the source channel of the message.\n"
  example: []
  syntax:
    content: public ISocketMessageChannel Channel { get; }
    parameters: []
    return:
      type: Discord.WebSocket.ISocketMessageChannel
      description: "\nA WebSocket-based message channel.\n"
    content.vb: Public ReadOnly Property Channel As ISocketMessageChannel
  overload: Discord.WebSocket.SocketMessage.Channel*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketMessage.Source
  commentId: P:Discord.WebSocket.SocketMessage.Source
  id: Source
  parent: Discord.WebSocket.SocketMessage
  langs:
  - csharp
  - vb
  name: Source
  nameWithType: SocketMessage.Source
  fullName: Discord.WebSocket.SocketMessage.Source
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Source
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
    startLine: 32
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the source type of this message.\n"
  example: []
  syntax:
    content: public MessageSource Source { get; }
    parameters: []
    return:
      type: Discord.MessageSource
    content.vb: Public ReadOnly Property Source As MessageSource
  overload: Discord.WebSocket.SocketMessage.Source*
  implements:
  - Discord.IMessage.Source
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketMessage.Content
  commentId: P:Discord.WebSocket.SocketMessage.Content
  id: Content
  parent: Discord.WebSocket.SocketMessage
  langs:
  - csharp
  - vb
  name: Content
  nameWithType: SocketMessage.Content
  fullName: Discord.WebSocket.SocketMessage.Content
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Content
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
    startLine: 35
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the content for this message.\n"
  example: []
  syntax:
    content: public string Content { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA string that contains the body of the message; note that this field may be empty if there is an embed.\n"
    content.vb: Public ReadOnly Property Content As String
  overload: Discord.WebSocket.SocketMessage.Content*
  implements:
  - Discord.IMessage.Content
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketMessage.CreatedAt
  commentId: P:Discord.WebSocket.SocketMessage.CreatedAt
  id: CreatedAt
  parent: Discord.WebSocket.SocketMessage
  langs:
  - csharp
  - vb
  name: CreatedAt
  nameWithType: SocketMessage.CreatedAt
  fullName: Discord.WebSocket.SocketMessage.CreatedAt
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreatedAt
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
    startLine: 38
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets when the snowflake was created.\n"
  example: []
  syntax:
    content: public DateTimeOffset CreatedAt { get; }
    parameters: []
    return:
      type: System.DateTimeOffset
      description: "\nA <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> representing when the entity was first created.\n"
    content.vb: Public ReadOnly Property CreatedAt As DateTimeOffset
  overload: Discord.WebSocket.SocketMessage.CreatedAt*
  implements:
  - Discord.ISnowflakeEntity.CreatedAt
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketMessage.IsTTS
  commentId: P:Discord.WebSocket.SocketMessage.IsTTS
  id: IsTTS
  parent: Discord.WebSocket.SocketMessage
  langs:
  - csharp
  - vb
  name: IsTTS
  nameWithType: SocketMessage.IsTTS
  fullName: Discord.WebSocket.SocketMessage.IsTTS
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsTTS
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
    startLine: 40
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the value that indicates whether this message was meant to be read-aloud by Discord.\n"
  example: []
  syntax:
    content: public virtual bool IsTTS { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this message was sent as a text-to-speech message; otherwise <code>false</code>.\n"
    content.vb: Public Overridable ReadOnly Property IsTTS As Boolean
  overload: Discord.WebSocket.SocketMessage.IsTTS*
  implements:
  - Discord.IMessage.IsTTS
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.WebSocket.SocketMessage.IsPinned
  commentId: P:Discord.WebSocket.SocketMessage.IsPinned
  id: IsPinned
  parent: Discord.WebSocket.SocketMessage
  langs:
  - csharp
  - vb
  name: IsPinned
  nameWithType: SocketMessage.IsPinned
  fullName: Discord.WebSocket.SocketMessage.IsPinned
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsPinned
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
    startLine: 42
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the value that indicates whether this message is pinned.\n"
  example: []
  syntax:
    content: public virtual bool IsPinned { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this message was added to its channel&apos;s pinned messages; otherwise <code>false</code>.\n"
    content.vb: Public Overridable ReadOnly Property IsPinned As Boolean
  overload: Discord.WebSocket.SocketMessage.IsPinned*
  implements:
  - Discord.IMessage.IsPinned
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.WebSocket.SocketMessage.IsSuppressed
  commentId: P:Discord.WebSocket.SocketMessage.IsSuppressed
  id: IsSuppressed
  parent: Discord.WebSocket.SocketMessage
  langs:
  - csharp
  - vb
  name: IsSuppressed
  nameWithType: SocketMessage.IsSuppressed
  fullName: Discord.WebSocket.SocketMessage.IsSuppressed
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsSuppressed
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
    startLine: 44
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the value that indicates whether or not this message&apos;s embeds are suppressed.\n"
  example: []
  syntax:
    content: public virtual bool IsSuppressed { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the embeds in this message have been suppressed (made invisible); otherwise <code>false</code>.\n"
    content.vb: Public Overridable ReadOnly Property IsSuppressed As Boolean
  overload: Discord.WebSocket.SocketMessage.IsSuppressed*
  implements:
  - Discord.IMessage.IsSuppressed
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.WebSocket.SocketMessage.EditedTimestamp
  commentId: P:Discord.WebSocket.SocketMessage.EditedTimestamp
  id: EditedTimestamp
  parent: Discord.WebSocket.SocketMessage
  langs:
  - csharp
  - vb
  name: EditedTimestamp
  nameWithType: SocketMessage.EditedTimestamp
  fullName: Discord.WebSocket.SocketMessage.EditedTimestamp
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: EditedTimestamp
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
    startLine: 46
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the time of this message&apos;s last edit.\n"
  example: []
  syntax:
    content: public virtual DateTimeOffset? EditedTimestamp { get; }
    parameters: []
    return:
      type: System.Nullable{System.DateTimeOffset}
      description: "\nTime of when the message was last edited; <code>null</code> if the message is never edited.\n"
    content.vb: Public Overridable ReadOnly Property EditedTimestamp As DateTimeOffset?
  overload: Discord.WebSocket.SocketMessage.EditedTimestamp*
  implements:
  - Discord.IMessage.EditedTimestamp
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.WebSocket.SocketMessage.Activity
  commentId: P:Discord.WebSocket.SocketMessage.Activity
  id: Activity
  parent: Discord.WebSocket.SocketMessage
  langs:
  - csharp
  - vb
  name: Activity
  nameWithType: SocketMessage.Activity
  fullName: Discord.WebSocket.SocketMessage.Activity
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Activity
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
    startLine: 49
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the activity associated with a message.\n"
  remarks: "\nSent with Rich Presence-related chat embeds. This often refers to activity that requires end-user&apos;s\ninteraction, such as a Spotify Invite activity.\n"
  example: []
  syntax:
    content: public MessageActivity Activity { get; }
    parameters: []
    return:
      type: Discord.MessageActivity
      description: "\nA message&apos;s activity, if any is associated.\n"
    content.vb: Public ReadOnly Property Activity As MessageActivity
  overload: Discord.WebSocket.SocketMessage.Activity*
  implements:
  - Discord.IMessage.Activity
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketMessage.Application
  commentId: P:Discord.WebSocket.SocketMessage.Application
  id: Application
  parent: Discord.WebSocket.SocketMessage
  langs:
  - csharp
  - vb
  name: Application
  nameWithType: SocketMessage.Application
  fullName: Discord.WebSocket.SocketMessage.Application
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Application
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
    startLine: 52
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the application associated with a message.\n"
  remarks: "\nSent with Rich-Presence-related chat embeds.\n"
  example: []
  syntax:
    content: public MessageApplication Application { get; }
    parameters: []
    return:
      type: Discord.MessageApplication
      description: "\nA message&apos;s application, if any is associated.\n"
    content.vb: Public ReadOnly Property Application As MessageApplication
  overload: Discord.WebSocket.SocketMessage.Application*
  implements:
  - Discord.IMessage.Application
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketMessage.Attachments
  commentId: P:Discord.WebSocket.SocketMessage.Attachments
  id: Attachments
  parent: Discord.WebSocket.SocketMessage
  langs:
  - csharp
  - vb
  name: Attachments
  nameWithType: SocketMessage.Attachments
  fullName: Discord.WebSocket.SocketMessage.Attachments
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Attachments
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
    startLine: 60
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nReturns all attachments included in this message.\n"
  example: []
  syntax:
    content: public virtual IReadOnlyCollection<Attachment> Attachments { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.Attachment}
      description: "\nCollection of attachments.\n"
    content.vb: Public Overridable ReadOnly Property Attachments As IReadOnlyCollection(Of Attachment)
  overload: Discord.WebSocket.SocketMessage.Attachments*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.WebSocket.SocketMessage.Embeds
  commentId: P:Discord.WebSocket.SocketMessage.Embeds
  id: Embeds
  parent: Discord.WebSocket.SocketMessage
  langs:
  - csharp
  - vb
  name: Embeds
  nameWithType: SocketMessage.Embeds
  fullName: Discord.WebSocket.SocketMessage.Embeds
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Embeds
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
    startLine: 67
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nReturns all embeds included in this message.\n"
  example: []
  syntax:
    content: public virtual IReadOnlyCollection<Embed> Embeds { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.Embed}
      description: "\nCollection of embed objects.\n"
    content.vb: Public Overridable ReadOnly Property Embeds As IReadOnlyCollection(Of Embed)
  overload: Discord.WebSocket.SocketMessage.Embeds*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.WebSocket.SocketMessage.MentionedChannels
  commentId: P:Discord.WebSocket.SocketMessage.MentionedChannels
  id: MentionedChannels
  parent: Discord.WebSocket.SocketMessage
  langs:
  - csharp
  - vb
  name: MentionedChannels
  nameWithType: SocketMessage.MentionedChannels
  fullName: Discord.WebSocket.SocketMessage.MentionedChannels
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: MentionedChannels
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
    startLine: 74
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nReturns the channels mentioned in this message.\n"
  example: []
  syntax:
    content: public virtual IReadOnlyCollection<SocketGuildChannel> MentionedChannels { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketGuildChannel}
      description: "\nCollection of WebSocket-based guild channels.\n"
    content.vb: Public Overridable ReadOnly Property MentionedChannels As IReadOnlyCollection(Of SocketGuildChannel)
  overload: Discord.WebSocket.SocketMessage.MentionedChannels*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.WebSocket.SocketMessage.MentionedRoles
  commentId: P:Discord.WebSocket.SocketMessage.MentionedRoles
  id: MentionedRoles
  parent: Discord.WebSocket.SocketMessage
  langs:
  - csharp
  - vb
  name: MentionedRoles
  nameWithType: SocketMessage.MentionedRoles
  fullName: Discord.WebSocket.SocketMessage.MentionedRoles
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: MentionedRoles
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
    startLine: 81
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nReturns the roles mentioned in this message.\n"
  example: []
  syntax:
    content: public virtual IReadOnlyCollection<SocketRole> MentionedRoles { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketRole}
      description: "\nCollection of WebSocket-based roles.\n"
    content.vb: Public Overridable ReadOnly Property MentionedRoles As IReadOnlyCollection(Of SocketRole)
  overload: Discord.WebSocket.SocketMessage.MentionedRoles*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.WebSocket.SocketMessage.MentionedUsers
  commentId: P:Discord.WebSocket.SocketMessage.MentionedUsers
  id: MentionedUsers
  parent: Discord.WebSocket.SocketMessage
  langs:
  - csharp
  - vb
  name: MentionedUsers
  nameWithType: SocketMessage.MentionedUsers
  fullName: Discord.WebSocket.SocketMessage.MentionedUsers
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: MentionedUsers
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
    startLine: 88
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nReturns the users mentioned in this message.\n"
  example: []
  syntax:
    content: public virtual IReadOnlyCollection<SocketUser> MentionedUsers { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketUser}
      description: "\nCollection of WebSocket-based users.\n"
    content.vb: Public Overridable ReadOnly Property MentionedUsers As IReadOnlyCollection(Of SocketUser)
  overload: Discord.WebSocket.SocketMessage.MentionedUsers*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.WebSocket.SocketMessage.Tags
  commentId: P:Discord.WebSocket.SocketMessage.Tags
  id: Tags
  parent: Discord.WebSocket.SocketMessage
  langs:
  - csharp
  - vb
  name: Tags
  nameWithType: SocketMessage.Tags
  fullName: Discord.WebSocket.SocketMessage.Tags
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Tags
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
    startLine: 90
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets all tags included in this message&apos;s content.\n"
  example: []
  syntax:
    content: public virtual IReadOnlyCollection<ITag> Tags { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.ITag}
    content.vb: Public Overridable ReadOnly Property Tags As IReadOnlyCollection(Of ITag)
  overload: Discord.WebSocket.SocketMessage.Tags*
  implements:
  - Discord.IMessage.Tags
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Discord.WebSocket.SocketMessage.Timestamp
  commentId: P:Discord.WebSocket.SocketMessage.Timestamp
  id: Timestamp
  parent: Discord.WebSocket.SocketMessage
  langs:
  - csharp
  - vb
  name: Timestamp
  nameWithType: SocketMessage.Timestamp
  fullName: Discord.WebSocket.SocketMessage.Timestamp
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Timestamp
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
    startLine: 93
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the time this message was sent.\n"
  example: []
  syntax:
    content: public DateTimeOffset Timestamp { get; }
    parameters: []
    return:
      type: System.DateTimeOffset
      description: "\nTime of when the message was sent.\n"
    content.vb: Public ReadOnly Property Timestamp As DateTimeOffset
  overload: Discord.WebSocket.SocketMessage.Timestamp*
  implements:
  - Discord.IMessage.Timestamp
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketMessage.DeleteAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketMessage.DeleteAsync(Discord.RequestOptions)
  id: DeleteAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketMessage
  langs:
  - csharp
  - vb
  name: DeleteAsync(RequestOptions)
  nameWithType: SocketMessage.DeleteAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketMessage.DeleteAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteAsync
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
    startLine: 142
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nDeletes this object and all its children.\n"
  example: []
  syntax:
    content: public Task DeleteAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function DeleteAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketMessage.DeleteAsync*
  implements:
  - Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketMessage.ToString
  commentId: M:Discord.WebSocket.SocketMessage.ToString
  id: ToString
  parent: Discord.WebSocket.SocketMessage
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SocketMessage.ToString()
  fullName: Discord.WebSocket.SocketMessage.ToString()
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ToString
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
    startLine: 151
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the content of the message.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nContent of the message.\n"
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Discord.WebSocket.SocketMessage.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.WebSocket.SocketMessage.Discord#IMessage#Author
  commentId: P:Discord.WebSocket.SocketMessage.Discord#IMessage#Author
  id: Discord#IMessage#Author
  isEii: true
  parent: Discord.WebSocket.SocketMessage
  langs:
  - csharp
  - vb
  name: IMessage.Author
  nameWithType: SocketMessage.IMessage.Author
  fullName: Discord.WebSocket.SocketMessage.Discord.IMessage.Author
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessage.Author
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
    startLine: 156
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the author of this message.\n"
  example: []
  syntax:
    content: IUser IMessage.Author { get; }
    parameters: []
    return:
      type: Discord.IUser
    content.vb: ReadOnly WriteOnly Property Discord.IMessage.Author As IUser Implements IMessage.Author
  overload: Discord.WebSocket.SocketMessage.Discord#IMessage#Author*
  implements:
  - Discord.IMessage.Author
  nameWithType.vb: SocketMessage.Discord.IMessage.Author
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IMessage.Author
- uid: Discord.WebSocket.SocketMessage.Discord#IMessage#Channel
  commentId: P:Discord.WebSocket.SocketMessage.Discord#IMessage#Channel
  id: Discord#IMessage#Channel
  isEii: true
  parent: Discord.WebSocket.SocketMessage
  langs:
  - csharp
  - vb
  name: IMessage.Channel
  nameWithType: SocketMessage.IMessage.Channel
  fullName: Discord.WebSocket.SocketMessage.Discord.IMessage.Channel
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessage.Channel
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
    startLine: 158
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the source channel of the message.\n"
  example: []
  syntax:
    content: IMessageChannel IMessage.Channel { get; }
    parameters: []
    return:
      type: Discord.IMessageChannel
    content.vb: ReadOnly WriteOnly Property Discord.IMessage.Channel As IMessageChannel Implements IMessage.Channel
  overload: Discord.WebSocket.SocketMessage.Discord#IMessage#Channel*
  implements:
  - Discord.IMessage.Channel
  nameWithType.vb: SocketMessage.Discord.IMessage.Channel
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IMessage.Channel
- uid: Discord.WebSocket.SocketMessage.Discord#IMessage#Type
  commentId: P:Discord.WebSocket.SocketMessage.Discord#IMessage#Type
  id: Discord#IMessage#Type
  isEii: true
  parent: Discord.WebSocket.SocketMessage
  langs:
  - csharp
  - vb
  name: IMessage.Type
  nameWithType: SocketMessage.IMessage.Type
  fullName: Discord.WebSocket.SocketMessage.Discord.IMessage.Type
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessage.Type
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
    startLine: 160
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the type of this system message.\n"
  example: []
  syntax:
    content: MessageType IMessage.Type { get; }
    parameters: []
    return:
      type: Discord.MessageType
    content.vb: ReadOnly WriteOnly Property Discord.IMessage.Type As MessageType Implements IMessage.Type
  overload: Discord.WebSocket.SocketMessage.Discord#IMessage#Type*
  implements:
  - Discord.IMessage.Type
  nameWithType.vb: SocketMessage.Discord.IMessage.Type
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IMessage.Type
- uid: Discord.WebSocket.SocketMessage.Discord#IMessage#Attachments
  commentId: P:Discord.WebSocket.SocketMessage.Discord#IMessage#Attachments
  id: Discord#IMessage#Attachments
  isEii: true
  parent: Discord.WebSocket.SocketMessage
  langs:
  - csharp
  - vb
  name: IMessage.Attachments
  nameWithType: SocketMessage.IMessage.Attachments
  fullName: Discord.WebSocket.SocketMessage.Discord.IMessage.Attachments
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessage.Attachments
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
    startLine: 162
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets all attachments included in this message.\n"
  remarks: "\nThis property gets a read-only collection of attachments associated with this message. Depending on the\nuser&apos;s end-client, a sent message may contain one or more attachments. For example, mobile users may\nattach more than one file in their message, while the desktop client only allows for one.\n"
  example: []
  syntax:
    content: IReadOnlyCollection<IAttachment> IMessage.Attachments { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.IAttachment}
      description: "\nA read-only collection of attachments.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IMessage.Attachments As IReadOnlyCollection(Of IAttachment) Implements IMessage.Attachments
  overload: Discord.WebSocket.SocketMessage.Discord#IMessage#Attachments*
  implements:
  - Discord.IMessage.Attachments
  nameWithType.vb: SocketMessage.Discord.IMessage.Attachments
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IMessage.Attachments
- uid: Discord.WebSocket.SocketMessage.Discord#IMessage#Embeds
  commentId: P:Discord.WebSocket.SocketMessage.Discord#IMessage#Embeds
  id: Discord#IMessage#Embeds
  isEii: true
  parent: Discord.WebSocket.SocketMessage
  langs:
  - csharp
  - vb
  name: IMessage.Embeds
  nameWithType: SocketMessage.IMessage.Embeds
  fullName: Discord.WebSocket.SocketMessage.Discord.IMessage.Embeds
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessage.Embeds
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
    startLine: 164
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets all embeds included in this message.\n"
  remarks: "\n"
  example: []
  syntax:
    content: IReadOnlyCollection<IEmbed> IMessage.Embeds { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.IEmbed}
      description: "\nA read-only collection of embed objects.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IMessage.Embeds As IReadOnlyCollection(Of IEmbed) Implements IMessage.Embeds
  overload: Discord.WebSocket.SocketMessage.Discord#IMessage#Embeds*
  see:
  - linkId: Discord.EmbedType.Rich
    commentId: F:Discord.EmbedType.Rich
  - linkId: Discord.Embed
    commentId: T:Discord.Embed
  implements:
  - Discord.IMessage.Embeds
  nameWithType.vb: SocketMessage.Discord.IMessage.Embeds
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IMessage.Embeds
- uid: Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedChannelIds
  commentId: P:Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedChannelIds
  id: Discord#IMessage#MentionedChannelIds
  isEii: true
  parent: Discord.WebSocket.SocketMessage
  langs:
  - csharp
  - vb
  name: IMessage.MentionedChannelIds
  nameWithType: SocketMessage.IMessage.MentionedChannelIds
  fullName: Discord.WebSocket.SocketMessage.Discord.IMessage.MentionedChannelIds
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessage.MentionedChannelIds
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
    startLine: 166
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the IDs of channels mentioned in this message.\n"
  example: []
  syntax:
    content: IReadOnlyCollection<ulong> IMessage.MentionedChannelIds { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{System.UInt64}
      description: "\nA read-only collection of channel IDs.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IMessage.MentionedChannelIds As IReadOnlyCollection(Of ULong) Implements IMessage.MentionedChannelIds
  overload: Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedChannelIds*
  implements:
  - Discord.IMessage.MentionedChannelIds
  nameWithType.vb: SocketMessage.Discord.IMessage.MentionedChannelIds
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IMessage.MentionedChannelIds
- uid: Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedRoleIds
  commentId: P:Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedRoleIds
  id: Discord#IMessage#MentionedRoleIds
  isEii: true
  parent: Discord.WebSocket.SocketMessage
  langs:
  - csharp
  - vb
  name: IMessage.MentionedRoleIds
  nameWithType: SocketMessage.IMessage.MentionedRoleIds
  fullName: Discord.WebSocket.SocketMessage.Discord.IMessage.MentionedRoleIds
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessage.MentionedRoleIds
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
    startLine: 168
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the IDs of roles mentioned in this message.\n"
  example: []
  syntax:
    content: IReadOnlyCollection<ulong> IMessage.MentionedRoleIds { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{System.UInt64}
      description: "\nA read-only collection of role IDs.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IMessage.MentionedRoleIds As IReadOnlyCollection(Of ULong) Implements IMessage.MentionedRoleIds
  overload: Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedRoleIds*
  implements:
  - Discord.IMessage.MentionedRoleIds
  nameWithType.vb: SocketMessage.Discord.IMessage.MentionedRoleIds
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IMessage.MentionedRoleIds
- uid: Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedUserIds
  commentId: P:Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedUserIds
  id: Discord#IMessage#MentionedUserIds
  isEii: true
  parent: Discord.WebSocket.SocketMessage
  langs:
  - csharp
  - vb
  name: IMessage.MentionedUserIds
  nameWithType: SocketMessage.IMessage.MentionedUserIds
  fullName: Discord.WebSocket.SocketMessage.Discord.IMessage.MentionedUserIds
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IMessage.MentionedUserIds
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketMessage.cs
    startLine: 170
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the IDs of users mentioned in this message.\n"
  example: []
  syntax:
    content: IReadOnlyCollection<ulong> IMessage.MentionedUserIds { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{System.UInt64}
      description: "\nA read-only collection of user IDs.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IMessage.MentionedUserIds As IReadOnlyCollection(Of ULong) Implements IMessage.MentionedUserIds
  overload: Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedUserIds*
  implements:
  - Discord.IMessage.MentionedUserIds
  nameWithType.vb: SocketMessage.Discord.IMessage.MentionedUserIds
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IMessage.MentionedUserIds
references:
- uid: Discord.WebSocket
  commentId: N:Discord.WebSocket
  name: Discord.WebSocket
  nameWithType: Discord.WebSocket
  fullName: Discord.WebSocket
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.WebSocket.SocketEntity{System.UInt64}
  commentId: T:Discord.WebSocket.SocketEntity{System.UInt64}
  parent: Discord.WebSocket
  definition: Discord.WebSocket.SocketEntity`1
  name: SocketEntity<UInt64>
  nameWithType: SocketEntity<UInt64>
  fullName: Discord.WebSocket.SocketEntity<System.UInt64>
  nameWithType.vb: SocketEntity(Of UInt64)
  fullName.vb: Discord.WebSocket.SocketEntity(Of System.UInt64)
  name.vb: SocketEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.WebSocket.SocketEntity`1
    name: SocketEntity
    nameWithType: SocketEntity
    fullName: Discord.WebSocket.SocketEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.WebSocket.SocketEntity`1
    name: SocketEntity
    nameWithType: SocketEntity
    fullName: Discord.WebSocket.SocketEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IMessage
  commentId: T:Discord.IMessage
  parent: Discord
  name: IMessage
  nameWithType: IMessage
  fullName: Discord.IMessage
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IDeletable
  commentId: T:Discord.IDeletable
  parent: Discord
  name: IDeletable
  nameWithType: IDeletable
  fullName: Discord.IDeletable
- uid: Discord.WebSocket.SocketEntity{System.UInt64}.Id
  commentId: P:Discord.WebSocket.SocketEntity{System.UInt64}.Id
  parent: Discord.WebSocket.SocketEntity{System.UInt64}
  definition: Discord.WebSocket.SocketEntity`1.Id
  name: Id
  nameWithType: SocketEntity<UInt64>.Id
  fullName: Discord.WebSocket.SocketEntity<System.UInt64>.Id
  nameWithType.vb: SocketEntity(Of UInt64).Id
  fullName.vb: Discord.WebSocket.SocketEntity(Of System.UInt64).Id
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.WebSocket.SocketEntity`1
  commentId: T:Discord.WebSocket.SocketEntity`1
  name: SocketEntity<T>
  nameWithType: SocketEntity<T>
  fullName: Discord.WebSocket.SocketEntity<T>
  nameWithType.vb: SocketEntity(Of T)
  fullName.vb: Discord.WebSocket.SocketEntity(Of T)
  name.vb: SocketEntity(Of T)
  spec.csharp:
  - uid: Discord.WebSocket.SocketEntity`1
    name: SocketEntity
    nameWithType: SocketEntity
    fullName: Discord.WebSocket.SocketEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.WebSocket.SocketEntity`1
    name: SocketEntity
    nameWithType: SocketEntity
    fullName: Discord.WebSocket.SocketEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketEntity`1.Id
  commentId: P:Discord.WebSocket.SocketEntity`1.Id
  name: Id
  nameWithType: SocketEntity<T>.Id
  fullName: Discord.WebSocket.SocketEntity<T>.Id
  nameWithType.vb: SocketEntity(Of T).Id
  fullName.vb: Discord.WebSocket.SocketEntity(Of T).Id
- uid: Discord.WebSocket.SocketMessage.Author*
  commentId: Overload:Discord.WebSocket.SocketMessage.Author
  name: Author
  nameWithType: SocketMessage.Author
  fullName: Discord.WebSocket.SocketMessage.Author
- uid: Discord.WebSocket.SocketUser
  commentId: T:Discord.WebSocket.SocketUser
  parent: Discord.WebSocket
  name: SocketUser
  nameWithType: SocketUser
  fullName: Discord.WebSocket.SocketUser
- uid: Discord.WebSocket.SocketMessage.Channel*
  commentId: Overload:Discord.WebSocket.SocketMessage.Channel
  name: Channel
  nameWithType: SocketMessage.Channel
  fullName: Discord.WebSocket.SocketMessage.Channel
- uid: Discord.WebSocket.ISocketMessageChannel
  commentId: T:Discord.WebSocket.ISocketMessageChannel
  parent: Discord.WebSocket
  name: ISocketMessageChannel
  nameWithType: ISocketMessageChannel
  fullName: Discord.WebSocket.ISocketMessageChannel
- uid: Discord.WebSocket.SocketMessage.Source*
  commentId: Overload:Discord.WebSocket.SocketMessage.Source
  name: Source
  nameWithType: SocketMessage.Source
  fullName: Discord.WebSocket.SocketMessage.Source
- uid: Discord.IMessage.Source
  commentId: P:Discord.IMessage.Source
  parent: Discord.IMessage
  name: Source
  nameWithType: IMessage.Source
  fullName: Discord.IMessage.Source
- uid: Discord.MessageSource
  commentId: T:Discord.MessageSource
  parent: Discord
  name: MessageSource
  nameWithType: MessageSource
  fullName: Discord.MessageSource
- uid: Discord.WebSocket.SocketMessage.Content*
  commentId: Overload:Discord.WebSocket.SocketMessage.Content
  name: Content
  nameWithType: SocketMessage.Content
  fullName: Discord.WebSocket.SocketMessage.Content
- uid: Discord.IMessage.Content
  commentId: P:Discord.IMessage.Content
  parent: Discord.IMessage
  name: Content
  nameWithType: IMessage.Content
  fullName: Discord.IMessage.Content
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.WebSocket.SocketMessage.CreatedAt*
  commentId: Overload:Discord.WebSocket.SocketMessage.CreatedAt
  name: CreatedAt
  nameWithType: SocketMessage.CreatedAt
  fullName: Discord.WebSocket.SocketMessage.CreatedAt
- uid: Discord.ISnowflakeEntity.CreatedAt
  commentId: P:Discord.ISnowflakeEntity.CreatedAt
  parent: Discord.ISnowflakeEntity
  name: CreatedAt
  nameWithType: ISnowflakeEntity.CreatedAt
  fullName: Discord.ISnowflakeEntity.CreatedAt
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: Discord.WebSocket.SocketMessage.IsTTS*
  commentId: Overload:Discord.WebSocket.SocketMessage.IsTTS
  name: IsTTS
  nameWithType: SocketMessage.IsTTS
  fullName: Discord.WebSocket.SocketMessage.IsTTS
- uid: Discord.IMessage.IsTTS
  commentId: P:Discord.IMessage.IsTTS
  parent: Discord.IMessage
  name: IsTTS
  nameWithType: IMessage.IsTTS
  fullName: Discord.IMessage.IsTTS
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.WebSocket.SocketMessage.IsPinned*
  commentId: Overload:Discord.WebSocket.SocketMessage.IsPinned
  name: IsPinned
  nameWithType: SocketMessage.IsPinned
  fullName: Discord.WebSocket.SocketMessage.IsPinned
- uid: Discord.IMessage.IsPinned
  commentId: P:Discord.IMessage.IsPinned
  parent: Discord.IMessage
  name: IsPinned
  nameWithType: IMessage.IsPinned
  fullName: Discord.IMessage.IsPinned
- uid: Discord.WebSocket.SocketMessage.IsSuppressed*
  commentId: Overload:Discord.WebSocket.SocketMessage.IsSuppressed
  name: IsSuppressed
  nameWithType: SocketMessage.IsSuppressed
  fullName: Discord.WebSocket.SocketMessage.IsSuppressed
- uid: Discord.IMessage.IsSuppressed
  commentId: P:Discord.IMessage.IsSuppressed
  parent: Discord.IMessage
  name: IsSuppressed
  nameWithType: IMessage.IsSuppressed
  fullName: Discord.IMessage.IsSuppressed
- uid: Discord.WebSocket.SocketMessage.EditedTimestamp*
  commentId: Overload:Discord.WebSocket.SocketMessage.EditedTimestamp
  name: EditedTimestamp
  nameWithType: SocketMessage.EditedTimestamp
  fullName: Discord.WebSocket.SocketMessage.EditedTimestamp
- uid: Discord.IMessage.EditedTimestamp
  commentId: P:Discord.IMessage.EditedTimestamp
  parent: Discord.IMessage
  name: EditedTimestamp
  nameWithType: IMessage.EditedTimestamp
  fullName: Discord.IMessage.EditedTimestamp
- uid: System.Nullable{System.DateTimeOffset}
  commentId: T:System.Nullable{System.DateTimeOffset}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTimeOffset>
  nameWithType: Nullable<DateTimeOffset>
  fullName: System.Nullable<System.DateTimeOffset>
  nameWithType.vb: Nullable(Of DateTimeOffset)
  fullName.vb: System.Nullable(Of System.DateTimeOffset)
  name.vb: Nullable(Of DateTimeOffset)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketMessage.Activity*
  commentId: Overload:Discord.WebSocket.SocketMessage.Activity
  name: Activity
  nameWithType: SocketMessage.Activity
  fullName: Discord.WebSocket.SocketMessage.Activity
- uid: Discord.IMessage.Activity
  commentId: P:Discord.IMessage.Activity
  parent: Discord.IMessage
  name: Activity
  nameWithType: IMessage.Activity
  fullName: Discord.IMessage.Activity
- uid: Discord.MessageActivity
  commentId: T:Discord.MessageActivity
  parent: Discord
  name: MessageActivity
  nameWithType: MessageActivity
  fullName: Discord.MessageActivity
- uid: Discord.WebSocket.SocketMessage.Application*
  commentId: Overload:Discord.WebSocket.SocketMessage.Application
  name: Application
  nameWithType: SocketMessage.Application
  fullName: Discord.WebSocket.SocketMessage.Application
- uid: Discord.IMessage.Application
  commentId: P:Discord.IMessage.Application
  parent: Discord.IMessage
  name: Application
  nameWithType: IMessage.Application
  fullName: Discord.IMessage.Application
- uid: Discord.MessageApplication
  commentId: T:Discord.MessageApplication
  parent: Discord
  name: MessageApplication
  nameWithType: MessageApplication
  fullName: Discord.MessageApplication
- uid: Discord.WebSocket.SocketMessage.Attachments*
  commentId: Overload:Discord.WebSocket.SocketMessage.Attachments
  name: Attachments
  nameWithType: SocketMessage.Attachments
  fullName: Discord.WebSocket.SocketMessage.Attachments
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.Attachment}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.Attachment}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<Attachment>
  nameWithType: IReadOnlyCollection<Attachment>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.Attachment>
  nameWithType.vb: IReadOnlyCollection(Of Attachment)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.Attachment)
  name.vb: IReadOnlyCollection(Of Attachment)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Attachment
    name: Attachment
    nameWithType: Attachment
    fullName: Discord.Attachment
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Attachment
    name: Attachment
    nameWithType: Attachment
    fullName: Discord.Attachment
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Discord.WebSocket.SocketMessage.Embeds*
  commentId: Overload:Discord.WebSocket.SocketMessage.Embeds
  name: Embeds
  nameWithType: SocketMessage.Embeds
  fullName: Discord.WebSocket.SocketMessage.Embeds
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.Embed}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.Embed}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<Embed>
  nameWithType: IReadOnlyCollection<Embed>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.Embed>
  nameWithType.vb: IReadOnlyCollection(Of Embed)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.Embed)
  name.vb: IReadOnlyCollection(Of Embed)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketMessage.MentionedChannels*
  commentId: Overload:Discord.WebSocket.SocketMessage.MentionedChannels
  name: MentionedChannels
  nameWithType: SocketMessage.MentionedChannels
  fullName: Discord.WebSocket.SocketMessage.MentionedChannels
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketGuildChannel}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketGuildChannel}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<SocketGuildChannel>
  nameWithType: IReadOnlyCollection<SocketGuildChannel>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.WebSocket.SocketGuildChannel>
  nameWithType.vb: IReadOnlyCollection(Of SocketGuildChannel)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.WebSocket.SocketGuildChannel)
  name.vb: IReadOnlyCollection(Of SocketGuildChannel)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketGuildChannel
    name: SocketGuildChannel
    nameWithType: SocketGuildChannel
    fullName: Discord.WebSocket.SocketGuildChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketGuildChannel
    name: SocketGuildChannel
    nameWithType: SocketGuildChannel
    fullName: Discord.WebSocket.SocketGuildChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketMessage.MentionedRoles*
  commentId: Overload:Discord.WebSocket.SocketMessage.MentionedRoles
  name: MentionedRoles
  nameWithType: SocketMessage.MentionedRoles
  fullName: Discord.WebSocket.SocketMessage.MentionedRoles
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketRole}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketRole}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<SocketRole>
  nameWithType: IReadOnlyCollection<SocketRole>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.WebSocket.SocketRole>
  nameWithType.vb: IReadOnlyCollection(Of SocketRole)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.WebSocket.SocketRole)
  name.vb: IReadOnlyCollection(Of SocketRole)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketRole
    name: SocketRole
    nameWithType: SocketRole
    fullName: Discord.WebSocket.SocketRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketRole
    name: SocketRole
    nameWithType: SocketRole
    fullName: Discord.WebSocket.SocketRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketMessage.MentionedUsers*
  commentId: Overload:Discord.WebSocket.SocketMessage.MentionedUsers
  name: MentionedUsers
  nameWithType: SocketMessage.MentionedUsers
  fullName: Discord.WebSocket.SocketMessage.MentionedUsers
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketUser}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketUser}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<SocketUser>
  nameWithType: IReadOnlyCollection<SocketUser>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.WebSocket.SocketUser>
  nameWithType.vb: IReadOnlyCollection(Of SocketUser)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.WebSocket.SocketUser)
  name.vb: IReadOnlyCollection(Of SocketUser)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketUser
    name: SocketUser
    nameWithType: SocketUser
    fullName: Discord.WebSocket.SocketUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketUser
    name: SocketUser
    nameWithType: SocketUser
    fullName: Discord.WebSocket.SocketUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketMessage.Tags*
  commentId: Overload:Discord.WebSocket.SocketMessage.Tags
  name: Tags
  nameWithType: SocketMessage.Tags
  fullName: Discord.WebSocket.SocketMessage.Tags
- uid: Discord.IMessage.Tags
  commentId: P:Discord.IMessage.Tags
  parent: Discord.IMessage
  name: Tags
  nameWithType: IMessage.Tags
  fullName: Discord.IMessage.Tags
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.ITag}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.ITag}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<ITag>
  nameWithType: IReadOnlyCollection<ITag>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.ITag>
  nameWithType.vb: IReadOnlyCollection(Of ITag)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.ITag)
  name.vb: IReadOnlyCollection(Of ITag)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ITag
    name: ITag
    nameWithType: ITag
    fullName: Discord.ITag
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ITag
    name: ITag
    nameWithType: ITag
    fullName: Discord.ITag
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketMessage.Timestamp*
  commentId: Overload:Discord.WebSocket.SocketMessage.Timestamp
  name: Timestamp
  nameWithType: SocketMessage.Timestamp
  fullName: Discord.WebSocket.SocketMessage.Timestamp
- uid: Discord.IMessage.Timestamp
  commentId: P:Discord.IMessage.Timestamp
  parent: Discord.IMessage
  name: Timestamp
  nameWithType: IMessage.Timestamp
  fullName: Discord.IMessage.Timestamp
- uid: Discord.WebSocket.SocketMessage.DeleteAsync*
  commentId: Overload:Discord.WebSocket.SocketMessage.DeleteAsync
  name: DeleteAsync
  nameWithType: SocketMessage.DeleteAsync
  fullName: Discord.WebSocket.SocketMessage.DeleteAsync
- uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  commentId: M:Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  parent: Discord.IDeletable
  name: DeleteAsync(RequestOptions)
  nameWithType: IDeletable.DeleteAsync(RequestOptions)
  fullName: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: IDeletable.DeleteAsync
    fullName: Discord.IDeletable.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: IDeletable.DeleteAsync
    fullName: Discord.IDeletable.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketMessage.ToString*
  commentId: Overload:Discord.WebSocket.SocketMessage.ToString
  name: ToString
  nameWithType: SocketMessage.ToString
  fullName: Discord.WebSocket.SocketMessage.ToString
- uid: Discord.WebSocket.SocketMessage.Discord#IMessage#Author*
  commentId: Overload:Discord.WebSocket.SocketMessage.Discord#IMessage#Author
  name: IMessage.Author
  nameWithType: SocketMessage.IMessage.Author
  fullName: Discord.WebSocket.SocketMessage.Discord.IMessage.Author
  nameWithType.vb: SocketMessage.Discord.IMessage.Author
  name.vb: Discord.IMessage.Author
- uid: Discord.IMessage.Author
  commentId: P:Discord.IMessage.Author
  parent: Discord.IMessage
  name: Author
  nameWithType: IMessage.Author
  fullName: Discord.IMessage.Author
- uid: Discord.IUser
  commentId: T:Discord.IUser
  parent: Discord
  name: IUser
  nameWithType: IUser
  fullName: Discord.IUser
- uid: Discord.WebSocket.SocketMessage.Discord#IMessage#Channel*
  commentId: Overload:Discord.WebSocket.SocketMessage.Discord#IMessage#Channel
  name: IMessage.Channel
  nameWithType: SocketMessage.IMessage.Channel
  fullName: Discord.WebSocket.SocketMessage.Discord.IMessage.Channel
  nameWithType.vb: SocketMessage.Discord.IMessage.Channel
  name.vb: Discord.IMessage.Channel
- uid: Discord.IMessage.Channel
  commentId: P:Discord.IMessage.Channel
  parent: Discord.IMessage
  name: Channel
  nameWithType: IMessage.Channel
  fullName: Discord.IMessage.Channel
- uid: Discord.IMessageChannel
  commentId: T:Discord.IMessageChannel
  parent: Discord
  name: IMessageChannel
  nameWithType: IMessageChannel
  fullName: Discord.IMessageChannel
- uid: Discord.WebSocket.SocketMessage.Discord#IMessage#Type*
  commentId: Overload:Discord.WebSocket.SocketMessage.Discord#IMessage#Type
  name: IMessage.Type
  nameWithType: SocketMessage.IMessage.Type
  fullName: Discord.WebSocket.SocketMessage.Discord.IMessage.Type
  nameWithType.vb: SocketMessage.Discord.IMessage.Type
  name.vb: Discord.IMessage.Type
- uid: Discord.IMessage.Type
  commentId: P:Discord.IMessage.Type
  parent: Discord.IMessage
  name: Type
  nameWithType: IMessage.Type
  fullName: Discord.IMessage.Type
- uid: Discord.MessageType
  commentId: T:Discord.MessageType
  parent: Discord
  name: MessageType
  nameWithType: MessageType
  fullName: Discord.MessageType
- uid: Discord.WebSocket.SocketMessage.Discord#IMessage#Attachments*
  commentId: Overload:Discord.WebSocket.SocketMessage.Discord#IMessage#Attachments
  name: IMessage.Attachments
  nameWithType: SocketMessage.IMessage.Attachments
  fullName: Discord.WebSocket.SocketMessage.Discord.IMessage.Attachments
  nameWithType.vb: SocketMessage.Discord.IMessage.Attachments
  name.vb: Discord.IMessage.Attachments
- uid: Discord.IMessage.Attachments
  commentId: P:Discord.IMessage.Attachments
  parent: Discord.IMessage
  name: Attachments
  nameWithType: IMessage.Attachments
  fullName: Discord.IMessage.Attachments
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.IAttachment}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.IAttachment}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<IAttachment>
  nameWithType: IReadOnlyCollection<IAttachment>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.IAttachment>
  nameWithType.vb: IReadOnlyCollection(Of IAttachment)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.IAttachment)
  name.vb: IReadOnlyCollection(Of IAttachment)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IAttachment
    name: IAttachment
    nameWithType: IAttachment
    fullName: Discord.IAttachment
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IAttachment
    name: IAttachment
    nameWithType: IAttachment
    fullName: Discord.IAttachment
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketMessage.Discord#IMessage#Embeds*
  commentId: Overload:Discord.WebSocket.SocketMessage.Discord#IMessage#Embeds
  name: IMessage.Embeds
  nameWithType: SocketMessage.IMessage.Embeds
  fullName: Discord.WebSocket.SocketMessage.Discord.IMessage.Embeds
  nameWithType.vb: SocketMessage.Discord.IMessage.Embeds
  name.vb: Discord.IMessage.Embeds
- uid: Discord.IMessage.Embeds
  commentId: P:Discord.IMessage.Embeds
  parent: Discord.IMessage
  name: Embeds
  nameWithType: IMessage.Embeds
  fullName: Discord.IMessage.Embeds
- uid: Discord.EmbedType.Rich
  commentId: F:Discord.EmbedType.Rich
  isExternal: true
- uid: Discord.Embed
  commentId: T:Discord.Embed
  parent: Discord
  name: Embed
  nameWithType: Embed
  fullName: Discord.Embed
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.IEmbed}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.IEmbed}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<IEmbed>
  nameWithType: IReadOnlyCollection<IEmbed>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.IEmbed>
  nameWithType.vb: IReadOnlyCollection(Of IEmbed)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.IEmbed)
  name.vb: IReadOnlyCollection(Of IEmbed)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IEmbed
    name: IEmbed
    nameWithType: IEmbed
    fullName: Discord.IEmbed
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IEmbed
    name: IEmbed
    nameWithType: IEmbed
    fullName: Discord.IEmbed
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedChannelIds*
  commentId: Overload:Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedChannelIds
  name: IMessage.MentionedChannelIds
  nameWithType: SocketMessage.IMessage.MentionedChannelIds
  fullName: Discord.WebSocket.SocketMessage.Discord.IMessage.MentionedChannelIds
  nameWithType.vb: SocketMessage.Discord.IMessage.MentionedChannelIds
  name.vb: Discord.IMessage.MentionedChannelIds
- uid: Discord.IMessage.MentionedChannelIds
  commentId: P:Discord.IMessage.MentionedChannelIds
  parent: Discord.IMessage
  name: MentionedChannelIds
  nameWithType: IMessage.MentionedChannelIds
  fullName: Discord.IMessage.MentionedChannelIds
- uid: System.Collections.Generic.IReadOnlyCollection{System.UInt64}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{System.UInt64}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<UInt64>
  nameWithType: IReadOnlyCollection<UInt64>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.UInt64>
  nameWithType.vb: IReadOnlyCollection(Of UInt64)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of System.UInt64)
  name.vb: IReadOnlyCollection(Of UInt64)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedRoleIds*
  commentId: Overload:Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedRoleIds
  name: IMessage.MentionedRoleIds
  nameWithType: SocketMessage.IMessage.MentionedRoleIds
  fullName: Discord.WebSocket.SocketMessage.Discord.IMessage.MentionedRoleIds
  nameWithType.vb: SocketMessage.Discord.IMessage.MentionedRoleIds
  name.vb: Discord.IMessage.MentionedRoleIds
- uid: Discord.IMessage.MentionedRoleIds
  commentId: P:Discord.IMessage.MentionedRoleIds
  parent: Discord.IMessage
  name: MentionedRoleIds
  nameWithType: IMessage.MentionedRoleIds
  fullName: Discord.IMessage.MentionedRoleIds
- uid: Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedUserIds*
  commentId: Overload:Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedUserIds
  name: IMessage.MentionedUserIds
  nameWithType: SocketMessage.IMessage.MentionedUserIds
  fullName: Discord.WebSocket.SocketMessage.Discord.IMessage.MentionedUserIds
  nameWithType.vb: SocketMessage.Discord.IMessage.MentionedUserIds
  name.vb: Discord.IMessage.MentionedUserIds
- uid: Discord.IMessage.MentionedUserIds
  commentId: P:Discord.IMessage.MentionedUserIds
  parent: Discord.IMessage
  name: MentionedUserIds
  nameWithType: IMessage.MentionedUserIds
  fullName: Discord.IMessage.MentionedUserIds
