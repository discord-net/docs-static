### YamlMime:ManagedReference
items:
- uid: Discord.WebSocket.SocketGuild
  commentId: T:Discord.WebSocket.SocketGuild
  id: SocketGuild
  parent: Discord.WebSocket
  children:
  - Discord.WebSocket.SocketGuild.AddBanAsync(Discord.IUser,System.Int32,System.String,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.AddBanAsync(System.UInt64,System.Int32,System.String,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.AddGuildUserAsync(System.UInt64,System.String,System.Action{Discord.AddGuildUserProperties},Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.AFKChannel
  - Discord.WebSocket.SocketGuild.AFKTimeout
  - Discord.WebSocket.SocketGuild.ApplicationId
  - Discord.WebSocket.SocketGuild.AudioClient
  - Discord.WebSocket.SocketGuild.BannerId
  - Discord.WebSocket.SocketGuild.BannerUrl
  - Discord.WebSocket.SocketGuild.CategoryChannels
  - Discord.WebSocket.SocketGuild.Channels
  - Discord.WebSocket.SocketGuild.CreateCategoryChannelAsync(System.String,System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.CreatedAt
  - Discord.WebSocket.SocketGuild.CreateEmoteAsync(System.String,Discord.Image,Discord.Optional{System.Collections.Generic.IEnumerable{Discord.IRole}},Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.CreateIntegrationAsync(System.UInt64,System.String,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.CreateTextChannelAsync(System.String,System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.CreateVoiceChannelAsync(System.String,System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.CurrentUser
  - Discord.WebSocket.SocketGuild.DefaultChannel
  - Discord.WebSocket.SocketGuild.DefaultMessageNotifications
  - Discord.WebSocket.SocketGuild.DeleteAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.DeleteEmoteAsync(Discord.GuildEmote,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Description
  - Discord.WebSocket.SocketGuild.Discord#IGuild#AddGuildUserAsync(System.UInt64,System.String,System.Action{Discord.AddGuildUserProperties},Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#AFKChannelId
  - Discord.WebSocket.SocketGuild.Discord#IGuild#AudioClient
  - Discord.WebSocket.SocketGuild.Discord#IGuild#Available
  - Discord.WebSocket.SocketGuild.Discord#IGuild#CreateCategoryAsync(System.String,System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#CreateIntegrationAsync(System.UInt64,System.String,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#CreateTextChannelAsync(System.String,System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#CreateVoiceChannelAsync(System.String,System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#DefaultChannelId
  - Discord.WebSocket.SocketGuild.Discord#IGuild#EmbedChannelId
  - Discord.WebSocket.SocketGuild.Discord#IGuild#EveryoneRole
  - Discord.WebSocket.SocketGuild.Discord#IGuild#GetAFKChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#GetAuditLogsAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{Discord.ActionType})
  - Discord.WebSocket.SocketGuild.Discord#IGuild#GetBanAsync(Discord.IUser,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#GetBanAsync(System.UInt64,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#GetBansAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#GetCategoriesAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#GetChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#GetCurrentUserAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#GetDefaultChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#GetEmbedChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#GetIntegrationsAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#GetInvitesAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#GetOwnerAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#GetRole(System.UInt64)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#GetSystemChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#GetTextChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#GetTextChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#GetVanityInviteAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#GetVoiceChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#GetVoiceChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#GetVoiceRegionsAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#GetWebhooksAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Discord#IGuild#Roles
  - Discord.WebSocket.SocketGuild.Discord#IGuild#SystemChannelId
  - Discord.WebSocket.SocketGuild.DownloadedMemberCount
  - Discord.WebSocket.SocketGuild.DownloaderPromise
  - Discord.WebSocket.SocketGuild.DownloadUsersAsync
  - Discord.WebSocket.SocketGuild.EmbedChannel
  - Discord.WebSocket.SocketGuild.Emotes
  - Discord.WebSocket.SocketGuild.EveryoneRole
  - Discord.WebSocket.SocketGuild.ExplicitContentFilter
  - Discord.WebSocket.SocketGuild.Features
  - Discord.WebSocket.SocketGuild.GetAuditLogsAsync(System.Int32,Discord.RequestOptions,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{Discord.ActionType})
  - Discord.WebSocket.SocketGuild.GetBanAsync(Discord.IUser,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.GetBanAsync(System.UInt64,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.GetBansAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.GetCategoryChannel(System.UInt64)
  - Discord.WebSocket.SocketGuild.GetChannel(System.UInt64)
  - Discord.WebSocket.SocketGuild.GetEmoteAsync(System.UInt64,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.GetIntegrationsAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.GetInvitesAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.GetRole(System.UInt64)
  - Discord.WebSocket.SocketGuild.GetTextChannel(System.UInt64)
  - Discord.WebSocket.SocketGuild.GetUser(System.UInt64)
  - Discord.WebSocket.SocketGuild.GetVanityInviteAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.GetVoiceChannel(System.UInt64)
  - Discord.WebSocket.SocketGuild.GetVoiceRegionsAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.GetWebhooksAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.HasAllMembers
  - Discord.WebSocket.SocketGuild.IconId
  - Discord.WebSocket.SocketGuild.IconUrl
  - Discord.WebSocket.SocketGuild.IsConnected
  - Discord.WebSocket.SocketGuild.IsEmbeddable
  - Discord.WebSocket.SocketGuild.IsSynced
  - Discord.WebSocket.SocketGuild.LeaveAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.MemberCount
  - Discord.WebSocket.SocketGuild.MfaLevel
  - Discord.WebSocket.SocketGuild.ModifyAsync(System.Action{Discord.GuildProperties},Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.ModifyEmbedAsync(System.Action{Discord.GuildEmbedProperties},Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.ModifyEmoteAsync(Discord.GuildEmote,System.Action{Discord.EmoteProperties},Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Name
  - Discord.WebSocket.SocketGuild.Owner
  - Discord.WebSocket.SocketGuild.OwnerId
  - Discord.WebSocket.SocketGuild.PremiumSubscriptionCount
  - Discord.WebSocket.SocketGuild.PremiumTier
  - Discord.WebSocket.SocketGuild.PruneUsersAsync(System.Int32,System.Boolean,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.RemoveBanAsync(Discord.IUser,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.RemoveBanAsync(System.UInt64,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.ReorderChannelsAsync(System.Collections.Generic.IEnumerable{Discord.ReorderChannelProperties},Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.ReorderRolesAsync(System.Collections.Generic.IEnumerable{Discord.ReorderRoleProperties},Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Roles
  - Discord.WebSocket.SocketGuild.SplashId
  - Discord.WebSocket.SocketGuild.SplashUrl
  - Discord.WebSocket.SocketGuild.SyncPromise
  - Discord.WebSocket.SocketGuild.System#IDisposable#Dispose
  - Discord.WebSocket.SocketGuild.SystemChannel
  - Discord.WebSocket.SocketGuild.SystemChannelFlags
  - Discord.WebSocket.SocketGuild.TextChannels
  - Discord.WebSocket.SocketGuild.ToString
  - Discord.WebSocket.SocketGuild.Users
  - Discord.WebSocket.SocketGuild.VanityURLCode
  - Discord.WebSocket.SocketGuild.VerificationLevel
  - Discord.WebSocket.SocketGuild.VoiceChannels
  - Discord.WebSocket.SocketGuild.VoiceRegionId
  langs:
  - csharp
  - vb
  name: SocketGuild
  nameWithType: SocketGuild
  fullName: Discord.WebSocket.SocketGuild
  type: Class
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SocketGuild
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 26
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nRepresents a WebSocket-based guild object.\n"
  example: []
  syntax:
    content: 'public class SocketGuild : SocketEntity<ulong>, IGuild, IDeletable, ISnowflakeEntity, IEntity<ulong>, IDisposable'
    content.vb: >-
      Public Class SocketGuild
          Inherits SocketEntity(Of ULong)
          Implements IGuild, IDeletable, ISnowflakeEntity, IEntity(Of ULong), IDisposable
  inheritance:
  - System.Object
  - Discord.WebSocket.SocketEntity{System.UInt64}
  implements:
  - Discord.IGuild
  - Discord.IDeletable
  - Discord.ISnowflakeEntity
  - Discord.IEntity{System.UInt64}
  - System.IDisposable
  inheritedMembers:
  - Discord.WebSocket.SocketEntity{System.UInt64}.Id
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.WebSocket.SocketGuild.Name
  commentId: P:Discord.WebSocket.SocketGuild.Name
  id: Name
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: SocketGuild.Name
  fullName: Discord.WebSocket.SocketGuild.Name
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Name
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 43
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the name of this guild.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA string containing the name of this guild.\n"
    content.vb: Public ReadOnly Property Name As String
  overload: Discord.WebSocket.SocketGuild.Name*
  implements:
  - Discord.IGuild.Name
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.AFKTimeout
  commentId: P:Discord.WebSocket.SocketGuild.AFKTimeout
  id: AFKTimeout
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: AFKTimeout
  nameWithType: SocketGuild.AFKTimeout
  fullName: Discord.WebSocket.SocketGuild.AFKTimeout
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: AFKTimeout
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 45
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the amount of time (in seconds) a user must be inactive in a voice channel for until they are\nautomatically moved to the AFK voice channel.\n"
  example: []
  syntax:
    content: public int AFKTimeout { get; }
    parameters: []
    return:
      type: System.Int32
      description: "\nAn <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> representing the amount of time in seconds for a user to be marked as inactive\nand moved into the AFK voice channel.\n"
    content.vb: Public ReadOnly Property AFKTimeout As Integer
  overload: Discord.WebSocket.SocketGuild.AFKTimeout*
  implements:
  - Discord.IGuild.AFKTimeout
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.IsEmbeddable
  commentId: P:Discord.WebSocket.SocketGuild.IsEmbeddable
  id: IsEmbeddable
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IsEmbeddable
  nameWithType: SocketGuild.IsEmbeddable
  fullName: Discord.WebSocket.SocketGuild.IsEmbeddable
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsEmbeddable
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 47
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a value that indicates whether this guild is embeddable (i.e. can use widget).\n"
  example: []
  syntax:
    content: public bool IsEmbeddable { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this guild can be embedded via widgets; otherwise <code>false</code>.\n"
    content.vb: Public ReadOnly Property IsEmbeddable As Boolean
  overload: Discord.WebSocket.SocketGuild.IsEmbeddable*
  implements:
  - Discord.IGuild.IsEmbeddable
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.VerificationLevel
  commentId: P:Discord.WebSocket.SocketGuild.VerificationLevel
  id: VerificationLevel
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: VerificationLevel
  nameWithType: SocketGuild.VerificationLevel
  fullName: Discord.WebSocket.SocketGuild.VerificationLevel
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: VerificationLevel
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 49
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the level of requirements a user must fulfill before being allowed to post messages in this guild.\n"
  example: []
  syntax:
    content: public VerificationLevel VerificationLevel { get; }
    parameters: []
    return:
      type: Discord.VerificationLevel
      description: "\nThe level of requirements.\n"
    content.vb: Public ReadOnly Property VerificationLevel As VerificationLevel
  overload: Discord.WebSocket.SocketGuild.VerificationLevel*
  implements:
  - Discord.IGuild.VerificationLevel
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.MfaLevel
  commentId: P:Discord.WebSocket.SocketGuild.MfaLevel
  id: MfaLevel
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: MfaLevel
  nameWithType: SocketGuild.MfaLevel
  fullName: Discord.WebSocket.SocketGuild.MfaLevel
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: MfaLevel
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 51
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the level of Multi-Factor Authentication requirements a user must fulfill before being allowed to\nperform administrative actions in this guild.\n"
  example: []
  syntax:
    content: public MfaLevel MfaLevel { get; }
    parameters: []
    return:
      type: Discord.MfaLevel
      description: "\nThe level of MFA requirement.\n"
    content.vb: Public ReadOnly Property MfaLevel As MfaLevel
  overload: Discord.WebSocket.SocketGuild.MfaLevel*
  implements:
  - Discord.IGuild.MfaLevel
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.DefaultMessageNotifications
  commentId: P:Discord.WebSocket.SocketGuild.DefaultMessageNotifications
  id: DefaultMessageNotifications
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: DefaultMessageNotifications
  nameWithType: SocketGuild.DefaultMessageNotifications
  fullName: Discord.WebSocket.SocketGuild.DefaultMessageNotifications
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DefaultMessageNotifications
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 53
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the default message notifications for users who haven&apos;t explicitly set their notification settings.\n"
  example: []
  syntax:
    content: public DefaultMessageNotifications DefaultMessageNotifications { get; }
    parameters: []
    return:
      type: Discord.DefaultMessageNotifications
    content.vb: Public ReadOnly Property DefaultMessageNotifications As DefaultMessageNotifications
  overload: Discord.WebSocket.SocketGuild.DefaultMessageNotifications*
  implements:
  - Discord.IGuild.DefaultMessageNotifications
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.ExplicitContentFilter
  commentId: P:Discord.WebSocket.SocketGuild.ExplicitContentFilter
  id: ExplicitContentFilter
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: ExplicitContentFilter
  nameWithType: SocketGuild.ExplicitContentFilter
  fullName: Discord.WebSocket.SocketGuild.ExplicitContentFilter
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ExplicitContentFilter
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 55
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the level of content filtering applied to user&apos;s content in a Guild.\n"
  example: []
  syntax:
    content: public ExplicitContentFilterLevel ExplicitContentFilter { get; }
    parameters: []
    return:
      type: Discord.ExplicitContentFilterLevel
      description: "\nThe level of explicit content filtering.\n"
    content.vb: Public ReadOnly Property ExplicitContentFilter As ExplicitContentFilterLevel
  overload: Discord.WebSocket.SocketGuild.ExplicitContentFilter*
  implements:
  - Discord.IGuild.ExplicitContentFilter
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.MemberCount
  commentId: P:Discord.WebSocket.SocketGuild.MemberCount
  id: MemberCount
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: MemberCount
  nameWithType: SocketGuild.MemberCount
  fullName: Discord.WebSocket.SocketGuild.MemberCount
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: MemberCount
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 73
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the number of members.\n"
  remarks: "\nThis property retrieves the number of members returned by Discord.\n<div class=\"TIP\"><h5>tip</h5><p>\n<p>\n    Due to how this property is returned by Discord instead of relying on the WebSocket cache, the\n    number here is the most accurate in terms of counting the number of users within this guild.\n</p>\n<p>\n    Use this instead of enumerating the count of the\n<xref href=\"Discord.WebSocket.SocketGuild.Users\" data-throw-if-not-resolved=\"false\"></xref> collection, as you may see discrepancy\nbetween that and this property.\n</p>\n</p></div>\n"
  example: []
  syntax:
    content: public int MemberCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property MemberCount As Integer
  overload: Discord.WebSocket.SocketGuild.MemberCount*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.DownloadedMemberCount
  commentId: P:Discord.WebSocket.SocketGuild.DownloadedMemberCount
  id: DownloadedMemberCount
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: DownloadedMemberCount
  nameWithType: SocketGuild.DownloadedMemberCount
  fullName: Discord.WebSocket.SocketGuild.DownloadedMemberCount
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DownloadedMemberCount
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 75
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Gets the number of members downloaded to the local guild cache. '
  example: []
  syntax:
    content: public int DownloadedMemberCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property DownloadedMemberCount As Integer
  overload: Discord.WebSocket.SocketGuild.DownloadedMemberCount*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.IsConnected
  commentId: P:Discord.WebSocket.SocketGuild.IsConnected
  id: IsConnected
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IsConnected
  nameWithType: SocketGuild.IsConnected
  fullName: Discord.WebSocket.SocketGuild.IsConnected
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsConnected
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 78
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Indicates whether the client is connected to this guild. '
  example: []
  syntax:
    content: public bool IsConnected { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsConnected As Boolean
  overload: Discord.WebSocket.SocketGuild.IsConnected*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.ApplicationId
  commentId: P:Discord.WebSocket.SocketGuild.ApplicationId
  id: ApplicationId
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: ApplicationId
  nameWithType: SocketGuild.ApplicationId
  fullName: Discord.WebSocket.SocketGuild.ApplicationId
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ApplicationId
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 80
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the application ID of the guild creator if it is bot-created.\n"
  example: []
  syntax:
    content: public ulong? ApplicationId { get; }
    parameters: []
    return:
      type: System.Nullable{System.UInt64}
      description: "\nA <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> representing the snowflake identifier of the application ID that created this guild, or <code>null</code> if it was not bot-created.\n"
    content.vb: Public ReadOnly Property ApplicationId As ULong?
  overload: Discord.WebSocket.SocketGuild.ApplicationId*
  implements:
  - Discord.IGuild.ApplicationId
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.OwnerId
  commentId: P:Discord.WebSocket.SocketGuild.OwnerId
  id: OwnerId
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: OwnerId
  nameWithType: SocketGuild.OwnerId
  fullName: Discord.WebSocket.SocketGuild.OwnerId
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: OwnerId
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 86
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the ID of the user that owns this guild.\n"
  example: []
  syntax:
    content: public ulong OwnerId { get; }
    parameters: []
    return:
      type: System.UInt64
      description: "\nA <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> representing the snowflake identifier of the user that owns this guild.\n"
    content.vb: Public ReadOnly Property OwnerId As ULong
  overload: Discord.WebSocket.SocketGuild.OwnerId*
  implements:
  - Discord.IGuild.OwnerId
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.Owner
  commentId: P:Discord.WebSocket.SocketGuild.Owner
  id: Owner
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: Owner
  nameWithType: SocketGuild.Owner
  fullName: Discord.WebSocket.SocketGuild.Owner
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Owner
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 88
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Gets the user that owns this guild. '
  example: []
  syntax:
    content: public SocketGuildUser Owner { get; }
    parameters: []
    return:
      type: Discord.WebSocket.SocketGuildUser
    content.vb: Public ReadOnly Property Owner As SocketGuildUser
  overload: Discord.WebSocket.SocketGuild.Owner*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.VoiceRegionId
  commentId: P:Discord.WebSocket.SocketGuild.VoiceRegionId
  id: VoiceRegionId
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: VoiceRegionId
  nameWithType: SocketGuild.VoiceRegionId
  fullName: Discord.WebSocket.SocketGuild.VoiceRegionId
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: VoiceRegionId
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 90
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the ID of the region hosting this guild&apos;s voice channels.\n"
  example: []
  syntax:
    content: public string VoiceRegionId { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA string containing the identifier for the voice region that this guild uses (e.g. <code>eu-central</code>).\n"
    content.vb: Public ReadOnly Property VoiceRegionId As String
  overload: Discord.WebSocket.SocketGuild.VoiceRegionId*
  implements:
  - Discord.IGuild.VoiceRegionId
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.IconId
  commentId: P:Discord.WebSocket.SocketGuild.IconId
  id: IconId
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IconId
  nameWithType: SocketGuild.IconId
  fullName: Discord.WebSocket.SocketGuild.IconId
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IconId
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 92
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the ID of this guild&apos;s icon.\n"
  example: []
  syntax:
    content: public string IconId { get; }
    parameters: []
    return:
      type: System.String
      description: "\nAn identifier for the splash image; <code>null</code> if none is set.\n"
    content.vb: Public ReadOnly Property IconId As String
  overload: Discord.WebSocket.SocketGuild.IconId*
  implements:
  - Discord.IGuild.IconId
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.SplashId
  commentId: P:Discord.WebSocket.SocketGuild.SplashId
  id: SplashId
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: SplashId
  nameWithType: SocketGuild.SplashId
  fullName: Discord.WebSocket.SocketGuild.SplashId
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SplashId
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 94
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the ID of this guild&apos;s splash image.\n"
  example: []
  syntax:
    content: public string SplashId { get; }
    parameters: []
    return:
      type: System.String
      description: "\nAn identifier for the splash image; <code>null</code> if none is set.\n"
    content.vb: Public ReadOnly Property SplashId As String
  overload: Discord.WebSocket.SocketGuild.SplashId*
  implements:
  - Discord.IGuild.SplashId
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.PremiumTier
  commentId: P:Discord.WebSocket.SocketGuild.PremiumTier
  id: PremiumTier
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: PremiumTier
  nameWithType: SocketGuild.PremiumTier
  fullName: Discord.WebSocket.SocketGuild.PremiumTier
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: PremiumTier
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 96
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the tier of guild boosting in this guild.\n"
  example: []
  syntax:
    content: public PremiumTier PremiumTier { get; }
    parameters: []
    return:
      type: Discord.PremiumTier
      description: "\nThe tier of guild boosting in this guild.\n"
    content.vb: Public ReadOnly Property PremiumTier As PremiumTier
  overload: Discord.WebSocket.SocketGuild.PremiumTier*
  implements:
  - Discord.IGuild.PremiumTier
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.BannerId
  commentId: P:Discord.WebSocket.SocketGuild.BannerId
  id: BannerId
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: BannerId
  nameWithType: SocketGuild.BannerId
  fullName: Discord.WebSocket.SocketGuild.BannerId
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: BannerId
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 98
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the identifier for this guilds banner image.\n"
  example: []
  syntax:
    content: public string BannerId { get; }
    parameters: []
    return:
      type: System.String
      description: "\nAn identifier for the banner image; <code>null</code> if none is set.\n"
    content.vb: Public ReadOnly Property BannerId As String
  overload: Discord.WebSocket.SocketGuild.BannerId*
  implements:
  - Discord.IGuild.BannerId
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.VanityURLCode
  commentId: P:Discord.WebSocket.SocketGuild.VanityURLCode
  id: VanityURLCode
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: VanityURLCode
  nameWithType: SocketGuild.VanityURLCode
  fullName: Discord.WebSocket.SocketGuild.VanityURLCode
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: VanityURLCode
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 100
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the code for this guild&apos;s vanity invite URL.\n"
  example: []
  syntax:
    content: public string VanityURLCode { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA string containing the vanity invite code for this guild; <code>null</code> if none is set.\n"
    content.vb: Public ReadOnly Property VanityURLCode As String
  overload: Discord.WebSocket.SocketGuild.VanityURLCode*
  implements:
  - Discord.IGuild.VanityURLCode
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.SystemChannelFlags
  commentId: P:Discord.WebSocket.SocketGuild.SystemChannelFlags
  id: SystemChannelFlags
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: SystemChannelFlags
  nameWithType: SocketGuild.SystemChannelFlags
  fullName: Discord.WebSocket.SocketGuild.SystemChannelFlags
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SystemChannelFlags
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 102
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the flags for the types of system channel messages that are disabled.\n"
  example: []
  syntax:
    content: public SystemChannelMessageDeny SystemChannelFlags { get; }
    parameters: []
    return:
      type: Discord.SystemChannelMessageDeny
      description: "\nThe flags for the types of system channel messages that are disabled.\n"
    content.vb: Public ReadOnly Property SystemChannelFlags As SystemChannelMessageDeny
  overload: Discord.WebSocket.SocketGuild.SystemChannelFlags*
  implements:
  - Discord.IGuild.SystemChannelFlags
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.Description
  commentId: P:Discord.WebSocket.SocketGuild.Description
  id: Description
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: SocketGuild.Description
  fullName: Discord.WebSocket.SocketGuild.Description
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Description
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 104
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the description for the guild.\n"
  example: []
  syntax:
    content: public string Description { get; }
    parameters: []
    return:
      type: System.String
      description: "\nThe description for the guild; <code>null</code> if none is set.\n"
    content.vb: Public ReadOnly Property Description As String
  overload: Discord.WebSocket.SocketGuild.Description*
  implements:
  - Discord.IGuild.Description
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.PremiumSubscriptionCount
  commentId: P:Discord.WebSocket.SocketGuild.PremiumSubscriptionCount
  id: PremiumSubscriptionCount
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: PremiumSubscriptionCount
  nameWithType: SocketGuild.PremiumSubscriptionCount
  fullName: Discord.WebSocket.SocketGuild.PremiumSubscriptionCount
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: PremiumSubscriptionCount
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 106
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the number of premium subscribers of this guild.\n"
  remarks: "\nThis is the number of users who have boosted this guild.\n"
  example: []
  syntax:
    content: public int PremiumSubscriptionCount { get; }
    parameters: []
    return:
      type: System.Int32
      description: "\nThe number of premium subscribers of this guild.\n"
    content.vb: Public ReadOnly Property PremiumSubscriptionCount As Integer
  overload: Discord.WebSocket.SocketGuild.PremiumSubscriptionCount*
  implements:
  - Discord.IGuild.PremiumSubscriptionCount
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.CreatedAt
  commentId: P:Discord.WebSocket.SocketGuild.CreatedAt
  id: CreatedAt
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: CreatedAt
  nameWithType: SocketGuild.CreatedAt
  fullName: Discord.WebSocket.SocketGuild.CreatedAt
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreatedAt
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 109
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets when the snowflake was created.\n"
  example: []
  syntax:
    content: public DateTimeOffset CreatedAt { get; }
    parameters: []
    return:
      type: System.DateTimeOffset
      description: "\nA <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> representing when the entity was first created.\n"
    content.vb: Public ReadOnly Property CreatedAt As DateTimeOffset
  overload: Discord.WebSocket.SocketGuild.CreatedAt*
  implements:
  - Discord.ISnowflakeEntity.CreatedAt
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.IconUrl
  commentId: P:Discord.WebSocket.SocketGuild.IconUrl
  id: IconUrl
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IconUrl
  nameWithType: SocketGuild.IconUrl
  fullName: Discord.WebSocket.SocketGuild.IconUrl
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IconUrl
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 111
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the URL of this guild&apos;s icon.\n"
  example: []
  syntax:
    content: public string IconUrl { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA URL pointing to the guild&apos;s icon; <code>null</code> if none is set.\n"
    content.vb: Public ReadOnly Property IconUrl As String
  overload: Discord.WebSocket.SocketGuild.IconUrl*
  implements:
  - Discord.IGuild.IconUrl
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.SplashUrl
  commentId: P:Discord.WebSocket.SocketGuild.SplashUrl
  id: SplashUrl
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: SplashUrl
  nameWithType: SocketGuild.SplashUrl
  fullName: Discord.WebSocket.SocketGuild.SplashUrl
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SplashUrl
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 113
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the URL of this guild&apos;s splash image.\n"
  example: []
  syntax:
    content: public string SplashUrl { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA URL pointing to the guild&apos;s splash image; <code>null</code> if none is set.\n"
    content.vb: Public ReadOnly Property SplashUrl As String
  overload: Discord.WebSocket.SocketGuild.SplashUrl*
  implements:
  - Discord.IGuild.SplashUrl
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.BannerUrl
  commentId: P:Discord.WebSocket.SocketGuild.BannerUrl
  id: BannerUrl
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: BannerUrl
  nameWithType: SocketGuild.BannerUrl
  fullName: Discord.WebSocket.SocketGuild.BannerUrl
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: BannerUrl
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 115
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the URL of this guild&apos;s banner image.\n"
  example: []
  syntax:
    content: public string BannerUrl { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA URL pointing to the guild&apos;s banner image; <code>null</code> if none is set.\n"
    content.vb: Public ReadOnly Property BannerUrl As String
  overload: Discord.WebSocket.SocketGuild.BannerUrl*
  implements:
  - Discord.IGuild.BannerUrl
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.HasAllMembers
  commentId: P:Discord.WebSocket.SocketGuild.HasAllMembers
  id: HasAllMembers
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: HasAllMembers
  nameWithType: SocketGuild.HasAllMembers
  fullName: Discord.WebSocket.SocketGuild.HasAllMembers
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: HasAllMembers
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 117
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Indicates whether the client has all the members downloaded to the local guild cache. '
  example: []
  syntax:
    content: public bool HasAllMembers { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasAllMembers As Boolean
  overload: Discord.WebSocket.SocketGuild.HasAllMembers*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.IsSynced
  commentId: P:Discord.WebSocket.SocketGuild.IsSynced
  id: IsSynced
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IsSynced
  nameWithType: SocketGuild.IsSynced
  fullName: Discord.WebSocket.SocketGuild.IsSynced
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsSynced
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 119
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Indicates whether the guild cache is synced to this guild. '
  example: []
  syntax:
    content: public bool IsSynced { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSynced As Boolean
  overload: Discord.WebSocket.SocketGuild.IsSynced*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.SyncPromise
  commentId: P:Discord.WebSocket.SocketGuild.SyncPromise
  id: SyncPromise
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: SyncPromise
  nameWithType: SocketGuild.SyncPromise
  fullName: Discord.WebSocket.SocketGuild.SyncPromise
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SyncPromise
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 120
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  syntax:
    content: public Task SyncPromise { get; }
    parameters: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public ReadOnly Property SyncPromise As Task
  overload: Discord.WebSocket.SocketGuild.SyncPromise*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.DownloaderPromise
  commentId: P:Discord.WebSocket.SocketGuild.DownloaderPromise
  id: DownloaderPromise
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: DownloaderPromise
  nameWithType: SocketGuild.DownloaderPromise
  fullName: Discord.WebSocket.SocketGuild.DownloaderPromise
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DownloaderPromise
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 121
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  syntax:
    content: public Task DownloaderPromise { get; }
    parameters: []
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public ReadOnly Property DownloaderPromise As Task
  overload: Discord.WebSocket.SocketGuild.DownloaderPromise*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.AudioClient
  commentId: P:Discord.WebSocket.SocketGuild.AudioClient
  id: AudioClient
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: AudioClient
  nameWithType: SocketGuild.AudioClient
  fullName: Discord.WebSocket.SocketGuild.AudioClient
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: AudioClient
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 125
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the <xref href=\"Discord.Audio.IAudioClient\" data-throw-if-not-resolved=\"false\"></xref> associated with this guild.\n"
  example: []
  syntax:
    content: public IAudioClient AudioClient { get; }
    parameters: []
    return:
      type: Discord.Audio.IAudioClient
    content.vb: Public ReadOnly Property AudioClient As IAudioClient
  overload: Discord.WebSocket.SocketGuild.AudioClient*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.DefaultChannel
  commentId: P:Discord.WebSocket.SocketGuild.DefaultChannel
  id: DefaultChannel
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: DefaultChannel
  nameWithType: SocketGuild.DefaultChannel
  fullName: Discord.WebSocket.SocketGuild.DefaultChannel
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DefaultChannel
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 139
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the default channel in this guild.\n"
  remarks: "\nThis property retrieves the first viewable text channel for this guild.\n<div class=\"WARNING\"><h5>warning</h5><p>\n    This channel does not guarantee the user can send message to it, as it only looks for the first viewable\n    text channel.\n</p></div>\n"
  example: []
  syntax:
    content: public SocketTextChannel DefaultChannel { get; }
    parameters: []
    return:
      type: Discord.WebSocket.SocketTextChannel
      description: "\nA <xref href=\"Discord.WebSocket.SocketTextChannel\" data-throw-if-not-resolved=\"false\"></xref> representing the first viewable channel that the user has access to.\n"
    content.vb: Public ReadOnly Property DefaultChannel As SocketTextChannel
  overload: Discord.WebSocket.SocketGuild.DefaultChannel*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.AFKChannel
  commentId: P:Discord.WebSocket.SocketGuild.AFKChannel
  id: AFKChannel
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: AFKChannel
  nameWithType: SocketGuild.AFKChannel
  fullName: Discord.WebSocket.SocketGuild.AFKChannel
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: AFKChannel
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 150
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the AFK voice channel in this guild.\n"
  example: []
  syntax:
    content: public SocketVoiceChannel AFKChannel { get; }
    parameters: []
    return:
      type: Discord.WebSocket.SocketVoiceChannel
      description: "\nA <xref href=\"Discord.WebSocket.SocketVoiceChannel\" data-throw-if-not-resolved=\"false\"></xref> that the AFK users will be moved to after they have idled for too\nlong; <code>null</code> if none is set.\n"
    content.vb: Public ReadOnly Property AFKChannel As SocketVoiceChannel
  overload: Discord.WebSocket.SocketGuild.AFKChannel*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.EmbedChannel
  commentId: P:Discord.WebSocket.SocketGuild.EmbedChannel
  id: EmbedChannel
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: EmbedChannel
  nameWithType: SocketGuild.EmbedChannel
  fullName: Discord.WebSocket.SocketGuild.EmbedChannel
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: EmbedChannel
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 164
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the embed channel (i.e. the channel set in the guild&apos;s widget settings) in this guild.\n"
  example: []
  syntax:
    content: public SocketGuildChannel EmbedChannel { get; }
    parameters: []
    return:
      type: Discord.WebSocket.SocketGuildChannel
      description: "\nA channel set within the server&apos;s widget settings; <code>null</code> if none is set.\n"
    content.vb: Public ReadOnly Property EmbedChannel As SocketGuildChannel
  overload: Discord.WebSocket.SocketGuild.EmbedChannel*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.SystemChannel
  commentId: P:Discord.WebSocket.SocketGuild.SystemChannel
  id: SystemChannel
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: SystemChannel
  nameWithType: SocketGuild.SystemChannel
  fullName: Discord.WebSocket.SocketGuild.SystemChannel
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SystemChannel
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 178
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the system channel where randomized welcome messages are sent in this guild.\n"
  example: []
  syntax:
    content: public SocketTextChannel SystemChannel { get; }
    parameters: []
    return:
      type: Discord.WebSocket.SocketTextChannel
      description: "\nA text channel where randomized welcome messages will be sent to; <code>null</code> if none is set.\n"
    content.vb: Public ReadOnly Property SystemChannel As SocketTextChannel
  overload: Discord.WebSocket.SocketGuild.SystemChannel*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.TextChannels
  commentId: P:Discord.WebSocket.SocketGuild.TextChannels
  id: TextChannels
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: TextChannels
  nameWithType: SocketGuild.TextChannels
  fullName: Discord.WebSocket.SocketGuild.TextChannels
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: TextChannels
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 192
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all text channels in this guild.\n"
  example: []
  syntax:
    content: public IReadOnlyCollection<SocketTextChannel> TextChannels { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketTextChannel}
      description: "\nA read-only collection of message channels found within this guild.\n"
    content.vb: Public ReadOnly Property TextChannels As IReadOnlyCollection(Of SocketTextChannel)
  overload: Discord.WebSocket.SocketGuild.TextChannels*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.VoiceChannels
  commentId: P:Discord.WebSocket.SocketGuild.VoiceChannels
  id: VoiceChannels
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: VoiceChannels
  nameWithType: SocketGuild.VoiceChannels
  fullName: Discord.WebSocket.SocketGuild.VoiceChannels
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: VoiceChannels
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 200
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all voice channels in this guild.\n"
  example: []
  syntax:
    content: public IReadOnlyCollection<SocketVoiceChannel> VoiceChannels { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketVoiceChannel}
      description: "\nA read-only collection of voice channels found within this guild.\n"
    content.vb: Public ReadOnly Property VoiceChannels As IReadOnlyCollection(Of SocketVoiceChannel)
  overload: Discord.WebSocket.SocketGuild.VoiceChannels*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.CategoryChannels
  commentId: P:Discord.WebSocket.SocketGuild.CategoryChannels
  id: CategoryChannels
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: CategoryChannels
  nameWithType: SocketGuild.CategoryChannels
  fullName: Discord.WebSocket.SocketGuild.CategoryChannels
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CategoryChannels
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 208
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all category channels in this guild.\n"
  example: []
  syntax:
    content: public IReadOnlyCollection<SocketCategoryChannel> CategoryChannels { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketCategoryChannel}
      description: "\nA read-only collection of category channels found within this guild.\n"
    content.vb: Public ReadOnly Property CategoryChannels As IReadOnlyCollection(Of SocketCategoryChannel)
  overload: Discord.WebSocket.SocketGuild.CategoryChannels*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.CurrentUser
  commentId: P:Discord.WebSocket.SocketGuild.CurrentUser
  id: CurrentUser
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: CurrentUser
  nameWithType: SocketGuild.CurrentUser
  fullName: Discord.WebSocket.SocketGuild.CurrentUser
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CurrentUser
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 213
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the current logged-in user.\n"
  example: []
  syntax:
    content: public SocketGuildUser CurrentUser { get; }
    parameters: []
    return:
      type: Discord.WebSocket.SocketGuildUser
    content.vb: Public ReadOnly Property CurrentUser As SocketGuildUser
  overload: Discord.WebSocket.SocketGuild.CurrentUser*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.EveryoneRole
  commentId: P:Discord.WebSocket.SocketGuild.EveryoneRole
  id: EveryoneRole
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: EveryoneRole
  nameWithType: SocketGuild.EveryoneRole
  fullName: Discord.WebSocket.SocketGuild.EveryoneRole
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: EveryoneRole
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 220
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the built-in role containing all users in this guild.\n"
  example: []
  syntax:
    content: public SocketRole EveryoneRole { get; }
    parameters: []
    return:
      type: Discord.WebSocket.SocketRole
      description: "\nA role object that represents an <code>@everyone</code> role in this guild.\n"
    content.vb: Public ReadOnly Property EveryoneRole As SocketRole
  overload: Discord.WebSocket.SocketGuild.EveryoneRole*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.Channels
  commentId: P:Discord.WebSocket.SocketGuild.Channels
  id: Channels
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: Channels
  nameWithType: SocketGuild.Channels
  fullName: Discord.WebSocket.SocketGuild.Channels
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Channels
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 227
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all channels in this guild.\n"
  example: []
  syntax:
    content: public IReadOnlyCollection<SocketGuildChannel> Channels { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketGuildChannel}
      description: "\nA read-only collection of generic channels found within this guild.\n"
    content.vb: Public ReadOnly Property Channels As IReadOnlyCollection(Of SocketGuildChannel)
  overload: Discord.WebSocket.SocketGuild.Channels*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.Emotes
  commentId: P:Discord.WebSocket.SocketGuild.Emotes
  id: Emotes
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: Emotes
  nameWithType: SocketGuild.Emotes
  fullName: Discord.WebSocket.SocketGuild.Emotes
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Emotes
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 237
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all custom emotes for this guild.\n"
  example: []
  syntax:
    content: public IReadOnlyCollection<GuildEmote> Emotes { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.GuildEmote}
      description: "\nA read-only collection of all custom emotes for this guild.\n"
    content.vb: Public ReadOnly Property Emotes As IReadOnlyCollection(Of GuildEmote)
  overload: Discord.WebSocket.SocketGuild.Emotes*
  implements:
  - Discord.IGuild.Emotes
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.Features
  commentId: P:Discord.WebSocket.SocketGuild.Features
  id: Features
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: Features
  nameWithType: SocketGuild.Features
  fullName: Discord.WebSocket.SocketGuild.Features
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Features
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 239
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all extra features added to this guild.\n"
  example: []
  syntax:
    content: public IReadOnlyCollection<string> Features { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{System.String}
      description: "\nA read-only collection of enabled features in this guild.\n"
    content.vb: Public ReadOnly Property Features As IReadOnlyCollection(Of String)
  overload: Discord.WebSocket.SocketGuild.Features*
  implements:
  - Discord.IGuild.Features
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.Users
  commentId: P:Discord.WebSocket.SocketGuild.Users
  id: Users
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: Users
  nameWithType: SocketGuild.Users
  fullName: Discord.WebSocket.SocketGuild.Users
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Users
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 261
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of users in this guild.\n"
  remarks: "\nThis property retrieves all users found within this guild.\n<div class=\"WARNING\"><h5>warning</h5><p>\n<p>\n    This property may not always return all the members for large guilds (i.e. guilds containing\n    100+ users). If you are simply looking to get the number of users present in this guild,\n    consider using <xref href=\"Discord.WebSocket.SocketGuild.MemberCount\" data-throw-if-not-resolved=\"false\"></xref> instead.\n</p>\n<p>\n    Otherwise, you may need to enable <xref href=\"Discord.WebSocket.DiscordSocketConfig.AlwaysDownloadUsers\" data-throw-if-not-resolved=\"false\"></xref> to fetch\n    the full user list upon startup, or use <xref href=\"Discord.WebSocket.SocketGuild.DownloadUsersAsync\" data-throw-if-not-resolved=\"false\"></xref> to manually download\n    the users.\n</p>\n</p></div>\n"
  example: []
  syntax:
    content: public IReadOnlyCollection<SocketGuildUser> Users { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketGuildUser}
      description: "\nA collection of guild users found within this guild.\n"
    content.vb: Public ReadOnly Property Users As IReadOnlyCollection(Of SocketGuildUser)
  overload: Discord.WebSocket.SocketGuild.Users*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.Roles
  commentId: P:Discord.WebSocket.SocketGuild.Roles
  id: Roles
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: Roles
  nameWithType: SocketGuild.Roles
  fullName: Discord.WebSocket.SocketGuild.Roles
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Roles
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 268
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all roles in this guild.\n"
  example: []
  syntax:
    content: public IReadOnlyCollection<SocketRole> Roles { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketRole}
      description: "\nA read-only collection of roles found within this guild.\n"
    content.vb: Public ReadOnly Property Roles As IReadOnlyCollection(Of SocketRole)
  overload: Discord.WebSocket.SocketGuild.Roles*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.DeleteAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.DeleteAsync(Discord.RequestOptions)
  id: DeleteAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: DeleteAsync(RequestOptions)
  nameWithType: SocketGuild.DeleteAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.DeleteAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 437
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nDeletes this object and all its children.\n"
  example: []
  syntax:
    content: public Task DeleteAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function DeleteAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketGuild.DeleteAsync*
  implements:
  - Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.ModifyAsync(System.Action{Discord.GuildProperties},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.ModifyAsync(System.Action{Discord.GuildProperties},Discord.RequestOptions)
  id: ModifyAsync(System.Action{Discord.GuildProperties},Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: ModifyAsync(Action<GuildProperties>, RequestOptions)
  nameWithType: SocketGuild.ModifyAsync(Action<GuildProperties>, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.ModifyAsync(System.Action<Discord.GuildProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ModifyAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 442
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nModifies this guild.\n"
  example: []
  syntax:
    content: public Task ModifyAsync(Action<GuildProperties> func, RequestOptions options = null)
    parameters:
    - id: func
      type: System.Action{Discord.GuildProperties}
      description: The delegate containing the properties to modify the guild with.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous modification operation.\n"
    content.vb: Public Function ModifyAsync(func As Action(Of GuildProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketGuild.ModifyAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref" class="paramref">func</code> is <code>null</code>.
  implements:
  - Discord.IGuild.ModifyAsync(System.Action{Discord.GuildProperties},Discord.RequestOptions)
  nameWithType.vb: SocketGuild.ModifyAsync(Action(Of GuildProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketGuild.ModifyAsync(System.Action(Of Discord.GuildProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of GuildProperties), RequestOptions)
- uid: Discord.WebSocket.SocketGuild.ModifyEmbedAsync(System.Action{Discord.GuildEmbedProperties},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.ModifyEmbedAsync(System.Action{Discord.GuildEmbedProperties},Discord.RequestOptions)
  id: ModifyEmbedAsync(System.Action{Discord.GuildEmbedProperties},Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: ModifyEmbedAsync(Action<GuildEmbedProperties>, RequestOptions)
  nameWithType: SocketGuild.ModifyEmbedAsync(Action<GuildEmbedProperties>, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.ModifyEmbedAsync(System.Action<Discord.GuildEmbedProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ModifyEmbedAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 447
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nModifies this guild&apos;s embed channel.\n"
  example: []
  syntax:
    content: public Task ModifyEmbedAsync(Action<GuildEmbedProperties> func, RequestOptions options = null)
    parameters:
    - id: func
      type: System.Action{Discord.GuildEmbedProperties}
      description: The delegate containing the properties to modify the guild widget with.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous modification operation.\n"
    content.vb: Public Function ModifyEmbedAsync(func As Action(Of GuildEmbedProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketGuild.ModifyEmbedAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref" class="paramref">func</code> is <code>null</code>.
  implements:
  - Discord.IGuild.ModifyEmbedAsync(System.Action{Discord.GuildEmbedProperties},Discord.RequestOptions)
  nameWithType.vb: SocketGuild.ModifyEmbedAsync(Action(Of GuildEmbedProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketGuild.ModifyEmbedAsync(System.Action(Of Discord.GuildEmbedProperties), Discord.RequestOptions)
  name.vb: ModifyEmbedAsync(Action(Of GuildEmbedProperties), RequestOptions)
- uid: Discord.WebSocket.SocketGuild.ReorderChannelsAsync(System.Collections.Generic.IEnumerable{Discord.ReorderChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.ReorderChannelsAsync(System.Collections.Generic.IEnumerable{Discord.ReorderChannelProperties},Discord.RequestOptions)
  id: ReorderChannelsAsync(System.Collections.Generic.IEnumerable{Discord.ReorderChannelProperties},Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: ReorderChannelsAsync(IEnumerable<ReorderChannelProperties>, RequestOptions)
  nameWithType: SocketGuild.ReorderChannelsAsync(IEnumerable<ReorderChannelProperties>, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.ReorderChannelsAsync(System.Collections.Generic.IEnumerable<Discord.ReorderChannelProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ReorderChannelsAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 450
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nBulk-modifies the order of channels in this guild.\n"
  example: []
  syntax:
    content: public Task ReorderChannelsAsync(IEnumerable<ReorderChannelProperties> args, RequestOptions options = null)
    parameters:
    - id: args
      type: System.Collections.Generic.IEnumerable{Discord.ReorderChannelProperties}
      description: The properties used to modify the channel positions with.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous reorder operation.\n"
    content.vb: Public Function ReorderChannelsAsync(args As IEnumerable(Of ReorderChannelProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketGuild.ReorderChannelsAsync*
  implements:
  - Discord.IGuild.ReorderChannelsAsync(System.Collections.Generic.IEnumerable{Discord.ReorderChannelProperties},Discord.RequestOptions)
  nameWithType.vb: SocketGuild.ReorderChannelsAsync(IEnumerable(Of ReorderChannelProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketGuild.ReorderChannelsAsync(System.Collections.Generic.IEnumerable(Of Discord.ReorderChannelProperties), Discord.RequestOptions)
  name.vb: ReorderChannelsAsync(IEnumerable(Of ReorderChannelProperties), RequestOptions)
- uid: Discord.WebSocket.SocketGuild.ReorderRolesAsync(System.Collections.Generic.IEnumerable{Discord.ReorderRoleProperties},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.ReorderRolesAsync(System.Collections.Generic.IEnumerable{Discord.ReorderRoleProperties},Discord.RequestOptions)
  id: ReorderRolesAsync(System.Collections.Generic.IEnumerable{Discord.ReorderRoleProperties},Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: ReorderRolesAsync(IEnumerable<ReorderRoleProperties>, RequestOptions)
  nameWithType: SocketGuild.ReorderRolesAsync(IEnumerable<ReorderRoleProperties>, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.ReorderRolesAsync(System.Collections.Generic.IEnumerable<Discord.ReorderRoleProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ReorderRolesAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 453
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nBulk-modifies the order of roles in this guild.\n"
  example: []
  syntax:
    content: public Task ReorderRolesAsync(IEnumerable<ReorderRoleProperties> args, RequestOptions options = null)
    parameters:
    - id: args
      type: System.Collections.Generic.IEnumerable{Discord.ReorderRoleProperties}
      description: The properties used to modify the role positions with.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous reorder operation.\n"
    content.vb: Public Function ReorderRolesAsync(args As IEnumerable(Of ReorderRoleProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketGuild.ReorderRolesAsync*
  implements:
  - Discord.IGuild.ReorderRolesAsync(System.Collections.Generic.IEnumerable{Discord.ReorderRoleProperties},Discord.RequestOptions)
  nameWithType.vb: SocketGuild.ReorderRolesAsync(IEnumerable(Of ReorderRoleProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketGuild.ReorderRolesAsync(System.Collections.Generic.IEnumerable(Of Discord.ReorderRoleProperties), Discord.RequestOptions)
  name.vb: ReorderRolesAsync(IEnumerable(Of ReorderRoleProperties), RequestOptions)
- uid: Discord.WebSocket.SocketGuild.LeaveAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.LeaveAsync(Discord.RequestOptions)
  id: LeaveAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: LeaveAsync(RequestOptions)
  nameWithType: SocketGuild.LeaveAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.LeaveAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: LeaveAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 457
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nLeaves this guild.\n"
  remarks: "\nThis method will make the currently logged-in user leave the guild.\n<div class=\"NOTE\"><h5>note</h5><p>\n    If the user is the owner of this guild, use <xref href=\"Discord.IDeletable.DeleteAsync(Discord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref> instead.\n</p></div>\n"
  example: []
  syntax:
    content: public Task LeaveAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous leave operation.\n"
    content.vb: Public Function LeaveAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketGuild.LeaveAsync*
  implements:
  - Discord.IGuild.LeaveAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.GetBansAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.GetBansAsync(Discord.RequestOptions)
  id: GetBansAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetBansAsync(RequestOptions)
  nameWithType: SocketGuild.GetBansAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.GetBansAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetBansAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 470
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all users banned in this guild.\n"
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<RestBan>> GetBansAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestBan}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection of\nban objects that this guild currently possesses, with each object containing the user banned and reason\nbehind the ban.\n"
    content.vb: Public Function GetBansAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestBan))
  overload: Discord.WebSocket.SocketGuild.GetBansAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.GetBanAsync(Discord.IUser,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.GetBanAsync(Discord.IUser,Discord.RequestOptions)
  id: GetBanAsync(Discord.IUser,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetBanAsync(IUser, RequestOptions)
  nameWithType: SocketGuild.GetBanAsync(IUser, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.GetBanAsync(Discord.IUser, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetBanAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 481
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a ban object for a banned user.\n"
  example: []
  syntax:
    content: public Task<RestBan> GetBanAsync(IUser user, RequestOptions options = null)
    parameters:
    - id: user
      type: Discord.IUser
      description: The banned user.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestBan}
      description: "\nA task that represents the asynchronous get operation. The task result contains a ban object, which\ncontains the user information and the reason for the ban; <code>null</code> if the ban entry cannot be found.\n"
    content.vb: Public Function GetBanAsync(user As IUser, options As RequestOptions = Nothing) As Task(Of RestBan)
  overload: Discord.WebSocket.SocketGuild.GetBanAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.GetBanAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.GetBanAsync(System.UInt64,Discord.RequestOptions)
  id: GetBanAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetBanAsync(UInt64, RequestOptions)
  nameWithType: SocketGuild.GetBanAsync(UInt64, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.GetBanAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetBanAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 492
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a ban object for a banned user.\n"
  example: []
  syntax:
    content: public Task<RestBan> GetBanAsync(ulong userId, RequestOptions options = null)
    parameters:
    - id: userId
      type: System.UInt64
      description: The snowflake identifier for the banned user.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestBan}
      description: "\nA task that represents the asynchronous get operation. The task result contains a ban object, which\ncontains the user information and the reason for the ban; <code>null</code> if the ban entry cannot be found.\n"
    content.vb: Public Function GetBanAsync(userId As ULong, options As RequestOptions = Nothing) As Task(Of RestBan)
  overload: Discord.WebSocket.SocketGuild.GetBanAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.AddBanAsync(Discord.IUser,System.Int32,System.String,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.AddBanAsync(Discord.IUser,System.Int32,System.String,Discord.RequestOptions)
  id: AddBanAsync(Discord.IUser,System.Int32,System.String,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: AddBanAsync(IUser, Int32, String, RequestOptions)
  nameWithType: SocketGuild.AddBanAsync(IUser, Int32, String, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.AddBanAsync(Discord.IUser, System.Int32, System.String, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: AddBanAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 496
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nBans the user from this guild and optionally prunes their recent messages.\n"
  example: []
  syntax:
    content: public Task AddBanAsync(IUser user, int pruneDays = 0, string reason = null, RequestOptions options = null)
    parameters:
    - id: user
      type: Discord.IUser
      description: The user to ban.
    - id: pruneDays
      type: System.Int32
      description: The number of days to remove messages from this user for, and this number must be between [0, 7].
    - id: reason
      type: System.String
      description: The reason of the ban to be written in the audit log.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous add operation for the ban.\n"
    content.vb: Public Function AddBanAsync(user As IUser, pruneDays As Integer = 0, reason As String = Nothing, options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketGuild.AddBanAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code data-dev-comment-type="paramref" class="paramref">pruneDays</code> is not between 0 to 7.
  implements:
  - Discord.IGuild.AddBanAsync(Discord.IUser,System.Int32,System.String,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.AddBanAsync(System.UInt64,System.Int32,System.String,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.AddBanAsync(System.UInt64,System.Int32,System.String,Discord.RequestOptions)
  id: AddBanAsync(System.UInt64,System.Int32,System.String,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: AddBanAsync(UInt64, Int32, String, RequestOptions)
  nameWithType: SocketGuild.AddBanAsync(UInt64, Int32, String, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.AddBanAsync(System.UInt64, System.Int32, System.String, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: AddBanAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 499
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nBans the user from this guild and optionally prunes their recent messages.\n"
  example: []
  syntax:
    content: public Task AddBanAsync(ulong userId, int pruneDays = 0, string reason = null, RequestOptions options = null)
    parameters:
    - id: userId
      type: System.UInt64
      description: The snowflake ID of the user to ban.
    - id: pruneDays
      type: System.Int32
      description: The number of days to remove messages from this user for, and this number must be between [0, 7].
    - id: reason
      type: System.String
      description: The reason of the ban to be written in the audit log.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous add operation for the ban.\n"
    content.vb: Public Function AddBanAsync(userId As ULong, pruneDays As Integer = 0, reason As String = Nothing, options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketGuild.AddBanAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code data-dev-comment-type="paramref" class="paramref">pruneDays</code> is not between 0 to 7.
  implements:
  - Discord.IGuild.AddBanAsync(System.UInt64,System.Int32,System.String,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.RemoveBanAsync(Discord.IUser,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.RemoveBanAsync(Discord.IUser,Discord.RequestOptions)
  id: RemoveBanAsync(Discord.IUser,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: RemoveBanAsync(IUser, RequestOptions)
  nameWithType: SocketGuild.RemoveBanAsync(IUser, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.RemoveBanAsync(Discord.IUser, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RemoveBanAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 503
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nUnbans the user if they are currently banned.\n"
  example: []
  syntax:
    content: public Task RemoveBanAsync(IUser user, RequestOptions options = null)
    parameters:
    - id: user
      type: Discord.IUser
      description: The user to be unbanned.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous removal operation for the ban.\n"
    content.vb: Public Function RemoveBanAsync(user As IUser, options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketGuild.RemoveBanAsync*
  implements:
  - Discord.IGuild.RemoveBanAsync(Discord.IUser,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.RemoveBanAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.RemoveBanAsync(System.UInt64,Discord.RequestOptions)
  id: RemoveBanAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: RemoveBanAsync(UInt64, RequestOptions)
  nameWithType: SocketGuild.RemoveBanAsync(UInt64, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.RemoveBanAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RemoveBanAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 506
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nUnbans the user if they are currently banned.\n"
  example: []
  syntax:
    content: public Task RemoveBanAsync(ulong userId, RequestOptions options = null)
    parameters:
    - id: userId
      type: System.UInt64
      description: The snowflake identifier of the user to be unbanned.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous removal operation for the ban.\n"
    content.vb: Public Function RemoveBanAsync(userId As ULong, options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketGuild.RemoveBanAsync*
  implements:
  - Discord.IGuild.RemoveBanAsync(System.UInt64,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.GetChannel(System.UInt64)
  commentId: M:Discord.WebSocket.SocketGuild.GetChannel(System.UInt64)
  id: GetChannel(System.UInt64)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetChannel(UInt64)
  nameWithType: SocketGuild.GetChannel(UInt64)
  fullName: Discord.WebSocket.SocketGuild.GetChannel(System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetChannel
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 517
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a channel in this guild.\n"
  example: []
  syntax:
    content: public SocketGuildChannel GetChannel(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier for the channel.
    return:
      type: Discord.WebSocket.SocketGuildChannel
      description: "\nA generic channel associated with the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Public Function GetChannel(id As ULong) As SocketGuildChannel
  overload: Discord.WebSocket.SocketGuild.GetChannel*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.GetTextChannel(System.UInt64)
  commentId: M:Discord.WebSocket.SocketGuild.GetTextChannel(System.UInt64)
  id: GetTextChannel(System.UInt64)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetTextChannel(UInt64)
  nameWithType: SocketGuild.GetTextChannel(UInt64)
  fullName: Discord.WebSocket.SocketGuild.GetTextChannel(System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetTextChannel
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 531
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a text channel in this guild.\n"
  example: []
  syntax:
    content: public SocketTextChannel GetTextChannel(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier for the text channel.
    return:
      type: Discord.WebSocket.SocketTextChannel
      description: "\nA text channel associated with the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Public Function GetTextChannel(id As ULong) As SocketTextChannel
  overload: Discord.WebSocket.SocketGuild.GetTextChannel*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.GetVoiceChannel(System.UInt64)
  commentId: M:Discord.WebSocket.SocketGuild.GetVoiceChannel(System.UInt64)
  id: GetVoiceChannel(System.UInt64)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetVoiceChannel(UInt64)
  nameWithType: SocketGuild.GetVoiceChannel(UInt64)
  fullName: Discord.WebSocket.SocketGuild.GetVoiceChannel(System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetVoiceChannel
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 540
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a voice channel in this guild.\n"
  example: []
  syntax:
    content: public SocketVoiceChannel GetVoiceChannel(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier for the voice channel.
    return:
      type: Discord.WebSocket.SocketVoiceChannel
      description: "\nA voice channel associated with the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Public Function GetVoiceChannel(id As ULong) As SocketVoiceChannel
  overload: Discord.WebSocket.SocketGuild.GetVoiceChannel*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.GetCategoryChannel(System.UInt64)
  commentId: M:Discord.WebSocket.SocketGuild.GetCategoryChannel(System.UInt64)
  id: GetCategoryChannel(System.UInt64)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetCategoryChannel(UInt64)
  nameWithType: SocketGuild.GetCategoryChannel(UInt64)
  fullName: Discord.WebSocket.SocketGuild.GetCategoryChannel(System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetCategoryChannel
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 549
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a category channel in this guild.\n"
  example: []
  syntax:
    content: public SocketCategoryChannel GetCategoryChannel(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier for the category channel.
    return:
      type: Discord.WebSocket.SocketCategoryChannel
      description: "\nA category channel associated with the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Public Function GetCategoryChannel(id As ULong) As SocketCategoryChannel
  overload: Discord.WebSocket.SocketGuild.GetCategoryChannel*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.CreateTextChannelAsync(System.String,System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.CreateTextChannelAsync(System.String,System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
  id: CreateTextChannelAsync(System.String,System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: CreateTextChannelAsync(String, Action<TextChannelProperties>, RequestOptions)
  nameWithType: SocketGuild.CreateTextChannelAsync(String, Action<TextChannelProperties>, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.CreateTextChannelAsync(System.String, System.Action<Discord.TextChannelProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreateTextChannelAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 575
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nCreates a new text channel in this guild.\n"
  example:
  - "\nThe following example creates a new text channel under an existing category named <code>Wumpus</code> with a set topic.\n<pre><code class=\"lang-cs\">var categories = await guild.GetCategoriesAsync();\nvar targetCategory = categories.FirstOrDefault(x => x.Name == &quot;wumpus&quot;);\nif (targetCategory == null) return;\nawait Context.Guild.CreateTextChannelAsync(name, x =>\n{\n    x.CategoryId = targetCategory.Id;\n    x.Topic = $&quot;This channel was created at {DateTimeOffset.UtcNow} by {user}.&quot;;\n});</code></pre>\n"
  syntax:
    content: public Task<RestTextChannel> CreateTextChannelAsync(string name, Action<TextChannelProperties> func = null, RequestOptions options = null)
    parameters:
    - id: name
      type: System.String
      description: The new name for the text channel.
    - id: func
      type: System.Action{Discord.TextChannelProperties}
      description: The delegate containing the properties to be applied to the channel upon its creation.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestTextChannel}
      description: "\nA task that represents the asynchronous creation operation. The task result contains the newly created\ntext channel.\n"
    content.vb: Public Function CreateTextChannelAsync(name As String, func As Action(Of TextChannelProperties) = Nothing, options As RequestOptions = Nothing) As Task(Of RestTextChannel)
  overload: Discord.WebSocket.SocketGuild.CreateTextChannelAsync*
  nameWithType.vb: SocketGuild.CreateTextChannelAsync(String, Action(Of TextChannelProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketGuild.CreateTextChannelAsync(System.String, System.Action(Of Discord.TextChannelProperties), Discord.RequestOptions)
  name.vb: CreateTextChannelAsync(String, Action(Of TextChannelProperties), RequestOptions)
- uid: Discord.WebSocket.SocketGuild.CreateVoiceChannelAsync(System.String,System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.CreateVoiceChannelAsync(System.String,System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  id: CreateVoiceChannelAsync(System.String,System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: CreateVoiceChannelAsync(String, Action<VoiceChannelProperties>, RequestOptions)
  nameWithType: SocketGuild.CreateVoiceChannelAsync(String, Action<VoiceChannelProperties>, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.CreateVoiceChannelAsync(System.String, System.Action<Discord.VoiceChannelProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreateVoiceChannelAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 588
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nCreates a new voice channel in this guild.\n"
  example: []
  syntax:
    content: public Task<RestVoiceChannel> CreateVoiceChannelAsync(string name, Action<VoiceChannelProperties> func = null, RequestOptions options = null)
    parameters:
    - id: name
      type: System.String
      description: The new name for the voice channel.
    - id: func
      type: System.Action{Discord.VoiceChannelProperties}
      description: The delegate containing the properties to be applied to the channel upon its creation.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestVoiceChannel}
      description: "\nA task that represents the asynchronous creation operation. The task result contains the newly created\nvoice channel.\n"
    content.vb: Public Function CreateVoiceChannelAsync(name As String, func As Action(Of VoiceChannelProperties) = Nothing, options As RequestOptions = Nothing) As Task(Of RestVoiceChannel)
  overload: Discord.WebSocket.SocketGuild.CreateVoiceChannelAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref" class="paramref">name</code> is <code>null</code>.
  nameWithType.vb: SocketGuild.CreateVoiceChannelAsync(String, Action(Of VoiceChannelProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketGuild.CreateVoiceChannelAsync(System.String, System.Action(Of Discord.VoiceChannelProperties), Discord.RequestOptions)
  name.vb: CreateVoiceChannelAsync(String, Action(Of VoiceChannelProperties), RequestOptions)
- uid: Discord.WebSocket.SocketGuild.CreateCategoryChannelAsync(System.String,System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.CreateCategoryChannelAsync(System.String,System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  id: CreateCategoryChannelAsync(System.String,System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: CreateCategoryChannelAsync(String, Action<GuildChannelProperties>, RequestOptions)
  nameWithType: SocketGuild.CreateCategoryChannelAsync(String, Action<GuildChannelProperties>, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.CreateCategoryChannelAsync(System.String, System.Action<Discord.GuildChannelProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreateCategoryChannelAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 601
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nCreates a new channel category in this guild.\n"
  example: []
  syntax:
    content: public Task<RestCategoryChannel> CreateCategoryChannelAsync(string name, Action<GuildChannelProperties> func = null, RequestOptions options = null)
    parameters:
    - id: name
      type: System.String
      description: The new name for the category.
    - id: func
      type: System.Action{Discord.GuildChannelProperties}
      description: The delegate containing the properties to be applied to the channel upon its creation.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestCategoryChannel}
      description: "\nA task that represents the asynchronous creation operation. The task result contains the newly created\ncategory channel.\n"
    content.vb: Public Function CreateCategoryChannelAsync(name As String, func As Action(Of GuildChannelProperties) = Nothing, options As RequestOptions = Nothing) As Task(Of RestCategoryChannel)
  overload: Discord.WebSocket.SocketGuild.CreateCategoryChannelAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref" class="paramref">name</code> is <code>null</code>.
  nameWithType.vb: SocketGuild.CreateCategoryChannelAsync(String, Action(Of GuildChannelProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketGuild.CreateCategoryChannelAsync(System.String, System.Action(Of Discord.GuildChannelProperties), Discord.RequestOptions)
  name.vb: CreateCategoryChannelAsync(String, Action(Of GuildChannelProperties), RequestOptions)
- uid: Discord.WebSocket.SocketGuild.GetVoiceRegionsAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.GetVoiceRegionsAsync(Discord.RequestOptions)
  id: GetVoiceRegionsAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetVoiceRegionsAsync(RequestOptions)
  nameWithType: SocketGuild.GetVoiceRegionsAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.GetVoiceRegionsAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetVoiceRegionsAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 627
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all the voice regions this guild can access.\n"
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<RestVoiceRegion>> GetVoiceRegionsAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestVoiceRegion}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection of\nvoice regions the guild can access.\n"
    content.vb: Public Function GetVoiceRegionsAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestVoiceRegion))
  overload: Discord.WebSocket.SocketGuild.GetVoiceRegionsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.GetIntegrationsAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.GetIntegrationsAsync(Discord.RequestOptions)
  id: GetIntegrationsAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetIntegrationsAsync(RequestOptions)
  nameWithType: SocketGuild.GetIntegrationsAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.GetIntegrationsAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetIntegrationsAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 631
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  syntax:
    content: public Task<IReadOnlyCollection<RestGuildIntegration>> GetIntegrationsAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestGuildIntegration}}
    content.vb: Public Function GetIntegrationsAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestGuildIntegration))
  overload: Discord.WebSocket.SocketGuild.GetIntegrationsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.CreateIntegrationAsync(System.UInt64,System.String,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.CreateIntegrationAsync(System.UInt64,System.String,Discord.RequestOptions)
  id: CreateIntegrationAsync(System.UInt64,System.String,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: CreateIntegrationAsync(UInt64, String, RequestOptions)
  nameWithType: SocketGuild.CreateIntegrationAsync(UInt64, String, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.CreateIntegrationAsync(System.UInt64, System.String, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreateIntegrationAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 633
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  syntax:
    content: public Task<RestGuildIntegration> CreateIntegrationAsync(ulong id, string type, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
    - id: type
      type: System.String
    - id: options
      type: Discord.RequestOptions
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestGuildIntegration}
    content.vb: Public Function CreateIntegrationAsync(id As ULong, type As String, options As RequestOptions = Nothing) As Task(Of RestGuildIntegration)
  overload: Discord.WebSocket.SocketGuild.CreateIntegrationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.GetInvitesAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.GetInvitesAsync(Discord.RequestOptions)
  id: GetInvitesAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetInvitesAsync(RequestOptions)
  nameWithType: SocketGuild.GetInvitesAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.GetInvitesAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetInvitesAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 645
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all invites in this guild.\n"
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<RestInviteMetadata>> GetInvitesAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestInviteMetadata}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection of\ninvite metadata, each representing information for an invite found within this guild.\n"
    content.vb: Public Function GetInvitesAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestInviteMetadata))
  overload: Discord.WebSocket.SocketGuild.GetInvitesAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.GetVanityInviteAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.GetVanityInviteAsync(Discord.RequestOptions)
  id: GetVanityInviteAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetVanityInviteAsync(RequestOptions)
  nameWithType: SocketGuild.GetVanityInviteAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.GetVanityInviteAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetVanityInviteAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 655
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the vanity invite URL of this guild.\n"
  example: []
  syntax:
    content: public Task<RestInviteMetadata> GetVanityInviteAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestInviteMetadata}
      description: "\nA task that represents the asynchronous get operation. The task result contains the partial metadata of\nthe vanity invite found within this guild; <code>null</code> if none is found.\n"
    content.vb: Public Function GetVanityInviteAsync(options As RequestOptions = Nothing) As Task(Of RestInviteMetadata)
  overload: Discord.WebSocket.SocketGuild.GetVanityInviteAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.GetRole(System.UInt64)
  commentId: M:Discord.WebSocket.SocketGuild.GetRole(System.UInt64)
  id: GetRole(System.UInt64)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetRole(UInt64)
  nameWithType: SocketGuild.GetRole(UInt64)
  fullName: Discord.WebSocket.SocketGuild.GetRole(System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetRole
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 666
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a role in this guild.\n"
  example: []
  syntax:
    content: public SocketRole GetRole(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier for the role.
    return:
      type: Discord.WebSocket.SocketRole
      description: "\nA role that is associated with the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Public Function GetRole(id As ULong) As SocketRole
  overload: Discord.WebSocket.SocketGuild.GetRole*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)
  id: CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: CreateRoleAsync(String, Nullable<GuildPermissions>, Nullable<Color>, Boolean, RequestOptions)
  nameWithType: SocketGuild.CreateRoleAsync(String, Nullable<GuildPermissions>, Nullable<Color>, Boolean, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.CreateRoleAsync(System.String, System.Nullable<Discord.GuildPermissions>, System.Nullable<Discord.Color>, System.Boolean, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreateRoleAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 686
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nCreates a new role with the provided name.\n"
  example: []
  syntax:
    content: public Task<RestRole> CreateRoleAsync(string name, GuildPermissions? permissions = default(GuildPermissions? ), Color? color = default(Color? ), bool isHoisted = false, RequestOptions options = null)
    parameters:
    - id: name
      type: System.String
      description: The new name for the role.
    - id: permissions
      type: System.Nullable{Discord.GuildPermissions}
      description: The guild permission that the role should possess.
    - id: color
      type: System.Nullable{Discord.Color}
      description: The color of the role.
    - id: isHoisted
      type: System.Boolean
      description: Whether the role is separated from others on the sidebar.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestRole}
      description: "\nA task that represents the asynchronous creation operation. The task result contains the newly created\nrole.\n"
    content.vb: Public Function CreateRoleAsync(name As String, permissions As GuildPermissions? = Nothing, color As Color? = Nothing, isHoisted As Boolean = False, options As RequestOptions = Nothing) As Task(Of RestRole)
  overload: Discord.WebSocket.SocketGuild.CreateRoleAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref" class="paramref">name</code> is <code>null</code>.
  nameWithType.vb: SocketGuild.CreateRoleAsync(String, Nullable(Of GuildPermissions), Nullable(Of Color), Boolean, RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketGuild.CreateRoleAsync(System.String, System.Nullable(Of Discord.GuildPermissions), System.Nullable(Of Discord.Color), System.Boolean, Discord.RequestOptions)
  name.vb: CreateRoleAsync(String, Nullable(Of GuildPermissions), Nullable(Of Color), Boolean, RequestOptions)
- uid: Discord.WebSocket.SocketGuild.AddGuildUserAsync(System.UInt64,System.String,System.Action{Discord.AddGuildUserProperties},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.AddGuildUserAsync(System.UInt64,System.String,System.Action{Discord.AddGuildUserProperties},Discord.RequestOptions)
  id: AddGuildUserAsync(System.UInt64,System.String,System.Action{Discord.AddGuildUserProperties},Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: AddGuildUserAsync(UInt64, String, Action<AddGuildUserProperties>, RequestOptions)
  nameWithType: SocketGuild.AddGuildUserAsync(UInt64, String, Action<AddGuildUserProperties>, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.AddGuildUserAsync(System.UInt64, System.String, System.Action<Discord.AddGuildUserProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: AddGuildUserAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 704
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public Task<RestGuildUser> AddGuildUserAsync(ulong id, string accessToken, Action<AddGuildUserProperties> func = null, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
    - id: accessToken
      type: System.String
    - id: func
      type: System.Action{Discord.AddGuildUserProperties}
    - id: options
      type: Discord.RequestOptions
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestGuildUser}
    content.vb: Public Function AddGuildUserAsync(id As ULong, accessToken As String, func As Action(Of AddGuildUserProperties) = Nothing, options As RequestOptions = Nothing) As Task(Of RestGuildUser)
  overload: Discord.WebSocket.SocketGuild.AddGuildUserAsync*
  nameWithType.vb: SocketGuild.AddGuildUserAsync(UInt64, String, Action(Of AddGuildUserProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketGuild.AddGuildUserAsync(System.UInt64, System.String, System.Action(Of Discord.AddGuildUserProperties), Discord.RequestOptions)
  name.vb: AddGuildUserAsync(UInt64, String, Action(Of AddGuildUserProperties), RequestOptions)
- uid: Discord.WebSocket.SocketGuild.GetUser(System.UInt64)
  commentId: M:Discord.WebSocket.SocketGuild.GetUser(System.UInt64)
  id: GetUser(System.UInt64)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetUser(UInt64)
  nameWithType: SocketGuild.GetUser(UInt64)
  fullName: Discord.WebSocket.SocketGuild.GetUser(System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetUser
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 721
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a user from this guild.\n"
  remarks: "\nThis method retrieves a user found within this guild.\n<div class=\"NOTE\"><h5>note</h5><p>\n    This may return <code>null</code> in the WebSocket implementation due to incomplete user collection in\n    large guilds.\n</p></div>\n"
  example: []
  syntax:
    content: public SocketGuildUser GetUser(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the user.
    return:
      type: Discord.WebSocket.SocketGuildUser
      description: "\nA guild user associated with the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Public Function GetUser(id As ULong) As SocketGuildUser
  overload: Discord.WebSocket.SocketGuild.GetUser*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.PruneUsersAsync(System.Int32,System.Boolean,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.PruneUsersAsync(System.Int32,System.Boolean,Discord.RequestOptions)
  id: PruneUsersAsync(System.Int32,System.Boolean,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: PruneUsersAsync(Int32, Boolean, RequestOptions)
  nameWithType: SocketGuild.PruneUsersAsync(Int32, Boolean, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.PruneUsersAsync(System.Int32, System.Boolean, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: PruneUsersAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 728
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nPrunes inactive users.\n"
  remarks: "\n<p>\n    This method removes all users that have not logged on in the provided number of <code data-dev-comment-type=\"paramref\" class=\"paramref\">days</code>.\n</p>\n<p>\n    If <code data-dev-comment-type=\"paramref\" class=\"paramref\">simulate</code> is <code>true</code>, this method will only return the number of users that\n    would be removed without kicking the users.\n</p>\n"
  example: []
  syntax:
    content: public Task<int> PruneUsersAsync(int days = 30, bool simulate = false, RequestOptions options = null)
    parameters:
    - id: days
      type: System.Int32
      description: The number of days required for the users to be kicked.
    - id: simulate
      type: System.Boolean
      description: Whether this prune action is a simulation.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\nA task that represents the asynchronous prune operation. The task result contains the number of users to\nbe or has been removed from this guild.\n"
    content.vb: Public Function PruneUsersAsync(days As Integer = 30, simulate As Boolean = False, options As RequestOptions = Nothing) As Task(Of Integer)
  overload: Discord.WebSocket.SocketGuild.PruneUsersAsync*
  implements:
  - Discord.IGuild.PruneUsersAsync(System.Int32,System.Boolean,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.DownloadUsersAsync
  commentId: M:Discord.WebSocket.SocketGuild.DownloadUsersAsync
  id: DownloadUsersAsync
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: DownloadUsersAsync()
  nameWithType: SocketGuild.DownloadUsersAsync()
  fullName: Discord.WebSocket.SocketGuild.DownloadUsersAsync()
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DownloadUsersAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 788
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nDownloads all users for this guild if the current list is incomplete.\n"
  example: []
  syntax:
    content: public Task DownloadUsersAsync()
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous download operation.\n"
    content.vb: Public Function DownloadUsersAsync As Task
  overload: Discord.WebSocket.SocketGuild.DownloadUsersAsync*
  implements:
  - Discord.IGuild.DownloadUsersAsync
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.GetAuditLogsAsync(System.Int32,Discord.RequestOptions,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{Discord.ActionType})
  commentId: M:Discord.WebSocket.SocketGuild.GetAuditLogsAsync(System.Int32,Discord.RequestOptions,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{Discord.ActionType})
  id: GetAuditLogsAsync(System.Int32,Discord.RequestOptions,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{Discord.ActionType})
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetAuditLogsAsync(Int32, RequestOptions, Nullable<UInt64>, Nullable<UInt64>, Nullable<ActionType>)
  nameWithType: SocketGuild.GetAuditLogsAsync(Int32, RequestOptions, Nullable<UInt64>, Nullable<UInt64>, Nullable<ActionType>)
  fullName: Discord.WebSocket.SocketGuild.GetAuditLogsAsync(System.Int32, Discord.RequestOptions, System.Nullable<System.UInt64>, System.Nullable<System.UInt64>, System.Nullable<Discord.ActionType>)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetAuditLogsAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 810
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the specified number of audit log entries for this guild.\n"
  example: []
  syntax:
    content: public IAsyncEnumerable<IReadOnlyCollection<RestAuditLogEntry>> GetAuditLogsAsync(int limit, RequestOptions options = null, ulong? beforeId = default(ulong? ), ulong? userId = default(ulong? ), ActionType? actionType = default(ActionType? ))
    parameters:
    - id: limit
      type: System.Int32
      description: The number of audit log entries to fetch.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    - id: beforeId
      type: System.Nullable{System.UInt64}
      description: The audit log entry ID to filter entries before.
    - id: userId
      type: System.Nullable{System.UInt64}
      description: The user ID to filter entries for.
    - id: actionType
      type: System.Nullable{Discord.ActionType}
      description: The type of actions to filter.
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestAuditLogEntry}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection\nof the requested audit log entries.\n"
    content.vb: Public Function GetAuditLogsAsync(limit As Integer, options As RequestOptions = Nothing, beforeId As ULong? = Nothing, userId As ULong? = Nothing, actionType As ActionType? = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of RestAuditLogEntry))
  overload: Discord.WebSocket.SocketGuild.GetAuditLogsAsync*
  nameWithType.vb: SocketGuild.GetAuditLogsAsync(Int32, RequestOptions, Nullable(Of UInt64), Nullable(Of UInt64), Nullable(Of ActionType))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketGuild.GetAuditLogsAsync(System.Int32, Discord.RequestOptions, System.Nullable(Of System.UInt64), System.Nullable(Of System.UInt64), System.Nullable(Of Discord.ActionType))
  name.vb: GetAuditLogsAsync(Int32, RequestOptions, Nullable(Of UInt64), Nullable(Of UInt64), Nullable(Of ActionType))
- uid: Discord.WebSocket.SocketGuild.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  id: GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetWebhookAsync(UInt64, RequestOptions)
  nameWithType: SocketGuild.GetWebhookAsync(UInt64, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.GetWebhookAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetWebhookAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 823
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a webhook found within this guild.\n"
  example: []
  syntax:
    content: public Task<RestWebhook> GetWebhookAsync(ulong id, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
      description: The identifier for the webhook.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.Rest.RestWebhook}
      description: "\nA task that represents the asynchronous get operation. The task result contains the webhook with the\nspecified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Public Function GetWebhookAsync(id As ULong, options As RequestOptions = Nothing) As Task(Of RestWebhook)
  overload: Discord.WebSocket.SocketGuild.GetWebhookAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.GetWebhooksAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.GetWebhooksAsync(Discord.RequestOptions)
  id: GetWebhooksAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetWebhooksAsync(RequestOptions)
  nameWithType: SocketGuild.GetWebhooksAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.GetWebhooksAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetWebhooksAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 833
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all webhook from this guild.\n"
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<RestWebhook>> GetWebhooksAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestWebhook}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection\nof webhooks found within the guild.\n"
    content.vb: Public Function GetWebhooksAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestWebhook))
  overload: Discord.WebSocket.SocketGuild.GetWebhooksAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.GetEmoteAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.GetEmoteAsync(System.UInt64,Discord.RequestOptions)
  id: GetEmoteAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetEmoteAsync(UInt64, RequestOptions)
  nameWithType: SocketGuild.GetEmoteAsync(UInt64, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.GetEmoteAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetEmoteAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 838
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a specific emote from this guild.\n"
  example: []
  syntax:
    content: public Task<GuildEmote> GetEmoteAsync(ulong id, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier for the guild emote.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.GuildEmote}
      description: "\nA task that represents the asynchronous get operation. The task result contains the emote found with the\nspecified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Public Function GetEmoteAsync(id As ULong, options As RequestOptions = Nothing) As Task(Of GuildEmote)
  overload: Discord.WebSocket.SocketGuild.GetEmoteAsync*
  implements:
  - Discord.IGuild.GetEmoteAsync(System.UInt64,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.CreateEmoteAsync(System.String,Discord.Image,Discord.Optional{System.Collections.Generic.IEnumerable{Discord.IRole}},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.CreateEmoteAsync(System.String,Discord.Image,Discord.Optional{System.Collections.Generic.IEnumerable{Discord.IRole}},Discord.RequestOptions)
  id: CreateEmoteAsync(System.String,Discord.Image,Discord.Optional{System.Collections.Generic.IEnumerable{Discord.IRole}},Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: CreateEmoteAsync(String, Image, Optional<IEnumerable<IRole>>, RequestOptions)
  nameWithType: SocketGuild.CreateEmoteAsync(String, Image, Optional<IEnumerable<IRole>>, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.CreateEmoteAsync(System.String, Discord.Image, Discord.Optional<System.Collections.Generic.IEnumerable<Discord.IRole>>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreateEmoteAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 841
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nCreates a new <xref href=\"Discord.GuildEmote\" data-throw-if-not-resolved=\"false\"></xref> in this guild.\n"
  example: []
  syntax:
    content: public Task<GuildEmote> CreateEmoteAsync(string name, Image image, Optional<IEnumerable<IRole>> roles = default(Optional<IEnumerable<IRole>>), RequestOptions options = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the guild emote.
    - id: image
      type: Discord.Image
      description: The image of the new emote.
    - id: roles
      type: Discord.Optional{System.Collections.Generic.IEnumerable{Discord.IRole}}
      description: The roles to limit the emote usage to.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.GuildEmote}
      description: "\nA task that represents the asynchronous creation operation. The task result contains the created emote.\n"
    content.vb: Public Function CreateEmoteAsync(name As String, image As Image, roles As  Optional  (Of IEnumerable(Of IRole))  = Nothing, options As RequestOptions = Nothing) As Task(Of GuildEmote)
  overload: Discord.WebSocket.SocketGuild.CreateEmoteAsync*
  implements:
  - Discord.IGuild.CreateEmoteAsync(System.String,Discord.Image,Discord.Optional{System.Collections.Generic.IEnumerable{Discord.IRole}},Discord.RequestOptions)
  nameWithType.vb: SocketGuild.CreateEmoteAsync(String, Image, Optional(Of IEnumerable(Of IRole)), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketGuild.CreateEmoteAsync(System.String, Discord.Image, Discord.Optional(Of System.Collections.Generic.IEnumerable(Of Discord.IRole)), Discord.RequestOptions)
  name.vb: CreateEmoteAsync(String, Image, Optional(Of IEnumerable(Of IRole)), RequestOptions)
- uid: Discord.WebSocket.SocketGuild.ModifyEmoteAsync(Discord.GuildEmote,System.Action{Discord.EmoteProperties},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.ModifyEmoteAsync(Discord.GuildEmote,System.Action{Discord.EmoteProperties},Discord.RequestOptions)
  id: ModifyEmoteAsync(Discord.GuildEmote,System.Action{Discord.EmoteProperties},Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: ModifyEmoteAsync(GuildEmote, Action<EmoteProperties>, RequestOptions)
  nameWithType: SocketGuild.ModifyEmoteAsync(GuildEmote, Action<EmoteProperties>, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.ModifyEmoteAsync(Discord.GuildEmote, System.Action<Discord.EmoteProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ModifyEmoteAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 845
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nModifies an existing <xref href=\"Discord.GuildEmote\" data-throw-if-not-resolved=\"false\"></xref> in this guild.\n"
  example: []
  syntax:
    content: public Task<GuildEmote> ModifyEmoteAsync(GuildEmote emote, Action<EmoteProperties> func, RequestOptions options = null)
    parameters:
    - id: emote
      type: Discord.GuildEmote
      description: The emote to be modified.
    - id: func
      type: System.Action{Discord.EmoteProperties}
      description: The delegate containing the properties to modify the emote with.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.GuildEmote}
      description: "\nA task that represents the asynchronous modification operation. The task result contains the modified\nemote.\n"
    content.vb: Public Function ModifyEmoteAsync(emote As GuildEmote, func As Action(Of EmoteProperties), options As RequestOptions = Nothing) As Task(Of GuildEmote)
  overload: Discord.WebSocket.SocketGuild.ModifyEmoteAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code data-dev-comment-type="paramref" class="paramref">func</code> is <code>null</code>.
  implements:
  - Discord.IGuild.ModifyEmoteAsync(Discord.GuildEmote,System.Action{Discord.EmoteProperties},Discord.RequestOptions)
  nameWithType.vb: SocketGuild.ModifyEmoteAsync(GuildEmote, Action(Of EmoteProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketGuild.ModifyEmoteAsync(Discord.GuildEmote, System.Action(Of Discord.EmoteProperties), Discord.RequestOptions)
  name.vb: ModifyEmoteAsync(GuildEmote, Action(Of EmoteProperties), RequestOptions)
- uid: Discord.WebSocket.SocketGuild.DeleteEmoteAsync(Discord.GuildEmote,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.DeleteEmoteAsync(Discord.GuildEmote,Discord.RequestOptions)
  id: DeleteEmoteAsync(Discord.GuildEmote,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: DeleteEmoteAsync(GuildEmote, RequestOptions)
  nameWithType: SocketGuild.DeleteEmoteAsync(GuildEmote, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.DeleteEmoteAsync(Discord.GuildEmote, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteEmoteAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 848
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nDeletes an existing <xref href=\"Discord.GuildEmote\" data-throw-if-not-resolved=\"false\"></xref> from this guild.\n"
  example: []
  syntax:
    content: public Task DeleteEmoteAsync(GuildEmote emote, RequestOptions options = null)
    parameters:
    - id: emote
      type: Discord.GuildEmote
      description: The emote to delete.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous removal operation.\n"
    content.vb: Public Function DeleteEmoteAsync(emote As GuildEmote, options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketGuild.DeleteEmoteAsync*
  implements:
  - Discord.IGuild.DeleteEmoteAsync(Discord.GuildEmote,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.ToString
  commentId: M:Discord.WebSocket.SocketGuild.ToString
  id: ToString
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SocketGuild.ToString()
  fullName: Discord.WebSocket.SocketGuild.ToString()
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ToString
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1047
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the name of the guild.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nA string that resolves to <xref href=\"Discord.WebSocket.SocketGuild.Name\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Discord.WebSocket.SocketGuild.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#AFKChannelId
  commentId: P:Discord.WebSocket.SocketGuild.Discord#IGuild#AFKChannelId
  id: Discord#IGuild#AFKChannelId
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.AFKChannelId
  nameWithType: SocketGuild.IGuild.AFKChannelId
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.AFKChannelId
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.AFKChannelId
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1053
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the ID of the AFK voice channel for this guild.\n"
  example: []
  syntax:
    content: ulong? IGuild.AFKChannelId { get; }
    parameters: []
    return:
      type: System.Nullable{System.UInt64}
      description: "\nA <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> representing the snowflake identifier of the AFK voice channel; <code>null</code> if\nnone is set.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IGuild.AFKChannelId As ULong? Implements IGuild.AFKChannelId
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#AFKChannelId*
  implements:
  - Discord.IGuild.AFKChannelId
  nameWithType.vb: SocketGuild.Discord.IGuild.AFKChannelId
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IGuild.AFKChannelId
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#AudioClient
  commentId: P:Discord.WebSocket.SocketGuild.Discord#IGuild#AudioClient
  id: Discord#IGuild#AudioClient
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.AudioClient
  nameWithType: SocketGuild.IGuild.AudioClient
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.AudioClient
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.AudioClient
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1055
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the <xref href=\"Discord.Audio.IAudioClient\" data-throw-if-not-resolved=\"false\"></xref> currently associated with this guild.\n"
  example: []
  syntax:
    content: IAudioClient IGuild.AudioClient { get; }
    parameters: []
    return:
      type: Discord.Audio.IAudioClient
      description: "\nAn <xref href=\"Discord.Audio.IAudioClient\" data-throw-if-not-resolved=\"false\"></xref> currently associated with this guild.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IGuild.AudioClient As IAudioClient Implements IGuild.AudioClient
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#AudioClient*
  implements:
  - Discord.IGuild.AudioClient
  nameWithType.vb: SocketGuild.Discord.IGuild.AudioClient
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IGuild.AudioClient
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#Available
  commentId: P:Discord.WebSocket.SocketGuild.Discord#IGuild#Available
  id: Discord#IGuild#Available
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.Available
  nameWithType: SocketGuild.IGuild.Available
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.Available
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.Available
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1057
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nDetermines if this guild is currently connected and ready to be used.\n"
  remarks: "\n<div class=\"NOTE\"><h5>note</h5><p>\n    This property only applies to a WebSocket-based client.\n</p></div>\nThis boolean is used to determine if the guild is currently connected to the WebSocket and is ready to be used/accessed.\n"
  example: []
  syntax:
    content: bool IGuild.Available { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this guild is currently connected and ready to be used; otherwise <code>false</code>.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IGuild.Available As Boolean Implements IGuild.Available
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#Available*
  implements:
  - Discord.IGuild.Available
  nameWithType.vb: SocketGuild.Discord.IGuild.Available
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IGuild.Available
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#DefaultChannelId
  commentId: P:Discord.WebSocket.SocketGuild.Discord#IGuild#DefaultChannelId
  id: Discord#IGuild#DefaultChannelId
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.DefaultChannelId
  nameWithType: SocketGuild.IGuild.DefaultChannelId
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.DefaultChannelId
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.DefaultChannelId
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1059
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the ID of the default channel for this guild.\n"
  remarks: "\nThis property retrieves the snowflake identifier of the first viewable text channel for this guild.\n<div class=\"WARNING\"><h5>warning</h5><p>\n    This channel does not guarantee the user can send message to it, as it only looks for the first viewable\n    text channel.\n</p></div>\n"
  example: []
  syntax:
    content: ulong IGuild.DefaultChannelId { get; }
    parameters: []
    return:
      type: System.UInt64
      description: "\nA <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> representing the snowflake identifier of the default text channel; <code>0</code> if\nnone can be found.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IGuild.DefaultChannelId As ULong Implements IGuild.DefaultChannelId
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#DefaultChannelId*
  implements:
  - Discord.IGuild.DefaultChannelId
  nameWithType.vb: SocketGuild.Discord.IGuild.DefaultChannelId
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IGuild.DefaultChannelId
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#EmbedChannelId
  commentId: P:Discord.WebSocket.SocketGuild.Discord#IGuild#EmbedChannelId
  id: Discord#IGuild#EmbedChannelId
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.EmbedChannelId
  nameWithType: SocketGuild.IGuild.EmbedChannelId
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.EmbedChannelId
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.EmbedChannelId
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1061
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the ID of the widget embed channel of this guild.\n"
  example: []
  syntax:
    content: ulong? IGuild.EmbedChannelId { get; }
    parameters: []
    return:
      type: System.Nullable{System.UInt64}
      description: "\nA <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> representing the snowflake identifier of the embedded channel found within the\nwidget settings of this guild; <code>null</code> if none is set.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IGuild.EmbedChannelId As ULong? Implements IGuild.EmbedChannelId
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#EmbedChannelId*
  implements:
  - Discord.IGuild.EmbedChannelId
  nameWithType.vb: SocketGuild.Discord.IGuild.EmbedChannelId
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IGuild.EmbedChannelId
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#SystemChannelId
  commentId: P:Discord.WebSocket.SocketGuild.Discord#IGuild#SystemChannelId
  id: Discord#IGuild#SystemChannelId
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.SystemChannelId
  nameWithType: SocketGuild.IGuild.SystemChannelId
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.SystemChannelId
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.SystemChannelId
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1063
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the ID of the channel where randomized welcome messages are sent.\n"
  example: []
  syntax:
    content: ulong? IGuild.SystemChannelId { get; }
    parameters: []
    return:
      type: System.Nullable{System.UInt64}
      description: "\nA <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> representing the snowflake identifier of the system channel where randomized\nwelcome messages are sent; <code>null</code> if none is set.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IGuild.SystemChannelId As ULong? Implements IGuild.SystemChannelId
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#SystemChannelId*
  implements:
  - Discord.IGuild.SystemChannelId
  nameWithType.vb: SocketGuild.Discord.IGuild.SystemChannelId
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IGuild.SystemChannelId
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#EveryoneRole
  commentId: P:Discord.WebSocket.SocketGuild.Discord#IGuild#EveryoneRole
  id: Discord#IGuild#EveryoneRole
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.EveryoneRole
  nameWithType: SocketGuild.IGuild.EveryoneRole
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.EveryoneRole
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.EveryoneRole
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1065
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the built-in role containing all users in this guild.\n"
  example: []
  syntax:
    content: IRole IGuild.EveryoneRole { get; }
    parameters: []
    return:
      type: Discord.IRole
      description: "\nA role object that represents an <code>@everyone</code> role in this guild.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IGuild.EveryoneRole As IRole Implements IGuild.EveryoneRole
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#EveryoneRole*
  implements:
  - Discord.IGuild.EveryoneRole
  nameWithType.vb: SocketGuild.Discord.IGuild.EveryoneRole
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IGuild.EveryoneRole
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#Roles
  commentId: P:Discord.WebSocket.SocketGuild.Discord#IGuild#Roles
  id: Discord#IGuild#Roles
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.Roles
  nameWithType: SocketGuild.IGuild.Roles
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.Roles
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.Roles
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1067
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all roles in this guild.\n"
  example: []
  syntax:
    content: IReadOnlyCollection<IRole> IGuild.Roles { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.IRole}
      description: "\nA read-only collection of roles found within this guild.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IGuild.Roles As IReadOnlyCollection(Of IRole) Implements IGuild.Roles
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#Roles*
  implements:
  - Discord.IGuild.Roles
  nameWithType.vb: SocketGuild.Discord.IGuild.Roles
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IGuild.Roles
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetBansAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetBansAsync(Discord.RequestOptions)
  id: Discord#IGuild#GetBansAsync(Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.GetBansAsync(RequestOptions)
  nameWithType: SocketGuild.IGuild.GetBansAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetBansAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.GetBansAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1070
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all users banned in this guild.\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<IBan>> IGuild.GetBansAsync(RequestOptions options)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IBan}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection of\nban objects that this guild currently possesses, with each object containing the user banned and reason\nbehind the ban.\n"
    content.vb: Function Discord.IGuild.GetBansAsync(options As RequestOptions) As Task(Of IReadOnlyCollection(Of IBan)) Implements IGuild.GetBansAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#GetBansAsync*
  implements:
  - Discord.IGuild.GetBansAsync(Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.GetBansAsync(RequestOptions)
  name.vb: Discord.IGuild.GetBansAsync(RequestOptions)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetBanAsync(Discord.IUser,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetBanAsync(Discord.IUser,Discord.RequestOptions)
  id: Discord#IGuild#GetBanAsync(Discord.IUser,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.GetBanAsync(IUser, RequestOptions)
  nameWithType: SocketGuild.IGuild.GetBanAsync(IUser, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetBanAsync(Discord.IUser, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.GetBanAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1073
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a ban object for a banned user.\n"
  example: []
  syntax:
    content: Task<IBan> IGuild.GetBanAsync(IUser user, RequestOptions options)
    parameters:
    - id: user
      type: Discord.IUser
      description: The banned user.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IBan}
      description: "\nA task that represents the asynchronous get operation. The task result contains a ban object, which\ncontains the user information and the reason for the ban; <code>null</code> if the ban entry cannot be found.\n"
    content.vb: Function Discord.IGuild.GetBanAsync(user As IUser, options As RequestOptions) As Task(Of IBan) Implements IGuild.GetBanAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#GetBanAsync*
  implements:
  - Discord.IGuild.GetBanAsync(Discord.IUser,Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.GetBanAsync(IUser, RequestOptions)
  name.vb: Discord.IGuild.GetBanAsync(IUser, RequestOptions)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetBanAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetBanAsync(System.UInt64,Discord.RequestOptions)
  id: Discord#IGuild#GetBanAsync(System.UInt64,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.GetBanAsync(UInt64, RequestOptions)
  nameWithType: SocketGuild.IGuild.GetBanAsync(UInt64, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetBanAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.GetBanAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1076
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a ban object for a banned user.\n"
  example: []
  syntax:
    content: Task<IBan> IGuild.GetBanAsync(ulong userId, RequestOptions options)
    parameters:
    - id: userId
      type: System.UInt64
      description: The snowflake identifier for the banned user.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IBan}
      description: "\nA task that represents the asynchronous get operation. The task result contains a ban object, which\ncontains the user information and the reason for the ban; <code>null</code> if the ban entry cannot be found.\n"
    content.vb: Function Discord.IGuild.GetBanAsync(userId As ULong, options As RequestOptions) As Task(Of IBan) Implements IGuild.GetBanAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#GetBanAsync*
  implements:
  - Discord.IGuild.GetBanAsync(System.UInt64,Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.GetBanAsync(UInt64, RequestOptions)
  name.vb: Discord.IGuild.GetBanAsync(UInt64, RequestOptions)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IGuild#GetChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.GetChannelsAsync(CacheMode, RequestOptions)
  nameWithType: SocketGuild.IGuild.GetChannelsAsync(CacheMode, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetChannelsAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.GetChannelsAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1080
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all channels in this guild.\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<IGuildChannel>> IGuild.GetChannelsAsync(CacheMode mode, RequestOptions options)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IGuildChannel}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection of\ngeneric channels found within this guild.\n"
    content.vb: Function Discord.IGuild.GetChannelsAsync(mode As CacheMode, options As RequestOptions) As Task(Of IReadOnlyCollection(Of IGuildChannel)) Implements IGuild.GetChannelsAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#GetChannelsAsync*
  implements:
  - Discord.IGuild.GetChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.GetChannelsAsync(CacheMode, RequestOptions)
  name.vb: Discord.IGuild.GetChannelsAsync(CacheMode, RequestOptions)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IGuild#GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.GetChannelAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: SocketGuild.IGuild.GetChannelAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetChannelAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.GetChannelAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1083
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a channel in this guild.\n"
  example: []
  syntax:
    content: Task<IGuildChannel> IGuild.GetChannelAsync(ulong id, CacheMode mode, RequestOptions options)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier for the channel.
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IGuildChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains the generic channel\nassociated with the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Function Discord.IGuild.GetChannelAsync(id As ULong, mode As CacheMode, options As RequestOptions) As Task(Of IGuildChannel) Implements IGuild.GetChannelAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#GetChannelAsync*
  implements:
  - Discord.IGuild.GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.GetChannelAsync(UInt64, CacheMode, RequestOptions)
  name.vb: Discord.IGuild.GetChannelAsync(UInt64, CacheMode, RequestOptions)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetTextChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetTextChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IGuild#GetTextChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.GetTextChannelsAsync(CacheMode, RequestOptions)
  nameWithType: SocketGuild.IGuild.GetTextChannelsAsync(CacheMode, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetTextChannelsAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.GetTextChannelsAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1086
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all text channels in this guild.\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<ITextChannel>> IGuild.GetTextChannelsAsync(CacheMode mode, RequestOptions options)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.ITextChannel}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection of\nmessage channels found within this guild.\n"
    content.vb: Function Discord.IGuild.GetTextChannelsAsync(mode As CacheMode, options As RequestOptions) As Task(Of IReadOnlyCollection(Of ITextChannel)) Implements IGuild.GetTextChannelsAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#GetTextChannelsAsync*
  implements:
  - Discord.IGuild.GetTextChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.GetTextChannelsAsync(CacheMode, RequestOptions)
  name.vb: Discord.IGuild.GetTextChannelsAsync(CacheMode, RequestOptions)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetTextChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetTextChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IGuild#GetTextChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.GetTextChannelAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: SocketGuild.IGuild.GetTextChannelAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetTextChannelAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.GetTextChannelAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1089
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a text channel in this guild.\n"
  example: []
  syntax:
    content: Task<ITextChannel> IGuild.GetTextChannelAsync(ulong id, CacheMode mode, RequestOptions options)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier for the text channel.
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.ITextChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains the text channel\nassociated with the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Function Discord.IGuild.GetTextChannelAsync(id As ULong, mode As CacheMode, options As RequestOptions) As Task(Of ITextChannel) Implements IGuild.GetTextChannelAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#GetTextChannelAsync*
  implements:
  - Discord.IGuild.GetTextChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.GetTextChannelAsync(UInt64, CacheMode, RequestOptions)
  name.vb: Discord.IGuild.GetTextChannelAsync(UInt64, CacheMode, RequestOptions)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetVoiceChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetVoiceChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IGuild#GetVoiceChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.GetVoiceChannelsAsync(CacheMode, RequestOptions)
  nameWithType: SocketGuild.IGuild.GetVoiceChannelsAsync(CacheMode, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetVoiceChannelsAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.GetVoiceChannelsAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1092
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all voice channels in this guild.\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<IVoiceChannel>> IGuild.GetVoiceChannelsAsync(CacheMode mode, RequestOptions options)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IVoiceChannel}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection of\nvoice channels found within this guild.\n"
    content.vb: Function Discord.IGuild.GetVoiceChannelsAsync(mode As CacheMode, options As RequestOptions) As Task(Of IReadOnlyCollection(Of IVoiceChannel)) Implements IGuild.GetVoiceChannelsAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#GetVoiceChannelsAsync*
  implements:
  - Discord.IGuild.GetVoiceChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.GetVoiceChannelsAsync(CacheMode, RequestOptions)
  name.vb: Discord.IGuild.GetVoiceChannelsAsync(CacheMode, RequestOptions)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetCategoriesAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetCategoriesAsync(Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IGuild#GetCategoriesAsync(Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.GetCategoriesAsync(CacheMode, RequestOptions)
  nameWithType: SocketGuild.IGuild.GetCategoriesAsync(CacheMode, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetCategoriesAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.GetCategoriesAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1095
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all category channels in this guild.\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<ICategoryChannel>> IGuild.GetCategoriesAsync(CacheMode mode, RequestOptions options)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.ICategoryChannel}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection of\ncategory channels found within this guild.\n"
    content.vb: Function Discord.IGuild.GetCategoriesAsync(mode As CacheMode, options As RequestOptions) As Task(Of IReadOnlyCollection(Of ICategoryChannel)) Implements IGuild.GetCategoriesAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#GetCategoriesAsync*
  implements:
  - Discord.IGuild.GetCategoriesAsync(Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.GetCategoriesAsync(CacheMode, RequestOptions)
  name.vb: Discord.IGuild.GetCategoriesAsync(CacheMode, RequestOptions)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetVoiceChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetVoiceChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IGuild#GetVoiceChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.GetVoiceChannelAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: SocketGuild.IGuild.GetVoiceChannelAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetVoiceChannelAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.GetVoiceChannelAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1098
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a voice channel in this guild.\n"
  example: []
  syntax:
    content: Task<IVoiceChannel> IGuild.GetVoiceChannelAsync(ulong id, CacheMode mode, RequestOptions options)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier for the voice channel.
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IVoiceChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains the voice channel associated\nwith the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Function Discord.IGuild.GetVoiceChannelAsync(id As ULong, mode As CacheMode, options As RequestOptions) As Task(Of IVoiceChannel) Implements IGuild.GetVoiceChannelAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#GetVoiceChannelAsync*
  implements:
  - Discord.IGuild.GetVoiceChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.GetVoiceChannelAsync(UInt64, CacheMode, RequestOptions)
  name.vb: Discord.IGuild.GetVoiceChannelAsync(UInt64, CacheMode, RequestOptions)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetAFKChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetAFKChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IGuild#GetAFKChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.GetAFKChannelAsync(CacheMode, RequestOptions)
  nameWithType: SocketGuild.IGuild.GetAFKChannelAsync(CacheMode, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetAFKChannelAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.GetAFKChannelAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1101
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the AFK voice channel in this guild.\n"
  example: []
  syntax:
    content: Task<IVoiceChannel> IGuild.GetAFKChannelAsync(CacheMode mode, RequestOptions options)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IVoiceChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains the voice channel that the\nAFK users will be moved to after they have idled for too long; <code>null</code> if none is set.\n"
    content.vb: Function Discord.IGuild.GetAFKChannelAsync(mode As CacheMode, options As RequestOptions) As Task(Of IVoiceChannel) Implements IGuild.GetAFKChannelAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#GetAFKChannelAsync*
  implements:
  - Discord.IGuild.GetAFKChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.GetAFKChannelAsync(CacheMode, RequestOptions)
  name.vb: Discord.IGuild.GetAFKChannelAsync(CacheMode, RequestOptions)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetDefaultChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetDefaultChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IGuild#GetDefaultChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.GetDefaultChannelAsync(CacheMode, RequestOptions)
  nameWithType: SocketGuild.IGuild.GetDefaultChannelAsync(CacheMode, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetDefaultChannelAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.GetDefaultChannelAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1104
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the first viewable text channel in this guild.\n"
  example: []
  syntax:
    content: Task<ITextChannel> IGuild.GetDefaultChannelAsync(CacheMode mode, RequestOptions options)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.ITextChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains the first viewable text\nchannel in this guild; <code>null</code> if none is found.\n"
    content.vb: Function Discord.IGuild.GetDefaultChannelAsync(mode As CacheMode, options As RequestOptions) As Task(Of ITextChannel) Implements IGuild.GetDefaultChannelAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#GetDefaultChannelAsync*
  implements:
  - Discord.IGuild.GetDefaultChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.GetDefaultChannelAsync(CacheMode, RequestOptions)
  name.vb: Discord.IGuild.GetDefaultChannelAsync(CacheMode, RequestOptions)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetEmbedChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetEmbedChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IGuild#GetEmbedChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.GetEmbedChannelAsync(CacheMode, RequestOptions)
  nameWithType: SocketGuild.IGuild.GetEmbedChannelAsync(CacheMode, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetEmbedChannelAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.GetEmbedChannelAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1107
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the embed channel (i.e. the channel set in the guild&apos;s widget settings) in this guild.\n"
  example: []
  syntax:
    content: Task<IGuildChannel> IGuild.GetEmbedChannelAsync(CacheMode mode, RequestOptions options)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IGuildChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains the embed channel set\nwithin the server&apos;s widget settings; <code>null</code> if none is set.\n"
    content.vb: Function Discord.IGuild.GetEmbedChannelAsync(mode As CacheMode, options As RequestOptions) As Task(Of IGuildChannel) Implements IGuild.GetEmbedChannelAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#GetEmbedChannelAsync*
  implements:
  - Discord.IGuild.GetEmbedChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.GetEmbedChannelAsync(CacheMode, RequestOptions)
  name.vb: Discord.IGuild.GetEmbedChannelAsync(CacheMode, RequestOptions)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetSystemChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetSystemChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IGuild#GetSystemChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.GetSystemChannelAsync(CacheMode, RequestOptions)
  nameWithType: SocketGuild.IGuild.GetSystemChannelAsync(CacheMode, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetSystemChannelAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.GetSystemChannelAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1110
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the system channel where randomized welcome messages are sent in this guild.\n"
  example: []
  syntax:
    content: Task<ITextChannel> IGuild.GetSystemChannelAsync(CacheMode mode, RequestOptions options)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.ITextChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains the text channel where\nrandomized welcome messages will be sent to; <code>null</code> if none is set.\n"
    content.vb: Function Discord.IGuild.GetSystemChannelAsync(mode As CacheMode, options As RequestOptions) As Task(Of ITextChannel) Implements IGuild.GetSystemChannelAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#GetSystemChannelAsync*
  implements:
  - Discord.IGuild.GetSystemChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.GetSystemChannelAsync(CacheMode, RequestOptions)
  name.vb: Discord.IGuild.GetSystemChannelAsync(CacheMode, RequestOptions)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#CreateTextChannelAsync(System.String,System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#CreateTextChannelAsync(System.String,System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
  id: Discord#IGuild#CreateTextChannelAsync(System.String,System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.CreateTextChannelAsync(String, Action<TextChannelProperties>, RequestOptions)
  nameWithType: SocketGuild.IGuild.CreateTextChannelAsync(String, Action<TextChannelProperties>, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.CreateTextChannelAsync(System.String, System.Action<Discord.TextChannelProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.CreateTextChannelAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1113
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nCreates a new text channel in this guild.\n"
  example: []
  syntax:
    content: Task<ITextChannel> IGuild.CreateTextChannelAsync(string name, Action<TextChannelProperties> func, RequestOptions options)
    parameters:
    - id: name
      type: System.String
      description: The new name for the text channel.
    - id: func
      type: System.Action{Discord.TextChannelProperties}
      description: The delegate containing the properties to be applied to the channel upon its creation.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.ITextChannel}
      description: "\nA task that represents the asynchronous creation operation. The task result contains the newly created\ntext channel.\n"
    content.vb: Function Discord.IGuild.CreateTextChannelAsync(name As String, func As Action(Of TextChannelProperties), options As RequestOptions) As Task(Of ITextChannel) Implements IGuild.CreateTextChannelAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#CreateTextChannelAsync*
  implements:
  - Discord.IGuild.CreateTextChannelAsync(System.String,System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.CreateTextChannelAsync(String, Action(Of TextChannelProperties), RequestOptions)
  fullName.vb: Discord.WebSocket.SocketGuild.Discord.IGuild.CreateTextChannelAsync(System.String, System.Action(Of Discord.TextChannelProperties), Discord.RequestOptions)
  name.vb: Discord.IGuild.CreateTextChannelAsync(String, Action(Of TextChannelProperties), RequestOptions)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#CreateVoiceChannelAsync(System.String,System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#CreateVoiceChannelAsync(System.String,System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  id: Discord#IGuild#CreateVoiceChannelAsync(System.String,System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.CreateVoiceChannelAsync(String, Action<VoiceChannelProperties>, RequestOptions)
  nameWithType: SocketGuild.IGuild.CreateVoiceChannelAsync(String, Action<VoiceChannelProperties>, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.CreateVoiceChannelAsync(System.String, System.Action<Discord.VoiceChannelProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.CreateVoiceChannelAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1116
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nCreates a new voice channel in this guild.\n"
  example: []
  syntax:
    content: Task<IVoiceChannel> IGuild.CreateVoiceChannelAsync(string name, Action<VoiceChannelProperties> func, RequestOptions options)
    parameters:
    - id: name
      type: System.String
      description: The new name for the voice channel.
    - id: func
      type: System.Action{Discord.VoiceChannelProperties}
      description: The delegate containing the properties to be applied to the channel upon its creation.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IVoiceChannel}
      description: "\nA task that represents the asynchronous creation operation. The task result contains the newly created\nvoice channel.\n"
    content.vb: Function Discord.IGuild.CreateVoiceChannelAsync(name As String, func As Action(Of VoiceChannelProperties), options As RequestOptions) As Task(Of IVoiceChannel) Implements IGuild.CreateVoiceChannelAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#CreateVoiceChannelAsync*
  implements:
  - Discord.IGuild.CreateVoiceChannelAsync(System.String,System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.CreateVoiceChannelAsync(String, Action(Of VoiceChannelProperties), RequestOptions)
  fullName.vb: Discord.WebSocket.SocketGuild.Discord.IGuild.CreateVoiceChannelAsync(System.String, System.Action(Of Discord.VoiceChannelProperties), Discord.RequestOptions)
  name.vb: Discord.IGuild.CreateVoiceChannelAsync(String, Action(Of VoiceChannelProperties), RequestOptions)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#CreateCategoryAsync(System.String,System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#CreateCategoryAsync(System.String,System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  id: Discord#IGuild#CreateCategoryAsync(System.String,System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.CreateCategoryAsync(String, Action<GuildChannelProperties>, RequestOptions)
  nameWithType: SocketGuild.IGuild.CreateCategoryAsync(String, Action<GuildChannelProperties>, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.CreateCategoryAsync(System.String, System.Action<Discord.GuildChannelProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.CreateCategoryAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1119
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nCreates a new channel category in this guild.\n"
  example: []
  syntax:
    content: Task<ICategoryChannel> IGuild.CreateCategoryAsync(string name, Action<GuildChannelProperties> func, RequestOptions options)
    parameters:
    - id: name
      type: System.String
      description: The new name for the category.
    - id: func
      type: System.Action{Discord.GuildChannelProperties}
      description: The delegate containing the properties to be applied to the channel upon its creation.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.ICategoryChannel}
      description: "\nA task that represents the asynchronous creation operation. The task result contains the newly created\ncategory channel.\n"
    content.vb: Function Discord.IGuild.CreateCategoryAsync(name As String, func As Action(Of GuildChannelProperties), options As RequestOptions) As Task(Of ICategoryChannel) Implements IGuild.CreateCategoryAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#CreateCategoryAsync*
  implements:
  - Discord.IGuild.CreateCategoryAsync(System.String,System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.CreateCategoryAsync(String, Action(Of GuildChannelProperties), RequestOptions)
  fullName.vb: Discord.WebSocket.SocketGuild.Discord.IGuild.CreateCategoryAsync(System.String, System.Action(Of Discord.GuildChannelProperties), Discord.RequestOptions)
  name.vb: Discord.IGuild.CreateCategoryAsync(String, Action(Of GuildChannelProperties), RequestOptions)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetVoiceRegionsAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetVoiceRegionsAsync(Discord.RequestOptions)
  id: Discord#IGuild#GetVoiceRegionsAsync(Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.GetVoiceRegionsAsync(RequestOptions)
  nameWithType: SocketGuild.IGuild.GetVoiceRegionsAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetVoiceRegionsAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.GetVoiceRegionsAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1123
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all the voice regions this guild can access.\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<IVoiceRegion>> IGuild.GetVoiceRegionsAsync(RequestOptions options)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IVoiceRegion}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection of\nvoice regions the guild can access.\n"
    content.vb: Function Discord.IGuild.GetVoiceRegionsAsync(options As RequestOptions) As Task(Of IReadOnlyCollection(Of IVoiceRegion)) Implements IGuild.GetVoiceRegionsAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#GetVoiceRegionsAsync*
  implements:
  - Discord.IGuild.GetVoiceRegionsAsync(Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.GetVoiceRegionsAsync(RequestOptions)
  name.vb: Discord.IGuild.GetVoiceRegionsAsync(RequestOptions)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetIntegrationsAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetIntegrationsAsync(Discord.RequestOptions)
  id: Discord#IGuild#GetIntegrationsAsync(Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.GetIntegrationsAsync(RequestOptions)
  nameWithType: SocketGuild.IGuild.GetIntegrationsAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetIntegrationsAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.GetIntegrationsAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1127
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: Task<IReadOnlyCollection<IGuildIntegration>> IGuild.GetIntegrationsAsync(RequestOptions options)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IGuildIntegration}}
    content.vb: Function Discord.IGuild.GetIntegrationsAsync(options As RequestOptions) As Task(Of IReadOnlyCollection(Of IGuildIntegration)) Implements IGuild.GetIntegrationsAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#GetIntegrationsAsync*
  implements:
  - Discord.IGuild.GetIntegrationsAsync(Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.GetIntegrationsAsync(RequestOptions)
  name.vb: Discord.IGuild.GetIntegrationsAsync(RequestOptions)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#CreateIntegrationAsync(System.UInt64,System.String,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#CreateIntegrationAsync(System.UInt64,System.String,Discord.RequestOptions)
  id: Discord#IGuild#CreateIntegrationAsync(System.UInt64,System.String,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.CreateIntegrationAsync(UInt64, String, RequestOptions)
  nameWithType: SocketGuild.IGuild.CreateIntegrationAsync(UInt64, String, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.CreateIntegrationAsync(System.UInt64, System.String, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.CreateIntegrationAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1130
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: Task<IGuildIntegration> IGuild.CreateIntegrationAsync(ulong id, string type, RequestOptions options)
    parameters:
    - id: id
      type: System.UInt64
    - id: type
      type: System.String
    - id: options
      type: Discord.RequestOptions
    return:
      type: System.Threading.Tasks.Task{Discord.IGuildIntegration}
    content.vb: Function Discord.IGuild.CreateIntegrationAsync(id As ULong, type As String, options As RequestOptions) As Task(Of IGuildIntegration) Implements IGuild.CreateIntegrationAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#CreateIntegrationAsync*
  implements:
  - Discord.IGuild.CreateIntegrationAsync(System.UInt64,System.String,Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.CreateIntegrationAsync(UInt64, String, RequestOptions)
  name.vb: Discord.IGuild.CreateIntegrationAsync(UInt64, String, RequestOptions)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetInvitesAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetInvitesAsync(Discord.RequestOptions)
  id: Discord#IGuild#GetInvitesAsync(Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.GetInvitesAsync(RequestOptions)
  nameWithType: SocketGuild.IGuild.GetInvitesAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetInvitesAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.GetInvitesAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1134
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all invites in this guild.\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<IInviteMetadata>> IGuild.GetInvitesAsync(RequestOptions options)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IInviteMetadata}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection of\ninvite metadata, each representing information for an invite found within this guild.\n"
    content.vb: Function Discord.IGuild.GetInvitesAsync(options As RequestOptions) As Task(Of IReadOnlyCollection(Of IInviteMetadata)) Implements IGuild.GetInvitesAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#GetInvitesAsync*
  implements:
  - Discord.IGuild.GetInvitesAsync(Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.GetInvitesAsync(RequestOptions)
  name.vb: Discord.IGuild.GetInvitesAsync(RequestOptions)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetVanityInviteAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetVanityInviteAsync(Discord.RequestOptions)
  id: Discord#IGuild#GetVanityInviteAsync(Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.GetVanityInviteAsync(RequestOptions)
  nameWithType: SocketGuild.IGuild.GetVanityInviteAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetVanityInviteAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.GetVanityInviteAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1137
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the vanity invite URL of this guild.\n"
  example: []
  syntax:
    content: Task<IInviteMetadata> IGuild.GetVanityInviteAsync(RequestOptions options)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IInviteMetadata}
      description: "\nA task that represents the asynchronous get operation. The task result contains the partial metadata of\nthe vanity invite found within this guild; <code>null</code> if none is found.\n"
    content.vb: Function Discord.IGuild.GetVanityInviteAsync(options As RequestOptions) As Task(Of IInviteMetadata) Implements IGuild.GetVanityInviteAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#GetVanityInviteAsync*
  implements:
  - Discord.IGuild.GetVanityInviteAsync(Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.GetVanityInviteAsync(RequestOptions)
  name.vb: Discord.IGuild.GetVanityInviteAsync(RequestOptions)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetRole(System.UInt64)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetRole(System.UInt64)
  id: Discord#IGuild#GetRole(System.UInt64)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.GetRole(UInt64)
  nameWithType: SocketGuild.IGuild.GetRole(UInt64)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetRole(System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.GetRole
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1141
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a role in this guild.\n"
  example: []
  syntax:
    content: IRole IGuild.GetRole(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier for the role.
    return:
      type: Discord.IRole
      description: "\nA role that is associated with the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Function Discord.IGuild.GetRole(id As ULong) As IRole Implements IGuild.GetRole
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#GetRole*
  implements:
  - Discord.IGuild.GetRole(System.UInt64)
  nameWithType.vb: SocketGuild.Discord.IGuild.GetRole(UInt64)
  name.vb: Discord.IGuild.GetRole(UInt64)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)
  id: Discord#IGuild#CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.CreateRoleAsync(String, Nullable<GuildPermissions>, Nullable<Color>, Boolean, RequestOptions)
  nameWithType: SocketGuild.IGuild.CreateRoleAsync(String, Nullable<GuildPermissions>, Nullable<Color>, Boolean, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.CreateRoleAsync(System.String, System.Nullable<Discord.GuildPermissions>, System.Nullable<Discord.Color>, System.Boolean, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.CreateRoleAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1144
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nCreates a new role with the provided name.\n"
  example: []
  syntax:
    content: Task<IRole> IGuild.CreateRoleAsync(string name, GuildPermissions? permissions, Color? color, bool isHoisted, RequestOptions options)
    parameters:
    - id: name
      type: System.String
      description: The new name for the role.
    - id: permissions
      type: System.Nullable{Discord.GuildPermissions}
      description: The guild permission that the role should possess.
    - id: color
      type: System.Nullable{Discord.Color}
      description: The color of the role.
    - id: isHoisted
      type: System.Boolean
      description: Whether the role is separated from others on the sidebar.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IRole}
      description: "\nA task that represents the asynchronous creation operation. The task result contains the newly created\nrole.\n"
    content.vb: Function Discord.IGuild.CreateRoleAsync(name As String, permissions As GuildPermissions?, color As Color?, isHoisted As Boolean, options As RequestOptions) As Task(Of IRole) Implements IGuild.CreateRoleAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#CreateRoleAsync*
  implements:
  - Discord.IGuild.CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.CreateRoleAsync(String, Nullable(Of GuildPermissions), Nullable(Of Color), Boolean, RequestOptions)
  fullName.vb: Discord.WebSocket.SocketGuild.Discord.IGuild.CreateRoleAsync(System.String, System.Nullable(Of Discord.GuildPermissions), System.Nullable(Of Discord.Color), System.Boolean, Discord.RequestOptions)
  name.vb: Discord.IGuild.CreateRoleAsync(String, Nullable(Of GuildPermissions), Nullable(Of Color), Boolean, RequestOptions)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IGuild#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.GetUsersAsync(CacheMode, RequestOptions)
  nameWithType: SocketGuild.IGuild.GetUsersAsync(CacheMode, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetUsersAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.GetUsersAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1148
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all users in this guild.\n"
  remarks: "\nThis method retrieves all users found within this guild.\n<div class=\"NOTE\"><h5>note</h5><p>\n    This may return an incomplete collection in the WebSocket implementation due to how Discord does not\n    send a complete user list for large guilds.\n</p></div>\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<IGuildUser>> IGuild.GetUsersAsync(CacheMode mode, RequestOptions options)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IGuildUser}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a collection of guild\nusers found within this guild.\n"
    content.vb: Function Discord.IGuild.GetUsersAsync(mode As CacheMode, options As RequestOptions) As Task(Of IReadOnlyCollection(Of IGuildUser)) Implements IGuild.GetUsersAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#GetUsersAsync*
  implements:
  - Discord.IGuild.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.GetUsersAsync(CacheMode, RequestOptions)
  name.vb: Discord.IGuild.GetUsersAsync(CacheMode, RequestOptions)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#AddGuildUserAsync(System.UInt64,System.String,System.Action{Discord.AddGuildUserProperties},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#AddGuildUserAsync(System.UInt64,System.String,System.Action{Discord.AddGuildUserProperties},Discord.RequestOptions)
  id: Discord#IGuild#AddGuildUserAsync(System.UInt64,System.String,System.Action{Discord.AddGuildUserProperties},Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.AddGuildUserAsync(UInt64, String, Action<AddGuildUserProperties>, RequestOptions)
  nameWithType: SocketGuild.IGuild.AddGuildUserAsync(UInt64, String, Action<AddGuildUserProperties>, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.AddGuildUserAsync(System.UInt64, System.String, System.Action<Discord.AddGuildUserProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.AddGuildUserAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1152
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nAdds a user to this guild.\n"
  remarks: "\nThis method requires you have an OAuth2 access token for the user, requested with the guilds.join scope, and that the bot have the MANAGE_INVITES permission in the guild.\n"
  example: []
  syntax:
    content: Task<IGuildUser> IGuild.AddGuildUserAsync(ulong userId, string accessToken, Action<AddGuildUserProperties> func, RequestOptions options)
    parameters:
    - id: userId
      type: System.UInt64
      description: The snowflake identifier of the user.
    - id: accessToken
      type: System.String
      description: The OAuth2 access token for the user, requested with the guilds.join scope.
    - id: func
      type: System.Action{Discord.AddGuildUserProperties}
      description: The delegate containing the properties to be applied to the user upon being added to the guild.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IGuildUser}
      description: A guild user associated with the specified <code data-dev-comment-type="paramref" class="paramref">userId</code>; <code>null</code> if the user is already in the guild.
    content.vb: Function Discord.IGuild.AddGuildUserAsync(userId As ULong, accessToken As String, func As Action(Of AddGuildUserProperties), options As RequestOptions) As Task(Of IGuildUser) Implements IGuild.AddGuildUserAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#AddGuildUserAsync*
  implements:
  - Discord.IGuild.AddGuildUserAsync(System.UInt64,System.String,System.Action{Discord.AddGuildUserProperties},Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.AddGuildUserAsync(UInt64, String, Action(Of AddGuildUserProperties), RequestOptions)
  fullName.vb: Discord.WebSocket.SocketGuild.Discord.IGuild.AddGuildUserAsync(System.UInt64, System.String, System.Action(Of Discord.AddGuildUserProperties), Discord.RequestOptions)
  name.vb: Discord.IGuild.AddGuildUserAsync(UInt64, String, Action(Of AddGuildUserProperties), RequestOptions)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IGuild#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.GetUserAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: SocketGuild.IGuild.GetUserAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetUserAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.GetUserAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1155
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a user from this guild.\n"
  remarks: "\nThis method retrieves a user found within this guild.\n<div class=\"NOTE\"><h5>note</h5><p>\n    This may return <code>null</code> in the WebSocket implementation due to incomplete user collection in\n    large guilds.\n</p></div>\n"
  example: []
  syntax:
    content: Task<IGuildUser> IGuild.GetUserAsync(ulong id, CacheMode mode, RequestOptions options)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the user.
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IGuildUser}
      description: "\nA task that represents the asynchronous get operation. The task result contains the guild user\nassociated with the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Function Discord.IGuild.GetUserAsync(id As ULong, mode As CacheMode, options As RequestOptions) As Task(Of IGuildUser) Implements IGuild.GetUserAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#GetUserAsync*
  implements:
  - Discord.IGuild.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.GetUserAsync(UInt64, CacheMode, RequestOptions)
  name.vb: Discord.IGuild.GetUserAsync(UInt64, CacheMode, RequestOptions)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetCurrentUserAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetCurrentUserAsync(Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IGuild#GetCurrentUserAsync(Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.GetCurrentUserAsync(CacheMode, RequestOptions)
  nameWithType: SocketGuild.IGuild.GetCurrentUserAsync(CacheMode, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetCurrentUserAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.GetCurrentUserAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1158
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the current user for this guild.\n"
  example: []
  syntax:
    content: Task<IGuildUser> IGuild.GetCurrentUserAsync(CacheMode mode, RequestOptions options)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IGuildUser}
      description: "\nA task that represents the asynchronous get operation. The task result contains the currently logged-in\nuser within this guild.\n"
    content.vb: Function Discord.IGuild.GetCurrentUserAsync(mode As CacheMode, options As RequestOptions) As Task(Of IGuildUser) Implements IGuild.GetCurrentUserAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#GetCurrentUserAsync*
  implements:
  - Discord.IGuild.GetCurrentUserAsync(Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.GetCurrentUserAsync(CacheMode, RequestOptions)
  name.vb: Discord.IGuild.GetCurrentUserAsync(CacheMode, RequestOptions)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetOwnerAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetOwnerAsync(Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IGuild#GetOwnerAsync(Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.GetOwnerAsync(CacheMode, RequestOptions)
  nameWithType: SocketGuild.IGuild.GetOwnerAsync(CacheMode, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetOwnerAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.GetOwnerAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1161
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the owner of this guild.\n"
  example: []
  syntax:
    content: Task<IGuildUser> IGuild.GetOwnerAsync(CacheMode mode, RequestOptions options)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IGuildUser}
      description: "\nA task that represents the asynchronous get operation. The task result contains the owner of this guild.\n"
    content.vb: Function Discord.IGuild.GetOwnerAsync(mode As CacheMode, options As RequestOptions) As Task(Of IGuildUser) Implements IGuild.GetOwnerAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#GetOwnerAsync*
  implements:
  - Discord.IGuild.GetOwnerAsync(Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.GetOwnerAsync(CacheMode, RequestOptions)
  name.vb: Discord.IGuild.GetOwnerAsync(CacheMode, RequestOptions)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetAuditLogsAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{Discord.ActionType})
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetAuditLogsAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{Discord.ActionType})
  id: Discord#IGuild#GetAuditLogsAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{Discord.ActionType})
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.GetAuditLogsAsync(Int32, CacheMode, RequestOptions, Nullable<UInt64>, Nullable<UInt64>, Nullable<ActionType>)
  nameWithType: SocketGuild.IGuild.GetAuditLogsAsync(Int32, CacheMode, RequestOptions, Nullable<UInt64>, Nullable<UInt64>, Nullable<ActionType>)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetAuditLogsAsync(System.Int32, Discord.CacheMode, Discord.RequestOptions, System.Nullable<System.UInt64>, System.Nullable<System.UInt64>, System.Nullable<Discord.ActionType>)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.GetAuditLogsAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1165
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the specified number of audit log entries for this guild.\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<IAuditLogEntry>> IGuild.GetAuditLogsAsync(int limit, CacheMode cacheMode, RequestOptions options, ulong? beforeId, ulong? userId, ActionType? actionType)
    parameters:
    - id: limit
      type: System.Int32
      description: The number of audit log entries to fetch.
    - id: cacheMode
      type: Discord.CacheMode
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    - id: beforeId
      type: System.Nullable{System.UInt64}
      description: The audit log entry ID to get entries before.
    - id: userId
      type: System.Nullable{System.UInt64}
      description: The user ID to filter entries for.
    - id: actionType
      type: System.Nullable{Discord.ActionType}
      description: The type of actions to filter.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IAuditLogEntry}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection\nof the requested audit log entries.\n"
    content.vb: Function Discord.IGuild.GetAuditLogsAsync(limit As Integer, cacheMode As CacheMode, options As RequestOptions, beforeId As ULong?, userId As ULong?, actionType As ActionType?) As Task(Of IReadOnlyCollection(Of IAuditLogEntry)) Implements IGuild.GetAuditLogsAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#GetAuditLogsAsync*
  implements:
  - Discord.IGuild.GetAuditLogsAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{Discord.ActionType})
  nameWithType.vb: SocketGuild.Discord.IGuild.GetAuditLogsAsync(Int32, CacheMode, RequestOptions, Nullable(Of UInt64), Nullable(Of UInt64), Nullable(Of ActionType))
  fullName.vb: Discord.WebSocket.SocketGuild.Discord.IGuild.GetAuditLogsAsync(System.Int32, Discord.CacheMode, Discord.RequestOptions, System.Nullable(Of System.UInt64), System.Nullable(Of System.UInt64), System.Nullable(Of Discord.ActionType))
  name.vb: Discord.IGuild.GetAuditLogsAsync(Int32, CacheMode, RequestOptions, Nullable(Of UInt64), Nullable(Of UInt64), Nullable(Of ActionType))
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  id: Discord#IGuild#GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.GetWebhookAsync(UInt64, RequestOptions)
  nameWithType: SocketGuild.IGuild.GetWebhookAsync(UInt64, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetWebhookAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.GetWebhookAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1175
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a webhook found within this guild.\n"
  example: []
  syntax:
    content: Task<IWebhook> IGuild.GetWebhookAsync(ulong id, RequestOptions options)
    parameters:
    - id: id
      type: System.UInt64
      description: The identifier for the webhook.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IWebhook}
      description: "\nA task that represents the asynchronous get operation. The task result contains the webhook with the\nspecified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Function Discord.IGuild.GetWebhookAsync(id As ULong, options As RequestOptions) As Task(Of IWebhook) Implements IGuild.GetWebhookAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#GetWebhookAsync*
  implements:
  - Discord.IGuild.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.GetWebhookAsync(UInt64, RequestOptions)
  name.vb: Discord.IGuild.GetWebhookAsync(UInt64, RequestOptions)
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetWebhooksAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetWebhooksAsync(Discord.RequestOptions)
  id: Discord#IGuild#GetWebhooksAsync(Discord.RequestOptions)
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.GetWebhooksAsync(RequestOptions)
  nameWithType: SocketGuild.IGuild.GetWebhooksAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetWebhooksAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.GetWebhooksAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1178
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all webhook from this guild.\n"
  example: []
  syntax:
    content: Task<IReadOnlyCollection<IWebhook>> IGuild.GetWebhooksAsync(RequestOptions options)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IWebhook}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection\nof webhooks found within the guild.\n"
    content.vb: Function Discord.IGuild.GetWebhooksAsync(options As RequestOptions) As Task(Of IReadOnlyCollection(Of IWebhook)) Implements IGuild.GetWebhooksAsync
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#GetWebhooksAsync*
  implements:
  - Discord.IGuild.GetWebhooksAsync(Discord.RequestOptions)
  nameWithType.vb: SocketGuild.Discord.IGuild.GetWebhooksAsync(RequestOptions)
  name.vb: Discord.IGuild.GetWebhooksAsync(RequestOptions)
- uid: Discord.WebSocket.SocketGuild.System#IDisposable#Dispose
  commentId: M:Discord.WebSocket.SocketGuild.System#IDisposable#Dispose
  id: System#IDisposable#Dispose
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IDisposable.Dispose()
  nameWithType: SocketGuild.IDisposable.Dispose()
  fullName: Discord.WebSocket.SocketGuild.System.IDisposable.Dispose()
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: System.IDisposable.Dispose
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1181
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  syntax:
    content: void IDisposable.Dispose()
    content.vb: Sub System.IDisposable.Dispose Implements IDisposable.Dispose
  overload: Discord.WebSocket.SocketGuild.System#IDisposable#Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: SocketGuild.System.IDisposable.Dispose()
  name.vb: System.IDisposable.Dispose()
references:
- uid: Discord.WebSocket
  commentId: N:Discord.WebSocket
  name: Discord.WebSocket
  nameWithType: Discord.WebSocket
  fullName: Discord.WebSocket
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.WebSocket.SocketEntity{System.UInt64}
  commentId: T:Discord.WebSocket.SocketEntity{System.UInt64}
  parent: Discord.WebSocket
  definition: Discord.WebSocket.SocketEntity`1
  name: SocketEntity<UInt64>
  nameWithType: SocketEntity<UInt64>
  fullName: Discord.WebSocket.SocketEntity<System.UInt64>
  nameWithType.vb: SocketEntity(Of UInt64)
  fullName.vb: Discord.WebSocket.SocketEntity(Of System.UInt64)
  name.vb: SocketEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.WebSocket.SocketEntity`1
    name: SocketEntity
    nameWithType: SocketEntity
    fullName: Discord.WebSocket.SocketEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.WebSocket.SocketEntity`1
    name: SocketEntity
    nameWithType: SocketEntity
    fullName: Discord.WebSocket.SocketEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild
  commentId: T:Discord.IGuild
  parent: Discord
  name: IGuild
  nameWithType: IGuild
  fullName: Discord.IGuild
- uid: Discord.IDeletable
  commentId: T:Discord.IDeletable
  parent: Discord
  name: IDeletable
  nameWithType: IDeletable
  fullName: Discord.IDeletable
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Discord.WebSocket.SocketEntity{System.UInt64}.Id
  commentId: P:Discord.WebSocket.SocketEntity{System.UInt64}.Id
  parent: Discord.WebSocket.SocketEntity{System.UInt64}
  definition: Discord.WebSocket.SocketEntity`1.Id
  name: Id
  nameWithType: SocketEntity<UInt64>.Id
  fullName: Discord.WebSocket.SocketEntity<System.UInt64>.Id
  nameWithType.vb: SocketEntity(Of UInt64).Id
  fullName.vb: Discord.WebSocket.SocketEntity(Of System.UInt64).Id
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.WebSocket.SocketEntity`1
  commentId: T:Discord.WebSocket.SocketEntity`1
  name: SocketEntity<T>
  nameWithType: SocketEntity<T>
  fullName: Discord.WebSocket.SocketEntity<T>
  nameWithType.vb: SocketEntity(Of T)
  fullName.vb: Discord.WebSocket.SocketEntity(Of T)
  name.vb: SocketEntity(Of T)
  spec.csharp:
  - uid: Discord.WebSocket.SocketEntity`1
    name: SocketEntity
    nameWithType: SocketEntity
    fullName: Discord.WebSocket.SocketEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.WebSocket.SocketEntity`1
    name: SocketEntity
    nameWithType: SocketEntity
    fullName: Discord.WebSocket.SocketEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketEntity`1.Id
  commentId: P:Discord.WebSocket.SocketEntity`1.Id
  name: Id
  nameWithType: SocketEntity<T>.Id
  fullName: Discord.WebSocket.SocketEntity<T>.Id
  nameWithType.vb: SocketEntity(Of T).Id
  fullName.vb: Discord.WebSocket.SocketEntity(Of T).Id
- uid: Discord.WebSocket.SocketGuild.Name*
  commentId: Overload:Discord.WebSocket.SocketGuild.Name
  name: Name
  nameWithType: SocketGuild.Name
  fullName: Discord.WebSocket.SocketGuild.Name
- uid: Discord.IGuild.Name
  commentId: P:Discord.IGuild.Name
  parent: Discord.IGuild
  name: Name
  nameWithType: IGuild.Name
  fullName: Discord.IGuild.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.WebSocket.SocketGuild.AFKTimeout*
  commentId: Overload:Discord.WebSocket.SocketGuild.AFKTimeout
  name: AFKTimeout
  nameWithType: SocketGuild.AFKTimeout
  fullName: Discord.WebSocket.SocketGuild.AFKTimeout
- uid: Discord.IGuild.AFKTimeout
  commentId: P:Discord.IGuild.AFKTimeout
  parent: Discord.IGuild
  name: AFKTimeout
  nameWithType: IGuild.AFKTimeout
  fullName: Discord.IGuild.AFKTimeout
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Discord.WebSocket.SocketGuild.IsEmbeddable*
  commentId: Overload:Discord.WebSocket.SocketGuild.IsEmbeddable
  name: IsEmbeddable
  nameWithType: SocketGuild.IsEmbeddable
  fullName: Discord.WebSocket.SocketGuild.IsEmbeddable
- uid: Discord.IGuild.IsEmbeddable
  commentId: P:Discord.IGuild.IsEmbeddable
  parent: Discord.IGuild
  name: IsEmbeddable
  nameWithType: IGuild.IsEmbeddable
  fullName: Discord.IGuild.IsEmbeddable
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.WebSocket.SocketGuild.VerificationLevel*
  commentId: Overload:Discord.WebSocket.SocketGuild.VerificationLevel
  name: VerificationLevel
  nameWithType: SocketGuild.VerificationLevel
  fullName: Discord.WebSocket.SocketGuild.VerificationLevel
- uid: Discord.IGuild.VerificationLevel
  commentId: P:Discord.IGuild.VerificationLevel
  parent: Discord.IGuild
  name: VerificationLevel
  nameWithType: IGuild.VerificationLevel
  fullName: Discord.IGuild.VerificationLevel
- uid: Discord.VerificationLevel
  commentId: T:Discord.VerificationLevel
  parent: Discord
  name: VerificationLevel
  nameWithType: VerificationLevel
  fullName: Discord.VerificationLevel
- uid: Discord.WebSocket.SocketGuild.MfaLevel*
  commentId: Overload:Discord.WebSocket.SocketGuild.MfaLevel
  name: MfaLevel
  nameWithType: SocketGuild.MfaLevel
  fullName: Discord.WebSocket.SocketGuild.MfaLevel
- uid: Discord.IGuild.MfaLevel
  commentId: P:Discord.IGuild.MfaLevel
  parent: Discord.IGuild
  name: MfaLevel
  nameWithType: IGuild.MfaLevel
  fullName: Discord.IGuild.MfaLevel
- uid: Discord.MfaLevel
  commentId: T:Discord.MfaLevel
  parent: Discord
  name: MfaLevel
  nameWithType: MfaLevel
  fullName: Discord.MfaLevel
- uid: Discord.WebSocket.SocketGuild.DefaultMessageNotifications*
  commentId: Overload:Discord.WebSocket.SocketGuild.DefaultMessageNotifications
  name: DefaultMessageNotifications
  nameWithType: SocketGuild.DefaultMessageNotifications
  fullName: Discord.WebSocket.SocketGuild.DefaultMessageNotifications
- uid: Discord.IGuild.DefaultMessageNotifications
  commentId: P:Discord.IGuild.DefaultMessageNotifications
  parent: Discord.IGuild
  name: DefaultMessageNotifications
  nameWithType: IGuild.DefaultMessageNotifications
  fullName: Discord.IGuild.DefaultMessageNotifications
- uid: Discord.DefaultMessageNotifications
  commentId: T:Discord.DefaultMessageNotifications
  parent: Discord
  name: DefaultMessageNotifications
  nameWithType: DefaultMessageNotifications
  fullName: Discord.DefaultMessageNotifications
- uid: Discord.WebSocket.SocketGuild.ExplicitContentFilter*
  commentId: Overload:Discord.WebSocket.SocketGuild.ExplicitContentFilter
  name: ExplicitContentFilter
  nameWithType: SocketGuild.ExplicitContentFilter
  fullName: Discord.WebSocket.SocketGuild.ExplicitContentFilter
- uid: Discord.IGuild.ExplicitContentFilter
  commentId: P:Discord.IGuild.ExplicitContentFilter
  parent: Discord.IGuild
  name: ExplicitContentFilter
  nameWithType: IGuild.ExplicitContentFilter
  fullName: Discord.IGuild.ExplicitContentFilter
- uid: Discord.ExplicitContentFilterLevel
  commentId: T:Discord.ExplicitContentFilterLevel
  parent: Discord
  name: ExplicitContentFilterLevel
  nameWithType: ExplicitContentFilterLevel
  fullName: Discord.ExplicitContentFilterLevel
- uid: Discord.WebSocket.SocketGuild.Users
  commentId: P:Discord.WebSocket.SocketGuild.Users
  isExternal: true
- uid: Discord.WebSocket.SocketGuild.MemberCount*
  commentId: Overload:Discord.WebSocket.SocketGuild.MemberCount
  name: MemberCount
  nameWithType: SocketGuild.MemberCount
  fullName: Discord.WebSocket.SocketGuild.MemberCount
- uid: Discord.WebSocket.SocketGuild.DownloadedMemberCount*
  commentId: Overload:Discord.WebSocket.SocketGuild.DownloadedMemberCount
  name: DownloadedMemberCount
  nameWithType: SocketGuild.DownloadedMemberCount
  fullName: Discord.WebSocket.SocketGuild.DownloadedMemberCount
- uid: Discord.WebSocket.SocketGuild.IsConnected*
  commentId: Overload:Discord.WebSocket.SocketGuild.IsConnected
  name: IsConnected
  nameWithType: SocketGuild.IsConnected
  fullName: Discord.WebSocket.SocketGuild.IsConnected
- uid: Discord.WebSocket.SocketGuild.ApplicationId*
  commentId: Overload:Discord.WebSocket.SocketGuild.ApplicationId
  name: ApplicationId
  nameWithType: SocketGuild.ApplicationId
  fullName: Discord.WebSocket.SocketGuild.ApplicationId
- uid: Discord.IGuild.ApplicationId
  commentId: P:Discord.IGuild.ApplicationId
  parent: Discord.IGuild
  name: ApplicationId
  nameWithType: IGuild.ApplicationId
  fullName: Discord.IGuild.ApplicationId
- uid: System.Nullable{System.UInt64}
  commentId: T:System.Nullable{System.UInt64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<UInt64>
  nameWithType: Nullable<UInt64>
  fullName: System.Nullable<System.UInt64>
  nameWithType.vb: Nullable(Of UInt64)
  fullName.vb: System.Nullable(Of System.UInt64)
  name.vb: Nullable(Of UInt64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.OwnerId*
  commentId: Overload:Discord.WebSocket.SocketGuild.OwnerId
  name: OwnerId
  nameWithType: SocketGuild.OwnerId
  fullName: Discord.WebSocket.SocketGuild.OwnerId
- uid: Discord.IGuild.OwnerId
  commentId: P:Discord.IGuild.OwnerId
  parent: Discord.IGuild
  name: OwnerId
  nameWithType: IGuild.OwnerId
  fullName: Discord.IGuild.OwnerId
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Discord.WebSocket.SocketGuild.Owner*
  commentId: Overload:Discord.WebSocket.SocketGuild.Owner
  name: Owner
  nameWithType: SocketGuild.Owner
  fullName: Discord.WebSocket.SocketGuild.Owner
- uid: Discord.WebSocket.SocketGuildUser
  commentId: T:Discord.WebSocket.SocketGuildUser
  parent: Discord.WebSocket
  name: SocketGuildUser
  nameWithType: SocketGuildUser
  fullName: Discord.WebSocket.SocketGuildUser
- uid: Discord.WebSocket.SocketGuild.VoiceRegionId*
  commentId: Overload:Discord.WebSocket.SocketGuild.VoiceRegionId
  name: VoiceRegionId
  nameWithType: SocketGuild.VoiceRegionId
  fullName: Discord.WebSocket.SocketGuild.VoiceRegionId
- uid: Discord.IGuild.VoiceRegionId
  commentId: P:Discord.IGuild.VoiceRegionId
  parent: Discord.IGuild
  name: VoiceRegionId
  nameWithType: IGuild.VoiceRegionId
  fullName: Discord.IGuild.VoiceRegionId
- uid: Discord.WebSocket.SocketGuild.IconId*
  commentId: Overload:Discord.WebSocket.SocketGuild.IconId
  name: IconId
  nameWithType: SocketGuild.IconId
  fullName: Discord.WebSocket.SocketGuild.IconId
- uid: Discord.IGuild.IconId
  commentId: P:Discord.IGuild.IconId
  parent: Discord.IGuild
  name: IconId
  nameWithType: IGuild.IconId
  fullName: Discord.IGuild.IconId
- uid: Discord.WebSocket.SocketGuild.SplashId*
  commentId: Overload:Discord.WebSocket.SocketGuild.SplashId
  name: SplashId
  nameWithType: SocketGuild.SplashId
  fullName: Discord.WebSocket.SocketGuild.SplashId
- uid: Discord.IGuild.SplashId
  commentId: P:Discord.IGuild.SplashId
  parent: Discord.IGuild
  name: SplashId
  nameWithType: IGuild.SplashId
  fullName: Discord.IGuild.SplashId
- uid: Discord.WebSocket.SocketGuild.PremiumTier*
  commentId: Overload:Discord.WebSocket.SocketGuild.PremiumTier
  name: PremiumTier
  nameWithType: SocketGuild.PremiumTier
  fullName: Discord.WebSocket.SocketGuild.PremiumTier
- uid: Discord.IGuild.PremiumTier
  commentId: P:Discord.IGuild.PremiumTier
  parent: Discord.IGuild
  name: PremiumTier
  nameWithType: IGuild.PremiumTier
  fullName: Discord.IGuild.PremiumTier
- uid: Discord.PremiumTier
  commentId: T:Discord.PremiumTier
  parent: Discord
  name: PremiumTier
  nameWithType: PremiumTier
  fullName: Discord.PremiumTier
- uid: Discord.WebSocket.SocketGuild.BannerId*
  commentId: Overload:Discord.WebSocket.SocketGuild.BannerId
  name: BannerId
  nameWithType: SocketGuild.BannerId
  fullName: Discord.WebSocket.SocketGuild.BannerId
- uid: Discord.IGuild.BannerId
  commentId: P:Discord.IGuild.BannerId
  parent: Discord.IGuild
  name: BannerId
  nameWithType: IGuild.BannerId
  fullName: Discord.IGuild.BannerId
- uid: Discord.WebSocket.SocketGuild.VanityURLCode*
  commentId: Overload:Discord.WebSocket.SocketGuild.VanityURLCode
  name: VanityURLCode
  nameWithType: SocketGuild.VanityURLCode
  fullName: Discord.WebSocket.SocketGuild.VanityURLCode
- uid: Discord.IGuild.VanityURLCode
  commentId: P:Discord.IGuild.VanityURLCode
  parent: Discord.IGuild
  name: VanityURLCode
  nameWithType: IGuild.VanityURLCode
  fullName: Discord.IGuild.VanityURLCode
- uid: Discord.WebSocket.SocketGuild.SystemChannelFlags*
  commentId: Overload:Discord.WebSocket.SocketGuild.SystemChannelFlags
  name: SystemChannelFlags
  nameWithType: SocketGuild.SystemChannelFlags
  fullName: Discord.WebSocket.SocketGuild.SystemChannelFlags
- uid: Discord.IGuild.SystemChannelFlags
  commentId: P:Discord.IGuild.SystemChannelFlags
  parent: Discord.IGuild
  name: SystemChannelFlags
  nameWithType: IGuild.SystemChannelFlags
  fullName: Discord.IGuild.SystemChannelFlags
- uid: Discord.SystemChannelMessageDeny
  commentId: T:Discord.SystemChannelMessageDeny
  parent: Discord
  name: SystemChannelMessageDeny
  nameWithType: SystemChannelMessageDeny
  fullName: Discord.SystemChannelMessageDeny
- uid: Discord.WebSocket.SocketGuild.Description*
  commentId: Overload:Discord.WebSocket.SocketGuild.Description
  name: Description
  nameWithType: SocketGuild.Description
  fullName: Discord.WebSocket.SocketGuild.Description
- uid: Discord.IGuild.Description
  commentId: P:Discord.IGuild.Description
  parent: Discord.IGuild
  name: Description
  nameWithType: IGuild.Description
  fullName: Discord.IGuild.Description
- uid: Discord.WebSocket.SocketGuild.PremiumSubscriptionCount*
  commentId: Overload:Discord.WebSocket.SocketGuild.PremiumSubscriptionCount
  name: PremiumSubscriptionCount
  nameWithType: SocketGuild.PremiumSubscriptionCount
  fullName: Discord.WebSocket.SocketGuild.PremiumSubscriptionCount
- uid: Discord.IGuild.PremiumSubscriptionCount
  commentId: P:Discord.IGuild.PremiumSubscriptionCount
  parent: Discord.IGuild
  name: PremiumSubscriptionCount
  nameWithType: IGuild.PremiumSubscriptionCount
  fullName: Discord.IGuild.PremiumSubscriptionCount
- uid: Discord.WebSocket.SocketGuild.CreatedAt*
  commentId: Overload:Discord.WebSocket.SocketGuild.CreatedAt
  name: CreatedAt
  nameWithType: SocketGuild.CreatedAt
  fullName: Discord.WebSocket.SocketGuild.CreatedAt
- uid: Discord.ISnowflakeEntity.CreatedAt
  commentId: P:Discord.ISnowflakeEntity.CreatedAt
  parent: Discord.ISnowflakeEntity
  name: CreatedAt
  nameWithType: ISnowflakeEntity.CreatedAt
  fullName: Discord.ISnowflakeEntity.CreatedAt
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: Discord.WebSocket.SocketGuild.IconUrl*
  commentId: Overload:Discord.WebSocket.SocketGuild.IconUrl
  name: IconUrl
  nameWithType: SocketGuild.IconUrl
  fullName: Discord.WebSocket.SocketGuild.IconUrl
- uid: Discord.IGuild.IconUrl
  commentId: P:Discord.IGuild.IconUrl
  parent: Discord.IGuild
  name: IconUrl
  nameWithType: IGuild.IconUrl
  fullName: Discord.IGuild.IconUrl
- uid: Discord.WebSocket.SocketGuild.SplashUrl*
  commentId: Overload:Discord.WebSocket.SocketGuild.SplashUrl
  name: SplashUrl
  nameWithType: SocketGuild.SplashUrl
  fullName: Discord.WebSocket.SocketGuild.SplashUrl
- uid: Discord.IGuild.SplashUrl
  commentId: P:Discord.IGuild.SplashUrl
  parent: Discord.IGuild
  name: SplashUrl
  nameWithType: IGuild.SplashUrl
  fullName: Discord.IGuild.SplashUrl
- uid: Discord.WebSocket.SocketGuild.BannerUrl*
  commentId: Overload:Discord.WebSocket.SocketGuild.BannerUrl
  name: BannerUrl
  nameWithType: SocketGuild.BannerUrl
  fullName: Discord.WebSocket.SocketGuild.BannerUrl
- uid: Discord.IGuild.BannerUrl
  commentId: P:Discord.IGuild.BannerUrl
  parent: Discord.IGuild
  name: BannerUrl
  nameWithType: IGuild.BannerUrl
  fullName: Discord.IGuild.BannerUrl
- uid: Discord.WebSocket.SocketGuild.HasAllMembers*
  commentId: Overload:Discord.WebSocket.SocketGuild.HasAllMembers
  name: HasAllMembers
  nameWithType: SocketGuild.HasAllMembers
  fullName: Discord.WebSocket.SocketGuild.HasAllMembers
- uid: Discord.WebSocket.SocketGuild.IsSynced*
  commentId: Overload:Discord.WebSocket.SocketGuild.IsSynced
  name: IsSynced
  nameWithType: SocketGuild.IsSynced
  fullName: Discord.WebSocket.SocketGuild.IsSynced
- uid: Discord.WebSocket.SocketGuild.SyncPromise*
  commentId: Overload:Discord.WebSocket.SocketGuild.SyncPromise
  name: SyncPromise
  nameWithType: SocketGuild.SyncPromise
  fullName: Discord.WebSocket.SocketGuild.SyncPromise
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Discord.WebSocket.SocketGuild.DownloaderPromise*
  commentId: Overload:Discord.WebSocket.SocketGuild.DownloaderPromise
  name: DownloaderPromise
  nameWithType: SocketGuild.DownloaderPromise
  fullName: Discord.WebSocket.SocketGuild.DownloaderPromise
- uid: Discord.Audio.IAudioClient
  commentId: T:Discord.Audio.IAudioClient
  parent: Discord.Audio
  name: IAudioClient
  nameWithType: IAudioClient
  fullName: Discord.Audio.IAudioClient
- uid: Discord.WebSocket.SocketGuild.AudioClient*
  commentId: Overload:Discord.WebSocket.SocketGuild.AudioClient
  name: AudioClient
  nameWithType: SocketGuild.AudioClient
  fullName: Discord.WebSocket.SocketGuild.AudioClient
- uid: Discord.Audio
  commentId: N:Discord.Audio
  name: Discord.Audio
  nameWithType: Discord.Audio
  fullName: Discord.Audio
- uid: Discord.WebSocket.SocketTextChannel
  commentId: T:Discord.WebSocket.SocketTextChannel
  parent: Discord.WebSocket
  name: SocketTextChannel
  nameWithType: SocketTextChannel
  fullName: Discord.WebSocket.SocketTextChannel
- uid: Discord.WebSocket.SocketGuild.DefaultChannel*
  commentId: Overload:Discord.WebSocket.SocketGuild.DefaultChannel
  name: DefaultChannel
  nameWithType: SocketGuild.DefaultChannel
  fullName: Discord.WebSocket.SocketGuild.DefaultChannel
- uid: Discord.WebSocket.SocketVoiceChannel
  commentId: T:Discord.WebSocket.SocketVoiceChannel
  parent: Discord.WebSocket
  name: SocketVoiceChannel
  nameWithType: SocketVoiceChannel
  fullName: Discord.WebSocket.SocketVoiceChannel
- uid: Discord.WebSocket.SocketGuild.AFKChannel*
  commentId: Overload:Discord.WebSocket.SocketGuild.AFKChannel
  name: AFKChannel
  nameWithType: SocketGuild.AFKChannel
  fullName: Discord.WebSocket.SocketGuild.AFKChannel
- uid: Discord.WebSocket.SocketGuild.EmbedChannel*
  commentId: Overload:Discord.WebSocket.SocketGuild.EmbedChannel
  name: EmbedChannel
  nameWithType: SocketGuild.EmbedChannel
  fullName: Discord.WebSocket.SocketGuild.EmbedChannel
- uid: Discord.WebSocket.SocketGuildChannel
  commentId: T:Discord.WebSocket.SocketGuildChannel
  parent: Discord.WebSocket
  name: SocketGuildChannel
  nameWithType: SocketGuildChannel
  fullName: Discord.WebSocket.SocketGuildChannel
- uid: Discord.WebSocket.SocketGuild.SystemChannel*
  commentId: Overload:Discord.WebSocket.SocketGuild.SystemChannel
  name: SystemChannel
  nameWithType: SocketGuild.SystemChannel
  fullName: Discord.WebSocket.SocketGuild.SystemChannel
- uid: Discord.WebSocket.SocketGuild.TextChannels*
  commentId: Overload:Discord.WebSocket.SocketGuild.TextChannels
  name: TextChannels
  nameWithType: SocketGuild.TextChannels
  fullName: Discord.WebSocket.SocketGuild.TextChannels
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketTextChannel}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketTextChannel}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<SocketTextChannel>
  nameWithType: IReadOnlyCollection<SocketTextChannel>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.WebSocket.SocketTextChannel>
  nameWithType.vb: IReadOnlyCollection(Of SocketTextChannel)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.WebSocket.SocketTextChannel)
  name.vb: IReadOnlyCollection(Of SocketTextChannel)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketTextChannel
    name: SocketTextChannel
    nameWithType: SocketTextChannel
    fullName: Discord.WebSocket.SocketTextChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketTextChannel
    name: SocketTextChannel
    nameWithType: SocketTextChannel
    fullName: Discord.WebSocket.SocketTextChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Discord.WebSocket.SocketGuild.VoiceChannels*
  commentId: Overload:Discord.WebSocket.SocketGuild.VoiceChannels
  name: VoiceChannels
  nameWithType: SocketGuild.VoiceChannels
  fullName: Discord.WebSocket.SocketGuild.VoiceChannels
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketVoiceChannel}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketVoiceChannel}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<SocketVoiceChannel>
  nameWithType: IReadOnlyCollection<SocketVoiceChannel>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.WebSocket.SocketVoiceChannel>
  nameWithType.vb: IReadOnlyCollection(Of SocketVoiceChannel)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.WebSocket.SocketVoiceChannel)
  name.vb: IReadOnlyCollection(Of SocketVoiceChannel)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketVoiceChannel
    name: SocketVoiceChannel
    nameWithType: SocketVoiceChannel
    fullName: Discord.WebSocket.SocketVoiceChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketVoiceChannel
    name: SocketVoiceChannel
    nameWithType: SocketVoiceChannel
    fullName: Discord.WebSocket.SocketVoiceChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.CategoryChannels*
  commentId: Overload:Discord.WebSocket.SocketGuild.CategoryChannels
  name: CategoryChannels
  nameWithType: SocketGuild.CategoryChannels
  fullName: Discord.WebSocket.SocketGuild.CategoryChannels
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketCategoryChannel}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketCategoryChannel}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<SocketCategoryChannel>
  nameWithType: IReadOnlyCollection<SocketCategoryChannel>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.WebSocket.SocketCategoryChannel>
  nameWithType.vb: IReadOnlyCollection(Of SocketCategoryChannel)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.WebSocket.SocketCategoryChannel)
  name.vb: IReadOnlyCollection(Of SocketCategoryChannel)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketCategoryChannel
    name: SocketCategoryChannel
    nameWithType: SocketCategoryChannel
    fullName: Discord.WebSocket.SocketCategoryChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketCategoryChannel
    name: SocketCategoryChannel
    nameWithType: SocketCategoryChannel
    fullName: Discord.WebSocket.SocketCategoryChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.CurrentUser*
  commentId: Overload:Discord.WebSocket.SocketGuild.CurrentUser
  name: CurrentUser
  nameWithType: SocketGuild.CurrentUser
  fullName: Discord.WebSocket.SocketGuild.CurrentUser
- uid: Discord.WebSocket.SocketGuild.EveryoneRole*
  commentId: Overload:Discord.WebSocket.SocketGuild.EveryoneRole
  name: EveryoneRole
  nameWithType: SocketGuild.EveryoneRole
  fullName: Discord.WebSocket.SocketGuild.EveryoneRole
- uid: Discord.WebSocket.SocketRole
  commentId: T:Discord.WebSocket.SocketRole
  parent: Discord.WebSocket
  name: SocketRole
  nameWithType: SocketRole
  fullName: Discord.WebSocket.SocketRole
- uid: Discord.WebSocket.SocketGuild.Channels*
  commentId: Overload:Discord.WebSocket.SocketGuild.Channels
  name: Channels
  nameWithType: SocketGuild.Channels
  fullName: Discord.WebSocket.SocketGuild.Channels
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketGuildChannel}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketGuildChannel}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<SocketGuildChannel>
  nameWithType: IReadOnlyCollection<SocketGuildChannel>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.WebSocket.SocketGuildChannel>
  nameWithType.vb: IReadOnlyCollection(Of SocketGuildChannel)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.WebSocket.SocketGuildChannel)
  name.vb: IReadOnlyCollection(Of SocketGuildChannel)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketGuildChannel
    name: SocketGuildChannel
    nameWithType: SocketGuildChannel
    fullName: Discord.WebSocket.SocketGuildChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketGuildChannel
    name: SocketGuildChannel
    nameWithType: SocketGuildChannel
    fullName: Discord.WebSocket.SocketGuildChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Emotes*
  commentId: Overload:Discord.WebSocket.SocketGuild.Emotes
  name: Emotes
  nameWithType: SocketGuild.Emotes
  fullName: Discord.WebSocket.SocketGuild.Emotes
- uid: Discord.IGuild.Emotes
  commentId: P:Discord.IGuild.Emotes
  parent: Discord.IGuild
  name: Emotes
  nameWithType: IGuild.Emotes
  fullName: Discord.IGuild.Emotes
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.GuildEmote}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.GuildEmote}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<GuildEmote>
  nameWithType: IReadOnlyCollection<GuildEmote>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.GuildEmote>
  nameWithType.vb: IReadOnlyCollection(Of GuildEmote)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.GuildEmote)
  name.vb: IReadOnlyCollection(Of GuildEmote)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildEmote
    name: GuildEmote
    nameWithType: GuildEmote
    fullName: Discord.GuildEmote
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildEmote
    name: GuildEmote
    nameWithType: GuildEmote
    fullName: Discord.GuildEmote
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Features*
  commentId: Overload:Discord.WebSocket.SocketGuild.Features
  name: Features
  nameWithType: SocketGuild.Features
  fullName: Discord.WebSocket.SocketGuild.Features
- uid: Discord.IGuild.Features
  commentId: P:Discord.IGuild.Features
  parent: Discord.IGuild
  name: Features
  nameWithType: IGuild.Features
  fullName: Discord.IGuild.Features
- uid: System.Collections.Generic.IReadOnlyCollection{System.String}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<String>
  nameWithType: IReadOnlyCollection<String>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.String>
  nameWithType.vb: IReadOnlyCollection(Of String)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of System.String)
  name.vb: IReadOnlyCollection(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.MemberCount
  commentId: P:Discord.WebSocket.SocketGuild.MemberCount
  isExternal: true
- uid: Discord.WebSocket.DiscordSocketConfig.AlwaysDownloadUsers
  commentId: P:Discord.WebSocket.DiscordSocketConfig.AlwaysDownloadUsers
  isExternal: true
- uid: Discord.WebSocket.SocketGuild.DownloadUsersAsync
  commentId: M:Discord.WebSocket.SocketGuild.DownloadUsersAsync
  isExternal: true
- uid: Discord.WebSocket.SocketGuild.Users*
  commentId: Overload:Discord.WebSocket.SocketGuild.Users
  name: Users
  nameWithType: SocketGuild.Users
  fullName: Discord.WebSocket.SocketGuild.Users
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketGuildUser}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketGuildUser}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<SocketGuildUser>
  nameWithType: IReadOnlyCollection<SocketGuildUser>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.WebSocket.SocketGuildUser>
  nameWithType.vb: IReadOnlyCollection(Of SocketGuildUser)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.WebSocket.SocketGuildUser)
  name.vb: IReadOnlyCollection(Of SocketGuildUser)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketGuildUser
    name: SocketGuildUser
    nameWithType: SocketGuildUser
    fullName: Discord.WebSocket.SocketGuildUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketGuildUser
    name: SocketGuildUser
    nameWithType: SocketGuildUser
    fullName: Discord.WebSocket.SocketGuildUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Roles*
  commentId: Overload:Discord.WebSocket.SocketGuild.Roles
  name: Roles
  nameWithType: SocketGuild.Roles
  fullName: Discord.WebSocket.SocketGuild.Roles
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketRole}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketRole}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<SocketRole>
  nameWithType: IReadOnlyCollection<SocketRole>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.WebSocket.SocketRole>
  nameWithType.vb: IReadOnlyCollection(Of SocketRole)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.WebSocket.SocketRole)
  name.vb: IReadOnlyCollection(Of SocketRole)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketRole
    name: SocketRole
    nameWithType: SocketRole
    fullName: Discord.WebSocket.SocketRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketRole
    name: SocketRole
    nameWithType: SocketRole
    fullName: Discord.WebSocket.SocketRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.DeleteAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.DeleteAsync
  name: DeleteAsync
  nameWithType: SocketGuild.DeleteAsync
  fullName: Discord.WebSocket.SocketGuild.DeleteAsync
- uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  commentId: M:Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  parent: Discord.IDeletable
  name: DeleteAsync(RequestOptions)
  nameWithType: IDeletable.DeleteAsync(RequestOptions)
  fullName: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: IDeletable.DeleteAsync
    fullName: Discord.IDeletable.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IDeletable.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: IDeletable.DeleteAsync
    fullName: Discord.IDeletable.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: Discord.WebSocket.SocketGuild.ModifyAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.ModifyAsync
  name: ModifyAsync
  nameWithType: SocketGuild.ModifyAsync
  fullName: Discord.WebSocket.SocketGuild.ModifyAsync
- uid: Discord.IGuild.ModifyAsync(System.Action{Discord.GuildProperties},Discord.RequestOptions)
  commentId: M:Discord.IGuild.ModifyAsync(System.Action{Discord.GuildProperties},Discord.RequestOptions)
  parent: Discord.IGuild
  isExternal: true
  name: ModifyAsync(Action<GuildProperties>, RequestOptions)
  nameWithType: IGuild.ModifyAsync(Action<GuildProperties>, RequestOptions)
  fullName: Discord.IGuild.ModifyAsync(System.Action<Discord.GuildProperties>, Discord.RequestOptions)
  nameWithType.vb: IGuild.ModifyAsync(Action(Of GuildProperties), RequestOptions)
  fullName.vb: Discord.IGuild.ModifyAsync(System.Action(Of Discord.GuildProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of GuildProperties), RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.ModifyAsync(System.Action{Discord.GuildProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: IGuild.ModifyAsync
    fullName: Discord.IGuild.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildProperties
    name: GuildProperties
    nameWithType: GuildProperties
    fullName: Discord.GuildProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.ModifyAsync(System.Action{Discord.GuildProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: IGuild.ModifyAsync
    fullName: Discord.IGuild.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildProperties
    name: GuildProperties
    nameWithType: GuildProperties
    fullName: Discord.GuildProperties
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{Discord.GuildProperties}
  commentId: T:System.Action{Discord.GuildProperties}
  parent: System
  definition: System.Action`1
  name: Action<GuildProperties>
  nameWithType: Action<GuildProperties>
  fullName: System.Action<Discord.GuildProperties>
  nameWithType.vb: Action(Of GuildProperties)
  fullName.vb: System.Action(Of Discord.GuildProperties)
  name.vb: Action(Of GuildProperties)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildProperties
    name: GuildProperties
    nameWithType: GuildProperties
    fullName: Discord.GuildProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildProperties
    name: GuildProperties
    nameWithType: GuildProperties
    fullName: Discord.GuildProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.ModifyEmbedAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.ModifyEmbedAsync
  name: ModifyEmbedAsync
  nameWithType: SocketGuild.ModifyEmbedAsync
  fullName: Discord.WebSocket.SocketGuild.ModifyEmbedAsync
- uid: Discord.IGuild.ModifyEmbedAsync(System.Action{Discord.GuildEmbedProperties},Discord.RequestOptions)
  commentId: M:Discord.IGuild.ModifyEmbedAsync(System.Action{Discord.GuildEmbedProperties},Discord.RequestOptions)
  parent: Discord.IGuild
  isExternal: true
  name: ModifyEmbedAsync(Action<GuildEmbedProperties>, RequestOptions)
  nameWithType: IGuild.ModifyEmbedAsync(Action<GuildEmbedProperties>, RequestOptions)
  fullName: Discord.IGuild.ModifyEmbedAsync(System.Action<Discord.GuildEmbedProperties>, Discord.RequestOptions)
  nameWithType.vb: IGuild.ModifyEmbedAsync(Action(Of GuildEmbedProperties), RequestOptions)
  fullName.vb: Discord.IGuild.ModifyEmbedAsync(System.Action(Of Discord.GuildEmbedProperties), Discord.RequestOptions)
  name.vb: ModifyEmbedAsync(Action(Of GuildEmbedProperties), RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.ModifyEmbedAsync(System.Action{Discord.GuildEmbedProperties},Discord.RequestOptions)
    name: ModifyEmbedAsync
    nameWithType: IGuild.ModifyEmbedAsync
    fullName: Discord.IGuild.ModifyEmbedAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildEmbedProperties
    name: GuildEmbedProperties
    nameWithType: GuildEmbedProperties
    fullName: Discord.GuildEmbedProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.ModifyEmbedAsync(System.Action{Discord.GuildEmbedProperties},Discord.RequestOptions)
    name: ModifyEmbedAsync
    nameWithType: IGuild.ModifyEmbedAsync
    fullName: Discord.IGuild.ModifyEmbedAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildEmbedProperties
    name: GuildEmbedProperties
    nameWithType: GuildEmbedProperties
    fullName: Discord.GuildEmbedProperties
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{Discord.GuildEmbedProperties}
  commentId: T:System.Action{Discord.GuildEmbedProperties}
  parent: System
  definition: System.Action`1
  name: Action<GuildEmbedProperties>
  nameWithType: Action<GuildEmbedProperties>
  fullName: System.Action<Discord.GuildEmbedProperties>
  nameWithType.vb: Action(Of GuildEmbedProperties)
  fullName.vb: System.Action(Of Discord.GuildEmbedProperties)
  name.vb: Action(Of GuildEmbedProperties)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildEmbedProperties
    name: GuildEmbedProperties
    nameWithType: GuildEmbedProperties
    fullName: Discord.GuildEmbedProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildEmbedProperties
    name: GuildEmbedProperties
    nameWithType: GuildEmbedProperties
    fullName: Discord.GuildEmbedProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.ReorderChannelsAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.ReorderChannelsAsync
  name: ReorderChannelsAsync
  nameWithType: SocketGuild.ReorderChannelsAsync
  fullName: Discord.WebSocket.SocketGuild.ReorderChannelsAsync
- uid: Discord.IGuild.ReorderChannelsAsync(System.Collections.Generic.IEnumerable{Discord.ReorderChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.IGuild.ReorderChannelsAsync(System.Collections.Generic.IEnumerable{Discord.ReorderChannelProperties},Discord.RequestOptions)
  parent: Discord.IGuild
  isExternal: true
  name: ReorderChannelsAsync(IEnumerable<ReorderChannelProperties>, RequestOptions)
  nameWithType: IGuild.ReorderChannelsAsync(IEnumerable<ReorderChannelProperties>, RequestOptions)
  fullName: Discord.IGuild.ReorderChannelsAsync(System.Collections.Generic.IEnumerable<Discord.ReorderChannelProperties>, Discord.RequestOptions)
  nameWithType.vb: IGuild.ReorderChannelsAsync(IEnumerable(Of ReorderChannelProperties), RequestOptions)
  fullName.vb: Discord.IGuild.ReorderChannelsAsync(System.Collections.Generic.IEnumerable(Of Discord.ReorderChannelProperties), Discord.RequestOptions)
  name.vb: ReorderChannelsAsync(IEnumerable(Of ReorderChannelProperties), RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.ReorderChannelsAsync(System.Collections.Generic.IEnumerable{Discord.ReorderChannelProperties},Discord.RequestOptions)
    name: ReorderChannelsAsync
    nameWithType: IGuild.ReorderChannelsAsync
    fullName: Discord.IGuild.ReorderChannelsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ReorderChannelProperties
    name: ReorderChannelProperties
    nameWithType: ReorderChannelProperties
    fullName: Discord.ReorderChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.ReorderChannelsAsync(System.Collections.Generic.IEnumerable{Discord.ReorderChannelProperties},Discord.RequestOptions)
    name: ReorderChannelsAsync
    nameWithType: IGuild.ReorderChannelsAsync
    fullName: Discord.IGuild.ReorderChannelsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ReorderChannelProperties
    name: ReorderChannelProperties
    nameWithType: ReorderChannelProperties
    fullName: Discord.ReorderChannelProperties
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Discord.ReorderChannelProperties}
  commentId: T:System.Collections.Generic.IEnumerable{Discord.ReorderChannelProperties}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ReorderChannelProperties>
  nameWithType: IEnumerable<ReorderChannelProperties>
  fullName: System.Collections.Generic.IEnumerable<Discord.ReorderChannelProperties>
  nameWithType.vb: IEnumerable(Of ReorderChannelProperties)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Discord.ReorderChannelProperties)
  name.vb: IEnumerable(Of ReorderChannelProperties)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ReorderChannelProperties
    name: ReorderChannelProperties
    nameWithType: ReorderChannelProperties
    fullName: Discord.ReorderChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ReorderChannelProperties
    name: ReorderChannelProperties
    nameWithType: ReorderChannelProperties
    fullName: Discord.ReorderChannelProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.ReorderRolesAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.ReorderRolesAsync
  name: ReorderRolesAsync
  nameWithType: SocketGuild.ReorderRolesAsync
  fullName: Discord.WebSocket.SocketGuild.ReorderRolesAsync
- uid: Discord.IGuild.ReorderRolesAsync(System.Collections.Generic.IEnumerable{Discord.ReorderRoleProperties},Discord.RequestOptions)
  commentId: M:Discord.IGuild.ReorderRolesAsync(System.Collections.Generic.IEnumerable{Discord.ReorderRoleProperties},Discord.RequestOptions)
  parent: Discord.IGuild
  isExternal: true
  name: ReorderRolesAsync(IEnumerable<ReorderRoleProperties>, RequestOptions)
  nameWithType: IGuild.ReorderRolesAsync(IEnumerable<ReorderRoleProperties>, RequestOptions)
  fullName: Discord.IGuild.ReorderRolesAsync(System.Collections.Generic.IEnumerable<Discord.ReorderRoleProperties>, Discord.RequestOptions)
  nameWithType.vb: IGuild.ReorderRolesAsync(IEnumerable(Of ReorderRoleProperties), RequestOptions)
  fullName.vb: Discord.IGuild.ReorderRolesAsync(System.Collections.Generic.IEnumerable(Of Discord.ReorderRoleProperties), Discord.RequestOptions)
  name.vb: ReorderRolesAsync(IEnumerable(Of ReorderRoleProperties), RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.ReorderRolesAsync(System.Collections.Generic.IEnumerable{Discord.ReorderRoleProperties},Discord.RequestOptions)
    name: ReorderRolesAsync
    nameWithType: IGuild.ReorderRolesAsync
    fullName: Discord.IGuild.ReorderRolesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ReorderRoleProperties
    name: ReorderRoleProperties
    nameWithType: ReorderRoleProperties
    fullName: Discord.ReorderRoleProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.ReorderRolesAsync(System.Collections.Generic.IEnumerable{Discord.ReorderRoleProperties},Discord.RequestOptions)
    name: ReorderRolesAsync
    nameWithType: IGuild.ReorderRolesAsync
    fullName: Discord.IGuild.ReorderRolesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ReorderRoleProperties
    name: ReorderRoleProperties
    nameWithType: ReorderRoleProperties
    fullName: Discord.ReorderRoleProperties
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Discord.ReorderRoleProperties}
  commentId: T:System.Collections.Generic.IEnumerable{Discord.ReorderRoleProperties}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ReorderRoleProperties>
  nameWithType: IEnumerable<ReorderRoleProperties>
  fullName: System.Collections.Generic.IEnumerable<Discord.ReorderRoleProperties>
  nameWithType.vb: IEnumerable(Of ReorderRoleProperties)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Discord.ReorderRoleProperties)
  name.vb: IEnumerable(Of ReorderRoleProperties)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ReorderRoleProperties
    name: ReorderRoleProperties
    nameWithType: ReorderRoleProperties
    fullName: Discord.ReorderRoleProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ReorderRoleProperties
    name: ReorderRoleProperties
    nameWithType: ReorderRoleProperties
    fullName: Discord.ReorderRoleProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.LeaveAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.LeaveAsync
  name: LeaveAsync
  nameWithType: SocketGuild.LeaveAsync
  fullName: Discord.WebSocket.SocketGuild.LeaveAsync
- uid: Discord.IGuild.LeaveAsync(Discord.RequestOptions)
  commentId: M:Discord.IGuild.LeaveAsync(Discord.RequestOptions)
  parent: Discord.IGuild
  name: LeaveAsync(RequestOptions)
  nameWithType: IGuild.LeaveAsync(RequestOptions)
  fullName: Discord.IGuild.LeaveAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.LeaveAsync(Discord.RequestOptions)
    name: LeaveAsync
    nameWithType: IGuild.LeaveAsync
    fullName: Discord.IGuild.LeaveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.LeaveAsync(Discord.RequestOptions)
    name: LeaveAsync
    nameWithType: IGuild.LeaveAsync
    fullName: Discord.IGuild.LeaveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.GetBansAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetBansAsync
  name: GetBansAsync
  nameWithType: SocketGuild.GetBansAsync
  fullName: Discord.WebSocket.SocketGuild.GetBansAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestBan}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestBan}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<RestBan>>
  nameWithType: Task<IReadOnlyCollection<RestBan>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.Rest.RestBan>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestBan))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.Rest.RestBan))
  name.vb: Task(Of IReadOnlyCollection(Of RestBan))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestBan
    name: RestBan
    nameWithType: RestBan
    fullName: Discord.Rest.RestBan
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestBan
    name: RestBan
    nameWithType: RestBan
    fullName: Discord.Rest.RestBan
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.GetBanAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetBanAsync
  name: GetBanAsync
  nameWithType: SocketGuild.GetBanAsync
  fullName: Discord.WebSocket.SocketGuild.GetBanAsync
- uid: Discord.IUser
  commentId: T:Discord.IUser
  parent: Discord
  name: IUser
  nameWithType: IUser
  fullName: Discord.IUser
- uid: System.Threading.Tasks.Task{Discord.Rest.RestBan}
  commentId: T:System.Threading.Tasks.Task{Discord.Rest.RestBan}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RestBan>
  nameWithType: Task<RestBan>
  fullName: System.Threading.Tasks.Task<Discord.Rest.RestBan>
  nameWithType.vb: Task(Of RestBan)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.Rest.RestBan)
  name.vb: Task(Of RestBan)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestBan
    name: RestBan
    nameWithType: RestBan
    fullName: Discord.Rest.RestBan
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestBan
    name: RestBan
    nameWithType: RestBan
    fullName: Discord.Rest.RestBan
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.AddBanAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.AddBanAsync
  name: AddBanAsync
  nameWithType: SocketGuild.AddBanAsync
  fullName: Discord.WebSocket.SocketGuild.AddBanAsync
- uid: Discord.IGuild.AddBanAsync(Discord.IUser,System.Int32,System.String,Discord.RequestOptions)
  commentId: M:Discord.IGuild.AddBanAsync(Discord.IUser,System.Int32,System.String,Discord.RequestOptions)
  parent: Discord.IGuild
  isExternal: true
  name: AddBanAsync(IUser, Int32, String, RequestOptions)
  nameWithType: IGuild.AddBanAsync(IUser, Int32, String, RequestOptions)
  fullName: Discord.IGuild.AddBanAsync(Discord.IUser, System.Int32, System.String, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.AddBanAsync(Discord.IUser,System.Int32,System.String,Discord.RequestOptions)
    name: AddBanAsync
    nameWithType: IGuild.AddBanAsync
    fullName: Discord.IGuild.AddBanAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.AddBanAsync(Discord.IUser,System.Int32,System.String,Discord.RequestOptions)
    name: AddBanAsync
    nameWithType: IGuild.AddBanAsync
    fullName: Discord.IGuild.AddBanAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: Discord.IGuild.AddBanAsync(System.UInt64,System.Int32,System.String,Discord.RequestOptions)
  commentId: M:Discord.IGuild.AddBanAsync(System.UInt64,System.Int32,System.String,Discord.RequestOptions)
  parent: Discord.IGuild
  isExternal: true
  name: AddBanAsync(UInt64, Int32, String, RequestOptions)
  nameWithType: IGuild.AddBanAsync(UInt64, Int32, String, RequestOptions)
  fullName: Discord.IGuild.AddBanAsync(System.UInt64, System.Int32, System.String, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.AddBanAsync(System.UInt64,System.Int32,System.String,Discord.RequestOptions)
    name: AddBanAsync
    nameWithType: IGuild.AddBanAsync
    fullName: Discord.IGuild.AddBanAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.AddBanAsync(System.UInt64,System.Int32,System.String,Discord.RequestOptions)
    name: AddBanAsync
    nameWithType: IGuild.AddBanAsync
    fullName: Discord.IGuild.AddBanAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.RemoveBanAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.RemoveBanAsync
  name: RemoveBanAsync
  nameWithType: SocketGuild.RemoveBanAsync
  fullName: Discord.WebSocket.SocketGuild.RemoveBanAsync
- uid: Discord.IGuild.RemoveBanAsync(Discord.IUser,Discord.RequestOptions)
  commentId: M:Discord.IGuild.RemoveBanAsync(Discord.IUser,Discord.RequestOptions)
  parent: Discord.IGuild
  name: RemoveBanAsync(IUser, RequestOptions)
  nameWithType: IGuild.RemoveBanAsync(IUser, RequestOptions)
  fullName: Discord.IGuild.RemoveBanAsync(Discord.IUser, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.RemoveBanAsync(Discord.IUser,Discord.RequestOptions)
    name: RemoveBanAsync
    nameWithType: IGuild.RemoveBanAsync
    fullName: Discord.IGuild.RemoveBanAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.RemoveBanAsync(Discord.IUser,Discord.RequestOptions)
    name: RemoveBanAsync
    nameWithType: IGuild.RemoveBanAsync
    fullName: Discord.IGuild.RemoveBanAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.RemoveBanAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.IGuild.RemoveBanAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.IGuild
  isExternal: true
  name: RemoveBanAsync(UInt64, RequestOptions)
  nameWithType: IGuild.RemoveBanAsync(UInt64, RequestOptions)
  fullName: Discord.IGuild.RemoveBanAsync(System.UInt64, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.RemoveBanAsync(System.UInt64,Discord.RequestOptions)
    name: RemoveBanAsync
    nameWithType: IGuild.RemoveBanAsync
    fullName: Discord.IGuild.RemoveBanAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.RemoveBanAsync(System.UInt64,Discord.RequestOptions)
    name: RemoveBanAsync
    nameWithType: IGuild.RemoveBanAsync
    fullName: Discord.IGuild.RemoveBanAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.GetChannel*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetChannel
  name: GetChannel
  nameWithType: SocketGuild.GetChannel
  fullName: Discord.WebSocket.SocketGuild.GetChannel
- uid: Discord.WebSocket.SocketGuild.GetTextChannel*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetTextChannel
  name: GetTextChannel
  nameWithType: SocketGuild.GetTextChannel
  fullName: Discord.WebSocket.SocketGuild.GetTextChannel
- uid: Discord.WebSocket.SocketGuild.GetVoiceChannel*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetVoiceChannel
  name: GetVoiceChannel
  nameWithType: SocketGuild.GetVoiceChannel
  fullName: Discord.WebSocket.SocketGuild.GetVoiceChannel
- uid: Discord.WebSocket.SocketGuild.GetCategoryChannel*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetCategoryChannel
  name: GetCategoryChannel
  nameWithType: SocketGuild.GetCategoryChannel
  fullName: Discord.WebSocket.SocketGuild.GetCategoryChannel
- uid: Discord.WebSocket.SocketCategoryChannel
  commentId: T:Discord.WebSocket.SocketCategoryChannel
  parent: Discord.WebSocket
  name: SocketCategoryChannel
  nameWithType: SocketCategoryChannel
  fullName: Discord.WebSocket.SocketCategoryChannel
- uid: Discord.WebSocket.SocketGuild.CreateTextChannelAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.CreateTextChannelAsync
  name: CreateTextChannelAsync
  nameWithType: SocketGuild.CreateTextChannelAsync
  fullName: Discord.WebSocket.SocketGuild.CreateTextChannelAsync
- uid: System.Action{Discord.TextChannelProperties}
  commentId: T:System.Action{Discord.TextChannelProperties}
  parent: System
  definition: System.Action`1
  name: Action<TextChannelProperties>
  nameWithType: Action<TextChannelProperties>
  fullName: System.Action<Discord.TextChannelProperties>
  nameWithType.vb: Action(Of TextChannelProperties)
  fullName.vb: System.Action(Of Discord.TextChannelProperties)
  name.vb: Action(Of TextChannelProperties)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.TextChannelProperties
    name: TextChannelProperties
    nameWithType: TextChannelProperties
    fullName: Discord.TextChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.TextChannelProperties
    name: TextChannelProperties
    nameWithType: TextChannelProperties
    fullName: Discord.TextChannelProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.Rest.RestTextChannel}
  commentId: T:System.Threading.Tasks.Task{Discord.Rest.RestTextChannel}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RestTextChannel>
  nameWithType: Task<RestTextChannel>
  fullName: System.Threading.Tasks.Task<Discord.Rest.RestTextChannel>
  nameWithType.vb: Task(Of RestTextChannel)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.Rest.RestTextChannel)
  name.vb: Task(Of RestTextChannel)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestTextChannel
    name: RestTextChannel
    nameWithType: RestTextChannel
    fullName: Discord.Rest.RestTextChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestTextChannel
    name: RestTextChannel
    nameWithType: RestTextChannel
    fullName: Discord.Rest.RestTextChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.CreateVoiceChannelAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.CreateVoiceChannelAsync
  name: CreateVoiceChannelAsync
  nameWithType: SocketGuild.CreateVoiceChannelAsync
  fullName: Discord.WebSocket.SocketGuild.CreateVoiceChannelAsync
- uid: System.Action{Discord.VoiceChannelProperties}
  commentId: T:System.Action{Discord.VoiceChannelProperties}
  parent: System
  definition: System.Action`1
  name: Action<VoiceChannelProperties>
  nameWithType: Action<VoiceChannelProperties>
  fullName: System.Action<Discord.VoiceChannelProperties>
  nameWithType.vb: Action(Of VoiceChannelProperties)
  fullName.vb: System.Action(Of Discord.VoiceChannelProperties)
  name.vb: Action(Of VoiceChannelProperties)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.VoiceChannelProperties
    name: VoiceChannelProperties
    nameWithType: VoiceChannelProperties
    fullName: Discord.VoiceChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.VoiceChannelProperties
    name: VoiceChannelProperties
    nameWithType: VoiceChannelProperties
    fullName: Discord.VoiceChannelProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.Rest.RestVoiceChannel}
  commentId: T:System.Threading.Tasks.Task{Discord.Rest.RestVoiceChannel}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RestVoiceChannel>
  nameWithType: Task<RestVoiceChannel>
  fullName: System.Threading.Tasks.Task<Discord.Rest.RestVoiceChannel>
  nameWithType.vb: Task(Of RestVoiceChannel)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.Rest.RestVoiceChannel)
  name.vb: Task(Of RestVoiceChannel)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestVoiceChannel
    name: RestVoiceChannel
    nameWithType: RestVoiceChannel
    fullName: Discord.Rest.RestVoiceChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestVoiceChannel
    name: RestVoiceChannel
    nameWithType: RestVoiceChannel
    fullName: Discord.Rest.RestVoiceChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.CreateCategoryChannelAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.CreateCategoryChannelAsync
  name: CreateCategoryChannelAsync
  nameWithType: SocketGuild.CreateCategoryChannelAsync
  fullName: Discord.WebSocket.SocketGuild.CreateCategoryChannelAsync
- uid: System.Action{Discord.GuildChannelProperties}
  commentId: T:System.Action{Discord.GuildChannelProperties}
  parent: System
  definition: System.Action`1
  name: Action<GuildChannelProperties>
  nameWithType: Action<GuildChannelProperties>
  fullName: System.Action<Discord.GuildChannelProperties>
  nameWithType.vb: Action(Of GuildChannelProperties)
  fullName.vb: System.Action(Of Discord.GuildChannelProperties)
  name.vb: Action(Of GuildChannelProperties)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildChannelProperties
    name: GuildChannelProperties
    nameWithType: GuildChannelProperties
    fullName: Discord.GuildChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildChannelProperties
    name: GuildChannelProperties
    nameWithType: GuildChannelProperties
    fullName: Discord.GuildChannelProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.Rest.RestCategoryChannel}
  commentId: T:System.Threading.Tasks.Task{Discord.Rest.RestCategoryChannel}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RestCategoryChannel>
  nameWithType: Task<RestCategoryChannel>
  fullName: System.Threading.Tasks.Task<Discord.Rest.RestCategoryChannel>
  nameWithType.vb: Task(Of RestCategoryChannel)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.Rest.RestCategoryChannel)
  name.vb: Task(Of RestCategoryChannel)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestCategoryChannel
    name: RestCategoryChannel
    nameWithType: RestCategoryChannel
    fullName: Discord.Rest.RestCategoryChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestCategoryChannel
    name: RestCategoryChannel
    nameWithType: RestCategoryChannel
    fullName: Discord.Rest.RestCategoryChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.GetVoiceRegionsAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetVoiceRegionsAsync
  name: GetVoiceRegionsAsync
  nameWithType: SocketGuild.GetVoiceRegionsAsync
  fullName: Discord.WebSocket.SocketGuild.GetVoiceRegionsAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestVoiceRegion}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestVoiceRegion}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<RestVoiceRegion>>
  nameWithType: Task<IReadOnlyCollection<RestVoiceRegion>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.Rest.RestVoiceRegion>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestVoiceRegion))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.Rest.RestVoiceRegion))
  name.vb: Task(Of IReadOnlyCollection(Of RestVoiceRegion))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestVoiceRegion
    name: RestVoiceRegion
    nameWithType: RestVoiceRegion
    fullName: Discord.Rest.RestVoiceRegion
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestVoiceRegion
    name: RestVoiceRegion
    nameWithType: RestVoiceRegion
    fullName: Discord.Rest.RestVoiceRegion
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.GetIntegrationsAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetIntegrationsAsync
  name: GetIntegrationsAsync
  nameWithType: SocketGuild.GetIntegrationsAsync
  fullName: Discord.WebSocket.SocketGuild.GetIntegrationsAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestGuildIntegration}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestGuildIntegration}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<RestGuildIntegration>>
  nameWithType: Task<IReadOnlyCollection<RestGuildIntegration>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.Rest.RestGuildIntegration>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestGuildIntegration))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.Rest.RestGuildIntegration))
  name.vb: Task(Of IReadOnlyCollection(Of RestGuildIntegration))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestGuildIntegration
    name: RestGuildIntegration
    nameWithType: RestGuildIntegration
    fullName: Discord.Rest.RestGuildIntegration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestGuildIntegration
    name: RestGuildIntegration
    nameWithType: RestGuildIntegration
    fullName: Discord.Rest.RestGuildIntegration
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.CreateIntegrationAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.CreateIntegrationAsync
  name: CreateIntegrationAsync
  nameWithType: SocketGuild.CreateIntegrationAsync
  fullName: Discord.WebSocket.SocketGuild.CreateIntegrationAsync
- uid: System.Threading.Tasks.Task{Discord.Rest.RestGuildIntegration}
  commentId: T:System.Threading.Tasks.Task{Discord.Rest.RestGuildIntegration}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RestGuildIntegration>
  nameWithType: Task<RestGuildIntegration>
  fullName: System.Threading.Tasks.Task<Discord.Rest.RestGuildIntegration>
  nameWithType.vb: Task(Of RestGuildIntegration)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.Rest.RestGuildIntegration)
  name.vb: Task(Of RestGuildIntegration)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestGuildIntegration
    name: RestGuildIntegration
    nameWithType: RestGuildIntegration
    fullName: Discord.Rest.RestGuildIntegration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestGuildIntegration
    name: RestGuildIntegration
    nameWithType: RestGuildIntegration
    fullName: Discord.Rest.RestGuildIntegration
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.GetInvitesAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetInvitesAsync
  name: GetInvitesAsync
  nameWithType: SocketGuild.GetInvitesAsync
  fullName: Discord.WebSocket.SocketGuild.GetInvitesAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestInviteMetadata}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestInviteMetadata}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<RestInviteMetadata>>
  nameWithType: Task<IReadOnlyCollection<RestInviteMetadata>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.Rest.RestInviteMetadata>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestInviteMetadata))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.Rest.RestInviteMetadata))
  name.vb: Task(Of IReadOnlyCollection(Of RestInviteMetadata))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestInviteMetadata
    name: RestInviteMetadata
    nameWithType: RestInviteMetadata
    fullName: Discord.Rest.RestInviteMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestInviteMetadata
    name: RestInviteMetadata
    nameWithType: RestInviteMetadata
    fullName: Discord.Rest.RestInviteMetadata
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.GetVanityInviteAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetVanityInviteAsync
  name: GetVanityInviteAsync
  nameWithType: SocketGuild.GetVanityInviteAsync
  fullName: Discord.WebSocket.SocketGuild.GetVanityInviteAsync
- uid: System.Threading.Tasks.Task{Discord.Rest.RestInviteMetadata}
  commentId: T:System.Threading.Tasks.Task{Discord.Rest.RestInviteMetadata}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RestInviteMetadata>
  nameWithType: Task<RestInviteMetadata>
  fullName: System.Threading.Tasks.Task<Discord.Rest.RestInviteMetadata>
  nameWithType.vb: Task(Of RestInviteMetadata)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.Rest.RestInviteMetadata)
  name.vb: Task(Of RestInviteMetadata)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestInviteMetadata
    name: RestInviteMetadata
    nameWithType: RestInviteMetadata
    fullName: Discord.Rest.RestInviteMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestInviteMetadata
    name: RestInviteMetadata
    nameWithType: RestInviteMetadata
    fullName: Discord.Rest.RestInviteMetadata
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.GetRole*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetRole
  name: GetRole
  nameWithType: SocketGuild.GetRole
  fullName: Discord.WebSocket.SocketGuild.GetRole
- uid: Discord.WebSocket.SocketGuild.CreateRoleAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.CreateRoleAsync
  name: CreateRoleAsync
  nameWithType: SocketGuild.CreateRoleAsync
  fullName: Discord.WebSocket.SocketGuild.CreateRoleAsync
- uid: System.Nullable{Discord.GuildPermissions}
  commentId: T:System.Nullable{Discord.GuildPermissions}
  parent: System
  definition: System.Nullable`1
  name: Nullable<GuildPermissions>
  nameWithType: Nullable<GuildPermissions>
  fullName: System.Nullable<Discord.GuildPermissions>
  nameWithType.vb: Nullable(Of GuildPermissions)
  fullName.vb: System.Nullable(Of Discord.GuildPermissions)
  name.vb: Nullable(Of GuildPermissions)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildPermissions
    name: GuildPermissions
    nameWithType: GuildPermissions
    fullName: Discord.GuildPermissions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildPermissions
    name: GuildPermissions
    nameWithType: GuildPermissions
    fullName: Discord.GuildPermissions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{Discord.Color}
  commentId: T:System.Nullable{Discord.Color}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Color>
  nameWithType: Nullable<Color>
  fullName: System.Nullable<Discord.Color>
  nameWithType.vb: Nullable(Of Color)
  fullName.vb: System.Nullable(Of Discord.Color)
  name.vb: Nullable(Of Color)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Color
    name: Color
    nameWithType: Color
    fullName: Discord.Color
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Color
    name: Color
    nameWithType: Color
    fullName: Discord.Color
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.Rest.RestRole}
  commentId: T:System.Threading.Tasks.Task{Discord.Rest.RestRole}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RestRole>
  nameWithType: Task<RestRole>
  fullName: System.Threading.Tasks.Task<Discord.Rest.RestRole>
  nameWithType.vb: Task(Of RestRole)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.Rest.RestRole)
  name.vb: Task(Of RestRole)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestRole
    name: RestRole
    nameWithType: RestRole
    fullName: Discord.Rest.RestRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestRole
    name: RestRole
    nameWithType: RestRole
    fullName: Discord.Rest.RestRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.AddGuildUserAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.AddGuildUserAsync
  name: AddGuildUserAsync
  nameWithType: SocketGuild.AddGuildUserAsync
  fullName: Discord.WebSocket.SocketGuild.AddGuildUserAsync
- uid: System.Action{Discord.AddGuildUserProperties}
  commentId: T:System.Action{Discord.AddGuildUserProperties}
  parent: System
  definition: System.Action`1
  name: Action<AddGuildUserProperties>
  nameWithType: Action<AddGuildUserProperties>
  fullName: System.Action<Discord.AddGuildUserProperties>
  nameWithType.vb: Action(Of AddGuildUserProperties)
  fullName.vb: System.Action(Of Discord.AddGuildUserProperties)
  name.vb: Action(Of AddGuildUserProperties)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.AddGuildUserProperties
    name: AddGuildUserProperties
    nameWithType: AddGuildUserProperties
    fullName: Discord.AddGuildUserProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.AddGuildUserProperties
    name: AddGuildUserProperties
    nameWithType: AddGuildUserProperties
    fullName: Discord.AddGuildUserProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.Rest.RestGuildUser}
  commentId: T:System.Threading.Tasks.Task{Discord.Rest.RestGuildUser}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RestGuildUser>
  nameWithType: Task<RestGuildUser>
  fullName: System.Threading.Tasks.Task<Discord.Rest.RestGuildUser>
  nameWithType.vb: Task(Of RestGuildUser)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.Rest.RestGuildUser)
  name.vb: Task(Of RestGuildUser)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestGuildUser
    name: RestGuildUser
    nameWithType: RestGuildUser
    fullName: Discord.Rest.RestGuildUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestGuildUser
    name: RestGuildUser
    nameWithType: RestGuildUser
    fullName: Discord.Rest.RestGuildUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.GetUser*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetUser
  name: GetUser
  nameWithType: SocketGuild.GetUser
  fullName: Discord.WebSocket.SocketGuild.GetUser
- uid: Discord.WebSocket.SocketGuild.PruneUsersAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.PruneUsersAsync
  name: PruneUsersAsync
  nameWithType: SocketGuild.PruneUsersAsync
  fullName: Discord.WebSocket.SocketGuild.PruneUsersAsync
- uid: Discord.IGuild.PruneUsersAsync(System.Int32,System.Boolean,Discord.RequestOptions)
  commentId: M:Discord.IGuild.PruneUsersAsync(System.Int32,System.Boolean,Discord.RequestOptions)
  parent: Discord.IGuild
  isExternal: true
  name: PruneUsersAsync(Int32, Boolean, RequestOptions)
  nameWithType: IGuild.PruneUsersAsync(Int32, Boolean, RequestOptions)
  fullName: Discord.IGuild.PruneUsersAsync(System.Int32, System.Boolean, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.PruneUsersAsync(System.Int32,System.Boolean,Discord.RequestOptions)
    name: PruneUsersAsync
    nameWithType: IGuild.PruneUsersAsync
    fullName: Discord.IGuild.PruneUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.PruneUsersAsync(System.Int32,System.Boolean,Discord.RequestOptions)
    name: PruneUsersAsync
    nameWithType: IGuild.PruneUsersAsync
    fullName: Discord.IGuild.PruneUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.DownloadUsersAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.DownloadUsersAsync
  name: DownloadUsersAsync
  nameWithType: SocketGuild.DownloadUsersAsync
  fullName: Discord.WebSocket.SocketGuild.DownloadUsersAsync
- uid: Discord.IGuild.DownloadUsersAsync
  commentId: M:Discord.IGuild.DownloadUsersAsync
  parent: Discord.IGuild
  name: DownloadUsersAsync()
  nameWithType: IGuild.DownloadUsersAsync()
  fullName: Discord.IGuild.DownloadUsersAsync()
  spec.csharp:
  - uid: Discord.IGuild.DownloadUsersAsync
    name: DownloadUsersAsync
    nameWithType: IGuild.DownloadUsersAsync
    fullName: Discord.IGuild.DownloadUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.DownloadUsersAsync
    name: DownloadUsersAsync
    nameWithType: IGuild.DownloadUsersAsync
    fullName: Discord.IGuild.DownloadUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.GetAuditLogsAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetAuditLogsAsync
  name: GetAuditLogsAsync
  nameWithType: SocketGuild.GetAuditLogsAsync
  fullName: Discord.WebSocket.SocketGuild.GetAuditLogsAsync
- uid: System.Nullable{Discord.ActionType}
  commentId: T:System.Nullable{Discord.ActionType}
  parent: System
  definition: System.Nullable`1
  name: Nullable<ActionType>
  nameWithType: Nullable<ActionType>
  fullName: System.Nullable<Discord.ActionType>
  nameWithType.vb: Nullable(Of ActionType)
  fullName.vb: System.Nullable(Of Discord.ActionType)
  name.vb: Nullable(Of ActionType)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: Discord.ActionType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: Discord.ActionType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestAuditLogEntry}}
  commentId: T:System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestAuditLogEntry}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IAsyncEnumerable`1
  name: IAsyncEnumerable<IReadOnlyCollection<RestAuditLogEntry>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<RestAuditLogEntry>>
  fullName: System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyCollection<Discord.Rest.RestAuditLogEntry>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of RestAuditLogEntry))
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.Rest.RestAuditLogEntry))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of RestAuditLogEntry))
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestAuditLogEntry
    name: RestAuditLogEntry
    nameWithType: RestAuditLogEntry
    fullName: Discord.Rest.RestAuditLogEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestAuditLogEntry
    name: RestAuditLogEntry
    nameWithType: RestAuditLogEntry
    fullName: Discord.Rest.RestAuditLogEntry
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IAsyncEnumerable`1
  commentId: T:System.Collections.Generic.IAsyncEnumerable`1
  isExternal: true
  name: IAsyncEnumerable<T>
  nameWithType: IAsyncEnumerable<T>
  fullName: System.Collections.Generic.IAsyncEnumerable<T>
  nameWithType.vb: IAsyncEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of T)
  name.vb: IAsyncEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.GetWebhookAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetWebhookAsync
  name: GetWebhookAsync
  nameWithType: SocketGuild.GetWebhookAsync
  fullName: Discord.WebSocket.SocketGuild.GetWebhookAsync
- uid: System.Threading.Tasks.Task{Discord.Rest.RestWebhook}
  commentId: T:System.Threading.Tasks.Task{Discord.Rest.RestWebhook}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RestWebhook>
  nameWithType: Task<RestWebhook>
  fullName: System.Threading.Tasks.Task<Discord.Rest.RestWebhook>
  nameWithType.vb: Task(Of RestWebhook)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.Rest.RestWebhook)
  name.vb: Task(Of RestWebhook)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestWebhook
    name: RestWebhook
    nameWithType: RestWebhook
    fullName: Discord.Rest.RestWebhook
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestWebhook
    name: RestWebhook
    nameWithType: RestWebhook
    fullName: Discord.Rest.RestWebhook
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.GetWebhooksAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetWebhooksAsync
  name: GetWebhooksAsync
  nameWithType: SocketGuild.GetWebhooksAsync
  fullName: Discord.WebSocket.SocketGuild.GetWebhooksAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestWebhook}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestWebhook}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<RestWebhook>>
  nameWithType: Task<IReadOnlyCollection<RestWebhook>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.Rest.RestWebhook>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestWebhook))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.Rest.RestWebhook))
  name.vb: Task(Of IReadOnlyCollection(Of RestWebhook))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestWebhook
    name: RestWebhook
    nameWithType: RestWebhook
    fullName: Discord.Rest.RestWebhook
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestWebhook
    name: RestWebhook
    nameWithType: RestWebhook
    fullName: Discord.Rest.RestWebhook
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.GetEmoteAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetEmoteAsync
  name: GetEmoteAsync
  nameWithType: SocketGuild.GetEmoteAsync
  fullName: Discord.WebSocket.SocketGuild.GetEmoteAsync
- uid: Discord.IGuild.GetEmoteAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetEmoteAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.IGuild
  isExternal: true
  name: GetEmoteAsync(UInt64, RequestOptions)
  nameWithType: IGuild.GetEmoteAsync(UInt64, RequestOptions)
  fullName: Discord.IGuild.GetEmoteAsync(System.UInt64, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.GetEmoteAsync(System.UInt64,Discord.RequestOptions)
    name: GetEmoteAsync
    nameWithType: IGuild.GetEmoteAsync
    fullName: Discord.IGuild.GetEmoteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.GetEmoteAsync(System.UInt64,Discord.RequestOptions)
    name: GetEmoteAsync
    nameWithType: IGuild.GetEmoteAsync
    fullName: Discord.IGuild.GetEmoteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.GuildEmote}
  commentId: T:System.Threading.Tasks.Task{Discord.GuildEmote}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<GuildEmote>
  nameWithType: Task<GuildEmote>
  fullName: System.Threading.Tasks.Task<Discord.GuildEmote>
  nameWithType.vb: Task(Of GuildEmote)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.GuildEmote)
  name.vb: Task(Of GuildEmote)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildEmote
    name: GuildEmote
    nameWithType: GuildEmote
    fullName: Discord.GuildEmote
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildEmote
    name: GuildEmote
    nameWithType: GuildEmote
    fullName: Discord.GuildEmote
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.CreateEmoteAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.CreateEmoteAsync
  name: CreateEmoteAsync
  nameWithType: SocketGuild.CreateEmoteAsync
  fullName: Discord.WebSocket.SocketGuild.CreateEmoteAsync
- uid: Discord.IGuild.CreateEmoteAsync(System.String,Discord.Image,Discord.Optional{System.Collections.Generic.IEnumerable{Discord.IRole}},Discord.RequestOptions)
  commentId: M:Discord.IGuild.CreateEmoteAsync(System.String,Discord.Image,Discord.Optional{System.Collections.Generic.IEnumerable{Discord.IRole}},Discord.RequestOptions)
  parent: Discord.IGuild
  isExternal: true
  name: CreateEmoteAsync(String, Image, Optional<IEnumerable<IRole>>, RequestOptions)
  nameWithType: IGuild.CreateEmoteAsync(String, Image, Optional<IEnumerable<IRole>>, RequestOptions)
  fullName: Discord.IGuild.CreateEmoteAsync(System.String, Discord.Image, Discord.Optional<System.Collections.Generic.IEnumerable<Discord.IRole>>, Discord.RequestOptions)
  nameWithType.vb: IGuild.CreateEmoteAsync(String, Image, Optional(Of IEnumerable(Of IRole)), RequestOptions)
  fullName.vb: Discord.IGuild.CreateEmoteAsync(System.String, Discord.Image, Discord.Optional(Of System.Collections.Generic.IEnumerable(Of Discord.IRole)), Discord.RequestOptions)
  name.vb: CreateEmoteAsync(String, Image, Optional(Of IEnumerable(Of IRole)), RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.CreateEmoteAsync(System.String,Discord.Image,Discord.Optional{System.Collections.Generic.IEnumerable{Discord.IRole}},Discord.RequestOptions)
    name: CreateEmoteAsync
    nameWithType: IGuild.CreateEmoteAsync
    fullName: Discord.IGuild.CreateEmoteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Image
    name: Image
    nameWithType: Image
    fullName: Discord.Image
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.CreateEmoteAsync(System.String,Discord.Image,Discord.Optional{System.Collections.Generic.IEnumerable{Discord.IRole}},Discord.RequestOptions)
    name: CreateEmoteAsync
    nameWithType: IGuild.CreateEmoteAsync
    fullName: Discord.IGuild.CreateEmoteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Image
    name: Image
    nameWithType: Image
    fullName: Discord.Image
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Image
  commentId: T:Discord.Image
  parent: Discord
  name: Image
  nameWithType: Image
  fullName: Discord.Image
- uid: Discord.Optional{System.Collections.Generic.IEnumerable{Discord.IRole}}
  commentId: T:Discord.Optional{System.Collections.Generic.IEnumerable{Discord.IRole}}
  parent: Discord
  definition: Discord.Optional`1
  name: Optional<IEnumerable<IRole>>
  nameWithType: Optional<IEnumerable<IRole>>
  fullName: Discord.Optional<System.Collections.Generic.IEnumerable<Discord.IRole>>
  nameWithType.vb: Optional(Of IEnumerable(Of IRole))
  fullName.vb: Discord.Optional(Of System.Collections.Generic.IEnumerable(Of Discord.IRole))
  name.vb: Optional(Of IEnumerable(Of IRole))
  spec.csharp:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Optional`1
  commentId: T:Discord.Optional`1
  parent: Discord
  name: Optional<T>
  nameWithType: Optional<T>
  fullName: Discord.Optional<T>
  nameWithType.vb: Optional(Of T)
  fullName.vb: Discord.Optional(Of T)
  name.vb: Optional(Of T)
  spec.csharp:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.ModifyEmoteAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.ModifyEmoteAsync
  name: ModifyEmoteAsync
  nameWithType: SocketGuild.ModifyEmoteAsync
  fullName: Discord.WebSocket.SocketGuild.ModifyEmoteAsync
- uid: Discord.IGuild.ModifyEmoteAsync(Discord.GuildEmote,System.Action{Discord.EmoteProperties},Discord.RequestOptions)
  commentId: M:Discord.IGuild.ModifyEmoteAsync(Discord.GuildEmote,System.Action{Discord.EmoteProperties},Discord.RequestOptions)
  parent: Discord.IGuild
  isExternal: true
  name: ModifyEmoteAsync(GuildEmote, Action<EmoteProperties>, RequestOptions)
  nameWithType: IGuild.ModifyEmoteAsync(GuildEmote, Action<EmoteProperties>, RequestOptions)
  fullName: Discord.IGuild.ModifyEmoteAsync(Discord.GuildEmote, System.Action<Discord.EmoteProperties>, Discord.RequestOptions)
  nameWithType.vb: IGuild.ModifyEmoteAsync(GuildEmote, Action(Of EmoteProperties), RequestOptions)
  fullName.vb: Discord.IGuild.ModifyEmoteAsync(Discord.GuildEmote, System.Action(Of Discord.EmoteProperties), Discord.RequestOptions)
  name.vb: ModifyEmoteAsync(GuildEmote, Action(Of EmoteProperties), RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.ModifyEmoteAsync(Discord.GuildEmote,System.Action{Discord.EmoteProperties},Discord.RequestOptions)
    name: ModifyEmoteAsync
    nameWithType: IGuild.ModifyEmoteAsync
    fullName: Discord.IGuild.ModifyEmoteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.GuildEmote
    name: GuildEmote
    nameWithType: GuildEmote
    fullName: Discord.GuildEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.EmoteProperties
    name: EmoteProperties
    nameWithType: EmoteProperties
    fullName: Discord.EmoteProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.ModifyEmoteAsync(Discord.GuildEmote,System.Action{Discord.EmoteProperties},Discord.RequestOptions)
    name: ModifyEmoteAsync
    nameWithType: IGuild.ModifyEmoteAsync
    fullName: Discord.IGuild.ModifyEmoteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.GuildEmote
    name: GuildEmote
    nameWithType: GuildEmote
    fullName: Discord.GuildEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.EmoteProperties
    name: EmoteProperties
    nameWithType: EmoteProperties
    fullName: Discord.EmoteProperties
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.GuildEmote
  commentId: T:Discord.GuildEmote
  parent: Discord
  name: GuildEmote
  nameWithType: GuildEmote
  fullName: Discord.GuildEmote
- uid: System.Action{Discord.EmoteProperties}
  commentId: T:System.Action{Discord.EmoteProperties}
  parent: System
  definition: System.Action`1
  name: Action<EmoteProperties>
  nameWithType: Action<EmoteProperties>
  fullName: System.Action<Discord.EmoteProperties>
  nameWithType.vb: Action(Of EmoteProperties)
  fullName.vb: System.Action(Of Discord.EmoteProperties)
  name.vb: Action(Of EmoteProperties)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.EmoteProperties
    name: EmoteProperties
    nameWithType: EmoteProperties
    fullName: Discord.EmoteProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.EmoteProperties
    name: EmoteProperties
    nameWithType: EmoteProperties
    fullName: Discord.EmoteProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.DeleteEmoteAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.DeleteEmoteAsync
  name: DeleteEmoteAsync
  nameWithType: SocketGuild.DeleteEmoteAsync
  fullName: Discord.WebSocket.SocketGuild.DeleteEmoteAsync
- uid: Discord.IGuild.DeleteEmoteAsync(Discord.GuildEmote,Discord.RequestOptions)
  commentId: M:Discord.IGuild.DeleteEmoteAsync(Discord.GuildEmote,Discord.RequestOptions)
  parent: Discord.IGuild
  name: DeleteEmoteAsync(GuildEmote, RequestOptions)
  nameWithType: IGuild.DeleteEmoteAsync(GuildEmote, RequestOptions)
  fullName: Discord.IGuild.DeleteEmoteAsync(Discord.GuildEmote, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.DeleteEmoteAsync(Discord.GuildEmote,Discord.RequestOptions)
    name: DeleteEmoteAsync
    nameWithType: IGuild.DeleteEmoteAsync
    fullName: Discord.IGuild.DeleteEmoteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.GuildEmote
    name: GuildEmote
    nameWithType: GuildEmote
    fullName: Discord.GuildEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.DeleteEmoteAsync(Discord.GuildEmote,Discord.RequestOptions)
    name: DeleteEmoteAsync
    nameWithType: IGuild.DeleteEmoteAsync
    fullName: Discord.IGuild.DeleteEmoteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.GuildEmote
    name: GuildEmote
    nameWithType: GuildEmote
    fullName: Discord.GuildEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Name
  commentId: P:Discord.WebSocket.SocketGuild.Name
  isExternal: true
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.ToString*
  commentId: Overload:Discord.WebSocket.SocketGuild.ToString
  name: ToString
  nameWithType: SocketGuild.ToString
  fullName: Discord.WebSocket.SocketGuild.ToString
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#AFKChannelId*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#AFKChannelId
  name: IGuild.AFKChannelId
  nameWithType: SocketGuild.IGuild.AFKChannelId
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.AFKChannelId
  nameWithType.vb: SocketGuild.Discord.IGuild.AFKChannelId
  name.vb: Discord.IGuild.AFKChannelId
- uid: Discord.IGuild.AFKChannelId
  commentId: P:Discord.IGuild.AFKChannelId
  parent: Discord.IGuild
  name: AFKChannelId
  nameWithType: IGuild.AFKChannelId
  fullName: Discord.IGuild.AFKChannelId
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#AudioClient*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#AudioClient
  name: IGuild.AudioClient
  nameWithType: SocketGuild.IGuild.AudioClient
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.AudioClient
  nameWithType.vb: SocketGuild.Discord.IGuild.AudioClient
  name.vb: Discord.IGuild.AudioClient
- uid: Discord.IGuild.AudioClient
  commentId: P:Discord.IGuild.AudioClient
  parent: Discord.IGuild
  name: AudioClient
  nameWithType: IGuild.AudioClient
  fullName: Discord.IGuild.AudioClient
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#Available*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#Available
  name: IGuild.Available
  nameWithType: SocketGuild.IGuild.Available
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.Available
  nameWithType.vb: SocketGuild.Discord.IGuild.Available
  name.vb: Discord.IGuild.Available
- uid: Discord.IGuild.Available
  commentId: P:Discord.IGuild.Available
  parent: Discord.IGuild
  name: Available
  nameWithType: IGuild.Available
  fullName: Discord.IGuild.Available
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#DefaultChannelId*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#DefaultChannelId
  name: IGuild.DefaultChannelId
  nameWithType: SocketGuild.IGuild.DefaultChannelId
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.DefaultChannelId
  nameWithType.vb: SocketGuild.Discord.IGuild.DefaultChannelId
  name.vb: Discord.IGuild.DefaultChannelId
- uid: Discord.IGuild.DefaultChannelId
  commentId: P:Discord.IGuild.DefaultChannelId
  parent: Discord.IGuild
  name: DefaultChannelId
  nameWithType: IGuild.DefaultChannelId
  fullName: Discord.IGuild.DefaultChannelId
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#EmbedChannelId*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#EmbedChannelId
  name: IGuild.EmbedChannelId
  nameWithType: SocketGuild.IGuild.EmbedChannelId
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.EmbedChannelId
  nameWithType.vb: SocketGuild.Discord.IGuild.EmbedChannelId
  name.vb: Discord.IGuild.EmbedChannelId
- uid: Discord.IGuild.EmbedChannelId
  commentId: P:Discord.IGuild.EmbedChannelId
  parent: Discord.IGuild
  name: EmbedChannelId
  nameWithType: IGuild.EmbedChannelId
  fullName: Discord.IGuild.EmbedChannelId
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#SystemChannelId*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#SystemChannelId
  name: IGuild.SystemChannelId
  nameWithType: SocketGuild.IGuild.SystemChannelId
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.SystemChannelId
  nameWithType.vb: SocketGuild.Discord.IGuild.SystemChannelId
  name.vb: Discord.IGuild.SystemChannelId
- uid: Discord.IGuild.SystemChannelId
  commentId: P:Discord.IGuild.SystemChannelId
  parent: Discord.IGuild
  name: SystemChannelId
  nameWithType: IGuild.SystemChannelId
  fullName: Discord.IGuild.SystemChannelId
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#EveryoneRole*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#EveryoneRole
  name: IGuild.EveryoneRole
  nameWithType: SocketGuild.IGuild.EveryoneRole
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.EveryoneRole
  nameWithType.vb: SocketGuild.Discord.IGuild.EveryoneRole
  name.vb: Discord.IGuild.EveryoneRole
- uid: Discord.IGuild.EveryoneRole
  commentId: P:Discord.IGuild.EveryoneRole
  parent: Discord.IGuild
  name: EveryoneRole
  nameWithType: IGuild.EveryoneRole
  fullName: Discord.IGuild.EveryoneRole
- uid: Discord.IRole
  commentId: T:Discord.IRole
  parent: Discord
  name: IRole
  nameWithType: IRole
  fullName: Discord.IRole
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#Roles*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#Roles
  name: IGuild.Roles
  nameWithType: SocketGuild.IGuild.Roles
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.Roles
  nameWithType.vb: SocketGuild.Discord.IGuild.Roles
  name.vb: Discord.IGuild.Roles
- uid: Discord.IGuild.Roles
  commentId: P:Discord.IGuild.Roles
  parent: Discord.IGuild
  name: Roles
  nameWithType: IGuild.Roles
  fullName: Discord.IGuild.Roles
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.IRole}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.IRole}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<IRole>
  nameWithType: IReadOnlyCollection<IRole>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.IRole>
  nameWithType.vb: IReadOnlyCollection(Of IRole)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.IRole)
  name.vb: IReadOnlyCollection(Of IRole)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetBansAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#GetBansAsync
  name: IGuild.GetBansAsync
  nameWithType: SocketGuild.IGuild.GetBansAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetBansAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.GetBansAsync
  name.vb: Discord.IGuild.GetBansAsync
- uid: Discord.IGuild.GetBansAsync(Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetBansAsync(Discord.RequestOptions)
  parent: Discord.IGuild
  name: GetBansAsync(RequestOptions)
  nameWithType: IGuild.GetBansAsync(RequestOptions)
  fullName: Discord.IGuild.GetBansAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.GetBansAsync(Discord.RequestOptions)
    name: GetBansAsync
    nameWithType: IGuild.GetBansAsync
    fullName: Discord.IGuild.GetBansAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.GetBansAsync(Discord.RequestOptions)
    name: GetBansAsync
    nameWithType: IGuild.GetBansAsync
    fullName: Discord.IGuild.GetBansAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IBan}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IBan}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<IBan>>
  nameWithType: Task<IReadOnlyCollection<IBan>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.IBan>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IBan))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IBan))
  name.vb: Task(Of IReadOnlyCollection(Of IBan))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IBan
    name: IBan
    nameWithType: IBan
    fullName: Discord.IBan
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IBan
    name: IBan
    nameWithType: IBan
    fullName: Discord.IBan
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetBanAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#GetBanAsync
  name: IGuild.GetBanAsync
  nameWithType: SocketGuild.IGuild.GetBanAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetBanAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.GetBanAsync
  name.vb: Discord.IGuild.GetBanAsync
- uid: Discord.IGuild.GetBanAsync(Discord.IUser,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetBanAsync(Discord.IUser,Discord.RequestOptions)
  parent: Discord.IGuild
  name: GetBanAsync(IUser, RequestOptions)
  nameWithType: IGuild.GetBanAsync(IUser, RequestOptions)
  fullName: Discord.IGuild.GetBanAsync(Discord.IUser, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.GetBanAsync(Discord.IUser,Discord.RequestOptions)
    name: GetBanAsync
    nameWithType: IGuild.GetBanAsync
    fullName: Discord.IGuild.GetBanAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.GetBanAsync(Discord.IUser,Discord.RequestOptions)
    name: GetBanAsync
    nameWithType: IGuild.GetBanAsync
    fullName: Discord.IGuild.GetBanAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.IBan}
  commentId: T:System.Threading.Tasks.Task{Discord.IBan}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IBan>
  nameWithType: Task<IBan>
  fullName: System.Threading.Tasks.Task<Discord.IBan>
  nameWithType.vb: Task(Of IBan)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IBan)
  name.vb: Task(Of IBan)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IBan
    name: IBan
    nameWithType: IBan
    fullName: Discord.IBan
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IBan
    name: IBan
    nameWithType: IBan
    fullName: Discord.IBan
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild.GetBanAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetBanAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.IGuild
  isExternal: true
  name: GetBanAsync(UInt64, RequestOptions)
  nameWithType: IGuild.GetBanAsync(UInt64, RequestOptions)
  fullName: Discord.IGuild.GetBanAsync(System.UInt64, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.GetBanAsync(System.UInt64,Discord.RequestOptions)
    name: GetBanAsync
    nameWithType: IGuild.GetBanAsync
    fullName: Discord.IGuild.GetBanAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.GetBanAsync(System.UInt64,Discord.RequestOptions)
    name: GetBanAsync
    nameWithType: IGuild.GetBanAsync
    fullName: Discord.IGuild.GetBanAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetChannelsAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#GetChannelsAsync
  name: IGuild.GetChannelsAsync
  nameWithType: SocketGuild.IGuild.GetChannelsAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetChannelsAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.GetChannelsAsync
  name.vb: Discord.IGuild.GetChannelsAsync
- uid: Discord.IGuild.GetChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  name: GetChannelsAsync(CacheMode, RequestOptions)
  nameWithType: IGuild.GetChannelsAsync(CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetChannelsAsync(Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.GetChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetChannelsAsync
    nameWithType: IGuild.GetChannelsAsync
    fullName: Discord.IGuild.GetChannelsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.GetChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetChannelsAsync
    nameWithType: IGuild.GetChannelsAsync
    fullName: Discord.IGuild.GetChannelsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.CacheMode
  commentId: T:Discord.CacheMode
  parent: Discord
  name: CacheMode
  nameWithType: CacheMode
  fullName: Discord.CacheMode
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IGuildChannel}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IGuildChannel}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<IGuildChannel>>
  nameWithType: Task<IReadOnlyCollection<IGuildChannel>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.IGuildChannel>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IGuildChannel))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IGuildChannel))
  name.vb: Task(Of IReadOnlyCollection(Of IGuildChannel))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IGuildChannel
    name: IGuildChannel
    nameWithType: IGuildChannel
    fullName: Discord.IGuildChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IGuildChannel
    name: IGuildChannel
    nameWithType: IGuildChannel
    fullName: Discord.IGuildChannel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetChannelAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#GetChannelAsync
  name: IGuild.GetChannelAsync
  nameWithType: SocketGuild.IGuild.GetChannelAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetChannelAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.GetChannelAsync
  name.vb: Discord.IGuild.GetChannelAsync
- uid: Discord.IGuild.GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  isExternal: true
  name: GetChannelAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: IGuild.GetChannelAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetChannelAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetChannelAsync
    nameWithType: IGuild.GetChannelAsync
    fullName: Discord.IGuild.GetChannelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetChannelAsync
    nameWithType: IGuild.GetChannelAsync
    fullName: Discord.IGuild.GetChannelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.IGuildChannel}
  commentId: T:System.Threading.Tasks.Task{Discord.IGuildChannel}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IGuildChannel>
  nameWithType: Task<IGuildChannel>
  fullName: System.Threading.Tasks.Task<Discord.IGuildChannel>
  nameWithType.vb: Task(Of IGuildChannel)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IGuildChannel)
  name.vb: Task(Of IGuildChannel)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IGuildChannel
    name: IGuildChannel
    nameWithType: IGuildChannel
    fullName: Discord.IGuildChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IGuildChannel
    name: IGuildChannel
    nameWithType: IGuildChannel
    fullName: Discord.IGuildChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetTextChannelsAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#GetTextChannelsAsync
  name: IGuild.GetTextChannelsAsync
  nameWithType: SocketGuild.IGuild.GetTextChannelsAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetTextChannelsAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.GetTextChannelsAsync
  name.vb: Discord.IGuild.GetTextChannelsAsync
- uid: Discord.IGuild.GetTextChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetTextChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  name: GetTextChannelsAsync(CacheMode, RequestOptions)
  nameWithType: IGuild.GetTextChannelsAsync(CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetTextChannelsAsync(Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.GetTextChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetTextChannelsAsync
    nameWithType: IGuild.GetTextChannelsAsync
    fullName: Discord.IGuild.GetTextChannelsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.GetTextChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetTextChannelsAsync
    nameWithType: IGuild.GetTextChannelsAsync
    fullName: Discord.IGuild.GetTextChannelsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.ITextChannel}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.ITextChannel}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<ITextChannel>>
  nameWithType: Task<IReadOnlyCollection<ITextChannel>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.ITextChannel>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of ITextChannel))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.ITextChannel))
  name.vb: Task(Of IReadOnlyCollection(Of ITextChannel))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ITextChannel
    name: ITextChannel
    nameWithType: ITextChannel
    fullName: Discord.ITextChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ITextChannel
    name: ITextChannel
    nameWithType: ITextChannel
    fullName: Discord.ITextChannel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetTextChannelAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#GetTextChannelAsync
  name: IGuild.GetTextChannelAsync
  nameWithType: SocketGuild.IGuild.GetTextChannelAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetTextChannelAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.GetTextChannelAsync
  name.vb: Discord.IGuild.GetTextChannelAsync
- uid: Discord.IGuild.GetTextChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetTextChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  isExternal: true
  name: GetTextChannelAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: IGuild.GetTextChannelAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetTextChannelAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.GetTextChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetTextChannelAsync
    nameWithType: IGuild.GetTextChannelAsync
    fullName: Discord.IGuild.GetTextChannelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.GetTextChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetTextChannelAsync
    nameWithType: IGuild.GetTextChannelAsync
    fullName: Discord.IGuild.GetTextChannelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.ITextChannel}
  commentId: T:System.Threading.Tasks.Task{Discord.ITextChannel}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ITextChannel>
  nameWithType: Task<ITextChannel>
  fullName: System.Threading.Tasks.Task<Discord.ITextChannel>
  nameWithType.vb: Task(Of ITextChannel)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.ITextChannel)
  name.vb: Task(Of ITextChannel)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ITextChannel
    name: ITextChannel
    nameWithType: ITextChannel
    fullName: Discord.ITextChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ITextChannel
    name: ITextChannel
    nameWithType: ITextChannel
    fullName: Discord.ITextChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetVoiceChannelsAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#GetVoiceChannelsAsync
  name: IGuild.GetVoiceChannelsAsync
  nameWithType: SocketGuild.IGuild.GetVoiceChannelsAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetVoiceChannelsAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.GetVoiceChannelsAsync
  name.vb: Discord.IGuild.GetVoiceChannelsAsync
- uid: Discord.IGuild.GetVoiceChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetVoiceChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  name: GetVoiceChannelsAsync(CacheMode, RequestOptions)
  nameWithType: IGuild.GetVoiceChannelsAsync(CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetVoiceChannelsAsync(Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.GetVoiceChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetVoiceChannelsAsync
    nameWithType: IGuild.GetVoiceChannelsAsync
    fullName: Discord.IGuild.GetVoiceChannelsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.GetVoiceChannelsAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetVoiceChannelsAsync
    nameWithType: IGuild.GetVoiceChannelsAsync
    fullName: Discord.IGuild.GetVoiceChannelsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IVoiceChannel}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IVoiceChannel}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<IVoiceChannel>>
  nameWithType: Task<IReadOnlyCollection<IVoiceChannel>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.IVoiceChannel>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IVoiceChannel))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IVoiceChannel))
  name.vb: Task(Of IReadOnlyCollection(Of IVoiceChannel))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IVoiceChannel
    name: IVoiceChannel
    nameWithType: IVoiceChannel
    fullName: Discord.IVoiceChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IVoiceChannel
    name: IVoiceChannel
    nameWithType: IVoiceChannel
    fullName: Discord.IVoiceChannel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetCategoriesAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#GetCategoriesAsync
  name: IGuild.GetCategoriesAsync
  nameWithType: SocketGuild.IGuild.GetCategoriesAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetCategoriesAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.GetCategoriesAsync
  name.vb: Discord.IGuild.GetCategoriesAsync
- uid: Discord.IGuild.GetCategoriesAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetCategoriesAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  name: GetCategoriesAsync(CacheMode, RequestOptions)
  nameWithType: IGuild.GetCategoriesAsync(CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetCategoriesAsync(Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.GetCategoriesAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetCategoriesAsync
    nameWithType: IGuild.GetCategoriesAsync
    fullName: Discord.IGuild.GetCategoriesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.GetCategoriesAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetCategoriesAsync
    nameWithType: IGuild.GetCategoriesAsync
    fullName: Discord.IGuild.GetCategoriesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.ICategoryChannel}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.ICategoryChannel}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<ICategoryChannel>>
  nameWithType: Task<IReadOnlyCollection<ICategoryChannel>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.ICategoryChannel>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of ICategoryChannel))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.ICategoryChannel))
  name.vb: Task(Of IReadOnlyCollection(Of ICategoryChannel))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ICategoryChannel
    name: ICategoryChannel
    nameWithType: ICategoryChannel
    fullName: Discord.ICategoryChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ICategoryChannel
    name: ICategoryChannel
    nameWithType: ICategoryChannel
    fullName: Discord.ICategoryChannel
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetVoiceChannelAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#GetVoiceChannelAsync
  name: IGuild.GetVoiceChannelAsync
  nameWithType: SocketGuild.IGuild.GetVoiceChannelAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetVoiceChannelAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.GetVoiceChannelAsync
  name.vb: Discord.IGuild.GetVoiceChannelAsync
- uid: Discord.IGuild.GetVoiceChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetVoiceChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  isExternal: true
  name: GetVoiceChannelAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: IGuild.GetVoiceChannelAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetVoiceChannelAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.GetVoiceChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetVoiceChannelAsync
    nameWithType: IGuild.GetVoiceChannelAsync
    fullName: Discord.IGuild.GetVoiceChannelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.GetVoiceChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetVoiceChannelAsync
    nameWithType: IGuild.GetVoiceChannelAsync
    fullName: Discord.IGuild.GetVoiceChannelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.IVoiceChannel}
  commentId: T:System.Threading.Tasks.Task{Discord.IVoiceChannel}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IVoiceChannel>
  nameWithType: Task<IVoiceChannel>
  fullName: System.Threading.Tasks.Task<Discord.IVoiceChannel>
  nameWithType.vb: Task(Of IVoiceChannel)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IVoiceChannel)
  name.vb: Task(Of IVoiceChannel)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IVoiceChannel
    name: IVoiceChannel
    nameWithType: IVoiceChannel
    fullName: Discord.IVoiceChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IVoiceChannel
    name: IVoiceChannel
    nameWithType: IVoiceChannel
    fullName: Discord.IVoiceChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetAFKChannelAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#GetAFKChannelAsync
  name: IGuild.GetAFKChannelAsync
  nameWithType: SocketGuild.IGuild.GetAFKChannelAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetAFKChannelAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.GetAFKChannelAsync
  name.vb: Discord.IGuild.GetAFKChannelAsync
- uid: Discord.IGuild.GetAFKChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetAFKChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  name: GetAFKChannelAsync(CacheMode, RequestOptions)
  nameWithType: IGuild.GetAFKChannelAsync(CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetAFKChannelAsync(Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.GetAFKChannelAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetAFKChannelAsync
    nameWithType: IGuild.GetAFKChannelAsync
    fullName: Discord.IGuild.GetAFKChannelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.GetAFKChannelAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetAFKChannelAsync
    nameWithType: IGuild.GetAFKChannelAsync
    fullName: Discord.IGuild.GetAFKChannelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetDefaultChannelAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#GetDefaultChannelAsync
  name: IGuild.GetDefaultChannelAsync
  nameWithType: SocketGuild.IGuild.GetDefaultChannelAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetDefaultChannelAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.GetDefaultChannelAsync
  name.vb: Discord.IGuild.GetDefaultChannelAsync
- uid: Discord.IGuild.GetDefaultChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetDefaultChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  name: GetDefaultChannelAsync(CacheMode, RequestOptions)
  nameWithType: IGuild.GetDefaultChannelAsync(CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetDefaultChannelAsync(Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.GetDefaultChannelAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetDefaultChannelAsync
    nameWithType: IGuild.GetDefaultChannelAsync
    fullName: Discord.IGuild.GetDefaultChannelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.GetDefaultChannelAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetDefaultChannelAsync
    nameWithType: IGuild.GetDefaultChannelAsync
    fullName: Discord.IGuild.GetDefaultChannelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetEmbedChannelAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#GetEmbedChannelAsync
  name: IGuild.GetEmbedChannelAsync
  nameWithType: SocketGuild.IGuild.GetEmbedChannelAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetEmbedChannelAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.GetEmbedChannelAsync
  name.vb: Discord.IGuild.GetEmbedChannelAsync
- uid: Discord.IGuild.GetEmbedChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetEmbedChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  name: GetEmbedChannelAsync(CacheMode, RequestOptions)
  nameWithType: IGuild.GetEmbedChannelAsync(CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetEmbedChannelAsync(Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.GetEmbedChannelAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetEmbedChannelAsync
    nameWithType: IGuild.GetEmbedChannelAsync
    fullName: Discord.IGuild.GetEmbedChannelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.GetEmbedChannelAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetEmbedChannelAsync
    nameWithType: IGuild.GetEmbedChannelAsync
    fullName: Discord.IGuild.GetEmbedChannelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetSystemChannelAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#GetSystemChannelAsync
  name: IGuild.GetSystemChannelAsync
  nameWithType: SocketGuild.IGuild.GetSystemChannelAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetSystemChannelAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.GetSystemChannelAsync
  name.vb: Discord.IGuild.GetSystemChannelAsync
- uid: Discord.IGuild.GetSystemChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetSystemChannelAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  name: GetSystemChannelAsync(CacheMode, RequestOptions)
  nameWithType: IGuild.GetSystemChannelAsync(CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetSystemChannelAsync(Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.GetSystemChannelAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetSystemChannelAsync
    nameWithType: IGuild.GetSystemChannelAsync
    fullName: Discord.IGuild.GetSystemChannelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.GetSystemChannelAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetSystemChannelAsync
    nameWithType: IGuild.GetSystemChannelAsync
    fullName: Discord.IGuild.GetSystemChannelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#CreateTextChannelAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#CreateTextChannelAsync
  name: IGuild.CreateTextChannelAsync
  nameWithType: SocketGuild.IGuild.CreateTextChannelAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.CreateTextChannelAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.CreateTextChannelAsync
  name.vb: Discord.IGuild.CreateTextChannelAsync
- uid: Discord.IGuild.CreateTextChannelAsync(System.String,System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.IGuild.CreateTextChannelAsync(System.String,System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
  parent: Discord.IGuild
  isExternal: true
  name: CreateTextChannelAsync(String, Action<TextChannelProperties>, RequestOptions)
  nameWithType: IGuild.CreateTextChannelAsync(String, Action<TextChannelProperties>, RequestOptions)
  fullName: Discord.IGuild.CreateTextChannelAsync(System.String, System.Action<Discord.TextChannelProperties>, Discord.RequestOptions)
  nameWithType.vb: IGuild.CreateTextChannelAsync(String, Action(Of TextChannelProperties), RequestOptions)
  fullName.vb: Discord.IGuild.CreateTextChannelAsync(System.String, System.Action(Of Discord.TextChannelProperties), Discord.RequestOptions)
  name.vb: CreateTextChannelAsync(String, Action(Of TextChannelProperties), RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.CreateTextChannelAsync(System.String,System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
    name: CreateTextChannelAsync
    nameWithType: IGuild.CreateTextChannelAsync
    fullName: Discord.IGuild.CreateTextChannelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.TextChannelProperties
    name: TextChannelProperties
    nameWithType: TextChannelProperties
    fullName: Discord.TextChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.CreateTextChannelAsync(System.String,System.Action{Discord.TextChannelProperties},Discord.RequestOptions)
    name: CreateTextChannelAsync
    nameWithType: IGuild.CreateTextChannelAsync
    fullName: Discord.IGuild.CreateTextChannelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.TextChannelProperties
    name: TextChannelProperties
    nameWithType: TextChannelProperties
    fullName: Discord.TextChannelProperties
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#CreateVoiceChannelAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#CreateVoiceChannelAsync
  name: IGuild.CreateVoiceChannelAsync
  nameWithType: SocketGuild.IGuild.CreateVoiceChannelAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.CreateVoiceChannelAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.CreateVoiceChannelAsync
  name.vb: Discord.IGuild.CreateVoiceChannelAsync
- uid: Discord.IGuild.CreateVoiceChannelAsync(System.String,System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.IGuild.CreateVoiceChannelAsync(System.String,System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  parent: Discord.IGuild
  isExternal: true
  name: CreateVoiceChannelAsync(String, Action<VoiceChannelProperties>, RequestOptions)
  nameWithType: IGuild.CreateVoiceChannelAsync(String, Action<VoiceChannelProperties>, RequestOptions)
  fullName: Discord.IGuild.CreateVoiceChannelAsync(System.String, System.Action<Discord.VoiceChannelProperties>, Discord.RequestOptions)
  nameWithType.vb: IGuild.CreateVoiceChannelAsync(String, Action(Of VoiceChannelProperties), RequestOptions)
  fullName.vb: Discord.IGuild.CreateVoiceChannelAsync(System.String, System.Action(Of Discord.VoiceChannelProperties), Discord.RequestOptions)
  name.vb: CreateVoiceChannelAsync(String, Action(Of VoiceChannelProperties), RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.CreateVoiceChannelAsync(System.String,System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
    name: CreateVoiceChannelAsync
    nameWithType: IGuild.CreateVoiceChannelAsync
    fullName: Discord.IGuild.CreateVoiceChannelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.VoiceChannelProperties
    name: VoiceChannelProperties
    nameWithType: VoiceChannelProperties
    fullName: Discord.VoiceChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.CreateVoiceChannelAsync(System.String,System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
    name: CreateVoiceChannelAsync
    nameWithType: IGuild.CreateVoiceChannelAsync
    fullName: Discord.IGuild.CreateVoiceChannelAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.VoiceChannelProperties
    name: VoiceChannelProperties
    nameWithType: VoiceChannelProperties
    fullName: Discord.VoiceChannelProperties
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#CreateCategoryAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#CreateCategoryAsync
  name: IGuild.CreateCategoryAsync
  nameWithType: SocketGuild.IGuild.CreateCategoryAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.CreateCategoryAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.CreateCategoryAsync
  name.vb: Discord.IGuild.CreateCategoryAsync
- uid: Discord.IGuild.CreateCategoryAsync(System.String,System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.IGuild.CreateCategoryAsync(System.String,System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  parent: Discord.IGuild
  isExternal: true
  name: CreateCategoryAsync(String, Action<GuildChannelProperties>, RequestOptions)
  nameWithType: IGuild.CreateCategoryAsync(String, Action<GuildChannelProperties>, RequestOptions)
  fullName: Discord.IGuild.CreateCategoryAsync(System.String, System.Action<Discord.GuildChannelProperties>, Discord.RequestOptions)
  nameWithType.vb: IGuild.CreateCategoryAsync(String, Action(Of GuildChannelProperties), RequestOptions)
  fullName.vb: Discord.IGuild.CreateCategoryAsync(System.String, System.Action(Of Discord.GuildChannelProperties), Discord.RequestOptions)
  name.vb: CreateCategoryAsync(String, Action(Of GuildChannelProperties), RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.CreateCategoryAsync(System.String,System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
    name: CreateCategoryAsync
    nameWithType: IGuild.CreateCategoryAsync
    fullName: Discord.IGuild.CreateCategoryAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildChannelProperties
    name: GuildChannelProperties
    nameWithType: GuildChannelProperties
    fullName: Discord.GuildChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.CreateCategoryAsync(System.String,System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
    name: CreateCategoryAsync
    nameWithType: IGuild.CreateCategoryAsync
    fullName: Discord.IGuild.CreateCategoryAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildChannelProperties
    name: GuildChannelProperties
    nameWithType: GuildChannelProperties
    fullName: Discord.GuildChannelProperties
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.ICategoryChannel}
  commentId: T:System.Threading.Tasks.Task{Discord.ICategoryChannel}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ICategoryChannel>
  nameWithType: Task<ICategoryChannel>
  fullName: System.Threading.Tasks.Task<Discord.ICategoryChannel>
  nameWithType.vb: Task(Of ICategoryChannel)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.ICategoryChannel)
  name.vb: Task(Of ICategoryChannel)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ICategoryChannel
    name: ICategoryChannel
    nameWithType: ICategoryChannel
    fullName: Discord.ICategoryChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ICategoryChannel
    name: ICategoryChannel
    nameWithType: ICategoryChannel
    fullName: Discord.ICategoryChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetVoiceRegionsAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#GetVoiceRegionsAsync
  name: IGuild.GetVoiceRegionsAsync
  nameWithType: SocketGuild.IGuild.GetVoiceRegionsAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetVoiceRegionsAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.GetVoiceRegionsAsync
  name.vb: Discord.IGuild.GetVoiceRegionsAsync
- uid: Discord.IGuild.GetVoiceRegionsAsync(Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetVoiceRegionsAsync(Discord.RequestOptions)
  parent: Discord.IGuild
  name: GetVoiceRegionsAsync(RequestOptions)
  nameWithType: IGuild.GetVoiceRegionsAsync(RequestOptions)
  fullName: Discord.IGuild.GetVoiceRegionsAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.GetVoiceRegionsAsync(Discord.RequestOptions)
    name: GetVoiceRegionsAsync
    nameWithType: IGuild.GetVoiceRegionsAsync
    fullName: Discord.IGuild.GetVoiceRegionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.GetVoiceRegionsAsync(Discord.RequestOptions)
    name: GetVoiceRegionsAsync
    nameWithType: IGuild.GetVoiceRegionsAsync
    fullName: Discord.IGuild.GetVoiceRegionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IVoiceRegion}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IVoiceRegion}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<IVoiceRegion>>
  nameWithType: Task<IReadOnlyCollection<IVoiceRegion>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.IVoiceRegion>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IVoiceRegion))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IVoiceRegion))
  name.vb: Task(Of IReadOnlyCollection(Of IVoiceRegion))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IVoiceRegion
    name: IVoiceRegion
    nameWithType: IVoiceRegion
    fullName: Discord.IVoiceRegion
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IVoiceRegion
    name: IVoiceRegion
    nameWithType: IVoiceRegion
    fullName: Discord.IVoiceRegion
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetIntegrationsAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#GetIntegrationsAsync
  name: IGuild.GetIntegrationsAsync
  nameWithType: SocketGuild.IGuild.GetIntegrationsAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetIntegrationsAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.GetIntegrationsAsync
  name.vb: Discord.IGuild.GetIntegrationsAsync
- uid: Discord.IGuild.GetIntegrationsAsync(Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetIntegrationsAsync(Discord.RequestOptions)
  parent: Discord.IGuild
  name: GetIntegrationsAsync(RequestOptions)
  nameWithType: IGuild.GetIntegrationsAsync(RequestOptions)
  fullName: Discord.IGuild.GetIntegrationsAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.GetIntegrationsAsync(Discord.RequestOptions)
    name: GetIntegrationsAsync
    nameWithType: IGuild.GetIntegrationsAsync
    fullName: Discord.IGuild.GetIntegrationsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.GetIntegrationsAsync(Discord.RequestOptions)
    name: GetIntegrationsAsync
    nameWithType: IGuild.GetIntegrationsAsync
    fullName: Discord.IGuild.GetIntegrationsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IGuildIntegration}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IGuildIntegration}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<IGuildIntegration>>
  nameWithType: Task<IReadOnlyCollection<IGuildIntegration>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.IGuildIntegration>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IGuildIntegration))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IGuildIntegration))
  name.vb: Task(Of IReadOnlyCollection(Of IGuildIntegration))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IGuildIntegration
    name: IGuildIntegration
    nameWithType: IGuildIntegration
    fullName: Discord.IGuildIntegration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IGuildIntegration
    name: IGuildIntegration
    nameWithType: IGuildIntegration
    fullName: Discord.IGuildIntegration
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#CreateIntegrationAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#CreateIntegrationAsync
  name: IGuild.CreateIntegrationAsync
  nameWithType: SocketGuild.IGuild.CreateIntegrationAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.CreateIntegrationAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.CreateIntegrationAsync
  name.vb: Discord.IGuild.CreateIntegrationAsync
- uid: Discord.IGuild.CreateIntegrationAsync(System.UInt64,System.String,Discord.RequestOptions)
  commentId: M:Discord.IGuild.CreateIntegrationAsync(System.UInt64,System.String,Discord.RequestOptions)
  parent: Discord.IGuild
  isExternal: true
  name: CreateIntegrationAsync(UInt64, String, RequestOptions)
  nameWithType: IGuild.CreateIntegrationAsync(UInt64, String, RequestOptions)
  fullName: Discord.IGuild.CreateIntegrationAsync(System.UInt64, System.String, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.CreateIntegrationAsync(System.UInt64,System.String,Discord.RequestOptions)
    name: CreateIntegrationAsync
    nameWithType: IGuild.CreateIntegrationAsync
    fullName: Discord.IGuild.CreateIntegrationAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.CreateIntegrationAsync(System.UInt64,System.String,Discord.RequestOptions)
    name: CreateIntegrationAsync
    nameWithType: IGuild.CreateIntegrationAsync
    fullName: Discord.IGuild.CreateIntegrationAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.IGuildIntegration}
  commentId: T:System.Threading.Tasks.Task{Discord.IGuildIntegration}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IGuildIntegration>
  nameWithType: Task<IGuildIntegration>
  fullName: System.Threading.Tasks.Task<Discord.IGuildIntegration>
  nameWithType.vb: Task(Of IGuildIntegration)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IGuildIntegration)
  name.vb: Task(Of IGuildIntegration)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IGuildIntegration
    name: IGuildIntegration
    nameWithType: IGuildIntegration
    fullName: Discord.IGuildIntegration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IGuildIntegration
    name: IGuildIntegration
    nameWithType: IGuildIntegration
    fullName: Discord.IGuildIntegration
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetInvitesAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#GetInvitesAsync
  name: IGuild.GetInvitesAsync
  nameWithType: SocketGuild.IGuild.GetInvitesAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetInvitesAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.GetInvitesAsync
  name.vb: Discord.IGuild.GetInvitesAsync
- uid: Discord.IGuild.GetInvitesAsync(Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetInvitesAsync(Discord.RequestOptions)
  parent: Discord.IGuild
  name: GetInvitesAsync(RequestOptions)
  nameWithType: IGuild.GetInvitesAsync(RequestOptions)
  fullName: Discord.IGuild.GetInvitesAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.GetInvitesAsync(Discord.RequestOptions)
    name: GetInvitesAsync
    nameWithType: IGuild.GetInvitesAsync
    fullName: Discord.IGuild.GetInvitesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.GetInvitesAsync(Discord.RequestOptions)
    name: GetInvitesAsync
    nameWithType: IGuild.GetInvitesAsync
    fullName: Discord.IGuild.GetInvitesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IInviteMetadata}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IInviteMetadata}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<IInviteMetadata>>
  nameWithType: Task<IReadOnlyCollection<IInviteMetadata>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.IInviteMetadata>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IInviteMetadata))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IInviteMetadata))
  name.vb: Task(Of IReadOnlyCollection(Of IInviteMetadata))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IInviteMetadata
    name: IInviteMetadata
    nameWithType: IInviteMetadata
    fullName: Discord.IInviteMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IInviteMetadata
    name: IInviteMetadata
    nameWithType: IInviteMetadata
    fullName: Discord.IInviteMetadata
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetVanityInviteAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#GetVanityInviteAsync
  name: IGuild.GetVanityInviteAsync
  nameWithType: SocketGuild.IGuild.GetVanityInviteAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetVanityInviteAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.GetVanityInviteAsync
  name.vb: Discord.IGuild.GetVanityInviteAsync
- uid: Discord.IGuild.GetVanityInviteAsync(Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetVanityInviteAsync(Discord.RequestOptions)
  parent: Discord.IGuild
  name: GetVanityInviteAsync(RequestOptions)
  nameWithType: IGuild.GetVanityInviteAsync(RequestOptions)
  fullName: Discord.IGuild.GetVanityInviteAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.GetVanityInviteAsync(Discord.RequestOptions)
    name: GetVanityInviteAsync
    nameWithType: IGuild.GetVanityInviteAsync
    fullName: Discord.IGuild.GetVanityInviteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.GetVanityInviteAsync(Discord.RequestOptions)
    name: GetVanityInviteAsync
    nameWithType: IGuild.GetVanityInviteAsync
    fullName: Discord.IGuild.GetVanityInviteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.IInviteMetadata}
  commentId: T:System.Threading.Tasks.Task{Discord.IInviteMetadata}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IInviteMetadata>
  nameWithType: Task<IInviteMetadata>
  fullName: System.Threading.Tasks.Task<Discord.IInviteMetadata>
  nameWithType.vb: Task(Of IInviteMetadata)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IInviteMetadata)
  name.vb: Task(Of IInviteMetadata)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IInviteMetadata
    name: IInviteMetadata
    nameWithType: IInviteMetadata
    fullName: Discord.IInviteMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IInviteMetadata
    name: IInviteMetadata
    nameWithType: IInviteMetadata
    fullName: Discord.IInviteMetadata
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetRole*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#GetRole
  name: IGuild.GetRole
  nameWithType: SocketGuild.IGuild.GetRole
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetRole
  nameWithType.vb: SocketGuild.Discord.IGuild.GetRole
  name.vb: Discord.IGuild.GetRole
- uid: Discord.IGuild.GetRole(System.UInt64)
  commentId: M:Discord.IGuild.GetRole(System.UInt64)
  parent: Discord.IGuild
  isExternal: true
  name: GetRole(UInt64)
  nameWithType: IGuild.GetRole(UInt64)
  fullName: Discord.IGuild.GetRole(System.UInt64)
  spec.csharp:
  - uid: Discord.IGuild.GetRole(System.UInt64)
    name: GetRole
    nameWithType: IGuild.GetRole
    fullName: Discord.IGuild.GetRole
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.GetRole(System.UInt64)
    name: GetRole
    nameWithType: IGuild.GetRole
    fullName: Discord.IGuild.GetRole
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#CreateRoleAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#CreateRoleAsync
  name: IGuild.CreateRoleAsync
  nameWithType: SocketGuild.IGuild.CreateRoleAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.CreateRoleAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.CreateRoleAsync
  name.vb: Discord.IGuild.CreateRoleAsync
- uid: Discord.IGuild.CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)
  commentId: M:Discord.IGuild.CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)
  parent: Discord.IGuild
  isExternal: true
  name: CreateRoleAsync(String, Nullable<GuildPermissions>, Nullable<Color>, Boolean, RequestOptions)
  nameWithType: IGuild.CreateRoleAsync(String, Nullable<GuildPermissions>, Nullable<Color>, Boolean, RequestOptions)
  fullName: Discord.IGuild.CreateRoleAsync(System.String, System.Nullable<Discord.GuildPermissions>, System.Nullable<Discord.Color>, System.Boolean, Discord.RequestOptions)
  nameWithType.vb: IGuild.CreateRoleAsync(String, Nullable(Of GuildPermissions), Nullable(Of Color), Boolean, RequestOptions)
  fullName.vb: Discord.IGuild.CreateRoleAsync(System.String, System.Nullable(Of Discord.GuildPermissions), System.Nullable(Of Discord.Color), System.Boolean, Discord.RequestOptions)
  name.vb: CreateRoleAsync(String, Nullable(Of GuildPermissions), Nullable(Of Color), Boolean, RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)
    name: CreateRoleAsync
    nameWithType: IGuild.CreateRoleAsync
    fullName: Discord.IGuild.CreateRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildPermissions
    name: GuildPermissions
    nameWithType: GuildPermissions
    fullName: Discord.GuildPermissions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Color
    name: Color
    nameWithType: Color
    fullName: Discord.Color
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)
    name: CreateRoleAsync
    nameWithType: IGuild.CreateRoleAsync
    fullName: Discord.IGuild.CreateRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildPermissions
    name: GuildPermissions
    nameWithType: GuildPermissions
    fullName: Discord.GuildPermissions
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Color
    name: Color
    nameWithType: Color
    fullName: Discord.Color
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.IRole}
  commentId: T:System.Threading.Tasks.Task{Discord.IRole}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IRole>
  nameWithType: Task<IRole>
  fullName: System.Threading.Tasks.Task<Discord.IRole>
  nameWithType.vb: Task(Of IRole)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IRole)
  name.vb: Task(Of IRole)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetUsersAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#GetUsersAsync
  name: IGuild.GetUsersAsync
  nameWithType: SocketGuild.IGuild.GetUsersAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetUsersAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.GetUsersAsync
  name.vb: Discord.IGuild.GetUsersAsync
- uid: Discord.IGuild.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  name: GetUsersAsync(CacheMode, RequestOptions)
  nameWithType: IGuild.GetUsersAsync(CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetUsersAsync(Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetUsersAsync
    nameWithType: IGuild.GetUsersAsync
    fullName: Discord.IGuild.GetUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetUsersAsync
    nameWithType: IGuild.GetUsersAsync
    fullName: Discord.IGuild.GetUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IGuildUser}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IGuildUser}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<IGuildUser>>
  nameWithType: Task<IReadOnlyCollection<IGuildUser>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.IGuildUser>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IGuildUser))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IGuildUser))
  name.vb: Task(Of IReadOnlyCollection(Of IGuildUser))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IGuildUser
    name: IGuildUser
    nameWithType: IGuildUser
    fullName: Discord.IGuildUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IGuildUser
    name: IGuildUser
    nameWithType: IGuildUser
    fullName: Discord.IGuildUser
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#AddGuildUserAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#AddGuildUserAsync
  name: IGuild.AddGuildUserAsync
  nameWithType: SocketGuild.IGuild.AddGuildUserAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.AddGuildUserAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.AddGuildUserAsync
  name.vb: Discord.IGuild.AddGuildUserAsync
- uid: Discord.IGuild.AddGuildUserAsync(System.UInt64,System.String,System.Action{Discord.AddGuildUserProperties},Discord.RequestOptions)
  commentId: M:Discord.IGuild.AddGuildUserAsync(System.UInt64,System.String,System.Action{Discord.AddGuildUserProperties},Discord.RequestOptions)
  parent: Discord.IGuild
  isExternal: true
  name: AddGuildUserAsync(UInt64, String, Action<AddGuildUserProperties>, RequestOptions)
  nameWithType: IGuild.AddGuildUserAsync(UInt64, String, Action<AddGuildUserProperties>, RequestOptions)
  fullName: Discord.IGuild.AddGuildUserAsync(System.UInt64, System.String, System.Action<Discord.AddGuildUserProperties>, Discord.RequestOptions)
  nameWithType.vb: IGuild.AddGuildUserAsync(UInt64, String, Action(Of AddGuildUserProperties), RequestOptions)
  fullName.vb: Discord.IGuild.AddGuildUserAsync(System.UInt64, System.String, System.Action(Of Discord.AddGuildUserProperties), Discord.RequestOptions)
  name.vb: AddGuildUserAsync(UInt64, String, Action(Of AddGuildUserProperties), RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.AddGuildUserAsync(System.UInt64,System.String,System.Action{Discord.AddGuildUserProperties},Discord.RequestOptions)
    name: AddGuildUserAsync
    nameWithType: IGuild.AddGuildUserAsync
    fullName: Discord.IGuild.AddGuildUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.AddGuildUserProperties
    name: AddGuildUserProperties
    nameWithType: AddGuildUserProperties
    fullName: Discord.AddGuildUserProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.AddGuildUserAsync(System.UInt64,System.String,System.Action{Discord.AddGuildUserProperties},Discord.RequestOptions)
    name: AddGuildUserAsync
    nameWithType: IGuild.AddGuildUserAsync
    fullName: Discord.IGuild.AddGuildUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.AddGuildUserProperties
    name: AddGuildUserProperties
    nameWithType: AddGuildUserProperties
    fullName: Discord.AddGuildUserProperties
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.IGuildUser}
  commentId: T:System.Threading.Tasks.Task{Discord.IGuildUser}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IGuildUser>
  nameWithType: Task<IGuildUser>
  fullName: System.Threading.Tasks.Task<Discord.IGuildUser>
  nameWithType.vb: Task(Of IGuildUser)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IGuildUser)
  name.vb: Task(Of IGuildUser)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IGuildUser
    name: IGuildUser
    nameWithType: IGuildUser
    fullName: Discord.IGuildUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IGuildUser
    name: IGuildUser
    nameWithType: IGuildUser
    fullName: Discord.IGuildUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetUserAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#GetUserAsync
  name: IGuild.GetUserAsync
  nameWithType: SocketGuild.IGuild.GetUserAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetUserAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.GetUserAsync
  name.vb: Discord.IGuild.GetUserAsync
- uid: Discord.IGuild.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  isExternal: true
  name: GetUserAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: IGuild.GetUserAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetUserAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetUserAsync
    nameWithType: IGuild.GetUserAsync
    fullName: Discord.IGuild.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetUserAsync
    nameWithType: IGuild.GetUserAsync
    fullName: Discord.IGuild.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetCurrentUserAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#GetCurrentUserAsync
  name: IGuild.GetCurrentUserAsync
  nameWithType: SocketGuild.IGuild.GetCurrentUserAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetCurrentUserAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.GetCurrentUserAsync
  name.vb: Discord.IGuild.GetCurrentUserAsync
- uid: Discord.IGuild.GetCurrentUserAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetCurrentUserAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  name: GetCurrentUserAsync(CacheMode, RequestOptions)
  nameWithType: IGuild.GetCurrentUserAsync(CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetCurrentUserAsync(Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.GetCurrentUserAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetCurrentUserAsync
    nameWithType: IGuild.GetCurrentUserAsync
    fullName: Discord.IGuild.GetCurrentUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.GetCurrentUserAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetCurrentUserAsync
    nameWithType: IGuild.GetCurrentUserAsync
    fullName: Discord.IGuild.GetCurrentUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetOwnerAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#GetOwnerAsync
  name: IGuild.GetOwnerAsync
  nameWithType: SocketGuild.IGuild.GetOwnerAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetOwnerAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.GetOwnerAsync
  name.vb: Discord.IGuild.GetOwnerAsync
- uid: Discord.IGuild.GetOwnerAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetOwnerAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuild
  name: GetOwnerAsync(CacheMode, RequestOptions)
  nameWithType: IGuild.GetOwnerAsync(CacheMode, RequestOptions)
  fullName: Discord.IGuild.GetOwnerAsync(Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.GetOwnerAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetOwnerAsync
    nameWithType: IGuild.GetOwnerAsync
    fullName: Discord.IGuild.GetOwnerAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.GetOwnerAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetOwnerAsync
    nameWithType: IGuild.GetOwnerAsync
    fullName: Discord.IGuild.GetOwnerAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetAuditLogsAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#GetAuditLogsAsync
  name: IGuild.GetAuditLogsAsync
  nameWithType: SocketGuild.IGuild.GetAuditLogsAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetAuditLogsAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.GetAuditLogsAsync
  name.vb: Discord.IGuild.GetAuditLogsAsync
- uid: Discord.IGuild.GetAuditLogsAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{Discord.ActionType})
  commentId: M:Discord.IGuild.GetAuditLogsAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{Discord.ActionType})
  parent: Discord.IGuild
  isExternal: true
  name: GetAuditLogsAsync(Int32, CacheMode, RequestOptions, Nullable<UInt64>, Nullable<UInt64>, Nullable<ActionType>)
  nameWithType: IGuild.GetAuditLogsAsync(Int32, CacheMode, RequestOptions, Nullable<UInt64>, Nullable<UInt64>, Nullable<ActionType>)
  fullName: Discord.IGuild.GetAuditLogsAsync(System.Int32, Discord.CacheMode, Discord.RequestOptions, System.Nullable<System.UInt64>, System.Nullable<System.UInt64>, System.Nullable<Discord.ActionType>)
  nameWithType.vb: IGuild.GetAuditLogsAsync(Int32, CacheMode, RequestOptions, Nullable(Of UInt64), Nullable(Of UInt64), Nullable(Of ActionType))
  fullName.vb: Discord.IGuild.GetAuditLogsAsync(System.Int32, Discord.CacheMode, Discord.RequestOptions, System.Nullable(Of System.UInt64), System.Nullable(Of System.UInt64), System.Nullable(Of Discord.ActionType))
  name.vb: GetAuditLogsAsync(Int32, CacheMode, RequestOptions, Nullable(Of UInt64), Nullable(Of UInt64), Nullable(Of ActionType))
  spec.csharp:
  - uid: Discord.IGuild.GetAuditLogsAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{Discord.ActionType})
    name: GetAuditLogsAsync
    nameWithType: IGuild.GetAuditLogsAsync
    fullName: Discord.IGuild.GetAuditLogsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: Discord.ActionType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.GetAuditLogsAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{Discord.ActionType})
    name: GetAuditLogsAsync
    nameWithType: IGuild.GetAuditLogsAsync
    fullName: Discord.IGuild.GetAuditLogsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: Discord.ActionType
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IAuditLogEntry}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IAuditLogEntry}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<IAuditLogEntry>>
  nameWithType: Task<IReadOnlyCollection<IAuditLogEntry>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.IAuditLogEntry>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IAuditLogEntry))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IAuditLogEntry))
  name.vb: Task(Of IReadOnlyCollection(Of IAuditLogEntry))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IAuditLogEntry
    name: IAuditLogEntry
    nameWithType: IAuditLogEntry
    fullName: Discord.IAuditLogEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IAuditLogEntry
    name: IAuditLogEntry
    nameWithType: IAuditLogEntry
    fullName: Discord.IAuditLogEntry
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetWebhookAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#GetWebhookAsync
  name: IGuild.GetWebhookAsync
  nameWithType: SocketGuild.IGuild.GetWebhookAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetWebhookAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.GetWebhookAsync
  name.vb: Discord.IGuild.GetWebhookAsync
- uid: Discord.IGuild.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.IGuild
  isExternal: true
  name: GetWebhookAsync(UInt64, RequestOptions)
  nameWithType: IGuild.GetWebhookAsync(UInt64, RequestOptions)
  fullName: Discord.IGuild.GetWebhookAsync(System.UInt64, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
    name: GetWebhookAsync
    nameWithType: IGuild.GetWebhookAsync
    fullName: Discord.IGuild.GetWebhookAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
    name: GetWebhookAsync
    nameWithType: IGuild.GetWebhookAsync
    fullName: Discord.IGuild.GetWebhookAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.IWebhook}
  commentId: T:System.Threading.Tasks.Task{Discord.IWebhook}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IWebhook>
  nameWithType: Task<IWebhook>
  fullName: System.Threading.Tasks.Task<Discord.IWebhook>
  nameWithType.vb: Task(Of IWebhook)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IWebhook)
  name.vb: Task(Of IWebhook)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IWebhook
    name: IWebhook
    nameWithType: IWebhook
    fullName: Discord.IWebhook
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IWebhook
    name: IWebhook
    nameWithType: IWebhook
    fullName: Discord.IWebhook
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#GetWebhooksAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#GetWebhooksAsync
  name: IGuild.GetWebhooksAsync
  nameWithType: SocketGuild.IGuild.GetWebhooksAsync
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.GetWebhooksAsync
  nameWithType.vb: SocketGuild.Discord.IGuild.GetWebhooksAsync
  name.vb: Discord.IGuild.GetWebhooksAsync
- uid: Discord.IGuild.GetWebhooksAsync(Discord.RequestOptions)
  commentId: M:Discord.IGuild.GetWebhooksAsync(Discord.RequestOptions)
  parent: Discord.IGuild
  name: GetWebhooksAsync(RequestOptions)
  nameWithType: IGuild.GetWebhooksAsync(RequestOptions)
  fullName: Discord.IGuild.GetWebhooksAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuild.GetWebhooksAsync(Discord.RequestOptions)
    name: GetWebhooksAsync
    nameWithType: IGuild.GetWebhooksAsync
    fullName: Discord.IGuild.GetWebhooksAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuild.GetWebhooksAsync(Discord.RequestOptions)
    name: GetWebhooksAsync
    nameWithType: IGuild.GetWebhooksAsync
    fullName: Discord.IGuild.GetWebhooksAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IWebhook}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IWebhook}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<IWebhook>>
  nameWithType: Task<IReadOnlyCollection<IWebhook>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.IWebhook>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IWebhook))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IWebhook))
  name.vb: Task(Of IReadOnlyCollection(Of IWebhook))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IWebhook
    name: IWebhook
    nameWithType: IWebhook
    fullName: Discord.IWebhook
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IWebhook
    name: IWebhook
    nameWithType: IWebhook
    fullName: Discord.IWebhook
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.System#IDisposable#Dispose*
  commentId: Overload:Discord.WebSocket.SocketGuild.System#IDisposable#Dispose
  name: IDisposable.Dispose
  nameWithType: SocketGuild.IDisposable.Dispose
  fullName: Discord.WebSocket.SocketGuild.System.IDisposable.Dispose
  nameWithType.vb: SocketGuild.System.IDisposable.Dispose
  name.vb: System.IDisposable.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
