### YamlMime:ManagedReference
items:
- uid: Discord.WebSocket.SocketGuild
  commentId: T:Discord.WebSocket.SocketGuild
  id: SocketGuild
  parent: Discord.WebSocket
  children:
  - Discord.WebSocket.SocketGuild.AddBanAsync(Discord.IUser,System.Int32,System.String,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.AddBanAsync(System.UInt64,System.Int32,System.String,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.AddGuildUserAsync(System.UInt64,System.String,Action{Discord.AddGuildUserProperties},Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.AFKChannel
  - Discord.WebSocket.SocketGuild.AFKTimeout
  - Discord.WebSocket.SocketGuild.ApplicationId
  - Discord.WebSocket.SocketGuild.AudioClient
  - Discord.WebSocket.SocketGuild.BannerId
  - Discord.WebSocket.SocketGuild.BannerUrl
  - Discord.WebSocket.SocketGuild.CategoryChannels
  - Discord.WebSocket.SocketGuild.Channels
  - Discord.WebSocket.SocketGuild.CreateCategoryChannelAsync(System.String,Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.CreatedAt
  - Discord.WebSocket.SocketGuild.CreateEmoteAsync(System.String,Discord.Image,Discord.Optional{IEnumerable{Discord.IRole}},Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.CreateIntegrationAsync(System.UInt64,System.String,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.CreateTextChannelAsync(System.String,Action{Discord.TextChannelProperties},Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.CreateVoiceChannelAsync(System.String,Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.CurrentUser
  - Discord.WebSocket.SocketGuild.DefaultChannel
  - Discord.WebSocket.SocketGuild.DefaultMessageNotifications
  - Discord.WebSocket.SocketGuild.DeleteAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.DeleteEmoteAsync(Discord.GuildEmote,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Description
  - Discord.WebSocket.SocketGuild.Discord#IGuild#AudioClient
  - Discord.WebSocket.SocketGuild.Discord#IGuild#EveryoneRole
  - Discord.WebSocket.SocketGuild.DownloadedMemberCount
  - Discord.WebSocket.SocketGuild.DownloaderPromise
  - Discord.WebSocket.SocketGuild.DownloadUsersAsync
  - Discord.WebSocket.SocketGuild.EmbedChannel
  - Discord.WebSocket.SocketGuild.Emotes
  - Discord.WebSocket.SocketGuild.EveryoneRole
  - Discord.WebSocket.SocketGuild.ExplicitContentFilter
  - Discord.WebSocket.SocketGuild.Features
  - Discord.WebSocket.SocketGuild.GetAuditLogsAsync(System.Int32,Discord.RequestOptions,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{Discord.ActionType})
  - Discord.WebSocket.SocketGuild.GetBanAsync(Discord.IUser,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.GetBanAsync(System.UInt64,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.GetBansAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.GetCategoryChannel(System.UInt64)
  - Discord.WebSocket.SocketGuild.GetChannel(System.UInt64)
  - Discord.WebSocket.SocketGuild.GetEmoteAsync(System.UInt64,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.GetIntegrationsAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.GetInvitesAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.GetRole(System.UInt64)
  - Discord.WebSocket.SocketGuild.GetTextChannel(System.UInt64)
  - Discord.WebSocket.SocketGuild.GetUser(System.UInt64)
  - Discord.WebSocket.SocketGuild.GetVanityInviteAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.GetVoiceChannel(System.UInt64)
  - Discord.WebSocket.SocketGuild.GetVoiceRegionsAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.GetWebhooksAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.HasAllMembers
  - Discord.WebSocket.SocketGuild.IconId
  - Discord.WebSocket.SocketGuild.IconUrl
  - Discord.WebSocket.SocketGuild.IsConnected
  - Discord.WebSocket.SocketGuild.IsEmbeddable
  - Discord.WebSocket.SocketGuild.IsSynced
  - Discord.WebSocket.SocketGuild.LeaveAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.MemberCount
  - Discord.WebSocket.SocketGuild.MfaLevel
  - Discord.WebSocket.SocketGuild.ModifyAsync(Action{Discord.GuildProperties},Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.ModifyEmbedAsync(Action{Discord.GuildEmbedProperties},Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.ModifyEmoteAsync(Discord.GuildEmote,Action{Discord.EmoteProperties},Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Name
  - Discord.WebSocket.SocketGuild.Owner
  - Discord.WebSocket.SocketGuild.OwnerId
  - Discord.WebSocket.SocketGuild.PreferredCulture
  - Discord.WebSocket.SocketGuild.PreferredLocale
  - Discord.WebSocket.SocketGuild.PremiumSubscriptionCount
  - Discord.WebSocket.SocketGuild.PremiumTier
  - Discord.WebSocket.SocketGuild.PruneUsersAsync(System.Int32,System.Boolean,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.RemoveBanAsync(Discord.IUser,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.RemoveBanAsync(System.UInt64,Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.ReorderChannelsAsync(IEnumerable{Discord.ReorderChannelProperties},Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.ReorderRolesAsync(IEnumerable{Discord.ReorderRoleProperties},Discord.RequestOptions)
  - Discord.WebSocket.SocketGuild.Roles
  - Discord.WebSocket.SocketGuild.SplashId
  - Discord.WebSocket.SocketGuild.SplashUrl
  - Discord.WebSocket.SocketGuild.SyncPromise
  - Discord.WebSocket.SocketGuild.SystemChannel
  - Discord.WebSocket.SocketGuild.SystemChannelFlags
  - Discord.WebSocket.SocketGuild.TextChannels
  - Discord.WebSocket.SocketGuild.ToString
  - Discord.WebSocket.SocketGuild.Users
  - Discord.WebSocket.SocketGuild.VanityURLCode
  - Discord.WebSocket.SocketGuild.VerificationLevel
  - Discord.WebSocket.SocketGuild.VoiceChannels
  - Discord.WebSocket.SocketGuild.VoiceRegionId
  langs:
  - csharp
  - vb
  name: SocketGuild
  nameWithType: SocketGuild
  fullName: Discord.WebSocket.SocketGuild
  type: Class
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SocketGuild
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 27
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nRepresents a WebSocket-based guild object.\n"
  example: []
  syntax:
    content: 'public class SocketGuild : SocketEntity<ulong>, IEntity<ulong>, IGuild, IDeletable, ISnowflakeEntity, IEntity<ulong>, IDisposable'
    content.vb: >-
      Public Class SocketGuild
          Inherits SocketEntity(Of ULong)
          Implements IEntity(Of ULong), IGuild, IDeletable, ISnowflakeEntity, IEntity(Of ULong), IDisposable
  inheritance:
  - System.Object
  - Discord.WebSocket.SocketEntity{System.UInt64}
  implements:
  - Discord.IEntity{System.UInt64}
  - Discord.IGuild
  - Discord.IDeletable
  - Discord.ISnowflakeEntity
  - Discord.IEntity{System.UInt64}
  - IDisposable
  inheritedMembers:
  - Discord.WebSocket.SocketEntity{System.UInt64}.Id
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.WebSocket.SocketGuild.Name
  commentId: P:Discord.WebSocket.SocketGuild.Name
  id: Name
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: SocketGuild.Name
  fullName: Discord.WebSocket.SocketGuild.Name
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Name
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 44
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Discord.WebSocket.SocketGuild.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.AFKTimeout
  commentId: P:Discord.WebSocket.SocketGuild.AFKTimeout
  id: AFKTimeout
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: AFKTimeout
  nameWithType: SocketGuild.AFKTimeout
  fullName: Discord.WebSocket.SocketGuild.AFKTimeout
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: AFKTimeout
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 46
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public int AFKTimeout { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property AFKTimeout As Integer
  overload: Discord.WebSocket.SocketGuild.AFKTimeout*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.IsEmbeddable
  commentId: P:Discord.WebSocket.SocketGuild.IsEmbeddable
  id: IsEmbeddable
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IsEmbeddable
  nameWithType: SocketGuild.IsEmbeddable
  fullName: Discord.WebSocket.SocketGuild.IsEmbeddable
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsEmbeddable
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 48
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public bool IsEmbeddable { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsEmbeddable As Boolean
  overload: Discord.WebSocket.SocketGuild.IsEmbeddable*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.VerificationLevel
  commentId: P:Discord.WebSocket.SocketGuild.VerificationLevel
  id: VerificationLevel
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: VerificationLevel
  nameWithType: SocketGuild.VerificationLevel
  fullName: Discord.WebSocket.SocketGuild.VerificationLevel
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: VerificationLevel
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 50
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the level of requirements a user must fulfill before being allowed to post messages in this guild.\n"
  example: []
  syntax:
    content: public VerificationLevel VerificationLevel { get; }
    parameters: []
    return:
      type: Discord.VerificationLevel
      description: "\nThe level of requirements.\n"
    content.vb: Public ReadOnly Property VerificationLevel As VerificationLevel
  overload: Discord.WebSocket.SocketGuild.VerificationLevel*
  implements:
  - Discord.IGuild.VerificationLevel
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.MfaLevel
  commentId: P:Discord.WebSocket.SocketGuild.MfaLevel
  id: MfaLevel
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: MfaLevel
  nameWithType: SocketGuild.MfaLevel
  fullName: Discord.WebSocket.SocketGuild.MfaLevel
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: MfaLevel
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 52
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the level of Multi-Factor Authentication requirements a user must fulfill before being allowed to\nperform administrative actions in this guild.\n"
  example: []
  syntax:
    content: public MfaLevel MfaLevel { get; }
    parameters: []
    return:
      type: Discord.MfaLevel
      description: "\nThe level of MFA requirement.\n"
    content.vb: Public ReadOnly Property MfaLevel As MfaLevel
  overload: Discord.WebSocket.SocketGuild.MfaLevel*
  implements:
  - Discord.IGuild.MfaLevel
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.DefaultMessageNotifications
  commentId: P:Discord.WebSocket.SocketGuild.DefaultMessageNotifications
  id: DefaultMessageNotifications
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: DefaultMessageNotifications
  nameWithType: SocketGuild.DefaultMessageNotifications
  fullName: Discord.WebSocket.SocketGuild.DefaultMessageNotifications
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DefaultMessageNotifications
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 54
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the default message notifications for users who haven&apos;t explicitly set their notification settings.\n"
  example: []
  syntax:
    content: public DefaultMessageNotifications DefaultMessageNotifications { get; }
    parameters: []
    return:
      type: Discord.DefaultMessageNotifications
    content.vb: Public ReadOnly Property DefaultMessageNotifications As DefaultMessageNotifications
  overload: Discord.WebSocket.SocketGuild.DefaultMessageNotifications*
  implements:
  - Discord.IGuild.DefaultMessageNotifications
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.ExplicitContentFilter
  commentId: P:Discord.WebSocket.SocketGuild.ExplicitContentFilter
  id: ExplicitContentFilter
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: ExplicitContentFilter
  nameWithType: SocketGuild.ExplicitContentFilter
  fullName: Discord.WebSocket.SocketGuild.ExplicitContentFilter
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ExplicitContentFilter
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 56
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the level of content filtering applied to user&apos;s content in a Guild.\n"
  example: []
  syntax:
    content: public ExplicitContentFilterLevel ExplicitContentFilter { get; }
    parameters: []
    return:
      type: Discord.ExplicitContentFilterLevel
      description: "\nThe level of explicit content filtering.\n"
    content.vb: Public ReadOnly Property ExplicitContentFilter As ExplicitContentFilterLevel
  overload: Discord.WebSocket.SocketGuild.ExplicitContentFilter*
  implements:
  - Discord.IGuild.ExplicitContentFilter
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.MemberCount
  commentId: P:Discord.WebSocket.SocketGuild.MemberCount
  id: MemberCount
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: MemberCount
  nameWithType: SocketGuild.MemberCount
  fullName: Discord.WebSocket.SocketGuild.MemberCount
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: MemberCount
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 74
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the number of members.\n"
  remarks: "\nThis property retrieves the number of members returned by Discord.\n<div class=\"TIP\"><h5>tip</h5><p>\n<p>\n    Due to how this property is returned by Discord instead of relying on the WebSocket cache, the\n    number here is the most accurate in terms of counting the number of users within this guild.\n</p>\n<p>\n    Use this instead of enumerating the count of the\n<xref href=\"Discord.WebSocket.SocketGuild.Users\" data-throw-if-not-resolved=\"false\"></xref> collection, as you may see discrepancy\nbetween that and this property.\n</p>\n</p></div>\n"
  example: []
  syntax:
    content: public int MemberCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property MemberCount As Integer
  overload: Discord.WebSocket.SocketGuild.MemberCount*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.DownloadedMemberCount
  commentId: P:Discord.WebSocket.SocketGuild.DownloadedMemberCount
  id: DownloadedMemberCount
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: DownloadedMemberCount
  nameWithType: SocketGuild.DownloadedMemberCount
  fullName: Discord.WebSocket.SocketGuild.DownloadedMemberCount
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DownloadedMemberCount
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 76
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Gets the number of members downloaded to the local guild cache. '
  example: []
  syntax:
    content: public int DownloadedMemberCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property DownloadedMemberCount As Integer
  overload: Discord.WebSocket.SocketGuild.DownloadedMemberCount*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.IsConnected
  commentId: P:Discord.WebSocket.SocketGuild.IsConnected
  id: IsConnected
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IsConnected
  nameWithType: SocketGuild.IsConnected
  fullName: Discord.WebSocket.SocketGuild.IsConnected
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsConnected
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 79
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Indicates whether the client is connected to this guild. '
  example: []
  syntax:
    content: public bool IsConnected { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsConnected As Boolean
  overload: Discord.WebSocket.SocketGuild.IsConnected*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.ApplicationId
  commentId: P:Discord.WebSocket.SocketGuild.ApplicationId
  id: ApplicationId
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: ApplicationId
  nameWithType: SocketGuild.ApplicationId
  fullName: Discord.WebSocket.SocketGuild.ApplicationId
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ApplicationId
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 81
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public ulong? ApplicationId { get; }
    parameters: []
    return:
      type: System.Nullable{System.UInt64}
    content.vb: Public ReadOnly Property ApplicationId As ULong?
  overload: Discord.WebSocket.SocketGuild.ApplicationId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.OwnerId
  commentId: P:Discord.WebSocket.SocketGuild.OwnerId
  id: OwnerId
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: OwnerId
  nameWithType: SocketGuild.OwnerId
  fullName: Discord.WebSocket.SocketGuild.OwnerId
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: OwnerId
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 87
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public ulong OwnerId { get; }
    parameters: []
    return:
      type: System.UInt64
    content.vb: Public ReadOnly Property OwnerId As ULong
  overload: Discord.WebSocket.SocketGuild.OwnerId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.Owner
  commentId: P:Discord.WebSocket.SocketGuild.Owner
  id: Owner
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: Owner
  nameWithType: SocketGuild.Owner
  fullName: Discord.WebSocket.SocketGuild.Owner
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Owner
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 89
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Gets the user that owns this guild. '
  example: []
  syntax:
    content: public SocketGuildUser Owner { get; }
    parameters: []
    return:
      type: Discord.WebSocket.SocketGuildUser
    content.vb: Public ReadOnly Property Owner As SocketGuildUser
  overload: Discord.WebSocket.SocketGuild.Owner*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.VoiceRegionId
  commentId: P:Discord.WebSocket.SocketGuild.VoiceRegionId
  id: VoiceRegionId
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: VoiceRegionId
  nameWithType: SocketGuild.VoiceRegionId
  fullName: Discord.WebSocket.SocketGuild.VoiceRegionId
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: VoiceRegionId
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 91
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public string VoiceRegionId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property VoiceRegionId As String
  overload: Discord.WebSocket.SocketGuild.VoiceRegionId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.IconId
  commentId: P:Discord.WebSocket.SocketGuild.IconId
  id: IconId
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IconId
  nameWithType: SocketGuild.IconId
  fullName: Discord.WebSocket.SocketGuild.IconId
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IconId
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 93
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public string IconId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property IconId As String
  overload: Discord.WebSocket.SocketGuild.IconId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.SplashId
  commentId: P:Discord.WebSocket.SocketGuild.SplashId
  id: SplashId
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: SplashId
  nameWithType: SocketGuild.SplashId
  fullName: Discord.WebSocket.SocketGuild.SplashId
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SplashId
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 95
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public string SplashId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property SplashId As String
  overload: Discord.WebSocket.SocketGuild.SplashId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.PremiumTier
  commentId: P:Discord.WebSocket.SocketGuild.PremiumTier
  id: PremiumTier
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: PremiumTier
  nameWithType: SocketGuild.PremiumTier
  fullName: Discord.WebSocket.SocketGuild.PremiumTier
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: PremiumTier
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 97
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the tier of guild boosting in this guild.\n"
  example: []
  syntax:
    content: public PremiumTier PremiumTier { get; }
    parameters: []
    return:
      type: Discord.PremiumTier
      description: "\nThe tier of guild boosting in this guild.\n"
    content.vb: Public ReadOnly Property PremiumTier As PremiumTier
  overload: Discord.WebSocket.SocketGuild.PremiumTier*
  implements:
  - Discord.IGuild.PremiumTier
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.BannerId
  commentId: P:Discord.WebSocket.SocketGuild.BannerId
  id: BannerId
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: BannerId
  nameWithType: SocketGuild.BannerId
  fullName: Discord.WebSocket.SocketGuild.BannerId
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: BannerId
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 99
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public string BannerId { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property BannerId As String
  overload: Discord.WebSocket.SocketGuild.BannerId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.VanityURLCode
  commentId: P:Discord.WebSocket.SocketGuild.VanityURLCode
  id: VanityURLCode
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: VanityURLCode
  nameWithType: SocketGuild.VanityURLCode
  fullName: Discord.WebSocket.SocketGuild.VanityURLCode
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: VanityURLCode
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 101
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public string VanityURLCode { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property VanityURLCode As String
  overload: Discord.WebSocket.SocketGuild.VanityURLCode*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.SystemChannelFlags
  commentId: P:Discord.WebSocket.SocketGuild.SystemChannelFlags
  id: SystemChannelFlags
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: SystemChannelFlags
  nameWithType: SocketGuild.SystemChannelFlags
  fullName: Discord.WebSocket.SocketGuild.SystemChannelFlags
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SystemChannelFlags
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 103
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the flags for the types of system channel messages that are disabled.\n"
  example: []
  syntax:
    content: public SystemChannelMessageDeny SystemChannelFlags { get; }
    parameters: []
    return:
      type: Discord.SystemChannelMessageDeny
      description: "\nThe flags for the types of system channel messages that are disabled.\n"
    content.vb: Public ReadOnly Property SystemChannelFlags As SystemChannelMessageDeny
  overload: Discord.WebSocket.SocketGuild.SystemChannelFlags*
  implements:
  - Discord.IGuild.SystemChannelFlags
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.Description
  commentId: P:Discord.WebSocket.SocketGuild.Description
  id: Description
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: SocketGuild.Description
  fullName: Discord.WebSocket.SocketGuild.Description
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Description
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 105
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public string Description { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Description As String
  overload: Discord.WebSocket.SocketGuild.Description*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.PremiumSubscriptionCount
  commentId: P:Discord.WebSocket.SocketGuild.PremiumSubscriptionCount
  id: PremiumSubscriptionCount
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: PremiumSubscriptionCount
  nameWithType: SocketGuild.PremiumSubscriptionCount
  fullName: Discord.WebSocket.SocketGuild.PremiumSubscriptionCount
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: PremiumSubscriptionCount
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 107
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public int PremiumSubscriptionCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property PremiumSubscriptionCount As Integer
  overload: Discord.WebSocket.SocketGuild.PremiumSubscriptionCount*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.PreferredLocale
  commentId: P:Discord.WebSocket.SocketGuild.PreferredLocale
  id: PreferredLocale
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: PreferredLocale
  nameWithType: SocketGuild.PreferredLocale
  fullName: Discord.WebSocket.SocketGuild.PreferredLocale
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: PreferredLocale
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 109
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public string PreferredLocale { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property PreferredLocale As String
  overload: Discord.WebSocket.SocketGuild.PreferredLocale*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.PreferredCulture
  commentId: P:Discord.WebSocket.SocketGuild.PreferredCulture
  id: PreferredCulture
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: PreferredCulture
  nameWithType: SocketGuild.PreferredCulture
  fullName: Discord.WebSocket.SocketGuild.PreferredCulture
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: PreferredCulture
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 112
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public CultureInfo PreferredCulture { get; }
    parameters: []
    return:
      type: CultureInfo
    content.vb: Public ReadOnly Property PreferredCulture As CultureInfo
  overload: Discord.WebSocket.SocketGuild.PreferredCulture*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.CreatedAt
  commentId: P:Discord.WebSocket.SocketGuild.CreatedAt
  id: CreatedAt
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: CreatedAt
  nameWithType: SocketGuild.CreatedAt
  fullName: Discord.WebSocket.SocketGuild.CreatedAt
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreatedAt
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 115
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public DateTimeOffset CreatedAt { get; }
    parameters: []
    return:
      type: DateTimeOffset
    content.vb: Public ReadOnly Property CreatedAt As DateTimeOffset
  overload: Discord.WebSocket.SocketGuild.CreatedAt*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.IconUrl
  commentId: P:Discord.WebSocket.SocketGuild.IconUrl
  id: IconUrl
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IconUrl
  nameWithType: SocketGuild.IconUrl
  fullName: Discord.WebSocket.SocketGuild.IconUrl
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IconUrl
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 117
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public string IconUrl { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property IconUrl As String
  overload: Discord.WebSocket.SocketGuild.IconUrl*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.SplashUrl
  commentId: P:Discord.WebSocket.SocketGuild.SplashUrl
  id: SplashUrl
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: SplashUrl
  nameWithType: SocketGuild.SplashUrl
  fullName: Discord.WebSocket.SocketGuild.SplashUrl
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SplashUrl
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 119
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public string SplashUrl { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property SplashUrl As String
  overload: Discord.WebSocket.SocketGuild.SplashUrl*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.BannerUrl
  commentId: P:Discord.WebSocket.SocketGuild.BannerUrl
  id: BannerUrl
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: BannerUrl
  nameWithType: SocketGuild.BannerUrl
  fullName: Discord.WebSocket.SocketGuild.BannerUrl
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: BannerUrl
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 121
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public string BannerUrl { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property BannerUrl As String
  overload: Discord.WebSocket.SocketGuild.BannerUrl*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.HasAllMembers
  commentId: P:Discord.WebSocket.SocketGuild.HasAllMembers
  id: HasAllMembers
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: HasAllMembers
  nameWithType: SocketGuild.HasAllMembers
  fullName: Discord.WebSocket.SocketGuild.HasAllMembers
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: HasAllMembers
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 123
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Indicates whether the client has all the members downloaded to the local guild cache. '
  example: []
  syntax:
    content: public bool HasAllMembers { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasAllMembers As Boolean
  overload: Discord.WebSocket.SocketGuild.HasAllMembers*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.IsSynced
  commentId: P:Discord.WebSocket.SocketGuild.IsSynced
  id: IsSynced
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IsSynced
  nameWithType: SocketGuild.IsSynced
  fullName: Discord.WebSocket.SocketGuild.IsSynced
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsSynced
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 125
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: 'Indicates whether the guild cache is synced to this guild. '
  example: []
  syntax:
    content: public bool IsSynced { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSynced As Boolean
  overload: Discord.WebSocket.SocketGuild.IsSynced*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.SyncPromise
  commentId: P:Discord.WebSocket.SocketGuild.SyncPromise
  id: SyncPromise
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: SyncPromise
  nameWithType: SocketGuild.SyncPromise
  fullName: Discord.WebSocket.SocketGuild.SyncPromise
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SyncPromise
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 126
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  syntax:
    content: public Task SyncPromise { get; }
    parameters: []
    return:
      type: Task
    content.vb: Public ReadOnly Property SyncPromise As Task
  overload: Discord.WebSocket.SocketGuild.SyncPromise*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.DownloaderPromise
  commentId: P:Discord.WebSocket.SocketGuild.DownloaderPromise
  id: DownloaderPromise
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: DownloaderPromise
  nameWithType: SocketGuild.DownloaderPromise
  fullName: Discord.WebSocket.SocketGuild.DownloaderPromise
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DownloaderPromise
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 127
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  syntax:
    content: public Task DownloaderPromise { get; }
    parameters: []
    return:
      type: Task
    content.vb: Public ReadOnly Property DownloaderPromise As Task
  overload: Discord.WebSocket.SocketGuild.DownloaderPromise*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.AudioClient
  commentId: P:Discord.WebSocket.SocketGuild.AudioClient
  id: AudioClient
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: AudioClient
  nameWithType: SocketGuild.AudioClient
  fullName: Discord.WebSocket.SocketGuild.AudioClient
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: AudioClient
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 131
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the <xref href=\"Discord.Audio.IAudioClient\" data-throw-if-not-resolved=\"false\"></xref> associated with this guild.\n"
  example: []
  syntax:
    content: public IAudioClient AudioClient { get; }
    parameters: []
    return:
      type: Discord.Audio.IAudioClient
    content.vb: Public ReadOnly Property AudioClient As IAudioClient
  overload: Discord.WebSocket.SocketGuild.AudioClient*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.DefaultChannel
  commentId: P:Discord.WebSocket.SocketGuild.DefaultChannel
  id: DefaultChannel
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: DefaultChannel
  nameWithType: SocketGuild.DefaultChannel
  fullName: Discord.WebSocket.SocketGuild.DefaultChannel
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DefaultChannel
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 145
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the default channel in this guild.\n"
  remarks: "\nThis property retrieves the first viewable text channel for this guild.\n<div class=\"WARNING\"><h5>warning</h5><p>\n    This channel does not guarantee the user can send message to it, as it only looks for the first viewable\n    text channel.\n</p></div>\n"
  example: []
  syntax:
    content: public SocketTextChannel DefaultChannel { get; }
    parameters: []
    return:
      type: Discord.WebSocket.SocketTextChannel
      description: "\nA <xref href=\"Discord.WebSocket.SocketTextChannel\" data-throw-if-not-resolved=\"false\"></xref> representing the first viewable channel that the user has access to.\n"
    content.vb: Public ReadOnly Property DefaultChannel As SocketTextChannel
  overload: Discord.WebSocket.SocketGuild.DefaultChannel*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.AFKChannel
  commentId: P:Discord.WebSocket.SocketGuild.AFKChannel
  id: AFKChannel
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: AFKChannel
  nameWithType: SocketGuild.AFKChannel
  fullName: Discord.WebSocket.SocketGuild.AFKChannel
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: AFKChannel
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 156
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the AFK voice channel in this guild.\n"
  example: []
  syntax:
    content: public SocketVoiceChannel AFKChannel { get; }
    parameters: []
    return:
      type: Discord.WebSocket.SocketVoiceChannel
      description: "\nA <xref href=\"Discord.WebSocket.SocketVoiceChannel\" data-throw-if-not-resolved=\"false\"></xref> that the AFK users will be moved to after they have idled for too\nlong; <code>null</code> if none is set.\n"
    content.vb: Public ReadOnly Property AFKChannel As SocketVoiceChannel
  overload: Discord.WebSocket.SocketGuild.AFKChannel*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.EmbedChannel
  commentId: P:Discord.WebSocket.SocketGuild.EmbedChannel
  id: EmbedChannel
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: EmbedChannel
  nameWithType: SocketGuild.EmbedChannel
  fullName: Discord.WebSocket.SocketGuild.EmbedChannel
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: EmbedChannel
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 170
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the embed channel (i.e. the channel set in the guild&apos;s widget settings) in this guild.\n"
  example: []
  syntax:
    content: public SocketGuildChannel EmbedChannel { get; }
    parameters: []
    return:
      type: Discord.WebSocket.SocketGuildChannel
      description: "\nA channel set within the server&apos;s widget settings; <code>null</code> if none is set.\n"
    content.vb: Public ReadOnly Property EmbedChannel As SocketGuildChannel
  overload: Discord.WebSocket.SocketGuild.EmbedChannel*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.SystemChannel
  commentId: P:Discord.WebSocket.SocketGuild.SystemChannel
  id: SystemChannel
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: SystemChannel
  nameWithType: SocketGuild.SystemChannel
  fullName: Discord.WebSocket.SocketGuild.SystemChannel
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SystemChannel
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 184
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the system channel where randomized welcome messages are sent in this guild.\n"
  example: []
  syntax:
    content: public SocketTextChannel SystemChannel { get; }
    parameters: []
    return:
      type: Discord.WebSocket.SocketTextChannel
      description: "\nA text channel where randomized welcome messages will be sent to; <code>null</code> if none is set.\n"
    content.vb: Public ReadOnly Property SystemChannel As SocketTextChannel
  overload: Discord.WebSocket.SocketGuild.SystemChannel*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.TextChannels
  commentId: P:Discord.WebSocket.SocketGuild.TextChannels
  id: TextChannels
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: TextChannels
  nameWithType: SocketGuild.TextChannels
  fullName: Discord.WebSocket.SocketGuild.TextChannels
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: TextChannels
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 198
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all text channels in this guild.\n"
  example: []
  syntax:
    content: public IReadOnlyCollection<SocketTextChannel> TextChannels { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.WebSocket.SocketTextChannel}
      description: "\nA read-only collection of message channels found within this guild.\n"
    content.vb: Public ReadOnly Property TextChannels As IReadOnlyCollection(Of SocketTextChannel)
  overload: Discord.WebSocket.SocketGuild.TextChannels*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.VoiceChannels
  commentId: P:Discord.WebSocket.SocketGuild.VoiceChannels
  id: VoiceChannels
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: VoiceChannels
  nameWithType: SocketGuild.VoiceChannels
  fullName: Discord.WebSocket.SocketGuild.VoiceChannels
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: VoiceChannels
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 206
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all voice channels in this guild.\n"
  example: []
  syntax:
    content: public IReadOnlyCollection<SocketVoiceChannel> VoiceChannels { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.WebSocket.SocketVoiceChannel}
      description: "\nA read-only collection of voice channels found within this guild.\n"
    content.vb: Public ReadOnly Property VoiceChannels As IReadOnlyCollection(Of SocketVoiceChannel)
  overload: Discord.WebSocket.SocketGuild.VoiceChannels*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.CategoryChannels
  commentId: P:Discord.WebSocket.SocketGuild.CategoryChannels
  id: CategoryChannels
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: CategoryChannels
  nameWithType: SocketGuild.CategoryChannels
  fullName: Discord.WebSocket.SocketGuild.CategoryChannels
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CategoryChannels
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 214
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all category channels in this guild.\n"
  example: []
  syntax:
    content: public IReadOnlyCollection<SocketCategoryChannel> CategoryChannels { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.WebSocket.SocketCategoryChannel}
      description: "\nA read-only collection of category channels found within this guild.\n"
    content.vb: Public ReadOnly Property CategoryChannels As IReadOnlyCollection(Of SocketCategoryChannel)
  overload: Discord.WebSocket.SocketGuild.CategoryChannels*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.CurrentUser
  commentId: P:Discord.WebSocket.SocketGuild.CurrentUser
  id: CurrentUser
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: CurrentUser
  nameWithType: SocketGuild.CurrentUser
  fullName: Discord.WebSocket.SocketGuild.CurrentUser
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CurrentUser
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 219
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the current logged-in user.\n"
  example: []
  syntax:
    content: public SocketGuildUser CurrentUser { get; }
    parameters: []
    return:
      type: Discord.WebSocket.SocketGuildUser
    content.vb: Public ReadOnly Property CurrentUser As SocketGuildUser
  overload: Discord.WebSocket.SocketGuild.CurrentUser*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.EveryoneRole
  commentId: P:Discord.WebSocket.SocketGuild.EveryoneRole
  id: EveryoneRole
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: EveryoneRole
  nameWithType: SocketGuild.EveryoneRole
  fullName: Discord.WebSocket.SocketGuild.EveryoneRole
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: EveryoneRole
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 226
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the built-in role containing all users in this guild.\n"
  example: []
  syntax:
    content: public SocketRole EveryoneRole { get; }
    parameters: []
    return:
      type: Discord.WebSocket.SocketRole
      description: "\nA role object that represents an <code>@everyone</code> role in this guild.\n"
    content.vb: Public ReadOnly Property EveryoneRole As SocketRole
  overload: Discord.WebSocket.SocketGuild.EveryoneRole*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.Channels
  commentId: P:Discord.WebSocket.SocketGuild.Channels
  id: Channels
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: Channels
  nameWithType: SocketGuild.Channels
  fullName: Discord.WebSocket.SocketGuild.Channels
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Channels
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 233
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all channels in this guild.\n"
  example: []
  syntax:
    content: public IReadOnlyCollection<SocketGuildChannel> Channels { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.WebSocket.SocketGuildChannel}
      description: "\nA read-only collection of generic channels found within this guild.\n"
    content.vb: Public ReadOnly Property Channels As IReadOnlyCollection(Of SocketGuildChannel)
  overload: Discord.WebSocket.SocketGuild.Channels*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.Emotes
  commentId: P:Discord.WebSocket.SocketGuild.Emotes
  id: Emotes
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: Emotes
  nameWithType: SocketGuild.Emotes
  fullName: Discord.WebSocket.SocketGuild.Emotes
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Emotes
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 243
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public IReadOnlyCollection<GuildEmote> Emotes { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.GuildEmote}
    content.vb: Public ReadOnly Property Emotes As IReadOnlyCollection(Of GuildEmote)
  overload: Discord.WebSocket.SocketGuild.Emotes*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.Features
  commentId: P:Discord.WebSocket.SocketGuild.Features
  id: Features
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: Features
  nameWithType: SocketGuild.Features
  fullName: Discord.WebSocket.SocketGuild.Features
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Features
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 245
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public IReadOnlyCollection<string> Features { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{System.String}
    content.vb: Public ReadOnly Property Features As IReadOnlyCollection(Of String)
  overload: Discord.WebSocket.SocketGuild.Features*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.Users
  commentId: P:Discord.WebSocket.SocketGuild.Users
  id: Users
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: Users
  nameWithType: SocketGuild.Users
  fullName: Discord.WebSocket.SocketGuild.Users
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Users
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 267
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of users in this guild.\n"
  remarks: "\nThis property retrieves all users found within this guild.\n<div class=\"WARNING\"><h5>warning</h5><p>\n<p>\n    This property may not always return all the members for large guilds (i.e. guilds containing\n    100+ users). If you are simply looking to get the number of users present in this guild,\n    consider using <xref href=\"Discord.WebSocket.SocketGuild.MemberCount\" data-throw-if-not-resolved=\"false\"></xref> instead.\n</p>\n<p>\n    Otherwise, you may need to enable <xref href=\"Discord.WebSocket.DiscordSocketConfig.AlwaysDownloadUsers\" data-throw-if-not-resolved=\"false\"></xref> to fetch\n    the full user list upon startup, or use <xref href=\"Discord.WebSocket.SocketGuild.DownloadUsersAsync\" data-throw-if-not-resolved=\"false\"></xref> to manually download\n    the users.\n</p>\n</p></div>\n"
  example: []
  syntax:
    content: public IReadOnlyCollection<SocketGuildUser> Users { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.WebSocket.SocketGuildUser}
      description: "\nA collection of guild users found within this guild.\n"
    content.vb: Public ReadOnly Property Users As IReadOnlyCollection(Of SocketGuildUser)
  overload: Discord.WebSocket.SocketGuild.Users*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.Roles
  commentId: P:Discord.WebSocket.SocketGuild.Roles
  id: Roles
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: Roles
  nameWithType: SocketGuild.Roles
  fullName: Discord.WebSocket.SocketGuild.Roles
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Roles
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 274
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all roles in this guild.\n"
  example: []
  syntax:
    content: public IReadOnlyCollection<SocketRole> Roles { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.WebSocket.SocketRole}
      description: "\nA read-only collection of roles found within this guild.\n"
    content.vb: Public ReadOnly Property Roles As IReadOnlyCollection(Of SocketRole)
  overload: Discord.WebSocket.SocketGuild.Roles*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.WebSocket.SocketGuild.DeleteAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.DeleteAsync(Discord.RequestOptions)
  id: DeleteAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: DeleteAsync(RequestOptions)
  nameWithType: SocketGuild.DeleteAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.DeleteAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 445
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public Task DeleteAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function DeleteAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketGuild.DeleteAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.ModifyAsync(Action{Discord.GuildProperties},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.ModifyAsync(Action{Discord.GuildProperties},Discord.RequestOptions)
  id: ModifyAsync(Action{Discord.GuildProperties},Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: ModifyAsync(Action<GuildProperties>, RequestOptions)
  nameWithType: SocketGuild.ModifyAsync(Action<GuildProperties>, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.ModifyAsync(Action<Discord.GuildProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ModifyAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 450
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public Task ModifyAsync(Action<GuildProperties> func, RequestOptions options = null)
    parameters:
    - id: func
      type: Action{Discord.GuildProperties}
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function ModifyAsync(func As Action(Of GuildProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketGuild.ModifyAsync*
  nameWithType.vb: SocketGuild.ModifyAsync(Action(Of GuildProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketGuild.ModifyAsync(Action(Of Discord.GuildProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of GuildProperties), RequestOptions)
- uid: Discord.WebSocket.SocketGuild.ModifyEmbedAsync(Action{Discord.GuildEmbedProperties},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.ModifyEmbedAsync(Action{Discord.GuildEmbedProperties},Discord.RequestOptions)
  id: ModifyEmbedAsync(Action{Discord.GuildEmbedProperties},Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: ModifyEmbedAsync(Action<GuildEmbedProperties>, RequestOptions)
  nameWithType: SocketGuild.ModifyEmbedAsync(Action<GuildEmbedProperties>, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.ModifyEmbedAsync(Action<Discord.GuildEmbedProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ModifyEmbedAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 455
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public Task ModifyEmbedAsync(Action<GuildEmbedProperties> func, RequestOptions options = null)
    parameters:
    - id: func
      type: Action{Discord.GuildEmbedProperties}
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function ModifyEmbedAsync(func As Action(Of GuildEmbedProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketGuild.ModifyEmbedAsync*
  nameWithType.vb: SocketGuild.ModifyEmbedAsync(Action(Of GuildEmbedProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketGuild.ModifyEmbedAsync(Action(Of Discord.GuildEmbedProperties), Discord.RequestOptions)
  name.vb: ModifyEmbedAsync(Action(Of GuildEmbedProperties), RequestOptions)
- uid: Discord.WebSocket.SocketGuild.ReorderChannelsAsync(IEnumerable{Discord.ReorderChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.ReorderChannelsAsync(IEnumerable{Discord.ReorderChannelProperties},Discord.RequestOptions)
  id: ReorderChannelsAsync(IEnumerable{Discord.ReorderChannelProperties},Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: ReorderChannelsAsync(IEnumerable<ReorderChannelProperties>, RequestOptions)
  nameWithType: SocketGuild.ReorderChannelsAsync(IEnumerable<ReorderChannelProperties>, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.ReorderChannelsAsync(IEnumerable<Discord.ReorderChannelProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ReorderChannelsAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 458
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public Task ReorderChannelsAsync(IEnumerable<ReorderChannelProperties> args, RequestOptions options = null)
    parameters:
    - id: args
      type: IEnumerable{Discord.ReorderChannelProperties}
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function ReorderChannelsAsync(args As IEnumerable(Of ReorderChannelProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketGuild.ReorderChannelsAsync*
  nameWithType.vb: SocketGuild.ReorderChannelsAsync(IEnumerable(Of ReorderChannelProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketGuild.ReorderChannelsAsync(IEnumerable(Of Discord.ReorderChannelProperties), Discord.RequestOptions)
  name.vb: ReorderChannelsAsync(IEnumerable(Of ReorderChannelProperties), RequestOptions)
- uid: Discord.WebSocket.SocketGuild.ReorderRolesAsync(IEnumerable{Discord.ReorderRoleProperties},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.ReorderRolesAsync(IEnumerable{Discord.ReorderRoleProperties},Discord.RequestOptions)
  id: ReorderRolesAsync(IEnumerable{Discord.ReorderRoleProperties},Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: ReorderRolesAsync(IEnumerable<ReorderRoleProperties>, RequestOptions)
  nameWithType: SocketGuild.ReorderRolesAsync(IEnumerable<ReorderRoleProperties>, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.ReorderRolesAsync(IEnumerable<Discord.ReorderRoleProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ReorderRolesAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 461
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public Task ReorderRolesAsync(IEnumerable<ReorderRoleProperties> args, RequestOptions options = null)
    parameters:
    - id: args
      type: IEnumerable{Discord.ReorderRoleProperties}
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function ReorderRolesAsync(args As IEnumerable(Of ReorderRoleProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketGuild.ReorderRolesAsync*
  nameWithType.vb: SocketGuild.ReorderRolesAsync(IEnumerable(Of ReorderRoleProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketGuild.ReorderRolesAsync(IEnumerable(Of Discord.ReorderRoleProperties), Discord.RequestOptions)
  name.vb: ReorderRolesAsync(IEnumerable(Of ReorderRoleProperties), RequestOptions)
- uid: Discord.WebSocket.SocketGuild.LeaveAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.LeaveAsync(Discord.RequestOptions)
  id: LeaveAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: LeaveAsync(RequestOptions)
  nameWithType: SocketGuild.LeaveAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.LeaveAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: LeaveAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 465
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public Task LeaveAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function LeaveAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketGuild.LeaveAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.GetBansAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.GetBansAsync(Discord.RequestOptions)
  id: GetBansAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetBansAsync(RequestOptions)
  nameWithType: SocketGuild.GetBansAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.GetBansAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetBansAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 478
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all users banned in this guild.\n"
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<RestBan>> GetBansAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{IReadOnlyCollection{Discord.Rest.RestBan}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection of\nban objects that this guild currently possesses, with each object containing the user banned and reason\nbehind the ban.\n"
    content.vb: Public Function GetBansAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestBan))
  overload: Discord.WebSocket.SocketGuild.GetBansAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.GetBanAsync(Discord.IUser,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.GetBanAsync(Discord.IUser,Discord.RequestOptions)
  id: GetBanAsync(Discord.IUser,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetBanAsync(IUser, RequestOptions)
  nameWithType: SocketGuild.GetBanAsync(IUser, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.GetBanAsync(Discord.IUser, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetBanAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 489
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a ban object for a banned user.\n"
  example: []
  syntax:
    content: public Task<RestBan> GetBanAsync(IUser user, RequestOptions options = null)
    parameters:
    - id: user
      type: Discord.IUser
      description: The banned user.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestBan}
      description: "\nA task that represents the asynchronous get operation. The task result contains a ban object, which\ncontains the user information and the reason for the ban; <code>null</code> if the ban entry cannot be found.\n"
    content.vb: Public Function GetBanAsync(user As IUser, options As RequestOptions = Nothing) As Task(Of RestBan)
  overload: Discord.WebSocket.SocketGuild.GetBanAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.GetBanAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.GetBanAsync(System.UInt64,Discord.RequestOptions)
  id: GetBanAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetBanAsync(UInt64, RequestOptions)
  nameWithType: SocketGuild.GetBanAsync(UInt64, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.GetBanAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetBanAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 500
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a ban object for a banned user.\n"
  example: []
  syntax:
    content: public Task<RestBan> GetBanAsync(ulong userId, RequestOptions options = null)
    parameters:
    - id: userId
      type: System.UInt64
      description: The snowflake identifier for the banned user.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestBan}
      description: "\nA task that represents the asynchronous get operation. The task result contains a ban object, which\ncontains the user information and the reason for the ban; <code>null</code> if the ban entry cannot be found.\n"
    content.vb: Public Function GetBanAsync(userId As ULong, options As RequestOptions = Nothing) As Task(Of RestBan)
  overload: Discord.WebSocket.SocketGuild.GetBanAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.AddBanAsync(Discord.IUser,System.Int32,System.String,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.AddBanAsync(Discord.IUser,System.Int32,System.String,Discord.RequestOptions)
  id: AddBanAsync(Discord.IUser,System.Int32,System.String,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: AddBanAsync(IUser, Int32, String, RequestOptions)
  nameWithType: SocketGuild.AddBanAsync(IUser, Int32, String, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.AddBanAsync(Discord.IUser, System.Int32, System.String, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: AddBanAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 504
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public Task AddBanAsync(IUser user, int pruneDays = 0, string reason = null, RequestOptions options = null)
    parameters:
    - id: user
      type: Discord.IUser
    - id: pruneDays
      type: System.Int32
    - id: reason
      type: System.String
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function AddBanAsync(user As IUser, pruneDays As Integer = 0, reason As String = Nothing, options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketGuild.AddBanAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.AddBanAsync(System.UInt64,System.Int32,System.String,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.AddBanAsync(System.UInt64,System.Int32,System.String,Discord.RequestOptions)
  id: AddBanAsync(System.UInt64,System.Int32,System.String,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: AddBanAsync(UInt64, Int32, String, RequestOptions)
  nameWithType: SocketGuild.AddBanAsync(UInt64, Int32, String, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.AddBanAsync(System.UInt64, System.Int32, System.String, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: AddBanAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 507
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public Task AddBanAsync(ulong userId, int pruneDays = 0, string reason = null, RequestOptions options = null)
    parameters:
    - id: userId
      type: System.UInt64
    - id: pruneDays
      type: System.Int32
    - id: reason
      type: System.String
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function AddBanAsync(userId As ULong, pruneDays As Integer = 0, reason As String = Nothing, options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketGuild.AddBanAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.RemoveBanAsync(Discord.IUser,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.RemoveBanAsync(Discord.IUser,Discord.RequestOptions)
  id: RemoveBanAsync(Discord.IUser,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: RemoveBanAsync(IUser, RequestOptions)
  nameWithType: SocketGuild.RemoveBanAsync(IUser, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.RemoveBanAsync(Discord.IUser, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RemoveBanAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 511
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public Task RemoveBanAsync(IUser user, RequestOptions options = null)
    parameters:
    - id: user
      type: Discord.IUser
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function RemoveBanAsync(user As IUser, options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketGuild.RemoveBanAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.RemoveBanAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.RemoveBanAsync(System.UInt64,Discord.RequestOptions)
  id: RemoveBanAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: RemoveBanAsync(UInt64, RequestOptions)
  nameWithType: SocketGuild.RemoveBanAsync(UInt64, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.RemoveBanAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RemoveBanAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 514
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public Task RemoveBanAsync(ulong userId, RequestOptions options = null)
    parameters:
    - id: userId
      type: System.UInt64
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function RemoveBanAsync(userId As ULong, options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketGuild.RemoveBanAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.GetChannel(System.UInt64)
  commentId: M:Discord.WebSocket.SocketGuild.GetChannel(System.UInt64)
  id: GetChannel(System.UInt64)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetChannel(UInt64)
  nameWithType: SocketGuild.GetChannel(UInt64)
  fullName: Discord.WebSocket.SocketGuild.GetChannel(System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetChannel
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 525
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a channel in this guild.\n"
  example: []
  syntax:
    content: public SocketGuildChannel GetChannel(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier for the channel.
    return:
      type: Discord.WebSocket.SocketGuildChannel
      description: "\nA generic channel associated with the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Public Function GetChannel(id As ULong) As SocketGuildChannel
  overload: Discord.WebSocket.SocketGuild.GetChannel*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.GetTextChannel(System.UInt64)
  commentId: M:Discord.WebSocket.SocketGuild.GetTextChannel(System.UInt64)
  id: GetTextChannel(System.UInt64)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetTextChannel(UInt64)
  nameWithType: SocketGuild.GetTextChannel(UInt64)
  fullName: Discord.WebSocket.SocketGuild.GetTextChannel(System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetTextChannel
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 539
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a text channel in this guild.\n"
  example: []
  syntax:
    content: public SocketTextChannel GetTextChannel(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier for the text channel.
    return:
      type: Discord.WebSocket.SocketTextChannel
      description: "\nA text channel associated with the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Public Function GetTextChannel(id As ULong) As SocketTextChannel
  overload: Discord.WebSocket.SocketGuild.GetTextChannel*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.GetVoiceChannel(System.UInt64)
  commentId: M:Discord.WebSocket.SocketGuild.GetVoiceChannel(System.UInt64)
  id: GetVoiceChannel(System.UInt64)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetVoiceChannel(UInt64)
  nameWithType: SocketGuild.GetVoiceChannel(UInt64)
  fullName: Discord.WebSocket.SocketGuild.GetVoiceChannel(System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetVoiceChannel
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 548
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a voice channel in this guild.\n"
  example: []
  syntax:
    content: public SocketVoiceChannel GetVoiceChannel(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier for the voice channel.
    return:
      type: Discord.WebSocket.SocketVoiceChannel
      description: "\nA voice channel associated with the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Public Function GetVoiceChannel(id As ULong) As SocketVoiceChannel
  overload: Discord.WebSocket.SocketGuild.GetVoiceChannel*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.GetCategoryChannel(System.UInt64)
  commentId: M:Discord.WebSocket.SocketGuild.GetCategoryChannel(System.UInt64)
  id: GetCategoryChannel(System.UInt64)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetCategoryChannel(UInt64)
  nameWithType: SocketGuild.GetCategoryChannel(UInt64)
  fullName: Discord.WebSocket.SocketGuild.GetCategoryChannel(System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetCategoryChannel
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 557
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a category channel in this guild.\n"
  example: []
  syntax:
    content: public SocketCategoryChannel GetCategoryChannel(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier for the category channel.
    return:
      type: Discord.WebSocket.SocketCategoryChannel
      description: "\nA category channel associated with the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Public Function GetCategoryChannel(id As ULong) As SocketCategoryChannel
  overload: Discord.WebSocket.SocketGuild.GetCategoryChannel*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.CreateTextChannelAsync(System.String,Action{Discord.TextChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.CreateTextChannelAsync(System.String,Action{Discord.TextChannelProperties},Discord.RequestOptions)
  id: CreateTextChannelAsync(System.String,Action{Discord.TextChannelProperties},Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: CreateTextChannelAsync(String, Action<TextChannelProperties>, RequestOptions)
  nameWithType: SocketGuild.CreateTextChannelAsync(String, Action<TextChannelProperties>, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.CreateTextChannelAsync(System.String, Action<Discord.TextChannelProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreateTextChannelAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 583
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nCreates a new text channel in this guild.\n"
  example:
  - "\nThe following example creates a new text channel under an existing category named <code>Wumpus</code> with a set topic.\n<pre><code class=\"lang-cs\">var categories = await guild.GetCategoriesAsync();\nvar targetCategory = categories.FirstOrDefault(x => x.Name == &quot;wumpus&quot;);\nif (targetCategory == null) return;\nawait Context.Guild.CreateTextChannelAsync(name, x =>\n{\n    x.CategoryId = targetCategory.Id;\n    x.Topic = $&quot;This channel was created at {DateTimeOffset.UtcNow} by {user}.&quot;;\n});</code></pre>\n"
  syntax:
    content: public Task<RestTextChannel> CreateTextChannelAsync(string name, Action<TextChannelProperties> func = null, RequestOptions options = null)
    parameters:
    - id: name
      type: System.String
      description: The new name for the text channel.
    - id: func
      type: Action{Discord.TextChannelProperties}
      description: The delegate containing the properties to be applied to the channel upon its creation.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestTextChannel}
      description: "\nA task that represents the asynchronous creation operation. The task result contains the newly created\ntext channel.\n"
    content.vb: Public Function CreateTextChannelAsync(name As String, func As Action(Of TextChannelProperties) = Nothing, options As RequestOptions = Nothing) As Task(Of RestTextChannel)
  overload: Discord.WebSocket.SocketGuild.CreateTextChannelAsync*
  nameWithType.vb: SocketGuild.CreateTextChannelAsync(String, Action(Of TextChannelProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketGuild.CreateTextChannelAsync(System.String, Action(Of Discord.TextChannelProperties), Discord.RequestOptions)
  name.vb: CreateTextChannelAsync(String, Action(Of TextChannelProperties), RequestOptions)
- uid: Discord.WebSocket.SocketGuild.CreateVoiceChannelAsync(System.String,Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.CreateVoiceChannelAsync(System.String,Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  id: CreateVoiceChannelAsync(System.String,Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: CreateVoiceChannelAsync(String, Action<VoiceChannelProperties>, RequestOptions)
  nameWithType: SocketGuild.CreateVoiceChannelAsync(String, Action<VoiceChannelProperties>, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.CreateVoiceChannelAsync(System.String, Action<Discord.VoiceChannelProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreateVoiceChannelAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 596
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nCreates a new voice channel in this guild.\n"
  example: []
  syntax:
    content: public Task<RestVoiceChannel> CreateVoiceChannelAsync(string name, Action<VoiceChannelProperties> func = null, RequestOptions options = null)
    parameters:
    - id: name
      type: System.String
      description: The new name for the voice channel.
    - id: func
      type: Action{Discord.VoiceChannelProperties}
      description: The delegate containing the properties to be applied to the channel upon its creation.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestVoiceChannel}
      description: "\nA task that represents the asynchronous creation operation. The task result contains the newly created\nvoice channel.\n"
    content.vb: Public Function CreateVoiceChannelAsync(name As String, func As Action(Of VoiceChannelProperties) = Nothing, options As RequestOptions = Nothing) As Task(Of RestVoiceChannel)
  overload: Discord.WebSocket.SocketGuild.CreateVoiceChannelAsync*
  nameWithType.vb: SocketGuild.CreateVoiceChannelAsync(String, Action(Of VoiceChannelProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketGuild.CreateVoiceChannelAsync(System.String, Action(Of Discord.VoiceChannelProperties), Discord.RequestOptions)
  name.vb: CreateVoiceChannelAsync(String, Action(Of VoiceChannelProperties), RequestOptions)
- uid: Discord.WebSocket.SocketGuild.CreateCategoryChannelAsync(System.String,Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.CreateCategoryChannelAsync(System.String,Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  id: CreateCategoryChannelAsync(System.String,Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: CreateCategoryChannelAsync(String, Action<GuildChannelProperties>, RequestOptions)
  nameWithType: SocketGuild.CreateCategoryChannelAsync(String, Action<GuildChannelProperties>, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.CreateCategoryChannelAsync(System.String, Action<Discord.GuildChannelProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreateCategoryChannelAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 609
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nCreates a new channel category in this guild.\n"
  example: []
  syntax:
    content: public Task<RestCategoryChannel> CreateCategoryChannelAsync(string name, Action<GuildChannelProperties> func = null, RequestOptions options = null)
    parameters:
    - id: name
      type: System.String
      description: The new name for the category.
    - id: func
      type: Action{Discord.GuildChannelProperties}
      description: The delegate containing the properties to be applied to the channel upon its creation.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestCategoryChannel}
      description: "\nA task that represents the asynchronous creation operation. The task result contains the newly created\ncategory channel.\n"
    content.vb: Public Function CreateCategoryChannelAsync(name As String, func As Action(Of GuildChannelProperties) = Nothing, options As RequestOptions = Nothing) As Task(Of RestCategoryChannel)
  overload: Discord.WebSocket.SocketGuild.CreateCategoryChannelAsync*
  nameWithType.vb: SocketGuild.CreateCategoryChannelAsync(String, Action(Of GuildChannelProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketGuild.CreateCategoryChannelAsync(System.String, Action(Of Discord.GuildChannelProperties), Discord.RequestOptions)
  name.vb: CreateCategoryChannelAsync(String, Action(Of GuildChannelProperties), RequestOptions)
- uid: Discord.WebSocket.SocketGuild.GetVoiceRegionsAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.GetVoiceRegionsAsync(Discord.RequestOptions)
  id: GetVoiceRegionsAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetVoiceRegionsAsync(RequestOptions)
  nameWithType: SocketGuild.GetVoiceRegionsAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.GetVoiceRegionsAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetVoiceRegionsAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 635
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all the voice regions this guild can access.\n"
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<RestVoiceRegion>> GetVoiceRegionsAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{IReadOnlyCollection{Discord.Rest.RestVoiceRegion}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection of\nvoice regions the guild can access.\n"
    content.vb: Public Function GetVoiceRegionsAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestVoiceRegion))
  overload: Discord.WebSocket.SocketGuild.GetVoiceRegionsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.GetIntegrationsAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.GetIntegrationsAsync(Discord.RequestOptions)
  id: GetIntegrationsAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetIntegrationsAsync(RequestOptions)
  nameWithType: SocketGuild.GetIntegrationsAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.GetIntegrationsAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetIntegrationsAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 639
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  syntax:
    content: public Task<IReadOnlyCollection<RestGuildIntegration>> GetIntegrationsAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task{IReadOnlyCollection{Discord.Rest.RestGuildIntegration}}
    content.vb: Public Function GetIntegrationsAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestGuildIntegration))
  overload: Discord.WebSocket.SocketGuild.GetIntegrationsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.CreateIntegrationAsync(System.UInt64,System.String,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.CreateIntegrationAsync(System.UInt64,System.String,Discord.RequestOptions)
  id: CreateIntegrationAsync(System.UInt64,System.String,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: CreateIntegrationAsync(UInt64, String, RequestOptions)
  nameWithType: SocketGuild.CreateIntegrationAsync(UInt64, String, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.CreateIntegrationAsync(System.UInt64, System.String, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreateIntegrationAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 641
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  syntax:
    content: public Task<RestGuildIntegration> CreateIntegrationAsync(ulong id, string type, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
    - id: type
      type: System.String
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task{Discord.Rest.RestGuildIntegration}
    content.vb: Public Function CreateIntegrationAsync(id As ULong, type As String, options As RequestOptions = Nothing) As Task(Of RestGuildIntegration)
  overload: Discord.WebSocket.SocketGuild.CreateIntegrationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.GetInvitesAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.GetInvitesAsync(Discord.RequestOptions)
  id: GetInvitesAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetInvitesAsync(RequestOptions)
  nameWithType: SocketGuild.GetInvitesAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.GetInvitesAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetInvitesAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 653
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all invites in this guild.\n"
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<RestInviteMetadata>> GetInvitesAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{IReadOnlyCollection{Discord.Rest.RestInviteMetadata}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection of\ninvite metadata, each representing information for an invite found within this guild.\n"
    content.vb: Public Function GetInvitesAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestInviteMetadata))
  overload: Discord.WebSocket.SocketGuild.GetInvitesAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.GetVanityInviteAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.GetVanityInviteAsync(Discord.RequestOptions)
  id: GetVanityInviteAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetVanityInviteAsync(RequestOptions)
  nameWithType: SocketGuild.GetVanityInviteAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.GetVanityInviteAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetVanityInviteAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 663
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the vanity invite URL of this guild.\n"
  example: []
  syntax:
    content: public Task<RestInviteMetadata> GetVanityInviteAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestInviteMetadata}
      description: "\nA task that represents the asynchronous get operation. The task result contains the partial metadata of\nthe vanity invite found within this guild; <code>null</code> if none is found.\n"
    content.vb: Public Function GetVanityInviteAsync(options As RequestOptions = Nothing) As Task(Of RestInviteMetadata)
  overload: Discord.WebSocket.SocketGuild.GetVanityInviteAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.GetRole(System.UInt64)
  commentId: M:Discord.WebSocket.SocketGuild.GetRole(System.UInt64)
  id: GetRole(System.UInt64)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetRole(UInt64)
  nameWithType: SocketGuild.GetRole(UInt64)
  fullName: Discord.WebSocket.SocketGuild.GetRole(System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetRole
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 674
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a role in this guild.\n"
  example: []
  syntax:
    content: public SocketRole GetRole(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier for the role.
    return:
      type: Discord.WebSocket.SocketRole
      description: "\nA role that is associated with the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Public Function GetRole(id As ULong) As SocketRole
  overload: Discord.WebSocket.SocketGuild.GetRole*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)
  id: CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: CreateRoleAsync(String, Nullable<GuildPermissions>, Nullable<Color>, Boolean, RequestOptions)
  nameWithType: SocketGuild.CreateRoleAsync(String, Nullable<GuildPermissions>, Nullable<Color>, Boolean, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.CreateRoleAsync(System.String, System.Nullable<Discord.GuildPermissions>, System.Nullable<Discord.Color>, System.Boolean, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreateRoleAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 694
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nCreates a new role with the provided name.\n"
  example: []
  syntax:
    content: public Task<RestRole> CreateRoleAsync(string name, GuildPermissions? permissions = null, Color? color = null, bool isHoisted = false, RequestOptions options = null)
    parameters:
    - id: name
      type: System.String
      description: The new name for the role.
    - id: permissions
      type: System.Nullable{Discord.GuildPermissions}
      description: The guild permission that the role should possess.
    - id: color
      type: System.Nullable{Discord.Color}
      description: The color of the role.
    - id: isHoisted
      type: System.Boolean
      description: Whether the role is separated from others on the sidebar.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestRole}
      description: "\nA task that represents the asynchronous creation operation. The task result contains the newly created\nrole.\n"
    content.vb: Public Function CreateRoleAsync(name As String, permissions As GuildPermissions? = Nothing, color As Color? = Nothing, isHoisted As Boolean = False, options As RequestOptions = Nothing) As Task(Of RestRole)
  overload: Discord.WebSocket.SocketGuild.CreateRoleAsync*
  nameWithType.vb: SocketGuild.CreateRoleAsync(String, Nullable(Of GuildPermissions), Nullable(Of Color), Boolean, RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketGuild.CreateRoleAsync(System.String, System.Nullable(Of Discord.GuildPermissions), System.Nullable(Of Discord.Color), System.Boolean, Discord.RequestOptions)
  name.vb: CreateRoleAsync(String, Nullable(Of GuildPermissions), Nullable(Of Color), Boolean, RequestOptions)
- uid: Discord.WebSocket.SocketGuild.AddGuildUserAsync(System.UInt64,System.String,Action{Discord.AddGuildUserProperties},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.AddGuildUserAsync(System.UInt64,System.String,Action{Discord.AddGuildUserProperties},Discord.RequestOptions)
  id: AddGuildUserAsync(System.UInt64,System.String,Action{Discord.AddGuildUserProperties},Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: AddGuildUserAsync(UInt64, String, Action<AddGuildUserProperties>, RequestOptions)
  nameWithType: SocketGuild.AddGuildUserAsync(UInt64, String, Action<AddGuildUserProperties>, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.AddGuildUserAsync(System.UInt64, System.String, Action<Discord.AddGuildUserProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: AddGuildUserAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 712
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public Task<RestGuildUser> AddGuildUserAsync(ulong id, string accessToken, Action<AddGuildUserProperties> func = null, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
    - id: accessToken
      type: System.String
    - id: func
      type: Action{Discord.AddGuildUserProperties}
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task{Discord.Rest.RestGuildUser}
    content.vb: Public Function AddGuildUserAsync(id As ULong, accessToken As String, func As Action(Of AddGuildUserProperties) = Nothing, options As RequestOptions = Nothing) As Task(Of RestGuildUser)
  overload: Discord.WebSocket.SocketGuild.AddGuildUserAsync*
  nameWithType.vb: SocketGuild.AddGuildUserAsync(UInt64, String, Action(Of AddGuildUserProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketGuild.AddGuildUserAsync(System.UInt64, System.String, Action(Of Discord.AddGuildUserProperties), Discord.RequestOptions)
  name.vb: AddGuildUserAsync(UInt64, String, Action(Of AddGuildUserProperties), RequestOptions)
- uid: Discord.WebSocket.SocketGuild.GetUser(System.UInt64)
  commentId: M:Discord.WebSocket.SocketGuild.GetUser(System.UInt64)
  id: GetUser(System.UInt64)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetUser(UInt64)
  nameWithType: SocketGuild.GetUser(UInt64)
  fullName: Discord.WebSocket.SocketGuild.GetUser(System.UInt64)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetUser
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 729
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a user from this guild.\n"
  remarks: "\nThis method retrieves a user found within this guild.\n<div class=\"NOTE\"><h5>note</h5><p>\n    This may return <code>null</code> in the WebSocket implementation due to incomplete user collection in\n    large guilds.\n</p></div>\n"
  example: []
  syntax:
    content: public SocketGuildUser GetUser(ulong id)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the user.
    return:
      type: Discord.WebSocket.SocketGuildUser
      description: "\nA guild user associated with the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Public Function GetUser(id As ULong) As SocketGuildUser
  overload: Discord.WebSocket.SocketGuild.GetUser*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.PruneUsersAsync(System.Int32,System.Boolean,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.PruneUsersAsync(System.Int32,System.Boolean,Discord.RequestOptions)
  id: PruneUsersAsync(System.Int32,System.Boolean,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: PruneUsersAsync(Int32, Boolean, RequestOptions)
  nameWithType: SocketGuild.PruneUsersAsync(Int32, Boolean, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.PruneUsersAsync(System.Int32, System.Boolean, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: PruneUsersAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 736
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public Task<int> PruneUsersAsync(int days = 30, bool simulate = false, RequestOptions options = null)
    parameters:
    - id: days
      type: System.Int32
    - id: simulate
      type: System.Boolean
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task{System.Int32}
    content.vb: Public Function PruneUsersAsync(days As Integer = 30, simulate As Boolean = False, options As RequestOptions = Nothing) As Task(Of Integer)
  overload: Discord.WebSocket.SocketGuild.PruneUsersAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.DownloadUsersAsync
  commentId: M:Discord.WebSocket.SocketGuild.DownloadUsersAsync
  id: DownloadUsersAsync
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: DownloadUsersAsync()
  nameWithType: SocketGuild.DownloadUsersAsync()
  fullName: Discord.WebSocket.SocketGuild.DownloadUsersAsync()
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DownloadUsersAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 796
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public Task DownloadUsersAsync()
    return:
      type: Task
    content.vb: Public Function DownloadUsersAsync As Task
  overload: Discord.WebSocket.SocketGuild.DownloadUsersAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.GetAuditLogsAsync(System.Int32,Discord.RequestOptions,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{Discord.ActionType})
  commentId: M:Discord.WebSocket.SocketGuild.GetAuditLogsAsync(System.Int32,Discord.RequestOptions,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{Discord.ActionType})
  id: GetAuditLogsAsync(System.Int32,Discord.RequestOptions,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{Discord.ActionType})
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetAuditLogsAsync(Int32, RequestOptions, Nullable<UInt64>, Nullable<UInt64>, Nullable<ActionType>)
  nameWithType: SocketGuild.GetAuditLogsAsync(Int32, RequestOptions, Nullable<UInt64>, Nullable<UInt64>, Nullable<ActionType>)
  fullName: Discord.WebSocket.SocketGuild.GetAuditLogsAsync(System.Int32, Discord.RequestOptions, System.Nullable<System.UInt64>, System.Nullable<System.UInt64>, System.Nullable<Discord.ActionType>)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetAuditLogsAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 818
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the specified number of audit log entries for this guild.\n"
  example: []
  syntax:
    content: public IAsyncEnumerable<IReadOnlyCollection<RestAuditLogEntry>> GetAuditLogsAsync(int limit, RequestOptions options = null, ulong? beforeId = null, ulong? userId = null, ActionType? actionType = null)
    parameters:
    - id: limit
      type: System.Int32
      description: The number of audit log entries to fetch.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    - id: beforeId
      type: System.Nullable{System.UInt64}
      description: The audit log entry ID to filter entries before.
    - id: userId
      type: System.Nullable{System.UInt64}
      description: The user ID to filter entries for.
    - id: actionType
      type: System.Nullable{Discord.ActionType}
      description: The type of actions to filter.
    return:
      type: IAsyncEnumerable{IReadOnlyCollection{Discord.Rest.RestAuditLogEntry}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection\nof the requested audit log entries.\n"
    content.vb: Public Function GetAuditLogsAsync(limit As Integer, options As RequestOptions = Nothing, beforeId As ULong? = Nothing, userId As ULong? = Nothing, actionType As ActionType? = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of RestAuditLogEntry))
  overload: Discord.WebSocket.SocketGuild.GetAuditLogsAsync*
  nameWithType.vb: SocketGuild.GetAuditLogsAsync(Int32, RequestOptions, Nullable(Of UInt64), Nullable(Of UInt64), Nullable(Of ActionType))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketGuild.GetAuditLogsAsync(System.Int32, Discord.RequestOptions, System.Nullable(Of System.UInt64), System.Nullable(Of System.UInt64), System.Nullable(Of Discord.ActionType))
  name.vb: GetAuditLogsAsync(Int32, RequestOptions, Nullable(Of UInt64), Nullable(Of UInt64), Nullable(Of ActionType))
- uid: Discord.WebSocket.SocketGuild.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  id: GetWebhookAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetWebhookAsync(UInt64, RequestOptions)
  nameWithType: SocketGuild.GetWebhookAsync(UInt64, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.GetWebhookAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetWebhookAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 831
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a webhook found within this guild.\n"
  example: []
  syntax:
    content: public Task<RestWebhook> GetWebhookAsync(ulong id, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
      description: The identifier for the webhook.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{Discord.Rest.RestWebhook}
      description: "\nA task that represents the asynchronous get operation. The task result contains the webhook with the\nspecified <code data-dev-comment-type=\"paramref\" class=\"paramref\">id</code>; <code>null</code> if none is found.\n"
    content.vb: Public Function GetWebhookAsync(id As ULong, options As RequestOptions = Nothing) As Task(Of RestWebhook)
  overload: Discord.WebSocket.SocketGuild.GetWebhookAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.GetWebhooksAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.GetWebhooksAsync(Discord.RequestOptions)
  id: GetWebhooksAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetWebhooksAsync(RequestOptions)
  nameWithType: SocketGuild.GetWebhooksAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.GetWebhooksAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetWebhooksAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 841
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets a collection of all webhook from this guild.\n"
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<RestWebhook>> GetWebhooksAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: Task{IReadOnlyCollection{Discord.Rest.RestWebhook}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection\nof webhooks found within the guild.\n"
    content.vb: Public Function GetWebhooksAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of RestWebhook))
  overload: Discord.WebSocket.SocketGuild.GetWebhooksAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.GetEmoteAsync(System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.GetEmoteAsync(System.UInt64,Discord.RequestOptions)
  id: GetEmoteAsync(System.UInt64,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: GetEmoteAsync(UInt64, RequestOptions)
  nameWithType: SocketGuild.GetEmoteAsync(UInt64, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.GetEmoteAsync(System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetEmoteAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 846
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public Task<GuildEmote> GetEmoteAsync(ulong id, RequestOptions options = null)
    parameters:
    - id: id
      type: System.UInt64
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task{Discord.GuildEmote}
    content.vb: Public Function GetEmoteAsync(id As ULong, options As RequestOptions = Nothing) As Task(Of GuildEmote)
  overload: Discord.WebSocket.SocketGuild.GetEmoteAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.CreateEmoteAsync(System.String,Discord.Image,Discord.Optional{IEnumerable{Discord.IRole}},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.CreateEmoteAsync(System.String,Discord.Image,Discord.Optional{IEnumerable{Discord.IRole}},Discord.RequestOptions)
  id: CreateEmoteAsync(System.String,Discord.Image,Discord.Optional{IEnumerable{Discord.IRole}},Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: CreateEmoteAsync(String, Image, Optional<IEnumerable<IRole>>, RequestOptions)
  nameWithType: SocketGuild.CreateEmoteAsync(String, Image, Optional<IEnumerable<IRole>>, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.CreateEmoteAsync(System.String, Discord.Image, Discord.Optional<IEnumerable<Discord.IRole>>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreateEmoteAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 849
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public Task<GuildEmote> CreateEmoteAsync(string name, Image image, Optional<IEnumerable<IRole>> roles = default(Optional<IEnumerable<IRole>>), RequestOptions options = null)
    parameters:
    - id: name
      type: System.String
    - id: image
      type: Discord.Image
    - id: roles
      type: Discord.Optional{IEnumerable{Discord.IRole}}
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task{Discord.GuildEmote}
    content.vb: Public Function CreateEmoteAsync(name As String, image As Image, roles As  Optional  (Of IEnumerable(Of IRole))  = Nothing, options As RequestOptions = Nothing) As Task(Of GuildEmote)
  overload: Discord.WebSocket.SocketGuild.CreateEmoteAsync*
  nameWithType.vb: SocketGuild.CreateEmoteAsync(String, Image, Optional(Of IEnumerable(Of IRole)), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketGuild.CreateEmoteAsync(System.String, Discord.Image, Discord.Optional(Of IEnumerable(Of Discord.IRole)), Discord.RequestOptions)
  name.vb: CreateEmoteAsync(String, Image, Optional(Of IEnumerable(Of IRole)), RequestOptions)
- uid: Discord.WebSocket.SocketGuild.ModifyEmoteAsync(Discord.GuildEmote,Action{Discord.EmoteProperties},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.ModifyEmoteAsync(Discord.GuildEmote,Action{Discord.EmoteProperties},Discord.RequestOptions)
  id: ModifyEmoteAsync(Discord.GuildEmote,Action{Discord.EmoteProperties},Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: ModifyEmoteAsync(GuildEmote, Action<EmoteProperties>, RequestOptions)
  nameWithType: SocketGuild.ModifyEmoteAsync(GuildEmote, Action<EmoteProperties>, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.ModifyEmoteAsync(Discord.GuildEmote, Action<Discord.EmoteProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ModifyEmoteAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 853
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public Task<GuildEmote> ModifyEmoteAsync(GuildEmote emote, Action<EmoteProperties> func, RequestOptions options = null)
    parameters:
    - id: emote
      type: Discord.GuildEmote
    - id: func
      type: Action{Discord.EmoteProperties}
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task{Discord.GuildEmote}
    content.vb: Public Function ModifyEmoteAsync(emote As GuildEmote, func As Action(Of EmoteProperties), options As RequestOptions = Nothing) As Task(Of GuildEmote)
  overload: Discord.WebSocket.SocketGuild.ModifyEmoteAsync*
  nameWithType.vb: SocketGuild.ModifyEmoteAsync(GuildEmote, Action(Of EmoteProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketGuild.ModifyEmoteAsync(Discord.GuildEmote, Action(Of Discord.EmoteProperties), Discord.RequestOptions)
  name.vb: ModifyEmoteAsync(GuildEmote, Action(Of EmoteProperties), RequestOptions)
- uid: Discord.WebSocket.SocketGuild.DeleteEmoteAsync(Discord.GuildEmote,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketGuild.DeleteEmoteAsync(Discord.GuildEmote,Discord.RequestOptions)
  id: DeleteEmoteAsync(Discord.GuildEmote,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: DeleteEmoteAsync(GuildEmote, RequestOptions)
  nameWithType: SocketGuild.DeleteEmoteAsync(GuildEmote, RequestOptions)
  fullName: Discord.WebSocket.SocketGuild.DeleteEmoteAsync(Discord.GuildEmote, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: DeleteEmoteAsync
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 856
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  example: []
  syntax:
    content: public Task DeleteEmoteAsync(GuildEmote emote, RequestOptions options = null)
    parameters:
    - id: emote
      type: Discord.GuildEmote
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function DeleteEmoteAsync(emote As GuildEmote, options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketGuild.DeleteEmoteAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketGuild.ToString
  commentId: M:Discord.WebSocket.SocketGuild.ToString
  id: ToString
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SocketGuild.ToString()
  fullName: Discord.WebSocket.SocketGuild.ToString()
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ToString
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1055
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the name of the guild.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: "\nA string that resolves to <xref href=\"Discord.WebSocket.SocketGuild.Name\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: Public Overrides Function ToString As String
  overload: Discord.WebSocket.SocketGuild.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#AudioClient
  commentId: P:Discord.WebSocket.SocketGuild.Discord#IGuild#AudioClient
  id: Discord#IGuild#AudioClient
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.AudioClient
  nameWithType: SocketGuild.IGuild.AudioClient
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.AudioClient
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.AudioClient
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1063
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the <xref href=\"Discord.Audio.IAudioClient\" data-throw-if-not-resolved=\"false\"></xref> currently associated with this guild.\n"
  example: []
  syntax:
    content: IAudioClient IGuild.AudioClient { get; }
    parameters: []
    return:
      type: Discord.Audio.IAudioClient
      description: "\nAn <xref href=\"Discord.Audio.IAudioClient\" data-throw-if-not-resolved=\"false\"></xref> currently associated with this guild.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IGuild.AudioClient As IAudioClient Implements IGuild.AudioClient
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#AudioClient*
  implements:
  - Discord.IGuild.AudioClient
  nameWithType.vb: SocketGuild.Discord.IGuild.AudioClient
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IGuild.AudioClient
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#EveryoneRole
  commentId: P:Discord.WebSocket.SocketGuild.Discord#IGuild#EveryoneRole
  id: Discord#IGuild#EveryoneRole
  isEii: true
  parent: Discord.WebSocket.SocketGuild
  langs:
  - csharp
  - vb
  name: IGuild.EveryoneRole
  nameWithType: SocketGuild.IGuild.EveryoneRole
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.EveryoneRole
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuild.EveryoneRole
    path: ../src/Discord.Net.WebSocket/Entities/Guilds/SocketGuild.cs
    startLine: 1073
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the built-in role containing all users in this guild.\n"
  example: []
  syntax:
    content: IRole IGuild.EveryoneRole { get; }
    parameters: []
    return:
      type: Discord.IRole
      description: "\nA role object that represents an <code>@everyone</code> role in this guild.\n"
    content.vb: ReadOnly WriteOnly Property Discord.IGuild.EveryoneRole As IRole Implements IGuild.EveryoneRole
  overload: Discord.WebSocket.SocketGuild.Discord#IGuild#EveryoneRole*
  implements:
  - Discord.IGuild.EveryoneRole
  nameWithType.vb: SocketGuild.Discord.IGuild.EveryoneRole
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Discord.IGuild.EveryoneRole
references:
- uid: Discord.WebSocket
  commentId: N:Discord.WebSocket
  name: Discord.WebSocket
  nameWithType: Discord.WebSocket
  fullName: Discord.WebSocket
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.WebSocket.SocketEntity{System.UInt64}
  commentId: T:Discord.WebSocket.SocketEntity{System.UInt64}
  parent: Discord.WebSocket
  definition: Discord.WebSocket.SocketEntity`1
  name: SocketEntity<UInt64>
  nameWithType: SocketEntity<UInt64>
  fullName: Discord.WebSocket.SocketEntity<System.UInt64>
  nameWithType.vb: SocketEntity(Of UInt64)
  fullName.vb: Discord.WebSocket.SocketEntity(Of System.UInt64)
  name.vb: SocketEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.WebSocket.SocketEntity`1
    name: SocketEntity
    nameWithType: SocketEntity
    fullName: Discord.WebSocket.SocketEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.WebSocket.SocketEntity`1
    name: SocketEntity
    nameWithType: SocketEntity
    fullName: Discord.WebSocket.SocketEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IGuild
  commentId: T:Discord.IGuild
  parent: Discord
  name: IGuild
  nameWithType: IGuild
  fullName: Discord.IGuild
- uid: Discord.IDeletable
  commentId: T:Discord.IDeletable
  parent: Discord
  name: IDeletable
  nameWithType: IDeletable
  fullName: Discord.IDeletable
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: IDisposable
- uid: Discord.WebSocket.SocketEntity{System.UInt64}.Id
  commentId: P:Discord.WebSocket.SocketEntity{System.UInt64}.Id
  parent: Discord.WebSocket.SocketEntity{System.UInt64}
  definition: Discord.WebSocket.SocketEntity`1.Id
  name: Id
  nameWithType: SocketEntity<UInt64>.Id
  fullName: Discord.WebSocket.SocketEntity<System.UInt64>.Id
  nameWithType.vb: SocketEntity(Of UInt64).Id
  fullName.vb: Discord.WebSocket.SocketEntity(Of System.UInt64).Id
- uid: Discord.WebSocket.SocketEntity`1
  commentId: T:Discord.WebSocket.SocketEntity`1
  name: SocketEntity<T>
  nameWithType: SocketEntity<T>
  fullName: Discord.WebSocket.SocketEntity<T>
  nameWithType.vb: SocketEntity(Of T)
  fullName.vb: Discord.WebSocket.SocketEntity(Of T)
  name.vb: SocketEntity(Of T)
  spec.csharp:
  - uid: Discord.WebSocket.SocketEntity`1
    name: SocketEntity
    nameWithType: SocketEntity
    fullName: Discord.WebSocket.SocketEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.WebSocket.SocketEntity`1
    name: SocketEntity
    nameWithType: SocketEntity
    fullName: Discord.WebSocket.SocketEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.WebSocket.SocketEntity`1.Id
  commentId: P:Discord.WebSocket.SocketEntity`1.Id
  name: Id
  nameWithType: SocketEntity<T>.Id
  fullName: Discord.WebSocket.SocketEntity<T>.Id
  nameWithType.vb: SocketEntity(Of T).Id
  fullName.vb: Discord.WebSocket.SocketEntity(Of T).Id
- uid: Discord.WebSocket.SocketGuild.Name*
  commentId: Overload:Discord.WebSocket.SocketGuild.Name
  name: Name
  nameWithType: SocketGuild.Name
  fullName: Discord.WebSocket.SocketGuild.Name
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.WebSocket.SocketGuild.AFKTimeout*
  commentId: Overload:Discord.WebSocket.SocketGuild.AFKTimeout
  name: AFKTimeout
  nameWithType: SocketGuild.AFKTimeout
  fullName: Discord.WebSocket.SocketGuild.AFKTimeout
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Discord.WebSocket.SocketGuild.IsEmbeddable*
  commentId: Overload:Discord.WebSocket.SocketGuild.IsEmbeddable
  name: IsEmbeddable
  nameWithType: SocketGuild.IsEmbeddable
  fullName: Discord.WebSocket.SocketGuild.IsEmbeddable
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.WebSocket.SocketGuild.VerificationLevel*
  commentId: Overload:Discord.WebSocket.SocketGuild.VerificationLevel
  name: VerificationLevel
  nameWithType: SocketGuild.VerificationLevel
  fullName: Discord.WebSocket.SocketGuild.VerificationLevel
- uid: Discord.IGuild.VerificationLevel
  commentId: P:Discord.IGuild.VerificationLevel
  parent: Discord.IGuild
  name: VerificationLevel
  nameWithType: IGuild.VerificationLevel
  fullName: Discord.IGuild.VerificationLevel
- uid: Discord.VerificationLevel
  commentId: T:Discord.VerificationLevel
  parent: Discord
  name: VerificationLevel
  nameWithType: VerificationLevel
  fullName: Discord.VerificationLevel
- uid: Discord.WebSocket.SocketGuild.MfaLevel*
  commentId: Overload:Discord.WebSocket.SocketGuild.MfaLevel
  name: MfaLevel
  nameWithType: SocketGuild.MfaLevel
  fullName: Discord.WebSocket.SocketGuild.MfaLevel
- uid: Discord.IGuild.MfaLevel
  commentId: P:Discord.IGuild.MfaLevel
  parent: Discord.IGuild
  name: MfaLevel
  nameWithType: IGuild.MfaLevel
  fullName: Discord.IGuild.MfaLevel
- uid: Discord.MfaLevel
  commentId: T:Discord.MfaLevel
  parent: Discord
  name: MfaLevel
  nameWithType: MfaLevel
  fullName: Discord.MfaLevel
- uid: Discord.WebSocket.SocketGuild.DefaultMessageNotifications*
  commentId: Overload:Discord.WebSocket.SocketGuild.DefaultMessageNotifications
  name: DefaultMessageNotifications
  nameWithType: SocketGuild.DefaultMessageNotifications
  fullName: Discord.WebSocket.SocketGuild.DefaultMessageNotifications
- uid: Discord.IGuild.DefaultMessageNotifications
  commentId: P:Discord.IGuild.DefaultMessageNotifications
  parent: Discord.IGuild
  name: DefaultMessageNotifications
  nameWithType: IGuild.DefaultMessageNotifications
  fullName: Discord.IGuild.DefaultMessageNotifications
- uid: Discord.DefaultMessageNotifications
  commentId: T:Discord.DefaultMessageNotifications
  parent: Discord
  name: DefaultMessageNotifications
  nameWithType: DefaultMessageNotifications
  fullName: Discord.DefaultMessageNotifications
- uid: Discord.WebSocket.SocketGuild.ExplicitContentFilter*
  commentId: Overload:Discord.WebSocket.SocketGuild.ExplicitContentFilter
  name: ExplicitContentFilter
  nameWithType: SocketGuild.ExplicitContentFilter
  fullName: Discord.WebSocket.SocketGuild.ExplicitContentFilter
- uid: Discord.IGuild.ExplicitContentFilter
  commentId: P:Discord.IGuild.ExplicitContentFilter
  parent: Discord.IGuild
  name: ExplicitContentFilter
  nameWithType: IGuild.ExplicitContentFilter
  fullName: Discord.IGuild.ExplicitContentFilter
- uid: Discord.ExplicitContentFilterLevel
  commentId: T:Discord.ExplicitContentFilterLevel
  parent: Discord
  name: ExplicitContentFilterLevel
  nameWithType: ExplicitContentFilterLevel
  fullName: Discord.ExplicitContentFilterLevel
- uid: Discord.WebSocket.SocketGuild.Users
  commentId: P:Discord.WebSocket.SocketGuild.Users
  isExternal: true
- uid: Discord.WebSocket.SocketGuild.MemberCount*
  commentId: Overload:Discord.WebSocket.SocketGuild.MemberCount
  name: MemberCount
  nameWithType: SocketGuild.MemberCount
  fullName: Discord.WebSocket.SocketGuild.MemberCount
- uid: Discord.WebSocket.SocketGuild.DownloadedMemberCount*
  commentId: Overload:Discord.WebSocket.SocketGuild.DownloadedMemberCount
  name: DownloadedMemberCount
  nameWithType: SocketGuild.DownloadedMemberCount
  fullName: Discord.WebSocket.SocketGuild.DownloadedMemberCount
- uid: Discord.WebSocket.SocketGuild.IsConnected*
  commentId: Overload:Discord.WebSocket.SocketGuild.IsConnected
  name: IsConnected
  nameWithType: SocketGuild.IsConnected
  fullName: Discord.WebSocket.SocketGuild.IsConnected
- uid: Discord.WebSocket.SocketGuild.ApplicationId*
  commentId: Overload:Discord.WebSocket.SocketGuild.ApplicationId
  name: ApplicationId
  nameWithType: SocketGuild.ApplicationId
  fullName: Discord.WebSocket.SocketGuild.ApplicationId
- uid: System.Nullable{System.UInt64}
  commentId: '!:System.Nullable{System.UInt64}'
  definition: System.Nullable`1
  name: Nullable<UInt64>
  nameWithType: Nullable<UInt64>
  fullName: System.Nullable<System.UInt64>
  nameWithType.vb: Nullable(Of UInt64)
  fullName.vb: System.Nullable(Of System.UInt64)
  name.vb: Nullable(Of UInt64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.OwnerId*
  commentId: Overload:Discord.WebSocket.SocketGuild.OwnerId
  name: OwnerId
  nameWithType: SocketGuild.OwnerId
  fullName: Discord.WebSocket.SocketGuild.OwnerId
- uid: System.UInt64
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Discord.WebSocket.SocketGuild.Owner*
  commentId: Overload:Discord.WebSocket.SocketGuild.Owner
  name: Owner
  nameWithType: SocketGuild.Owner
  fullName: Discord.WebSocket.SocketGuild.Owner
- uid: Discord.WebSocket.SocketGuildUser
  commentId: T:Discord.WebSocket.SocketGuildUser
  parent: Discord.WebSocket
  name: SocketGuildUser
  nameWithType: SocketGuildUser
  fullName: Discord.WebSocket.SocketGuildUser
- uid: Discord.WebSocket.SocketGuild.VoiceRegionId*
  commentId: Overload:Discord.WebSocket.SocketGuild.VoiceRegionId
  name: VoiceRegionId
  nameWithType: SocketGuild.VoiceRegionId
  fullName: Discord.WebSocket.SocketGuild.VoiceRegionId
- uid: Discord.WebSocket.SocketGuild.IconId*
  commentId: Overload:Discord.WebSocket.SocketGuild.IconId
  name: IconId
  nameWithType: SocketGuild.IconId
  fullName: Discord.WebSocket.SocketGuild.IconId
- uid: Discord.WebSocket.SocketGuild.SplashId*
  commentId: Overload:Discord.WebSocket.SocketGuild.SplashId
  name: SplashId
  nameWithType: SocketGuild.SplashId
  fullName: Discord.WebSocket.SocketGuild.SplashId
- uid: Discord.WebSocket.SocketGuild.PremiumTier*
  commentId: Overload:Discord.WebSocket.SocketGuild.PremiumTier
  name: PremiumTier
  nameWithType: SocketGuild.PremiumTier
  fullName: Discord.WebSocket.SocketGuild.PremiumTier
- uid: Discord.IGuild.PremiumTier
  commentId: P:Discord.IGuild.PremiumTier
  parent: Discord.IGuild
  name: PremiumTier
  nameWithType: IGuild.PremiumTier
  fullName: Discord.IGuild.PremiumTier
- uid: Discord.PremiumTier
  commentId: T:Discord.PremiumTier
  parent: Discord
  name: PremiumTier
  nameWithType: PremiumTier
  fullName: Discord.PremiumTier
- uid: Discord.WebSocket.SocketGuild.BannerId*
  commentId: Overload:Discord.WebSocket.SocketGuild.BannerId
  name: BannerId
  nameWithType: SocketGuild.BannerId
  fullName: Discord.WebSocket.SocketGuild.BannerId
- uid: Discord.WebSocket.SocketGuild.VanityURLCode*
  commentId: Overload:Discord.WebSocket.SocketGuild.VanityURLCode
  name: VanityURLCode
  nameWithType: SocketGuild.VanityURLCode
  fullName: Discord.WebSocket.SocketGuild.VanityURLCode
- uid: Discord.WebSocket.SocketGuild.SystemChannelFlags*
  commentId: Overload:Discord.WebSocket.SocketGuild.SystemChannelFlags
  name: SystemChannelFlags
  nameWithType: SocketGuild.SystemChannelFlags
  fullName: Discord.WebSocket.SocketGuild.SystemChannelFlags
- uid: Discord.IGuild.SystemChannelFlags
  commentId: P:Discord.IGuild.SystemChannelFlags
  parent: Discord.IGuild
  name: SystemChannelFlags
  nameWithType: IGuild.SystemChannelFlags
  fullName: Discord.IGuild.SystemChannelFlags
- uid: Discord.SystemChannelMessageDeny
  commentId: T:Discord.SystemChannelMessageDeny
  parent: Discord
  name: SystemChannelMessageDeny
  nameWithType: SystemChannelMessageDeny
  fullName: Discord.SystemChannelMessageDeny
- uid: Discord.WebSocket.SocketGuild.Description*
  commentId: Overload:Discord.WebSocket.SocketGuild.Description
  name: Description
  nameWithType: SocketGuild.Description
  fullName: Discord.WebSocket.SocketGuild.Description
- uid: Discord.WebSocket.SocketGuild.PremiumSubscriptionCount*
  commentId: Overload:Discord.WebSocket.SocketGuild.PremiumSubscriptionCount
  name: PremiumSubscriptionCount
  nameWithType: SocketGuild.PremiumSubscriptionCount
  fullName: Discord.WebSocket.SocketGuild.PremiumSubscriptionCount
- uid: Discord.WebSocket.SocketGuild.PreferredLocale*
  commentId: Overload:Discord.WebSocket.SocketGuild.PreferredLocale
  name: PreferredLocale
  nameWithType: SocketGuild.PreferredLocale
  fullName: Discord.WebSocket.SocketGuild.PreferredLocale
- uid: Discord.WebSocket.SocketGuild.PreferredCulture*
  commentId: Overload:Discord.WebSocket.SocketGuild.PreferredCulture
  name: PreferredCulture
  nameWithType: SocketGuild.PreferredCulture
  fullName: Discord.WebSocket.SocketGuild.PreferredCulture
- uid: CultureInfo
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: CultureInfo
- uid: Discord.WebSocket.SocketGuild.CreatedAt*
  commentId: Overload:Discord.WebSocket.SocketGuild.CreatedAt
  name: CreatedAt
  nameWithType: SocketGuild.CreatedAt
  fullName: Discord.WebSocket.SocketGuild.CreatedAt
- uid: DateTimeOffset
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: DateTimeOffset
- uid: Discord.WebSocket.SocketGuild.IconUrl*
  commentId: Overload:Discord.WebSocket.SocketGuild.IconUrl
  name: IconUrl
  nameWithType: SocketGuild.IconUrl
  fullName: Discord.WebSocket.SocketGuild.IconUrl
- uid: Discord.WebSocket.SocketGuild.SplashUrl*
  commentId: Overload:Discord.WebSocket.SocketGuild.SplashUrl
  name: SplashUrl
  nameWithType: SocketGuild.SplashUrl
  fullName: Discord.WebSocket.SocketGuild.SplashUrl
- uid: Discord.WebSocket.SocketGuild.BannerUrl*
  commentId: Overload:Discord.WebSocket.SocketGuild.BannerUrl
  name: BannerUrl
  nameWithType: SocketGuild.BannerUrl
  fullName: Discord.WebSocket.SocketGuild.BannerUrl
- uid: Discord.WebSocket.SocketGuild.HasAllMembers*
  commentId: Overload:Discord.WebSocket.SocketGuild.HasAllMembers
  name: HasAllMembers
  nameWithType: SocketGuild.HasAllMembers
  fullName: Discord.WebSocket.SocketGuild.HasAllMembers
- uid: Discord.WebSocket.SocketGuild.IsSynced*
  commentId: Overload:Discord.WebSocket.SocketGuild.IsSynced
  name: IsSynced
  nameWithType: SocketGuild.IsSynced
  fullName: Discord.WebSocket.SocketGuild.IsSynced
- uid: Discord.WebSocket.SocketGuild.SyncPromise*
  commentId: Overload:Discord.WebSocket.SocketGuild.SyncPromise
  name: SyncPromise
  nameWithType: SocketGuild.SyncPromise
  fullName: Discord.WebSocket.SocketGuild.SyncPromise
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Discord.WebSocket.SocketGuild.DownloaderPromise*
  commentId: Overload:Discord.WebSocket.SocketGuild.DownloaderPromise
  name: DownloaderPromise
  nameWithType: SocketGuild.DownloaderPromise
  fullName: Discord.WebSocket.SocketGuild.DownloaderPromise
- uid: Discord.Audio.IAudioClient
  commentId: T:Discord.Audio.IAudioClient
  parent: Discord.Audio
  name: IAudioClient
  nameWithType: IAudioClient
  fullName: Discord.Audio.IAudioClient
- uid: Discord.WebSocket.SocketGuild.AudioClient*
  commentId: Overload:Discord.WebSocket.SocketGuild.AudioClient
  name: AudioClient
  nameWithType: SocketGuild.AudioClient
  fullName: Discord.WebSocket.SocketGuild.AudioClient
- uid: Discord.Audio
  commentId: N:Discord.Audio
  name: Discord.Audio
  nameWithType: Discord.Audio
  fullName: Discord.Audio
- uid: Discord.WebSocket.SocketTextChannel
  commentId: T:Discord.WebSocket.SocketTextChannel
  parent: Discord.WebSocket
  name: SocketTextChannel
  nameWithType: SocketTextChannel
  fullName: Discord.WebSocket.SocketTextChannel
- uid: Discord.WebSocket.SocketGuild.DefaultChannel*
  commentId: Overload:Discord.WebSocket.SocketGuild.DefaultChannel
  name: DefaultChannel
  nameWithType: SocketGuild.DefaultChannel
  fullName: Discord.WebSocket.SocketGuild.DefaultChannel
- uid: Discord.WebSocket.SocketVoiceChannel
  commentId: T:Discord.WebSocket.SocketVoiceChannel
  parent: Discord.WebSocket
  name: SocketVoiceChannel
  nameWithType: SocketVoiceChannel
  fullName: Discord.WebSocket.SocketVoiceChannel
- uid: Discord.WebSocket.SocketGuild.AFKChannel*
  commentId: Overload:Discord.WebSocket.SocketGuild.AFKChannel
  name: AFKChannel
  nameWithType: SocketGuild.AFKChannel
  fullName: Discord.WebSocket.SocketGuild.AFKChannel
- uid: Discord.WebSocket.SocketGuild.EmbedChannel*
  commentId: Overload:Discord.WebSocket.SocketGuild.EmbedChannel
  name: EmbedChannel
  nameWithType: SocketGuild.EmbedChannel
  fullName: Discord.WebSocket.SocketGuild.EmbedChannel
- uid: Discord.WebSocket.SocketGuildChannel
  commentId: T:Discord.WebSocket.SocketGuildChannel
  parent: Discord.WebSocket
  name: SocketGuildChannel
  nameWithType: SocketGuildChannel
  fullName: Discord.WebSocket.SocketGuildChannel
- uid: Discord.WebSocket.SocketGuild.SystemChannel*
  commentId: Overload:Discord.WebSocket.SocketGuild.SystemChannel
  name: SystemChannel
  nameWithType: SocketGuild.SystemChannel
  fullName: Discord.WebSocket.SocketGuild.SystemChannel
- uid: Discord.WebSocket.SocketGuild.TextChannels*
  commentId: Overload:Discord.WebSocket.SocketGuild.TextChannels
  name: TextChannels
  nameWithType: SocketGuild.TextChannels
  fullName: Discord.WebSocket.SocketGuild.TextChannels
- uid: IReadOnlyCollection{Discord.WebSocket.SocketTextChannel}
  commentId: '!:IReadOnlyCollection{Discord.WebSocket.SocketTextChannel}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<SocketTextChannel>
  nameWithType: IReadOnlyCollection<SocketTextChannel>
  fullName: IReadOnlyCollection<Discord.WebSocket.SocketTextChannel>
  nameWithType.vb: IReadOnlyCollection(Of SocketTextChannel)
  fullName.vb: IReadOnlyCollection(Of Discord.WebSocket.SocketTextChannel)
  name.vb: IReadOnlyCollection(Of SocketTextChannel)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketTextChannel
    name: SocketTextChannel
    nameWithType: SocketTextChannel
    fullName: Discord.WebSocket.SocketTextChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketTextChannel
    name: SocketTextChannel
    nameWithType: SocketTextChannel
    fullName: Discord.WebSocket.SocketTextChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<>
  nameWithType: IReadOnlyCollection<>
  fullName: IReadOnlyCollection<>
  nameWithType.vb: IReadOnlyCollection(Of )
  fullName.vb: IReadOnlyCollection(Of )
  name.vb: IReadOnlyCollection(Of )
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.VoiceChannels*
  commentId: Overload:Discord.WebSocket.SocketGuild.VoiceChannels
  name: VoiceChannels
  nameWithType: SocketGuild.VoiceChannels
  fullName: Discord.WebSocket.SocketGuild.VoiceChannels
- uid: IReadOnlyCollection{Discord.WebSocket.SocketVoiceChannel}
  commentId: '!:IReadOnlyCollection{Discord.WebSocket.SocketVoiceChannel}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<SocketVoiceChannel>
  nameWithType: IReadOnlyCollection<SocketVoiceChannel>
  fullName: IReadOnlyCollection<Discord.WebSocket.SocketVoiceChannel>
  nameWithType.vb: IReadOnlyCollection(Of SocketVoiceChannel)
  fullName.vb: IReadOnlyCollection(Of Discord.WebSocket.SocketVoiceChannel)
  name.vb: IReadOnlyCollection(Of SocketVoiceChannel)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketVoiceChannel
    name: SocketVoiceChannel
    nameWithType: SocketVoiceChannel
    fullName: Discord.WebSocket.SocketVoiceChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketVoiceChannel
    name: SocketVoiceChannel
    nameWithType: SocketVoiceChannel
    fullName: Discord.WebSocket.SocketVoiceChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.CategoryChannels*
  commentId: Overload:Discord.WebSocket.SocketGuild.CategoryChannels
  name: CategoryChannels
  nameWithType: SocketGuild.CategoryChannels
  fullName: Discord.WebSocket.SocketGuild.CategoryChannels
- uid: IReadOnlyCollection{Discord.WebSocket.SocketCategoryChannel}
  commentId: '!:IReadOnlyCollection{Discord.WebSocket.SocketCategoryChannel}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<SocketCategoryChannel>
  nameWithType: IReadOnlyCollection<SocketCategoryChannel>
  fullName: IReadOnlyCollection<Discord.WebSocket.SocketCategoryChannel>
  nameWithType.vb: IReadOnlyCollection(Of SocketCategoryChannel)
  fullName.vb: IReadOnlyCollection(Of Discord.WebSocket.SocketCategoryChannel)
  name.vb: IReadOnlyCollection(Of SocketCategoryChannel)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketCategoryChannel
    name: SocketCategoryChannel
    nameWithType: SocketCategoryChannel
    fullName: Discord.WebSocket.SocketCategoryChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketCategoryChannel
    name: SocketCategoryChannel
    nameWithType: SocketCategoryChannel
    fullName: Discord.WebSocket.SocketCategoryChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.CurrentUser*
  commentId: Overload:Discord.WebSocket.SocketGuild.CurrentUser
  name: CurrentUser
  nameWithType: SocketGuild.CurrentUser
  fullName: Discord.WebSocket.SocketGuild.CurrentUser
- uid: Discord.WebSocket.SocketGuild.EveryoneRole*
  commentId: Overload:Discord.WebSocket.SocketGuild.EveryoneRole
  name: EveryoneRole
  nameWithType: SocketGuild.EveryoneRole
  fullName: Discord.WebSocket.SocketGuild.EveryoneRole
- uid: Discord.WebSocket.SocketRole
  commentId: T:Discord.WebSocket.SocketRole
  parent: Discord.WebSocket
  name: SocketRole
  nameWithType: SocketRole
  fullName: Discord.WebSocket.SocketRole
- uid: Discord.WebSocket.SocketGuild.Channels*
  commentId: Overload:Discord.WebSocket.SocketGuild.Channels
  name: Channels
  nameWithType: SocketGuild.Channels
  fullName: Discord.WebSocket.SocketGuild.Channels
- uid: IReadOnlyCollection{Discord.WebSocket.SocketGuildChannel}
  commentId: '!:IReadOnlyCollection{Discord.WebSocket.SocketGuildChannel}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<SocketGuildChannel>
  nameWithType: IReadOnlyCollection<SocketGuildChannel>
  fullName: IReadOnlyCollection<Discord.WebSocket.SocketGuildChannel>
  nameWithType.vb: IReadOnlyCollection(Of SocketGuildChannel)
  fullName.vb: IReadOnlyCollection(Of Discord.WebSocket.SocketGuildChannel)
  name.vb: IReadOnlyCollection(Of SocketGuildChannel)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketGuildChannel
    name: SocketGuildChannel
    nameWithType: SocketGuildChannel
    fullName: Discord.WebSocket.SocketGuildChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketGuildChannel
    name: SocketGuildChannel
    nameWithType: SocketGuildChannel
    fullName: Discord.WebSocket.SocketGuildChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Emotes*
  commentId: Overload:Discord.WebSocket.SocketGuild.Emotes
  name: Emotes
  nameWithType: SocketGuild.Emotes
  fullName: Discord.WebSocket.SocketGuild.Emotes
- uid: IReadOnlyCollection{Discord.GuildEmote}
  commentId: '!:IReadOnlyCollection{Discord.GuildEmote}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<GuildEmote>
  nameWithType: IReadOnlyCollection<GuildEmote>
  fullName: IReadOnlyCollection<Discord.GuildEmote>
  nameWithType.vb: IReadOnlyCollection(Of GuildEmote)
  fullName.vb: IReadOnlyCollection(Of Discord.GuildEmote)
  name.vb: IReadOnlyCollection(Of GuildEmote)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildEmote
    name: GuildEmote
    nameWithType: GuildEmote
    fullName: Discord.GuildEmote
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildEmote
    name: GuildEmote
    nameWithType: GuildEmote
    fullName: Discord.GuildEmote
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Features*
  commentId: Overload:Discord.WebSocket.SocketGuild.Features
  name: Features
  nameWithType: SocketGuild.Features
  fullName: Discord.WebSocket.SocketGuild.Features
- uid: IReadOnlyCollection{System.String}
  commentId: '!:IReadOnlyCollection{System.String}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<String>
  nameWithType: IReadOnlyCollection<String>
  fullName: IReadOnlyCollection<System.String>
  nameWithType.vb: IReadOnlyCollection(Of String)
  fullName.vb: IReadOnlyCollection(Of System.String)
  name.vb: IReadOnlyCollection(Of String)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.MemberCount
  commentId: P:Discord.WebSocket.SocketGuild.MemberCount
  isExternal: true
- uid: Discord.WebSocket.DiscordSocketConfig.AlwaysDownloadUsers
  commentId: P:Discord.WebSocket.DiscordSocketConfig.AlwaysDownloadUsers
  isExternal: true
- uid: Discord.WebSocket.SocketGuild.DownloadUsersAsync
  commentId: M:Discord.WebSocket.SocketGuild.DownloadUsersAsync
  isExternal: true
- uid: Discord.WebSocket.SocketGuild.Users*
  commentId: Overload:Discord.WebSocket.SocketGuild.Users
  name: Users
  nameWithType: SocketGuild.Users
  fullName: Discord.WebSocket.SocketGuild.Users
- uid: IReadOnlyCollection{Discord.WebSocket.SocketGuildUser}
  commentId: '!:IReadOnlyCollection{Discord.WebSocket.SocketGuildUser}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<SocketGuildUser>
  nameWithType: IReadOnlyCollection<SocketGuildUser>
  fullName: IReadOnlyCollection<Discord.WebSocket.SocketGuildUser>
  nameWithType.vb: IReadOnlyCollection(Of SocketGuildUser)
  fullName.vb: IReadOnlyCollection(Of Discord.WebSocket.SocketGuildUser)
  name.vb: IReadOnlyCollection(Of SocketGuildUser)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketGuildUser
    name: SocketGuildUser
    nameWithType: SocketGuildUser
    fullName: Discord.WebSocket.SocketGuildUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketGuildUser
    name: SocketGuildUser
    nameWithType: SocketGuildUser
    fullName: Discord.WebSocket.SocketGuildUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.Roles*
  commentId: Overload:Discord.WebSocket.SocketGuild.Roles
  name: Roles
  nameWithType: SocketGuild.Roles
  fullName: Discord.WebSocket.SocketGuild.Roles
- uid: IReadOnlyCollection{Discord.WebSocket.SocketRole}
  commentId: '!:IReadOnlyCollection{Discord.WebSocket.SocketRole}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<SocketRole>
  nameWithType: IReadOnlyCollection<SocketRole>
  fullName: IReadOnlyCollection<Discord.WebSocket.SocketRole>
  nameWithType.vb: IReadOnlyCollection(Of SocketRole)
  fullName.vb: IReadOnlyCollection(Of Discord.WebSocket.SocketRole)
  name.vb: IReadOnlyCollection(Of SocketRole)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketRole
    name: SocketRole
    nameWithType: SocketRole
    fullName: Discord.WebSocket.SocketRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketRole
    name: SocketRole
    nameWithType: SocketRole
    fullName: Discord.WebSocket.SocketRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.DeleteAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.DeleteAsync
  name: DeleteAsync
  nameWithType: SocketGuild.DeleteAsync
  fullName: Discord.WebSocket.SocketGuild.DeleteAsync
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: Discord.WebSocket.SocketGuild.ModifyAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.ModifyAsync
  name: ModifyAsync
  nameWithType: SocketGuild.ModifyAsync
  fullName: Discord.WebSocket.SocketGuild.ModifyAsync
- uid: Action{Discord.GuildProperties}
  commentId: '!:Action{Discord.GuildProperties}'
  definition: Action`1
  name: Action<GuildProperties>
  nameWithType: Action<GuildProperties>
  fullName: Action<Discord.GuildProperties>
  nameWithType.vb: Action(Of GuildProperties)
  fullName.vb: Action(Of Discord.GuildProperties)
  name.vb: Action(Of GuildProperties)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildProperties
    name: GuildProperties
    nameWithType: GuildProperties
    fullName: Discord.GuildProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildProperties
    name: GuildProperties
    nameWithType: GuildProperties
    fullName: Discord.GuildProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.ModifyEmbedAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.ModifyEmbedAsync
  name: ModifyEmbedAsync
  nameWithType: SocketGuild.ModifyEmbedAsync
  fullName: Discord.WebSocket.SocketGuild.ModifyEmbedAsync
- uid: Action{Discord.GuildEmbedProperties}
  commentId: '!:Action{Discord.GuildEmbedProperties}'
  definition: Action`1
  name: Action<GuildEmbedProperties>
  nameWithType: Action<GuildEmbedProperties>
  fullName: Action<Discord.GuildEmbedProperties>
  nameWithType.vb: Action(Of GuildEmbedProperties)
  fullName.vb: Action(Of Discord.GuildEmbedProperties)
  name.vb: Action(Of GuildEmbedProperties)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildEmbedProperties
    name: GuildEmbedProperties
    nameWithType: GuildEmbedProperties
    fullName: Discord.GuildEmbedProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildEmbedProperties
    name: GuildEmbedProperties
    nameWithType: GuildEmbedProperties
    fullName: Discord.GuildEmbedProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.ReorderChannelsAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.ReorderChannelsAsync
  name: ReorderChannelsAsync
  nameWithType: SocketGuild.ReorderChannelsAsync
  fullName: Discord.WebSocket.SocketGuild.ReorderChannelsAsync
- uid: IEnumerable{Discord.ReorderChannelProperties}
  commentId: '!:IEnumerable{Discord.ReorderChannelProperties}'
  definition: IEnumerable`1
  name: IEnumerable<ReorderChannelProperties>
  nameWithType: IEnumerable<ReorderChannelProperties>
  fullName: IEnumerable<Discord.ReorderChannelProperties>
  nameWithType.vb: IEnumerable(Of ReorderChannelProperties)
  fullName.vb: IEnumerable(Of Discord.ReorderChannelProperties)
  name.vb: IEnumerable(Of ReorderChannelProperties)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ReorderChannelProperties
    name: ReorderChannelProperties
    nameWithType: ReorderChannelProperties
    fullName: Discord.ReorderChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ReorderChannelProperties
    name: ReorderChannelProperties
    nameWithType: ReorderChannelProperties
    fullName: Discord.ReorderChannelProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.ReorderRolesAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.ReorderRolesAsync
  name: ReorderRolesAsync
  nameWithType: SocketGuild.ReorderRolesAsync
  fullName: Discord.WebSocket.SocketGuild.ReorderRolesAsync
- uid: IEnumerable{Discord.ReorderRoleProperties}
  commentId: '!:IEnumerable{Discord.ReorderRoleProperties}'
  definition: IEnumerable`1
  name: IEnumerable<ReorderRoleProperties>
  nameWithType: IEnumerable<ReorderRoleProperties>
  fullName: IEnumerable<Discord.ReorderRoleProperties>
  nameWithType.vb: IEnumerable(Of ReorderRoleProperties)
  fullName.vb: IEnumerable(Of Discord.ReorderRoleProperties)
  name.vb: IEnumerable(Of ReorderRoleProperties)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ReorderRoleProperties
    name: ReorderRoleProperties
    nameWithType: ReorderRoleProperties
    fullName: Discord.ReorderRoleProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ReorderRoleProperties
    name: ReorderRoleProperties
    nameWithType: ReorderRoleProperties
    fullName: Discord.ReorderRoleProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.LeaveAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.LeaveAsync
  name: LeaveAsync
  nameWithType: SocketGuild.LeaveAsync
  fullName: Discord.WebSocket.SocketGuild.LeaveAsync
- uid: Discord.WebSocket.SocketGuild.GetBansAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetBansAsync
  name: GetBansAsync
  nameWithType: SocketGuild.GetBansAsync
  fullName: Discord.WebSocket.SocketGuild.GetBansAsync
- uid: Task{IReadOnlyCollection{Discord.Rest.RestBan}}
  commentId: '!:Task{IReadOnlyCollection{Discord.Rest.RestBan}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<RestBan>>
  nameWithType: Task<IReadOnlyCollection<RestBan>>
  fullName: Task<IReadOnlyCollection<Discord.Rest.RestBan>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestBan))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.Rest.RestBan))
  name.vb: Task(Of IReadOnlyCollection(Of RestBan))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestBan
    name: RestBan
    nameWithType: RestBan
    fullName: Discord.Rest.RestBan
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestBan
    name: RestBan
    nameWithType: RestBan
    fullName: Discord.Rest.RestBan
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.GetBanAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetBanAsync
  name: GetBanAsync
  nameWithType: SocketGuild.GetBanAsync
  fullName: Discord.WebSocket.SocketGuild.GetBanAsync
- uid: Discord.IUser
  commentId: T:Discord.IUser
  parent: Discord
  name: IUser
  nameWithType: IUser
  fullName: Discord.IUser
- uid: Task{Discord.Rest.RestBan}
  commentId: '!:Task{Discord.Rest.RestBan}'
  definition: Task`1
  name: Task<RestBan>
  nameWithType: Task<RestBan>
  fullName: Task<Discord.Rest.RestBan>
  nameWithType.vb: Task(Of RestBan)
  fullName.vb: Task(Of Discord.Rest.RestBan)
  name.vb: Task(Of RestBan)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestBan
    name: RestBan
    nameWithType: RestBan
    fullName: Discord.Rest.RestBan
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestBan
    name: RestBan
    nameWithType: RestBan
    fullName: Discord.Rest.RestBan
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.AddBanAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.AddBanAsync
  name: AddBanAsync
  nameWithType: SocketGuild.AddBanAsync
  fullName: Discord.WebSocket.SocketGuild.AddBanAsync
- uid: Discord.WebSocket.SocketGuild.RemoveBanAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.RemoveBanAsync
  name: RemoveBanAsync
  nameWithType: SocketGuild.RemoveBanAsync
  fullName: Discord.WebSocket.SocketGuild.RemoveBanAsync
- uid: Discord.WebSocket.SocketGuild.GetChannel*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetChannel
  name: GetChannel
  nameWithType: SocketGuild.GetChannel
  fullName: Discord.WebSocket.SocketGuild.GetChannel
- uid: Discord.WebSocket.SocketGuild.GetTextChannel*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetTextChannel
  name: GetTextChannel
  nameWithType: SocketGuild.GetTextChannel
  fullName: Discord.WebSocket.SocketGuild.GetTextChannel
- uid: Discord.WebSocket.SocketGuild.GetVoiceChannel*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetVoiceChannel
  name: GetVoiceChannel
  nameWithType: SocketGuild.GetVoiceChannel
  fullName: Discord.WebSocket.SocketGuild.GetVoiceChannel
- uid: Discord.WebSocket.SocketGuild.GetCategoryChannel*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetCategoryChannel
  name: GetCategoryChannel
  nameWithType: SocketGuild.GetCategoryChannel
  fullName: Discord.WebSocket.SocketGuild.GetCategoryChannel
- uid: Discord.WebSocket.SocketCategoryChannel
  commentId: T:Discord.WebSocket.SocketCategoryChannel
  parent: Discord.WebSocket
  name: SocketCategoryChannel
  nameWithType: SocketCategoryChannel
  fullName: Discord.WebSocket.SocketCategoryChannel
- uid: Discord.WebSocket.SocketGuild.CreateTextChannelAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.CreateTextChannelAsync
  name: CreateTextChannelAsync
  nameWithType: SocketGuild.CreateTextChannelAsync
  fullName: Discord.WebSocket.SocketGuild.CreateTextChannelAsync
- uid: Action{Discord.TextChannelProperties}
  commentId: '!:Action{Discord.TextChannelProperties}'
  definition: Action`1
  name: Action<TextChannelProperties>
  nameWithType: Action<TextChannelProperties>
  fullName: Action<Discord.TextChannelProperties>
  nameWithType.vb: Action(Of TextChannelProperties)
  fullName.vb: Action(Of Discord.TextChannelProperties)
  name.vb: Action(Of TextChannelProperties)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.TextChannelProperties
    name: TextChannelProperties
    nameWithType: TextChannelProperties
    fullName: Discord.TextChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.TextChannelProperties
    name: TextChannelProperties
    nameWithType: TextChannelProperties
    fullName: Discord.TextChannelProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{Discord.Rest.RestTextChannel}
  commentId: '!:Task{Discord.Rest.RestTextChannel}'
  definition: Task`1
  name: Task<RestTextChannel>
  nameWithType: Task<RestTextChannel>
  fullName: Task<Discord.Rest.RestTextChannel>
  nameWithType.vb: Task(Of RestTextChannel)
  fullName.vb: Task(Of Discord.Rest.RestTextChannel)
  name.vb: Task(Of RestTextChannel)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestTextChannel
    name: RestTextChannel
    nameWithType: RestTextChannel
    fullName: Discord.Rest.RestTextChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestTextChannel
    name: RestTextChannel
    nameWithType: RestTextChannel
    fullName: Discord.Rest.RestTextChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.CreateVoiceChannelAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.CreateVoiceChannelAsync
  name: CreateVoiceChannelAsync
  nameWithType: SocketGuild.CreateVoiceChannelAsync
  fullName: Discord.WebSocket.SocketGuild.CreateVoiceChannelAsync
- uid: Action{Discord.VoiceChannelProperties}
  commentId: '!:Action{Discord.VoiceChannelProperties}'
  definition: Action`1
  name: Action<VoiceChannelProperties>
  nameWithType: Action<VoiceChannelProperties>
  fullName: Action<Discord.VoiceChannelProperties>
  nameWithType.vb: Action(Of VoiceChannelProperties)
  fullName.vb: Action(Of Discord.VoiceChannelProperties)
  name.vb: Action(Of VoiceChannelProperties)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.VoiceChannelProperties
    name: VoiceChannelProperties
    nameWithType: VoiceChannelProperties
    fullName: Discord.VoiceChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.VoiceChannelProperties
    name: VoiceChannelProperties
    nameWithType: VoiceChannelProperties
    fullName: Discord.VoiceChannelProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{Discord.Rest.RestVoiceChannel}
  commentId: '!:Task{Discord.Rest.RestVoiceChannel}'
  definition: Task`1
  name: Task<RestVoiceChannel>
  nameWithType: Task<RestVoiceChannel>
  fullName: Task<Discord.Rest.RestVoiceChannel>
  nameWithType.vb: Task(Of RestVoiceChannel)
  fullName.vb: Task(Of Discord.Rest.RestVoiceChannel)
  name.vb: Task(Of RestVoiceChannel)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestVoiceChannel
    name: RestVoiceChannel
    nameWithType: RestVoiceChannel
    fullName: Discord.Rest.RestVoiceChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestVoiceChannel
    name: RestVoiceChannel
    nameWithType: RestVoiceChannel
    fullName: Discord.Rest.RestVoiceChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.CreateCategoryChannelAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.CreateCategoryChannelAsync
  name: CreateCategoryChannelAsync
  nameWithType: SocketGuild.CreateCategoryChannelAsync
  fullName: Discord.WebSocket.SocketGuild.CreateCategoryChannelAsync
- uid: Action{Discord.GuildChannelProperties}
  commentId: '!:Action{Discord.GuildChannelProperties}'
  definition: Action`1
  name: Action<GuildChannelProperties>
  nameWithType: Action<GuildChannelProperties>
  fullName: Action<Discord.GuildChannelProperties>
  nameWithType.vb: Action(Of GuildChannelProperties)
  fullName.vb: Action(Of Discord.GuildChannelProperties)
  name.vb: Action(Of GuildChannelProperties)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildChannelProperties
    name: GuildChannelProperties
    nameWithType: GuildChannelProperties
    fullName: Discord.GuildChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildChannelProperties
    name: GuildChannelProperties
    nameWithType: GuildChannelProperties
    fullName: Discord.GuildChannelProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{Discord.Rest.RestCategoryChannel}
  commentId: '!:Task{Discord.Rest.RestCategoryChannel}'
  definition: Task`1
  name: Task<RestCategoryChannel>
  nameWithType: Task<RestCategoryChannel>
  fullName: Task<Discord.Rest.RestCategoryChannel>
  nameWithType.vb: Task(Of RestCategoryChannel)
  fullName.vb: Task(Of Discord.Rest.RestCategoryChannel)
  name.vb: Task(Of RestCategoryChannel)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestCategoryChannel
    name: RestCategoryChannel
    nameWithType: RestCategoryChannel
    fullName: Discord.Rest.RestCategoryChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestCategoryChannel
    name: RestCategoryChannel
    nameWithType: RestCategoryChannel
    fullName: Discord.Rest.RestCategoryChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.GetVoiceRegionsAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetVoiceRegionsAsync
  name: GetVoiceRegionsAsync
  nameWithType: SocketGuild.GetVoiceRegionsAsync
  fullName: Discord.WebSocket.SocketGuild.GetVoiceRegionsAsync
- uid: Task{IReadOnlyCollection{Discord.Rest.RestVoiceRegion}}
  commentId: '!:Task{IReadOnlyCollection{Discord.Rest.RestVoiceRegion}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<RestVoiceRegion>>
  nameWithType: Task<IReadOnlyCollection<RestVoiceRegion>>
  fullName: Task<IReadOnlyCollection<Discord.Rest.RestVoiceRegion>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestVoiceRegion))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.Rest.RestVoiceRegion))
  name.vb: Task(Of IReadOnlyCollection(Of RestVoiceRegion))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestVoiceRegion
    name: RestVoiceRegion
    nameWithType: RestVoiceRegion
    fullName: Discord.Rest.RestVoiceRegion
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestVoiceRegion
    name: RestVoiceRegion
    nameWithType: RestVoiceRegion
    fullName: Discord.Rest.RestVoiceRegion
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.GetIntegrationsAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetIntegrationsAsync
  name: GetIntegrationsAsync
  nameWithType: SocketGuild.GetIntegrationsAsync
  fullName: Discord.WebSocket.SocketGuild.GetIntegrationsAsync
- uid: Task{IReadOnlyCollection{Discord.Rest.RestGuildIntegration}}
  commentId: '!:Task{IReadOnlyCollection{Discord.Rest.RestGuildIntegration}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<RestGuildIntegration>>
  nameWithType: Task<IReadOnlyCollection<RestGuildIntegration>>
  fullName: Task<IReadOnlyCollection<Discord.Rest.RestGuildIntegration>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestGuildIntegration))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.Rest.RestGuildIntegration))
  name.vb: Task(Of IReadOnlyCollection(Of RestGuildIntegration))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestGuildIntegration
    name: RestGuildIntegration
    nameWithType: RestGuildIntegration
    fullName: Discord.Rest.RestGuildIntegration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestGuildIntegration
    name: RestGuildIntegration
    nameWithType: RestGuildIntegration
    fullName: Discord.Rest.RestGuildIntegration
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.CreateIntegrationAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.CreateIntegrationAsync
  name: CreateIntegrationAsync
  nameWithType: SocketGuild.CreateIntegrationAsync
  fullName: Discord.WebSocket.SocketGuild.CreateIntegrationAsync
- uid: Task{Discord.Rest.RestGuildIntegration}
  commentId: '!:Task{Discord.Rest.RestGuildIntegration}'
  definition: Task`1
  name: Task<RestGuildIntegration>
  nameWithType: Task<RestGuildIntegration>
  fullName: Task<Discord.Rest.RestGuildIntegration>
  nameWithType.vb: Task(Of RestGuildIntegration)
  fullName.vb: Task(Of Discord.Rest.RestGuildIntegration)
  name.vb: Task(Of RestGuildIntegration)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestGuildIntegration
    name: RestGuildIntegration
    nameWithType: RestGuildIntegration
    fullName: Discord.Rest.RestGuildIntegration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestGuildIntegration
    name: RestGuildIntegration
    nameWithType: RestGuildIntegration
    fullName: Discord.Rest.RestGuildIntegration
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.GetInvitesAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetInvitesAsync
  name: GetInvitesAsync
  nameWithType: SocketGuild.GetInvitesAsync
  fullName: Discord.WebSocket.SocketGuild.GetInvitesAsync
- uid: Task{IReadOnlyCollection{Discord.Rest.RestInviteMetadata}}
  commentId: '!:Task{IReadOnlyCollection{Discord.Rest.RestInviteMetadata}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<RestInviteMetadata>>
  nameWithType: Task<IReadOnlyCollection<RestInviteMetadata>>
  fullName: Task<IReadOnlyCollection<Discord.Rest.RestInviteMetadata>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestInviteMetadata))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.Rest.RestInviteMetadata))
  name.vb: Task(Of IReadOnlyCollection(Of RestInviteMetadata))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestInviteMetadata
    name: RestInviteMetadata
    nameWithType: RestInviteMetadata
    fullName: Discord.Rest.RestInviteMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestInviteMetadata
    name: RestInviteMetadata
    nameWithType: RestInviteMetadata
    fullName: Discord.Rest.RestInviteMetadata
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.GetVanityInviteAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetVanityInviteAsync
  name: GetVanityInviteAsync
  nameWithType: SocketGuild.GetVanityInviteAsync
  fullName: Discord.WebSocket.SocketGuild.GetVanityInviteAsync
- uid: Task{Discord.Rest.RestInviteMetadata}
  commentId: '!:Task{Discord.Rest.RestInviteMetadata}'
  definition: Task`1
  name: Task<RestInviteMetadata>
  nameWithType: Task<RestInviteMetadata>
  fullName: Task<Discord.Rest.RestInviteMetadata>
  nameWithType.vb: Task(Of RestInviteMetadata)
  fullName.vb: Task(Of Discord.Rest.RestInviteMetadata)
  name.vb: Task(Of RestInviteMetadata)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestInviteMetadata
    name: RestInviteMetadata
    nameWithType: RestInviteMetadata
    fullName: Discord.Rest.RestInviteMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestInviteMetadata
    name: RestInviteMetadata
    nameWithType: RestInviteMetadata
    fullName: Discord.Rest.RestInviteMetadata
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.GetRole*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetRole
  name: GetRole
  nameWithType: SocketGuild.GetRole
  fullName: Discord.WebSocket.SocketGuild.GetRole
- uid: Discord.WebSocket.SocketGuild.CreateRoleAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.CreateRoleAsync
  name: CreateRoleAsync
  nameWithType: SocketGuild.CreateRoleAsync
  fullName: Discord.WebSocket.SocketGuild.CreateRoleAsync
- uid: System.Nullable{Discord.GuildPermissions}
  commentId: '!:System.Nullable{Discord.GuildPermissions}'
  definition: System.Nullable`1
  name: Nullable<GuildPermissions>
  nameWithType: Nullable<GuildPermissions>
  fullName: System.Nullable<Discord.GuildPermissions>
  nameWithType.vb: Nullable(Of GuildPermissions)
  fullName.vb: System.Nullable(Of Discord.GuildPermissions)
  name.vb: Nullable(Of GuildPermissions)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildPermissions
    name: GuildPermissions
    nameWithType: GuildPermissions
    fullName: Discord.GuildPermissions
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildPermissions
    name: GuildPermissions
    nameWithType: GuildPermissions
    fullName: Discord.GuildPermissions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{Discord.Color}
  commentId: '!:System.Nullable{Discord.Color}'
  definition: System.Nullable`1
  name: Nullable<Color>
  nameWithType: Nullable<Color>
  fullName: System.Nullable<Discord.Color>
  nameWithType.vb: Nullable(Of Color)
  fullName.vb: System.Nullable(Of Discord.Color)
  name.vb: Nullable(Of Color)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Color
    name: Color
    nameWithType: Color
    fullName: Discord.Color
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Color
    name: Color
    nameWithType: Color
    fullName: Discord.Color
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{Discord.Rest.RestRole}
  commentId: '!:Task{Discord.Rest.RestRole}'
  definition: Task`1
  name: Task<RestRole>
  nameWithType: Task<RestRole>
  fullName: Task<Discord.Rest.RestRole>
  nameWithType.vb: Task(Of RestRole)
  fullName.vb: Task(Of Discord.Rest.RestRole)
  name.vb: Task(Of RestRole)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestRole
    name: RestRole
    nameWithType: RestRole
    fullName: Discord.Rest.RestRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestRole
    name: RestRole
    nameWithType: RestRole
    fullName: Discord.Rest.RestRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.AddGuildUserAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.AddGuildUserAsync
  name: AddGuildUserAsync
  nameWithType: SocketGuild.AddGuildUserAsync
  fullName: Discord.WebSocket.SocketGuild.AddGuildUserAsync
- uid: Action{Discord.AddGuildUserProperties}
  commentId: '!:Action{Discord.AddGuildUserProperties}'
  definition: Action`1
  name: Action<AddGuildUserProperties>
  nameWithType: Action<AddGuildUserProperties>
  fullName: Action<Discord.AddGuildUserProperties>
  nameWithType.vb: Action(Of AddGuildUserProperties)
  fullName.vb: Action(Of Discord.AddGuildUserProperties)
  name.vb: Action(Of AddGuildUserProperties)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.AddGuildUserProperties
    name: AddGuildUserProperties
    nameWithType: AddGuildUserProperties
    fullName: Discord.AddGuildUserProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.AddGuildUserProperties
    name: AddGuildUserProperties
    nameWithType: AddGuildUserProperties
    fullName: Discord.AddGuildUserProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{Discord.Rest.RestGuildUser}
  commentId: '!:Task{Discord.Rest.RestGuildUser}'
  definition: Task`1
  name: Task<RestGuildUser>
  nameWithType: Task<RestGuildUser>
  fullName: Task<Discord.Rest.RestGuildUser>
  nameWithType.vb: Task(Of RestGuildUser)
  fullName.vb: Task(Of Discord.Rest.RestGuildUser)
  name.vb: Task(Of RestGuildUser)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestGuildUser
    name: RestGuildUser
    nameWithType: RestGuildUser
    fullName: Discord.Rest.RestGuildUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestGuildUser
    name: RestGuildUser
    nameWithType: RestGuildUser
    fullName: Discord.Rest.RestGuildUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.GetUser*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetUser
  name: GetUser
  nameWithType: SocketGuild.GetUser
  fullName: Discord.WebSocket.SocketGuild.GetUser
- uid: Discord.WebSocket.SocketGuild.PruneUsersAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.PruneUsersAsync
  name: PruneUsersAsync
  nameWithType: SocketGuild.PruneUsersAsync
  fullName: Discord.WebSocket.SocketGuild.PruneUsersAsync
- uid: Task{System.Int32}
  commentId: '!:Task{System.Int32}'
  definition: Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.DownloadUsersAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.DownloadUsersAsync
  name: DownloadUsersAsync
  nameWithType: SocketGuild.DownloadUsersAsync
  fullName: Discord.WebSocket.SocketGuild.DownloadUsersAsync
- uid: Discord.WebSocket.SocketGuild.GetAuditLogsAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetAuditLogsAsync
  name: GetAuditLogsAsync
  nameWithType: SocketGuild.GetAuditLogsAsync
  fullName: Discord.WebSocket.SocketGuild.GetAuditLogsAsync
- uid: System.Nullable{Discord.ActionType}
  commentId: '!:System.Nullable{Discord.ActionType}'
  definition: System.Nullable`1
  name: Nullable<ActionType>
  nameWithType: Nullable<ActionType>
  fullName: System.Nullable<Discord.ActionType>
  nameWithType.vb: Nullable(Of ActionType)
  fullName.vb: System.Nullable(Of Discord.ActionType)
  name.vb: Nullable(Of ActionType)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: Discord.ActionType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ActionType
    name: ActionType
    nameWithType: ActionType
    fullName: Discord.ActionType
  - name: )
    nameWithType: )
    fullName: )
- uid: IAsyncEnumerable{IReadOnlyCollection{Discord.Rest.RestAuditLogEntry}}
  commentId: '!:IAsyncEnumerable{IReadOnlyCollection{Discord.Rest.RestAuditLogEntry}}'
  definition: IAsyncEnumerable`1
  name: IAsyncEnumerable<IReadOnlyCollection<RestAuditLogEntry>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<RestAuditLogEntry>>
  fullName: IAsyncEnumerable<IReadOnlyCollection<Discord.Rest.RestAuditLogEntry>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of RestAuditLogEntry))
  fullName.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of Discord.Rest.RestAuditLogEntry))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of RestAuditLogEntry))
  spec.csharp:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestAuditLogEntry
    name: RestAuditLogEntry
    nameWithType: RestAuditLogEntry
    fullName: Discord.Rest.RestAuditLogEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestAuditLogEntry
    name: RestAuditLogEntry
    nameWithType: RestAuditLogEntry
    fullName: Discord.Rest.RestAuditLogEntry
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IAsyncEnumerable`1
  isExternal: true
  name: IAsyncEnumerable<>
  nameWithType: IAsyncEnumerable<>
  fullName: IAsyncEnumerable<>
  nameWithType.vb: IAsyncEnumerable(Of )
  fullName.vb: IAsyncEnumerable(Of )
  name.vb: IAsyncEnumerable(Of )
  spec.csharp:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.GetWebhookAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetWebhookAsync
  name: GetWebhookAsync
  nameWithType: SocketGuild.GetWebhookAsync
  fullName: Discord.WebSocket.SocketGuild.GetWebhookAsync
- uid: Task{Discord.Rest.RestWebhook}
  commentId: '!:Task{Discord.Rest.RestWebhook}'
  definition: Task`1
  name: Task<RestWebhook>
  nameWithType: Task<RestWebhook>
  fullName: Task<Discord.Rest.RestWebhook>
  nameWithType.vb: Task(Of RestWebhook)
  fullName.vb: Task(Of Discord.Rest.RestWebhook)
  name.vb: Task(Of RestWebhook)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestWebhook
    name: RestWebhook
    nameWithType: RestWebhook
    fullName: Discord.Rest.RestWebhook
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestWebhook
    name: RestWebhook
    nameWithType: RestWebhook
    fullName: Discord.Rest.RestWebhook
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.GetWebhooksAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetWebhooksAsync
  name: GetWebhooksAsync
  nameWithType: SocketGuild.GetWebhooksAsync
  fullName: Discord.WebSocket.SocketGuild.GetWebhooksAsync
- uid: Task{IReadOnlyCollection{Discord.Rest.RestWebhook}}
  commentId: '!:Task{IReadOnlyCollection{Discord.Rest.RestWebhook}}'
  definition: Task`1
  name: Task<IReadOnlyCollection<RestWebhook>>
  nameWithType: Task<IReadOnlyCollection<RestWebhook>>
  fullName: Task<IReadOnlyCollection<Discord.Rest.RestWebhook>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of RestWebhook))
  fullName.vb: Task(Of IReadOnlyCollection(Of Discord.Rest.RestWebhook))
  name.vb: Task(Of IReadOnlyCollection(Of RestWebhook))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestWebhook
    name: RestWebhook
    nameWithType: RestWebhook
    fullName: Discord.Rest.RestWebhook
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestWebhook
    name: RestWebhook
    nameWithType: RestWebhook
    fullName: Discord.Rest.RestWebhook
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.GetEmoteAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.GetEmoteAsync
  name: GetEmoteAsync
  nameWithType: SocketGuild.GetEmoteAsync
  fullName: Discord.WebSocket.SocketGuild.GetEmoteAsync
- uid: Task{Discord.GuildEmote}
  commentId: '!:Task{Discord.GuildEmote}'
  definition: Task`1
  name: Task<GuildEmote>
  nameWithType: Task<GuildEmote>
  fullName: Task<Discord.GuildEmote>
  nameWithType.vb: Task(Of GuildEmote)
  fullName.vb: Task(Of Discord.GuildEmote)
  name.vb: Task(Of GuildEmote)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildEmote
    name: GuildEmote
    nameWithType: GuildEmote
    fullName: Discord.GuildEmote
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildEmote
    name: GuildEmote
    nameWithType: GuildEmote
    fullName: Discord.GuildEmote
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.CreateEmoteAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.CreateEmoteAsync
  name: CreateEmoteAsync
  nameWithType: SocketGuild.CreateEmoteAsync
  fullName: Discord.WebSocket.SocketGuild.CreateEmoteAsync
- uid: Discord.Image
  commentId: T:Discord.Image
  parent: Discord
  name: Image
  nameWithType: Image
  fullName: Discord.Image
- uid: Discord.Optional{IEnumerable{Discord.IRole}}
  commentId: T:Discord.Optional{IEnumerable{Discord.IRole}}
  parent: Discord
  definition: Discord.Optional`1
  name: Optional<IEnumerable<IRole>>
  nameWithType: Optional<IEnumerable<IRole>>
  fullName: Discord.Optional<IEnumerable<Discord.IRole>>
  nameWithType.vb: Optional(Of IEnumerable(Of IRole))
  fullName.vb: Discord.Optional(Of IEnumerable(Of Discord.IRole))
  name.vb: Optional(Of IEnumerable(Of IRole))
  spec.csharp:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: <
    nameWithType: <
    fullName: <
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Optional`1
  commentId: T:Discord.Optional`1
  parent: Discord
  name: Optional<T>
  nameWithType: Optional<T>
  fullName: Discord.Optional<T>
  nameWithType.vb: Optional(Of T)
  fullName.vb: Discord.Optional(Of T)
  name.vb: Optional(Of T)
  spec.csharp:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Optional`1
    name: Optional
    nameWithType: Optional
    fullName: Discord.Optional
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.ModifyEmoteAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.ModifyEmoteAsync
  name: ModifyEmoteAsync
  nameWithType: SocketGuild.ModifyEmoteAsync
  fullName: Discord.WebSocket.SocketGuild.ModifyEmoteAsync
- uid: Discord.GuildEmote
  commentId: T:Discord.GuildEmote
  parent: Discord
  name: GuildEmote
  nameWithType: GuildEmote
  fullName: Discord.GuildEmote
- uid: Action{Discord.EmoteProperties}
  commentId: '!:Action{Discord.EmoteProperties}'
  definition: Action`1
  name: Action<EmoteProperties>
  nameWithType: Action<EmoteProperties>
  fullName: Action<Discord.EmoteProperties>
  nameWithType.vb: Action(Of EmoteProperties)
  fullName.vb: Action(Of Discord.EmoteProperties)
  name.vb: Action(Of EmoteProperties)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.EmoteProperties
    name: EmoteProperties
    nameWithType: EmoteProperties
    fullName: Discord.EmoteProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.EmoteProperties
    name: EmoteProperties
    nameWithType: EmoteProperties
    fullName: Discord.EmoteProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketGuild.DeleteEmoteAsync*
  commentId: Overload:Discord.WebSocket.SocketGuild.DeleteEmoteAsync
  name: DeleteEmoteAsync
  nameWithType: SocketGuild.DeleteEmoteAsync
  fullName: Discord.WebSocket.SocketGuild.DeleteEmoteAsync
- uid: Discord.WebSocket.SocketGuild.Name
  commentId: P:Discord.WebSocket.SocketGuild.Name
  isExternal: true
- uid: Discord.WebSocket.SocketGuild.ToString*
  commentId: Overload:Discord.WebSocket.SocketGuild.ToString
  name: ToString
  nameWithType: SocketGuild.ToString
  fullName: Discord.WebSocket.SocketGuild.ToString
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#AudioClient*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#AudioClient
  name: IGuild.AudioClient
  nameWithType: SocketGuild.IGuild.AudioClient
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.AudioClient
  nameWithType.vb: SocketGuild.Discord.IGuild.AudioClient
  name.vb: Discord.IGuild.AudioClient
- uid: Discord.IGuild.AudioClient
  commentId: P:Discord.IGuild.AudioClient
  parent: Discord.IGuild
  name: AudioClient
  nameWithType: IGuild.AudioClient
  fullName: Discord.IGuild.AudioClient
- uid: Discord.WebSocket.SocketGuild.Discord#IGuild#EveryoneRole*
  commentId: Overload:Discord.WebSocket.SocketGuild.Discord#IGuild#EveryoneRole
  name: IGuild.EveryoneRole
  nameWithType: SocketGuild.IGuild.EveryoneRole
  fullName: Discord.WebSocket.SocketGuild.Discord.IGuild.EveryoneRole
  nameWithType.vb: SocketGuild.Discord.IGuild.EveryoneRole
  name.vb: Discord.IGuild.EveryoneRole
- uid: Discord.IGuild.EveryoneRole
  commentId: P:Discord.IGuild.EveryoneRole
  parent: Discord.IGuild
  name: EveryoneRole
  nameWithType: IGuild.EveryoneRole
  fullName: Discord.IGuild.EveryoneRole
- uid: Discord.IRole
  commentId: T:Discord.IRole
  parent: Discord
  name: IRole
  nameWithType: IRole
  fullName: Discord.IRole
