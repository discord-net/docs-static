### YamlMime:ManagedReference
items:
- uid: Discord.ITag
  commentId: T:Discord.ITag
  id: ITag
  parent: Discord
  children:
  - Discord.ITag.Index
  - Discord.ITag.Key
  - Discord.ITag.Length
  - Discord.ITag.Type
  - Discord.ITag.Value
  langs:
  - csharp
  - vb
  name: ITag
  nameWithType: ITag
  fullName: Discord.ITag
  type: Interface
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/ITag.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ITag
    path: ../src/Discord.Net.Core/Entities/Messages/ITag.cs
    startLine: 2
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  syntax:
    content: public interface ITag
    content.vb: Public Interface ITag
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Discord.ITag.Index
  commentId: P:Discord.ITag.Index
  id: Index
  parent: Discord.ITag
  langs:
  - csharp
  - vb
  name: Index
  nameWithType: ITag.Index
  fullName: Discord.ITag.Index
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/ITag.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Index
    path: ../src/Discord.Net.Core/Entities/Messages/ITag.cs
    startLine: 4
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  syntax:
    content: int Index { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property Index As Integer
  overload: Discord.ITag.Index*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.ITag.Length
  commentId: P:Discord.ITag.Length
  id: Length
  parent: Discord.ITag
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: ITag.Length
  fullName: Discord.ITag.Length
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/ITag.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Length
    path: ../src/Discord.Net.Core/Entities/Messages/ITag.cs
    startLine: 5
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  syntax:
    content: int Length { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property Length As Integer
  overload: Discord.ITag.Length*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.ITag.Type
  commentId: P:Discord.ITag.Type
  id: Type
  parent: Discord.ITag
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: ITag.Type
  fullName: Discord.ITag.Type
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/ITag.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Type
    path: ../src/Discord.Net.Core/Entities/Messages/ITag.cs
    startLine: 6
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  syntax:
    content: TagType Type { get; }
    parameters: []
    return:
      type: Discord.TagType
    content.vb: ReadOnly Property Type As TagType
  overload: Discord.ITag.Type*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.ITag.Key
  commentId: P:Discord.ITag.Key
  id: Key
  parent: Discord.ITag
  langs:
  - csharp
  - vb
  name: Key
  nameWithType: ITag.Key
  fullName: Discord.ITag.Key
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/ITag.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Key
    path: ../src/Discord.Net.Core/Entities/Messages/ITag.cs
    startLine: 7
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  syntax:
    content: ulong Key { get; }
    parameters: []
    return:
      type: System.UInt64
    content.vb: ReadOnly Property Key As ULong
  overload: Discord.ITag.Key*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.ITag.Value
  commentId: P:Discord.ITag.Value
  id: Value
  parent: Discord.ITag
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: ITag.Value
  fullName: Discord.ITag.Value
  type: Property
  source:
    remote:
      path: src/Discord.Net.Core/Entities/Messages/ITag.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Value
    path: ../src/Discord.Net.Core/Entities/Messages/ITag.cs
    startLine: 8
  assemblies:
  - Discord.Net.Core
  namespace: Discord
  syntax:
    content: object Value { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: ReadOnly Property Value As Object
  overload: Discord.ITag.Value*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.ITag.Index*
  commentId: Overload:Discord.ITag.Index
  name: Index
  nameWithType: ITag.Index
  fullName: Discord.ITag.Index
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Discord.ITag.Length*
  commentId: Overload:Discord.ITag.Length
  name: Length
  nameWithType: ITag.Length
  fullName: Discord.ITag.Length
- uid: Discord.ITag.Type*
  commentId: Overload:Discord.ITag.Type
  name: Type
  nameWithType: ITag.Type
  fullName: Discord.ITag.Type
- uid: Discord.TagType
  commentId: T:Discord.TagType
  parent: Discord
  name: TagType
  nameWithType: TagType
  fullName: Discord.TagType
- uid: Discord.ITag.Key*
  commentId: Overload:Discord.ITag.Key
  name: Key
  nameWithType: ITag.Key
  fullName: Discord.ITag.Key
- uid: System.UInt64
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Discord.ITag.Value*
  commentId: Overload:Discord.ITag.Value
  name: Value
  nameWithType: ITag.Value
  fullName: Discord.ITag.Value
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
