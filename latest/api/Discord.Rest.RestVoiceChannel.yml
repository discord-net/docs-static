### YamlMime:ManagedReference
items:
- uid: Discord.Rest.RestVoiceChannel
  commentId: T:Discord.Rest.RestVoiceChannel
  id: RestVoiceChannel
  parent: Discord.Rest
  children:
  - Discord.Rest.RestVoiceChannel.Bitrate
  - Discord.Rest.RestVoiceChannel.CategoryId
  - Discord.Rest.RestVoiceChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
  - Discord.Rest.RestVoiceChannel.Discord#IAudioChannel#ConnectAsync(System.Boolean,System.Boolean,System.Boolean)
  - Discord.Rest.RestVoiceChannel.Discord#IAudioChannel#DisconnectAsync
  - Discord.Rest.RestVoiceChannel.Discord#IGuildChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  - Discord.Rest.RestVoiceChannel.Discord#IGuildChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.Rest.RestVoiceChannel.Discord#INestedChannel#GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.Rest.RestVoiceChannel.GetCategoryAsync(Discord.RequestOptions)
  - Discord.Rest.RestVoiceChannel.GetInvitesAsync(Discord.RequestOptions)
  - Discord.Rest.RestVoiceChannel.ModifyAsync(System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  - Discord.Rest.RestVoiceChannel.SyncPermissionsAsync(Discord.RequestOptions)
  - Discord.Rest.RestVoiceChannel.UserLimit
  langs:
  - csharp
  - vb
  name: RestVoiceChannel
  nameWithType: RestVoiceChannel
  fullName: Discord.Rest.RestVoiceChannel
  type: Class
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestVoiceChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RestVoiceChannel
    path: ../src/Discord.Net.Rest/Entities/Channels/RestVoiceChannel.cs
    startLine: 13
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nRepresents a REST-based voice channel in a guild.\n"
  example: []
  syntax:
    content: 'public class RestVoiceChannel : RestGuildChannel, IUpdateable, IVoiceChannel, INestedChannel, IGuildChannel, IDeletable, IRestAudioChannel, IAudioChannel, IChannel, ISnowflakeEntity, IEntity<ulong>'
    content.vb: >-
      Public Class RestVoiceChannel
          Inherits RestGuildChannel
          Implements IUpdateable, IVoiceChannel, INestedChannel, IGuildChannel, IDeletable, IRestAudioChannel, IAudioChannel, IChannel, ISnowflakeEntity, IEntity(Of ULong)
  inheritance:
  - System.Object
  - Discord.Rest.RestEntity{System.UInt64}
  - Discord.Rest.RestChannel
  - Discord.Rest.RestGuildChannel
  implements:
  - Discord.IUpdateable
  - Discord.IVoiceChannel
  - Discord.INestedChannel
  - Discord.IGuildChannel
  - Discord.IDeletable
  - Discord.Rest.IRestAudioChannel
  - Discord.IAudioChannel
  - Discord.IChannel
  - Discord.ISnowflakeEntity
  - Discord.IEntity{System.UInt64}
  inheritedMembers:
  - Discord.Rest.RestGuildChannel.PermissionOverwrites
  - Discord.Rest.RestGuildChannel.Name
  - Discord.Rest.RestGuildChannel.Position
  - Discord.Rest.RestGuildChannel.GuildId
  - Discord.Rest.RestGuildChannel.UpdateAsync(Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.ModifyAsync(System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.DeleteAsync(Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IUser)
  - Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IRole)
  - Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.ToString
  - Discord.Rest.RestGuildChannel.Discord#IGuildChannel#Guild
  - Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IRole)
  - Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IUser)
  - Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  - Discord.Rest.RestGuildChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  - Discord.Rest.RestChannel.CreatedAt
  - Discord.Rest.RestChannel.Discord#IChannel#Name
  - Discord.Rest.RestEntity{System.UInt64}.Id
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.Rest.RestVoiceChannel.Bitrate
  commentId: P:Discord.Rest.RestVoiceChannel.Bitrate
  id: Bitrate
  parent: Discord.Rest.RestVoiceChannel
  langs:
  - csharp
  - vb
  name: Bitrate
  nameWithType: RestVoiceChannel.Bitrate
  fullName: Discord.Rest.RestVoiceChannel.Bitrate
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestVoiceChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Bitrate
    path: ../src/Discord.Net.Rest/Entities/Channels/RestVoiceChannel.cs
    startLine: 17
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the bit-rate that the clients in this voice channel are requested to use.\n"
  example: []
  syntax:
    content: public int Bitrate { get; }
    parameters: []
    return:
      type: System.Int32
      description: "\nAn <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> representing the bit-rate (bps) that this voice channel defines and requests the\nclient(s) to use.\n"
    content.vb: Public ReadOnly Property Bitrate As Integer
  overload: Discord.Rest.RestVoiceChannel.Bitrate*
  implements:
  - Discord.IVoiceChannel.Bitrate
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestVoiceChannel.UserLimit
  commentId: P:Discord.Rest.RestVoiceChannel.UserLimit
  id: UserLimit
  parent: Discord.Rest.RestVoiceChannel
  langs:
  - csharp
  - vb
  name: UserLimit
  nameWithType: RestVoiceChannel.UserLimit
  fullName: Discord.Rest.RestVoiceChannel.UserLimit
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestVoiceChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: UserLimit
    path: ../src/Discord.Net.Rest/Entities/Channels/RestVoiceChannel.cs
    startLine: 19
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the max number of users allowed to be connected to this channel at once.\n"
  example: []
  syntax:
    content: public int? UserLimit { get; }
    parameters: []
    return:
      type: System.Nullable{System.Int32}
      description: "\nAn <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> representing the maximum number of users that are allowed to be connected to this\nchannel at once; <code>null</code> if a limit is not set.\n"
    content.vb: Public ReadOnly Property UserLimit As Integer?
  overload: Discord.Rest.RestVoiceChannel.UserLimit*
  implements:
  - Discord.IVoiceChannel.UserLimit
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestVoiceChannel.CategoryId
  commentId: P:Discord.Rest.RestVoiceChannel.CategoryId
  id: CategoryId
  parent: Discord.Rest.RestVoiceChannel
  langs:
  - csharp
  - vb
  name: CategoryId
  nameWithType: RestVoiceChannel.CategoryId
  fullName: Discord.Rest.RestVoiceChannel.CategoryId
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestVoiceChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CategoryId
    path: ../src/Discord.Net.Rest/Entities/Channels/RestVoiceChannel.cs
    startLine: 21
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the parent (category) ID of this channel in the guild&apos;s channel list.\n"
  example: []
  syntax:
    content: public ulong? CategoryId { get; }
    parameters: []
    return:
      type: System.Nullable{System.UInt64}
      description: "\nA <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> representing the snowflake identifier of the parent of this channel; \n<code>null</code> if none is set.\n"
    content.vb: Public ReadOnly Property CategoryId As ULong?
  overload: Discord.Rest.RestVoiceChannel.CategoryId*
  implements:
  - Discord.INestedChannel.CategoryId
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestVoiceChannel.ModifyAsync(System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestVoiceChannel.ModifyAsync(System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  id: ModifyAsync(System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  parent: Discord.Rest.RestVoiceChannel
  langs:
  - csharp
  - vb
  name: ModifyAsync(Action<VoiceChannelProperties>, RequestOptions)
  nameWithType: RestVoiceChannel.ModifyAsync(Action<VoiceChannelProperties>, RequestOptions)
  fullName: Discord.Rest.RestVoiceChannel.ModifyAsync(System.Action<Discord.VoiceChannelProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestVoiceChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ModifyAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestVoiceChannel.cs
    startLine: 43
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nModifies this voice channel.\n"
  example: []
  syntax:
    content: public Task ModifyAsync(Action<VoiceChannelProperties> func, RequestOptions options = null)
    parameters:
    - id: func
      type: System.Action{Discord.VoiceChannelProperties}
      description: The properties to modify the channel with.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous modification operation.\n"
    content.vb: Public Function ModifyAsync(func As Action(Of VoiceChannelProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestVoiceChannel.ModifyAsync*
  seealso:
  - linkId: Discord.VoiceChannelProperties
    commentId: T:Discord.VoiceChannelProperties
  implements:
  - Discord.IVoiceChannel.ModifyAsync(System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  nameWithType.vb: RestVoiceChannel.ModifyAsync(Action(Of VoiceChannelProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestVoiceChannel.ModifyAsync(System.Action(Of Discord.VoiceChannelProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of VoiceChannelProperties), RequestOptions)
- uid: Discord.Rest.RestVoiceChannel.GetCategoryAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestVoiceChannel.GetCategoryAsync(Discord.RequestOptions)
  id: GetCategoryAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestVoiceChannel
  langs:
  - csharp
  - vb
  name: GetCategoryAsync(RequestOptions)
  nameWithType: RestVoiceChannel.GetCategoryAsync(RequestOptions)
  fullName: Discord.Rest.RestVoiceChannel.GetCategoryAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestVoiceChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetCategoryAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestVoiceChannel.cs
    startLine: 57
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the parent (category) channel of this channel.\n"
  example: []
  syntax:
    content: public Task<ICategoryChannel> GetCategoryAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.ICategoryChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains the category channel\nrepresenting the parent of this channel; <code>null</code> if none is set.\n"
    content.vb: Public Function GetCategoryAsync(options As RequestOptions = Nothing) As Task(Of ICategoryChannel)
  overload: Discord.Rest.RestVoiceChannel.GetCategoryAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestVoiceChannel.SyncPermissionsAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestVoiceChannel.SyncPermissionsAsync(Discord.RequestOptions)
  id: SyncPermissionsAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestVoiceChannel
  langs:
  - csharp
  - vb
  name: SyncPermissionsAsync(RequestOptions)
  nameWithType: RestVoiceChannel.SyncPermissionsAsync(RequestOptions)
  fullName: Discord.Rest.RestVoiceChannel.SyncPermissionsAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestVoiceChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SyncPermissionsAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestVoiceChannel.cs
    startLine: 60
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nSyncs the permissions of this nested channel with its parent&apos;s.\n"
  example: []
  syntax:
    content: public Task SyncPermissionsAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous operation for syncing channel permissions with its parent&apos;s.\n"
    content.vb: Public Function SyncPermissionsAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestVoiceChannel.SyncPermissionsAsync*
  implements:
  - Discord.INestedChannel.SyncPermissionsAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestVoiceChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestVoiceChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
  id: CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
  parent: Discord.Rest.RestVoiceChannel
  langs:
  - csharp
  - vb
  name: CreateInviteAsync(Nullable<Int32>, Nullable<Int32>, Boolean, Boolean, RequestOptions)
  nameWithType: RestVoiceChannel.CreateInviteAsync(Nullable<Int32>, Nullable<Int32>, Boolean, Boolean, RequestOptions)
  fullName: Discord.Rest.RestVoiceChannel.CreateInviteAsync(System.Nullable<System.Int32>, System.Nullable<System.Int32>, System.Boolean, System.Boolean, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestVoiceChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: CreateInviteAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestVoiceChannel.cs
    startLine: 65
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nCreates a new invite to this channel.\n"
  example: []
  syntax:
    content: public Task<IInviteMetadata> CreateInviteAsync(int? maxAge, int? maxUses = default(int? ), bool isTemporary = false, bool isUnique = false, RequestOptions options = null)
    parameters:
    - id: maxAge
      type: System.Nullable{System.Int32}
      description: The time (in seconds) until the invite expires. Set to <code>null</code> to never expire.
    - id: maxUses
      type: System.Nullable{System.Int32}
      description: The max amount of times this invite may be used. Set to <code>null</code> to have unlimited uses.
    - id: isTemporary
      type: System.Boolean
      description: If <code>true</code>, the user accepting this invite will be kicked from the guild after closing their client.
    - id: isUnique
      type: System.Boolean
      description: If <code>true</code>, don&apos;t try to reuse a similar invite (useful for creating many unique one time use invites).
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IInviteMetadata}
      description: "\nA task that represents the asynchronous invite creation operation. The task result contains an invite\nmetadata object containing information for the created invite.\n"
    content.vb: Public Function CreateInviteAsync(maxAge As Integer?, maxUses As Integer? = Nothing, isTemporary As Boolean = False, isUnique As Boolean = False, options As RequestOptions = Nothing) As Task(Of IInviteMetadata)
  overload: Discord.Rest.RestVoiceChannel.CreateInviteAsync*
  implements:
  - Discord.INestedChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
  nameWithType.vb: RestVoiceChannel.CreateInviteAsync(Nullable(Of Int32), Nullable(Of Int32), Boolean, Boolean, RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestVoiceChannel.CreateInviteAsync(System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), System.Boolean, System.Boolean, Discord.RequestOptions)
  name.vb: CreateInviteAsync(Nullable(Of Int32), Nullable(Of Int32), Boolean, Boolean, RequestOptions)
- uid: Discord.Rest.RestVoiceChannel.GetInvitesAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestVoiceChannel.GetInvitesAsync(Discord.RequestOptions)
  id: GetInvitesAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestVoiceChannel
  langs:
  - csharp
  - vb
  name: GetInvitesAsync(RequestOptions)
  nameWithType: RestVoiceChannel.GetInvitesAsync(RequestOptions)
  fullName: Discord.Rest.RestVoiceChannel.GetInvitesAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestVoiceChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetInvitesAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestVoiceChannel.cs
    startLine: 68
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of all invites to this channel.\n"
  example: []
  syntax:
    content: public Task<IReadOnlyCollection<IInviteMetadata>> GetInvitesAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IInviteMetadata}}
      description: "\nA task that represents the asynchronous get operation. The task result contains a read-only collection\nof invite metadata that are created for this channel.\n"
    content.vb: Public Function GetInvitesAsync(options As RequestOptions = Nothing) As Task(Of IReadOnlyCollection(Of IInviteMetadata))
  overload: Discord.Rest.RestVoiceChannel.GetInvitesAsync*
  implements:
  - Discord.INestedChannel.GetInvitesAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestVoiceChannel.Discord#IAudioChannel#ConnectAsync(System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Discord.Rest.RestVoiceChannel.Discord#IAudioChannel#ConnectAsync(System.Boolean,System.Boolean,System.Boolean)
  id: Discord#IAudioChannel#ConnectAsync(System.Boolean,System.Boolean,System.Boolean)
  isEii: true
  parent: Discord.Rest.RestVoiceChannel
  langs:
  - csharp
  - vb
  name: IAudioChannel.ConnectAsync(Boolean, Boolean, Boolean)
  nameWithType: RestVoiceChannel.IAudioChannel.ConnectAsync(Boolean, Boolean, Boolean)
  fullName: Discord.Rest.RestVoiceChannel.Discord.IAudioChannel.ConnectAsync(System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestVoiceChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IAudioChannel.ConnectAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestVoiceChannel.cs
    startLine: 76
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nConnects to this audio channel.\n"
  example: []
  syntax:
    content: Task<IAudioClient> IAudioChannel.ConnectAsync(bool selfDeaf, bool selfMute, bool external)
    parameters:
    - id: selfDeaf
      type: System.Boolean
      description: Determines whether the client should deaf itself upon connection.
    - id: selfMute
      type: System.Boolean
      description: Determines whether the client should mute itself upon connection.
    - id: external
      type: System.Boolean
      description: Determines whether the audio client is an external one or not.
    return:
      type: System.Threading.Tasks.Task{Discord.Audio.IAudioClient}
      description: "\nA task representing the asynchronous connection operation. The task result contains the\n<xref href=\"Discord.Audio.IAudioClient\" data-throw-if-not-resolved=\"false\"></xref> responsible for the connection.\n"
    content.vb: Function Discord.IAudioChannel.ConnectAsync(selfDeaf As Boolean, selfMute As Boolean, external As Boolean) As Task(Of IAudioClient) Implements IAudioChannel.ConnectAsync
  overload: Discord.Rest.RestVoiceChannel.Discord#IAudioChannel#ConnectAsync*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Connecting to a REST-based channel is not supported.
  implements:
  - Discord.IAudioChannel.ConnectAsync(System.Boolean,System.Boolean,System.Boolean)
  nameWithType.vb: RestVoiceChannel.Discord.IAudioChannel.ConnectAsync(Boolean, Boolean, Boolean)
  name.vb: Discord.IAudioChannel.ConnectAsync(Boolean, Boolean, Boolean)
- uid: Discord.Rest.RestVoiceChannel.Discord#IAudioChannel#DisconnectAsync
  commentId: M:Discord.Rest.RestVoiceChannel.Discord#IAudioChannel#DisconnectAsync
  id: Discord#IAudioChannel#DisconnectAsync
  isEii: true
  parent: Discord.Rest.RestVoiceChannel
  langs:
  - csharp
  - vb
  name: IAudioChannel.DisconnectAsync()
  nameWithType: RestVoiceChannel.IAudioChannel.DisconnectAsync()
  fullName: Discord.Rest.RestVoiceChannel.Discord.IAudioChannel.DisconnectAsync()
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestVoiceChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IAudioChannel.DisconnectAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestVoiceChannel.cs
    startLine: 77
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  syntax:
    content: Task IAudioChannel.DisconnectAsync()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function Discord.IAudioChannel.DisconnectAsync As Task Implements IAudioChannel.DisconnectAsync
  overload: Discord.Rest.RestVoiceChannel.Discord#IAudioChannel#DisconnectAsync*
  implements:
  - Discord.IAudioChannel.DisconnectAsync
  nameWithType.vb: RestVoiceChannel.Discord.IAudioChannel.DisconnectAsync()
  name.vb: Discord.IAudioChannel.DisconnectAsync()
- uid: Discord.Rest.RestVoiceChannel.Discord#IGuildChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestVoiceChannel.Discord#IGuildChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IGuildChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestVoiceChannel
  langs:
  - csharp
  - vb
  name: IGuildChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: RestVoiceChannel.IGuildChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.Rest.RestVoiceChannel.Discord.IGuildChannel.GetUserAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestVoiceChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuildChannel.GetUserAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestVoiceChannel.cs
    startLine: 81
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a user in this channel.\n"
  example: []
  syntax:
    content: Task<IGuildUser> IGuildChannel.GetUserAsync(ulong id, CacheMode mode, RequestOptions options)
    parameters:
    - id: id
      type: System.UInt64
      description: The snowflake identifier of the user.
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.IGuildUser}
      description: "\nA task representing the asynchronous get operation. The task result contains a guild user object that\nrepresents the user; <code>null</code> if none is found.\n"
    content.vb: Function Discord.IGuildChannel.GetUserAsync(id As ULong, mode As CacheMode, options As RequestOptions) As Task(Of IGuildUser) Implements IGuildChannel.GetUserAsync
  overload: Discord.Rest.RestVoiceChannel.Discord#IGuildChannel#GetUserAsync*
  implements:
  - Discord.IGuildChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: RestVoiceChannel.Discord.IGuildChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  name.vb: Discord.IGuildChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
- uid: Discord.Rest.RestVoiceChannel.Discord#IGuildChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestVoiceChannel.Discord#IGuildChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  id: Discord#IGuildChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestVoiceChannel
  langs:
  - csharp
  - vb
  name: IGuildChannel.GetUsersAsync(CacheMode, RequestOptions)
  nameWithType: RestVoiceChannel.IGuildChannel.GetUsersAsync(CacheMode, RequestOptions)
  fullName: Discord.Rest.RestVoiceChannel.Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestVoiceChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.IGuildChannel.GetUsersAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestVoiceChannel.cs
    startLine: 84
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of users that are able to view the channel or are currently in this channel.\n"
  remarks: "\nThis method follows the same behavior as described in <xref href=\"Discord.IChannel.GetUsersAsync(Discord.CacheMode%2cDiscord.RequestOptions)\" data-throw-if-not-resolved=\"false\"></xref>.\nPlease visit its documentation for more details on this method.\n"
  example: []
  syntax:
    content: IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> IGuildChannel.GetUsersAsync(CacheMode mode, RequestOptions options)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IGuildUser}}
      description: "\nPaged collection of users.\n"
    content.vb: Function Discord.IGuildChannel.GetUsersAsync(mode As CacheMode, options As RequestOptions) As IAsyncEnumerable(Of IReadOnlyCollection(Of IGuildUser)) Implements IGuildChannel.GetUsersAsync
  overload: Discord.Rest.RestVoiceChannel.Discord#IGuildChannel#GetUsersAsync*
  implements:
  - Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: RestVoiceChannel.Discord.IGuildChannel.GetUsersAsync(CacheMode, RequestOptions)
  name.vb: Discord.IGuildChannel.GetUsersAsync(CacheMode, RequestOptions)
- uid: Discord.Rest.RestVoiceChannel.Discord#INestedChannel#GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestVoiceChannel.Discord#INestedChannel#GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)
  id: Discord#INestedChannel#GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)
  isEii: true
  parent: Discord.Rest.RestVoiceChannel
  langs:
  - csharp
  - vb
  name: INestedChannel.GetCategoryAsync(CacheMode, RequestOptions)
  nameWithType: RestVoiceChannel.INestedChannel.GetCategoryAsync(CacheMode, RequestOptions)
  fullName: Discord.Rest.RestVoiceChannel.Discord.INestedChannel.GetCategoryAsync(Discord.CacheMode, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Channels/RestVoiceChannel.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Discord.INestedChannel.GetCategoryAsync
    path: ../src/Discord.Net.Rest/Entities/Channels/RestVoiceChannel.cs
    startLine: 89
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the parent (category) channel of this channel.\n"
  example: []
  syntax:
    content: Task<ICategoryChannel> INestedChannel.GetCategoryAsync(CacheMode mode, RequestOptions options)
    parameters:
    - id: mode
      type: Discord.CacheMode
      description: The <xref href="Discord.CacheMode" data-throw-if-not-resolved="false"></xref> that determines whether the object should be fetched from cache.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task{Discord.ICategoryChannel}
      description: "\nA task that represents the asynchronous get operation. The task result contains the category channel\nrepresenting the parent of this channel; <code>null</code> if none is set.\n"
    content.vb: Function Discord.INestedChannel.GetCategoryAsync(mode As CacheMode, options As RequestOptions) As Task(Of ICategoryChannel) Implements INestedChannel.GetCategoryAsync
  overload: Discord.Rest.RestVoiceChannel.Discord#INestedChannel#GetCategoryAsync*
  implements:
  - Discord.INestedChannel.GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)
  nameWithType.vb: RestVoiceChannel.Discord.INestedChannel.GetCategoryAsync(CacheMode, RequestOptions)
  name.vb: Discord.INestedChannel.GetCategoryAsync(CacheMode, RequestOptions)
references:
- uid: Discord.Rest
  commentId: N:Discord.Rest
  name: Discord.Rest
  nameWithType: Discord.Rest
  fullName: Discord.Rest
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Rest.RestEntity{System.UInt64}
  commentId: T:Discord.Rest.RestEntity{System.UInt64}
  parent: Discord.Rest
  definition: Discord.Rest.RestEntity`1
  name: RestEntity<UInt64>
  nameWithType: RestEntity<UInt64>
  fullName: Discord.Rest.RestEntity<System.UInt64>
  nameWithType.vb: RestEntity(Of UInt64)
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64)
  name.vb: RestEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestChannel
  commentId: T:Discord.Rest.RestChannel
  parent: Discord.Rest
  name: RestChannel
  nameWithType: RestChannel
  fullName: Discord.Rest.RestChannel
- uid: Discord.Rest.RestGuildChannel
  commentId: T:Discord.Rest.RestGuildChannel
  parent: Discord.Rest
  name: RestGuildChannel
  nameWithType: RestGuildChannel
  fullName: Discord.Rest.RestGuildChannel
- uid: Discord.IUpdateable
  commentId: T:Discord.IUpdateable
  parent: Discord
  name: IUpdateable
  nameWithType: IUpdateable
  fullName: Discord.IUpdateable
- uid: Discord.IVoiceChannel
  commentId: T:Discord.IVoiceChannel
  parent: Discord
  name: IVoiceChannel
  nameWithType: IVoiceChannel
  fullName: Discord.IVoiceChannel
- uid: Discord.INestedChannel
  commentId: T:Discord.INestedChannel
  parent: Discord
  name: INestedChannel
  nameWithType: INestedChannel
  fullName: Discord.INestedChannel
- uid: Discord.IGuildChannel
  commentId: T:Discord.IGuildChannel
  parent: Discord
  name: IGuildChannel
  nameWithType: IGuildChannel
  fullName: Discord.IGuildChannel
- uid: Discord.IDeletable
  commentId: T:Discord.IDeletable
  parent: Discord
  name: IDeletable
  nameWithType: IDeletable
  fullName: Discord.IDeletable
- uid: Discord.Rest.IRestAudioChannel
  commentId: T:Discord.Rest.IRestAudioChannel
  parent: Discord.Rest
  name: IRestAudioChannel
  nameWithType: IRestAudioChannel
  fullName: Discord.Rest.IRestAudioChannel
- uid: Discord.IAudioChannel
  commentId: T:Discord.IAudioChannel
  parent: Discord
  name: IAudioChannel
  nameWithType: IAudioChannel
  fullName: Discord.IAudioChannel
- uid: Discord.IChannel
  commentId: T:Discord.IChannel
  parent: Discord
  name: IChannel
  nameWithType: IChannel
  fullName: Discord.IChannel
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.PermissionOverwrites
  commentId: P:Discord.Rest.RestGuildChannel.PermissionOverwrites
  parent: Discord.Rest.RestGuildChannel
  name: PermissionOverwrites
  nameWithType: RestGuildChannel.PermissionOverwrites
  fullName: Discord.Rest.RestGuildChannel.PermissionOverwrites
- uid: Discord.Rest.RestGuildChannel.Name
  commentId: P:Discord.Rest.RestGuildChannel.Name
  parent: Discord.Rest.RestGuildChannel
  name: Name
  nameWithType: RestGuildChannel.Name
  fullName: Discord.Rest.RestGuildChannel.Name
- uid: Discord.Rest.RestGuildChannel.Position
  commentId: P:Discord.Rest.RestGuildChannel.Position
  parent: Discord.Rest.RestGuildChannel
  name: Position
  nameWithType: RestGuildChannel.Position
  fullName: Discord.Rest.RestGuildChannel.Position
- uid: Discord.Rest.RestGuildChannel.GuildId
  commentId: P:Discord.Rest.RestGuildChannel.GuildId
  parent: Discord.Rest.RestGuildChannel
  name: GuildId
  nameWithType: RestGuildChannel.GuildId
  fullName: Discord.Rest.RestGuildChannel.GuildId
- uid: Discord.Rest.RestGuildChannel.UpdateAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.UpdateAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  name: UpdateAsync(RequestOptions)
  nameWithType: RestGuildChannel.UpdateAsync(RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.UpdateAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.UpdateAsync(Discord.RequestOptions)
    name: UpdateAsync
    nameWithType: RestGuildChannel.UpdateAsync
    fullName: Discord.Rest.RestGuildChannel.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.UpdateAsync(Discord.RequestOptions)
    name: UpdateAsync
    nameWithType: RestGuildChannel.UpdateAsync
    fullName: Discord.Rest.RestGuildChannel.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.ModifyAsync(System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.ModifyAsync(System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  isExternal: true
  name: ModifyAsync(Action<GuildChannelProperties>, RequestOptions)
  nameWithType: RestGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.ModifyAsync(System.Action<Discord.GuildChannelProperties>, Discord.RequestOptions)
  nameWithType.vb: RestGuildChannel.ModifyAsync(Action(Of GuildChannelProperties), RequestOptions)
  fullName.vb: Discord.Rest.RestGuildChannel.ModifyAsync(System.Action(Of Discord.GuildChannelProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of GuildChannelProperties), RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.ModifyAsync(System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: RestGuildChannel.ModifyAsync
    fullName: Discord.Rest.RestGuildChannel.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.GuildChannelProperties
    name: GuildChannelProperties
    nameWithType: GuildChannelProperties
    fullName: Discord.GuildChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.ModifyAsync(System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: RestGuildChannel.ModifyAsync
    fullName: Discord.Rest.RestGuildChannel.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.GuildChannelProperties
    name: GuildChannelProperties
    nameWithType: GuildChannelProperties
    fullName: Discord.GuildChannelProperties
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.DeleteAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.DeleteAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  name: DeleteAsync(RequestOptions)
  nameWithType: RestGuildChannel.DeleteAsync(RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.DeleteAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: RestGuildChannel.DeleteAsync
    fullName: Discord.Rest.RestGuildChannel.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: RestGuildChannel.DeleteAsync
    fullName: Discord.Rest.RestGuildChannel.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IUser)
  commentId: M:Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IUser)
  parent: Discord.Rest.RestGuildChannel
  name: GetPermissionOverwrite(IUser)
  nameWithType: RestGuildChannel.GetPermissionOverwrite(IUser)
  fullName: Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IUser)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IUser)
    name: GetPermissionOverwrite
    nameWithType: RestGuildChannel.GetPermissionOverwrite
    fullName: Discord.Rest.RestGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IUser)
    name: GetPermissionOverwrite
    nameWithType: RestGuildChannel.GetPermissionOverwrite
    fullName: Discord.Rest.RestGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IRole)
  commentId: M:Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IRole)
  parent: Discord.Rest.RestGuildChannel
  name: GetPermissionOverwrite(IRole)
  nameWithType: RestGuildChannel.GetPermissionOverwrite(IRole)
  fullName: Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IRole)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IRole)
    name: GetPermissionOverwrite
    nameWithType: RestGuildChannel.GetPermissionOverwrite
    fullName: Discord.Rest.RestGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IRole)
    name: GetPermissionOverwrite
    nameWithType: RestGuildChannel.GetPermissionOverwrite
    fullName: Discord.Rest.RestGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  name: AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  nameWithType: RestGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IUser, Discord.OverwritePermissions, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
    name: AddPermissionOverwriteAsync
    nameWithType: RestGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
    name: AddPermissionOverwriteAsync
    nameWithType: RestGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  name: AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  nameWithType: RestGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IRole, Discord.OverwritePermissions, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
    name: AddPermissionOverwriteAsync
    nameWithType: RestGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
    name: AddPermissionOverwriteAsync
    nameWithType: RestGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  name: RemovePermissionOverwriteAsync(IUser, RequestOptions)
  nameWithType: RestGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
    name: RemovePermissionOverwriteAsync
    nameWithType: RestGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
    name: RemovePermissionOverwriteAsync
    nameWithType: RestGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  name: RemovePermissionOverwriteAsync(IRole, RequestOptions)
  nameWithType: RestGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
    name: RemovePermissionOverwriteAsync
    nameWithType: RestGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
    name: RemovePermissionOverwriteAsync
    nameWithType: RestGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.ToString
  commentId: M:Discord.Rest.RestGuildChannel.ToString
  parent: Discord.Rest.RestGuildChannel
  name: ToString()
  nameWithType: RestGuildChannel.ToString()
  fullName: Discord.Rest.RestGuildChannel.ToString()
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.ToString
    name: ToString
    nameWithType: RestGuildChannel.ToString
    fullName: Discord.Rest.RestGuildChannel.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.ToString
    name: ToString
    nameWithType: RestGuildChannel.ToString
    fullName: Discord.Rest.RestGuildChannel.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#Guild
  commentId: P:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#Guild
  parent: Discord.Rest.RestGuildChannel
  name: IGuildChannel.Guild
  nameWithType: RestGuildChannel.IGuildChannel.Guild
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.Guild
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.Guild
  name.vb: Discord.IGuildChannel.Guild
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IRole)
  commentId: M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IRole)
  parent: Discord.Rest.RestGuildChannel
  name: IGuildChannel.GetPermissionOverwrite(IRole)
  nameWithType: RestGuildChannel.IGuildChannel.GetPermissionOverwrite(IRole)
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite(Discord.IRole)
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite(IRole)
  name.vb: Discord.IGuildChannel.GetPermissionOverwrite(IRole)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IRole)
    name: IGuildChannel.GetPermissionOverwrite
    nameWithType: RestGuildChannel.IGuildChannel.GetPermissionOverwrite
    fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IRole)
    name: Discord.IGuildChannel.GetPermissionOverwrite
    nameWithType: RestGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite
    fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IUser)
  commentId: M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IUser)
  parent: Discord.Rest.RestGuildChannel
  name: IGuildChannel.GetPermissionOverwrite(IUser)
  nameWithType: RestGuildChannel.IGuildChannel.GetPermissionOverwrite(IUser)
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite(Discord.IUser)
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite(IUser)
  name.vb: Discord.IGuildChannel.GetPermissionOverwrite(IUser)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IUser)
    name: IGuildChannel.GetPermissionOverwrite
    nameWithType: RestGuildChannel.IGuildChannel.GetPermissionOverwrite
    fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IUser)
    name: Discord.IGuildChannel.GetPermissionOverwrite
    nameWithType: RestGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite
    fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.GetPermissionOverwrite
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  name: IGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  nameWithType: RestGuildChannel.IGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync(Discord.IRole, Discord.OverwritePermissions, Discord.RequestOptions)
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  name.vb: Discord.IGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
    name: IGuildChannel.AddPermissionOverwriteAsync
    nameWithType: RestGuildChannel.IGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)
    name: Discord.IGuildChannel.AddPermissionOverwriteAsync
    nameWithType: RestGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  name: IGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  nameWithType: RestGuildChannel.IGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync(Discord.IUser, Discord.OverwritePermissions, Discord.RequestOptions)
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  name.vb: Discord.IGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
    name: IGuildChannel.AddPermissionOverwriteAsync
    nameWithType: RestGuildChannel.IGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)
    name: Discord.IGuildChannel.AddPermissionOverwriteAsync
    nameWithType: RestGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.AddPermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.OverwritePermissions
    name: OverwritePermissions
    nameWithType: OverwritePermissions
    fullName: Discord.OverwritePermissions
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  name: IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions)
  nameWithType: RestGuildChannel.IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole, Discord.RequestOptions)
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions)
  name.vb: Discord.IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
    name: IGuildChannel.RemovePermissionOverwriteAsync
    nameWithType: RestGuildChannel.IGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)
    name: Discord.IGuildChannel.RemovePermissionOverwriteAsync
    nameWithType: RestGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IRole
    name: IRole
    nameWithType: IRole
    fullName: Discord.IRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  name: IGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions)
  nameWithType: RestGuildChannel.IGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser, Discord.RequestOptions)
  nameWithType.vb: RestGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions)
  name.vb: Discord.IGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
    name: IGuildChannel.RemovePermissionOverwriteAsync
    nameWithType: RestGuildChannel.IGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)
    name: Discord.IGuildChannel.RemovePermissionOverwriteAsync
    nameWithType: RestGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync
    fullName: Discord.Rest.RestGuildChannel.Discord.IGuildChannel.RemovePermissionOverwriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  name: IChannel.GetUsersAsync(CacheMode, RequestOptions)
  nameWithType: RestGuildChannel.IChannel.GetUsersAsync(CacheMode, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.Discord.IChannel.GetUsersAsync(Discord.CacheMode, Discord.RequestOptions)
  nameWithType.vb: RestGuildChannel.Discord.IChannel.GetUsersAsync(CacheMode, RequestOptions)
  name.vb: Discord.IChannel.GetUsersAsync(CacheMode, RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
    name: IChannel.GetUsersAsync
    nameWithType: RestGuildChannel.IChannel.GetUsersAsync
    fullName: Discord.Rest.RestGuildChannel.Discord.IChannel.GetUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
    name: Discord.IChannel.GetUsersAsync
    nameWithType: RestGuildChannel.Discord.IChannel.GetUsersAsync
    fullName: Discord.Rest.RestGuildChannel.Discord.IChannel.GetUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestGuildChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestGuildChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.Rest.RestGuildChannel
  isExternal: true
  name: IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: RestGuildChannel.IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.Rest.RestGuildChannel.Discord.IChannel.GetUserAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  nameWithType.vb: RestGuildChannel.Discord.IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  name.vb: Discord.IChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestGuildChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: IChannel.GetUserAsync
    nameWithType: RestGuildChannel.IChannel.GetUserAsync
    fullName: Discord.Rest.RestGuildChannel.Discord.IChannel.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestGuildChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: Discord.IChannel.GetUserAsync
    nameWithType: RestGuildChannel.Discord.IChannel.GetUserAsync
    fullName: Discord.Rest.RestGuildChannel.Discord.IChannel.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestChannel.CreatedAt
  commentId: P:Discord.Rest.RestChannel.CreatedAt
  parent: Discord.Rest.RestChannel
  name: CreatedAt
  nameWithType: RestChannel.CreatedAt
  fullName: Discord.Rest.RestChannel.CreatedAt
- uid: Discord.Rest.RestChannel.Discord#IChannel#Name
  commentId: P:Discord.Rest.RestChannel.Discord#IChannel#Name
  parent: Discord.Rest.RestChannel
  name: IChannel.Name
  nameWithType: RestChannel.IChannel.Name
  fullName: Discord.Rest.RestChannel.Discord.IChannel.Name
  nameWithType.vb: RestChannel.Discord.IChannel.Name
  name.vb: Discord.IChannel.Name
- uid: Discord.Rest.RestEntity{System.UInt64}.Id
  commentId: P:Discord.Rest.RestEntity{System.UInt64}.Id
  parent: Discord.Rest.RestEntity{System.UInt64}
  definition: Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<UInt64>.Id
  fullName: Discord.Rest.RestEntity<System.UInt64>.Id
  nameWithType.vb: RestEntity(Of UInt64).Id
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64).Id
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Rest.RestEntity`1
  commentId: T:Discord.Rest.RestEntity`1
  name: RestEntity<T>
  nameWithType: RestEntity<T>
  fullName: Discord.Rest.RestEntity<T>
  nameWithType.vb: RestEntity(Of T)
  fullName.vb: Discord.Rest.RestEntity(Of T)
  name.vb: RestEntity(Of T)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestEntity`1.Id
  commentId: P:Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<T>.Id
  fullName: Discord.Rest.RestEntity<T>.Id
  nameWithType.vb: RestEntity(Of T).Id
  fullName.vb: Discord.Rest.RestEntity(Of T).Id
- uid: Discord.Rest.RestVoiceChannel.Bitrate*
  commentId: Overload:Discord.Rest.RestVoiceChannel.Bitrate
  name: Bitrate
  nameWithType: RestVoiceChannel.Bitrate
  fullName: Discord.Rest.RestVoiceChannel.Bitrate
- uid: Discord.IVoiceChannel.Bitrate
  commentId: P:Discord.IVoiceChannel.Bitrate
  parent: Discord.IVoiceChannel
  name: Bitrate
  nameWithType: IVoiceChannel.Bitrate
  fullName: Discord.IVoiceChannel.Bitrate
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Discord.Rest.RestVoiceChannel.UserLimit*
  commentId: Overload:Discord.Rest.RestVoiceChannel.UserLimit
  name: UserLimit
  nameWithType: RestVoiceChannel.UserLimit
  fullName: Discord.Rest.RestVoiceChannel.UserLimit
- uid: Discord.IVoiceChannel.UserLimit
  commentId: P:Discord.IVoiceChannel.UserLimit
  parent: Discord.IVoiceChannel
  name: UserLimit
  nameWithType: IVoiceChannel.UserLimit
  fullName: Discord.IVoiceChannel.UserLimit
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestVoiceChannel.CategoryId*
  commentId: Overload:Discord.Rest.RestVoiceChannel.CategoryId
  name: CategoryId
  nameWithType: RestVoiceChannel.CategoryId
  fullName: Discord.Rest.RestVoiceChannel.CategoryId
- uid: Discord.INestedChannel.CategoryId
  commentId: P:Discord.INestedChannel.CategoryId
  parent: Discord.INestedChannel
  name: CategoryId
  nameWithType: INestedChannel.CategoryId
  fullName: Discord.INestedChannel.CategoryId
- uid: System.Nullable{System.UInt64}
  commentId: T:System.Nullable{System.UInt64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<UInt64>
  nameWithType: Nullable<UInt64>
  fullName: System.Nullable<System.UInt64>
  nameWithType.vb: Nullable(Of UInt64)
  fullName.vb: System.Nullable(Of System.UInt64)
  name.vb: Nullable(Of UInt64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestVoiceChannel.ModifyAsync*
  commentId: Overload:Discord.Rest.RestVoiceChannel.ModifyAsync
  name: ModifyAsync
  nameWithType: RestVoiceChannel.ModifyAsync
  fullName: Discord.Rest.RestVoiceChannel.ModifyAsync
- uid: Discord.IVoiceChannel.ModifyAsync(System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  commentId: M:Discord.IVoiceChannel.ModifyAsync(System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
  parent: Discord.IVoiceChannel
  isExternal: true
  name: ModifyAsync(Action<VoiceChannelProperties>, RequestOptions)
  nameWithType: IVoiceChannel.ModifyAsync(Action<VoiceChannelProperties>, RequestOptions)
  fullName: Discord.IVoiceChannel.ModifyAsync(System.Action<Discord.VoiceChannelProperties>, Discord.RequestOptions)
  nameWithType.vb: IVoiceChannel.ModifyAsync(Action(Of VoiceChannelProperties), RequestOptions)
  fullName.vb: Discord.IVoiceChannel.ModifyAsync(System.Action(Of Discord.VoiceChannelProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of VoiceChannelProperties), RequestOptions)
  spec.csharp:
  - uid: Discord.IVoiceChannel.ModifyAsync(System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: IVoiceChannel.ModifyAsync
    fullName: Discord.IVoiceChannel.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.VoiceChannelProperties
    name: VoiceChannelProperties
    nameWithType: VoiceChannelProperties
    fullName: Discord.VoiceChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IVoiceChannel.ModifyAsync(System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: IVoiceChannel.ModifyAsync
    fullName: Discord.IVoiceChannel.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.VoiceChannelProperties
    name: VoiceChannelProperties
    nameWithType: VoiceChannelProperties
    fullName: Discord.VoiceChannelProperties
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.VoiceChannelProperties
  commentId: T:Discord.VoiceChannelProperties
  name: VoiceChannelProperties
  nameWithType: VoiceChannelProperties
  fullName: Discord.VoiceChannelProperties
- uid: System.Action{Discord.VoiceChannelProperties}
  commentId: T:System.Action{Discord.VoiceChannelProperties}
  parent: System
  definition: System.Action`1
  name: Action<VoiceChannelProperties>
  nameWithType: Action<VoiceChannelProperties>
  fullName: System.Action<Discord.VoiceChannelProperties>
  nameWithType.vb: Action(Of VoiceChannelProperties)
  fullName.vb: System.Action(Of Discord.VoiceChannelProperties)
  name.vb: Action(Of VoiceChannelProperties)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.VoiceChannelProperties
    name: VoiceChannelProperties
    nameWithType: VoiceChannelProperties
    fullName: Discord.VoiceChannelProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.VoiceChannelProperties
    name: VoiceChannelProperties
    nameWithType: VoiceChannelProperties
    fullName: Discord.VoiceChannelProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Discord.Rest.RestVoiceChannel.GetCategoryAsync*
  commentId: Overload:Discord.Rest.RestVoiceChannel.GetCategoryAsync
  name: GetCategoryAsync
  nameWithType: RestVoiceChannel.GetCategoryAsync
  fullName: Discord.Rest.RestVoiceChannel.GetCategoryAsync
- uid: System.Threading.Tasks.Task{Discord.ICategoryChannel}
  commentId: T:System.Threading.Tasks.Task{Discord.ICategoryChannel}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ICategoryChannel>
  nameWithType: Task<ICategoryChannel>
  fullName: System.Threading.Tasks.Task<Discord.ICategoryChannel>
  nameWithType.vb: Task(Of ICategoryChannel)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.ICategoryChannel)
  name.vb: Task(Of ICategoryChannel)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ICategoryChannel
    name: ICategoryChannel
    nameWithType: ICategoryChannel
    fullName: Discord.ICategoryChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ICategoryChannel
    name: ICategoryChannel
    nameWithType: ICategoryChannel
    fullName: Discord.ICategoryChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestVoiceChannel.SyncPermissionsAsync*
  commentId: Overload:Discord.Rest.RestVoiceChannel.SyncPermissionsAsync
  name: SyncPermissionsAsync
  nameWithType: RestVoiceChannel.SyncPermissionsAsync
  fullName: Discord.Rest.RestVoiceChannel.SyncPermissionsAsync
- uid: Discord.INestedChannel.SyncPermissionsAsync(Discord.RequestOptions)
  commentId: M:Discord.INestedChannel.SyncPermissionsAsync(Discord.RequestOptions)
  parent: Discord.INestedChannel
  name: SyncPermissionsAsync(RequestOptions)
  nameWithType: INestedChannel.SyncPermissionsAsync(RequestOptions)
  fullName: Discord.INestedChannel.SyncPermissionsAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.INestedChannel.SyncPermissionsAsync(Discord.RequestOptions)
    name: SyncPermissionsAsync
    nameWithType: INestedChannel.SyncPermissionsAsync
    fullName: Discord.INestedChannel.SyncPermissionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.INestedChannel.SyncPermissionsAsync(Discord.RequestOptions)
    name: SyncPermissionsAsync
    nameWithType: INestedChannel.SyncPermissionsAsync
    fullName: Discord.INestedChannel.SyncPermissionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestVoiceChannel.CreateInviteAsync*
  commentId: Overload:Discord.Rest.RestVoiceChannel.CreateInviteAsync
  name: CreateInviteAsync
  nameWithType: RestVoiceChannel.CreateInviteAsync
  fullName: Discord.Rest.RestVoiceChannel.CreateInviteAsync
- uid: Discord.INestedChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
  commentId: M:Discord.INestedChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
  parent: Discord.INestedChannel
  isExternal: true
  name: CreateInviteAsync(Nullable<Int32>, Nullable<Int32>, Boolean, Boolean, RequestOptions)
  nameWithType: INestedChannel.CreateInviteAsync(Nullable<Int32>, Nullable<Int32>, Boolean, Boolean, RequestOptions)
  fullName: Discord.INestedChannel.CreateInviteAsync(System.Nullable<System.Int32>, System.Nullable<System.Int32>, System.Boolean, System.Boolean, Discord.RequestOptions)
  nameWithType.vb: INestedChannel.CreateInviteAsync(Nullable(Of Int32), Nullable(Of Int32), Boolean, Boolean, RequestOptions)
  fullName.vb: Discord.INestedChannel.CreateInviteAsync(System.Nullable(Of System.Int32), System.Nullable(Of System.Int32), System.Boolean, System.Boolean, Discord.RequestOptions)
  name.vb: CreateInviteAsync(Nullable(Of Int32), Nullable(Of Int32), Boolean, Boolean, RequestOptions)
  spec.csharp:
  - uid: Discord.INestedChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
    name: CreateInviteAsync
    nameWithType: INestedChannel.CreateInviteAsync
    fullName: Discord.INestedChannel.CreateInviteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.INestedChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)
    name: CreateInviteAsync
    nameWithType: INestedChannel.CreateInviteAsync
    fullName: Discord.INestedChannel.CreateInviteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task{Discord.IInviteMetadata}
  commentId: T:System.Threading.Tasks.Task{Discord.IInviteMetadata}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IInviteMetadata>
  nameWithType: Task<IInviteMetadata>
  fullName: System.Threading.Tasks.Task<Discord.IInviteMetadata>
  nameWithType.vb: Task(Of IInviteMetadata)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IInviteMetadata)
  name.vb: Task(Of IInviteMetadata)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IInviteMetadata
    name: IInviteMetadata
    nameWithType: IInviteMetadata
    fullName: Discord.IInviteMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IInviteMetadata
    name: IInviteMetadata
    nameWithType: IInviteMetadata
    fullName: Discord.IInviteMetadata
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestVoiceChannel.GetInvitesAsync*
  commentId: Overload:Discord.Rest.RestVoiceChannel.GetInvitesAsync
  name: GetInvitesAsync
  nameWithType: RestVoiceChannel.GetInvitesAsync
  fullName: Discord.Rest.RestVoiceChannel.GetInvitesAsync
- uid: Discord.INestedChannel.GetInvitesAsync(Discord.RequestOptions)
  commentId: M:Discord.INestedChannel.GetInvitesAsync(Discord.RequestOptions)
  parent: Discord.INestedChannel
  name: GetInvitesAsync(RequestOptions)
  nameWithType: INestedChannel.GetInvitesAsync(RequestOptions)
  fullName: Discord.INestedChannel.GetInvitesAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.INestedChannel.GetInvitesAsync(Discord.RequestOptions)
    name: GetInvitesAsync
    nameWithType: INestedChannel.GetInvitesAsync
    fullName: Discord.INestedChannel.GetInvitesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.INestedChannel.GetInvitesAsync(Discord.RequestOptions)
    name: GetInvitesAsync
    nameWithType: INestedChannel.GetInvitesAsync
    fullName: Discord.INestedChannel.GetInvitesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IInviteMetadata}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyCollection{Discord.IInviteMetadata}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyCollection<IInviteMetadata>>
  nameWithType: Task<IReadOnlyCollection<IInviteMetadata>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<Discord.IInviteMetadata>>
  nameWithType.vb: Task(Of IReadOnlyCollection(Of IInviteMetadata))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IInviteMetadata))
  name.vb: Task(Of IReadOnlyCollection(Of IInviteMetadata))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IInviteMetadata
    name: IInviteMetadata
    nameWithType: IInviteMetadata
    fullName: Discord.IInviteMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IInviteMetadata
    name: IInviteMetadata
    nameWithType: IInviteMetadata
    fullName: Discord.IInviteMetadata
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  isExternal: true
- uid: Discord.Rest.RestVoiceChannel.Discord#IAudioChannel#ConnectAsync*
  commentId: Overload:Discord.Rest.RestVoiceChannel.Discord#IAudioChannel#ConnectAsync
  name: IAudioChannel.ConnectAsync
  nameWithType: RestVoiceChannel.IAudioChannel.ConnectAsync
  fullName: Discord.Rest.RestVoiceChannel.Discord.IAudioChannel.ConnectAsync
  nameWithType.vb: RestVoiceChannel.Discord.IAudioChannel.ConnectAsync
  name.vb: Discord.IAudioChannel.ConnectAsync
- uid: Discord.IAudioChannel.ConnectAsync(System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Discord.IAudioChannel.ConnectAsync(System.Boolean,System.Boolean,System.Boolean)
  parent: Discord.IAudioChannel
  isExternal: true
  name: ConnectAsync(Boolean, Boolean, Boolean)
  nameWithType: IAudioChannel.ConnectAsync(Boolean, Boolean, Boolean)
  fullName: Discord.IAudioChannel.ConnectAsync(System.Boolean, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Discord.IAudioChannel.ConnectAsync(System.Boolean,System.Boolean,System.Boolean)
    name: ConnectAsync
    nameWithType: IAudioChannel.ConnectAsync
    fullName: Discord.IAudioChannel.ConnectAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IAudioChannel.ConnectAsync(System.Boolean,System.Boolean,System.Boolean)
    name: ConnectAsync
    nameWithType: IAudioChannel.ConnectAsync
    fullName: Discord.IAudioChannel.ConnectAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Discord.Audio.IAudioClient}
  commentId: T:System.Threading.Tasks.Task{Discord.Audio.IAudioClient}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IAudioClient>
  nameWithType: Task<IAudioClient>
  fullName: System.Threading.Tasks.Task<Discord.Audio.IAudioClient>
  nameWithType.vb: Task(Of IAudioClient)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.Audio.IAudioClient)
  name.vb: Task(Of IAudioClient)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Audio.IAudioClient
    name: IAudioClient
    nameWithType: IAudioClient
    fullName: Discord.Audio.IAudioClient
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Audio.IAudioClient
    name: IAudioClient
    nameWithType: IAudioClient
    fullName: Discord.Audio.IAudioClient
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestVoiceChannel.Discord#IAudioChannel#DisconnectAsync*
  commentId: Overload:Discord.Rest.RestVoiceChannel.Discord#IAudioChannel#DisconnectAsync
  name: IAudioChannel.DisconnectAsync
  nameWithType: RestVoiceChannel.IAudioChannel.DisconnectAsync
  fullName: Discord.Rest.RestVoiceChannel.Discord.IAudioChannel.DisconnectAsync
  nameWithType.vb: RestVoiceChannel.Discord.IAudioChannel.DisconnectAsync
  name.vb: Discord.IAudioChannel.DisconnectAsync
- uid: Discord.IAudioChannel.DisconnectAsync
  commentId: M:Discord.IAudioChannel.DisconnectAsync
  parent: Discord.IAudioChannel
  name: DisconnectAsync()
  nameWithType: IAudioChannel.DisconnectAsync()
  fullName: Discord.IAudioChannel.DisconnectAsync()
  spec.csharp:
  - uid: Discord.IAudioChannel.DisconnectAsync
    name: DisconnectAsync
    nameWithType: IAudioChannel.DisconnectAsync
    fullName: Discord.IAudioChannel.DisconnectAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IAudioChannel.DisconnectAsync
    name: DisconnectAsync
    nameWithType: IAudioChannel.DisconnectAsync
    fullName: Discord.IAudioChannel.DisconnectAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestVoiceChannel.Discord#IGuildChannel#GetUserAsync*
  commentId: Overload:Discord.Rest.RestVoiceChannel.Discord#IGuildChannel#GetUserAsync
  name: IGuildChannel.GetUserAsync
  nameWithType: RestVoiceChannel.IGuildChannel.GetUserAsync
  fullName: Discord.Rest.RestVoiceChannel.Discord.IGuildChannel.GetUserAsync
  nameWithType.vb: RestVoiceChannel.Discord.IGuildChannel.GetUserAsync
  name.vb: Discord.IGuildChannel.GetUserAsync
- uid: Discord.IGuildChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuildChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuildChannel
  isExternal: true
  name: GetUserAsync(UInt64, CacheMode, RequestOptions)
  nameWithType: IGuildChannel.GetUserAsync(UInt64, CacheMode, RequestOptions)
  fullName: Discord.IGuildChannel.GetUserAsync(System.UInt64, Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuildChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetUserAsync
    nameWithType: IGuildChannel.GetUserAsync
    fullName: Discord.IGuildChannel.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuildChannel.GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)
    name: GetUserAsync
    nameWithType: IGuildChannel.GetUserAsync
    fullName: Discord.IGuildChannel.GetUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Discord.CacheMode
  commentId: T:Discord.CacheMode
  parent: Discord
  name: CacheMode
  nameWithType: CacheMode
  fullName: Discord.CacheMode
- uid: System.Threading.Tasks.Task{Discord.IGuildUser}
  commentId: T:System.Threading.Tasks.Task{Discord.IGuildUser}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IGuildUser>
  nameWithType: Task<IGuildUser>
  fullName: System.Threading.Tasks.Task<Discord.IGuildUser>
  nameWithType.vb: Task(Of IGuildUser)
  fullName.vb: System.Threading.Tasks.Task(Of Discord.IGuildUser)
  name.vb: Task(Of IGuildUser)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IGuildUser
    name: IGuildUser
    nameWithType: IGuildUser
    fullName: Discord.IGuildUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IGuildUser
    name: IGuildUser
    nameWithType: IGuildUser
    fullName: Discord.IGuildUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestVoiceChannel.Discord#IGuildChannel#GetUsersAsync*
  commentId: Overload:Discord.Rest.RestVoiceChannel.Discord#IGuildChannel#GetUsersAsync
  name: IGuildChannel.GetUsersAsync
  nameWithType: RestVoiceChannel.IGuildChannel.GetUsersAsync
  fullName: Discord.Rest.RestVoiceChannel.Discord.IGuildChannel.GetUsersAsync
  nameWithType.vb: RestVoiceChannel.Discord.IGuildChannel.GetUsersAsync
  name.vb: Discord.IGuildChannel.GetUsersAsync
- uid: Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.IGuildChannel
  name: GetUsersAsync(CacheMode, RequestOptions)
  nameWithType: IGuildChannel.GetUsersAsync(CacheMode, RequestOptions)
  fullName: Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetUsersAsync
    nameWithType: IGuildChannel.GetUsersAsync
    fullName: Discord.IGuildChannel.GetUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IGuildChannel.GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetUsersAsync
    nameWithType: IGuildChannel.GetUsersAsync
    fullName: Discord.IGuildChannel.GetUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IGuildUser}}
  commentId: T:System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IGuildUser}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IAsyncEnumerable`1
  name: IAsyncEnumerable<IReadOnlyCollection<IGuildUser>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<IGuildUser>>
  fullName: System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyCollection<Discord.IGuildUser>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IGuildUser))
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IGuildUser))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IGuildUser))
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IGuildUser
    name: IGuildUser
    nameWithType: IGuildUser
    fullName: Discord.IGuildUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IGuildUser
    name: IGuildUser
    nameWithType: IGuildUser
    fullName: Discord.IGuildUser
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IAsyncEnumerable`1
  commentId: T:System.Collections.Generic.IAsyncEnumerable`1
  isExternal: true
  name: IAsyncEnumerable<T>
  nameWithType: IAsyncEnumerable<T>
  fullName: System.Collections.Generic.IAsyncEnumerable<T>
  nameWithType.vb: IAsyncEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of T)
  name.vb: IAsyncEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Discord.Rest.RestVoiceChannel.Discord#INestedChannel#GetCategoryAsync*
  commentId: Overload:Discord.Rest.RestVoiceChannel.Discord#INestedChannel#GetCategoryAsync
  name: INestedChannel.GetCategoryAsync
  nameWithType: RestVoiceChannel.INestedChannel.GetCategoryAsync
  fullName: Discord.Rest.RestVoiceChannel.Discord.INestedChannel.GetCategoryAsync
  nameWithType.vb: RestVoiceChannel.Discord.INestedChannel.GetCategoryAsync
  name.vb: Discord.INestedChannel.GetCategoryAsync
- uid: Discord.INestedChannel.GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)
  commentId: M:Discord.INestedChannel.GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)
  parent: Discord.INestedChannel
  name: GetCategoryAsync(CacheMode, RequestOptions)
  nameWithType: INestedChannel.GetCategoryAsync(CacheMode, RequestOptions)
  fullName: Discord.INestedChannel.GetCategoryAsync(Discord.CacheMode, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.INestedChannel.GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetCategoryAsync
    nameWithType: INestedChannel.GetCategoryAsync
    fullName: Discord.INestedChannel.GetCategoryAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.INestedChannel.GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)
    name: GetCategoryAsync
    nameWithType: INestedChannel.GetCategoryAsync
    fullName: Discord.INestedChannel.GetCategoryAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.CacheMode
    name: CacheMode
    nameWithType: CacheMode
    fullName: Discord.CacheMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
