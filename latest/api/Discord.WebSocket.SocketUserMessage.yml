### YamlMime:ManagedReference
items:
- uid: Discord.WebSocket.SocketUserMessage
  commentId: T:Discord.WebSocket.SocketUserMessage
  id: SocketUserMessage
  parent: Discord.WebSocket
  children:
  - Discord.WebSocket.SocketUserMessage.Attachments
  - Discord.WebSocket.SocketUserMessage.EditedTimestamp
  - Discord.WebSocket.SocketUserMessage.Embeds
  - Discord.WebSocket.SocketUserMessage.IsPinned
  - Discord.WebSocket.SocketUserMessage.IsSuppressed
  - Discord.WebSocket.SocketUserMessage.IsTTS
  - Discord.WebSocket.SocketUserMessage.MentionedChannels
  - Discord.WebSocket.SocketUserMessage.MentionedRoles
  - Discord.WebSocket.SocketUserMessage.MentionedUsers
  - Discord.WebSocket.SocketUserMessage.ModifyAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)
  - Discord.WebSocket.SocketUserMessage.ModifySuppressionAsync(System.Boolean,Discord.RequestOptions)
  - Discord.WebSocket.SocketUserMessage.PinAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketUserMessage.Resolve(Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  - Discord.WebSocket.SocketUserMessage.Resolve(System.Int32,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  - Discord.WebSocket.SocketUserMessage.Tags
  - Discord.WebSocket.SocketUserMessage.UnpinAsync(Discord.RequestOptions)
  langs:
  - csharp
  - vb
  name: SocketUserMessage
  nameWithType: SocketUserMessage
  fullName: Discord.WebSocket.SocketUserMessage
  type: Class
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: SocketUserMessage
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
    startLine: 14
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nRepresents a WebSocket-based message sent by a user.\n"
  example: []
  syntax:
    content: 'public class SocketUserMessage : SocketMessage, IUserMessage, IMessage, ISnowflakeEntity, IEntity<ulong>, IDeletable'
    content.vb: >-
      Public Class SocketUserMessage
          Inherits SocketMessage
          Implements IUserMessage, IMessage, ISnowflakeEntity, IEntity(Of ULong), IDeletable
  inheritance:
  - System.Object
  - Discord.WebSocket.SocketEntity{System.UInt64}
  - Discord.WebSocket.SocketMessage
  implements:
  - Discord.IUserMessage
  - Discord.IMessage
  - Discord.ISnowflakeEntity
  - Discord.IEntity{System.UInt64}
  - Discord.IDeletable
  inheritedMembers:
  - Discord.WebSocket.SocketMessage.Author
  - Discord.WebSocket.SocketMessage.Channel
  - Discord.WebSocket.SocketMessage.Source
  - Discord.WebSocket.SocketMessage.Content
  - Discord.WebSocket.SocketMessage.CreatedAt
  - Discord.WebSocket.SocketMessage.Activity
  - Discord.WebSocket.SocketMessage.Application
  - Discord.WebSocket.SocketMessage.Reactions
  - Discord.WebSocket.SocketMessage.Timestamp
  - Discord.WebSocket.SocketMessage.DeleteAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketMessage.ToString
  - Discord.WebSocket.SocketMessage.Discord#IMessage#Author
  - Discord.WebSocket.SocketMessage.Discord#IMessage#Channel
  - Discord.WebSocket.SocketMessage.Discord#IMessage#Type
  - Discord.WebSocket.SocketMessage.Discord#IMessage#Attachments
  - Discord.WebSocket.SocketMessage.Discord#IMessage#Embeds
  - Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedChannelIds
  - Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedRoleIds
  - Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedUserIds
  - Discord.WebSocket.SocketMessage.AddReactionAsync(Discord.IEmote,Discord.RequestOptions)
  - Discord.WebSocket.SocketMessage.RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)
  - Discord.WebSocket.SocketMessage.RemoveReactionAsync(Discord.IEmote,System.UInt64,Discord.RequestOptions)
  - Discord.WebSocket.SocketMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
  - Discord.WebSocket.SocketMessage.GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions)
  - Discord.WebSocket.SocketEntity{System.UInt64}.Id
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - Discord.IUserMessage.Discord.Commands.MessageExtensions.HasCharPrefix(System.Char,System.Int32@)
  - Discord.IUserMessage.Discord.Commands.MessageExtensions.HasStringPrefix(System.String,System.Int32@,System.StringComparison)
  - Discord.IUserMessage.Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUser,System.Int32@)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.WebSocket.SocketUserMessage.IsTTS
  commentId: P:Discord.WebSocket.SocketUserMessage.IsTTS
  id: IsTTS
  parent: Discord.WebSocket.SocketUserMessage
  langs:
  - csharp
  - vb
  name: IsTTS
  nameWithType: SocketUserMessage.IsTTS
  fullName: Discord.WebSocket.SocketUserMessage.IsTTS
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsTTS
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
    startLine: 24
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the value that indicates whether this message was meant to be read-aloud by Discord.\n"
  example: []
  syntax:
    content: public override bool IsTTS { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this message was sent as a text-to-speech message; otherwise <code>false</code>.\n"
    content.vb: Public Overrides ReadOnly Property IsTTS As Boolean
  overridden: Discord.WebSocket.SocketMessage.IsTTS
  overload: Discord.WebSocket.SocketUserMessage.IsTTS*
  implements:
  - Discord.IMessage.IsTTS
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.WebSocket.SocketUserMessage.IsPinned
  commentId: P:Discord.WebSocket.SocketUserMessage.IsPinned
  id: IsPinned
  parent: Discord.WebSocket.SocketUserMessage
  langs:
  - csharp
  - vb
  name: IsPinned
  nameWithType: SocketUserMessage.IsPinned
  fullName: Discord.WebSocket.SocketUserMessage.IsPinned
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsPinned
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
    startLine: 26
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the value that indicates whether this message is pinned.\n"
  example: []
  syntax:
    content: public override bool IsPinned { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this message was added to its channel&apos;s pinned messages; otherwise <code>false</code>.\n"
    content.vb: Public Overrides ReadOnly Property IsPinned As Boolean
  overridden: Discord.WebSocket.SocketMessage.IsPinned
  overload: Discord.WebSocket.SocketUserMessage.IsPinned*
  implements:
  - Discord.IMessage.IsPinned
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.WebSocket.SocketUserMessage.IsSuppressed
  commentId: P:Discord.WebSocket.SocketUserMessage.IsSuppressed
  id: IsSuppressed
  parent: Discord.WebSocket.SocketUserMessage
  langs:
  - csharp
  - vb
  name: IsSuppressed
  nameWithType: SocketUserMessage.IsSuppressed
  fullName: Discord.WebSocket.SocketUserMessage.IsSuppressed
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsSuppressed
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
    startLine: 28
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the value that indicates whether or not this message&apos;s embeds are suppressed.\n"
  example: []
  syntax:
    content: public override bool IsSuppressed { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the embeds in this message have been suppressed (made invisible); otherwise <code>false</code>.\n"
    content.vb: Public Overrides ReadOnly Property IsSuppressed As Boolean
  overridden: Discord.WebSocket.SocketMessage.IsSuppressed
  overload: Discord.WebSocket.SocketUserMessage.IsSuppressed*
  implements:
  - Discord.IMessage.IsSuppressed
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.WebSocket.SocketUserMessage.EditedTimestamp
  commentId: P:Discord.WebSocket.SocketUserMessage.EditedTimestamp
  id: EditedTimestamp
  parent: Discord.WebSocket.SocketUserMessage
  langs:
  - csharp
  - vb
  name: EditedTimestamp
  nameWithType: SocketUserMessage.EditedTimestamp
  fullName: Discord.WebSocket.SocketUserMessage.EditedTimestamp
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: EditedTimestamp
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
    startLine: 30
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets the time of this message&apos;s last edit.\n"
  example: []
  syntax:
    content: public override DateTimeOffset? EditedTimestamp { get; }
    parameters: []
    return:
      type: System.Nullable{System.DateTimeOffset}
      description: "\nTime of when the message was last edited; <code>null</code> if the message is never edited.\n"
    content.vb: Public Overrides ReadOnly Property EditedTimestamp As DateTimeOffset?
  overridden: Discord.WebSocket.SocketMessage.EditedTimestamp
  overload: Discord.WebSocket.SocketUserMessage.EditedTimestamp*
  implements:
  - Discord.IMessage.EditedTimestamp
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.WebSocket.SocketUserMessage.Attachments
  commentId: P:Discord.WebSocket.SocketUserMessage.Attachments
  id: Attachments
  parent: Discord.WebSocket.SocketUserMessage
  langs:
  - csharp
  - vb
  name: Attachments
  nameWithType: SocketUserMessage.Attachments
  fullName: Discord.WebSocket.SocketUserMessage.Attachments
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Attachments
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
    startLine: 32
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nReturns all attachments included in this message.\n"
  example: []
  syntax:
    content: public override IReadOnlyCollection<Attachment> Attachments { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.Attachment}
      description: "\nCollection of attachments.\n"
    content.vb: Public Overrides ReadOnly Property Attachments As IReadOnlyCollection(Of Attachment)
  overridden: Discord.WebSocket.SocketMessage.Attachments
  overload: Discord.WebSocket.SocketUserMessage.Attachments*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.WebSocket.SocketUserMessage.Embeds
  commentId: P:Discord.WebSocket.SocketUserMessage.Embeds
  id: Embeds
  parent: Discord.WebSocket.SocketUserMessage
  langs:
  - csharp
  - vb
  name: Embeds
  nameWithType: SocketUserMessage.Embeds
  fullName: Discord.WebSocket.SocketUserMessage.Embeds
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Embeds
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
    startLine: 34
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nReturns all embeds included in this message.\n"
  example: []
  syntax:
    content: public override IReadOnlyCollection<Embed> Embeds { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.Embed}
      description: "\nCollection of embed objects.\n"
    content.vb: Public Overrides ReadOnly Property Embeds As IReadOnlyCollection(Of Embed)
  overridden: Discord.WebSocket.SocketMessage.Embeds
  overload: Discord.WebSocket.SocketUserMessage.Embeds*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.WebSocket.SocketUserMessage.Tags
  commentId: P:Discord.WebSocket.SocketUserMessage.Tags
  id: Tags
  parent: Discord.WebSocket.SocketUserMessage
  langs:
  - csharp
  - vb
  name: Tags
  nameWithType: SocketUserMessage.Tags
  fullName: Discord.WebSocket.SocketUserMessage.Tags
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Tags
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
    startLine: 36
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nGets all tags included in this message&apos;s content.\n"
  example: []
  syntax:
    content: public override IReadOnlyCollection<ITag> Tags { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.ITag}
    content.vb: Public Overrides ReadOnly Property Tags As IReadOnlyCollection(Of ITag)
  overridden: Discord.WebSocket.SocketMessage.Tags
  overload: Discord.WebSocket.SocketUserMessage.Tags*
  implements:
  - Discord.IMessage.Tags
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.WebSocket.SocketUserMessage.MentionedChannels
  commentId: P:Discord.WebSocket.SocketUserMessage.MentionedChannels
  id: MentionedChannels
  parent: Discord.WebSocket.SocketUserMessage
  langs:
  - csharp
  - vb
  name: MentionedChannels
  nameWithType: SocketUserMessage.MentionedChannels
  fullName: Discord.WebSocket.SocketUserMessage.MentionedChannels
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: MentionedChannels
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
    startLine: 38
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nReturns the channels mentioned in this message.\n"
  example: []
  syntax:
    content: public override IReadOnlyCollection<SocketGuildChannel> MentionedChannels { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketGuildChannel}
      description: "\nCollection of WebSocket-based guild channels.\n"
    content.vb: Public Overrides ReadOnly Property MentionedChannels As IReadOnlyCollection(Of SocketGuildChannel)
  overridden: Discord.WebSocket.SocketMessage.MentionedChannels
  overload: Discord.WebSocket.SocketUserMessage.MentionedChannels*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.WebSocket.SocketUserMessage.MentionedRoles
  commentId: P:Discord.WebSocket.SocketUserMessage.MentionedRoles
  id: MentionedRoles
  parent: Discord.WebSocket.SocketUserMessage
  langs:
  - csharp
  - vb
  name: MentionedRoles
  nameWithType: SocketUserMessage.MentionedRoles
  fullName: Discord.WebSocket.SocketUserMessage.MentionedRoles
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: MentionedRoles
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
    startLine: 40
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nReturns the roles mentioned in this message.\n"
  example: []
  syntax:
    content: public override IReadOnlyCollection<SocketRole> MentionedRoles { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketRole}
      description: "\nCollection of WebSocket-based roles.\n"
    content.vb: Public Overrides ReadOnly Property MentionedRoles As IReadOnlyCollection(Of SocketRole)
  overridden: Discord.WebSocket.SocketMessage.MentionedRoles
  overload: Discord.WebSocket.SocketUserMessage.MentionedRoles*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.WebSocket.SocketUserMessage.MentionedUsers
  commentId: P:Discord.WebSocket.SocketUserMessage.MentionedUsers
  id: MentionedUsers
  parent: Discord.WebSocket.SocketUserMessage
  langs:
  - csharp
  - vb
  name: MentionedUsers
  nameWithType: SocketUserMessage.MentionedUsers
  fullName: Discord.WebSocket.SocketUserMessage.MentionedUsers
  type: Property
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: MentionedUsers
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
    startLine: 42
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nReturns the users mentioned in this message.\n"
  example: []
  syntax:
    content: public override IReadOnlyCollection<SocketUser> MentionedUsers { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketUser}
      description: "\nCollection of WebSocket-based users.\n"
    content.vb: Public Overrides ReadOnly Property MentionedUsers As IReadOnlyCollection(Of SocketUser)
  overridden: Discord.WebSocket.SocketMessage.MentionedUsers
  overload: Discord.WebSocket.SocketUserMessage.MentionedUsers*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.WebSocket.SocketUserMessage.ModifyAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketUserMessage.ModifyAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)
  id: ModifyAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)
  parent: Discord.WebSocket.SocketUserMessage
  langs:
  - csharp
  - vb
  name: ModifyAsync(Action<MessageProperties>, RequestOptions)
  nameWithType: SocketUserMessage.ModifyAsync(Action<MessageProperties>, RequestOptions)
  fullName: Discord.WebSocket.SocketUserMessage.ModifyAsync(System.Action<Discord.MessageProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ModifyAsync
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
    startLine: 129
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nModifies this message.\n"
  remarks: "\nThis method modifies this message with the specified properties. To see an example of this\nmethod and what properties are available, please refer to <xref href=\"Discord.MessageProperties\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Task ModifyAsync(Action<MessageProperties> func, RequestOptions options = null)
    parameters:
    - id: func
      type: System.Action{Discord.MessageProperties}
      description: A delegate containing the properties to modify the message with.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous modification operation.\n"
    content.vb: Public Function ModifyAsync(func As Action(Of MessageProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketUserMessage.ModifyAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Only the author of a message may modify the message.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Message content is too long, length must be less or equal to <xref href="Discord.DiscordConfig.MaxMessageSize" data-throw-if-not-resolved="false"></xref>.
  implements:
  - Discord.IUserMessage.ModifyAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)
  nameWithType.vb: SocketUserMessage.ModifyAsync(Action(Of MessageProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.WebSocket.SocketUserMessage.ModifyAsync(System.Action(Of Discord.MessageProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of MessageProperties), RequestOptions)
- uid: Discord.WebSocket.SocketUserMessage.PinAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketUserMessage.PinAsync(Discord.RequestOptions)
  id: PinAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketUserMessage
  langs:
  - csharp
  - vb
  name: PinAsync(RequestOptions)
  nameWithType: SocketUserMessage.PinAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketUserMessage.PinAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: PinAsync
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
    startLine: 133
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nAdds this message to its channel&apos;s pinned messages.\n"
  example: []
  syntax:
    content: public Task PinAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous operation for pinning this message.\n"
    content.vb: Public Function PinAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketUserMessage.PinAsync*
  implements:
  - Discord.IUserMessage.PinAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketUserMessage.UnpinAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketUserMessage.UnpinAsync(Discord.RequestOptions)
  id: UnpinAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketUserMessage
  langs:
  - csharp
  - vb
  name: UnpinAsync(RequestOptions)
  nameWithType: SocketUserMessage.UnpinAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketUserMessage.UnpinAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: UnpinAsync
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
    startLine: 136
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nRemoves this message from its channel&apos;s pinned messages.\n"
  example: []
  syntax:
    content: public Task UnpinAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous operation for unpinning this message.\n"
    content.vb: Public Function UnpinAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketUserMessage.UnpinAsync*
  implements:
  - Discord.IUserMessage.UnpinAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketUserMessage.ModifySuppressionAsync(System.Boolean,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketUserMessage.ModifySuppressionAsync(System.Boolean,Discord.RequestOptions)
  id: ModifySuppressionAsync(System.Boolean,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketUserMessage
  langs:
  - csharp
  - vb
  name: ModifySuppressionAsync(Boolean, RequestOptions)
  nameWithType: SocketUserMessage.ModifySuppressionAsync(Boolean, RequestOptions)
  fullName: Discord.WebSocket.SocketUserMessage.ModifySuppressionAsync(System.Boolean, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ModifySuppressionAsync
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
    startLine: 139
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nModifies the suppression of this message.\n"
  remarks: "\nThis method modifies whether or not embeds in this message are suppressed (hidden).\n"
  example: []
  syntax:
    content: public Task ModifySuppressionAsync(bool suppressEmbeds, RequestOptions options = null)
    parameters:
    - id: suppressEmbeds
      type: System.Boolean
      description: Whether or not embeds in this message should be suppressed.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous modification operation.\n"
    content.vb: Public Function ModifySuppressionAsync(suppressEmbeds As Boolean, options As RequestOptions = Nothing) As Task
  overload: Discord.WebSocket.SocketUserMessage.ModifySuppressionAsync*
  implements:
  - Discord.IUserMessage.ModifySuppressionAsync(System.Boolean,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketUserMessage.Resolve(System.Int32,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  commentId: M:Discord.WebSocket.SocketUserMessage.Resolve(System.Int32,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  id: Resolve(System.Int32,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  parent: Discord.WebSocket.SocketUserMessage
  langs:
  - csharp
  - vb
  name: Resolve(Int32, TagHandling, TagHandling, TagHandling, TagHandling, TagHandling)
  nameWithType: SocketUserMessage.Resolve(Int32, TagHandling, TagHandling, TagHandling, TagHandling, TagHandling)
  fullName: Discord.WebSocket.SocketUserMessage.Resolve(System.Int32, Discord.TagHandling, Discord.TagHandling, Discord.TagHandling, Discord.TagHandling, Discord.TagHandling)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Resolve
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
    startLine: 142
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  syntax:
    content: public string Resolve(int startIndex, TagHandling userHandling = TagHandling.Name, TagHandling channelHandling = TagHandling.Name, TagHandling roleHandling = TagHandling.Name, TagHandling everyoneHandling = TagHandling.Ignore, TagHandling emojiHandling = TagHandling.Name)
    parameters:
    - id: startIndex
      type: System.Int32
    - id: userHandling
      type: Discord.TagHandling
    - id: channelHandling
      type: Discord.TagHandling
    - id: roleHandling
      type: Discord.TagHandling
    - id: everyoneHandling
      type: Discord.TagHandling
    - id: emojiHandling
      type: Discord.TagHandling
    return:
      type: System.String
    content.vb: Public Function Resolve(startIndex As Integer, userHandling As TagHandling = TagHandling.Name, channelHandling As TagHandling = TagHandling.Name, roleHandling As TagHandling = TagHandling.Name, everyoneHandling As TagHandling = TagHandling.Ignore, emojiHandling As TagHandling = TagHandling.Name) As String
  overload: Discord.WebSocket.SocketUserMessage.Resolve*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.WebSocket.SocketUserMessage.Resolve(Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  commentId: M:Discord.WebSocket.SocketUserMessage.Resolve(Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  id: Resolve(Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  parent: Discord.WebSocket.SocketUserMessage
  langs:
  - csharp
  - vb
  name: Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling)
  nameWithType: SocketUserMessage.Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling)
  fullName: Discord.WebSocket.SocketUserMessage.Resolve(Discord.TagHandling, Discord.TagHandling, Discord.TagHandling, Discord.TagHandling, Discord.TagHandling)
  type: Method
  source:
    remote:
      path: src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Resolve
    path: ../src/Discord.Net.WebSocket/Entities/Messages/SocketUserMessage.cs
    startLine: 146
  assemblies:
  - Discord.Net.WebSocket
  namespace: Discord.WebSocket
  summary: "\nTransforms this message&apos;s text into a human-readable form by resolving its tags.\n"
  example: []
  syntax:
    content: public string Resolve(TagHandling userHandling = TagHandling.Name, TagHandling channelHandling = TagHandling.Name, TagHandling roleHandling = TagHandling.Name, TagHandling everyoneHandling = TagHandling.Ignore, TagHandling emojiHandling = TagHandling.Name)
    parameters:
    - id: userHandling
      type: Discord.TagHandling
      description: Determines how the user tag should be handled.
    - id: channelHandling
      type: Discord.TagHandling
      description: Determines how the channel tag should be handled.
    - id: roleHandling
      type: Discord.TagHandling
      description: Determines how the role tag should be handled.
    - id: everyoneHandling
      type: Discord.TagHandling
      description: Determines how the @everyone tag should be handled.
    - id: emojiHandling
      type: Discord.TagHandling
      description: Determines how the emoji tag should be handled.
    return:
      type: System.String
    content.vb: Public Function Resolve(userHandling As TagHandling = TagHandling.Name, channelHandling As TagHandling = TagHandling.Name, roleHandling As TagHandling = TagHandling.Name, everyoneHandling As TagHandling = TagHandling.Ignore, emojiHandling As TagHandling = TagHandling.Name) As String
  overload: Discord.WebSocket.SocketUserMessage.Resolve*
  implements:
  - Discord.IUserMessage.Resolve(Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Discord.WebSocket
  commentId: N:Discord.WebSocket
  name: Discord.WebSocket
  nameWithType: Discord.WebSocket
  fullName: Discord.WebSocket
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.WebSocket.SocketEntity{System.UInt64}
  commentId: T:Discord.WebSocket.SocketEntity{System.UInt64}
  parent: Discord.WebSocket
  definition: Discord.WebSocket.SocketEntity`1
  name: SocketEntity<UInt64>
  nameWithType: SocketEntity<UInt64>
  fullName: Discord.WebSocket.SocketEntity<System.UInt64>
  nameWithType.vb: SocketEntity(Of UInt64)
  fullName.vb: Discord.WebSocket.SocketEntity(Of System.UInt64)
  name.vb: SocketEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.WebSocket.SocketEntity`1
    name: SocketEntity
    nameWithType: SocketEntity
    fullName: Discord.WebSocket.SocketEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.WebSocket.SocketEntity`1
    name: SocketEntity
    nameWithType: SocketEntity
    fullName: Discord.WebSocket.SocketEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketMessage
  commentId: T:Discord.WebSocket.SocketMessage
  parent: Discord.WebSocket
  name: SocketMessage
  nameWithType: SocketMessage
  fullName: Discord.WebSocket.SocketMessage
- uid: Discord.IUserMessage
  commentId: T:Discord.IUserMessage
  parent: Discord
  name: IUserMessage
  nameWithType: IUserMessage
  fullName: Discord.IUserMessage
- uid: Discord.IMessage
  commentId: T:Discord.IMessage
  parent: Discord
  name: IMessage
  nameWithType: IMessage
  fullName: Discord.IMessage
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IDeletable
  commentId: T:Discord.IDeletable
  parent: Discord
  name: IDeletable
  nameWithType: IDeletable
  fullName: Discord.IDeletable
- uid: Discord.WebSocket.SocketMessage.Author
  commentId: P:Discord.WebSocket.SocketMessage.Author
  parent: Discord.WebSocket.SocketMessage
  name: Author
  nameWithType: SocketMessage.Author
  fullName: Discord.WebSocket.SocketMessage.Author
- uid: Discord.WebSocket.SocketMessage.Channel
  commentId: P:Discord.WebSocket.SocketMessage.Channel
  parent: Discord.WebSocket.SocketMessage
  name: Channel
  nameWithType: SocketMessage.Channel
  fullName: Discord.WebSocket.SocketMessage.Channel
- uid: Discord.WebSocket.SocketMessage.Source
  commentId: P:Discord.WebSocket.SocketMessage.Source
  parent: Discord.WebSocket.SocketMessage
  name: Source
  nameWithType: SocketMessage.Source
  fullName: Discord.WebSocket.SocketMessage.Source
- uid: Discord.WebSocket.SocketMessage.Content
  commentId: P:Discord.WebSocket.SocketMessage.Content
  parent: Discord.WebSocket.SocketMessage
  name: Content
  nameWithType: SocketMessage.Content
  fullName: Discord.WebSocket.SocketMessage.Content
- uid: Discord.WebSocket.SocketMessage.CreatedAt
  commentId: P:Discord.WebSocket.SocketMessage.CreatedAt
  parent: Discord.WebSocket.SocketMessage
  name: CreatedAt
  nameWithType: SocketMessage.CreatedAt
  fullName: Discord.WebSocket.SocketMessage.CreatedAt
- uid: Discord.WebSocket.SocketMessage.Activity
  commentId: P:Discord.WebSocket.SocketMessage.Activity
  parent: Discord.WebSocket.SocketMessage
  name: Activity
  nameWithType: SocketMessage.Activity
  fullName: Discord.WebSocket.SocketMessage.Activity
- uid: Discord.WebSocket.SocketMessage.Application
  commentId: P:Discord.WebSocket.SocketMessage.Application
  parent: Discord.WebSocket.SocketMessage
  name: Application
  nameWithType: SocketMessage.Application
  fullName: Discord.WebSocket.SocketMessage.Application
- uid: Discord.WebSocket.SocketMessage.Reactions
  commentId: P:Discord.WebSocket.SocketMessage.Reactions
  parent: Discord.WebSocket.SocketMessage
  name: Reactions
  nameWithType: SocketMessage.Reactions
  fullName: Discord.WebSocket.SocketMessage.Reactions
- uid: Discord.WebSocket.SocketMessage.Timestamp
  commentId: P:Discord.WebSocket.SocketMessage.Timestamp
  parent: Discord.WebSocket.SocketMessage
  name: Timestamp
  nameWithType: SocketMessage.Timestamp
  fullName: Discord.WebSocket.SocketMessage.Timestamp
- uid: Discord.WebSocket.SocketMessage.DeleteAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketMessage.DeleteAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketMessage
  name: DeleteAsync(RequestOptions)
  nameWithType: SocketMessage.DeleteAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketMessage.DeleteAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.SocketMessage.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: SocketMessage.DeleteAsync
    fullName: Discord.WebSocket.SocketMessage.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketMessage.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: SocketMessage.DeleteAsync
    fullName: Discord.WebSocket.SocketMessage.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketMessage.ToString
  commentId: M:Discord.WebSocket.SocketMessage.ToString
  parent: Discord.WebSocket.SocketMessage
  name: ToString()
  nameWithType: SocketMessage.ToString()
  fullName: Discord.WebSocket.SocketMessage.ToString()
  spec.csharp:
  - uid: Discord.WebSocket.SocketMessage.ToString
    name: ToString
    nameWithType: SocketMessage.ToString
    fullName: Discord.WebSocket.SocketMessage.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketMessage.ToString
    name: ToString
    nameWithType: SocketMessage.ToString
    fullName: Discord.WebSocket.SocketMessage.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketMessage.Discord#IMessage#Author
  commentId: P:Discord.WebSocket.SocketMessage.Discord#IMessage#Author
  parent: Discord.WebSocket.SocketMessage
  name: IMessage.Author
  nameWithType: SocketMessage.IMessage.Author
  fullName: Discord.WebSocket.SocketMessage.Discord.IMessage.Author
  nameWithType.vb: SocketMessage.Discord.IMessage.Author
  name.vb: Discord.IMessage.Author
- uid: Discord.WebSocket.SocketMessage.Discord#IMessage#Channel
  commentId: P:Discord.WebSocket.SocketMessage.Discord#IMessage#Channel
  parent: Discord.WebSocket.SocketMessage
  name: IMessage.Channel
  nameWithType: SocketMessage.IMessage.Channel
  fullName: Discord.WebSocket.SocketMessage.Discord.IMessage.Channel
  nameWithType.vb: SocketMessage.Discord.IMessage.Channel
  name.vb: Discord.IMessage.Channel
- uid: Discord.WebSocket.SocketMessage.Discord#IMessage#Type
  commentId: P:Discord.WebSocket.SocketMessage.Discord#IMessage#Type
  parent: Discord.WebSocket.SocketMessage
  name: IMessage.Type
  nameWithType: SocketMessage.IMessage.Type
  fullName: Discord.WebSocket.SocketMessage.Discord.IMessage.Type
  nameWithType.vb: SocketMessage.Discord.IMessage.Type
  name.vb: Discord.IMessage.Type
- uid: Discord.WebSocket.SocketMessage.Discord#IMessage#Attachments
  commentId: P:Discord.WebSocket.SocketMessage.Discord#IMessage#Attachments
  parent: Discord.WebSocket.SocketMessage
  name: IMessage.Attachments
  nameWithType: SocketMessage.IMessage.Attachments
  fullName: Discord.WebSocket.SocketMessage.Discord.IMessage.Attachments
  nameWithType.vb: SocketMessage.Discord.IMessage.Attachments
  name.vb: Discord.IMessage.Attachments
- uid: Discord.WebSocket.SocketMessage.Discord#IMessage#Embeds
  commentId: P:Discord.WebSocket.SocketMessage.Discord#IMessage#Embeds
  parent: Discord.WebSocket.SocketMessage
  name: IMessage.Embeds
  nameWithType: SocketMessage.IMessage.Embeds
  fullName: Discord.WebSocket.SocketMessage.Discord.IMessage.Embeds
  nameWithType.vb: SocketMessage.Discord.IMessage.Embeds
  name.vb: Discord.IMessage.Embeds
- uid: Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedChannelIds
  commentId: P:Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedChannelIds
  parent: Discord.WebSocket.SocketMessage
  name: IMessage.MentionedChannelIds
  nameWithType: SocketMessage.IMessage.MentionedChannelIds
  fullName: Discord.WebSocket.SocketMessage.Discord.IMessage.MentionedChannelIds
  nameWithType.vb: SocketMessage.Discord.IMessage.MentionedChannelIds
  name.vb: Discord.IMessage.MentionedChannelIds
- uid: Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedRoleIds
  commentId: P:Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedRoleIds
  parent: Discord.WebSocket.SocketMessage
  name: IMessage.MentionedRoleIds
  nameWithType: SocketMessage.IMessage.MentionedRoleIds
  fullName: Discord.WebSocket.SocketMessage.Discord.IMessage.MentionedRoleIds
  nameWithType.vb: SocketMessage.Discord.IMessage.MentionedRoleIds
  name.vb: Discord.IMessage.MentionedRoleIds
- uid: Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedUserIds
  commentId: P:Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedUserIds
  parent: Discord.WebSocket.SocketMessage
  name: IMessage.MentionedUserIds
  nameWithType: SocketMessage.IMessage.MentionedUserIds
  fullName: Discord.WebSocket.SocketMessage.Discord.IMessage.MentionedUserIds
  nameWithType.vb: SocketMessage.Discord.IMessage.MentionedUserIds
  name.vb: Discord.IMessage.MentionedUserIds
- uid: Discord.WebSocket.SocketMessage.AddReactionAsync(Discord.IEmote,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketMessage.AddReactionAsync(Discord.IEmote,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketMessage
  name: AddReactionAsync(IEmote, RequestOptions)
  nameWithType: SocketMessage.AddReactionAsync(IEmote, RequestOptions)
  fullName: Discord.WebSocket.SocketMessage.AddReactionAsync(Discord.IEmote, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.SocketMessage.AddReactionAsync(Discord.IEmote,Discord.RequestOptions)
    name: AddReactionAsync
    nameWithType: SocketMessage.AddReactionAsync
    fullName: Discord.WebSocket.SocketMessage.AddReactionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketMessage.AddReactionAsync(Discord.IEmote,Discord.RequestOptions)
    name: AddReactionAsync
    nameWithType: SocketMessage.AddReactionAsync
    fullName: Discord.WebSocket.SocketMessage.AddReactionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketMessage.RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketMessage.RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketMessage
  name: RemoveReactionAsync(IEmote, IUser, RequestOptions)
  nameWithType: SocketMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions)
  fullName: Discord.WebSocket.SocketMessage.RemoveReactionAsync(Discord.IEmote, Discord.IUser, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.SocketMessage.RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)
    name: RemoveReactionAsync
    nameWithType: SocketMessage.RemoveReactionAsync
    fullName: Discord.WebSocket.SocketMessage.RemoveReactionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketMessage.RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)
    name: RemoveReactionAsync
    nameWithType: SocketMessage.RemoveReactionAsync
    fullName: Discord.WebSocket.SocketMessage.RemoveReactionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketMessage.RemoveReactionAsync(Discord.IEmote,System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketMessage.RemoveReactionAsync(Discord.IEmote,System.UInt64,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketMessage
  isExternal: true
  name: RemoveReactionAsync(IEmote, UInt64, RequestOptions)
  nameWithType: SocketMessage.RemoveReactionAsync(IEmote, UInt64, RequestOptions)
  fullName: Discord.WebSocket.SocketMessage.RemoveReactionAsync(Discord.IEmote, System.UInt64, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.SocketMessage.RemoveReactionAsync(Discord.IEmote,System.UInt64,Discord.RequestOptions)
    name: RemoveReactionAsync
    nameWithType: SocketMessage.RemoveReactionAsync
    fullName: Discord.WebSocket.SocketMessage.RemoveReactionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketMessage.RemoveReactionAsync(Discord.IEmote,System.UInt64,Discord.RequestOptions)
    name: RemoveReactionAsync
    nameWithType: SocketMessage.RemoveReactionAsync
    fullName: Discord.WebSocket.SocketMessage.RemoveReactionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
  parent: Discord.WebSocket.SocketMessage
  name: RemoveAllReactionsAsync(RequestOptions)
  nameWithType: SocketMessage.RemoveAllReactionsAsync(RequestOptions)
  fullName: Discord.WebSocket.SocketMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.SocketMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
    name: RemoveAllReactionsAsync
    nameWithType: SocketMessage.RemoveAllReactionsAsync
    fullName: Discord.WebSocket.SocketMessage.RemoveAllReactionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
    name: RemoveAllReactionsAsync
    nameWithType: SocketMessage.RemoveAllReactionsAsync
    fullName: Discord.WebSocket.SocketMessage.RemoveAllReactionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketMessage.GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions)
  commentId: M:Discord.WebSocket.SocketMessage.GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions)
  parent: Discord.WebSocket.SocketMessage
  isExternal: true
  name: GetReactionUsersAsync(IEmote, Int32, RequestOptions)
  nameWithType: SocketMessage.GetReactionUsersAsync(IEmote, Int32, RequestOptions)
  fullName: Discord.WebSocket.SocketMessage.GetReactionUsersAsync(Discord.IEmote, System.Int32, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.WebSocket.SocketMessage.GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions)
    name: GetReactionUsersAsync
    nameWithType: SocketMessage.GetReactionUsersAsync
    fullName: Discord.WebSocket.SocketMessage.GetReactionUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.WebSocket.SocketMessage.GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions)
    name: GetReactionUsersAsync
    nameWithType: SocketMessage.GetReactionUsersAsync
    fullName: Discord.WebSocket.SocketMessage.GetReactionUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketEntity{System.UInt64}.Id
  commentId: P:Discord.WebSocket.SocketEntity{System.UInt64}.Id
  parent: Discord.WebSocket.SocketEntity{System.UInt64}
  definition: Discord.WebSocket.SocketEntity`1.Id
  name: Id
  nameWithType: SocketEntity<UInt64>.Id
  fullName: Discord.WebSocket.SocketEntity<System.UInt64>.Id
  nameWithType.vb: SocketEntity(Of UInt64).Id
  fullName.vb: Discord.WebSocket.SocketEntity(Of System.UInt64).Id
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IUserMessage.Discord.Commands.MessageExtensions.HasCharPrefix(System.Char,System.Int32@)
  commentId: M:Discord.Commands.MessageExtensions.HasCharPrefix(Discord.IUserMessage,System.Char,System.Int32@)
  parent: Discord.Commands.MessageExtensions
  definition: Discord.Commands.MessageExtensions.HasCharPrefix(Discord.IUserMessage,System.Char,System.Int32@)
  name: HasCharPrefix(Char, Int32)
  nameWithType: MessageExtensions.HasCharPrefix(Char, Int32)
  fullName: Discord.Commands.MessageExtensions.HasCharPrefix(System.Char, System.Int32)
  spec.csharp:
  - uid: Discord.Commands.MessageExtensions.HasCharPrefix(System.Char,System.Int32@)
    name: HasCharPrefix
    nameWithType: MessageExtensions.HasCharPrefix
    fullName: Discord.Commands.MessageExtensions.HasCharPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.MessageExtensions.HasCharPrefix(System.Char,System.Int32@)
    name: HasCharPrefix
    nameWithType: MessageExtensions.HasCharPrefix
    fullName: Discord.Commands.MessageExtensions.HasCharPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IUserMessage.Discord.Commands.MessageExtensions.HasStringPrefix(System.String,System.Int32@,System.StringComparison)
  commentId: M:Discord.Commands.MessageExtensions.HasStringPrefix(Discord.IUserMessage,System.String,System.Int32@,System.StringComparison)
  parent: Discord.Commands.MessageExtensions
  definition: Discord.Commands.MessageExtensions.HasStringPrefix(Discord.IUserMessage,System.String,System.Int32@,System.StringComparison)
  name: HasStringPrefix(String, Int32, StringComparison)
  nameWithType: MessageExtensions.HasStringPrefix(String, Int32, StringComparison)
  fullName: Discord.Commands.MessageExtensions.HasStringPrefix(System.String, System.Int32, System.StringComparison)
  spec.csharp:
  - uid: Discord.Commands.MessageExtensions.HasStringPrefix(System.String,System.Int32@,System.StringComparison)
    name: HasStringPrefix
    nameWithType: MessageExtensions.HasStringPrefix
    fullName: Discord.Commands.MessageExtensions.HasStringPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.StringComparison
    name: StringComparison
    nameWithType: StringComparison
    fullName: System.StringComparison
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.MessageExtensions.HasStringPrefix(System.String,System.Int32@,System.StringComparison)
    name: HasStringPrefix
    nameWithType: MessageExtensions.HasStringPrefix
    fullName: Discord.Commands.MessageExtensions.HasStringPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.StringComparison
    name: StringComparison
    nameWithType: StringComparison
    fullName: System.StringComparison
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IUserMessage.Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUser,System.Int32@)
  commentId: M:Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUserMessage,Discord.IUser,System.Int32@)
  parent: Discord.Commands.MessageExtensions
  definition: Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUserMessage,Discord.IUser,System.Int32@)
  name: HasMentionPrefix(IUser, Int32)
  nameWithType: MessageExtensions.HasMentionPrefix(IUser, Int32)
  fullName: Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUser, System.Int32)
  spec.csharp:
  - uid: Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUser,System.Int32@)
    name: HasMentionPrefix
    nameWithType: MessageExtensions.HasMentionPrefix
    fullName: Discord.Commands.MessageExtensions.HasMentionPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUser,System.Int32@)
    name: HasMentionPrefix
    nameWithType: MessageExtensions.HasMentionPrefix
    fullName: Discord.Commands.MessageExtensions.HasMentionPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.WebSocket.SocketEntity`1
  commentId: T:Discord.WebSocket.SocketEntity`1
  name: SocketEntity<T>
  nameWithType: SocketEntity<T>
  fullName: Discord.WebSocket.SocketEntity<T>
  nameWithType.vb: SocketEntity(Of T)
  fullName.vb: Discord.WebSocket.SocketEntity(Of T)
  name.vb: SocketEntity(Of T)
  spec.csharp:
  - uid: Discord.WebSocket.SocketEntity`1
    name: SocketEntity
    nameWithType: SocketEntity
    fullName: Discord.WebSocket.SocketEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.WebSocket.SocketEntity`1
    name: SocketEntity
    nameWithType: SocketEntity
    fullName: Discord.WebSocket.SocketEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketEntity`1.Id
  commentId: P:Discord.WebSocket.SocketEntity`1.Id
  name: Id
  nameWithType: SocketEntity<T>.Id
  fullName: Discord.WebSocket.SocketEntity<T>.Id
  nameWithType.vb: SocketEntity(Of T).Id
  fullName.vb: Discord.WebSocket.SocketEntity(Of T).Id
- uid: Discord.Commands.MessageExtensions.HasCharPrefix(Discord.IUserMessage,System.Char,System.Int32@)
  commentId: M:Discord.Commands.MessageExtensions.HasCharPrefix(Discord.IUserMessage,System.Char,System.Int32@)
  isExternal: true
  name: HasCharPrefix(IUserMessage, Char, Int32)
  nameWithType: MessageExtensions.HasCharPrefix(IUserMessage, Char, Int32)
  fullName: Discord.Commands.MessageExtensions.HasCharPrefix(Discord.IUserMessage, System.Char, System.Int32)
  spec.csharp:
  - uid: Discord.Commands.MessageExtensions.HasCharPrefix(Discord.IUserMessage,System.Char,System.Int32@)
    name: HasCharPrefix
    nameWithType: MessageExtensions.HasCharPrefix
    fullName: Discord.Commands.MessageExtensions.HasCharPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.MessageExtensions.HasCharPrefix(Discord.IUserMessage,System.Char,System.Int32@)
    name: HasCharPrefix
    nameWithType: MessageExtensions.HasCharPrefix
    fullName: Discord.Commands.MessageExtensions.HasCharPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.MessageExtensions
  commentId: T:Discord.Commands.MessageExtensions
  parent: Discord.Commands
  name: MessageExtensions
  nameWithType: MessageExtensions
  fullName: Discord.Commands.MessageExtensions
- uid: Discord.Commands.MessageExtensions.HasStringPrefix(Discord.IUserMessage,System.String,System.Int32@,System.StringComparison)
  commentId: M:Discord.Commands.MessageExtensions.HasStringPrefix(Discord.IUserMessage,System.String,System.Int32@,System.StringComparison)
  isExternal: true
  name: HasStringPrefix(IUserMessage, String, Int32, StringComparison)
  nameWithType: MessageExtensions.HasStringPrefix(IUserMessage, String, Int32, StringComparison)
  fullName: Discord.Commands.MessageExtensions.HasStringPrefix(Discord.IUserMessage, System.String, System.Int32, System.StringComparison)
  spec.csharp:
  - uid: Discord.Commands.MessageExtensions.HasStringPrefix(Discord.IUserMessage,System.String,System.Int32@,System.StringComparison)
    name: HasStringPrefix
    nameWithType: MessageExtensions.HasStringPrefix
    fullName: Discord.Commands.MessageExtensions.HasStringPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.StringComparison
    name: StringComparison
    nameWithType: StringComparison
    fullName: System.StringComparison
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.MessageExtensions.HasStringPrefix(Discord.IUserMessage,System.String,System.Int32@,System.StringComparison)
    name: HasStringPrefix
    nameWithType: MessageExtensions.HasStringPrefix
    fullName: Discord.Commands.MessageExtensions.HasStringPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.StringComparison
    name: StringComparison
    nameWithType: StringComparison
    fullName: System.StringComparison
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUserMessage,Discord.IUser,System.Int32@)
  commentId: M:Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUserMessage,Discord.IUser,System.Int32@)
  isExternal: true
  name: HasMentionPrefix(IUserMessage, IUser, Int32)
  nameWithType: MessageExtensions.HasMentionPrefix(IUserMessage, IUser, Int32)
  fullName: Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUserMessage, Discord.IUser, System.Int32)
  spec.csharp:
  - uid: Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUserMessage,Discord.IUser,System.Int32@)
    name: HasMentionPrefix
    nameWithType: MessageExtensions.HasMentionPrefix
    fullName: Discord.Commands.MessageExtensions.HasMentionPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUserMessage,Discord.IUser,System.Int32@)
    name: HasMentionPrefix
    nameWithType: MessageExtensions.HasMentionPrefix
    fullName: Discord.Commands.MessageExtensions.HasMentionPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands
  commentId: N:Discord.Commands
  name: Discord.Commands
  nameWithType: Discord.Commands
  fullName: Discord.Commands
- uid: Discord.WebSocket.SocketMessage.IsTTS
  commentId: P:Discord.WebSocket.SocketMessage.IsTTS
  parent: Discord.WebSocket.SocketMessage
  name: IsTTS
  nameWithType: SocketMessage.IsTTS
  fullName: Discord.WebSocket.SocketMessage.IsTTS
- uid: Discord.WebSocket.SocketUserMessage.IsTTS*
  commentId: Overload:Discord.WebSocket.SocketUserMessage.IsTTS
  name: IsTTS
  nameWithType: SocketUserMessage.IsTTS
  fullName: Discord.WebSocket.SocketUserMessage.IsTTS
- uid: Discord.IMessage.IsTTS
  commentId: P:Discord.IMessage.IsTTS
  parent: Discord.IMessage
  name: IsTTS
  nameWithType: IMessage.IsTTS
  fullName: Discord.IMessage.IsTTS
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.WebSocket.SocketMessage.IsPinned
  commentId: P:Discord.WebSocket.SocketMessage.IsPinned
  parent: Discord.WebSocket.SocketMessage
  name: IsPinned
  nameWithType: SocketMessage.IsPinned
  fullName: Discord.WebSocket.SocketMessage.IsPinned
- uid: Discord.WebSocket.SocketUserMessage.IsPinned*
  commentId: Overload:Discord.WebSocket.SocketUserMessage.IsPinned
  name: IsPinned
  nameWithType: SocketUserMessage.IsPinned
  fullName: Discord.WebSocket.SocketUserMessage.IsPinned
- uid: Discord.IMessage.IsPinned
  commentId: P:Discord.IMessage.IsPinned
  parent: Discord.IMessage
  name: IsPinned
  nameWithType: IMessage.IsPinned
  fullName: Discord.IMessage.IsPinned
- uid: Discord.WebSocket.SocketMessage.IsSuppressed
  commentId: P:Discord.WebSocket.SocketMessage.IsSuppressed
  parent: Discord.WebSocket.SocketMessage
  name: IsSuppressed
  nameWithType: SocketMessage.IsSuppressed
  fullName: Discord.WebSocket.SocketMessage.IsSuppressed
- uid: Discord.WebSocket.SocketUserMessage.IsSuppressed*
  commentId: Overload:Discord.WebSocket.SocketUserMessage.IsSuppressed
  name: IsSuppressed
  nameWithType: SocketUserMessage.IsSuppressed
  fullName: Discord.WebSocket.SocketUserMessage.IsSuppressed
- uid: Discord.IMessage.IsSuppressed
  commentId: P:Discord.IMessage.IsSuppressed
  parent: Discord.IMessage
  name: IsSuppressed
  nameWithType: IMessage.IsSuppressed
  fullName: Discord.IMessage.IsSuppressed
- uid: Discord.WebSocket.SocketMessage.EditedTimestamp
  commentId: P:Discord.WebSocket.SocketMessage.EditedTimestamp
  parent: Discord.WebSocket.SocketMessage
  name: EditedTimestamp
  nameWithType: SocketMessage.EditedTimestamp
  fullName: Discord.WebSocket.SocketMessage.EditedTimestamp
- uid: Discord.WebSocket.SocketUserMessage.EditedTimestamp*
  commentId: Overload:Discord.WebSocket.SocketUserMessage.EditedTimestamp
  name: EditedTimestamp
  nameWithType: SocketUserMessage.EditedTimestamp
  fullName: Discord.WebSocket.SocketUserMessage.EditedTimestamp
- uid: Discord.IMessage.EditedTimestamp
  commentId: P:Discord.IMessage.EditedTimestamp
  parent: Discord.IMessage
  name: EditedTimestamp
  nameWithType: IMessage.EditedTimestamp
  fullName: Discord.IMessage.EditedTimestamp
- uid: System.Nullable{System.DateTimeOffset}
  commentId: T:System.Nullable{System.DateTimeOffset}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTimeOffset>
  nameWithType: Nullable<DateTimeOffset>
  fullName: System.Nullable<System.DateTimeOffset>
  nameWithType.vb: Nullable(Of DateTimeOffset)
  fullName.vb: System.Nullable(Of System.DateTimeOffset)
  name.vb: Nullable(Of DateTimeOffset)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketMessage.Attachments
  commentId: P:Discord.WebSocket.SocketMessage.Attachments
  parent: Discord.WebSocket.SocketMessage
  name: Attachments
  nameWithType: SocketMessage.Attachments
  fullName: Discord.WebSocket.SocketMessage.Attachments
- uid: Discord.WebSocket.SocketUserMessage.Attachments*
  commentId: Overload:Discord.WebSocket.SocketUserMessage.Attachments
  name: Attachments
  nameWithType: SocketUserMessage.Attachments
  fullName: Discord.WebSocket.SocketUserMessage.Attachments
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.Attachment}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.Attachment}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<Attachment>
  nameWithType: IReadOnlyCollection<Attachment>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.Attachment>
  nameWithType.vb: IReadOnlyCollection(Of Attachment)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.Attachment)
  name.vb: IReadOnlyCollection(Of Attachment)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Attachment
    name: Attachment
    nameWithType: Attachment
    fullName: Discord.Attachment
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Attachment
    name: Attachment
    nameWithType: Attachment
    fullName: Discord.Attachment
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Discord.WebSocket.SocketMessage.Embeds
  commentId: P:Discord.WebSocket.SocketMessage.Embeds
  parent: Discord.WebSocket.SocketMessage
  name: Embeds
  nameWithType: SocketMessage.Embeds
  fullName: Discord.WebSocket.SocketMessage.Embeds
- uid: Discord.WebSocket.SocketUserMessage.Embeds*
  commentId: Overload:Discord.WebSocket.SocketUserMessage.Embeds
  name: Embeds
  nameWithType: SocketUserMessage.Embeds
  fullName: Discord.WebSocket.SocketUserMessage.Embeds
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.Embed}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.Embed}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<Embed>
  nameWithType: IReadOnlyCollection<Embed>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.Embed>
  nameWithType.vb: IReadOnlyCollection(Of Embed)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.Embed)
  name.vb: IReadOnlyCollection(Of Embed)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketMessage.Tags
  commentId: P:Discord.WebSocket.SocketMessage.Tags
  parent: Discord.WebSocket.SocketMessage
  name: Tags
  nameWithType: SocketMessage.Tags
  fullName: Discord.WebSocket.SocketMessage.Tags
- uid: Discord.WebSocket.SocketUserMessage.Tags*
  commentId: Overload:Discord.WebSocket.SocketUserMessage.Tags
  name: Tags
  nameWithType: SocketUserMessage.Tags
  fullName: Discord.WebSocket.SocketUserMessage.Tags
- uid: Discord.IMessage.Tags
  commentId: P:Discord.IMessage.Tags
  parent: Discord.IMessage
  name: Tags
  nameWithType: IMessage.Tags
  fullName: Discord.IMessage.Tags
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.ITag}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.ITag}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<ITag>
  nameWithType: IReadOnlyCollection<ITag>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.ITag>
  nameWithType.vb: IReadOnlyCollection(Of ITag)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.ITag)
  name.vb: IReadOnlyCollection(Of ITag)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ITag
    name: ITag
    nameWithType: ITag
    fullName: Discord.ITag
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ITag
    name: ITag
    nameWithType: ITag
    fullName: Discord.ITag
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketMessage.MentionedChannels
  commentId: P:Discord.WebSocket.SocketMessage.MentionedChannels
  parent: Discord.WebSocket.SocketMessage
  name: MentionedChannels
  nameWithType: SocketMessage.MentionedChannels
  fullName: Discord.WebSocket.SocketMessage.MentionedChannels
- uid: Discord.WebSocket.SocketUserMessage.MentionedChannels*
  commentId: Overload:Discord.WebSocket.SocketUserMessage.MentionedChannels
  name: MentionedChannels
  nameWithType: SocketUserMessage.MentionedChannels
  fullName: Discord.WebSocket.SocketUserMessage.MentionedChannels
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketGuildChannel}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketGuildChannel}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<SocketGuildChannel>
  nameWithType: IReadOnlyCollection<SocketGuildChannel>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.WebSocket.SocketGuildChannel>
  nameWithType.vb: IReadOnlyCollection(Of SocketGuildChannel)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.WebSocket.SocketGuildChannel)
  name.vb: IReadOnlyCollection(Of SocketGuildChannel)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketGuildChannel
    name: SocketGuildChannel
    nameWithType: SocketGuildChannel
    fullName: Discord.WebSocket.SocketGuildChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketGuildChannel
    name: SocketGuildChannel
    nameWithType: SocketGuildChannel
    fullName: Discord.WebSocket.SocketGuildChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketMessage.MentionedRoles
  commentId: P:Discord.WebSocket.SocketMessage.MentionedRoles
  parent: Discord.WebSocket.SocketMessage
  name: MentionedRoles
  nameWithType: SocketMessage.MentionedRoles
  fullName: Discord.WebSocket.SocketMessage.MentionedRoles
- uid: Discord.WebSocket.SocketUserMessage.MentionedRoles*
  commentId: Overload:Discord.WebSocket.SocketUserMessage.MentionedRoles
  name: MentionedRoles
  nameWithType: SocketUserMessage.MentionedRoles
  fullName: Discord.WebSocket.SocketUserMessage.MentionedRoles
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketRole}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketRole}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<SocketRole>
  nameWithType: IReadOnlyCollection<SocketRole>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.WebSocket.SocketRole>
  nameWithType.vb: IReadOnlyCollection(Of SocketRole)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.WebSocket.SocketRole)
  name.vb: IReadOnlyCollection(Of SocketRole)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketRole
    name: SocketRole
    nameWithType: SocketRole
    fullName: Discord.WebSocket.SocketRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketRole
    name: SocketRole
    nameWithType: SocketRole
    fullName: Discord.WebSocket.SocketRole
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketMessage.MentionedUsers
  commentId: P:Discord.WebSocket.SocketMessage.MentionedUsers
  parent: Discord.WebSocket.SocketMessage
  name: MentionedUsers
  nameWithType: SocketMessage.MentionedUsers
  fullName: Discord.WebSocket.SocketMessage.MentionedUsers
- uid: Discord.WebSocket.SocketUserMessage.MentionedUsers*
  commentId: Overload:Discord.WebSocket.SocketUserMessage.MentionedUsers
  name: MentionedUsers
  nameWithType: SocketUserMessage.MentionedUsers
  fullName: Discord.WebSocket.SocketUserMessage.MentionedUsers
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketUser}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.WebSocket.SocketUser}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<SocketUser>
  nameWithType: IReadOnlyCollection<SocketUser>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.WebSocket.SocketUser>
  nameWithType.vb: IReadOnlyCollection(Of SocketUser)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.WebSocket.SocketUser)
  name.vb: IReadOnlyCollection(Of SocketUser)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.WebSocket.SocketUser
    name: SocketUser
    nameWithType: SocketUser
    fullName: Discord.WebSocket.SocketUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.WebSocket.SocketUser
    name: SocketUser
    nameWithType: SocketUser
    fullName: Discord.WebSocket.SocketUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.DiscordConfig.MaxMessageSize
  commentId: F:Discord.DiscordConfig.MaxMessageSize
  parent: Discord.DiscordConfig
  name: MaxMessageSize
  nameWithType: DiscordConfig.MaxMessageSize
  fullName: Discord.DiscordConfig.MaxMessageSize
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
- uid: Discord.WebSocket.SocketUserMessage.ModifyAsync*
  commentId: Overload:Discord.WebSocket.SocketUserMessage.ModifyAsync
  name: ModifyAsync
  nameWithType: SocketUserMessage.ModifyAsync
  fullName: Discord.WebSocket.SocketUserMessage.ModifyAsync
- uid: Discord.IUserMessage.ModifyAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)
  commentId: M:Discord.IUserMessage.ModifyAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)
  parent: Discord.IUserMessage
  isExternal: true
  name: ModifyAsync(Action<MessageProperties>, RequestOptions)
  nameWithType: IUserMessage.ModifyAsync(Action<MessageProperties>, RequestOptions)
  fullName: Discord.IUserMessage.ModifyAsync(System.Action<Discord.MessageProperties>, Discord.RequestOptions)
  nameWithType.vb: IUserMessage.ModifyAsync(Action(Of MessageProperties), RequestOptions)
  fullName.vb: Discord.IUserMessage.ModifyAsync(System.Action(Of Discord.MessageProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of MessageProperties), RequestOptions)
  spec.csharp:
  - uid: Discord.IUserMessage.ModifyAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: IUserMessage.ModifyAsync
    fullName: Discord.IUserMessage.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.MessageProperties
    name: MessageProperties
    nameWithType: MessageProperties
    fullName: Discord.MessageProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IUserMessage.ModifyAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: IUserMessage.ModifyAsync
    fullName: Discord.IUserMessage.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.MessageProperties
    name: MessageProperties
    nameWithType: MessageProperties
    fullName: Discord.MessageProperties
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{Discord.MessageProperties}
  commentId: T:System.Action{Discord.MessageProperties}
  parent: System
  definition: System.Action`1
  name: Action<MessageProperties>
  nameWithType: Action<MessageProperties>
  fullName: System.Action<Discord.MessageProperties>
  nameWithType.vb: Action(Of MessageProperties)
  fullName.vb: System.Action(Of Discord.MessageProperties)
  name.vb: Action(Of MessageProperties)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.MessageProperties
    name: MessageProperties
    nameWithType: MessageProperties
    fullName: Discord.MessageProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.MessageProperties
    name: MessageProperties
    nameWithType: MessageProperties
    fullName: Discord.MessageProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Discord.DiscordConfig
  commentId: T:Discord.DiscordConfig
  parent: Discord
  name: DiscordConfig
  nameWithType: DiscordConfig
  fullName: Discord.DiscordConfig
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Discord.WebSocket.SocketUserMessage.PinAsync*
  commentId: Overload:Discord.WebSocket.SocketUserMessage.PinAsync
  name: PinAsync
  nameWithType: SocketUserMessage.PinAsync
  fullName: Discord.WebSocket.SocketUserMessage.PinAsync
- uid: Discord.IUserMessage.PinAsync(Discord.RequestOptions)
  commentId: M:Discord.IUserMessage.PinAsync(Discord.RequestOptions)
  parent: Discord.IUserMessage
  name: PinAsync(RequestOptions)
  nameWithType: IUserMessage.PinAsync(RequestOptions)
  fullName: Discord.IUserMessage.PinAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IUserMessage.PinAsync(Discord.RequestOptions)
    name: PinAsync
    nameWithType: IUserMessage.PinAsync
    fullName: Discord.IUserMessage.PinAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IUserMessage.PinAsync(Discord.RequestOptions)
    name: PinAsync
    nameWithType: IUserMessage.PinAsync
    fullName: Discord.IUserMessage.PinAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketUserMessage.UnpinAsync*
  commentId: Overload:Discord.WebSocket.SocketUserMessage.UnpinAsync
  name: UnpinAsync
  nameWithType: SocketUserMessage.UnpinAsync
  fullName: Discord.WebSocket.SocketUserMessage.UnpinAsync
- uid: Discord.IUserMessage.UnpinAsync(Discord.RequestOptions)
  commentId: M:Discord.IUserMessage.UnpinAsync(Discord.RequestOptions)
  parent: Discord.IUserMessage
  name: UnpinAsync(RequestOptions)
  nameWithType: IUserMessage.UnpinAsync(RequestOptions)
  fullName: Discord.IUserMessage.UnpinAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IUserMessage.UnpinAsync(Discord.RequestOptions)
    name: UnpinAsync
    nameWithType: IUserMessage.UnpinAsync
    fullName: Discord.IUserMessage.UnpinAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IUserMessage.UnpinAsync(Discord.RequestOptions)
    name: UnpinAsync
    nameWithType: IUserMessage.UnpinAsync
    fullName: Discord.IUserMessage.UnpinAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketUserMessage.ModifySuppressionAsync*
  commentId: Overload:Discord.WebSocket.SocketUserMessage.ModifySuppressionAsync
  name: ModifySuppressionAsync
  nameWithType: SocketUserMessage.ModifySuppressionAsync
  fullName: Discord.WebSocket.SocketUserMessage.ModifySuppressionAsync
- uid: Discord.IUserMessage.ModifySuppressionAsync(System.Boolean,Discord.RequestOptions)
  commentId: M:Discord.IUserMessage.ModifySuppressionAsync(System.Boolean,Discord.RequestOptions)
  parent: Discord.IUserMessage
  isExternal: true
  name: ModifySuppressionAsync(Boolean, RequestOptions)
  nameWithType: IUserMessage.ModifySuppressionAsync(Boolean, RequestOptions)
  fullName: Discord.IUserMessage.ModifySuppressionAsync(System.Boolean, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IUserMessage.ModifySuppressionAsync(System.Boolean,Discord.RequestOptions)
    name: ModifySuppressionAsync
    nameWithType: IUserMessage.ModifySuppressionAsync
    fullName: Discord.IUserMessage.ModifySuppressionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IUserMessage.ModifySuppressionAsync(System.Boolean,Discord.RequestOptions)
    name: ModifySuppressionAsync
    nameWithType: IUserMessage.ModifySuppressionAsync
    fullName: Discord.IUserMessage.ModifySuppressionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.WebSocket.SocketUserMessage.Resolve*
  commentId: Overload:Discord.WebSocket.SocketUserMessage.Resolve
  name: Resolve
  nameWithType: SocketUserMessage.Resolve
  fullName: Discord.WebSocket.SocketUserMessage.Resolve
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Discord.TagHandling
  commentId: T:Discord.TagHandling
  parent: Discord
  name: TagHandling
  nameWithType: TagHandling
  fullName: Discord.TagHandling
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.IUserMessage.Resolve(Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  commentId: M:Discord.IUserMessage.Resolve(Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  parent: Discord.IUserMessage
  name: Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling)
  nameWithType: IUserMessage.Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling)
  fullName: Discord.IUserMessage.Resolve(Discord.TagHandling, Discord.TagHandling, Discord.TagHandling, Discord.TagHandling, Discord.TagHandling)
  spec.csharp:
  - uid: Discord.IUserMessage.Resolve(Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
    name: Resolve
    nameWithType: IUserMessage.Resolve
    fullName: Discord.IUserMessage.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.TagHandling
    name: TagHandling
    nameWithType: TagHandling
    fullName: Discord.TagHandling
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.TagHandling
    name: TagHandling
    nameWithType: TagHandling
    fullName: Discord.TagHandling
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.TagHandling
    name: TagHandling
    nameWithType: TagHandling
    fullName: Discord.TagHandling
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.TagHandling
    name: TagHandling
    nameWithType: TagHandling
    fullName: Discord.TagHandling
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.TagHandling
    name: TagHandling
    nameWithType: TagHandling
    fullName: Discord.TagHandling
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IUserMessage.Resolve(Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
    name: Resolve
    nameWithType: IUserMessage.Resolve
    fullName: Discord.IUserMessage.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.TagHandling
    name: TagHandling
    nameWithType: TagHandling
    fullName: Discord.TagHandling
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.TagHandling
    name: TagHandling
    nameWithType: TagHandling
    fullName: Discord.TagHandling
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.TagHandling
    name: TagHandling
    nameWithType: TagHandling
    fullName: Discord.TagHandling
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.TagHandling
    name: TagHandling
    nameWithType: TagHandling
    fullName: Discord.TagHandling
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.TagHandling
    name: TagHandling
    nameWithType: TagHandling
    fullName: Discord.TagHandling
  - name: )
    nameWithType: )
    fullName: )
