### YamlMime:ManagedReference
items:
- uid: Discord.Commands.IResult
  commentId: T:Discord.Commands.IResult
  id: IResult
  parent: Discord.Commands
  children:
  - Discord.Commands.IResult.Error
  - Discord.Commands.IResult.ErrorReason
  - Discord.Commands.IResult.IsSuccess
  langs:
  - csharp
  - vb
  name: IResult
  nameWithType: IResult
  fullName: Discord.Commands.IResult
  type: Interface
  source:
    remote:
      path: src/Discord.Net.Commands/Results/IResult.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IResult
    path: ../src/Discord.Net.Commands/Results/IResult.cs
    startLine: 5
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nContains information of the result related to a command.\n"
  example: []
  syntax:
    content: public interface IResult
    content.vb: Public Interface IResult
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Discord.Commands.IResult.Error
  commentId: P:Discord.Commands.IResult.Error
  id: Error
  parent: Discord.Commands.IResult
  langs:
  - csharp
  - vb
  name: Error
  nameWithType: IResult.Error
  fullName: Discord.Commands.IResult.Error
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Results/IResult.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Error
    path: ../src/Discord.Net.Commands/Results/IResult.cs
    startLine: 14
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nDescribes the error type that may have occurred during the operation.\n"
  example: []
  syntax:
    content: CommandError? Error { get; }
    parameters: []
    return:
      type: System.Nullable{Discord.Commands.CommandError}
      description: "\nA <xref href=\"Discord.Commands.CommandError\" data-throw-if-not-resolved=\"false\"></xref> indicating the type of error that may have occurred during the operation; \n<code>null</code> if the operation was successful.\n"
    content.vb: ReadOnly Property Error As CommandError?
  overload: Discord.Commands.IResult.Error*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.Commands.IResult.ErrorReason
  commentId: P:Discord.Commands.IResult.ErrorReason
  id: ErrorReason
  parent: Discord.Commands.IResult
  langs:
  - csharp
  - vb
  name: ErrorReason
  nameWithType: IResult.ErrorReason
  fullName: Discord.Commands.IResult.ErrorReason
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Results/IResult.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ErrorReason
    path: ../src/Discord.Net.Commands/Results/IResult.cs
    startLine: 21
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nDescribes the reason for the error.\n"
  example: []
  syntax:
    content: string ErrorReason { get; }
    parameters: []
    return:
      type: System.String
      description: "\nA string containing the error reason.\n"
    content.vb: ReadOnly Property ErrorReason As String
  overload: Discord.Commands.IResult.ErrorReason*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Discord.Commands.IResult.IsSuccess
  commentId: P:Discord.Commands.IResult.IsSuccess
  id: IsSuccess
  parent: Discord.Commands.IResult
  langs:
  - csharp
  - vb
  name: IsSuccess
  nameWithType: IResult.IsSuccess
  fullName: Discord.Commands.IResult.IsSuccess
  type: Property
  source:
    remote:
      path: src/Discord.Net.Commands/Results/IResult.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsSuccess
    path: ../src/Discord.Net.Commands/Results/IResult.cs
    startLine: 28
  assemblies:
  - Discord.Net.Commands
  namespace: Discord.Commands
  summary: "\nIndicates whether the operation was successful or not.\n"
  example: []
  syntax:
    content: bool IsSuccess { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the result is positive; otherwise <code>false</code>.\n"
    content.vb: ReadOnly Property IsSuccess As Boolean
  overload: Discord.Commands.IResult.IsSuccess*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Discord.Commands
  commentId: N:Discord.Commands
  name: Discord.Commands
  nameWithType: Discord.Commands
  fullName: Discord.Commands
- uid: Discord.Commands.CommandError
  commentId: T:Discord.Commands.CommandError
  parent: Discord.Commands
  name: CommandError
  nameWithType: CommandError
  fullName: Discord.Commands.CommandError
- uid: Discord.Commands.IResult.Error*
  commentId: Overload:Discord.Commands.IResult.Error
  name: Error
  nameWithType: IResult.Error
  fullName: Discord.Commands.IResult.Error
- uid: System.Nullable{Discord.Commands.CommandError}
  commentId: T:System.Nullable{Discord.Commands.CommandError}
  parent: System
  definition: System.Nullable`1
  name: Nullable<CommandError>
  nameWithType: Nullable<CommandError>
  fullName: System.Nullable<Discord.Commands.CommandError>
  nameWithType.vb: Nullable(Of CommandError)
  fullName.vb: System.Nullable(Of Discord.Commands.CommandError)
  name.vb: Nullable(Of CommandError)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Commands.CommandError
    name: CommandError
    nameWithType: CommandError
    fullName: Discord.Commands.CommandError
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Commands.CommandError
    name: CommandError
    nameWithType: CommandError
    fullName: Discord.Commands.CommandError
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Commands.IResult.ErrorReason*
  commentId: Overload:Discord.Commands.IResult.ErrorReason
  name: ErrorReason
  nameWithType: IResult.ErrorReason
  fullName: Discord.Commands.IResult.ErrorReason
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.Commands.IResult.IsSuccess*
  commentId: Overload:Discord.Commands.IResult.IsSuccess
  name: IsSuccess
  nameWithType: IResult.IsSuccess
  fullName: Discord.Commands.IResult.IsSuccess
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
