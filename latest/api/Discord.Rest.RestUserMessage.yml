### YamlMime:ManagedReference
items:
- uid: Discord.Rest.RestUserMessage
  commentId: T:Discord.Rest.RestUserMessage
  id: RestUserMessage
  parent: Discord.Rest
  children:
  - Discord.Rest.RestUserMessage.AddReactionAsync(Discord.IEmote,Discord.RequestOptions)
  - Discord.Rest.RestUserMessage.Attachments
  - Discord.Rest.RestUserMessage.EditedTimestamp
  - Discord.Rest.RestUserMessage.Embeds
  - Discord.Rest.RestUserMessage.GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions)
  - Discord.Rest.RestUserMessage.IsPinned
  - Discord.Rest.RestUserMessage.IsSuppressed
  - Discord.Rest.RestUserMessage.IsTTS
  - Discord.Rest.RestUserMessage.MentionedChannelIds
  - Discord.Rest.RestUserMessage.MentionedRoleIds
  - Discord.Rest.RestUserMessage.MentionedUsers
  - Discord.Rest.RestUserMessage.ModifyAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)
  - Discord.Rest.RestUserMessage.ModifySuppressionAsync(System.Boolean,Discord.RequestOptions)
  - Discord.Rest.RestUserMessage.PinAsync(Discord.RequestOptions)
  - Discord.Rest.RestUserMessage.Reactions
  - Discord.Rest.RestUserMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
  - Discord.Rest.RestUserMessage.RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)
  - Discord.Rest.RestUserMessage.RemoveReactionAsync(Discord.IEmote,System.UInt64,Discord.RequestOptions)
  - Discord.Rest.RestUserMessage.Resolve(Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  - Discord.Rest.RestUserMessage.Resolve(System.Int32,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  - Discord.Rest.RestUserMessage.Tags
  - Discord.Rest.RestUserMessage.UnpinAsync(Discord.RequestOptions)
  langs:
  - csharp
  - vb
  name: RestUserMessage
  nameWithType: RestUserMessage
  fullName: Discord.Rest.RestUserMessage
  type: Class
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RestUserMessage
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 13
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nRepresents a REST-based message sent by a user.\n"
  example: []
  syntax:
    content: 'public class RestUserMessage : RestMessage, IUpdateable, IUserMessage, IMessage, ISnowflakeEntity, IEntity<ulong>, IDeletable'
    content.vb: >-
      Public Class RestUserMessage
          Inherits RestMessage
          Implements IUpdateable, IUserMessage, IMessage, ISnowflakeEntity, IEntity(Of ULong), IDeletable
  inheritance:
  - System.Object
  - Discord.Rest.RestEntity{System.UInt64}
  - Discord.Rest.RestMessage
  implements:
  - Discord.IUpdateable
  - Discord.IUserMessage
  - Discord.IMessage
  - Discord.ISnowflakeEntity
  - Discord.IEntity{System.UInt64}
  - Discord.IDeletable
  inheritedMembers:
  - Discord.Rest.RestMessage.Channel
  - Discord.Rest.RestMessage.Author
  - Discord.Rest.RestMessage.Source
  - Discord.Rest.RestMessage.Content
  - Discord.Rest.RestMessage.CreatedAt
  - Discord.Rest.RestMessage.Timestamp
  - Discord.Rest.RestMessage.Activity
  - Discord.Rest.RestMessage.Application
  - Discord.Rest.RestMessage.UpdateAsync(Discord.RequestOptions)
  - Discord.Rest.RestMessage.DeleteAsync(Discord.RequestOptions)
  - Discord.Rest.RestMessage.ToString
  - Discord.Rest.RestMessage.Discord#IMessage#Type
  - Discord.Rest.RestMessage.Discord#IMessage#Author
  - Discord.Rest.RestMessage.Discord#IMessage#Attachments
  - Discord.Rest.RestMessage.Discord#IMessage#Embeds
  - Discord.Rest.RestMessage.Discord#IMessage#MentionedUserIds
  - Discord.Rest.RestEntity{System.UInt64}.Id
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - Discord.IUserMessage.Discord.Commands.MessageExtensions.HasCharPrefix(System.Char,System.Int32@)
  - Discord.IUserMessage.Discord.Commands.MessageExtensions.HasStringPrefix(System.String,System.Int32@,System.StringComparison)
  - Discord.IUserMessage.Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUser,System.Int32@)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.Rest.RestUserMessage.IsTTS
  commentId: P:Discord.Rest.RestUserMessage.IsTTS
  id: IsTTS
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: IsTTS
  nameWithType: RestUserMessage.IsTTS
  fullName: Discord.Rest.RestUserMessage.IsTTS
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsTTS
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 24
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the value that indicates whether this message was meant to be read-aloud by Discord.\n"
  example: []
  syntax:
    content: public override bool IsTTS { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this message was sent as a text-to-speech message; otherwise <code>false</code>.\n"
    content.vb: Public Overrides ReadOnly Property IsTTS As Boolean
  overridden: Discord.Rest.RestMessage.IsTTS
  overload: Discord.Rest.RestUserMessage.IsTTS*
  implements:
  - Discord.IMessage.IsTTS
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.Rest.RestUserMessage.IsPinned
  commentId: P:Discord.Rest.RestUserMessage.IsPinned
  id: IsPinned
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: IsPinned
  nameWithType: RestUserMessage.IsPinned
  fullName: Discord.Rest.RestUserMessage.IsPinned
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsPinned
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 26
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the value that indicates whether this message is pinned.\n"
  example: []
  syntax:
    content: public override bool IsPinned { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this message was added to its channel&apos;s pinned messages; otherwise <code>false</code>.\n"
    content.vb: Public Overrides ReadOnly Property IsPinned As Boolean
  overridden: Discord.Rest.RestMessage.IsPinned
  overload: Discord.Rest.RestUserMessage.IsPinned*
  implements:
  - Discord.IMessage.IsPinned
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.Rest.RestUserMessage.IsSuppressed
  commentId: P:Discord.Rest.RestUserMessage.IsSuppressed
  id: IsSuppressed
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: IsSuppressed
  nameWithType: RestUserMessage.IsSuppressed
  fullName: Discord.Rest.RestUserMessage.IsSuppressed
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsSuppressed
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 28
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the value that indicates whether or not this message&apos;s embeds are suppressed.\n"
  example: []
  syntax:
    content: public override bool IsSuppressed { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the embeds in this message have been suppressed (made invisible); otherwise <code>false</code>.\n"
    content.vb: Public Overrides ReadOnly Property IsSuppressed As Boolean
  overridden: Discord.Rest.RestMessage.IsSuppressed
  overload: Discord.Rest.RestUserMessage.IsSuppressed*
  implements:
  - Discord.IMessage.IsSuppressed
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.Rest.RestUserMessage.EditedTimestamp
  commentId: P:Discord.Rest.RestUserMessage.EditedTimestamp
  id: EditedTimestamp
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: EditedTimestamp
  nameWithType: RestUserMessage.EditedTimestamp
  fullName: Discord.Rest.RestUserMessage.EditedTimestamp
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: EditedTimestamp
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 30
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the time of this message&apos;s last edit.\n"
  example: []
  syntax:
    content: public override DateTimeOffset? EditedTimestamp { get; }
    parameters: []
    return:
      type: System.Nullable{System.DateTimeOffset}
      description: "\nTime of when the message was last edited; <code>null</code> if the message is never edited.\n"
    content.vb: Public Overrides ReadOnly Property EditedTimestamp As DateTimeOffset?
  overridden: Discord.Rest.RestMessage.EditedTimestamp
  overload: Discord.Rest.RestUserMessage.EditedTimestamp*
  implements:
  - Discord.IMessage.EditedTimestamp
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.Rest.RestUserMessage.Attachments
  commentId: P:Discord.Rest.RestUserMessage.Attachments
  id: Attachments
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: Attachments
  nameWithType: RestUserMessage.Attachments
  fullName: Discord.Rest.RestUserMessage.Attachments
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Attachments
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 32
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of the <xref href=\"Discord.Attachment\" data-throw-if-not-resolved=\"false\"></xref>&apos;s on the message.\n"
  example: []
  syntax:
    content: public override IReadOnlyCollection<Attachment> Attachments { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.Attachment}
    content.vb: Public Overrides ReadOnly Property Attachments As IReadOnlyCollection(Of Attachment)
  overridden: Discord.Rest.RestMessage.Attachments
  overload: Discord.Rest.RestUserMessage.Attachments*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.Rest.RestUserMessage.Embeds
  commentId: P:Discord.Rest.RestUserMessage.Embeds
  id: Embeds
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: Embeds
  nameWithType: RestUserMessage.Embeds
  fullName: Discord.Rest.RestUserMessage.Embeds
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Embeds
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 34
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of the <xref href=\"Discord.Embed\" data-throw-if-not-resolved=\"false\"></xref>&apos;s on the message.\n"
  example: []
  syntax:
    content: public override IReadOnlyCollection<Embed> Embeds { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.Embed}
    content.vb: Public Overrides ReadOnly Property Embeds As IReadOnlyCollection(Of Embed)
  overridden: Discord.Rest.RestMessage.Embeds
  overload: Discord.Rest.RestUserMessage.Embeds*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.Rest.RestUserMessage.MentionedChannelIds
  commentId: P:Discord.Rest.RestUserMessage.MentionedChannelIds
  id: MentionedChannelIds
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: MentionedChannelIds
  nameWithType: RestUserMessage.MentionedChannelIds
  fullName: Discord.Rest.RestUserMessage.MentionedChannelIds
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: MentionedChannelIds
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 36
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the IDs of channels mentioned in this message.\n"
  example: []
  syntax:
    content: public override IReadOnlyCollection<ulong> MentionedChannelIds { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{System.UInt64}
      description: "\nA read-only collection of channel IDs.\n"
    content.vb: Public Overrides ReadOnly Property MentionedChannelIds As IReadOnlyCollection(Of ULong)
  overridden: Discord.Rest.RestMessage.MentionedChannelIds
  overload: Discord.Rest.RestUserMessage.MentionedChannelIds*
  implements:
  - Discord.IMessage.MentionedChannelIds
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.Rest.RestUserMessage.MentionedRoleIds
  commentId: P:Discord.Rest.RestUserMessage.MentionedRoleIds
  id: MentionedRoleIds
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: MentionedRoleIds
  nameWithType: RestUserMessage.MentionedRoleIds
  fullName: Discord.Rest.RestUserMessage.MentionedRoleIds
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: MentionedRoleIds
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 38
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets the IDs of roles mentioned in this message.\n"
  example: []
  syntax:
    content: public override IReadOnlyCollection<ulong> MentionedRoleIds { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{System.UInt64}
      description: "\nA read-only collection of role IDs.\n"
    content.vb: Public Overrides ReadOnly Property MentionedRoleIds As IReadOnlyCollection(Of ULong)
  overridden: Discord.Rest.RestMessage.MentionedRoleIds
  overload: Discord.Rest.RestUserMessage.MentionedRoleIds*
  implements:
  - Discord.IMessage.MentionedRoleIds
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.Rest.RestUserMessage.MentionedUsers
  commentId: P:Discord.Rest.RestUserMessage.MentionedUsers
  id: MentionedUsers
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: MentionedUsers
  nameWithType: RestUserMessage.MentionedUsers
  fullName: Discord.Rest.RestUserMessage.MentionedUsers
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: MentionedUsers
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 40
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of the mentioned users in the message.\n"
  example: []
  syntax:
    content: public override IReadOnlyCollection<RestUser> MentionedUsers { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestUser}
    content.vb: Public Overrides ReadOnly Property MentionedUsers As IReadOnlyCollection(Of RestUser)
  overridden: Discord.Rest.RestMessage.MentionedUsers
  overload: Discord.Rest.RestUserMessage.MentionedUsers*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.Rest.RestUserMessage.Tags
  commentId: P:Discord.Rest.RestUserMessage.Tags
  id: Tags
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: Tags
  nameWithType: RestUserMessage.Tags
  fullName: Discord.Rest.RestUserMessage.Tags
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Tags
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 42
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets all tags included in this message&apos;s content.\n"
  example: []
  syntax:
    content: public override IReadOnlyCollection<ITag> Tags { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Discord.ITag}
    content.vb: Public Overrides ReadOnly Property Tags As IReadOnlyCollection(Of ITag)
  overridden: Discord.Rest.RestMessage.Tags
  overload: Discord.Rest.RestUserMessage.Tags*
  implements:
  - Discord.IMessage.Tags
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.Rest.RestUserMessage.Reactions
  commentId: P:Discord.Rest.RestUserMessage.Reactions
  id: Reactions
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: Reactions
  nameWithType: RestUserMessage.Reactions
  fullName: Discord.Rest.RestUserMessage.Reactions
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Reactions
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 44
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets all reactions included in this message.\n"
  example: []
  syntax:
    content: public IReadOnlyDictionary<IEmote, ReactionMetadata> Reactions { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyDictionary{Discord.IEmote,Discord.ReactionMetadata}
    content.vb: Public ReadOnly Property Reactions As IReadOnlyDictionary(Of IEmote, ReactionMetadata)
  overload: Discord.Rest.RestUserMessage.Reactions*
  implements:
  - Discord.IUserMessage.Reactions
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Discord.Rest.RestUserMessage.ModifyAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestUserMessage.ModifyAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)
  id: ModifyAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: ModifyAsync(Action<MessageProperties>, RequestOptions)
  nameWithType: RestUserMessage.ModifyAsync(Action<MessageProperties>, RequestOptions)
  fullName: Discord.Rest.RestUserMessage.ModifyAsync(System.Action<Discord.MessageProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ModifyAsync
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 146
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nModifies this message.\n"
  remarks: "\nThis method modifies this message with the specified properties. To see an example of this\nmethod and what properties are available, please refer to <xref href=\"Discord.MessageProperties\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Task ModifyAsync(Action<MessageProperties> func, RequestOptions options = null)
    parameters:
    - id: func
      type: System.Action{Discord.MessageProperties}
      description: A delegate containing the properties to modify the message with.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous modification operation.\n"
    content.vb: Public Function ModifyAsync(func As Action(Of MessageProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestUserMessage.ModifyAsync*
  implements:
  - Discord.IUserMessage.ModifyAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)
  nameWithType.vb: RestUserMessage.ModifyAsync(Action(Of MessageProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestUserMessage.ModifyAsync(System.Action(Of Discord.MessageProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of MessageProperties), RequestOptions)
- uid: Discord.Rest.RestUserMessage.AddReactionAsync(Discord.IEmote,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestUserMessage.AddReactionAsync(Discord.IEmote,Discord.RequestOptions)
  id: AddReactionAsync(Discord.IEmote,Discord.RequestOptions)
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: AddReactionAsync(IEmote, RequestOptions)
  nameWithType: RestUserMessage.AddReactionAsync(IEmote, RequestOptions)
  fullName: Discord.Rest.RestUserMessage.AddReactionAsync(Discord.IEmote, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: AddReactionAsync
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 153
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nAdds a reaction to this message.\n"
  example: []
  syntax:
    content: public Task AddReactionAsync(IEmote emote, RequestOptions options = null)
    parameters:
    - id: emote
      type: Discord.IEmote
      description: The emoji used to react to this message.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous operation for adding a reaction to this message.\n"
    content.vb: Public Function AddReactionAsync(emote As IEmote, options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestUserMessage.AddReactionAsync*
  seealso:
  - linkId: Discord.IEmote
    commentId: T:Discord.IEmote
  implements:
  - Discord.IUserMessage.AddReactionAsync(Discord.IEmote,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestUserMessage.RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestUserMessage.RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)
  id: RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: RemoveReactionAsync(IEmote, IUser, RequestOptions)
  nameWithType: RestUserMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions)
  fullName: Discord.Rest.RestUserMessage.RemoveReactionAsync(Discord.IEmote, Discord.IUser, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RemoveReactionAsync
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 156
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nRemoves a reaction from message.\n"
  example: []
  syntax:
    content: public Task RemoveReactionAsync(IEmote emote, IUser user, RequestOptions options = null)
    parameters:
    - id: emote
      type: Discord.IEmote
      description: The emoji used to react to this message.
    - id: user
      type: Discord.IUser
      description: The user that added the emoji.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous operation for removing a reaction to this message.\n"
    content.vb: Public Function RemoveReactionAsync(emote As IEmote, user As IUser, options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestUserMessage.RemoveReactionAsync*
  seealso:
  - linkId: Discord.IEmote
    commentId: T:Discord.IEmote
  implements:
  - Discord.IUserMessage.RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestUserMessage.RemoveReactionAsync(Discord.IEmote,System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestUserMessage.RemoveReactionAsync(Discord.IEmote,System.UInt64,Discord.RequestOptions)
  id: RemoveReactionAsync(Discord.IEmote,System.UInt64,Discord.RequestOptions)
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: RemoveReactionAsync(IEmote, UInt64, RequestOptions)
  nameWithType: RestUserMessage.RemoveReactionAsync(IEmote, UInt64, RequestOptions)
  fullName: Discord.Rest.RestUserMessage.RemoveReactionAsync(Discord.IEmote, System.UInt64, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RemoveReactionAsync
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 159
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nRemoves a reaction from message.\n"
  example: []
  syntax:
    content: public Task RemoveReactionAsync(IEmote emote, ulong userId, RequestOptions options = null)
    parameters:
    - id: emote
      type: Discord.IEmote
      description: The emoji used to react to this message.
    - id: userId
      type: System.UInt64
      description: The ID of the user that added the emoji.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous operation for removing a reaction to this message.\n"
    content.vb: Public Function RemoveReactionAsync(emote As IEmote, userId As ULong, options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestUserMessage.RemoveReactionAsync*
  seealso:
  - linkId: Discord.IEmote
    commentId: T:Discord.IEmote
  implements:
  - Discord.IUserMessage.RemoveReactionAsync(Discord.IEmote,System.UInt64,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestUserMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestUserMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
  id: RemoveAllReactionsAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: RemoveAllReactionsAsync(RequestOptions)
  nameWithType: RestUserMessage.RemoveAllReactionsAsync(RequestOptions)
  fullName: Discord.Rest.RestUserMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RemoveAllReactionsAsync
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 162
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nRemoves all reactions from this message.\n"
  example: []
  syntax:
    content: public Task RemoveAllReactionsAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous removal operation.\n"
    content.vb: Public Function RemoveAllReactionsAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestUserMessage.RemoveAllReactionsAsync*
  implements:
  - Discord.IUserMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestUserMessage.GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestUserMessage.GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions)
  id: GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions)
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: GetReactionUsersAsync(IEmote, Int32, RequestOptions)
  nameWithType: RestUserMessage.GetReactionUsersAsync(IEmote, Int32, RequestOptions)
  fullName: Discord.Rest.RestUserMessage.GetReactionUsersAsync(Discord.IEmote, System.Int32, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: GetReactionUsersAsync
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 165
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets all users that reacted to a message with a given emote.\n"
  example: []
  syntax:
    content: public IAsyncEnumerable<IReadOnlyCollection<IUser>> GetReactionUsersAsync(IEmote emote, int limit, RequestOptions options = null)
    parameters:
    - id: emote
      type: Discord.IEmote
    - id: limit
      type: System.Int32
      description: The number of users to request.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IUser}}
      description: "\nA paged collection containing a read-only collection of users that has reacted to this message.\nFlattening the paginated response into a collection of users with \n<xref href=\"Discord.AsyncEnumerableExtensions.FlattenAsync%60%601(System.Collections.Generic.IAsyncEnumerable%7bSystem.Collections.Generic.IEnumerable%7b%60%600%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref> is required if you wish to access the users.\n"
    content.vb: Public Function GetReactionUsersAsync(emote As IEmote, limit As Integer, options As RequestOptions = Nothing) As IAsyncEnumerable(Of IReadOnlyCollection(Of IUser))
  overload: Discord.Rest.RestUserMessage.GetReactionUsersAsync*
  implements:
  - Discord.IUserMessage.GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestUserMessage.PinAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestUserMessage.PinAsync(Discord.RequestOptions)
  id: PinAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: PinAsync(RequestOptions)
  nameWithType: RestUserMessage.PinAsync(RequestOptions)
  fullName: Discord.Rest.RestUserMessage.PinAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: PinAsync
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 169
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nAdds this message to its channel&apos;s pinned messages.\n"
  example: []
  syntax:
    content: public Task PinAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous operation for pinning this message.\n"
    content.vb: Public Function PinAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestUserMessage.PinAsync*
  implements:
  - Discord.IUserMessage.PinAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestUserMessage.UnpinAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestUserMessage.UnpinAsync(Discord.RequestOptions)
  id: UnpinAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: UnpinAsync(RequestOptions)
  nameWithType: RestUserMessage.UnpinAsync(RequestOptions)
  fullName: Discord.Rest.RestUserMessage.UnpinAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: UnpinAsync
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 172
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nRemoves this message from its channel&apos;s pinned messages.\n"
  example: []
  syntax:
    content: public Task UnpinAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous operation for unpinning this message.\n"
    content.vb: Public Function UnpinAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestUserMessage.UnpinAsync*
  implements:
  - Discord.IUserMessage.UnpinAsync(Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestUserMessage.ModifySuppressionAsync(System.Boolean,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestUserMessage.ModifySuppressionAsync(System.Boolean,Discord.RequestOptions)
  id: ModifySuppressionAsync(System.Boolean,Discord.RequestOptions)
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: ModifySuppressionAsync(Boolean, RequestOptions)
  nameWithType: RestUserMessage.ModifySuppressionAsync(Boolean, RequestOptions)
  fullName: Discord.Rest.RestUserMessage.ModifySuppressionAsync(System.Boolean, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ModifySuppressionAsync
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 175
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nModifies the suppression of this message.\n"
  remarks: "\nThis method modifies whether or not embeds in this message are suppressed (hidden).\n"
  example: []
  syntax:
    content: public Task ModifySuppressionAsync(bool suppressEmbeds, RequestOptions options = null)
    parameters:
    - id: suppressEmbeds
      type: System.Boolean
      description: Whether or not embeds in this message should be suppressed.
    - id: options
      type: Discord.RequestOptions
      description: The options to be used when sending the request.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous modification operation.\n"
    content.vb: Public Function ModifySuppressionAsync(suppressEmbeds As Boolean, options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestUserMessage.ModifySuppressionAsync*
  implements:
  - Discord.IUserMessage.ModifySuppressionAsync(System.Boolean,Discord.RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestUserMessage.Resolve(System.Int32,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  commentId: M:Discord.Rest.RestUserMessage.Resolve(System.Int32,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  id: Resolve(System.Int32,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: Resolve(Int32, TagHandling, TagHandling, TagHandling, TagHandling, TagHandling)
  nameWithType: RestUserMessage.Resolve(Int32, TagHandling, TagHandling, TagHandling, TagHandling, TagHandling)
  fullName: Discord.Rest.RestUserMessage.Resolve(System.Int32, Discord.TagHandling, Discord.TagHandling, Discord.TagHandling, Discord.TagHandling, Discord.TagHandling)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Resolve
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 178
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  syntax:
    content: public string Resolve(int startIndex, TagHandling userHandling = TagHandling.Name, TagHandling channelHandling = TagHandling.Name, TagHandling roleHandling = TagHandling.Name, TagHandling everyoneHandling = TagHandling.Ignore, TagHandling emojiHandling = TagHandling.Name)
    parameters:
    - id: startIndex
      type: System.Int32
    - id: userHandling
      type: Discord.TagHandling
    - id: channelHandling
      type: Discord.TagHandling
    - id: roleHandling
      type: Discord.TagHandling
    - id: everyoneHandling
      type: Discord.TagHandling
    - id: emojiHandling
      type: Discord.TagHandling
    return:
      type: System.String
    content.vb: Public Function Resolve(startIndex As Integer, userHandling As TagHandling = TagHandling.Name, channelHandling As TagHandling = TagHandling.Name, roleHandling As TagHandling = TagHandling.Name, everyoneHandling As TagHandling = TagHandling.Ignore, emojiHandling As TagHandling = TagHandling.Name) As String
  overload: Discord.Rest.RestUserMessage.Resolve*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestUserMessage.Resolve(Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  commentId: M:Discord.Rest.RestUserMessage.Resolve(Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  id: Resolve(Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling)
  nameWithType: RestUserMessage.Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling)
  fullName: Discord.Rest.RestUserMessage.Resolve(Discord.TagHandling, Discord.TagHandling, Discord.TagHandling, Discord.TagHandling, Discord.TagHandling)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Resolve
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 182
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nTransforms this message&apos;s text into a human-readable form by resolving its tags.\n"
  example: []
  syntax:
    content: public string Resolve(TagHandling userHandling = TagHandling.Name, TagHandling channelHandling = TagHandling.Name, TagHandling roleHandling = TagHandling.Name, TagHandling everyoneHandling = TagHandling.Ignore, TagHandling emojiHandling = TagHandling.Name)
    parameters:
    - id: userHandling
      type: Discord.TagHandling
      description: Determines how the user tag should be handled.
    - id: channelHandling
      type: Discord.TagHandling
      description: Determines how the channel tag should be handled.
    - id: roleHandling
      type: Discord.TagHandling
      description: Determines how the role tag should be handled.
    - id: everyoneHandling
      type: Discord.TagHandling
      description: Determines how the @everyone tag should be handled.
    - id: emojiHandling
      type: Discord.TagHandling
      description: Determines how the emoji tag should be handled.
    return:
      type: System.String
    content.vb: Public Function Resolve(userHandling As TagHandling = TagHandling.Name, channelHandling As TagHandling = TagHandling.Name, roleHandling As TagHandling = TagHandling.Name, everyoneHandling As TagHandling = TagHandling.Ignore, emojiHandling As TagHandling = TagHandling.Name) As String
  overload: Discord.Rest.RestUserMessage.Resolve*
  implements:
  - Discord.IUserMessage.Resolve(Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Discord.Rest
  commentId: N:Discord.Rest
  name: Discord.Rest
  nameWithType: Discord.Rest
  fullName: Discord.Rest
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Rest.RestEntity{System.UInt64}
  commentId: T:Discord.Rest.RestEntity{System.UInt64}
  parent: Discord.Rest
  definition: Discord.Rest.RestEntity`1
  name: RestEntity<UInt64>
  nameWithType: RestEntity<UInt64>
  fullName: Discord.Rest.RestEntity<System.UInt64>
  nameWithType.vb: RestEntity(Of UInt64)
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64)
  name.vb: RestEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestMessage
  commentId: T:Discord.Rest.RestMessage
  parent: Discord.Rest
  name: RestMessage
  nameWithType: RestMessage
  fullName: Discord.Rest.RestMessage
- uid: Discord.IUpdateable
  commentId: T:Discord.IUpdateable
  parent: Discord
  name: IUpdateable
  nameWithType: IUpdateable
  fullName: Discord.IUpdateable
- uid: Discord.IUserMessage
  commentId: T:Discord.IUserMessage
  parent: Discord
  name: IUserMessage
  nameWithType: IUserMessage
  fullName: Discord.IUserMessage
- uid: Discord.IMessage
  commentId: T:Discord.IMessage
  parent: Discord
  name: IMessage
  nameWithType: IMessage
  fullName: Discord.IMessage
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IDeletable
  commentId: T:Discord.IDeletable
  parent: Discord
  name: IDeletable
  nameWithType: IDeletable
  fullName: Discord.IDeletable
- uid: Discord.Rest.RestMessage.Channel
  commentId: P:Discord.Rest.RestMessage.Channel
  parent: Discord.Rest.RestMessage
  name: Channel
  nameWithType: RestMessage.Channel
  fullName: Discord.Rest.RestMessage.Channel
- uid: Discord.Rest.RestMessage.Author
  commentId: P:Discord.Rest.RestMessage.Author
  parent: Discord.Rest.RestMessage
  name: Author
  nameWithType: RestMessage.Author
  fullName: Discord.Rest.RestMessage.Author
- uid: Discord.Rest.RestMessage.Source
  commentId: P:Discord.Rest.RestMessage.Source
  parent: Discord.Rest.RestMessage
  name: Source
  nameWithType: RestMessage.Source
  fullName: Discord.Rest.RestMessage.Source
- uid: Discord.Rest.RestMessage.Content
  commentId: P:Discord.Rest.RestMessage.Content
  parent: Discord.Rest.RestMessage
  name: Content
  nameWithType: RestMessage.Content
  fullName: Discord.Rest.RestMessage.Content
- uid: Discord.Rest.RestMessage.CreatedAt
  commentId: P:Discord.Rest.RestMessage.CreatedAt
  parent: Discord.Rest.RestMessage
  name: CreatedAt
  nameWithType: RestMessage.CreatedAt
  fullName: Discord.Rest.RestMessage.CreatedAt
- uid: Discord.Rest.RestMessage.Timestamp
  commentId: P:Discord.Rest.RestMessage.Timestamp
  parent: Discord.Rest.RestMessage
  name: Timestamp
  nameWithType: RestMessage.Timestamp
  fullName: Discord.Rest.RestMessage.Timestamp
- uid: Discord.Rest.RestMessage.Activity
  commentId: P:Discord.Rest.RestMessage.Activity
  parent: Discord.Rest.RestMessage
  name: Activity
  nameWithType: RestMessage.Activity
  fullName: Discord.Rest.RestMessage.Activity
- uid: Discord.Rest.RestMessage.Application
  commentId: P:Discord.Rest.RestMessage.Application
  parent: Discord.Rest.RestMessage
  name: Application
  nameWithType: RestMessage.Application
  fullName: Discord.Rest.RestMessage.Application
- uid: Discord.Rest.RestMessage.UpdateAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestMessage.UpdateAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestMessage
  name: UpdateAsync(RequestOptions)
  nameWithType: RestMessage.UpdateAsync(RequestOptions)
  fullName: Discord.Rest.RestMessage.UpdateAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestMessage.UpdateAsync(Discord.RequestOptions)
    name: UpdateAsync
    nameWithType: RestMessage.UpdateAsync
    fullName: Discord.Rest.RestMessage.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestMessage.UpdateAsync(Discord.RequestOptions)
    name: UpdateAsync
    nameWithType: RestMessage.UpdateAsync
    fullName: Discord.Rest.RestMessage.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestMessage.DeleteAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestMessage.DeleteAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestMessage
  name: DeleteAsync(RequestOptions)
  nameWithType: RestMessage.DeleteAsync(RequestOptions)
  fullName: Discord.Rest.RestMessage.DeleteAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestMessage.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: RestMessage.DeleteAsync
    fullName: Discord.Rest.RestMessage.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestMessage.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: RestMessage.DeleteAsync
    fullName: Discord.Rest.RestMessage.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestMessage.ToString
  commentId: M:Discord.Rest.RestMessage.ToString
  parent: Discord.Rest.RestMessage
  name: ToString()
  nameWithType: RestMessage.ToString()
  fullName: Discord.Rest.RestMessage.ToString()
  spec.csharp:
  - uid: Discord.Rest.RestMessage.ToString
    name: ToString
    nameWithType: RestMessage.ToString
    fullName: Discord.Rest.RestMessage.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestMessage.ToString
    name: ToString
    nameWithType: RestMessage.ToString
    fullName: Discord.Rest.RestMessage.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestMessage.Discord#IMessage#Type
  commentId: P:Discord.Rest.RestMessage.Discord#IMessage#Type
  parent: Discord.Rest.RestMessage
  name: IMessage.Type
  nameWithType: RestMessage.IMessage.Type
  fullName: Discord.Rest.RestMessage.Discord.IMessage.Type
  nameWithType.vb: RestMessage.Discord.IMessage.Type
  name.vb: Discord.IMessage.Type
- uid: Discord.Rest.RestMessage.Discord#IMessage#Author
  commentId: P:Discord.Rest.RestMessage.Discord#IMessage#Author
  parent: Discord.Rest.RestMessage
  name: IMessage.Author
  nameWithType: RestMessage.IMessage.Author
  fullName: Discord.Rest.RestMessage.Discord.IMessage.Author
  nameWithType.vb: RestMessage.Discord.IMessage.Author
  name.vb: Discord.IMessage.Author
- uid: Discord.Rest.RestMessage.Discord#IMessage#Attachments
  commentId: P:Discord.Rest.RestMessage.Discord#IMessage#Attachments
  parent: Discord.Rest.RestMessage
  name: IMessage.Attachments
  nameWithType: RestMessage.IMessage.Attachments
  fullName: Discord.Rest.RestMessage.Discord.IMessage.Attachments
  nameWithType.vb: RestMessage.Discord.IMessage.Attachments
  name.vb: Discord.IMessage.Attachments
- uid: Discord.Rest.RestMessage.Discord#IMessage#Embeds
  commentId: P:Discord.Rest.RestMessage.Discord#IMessage#Embeds
  parent: Discord.Rest.RestMessage
  name: IMessage.Embeds
  nameWithType: RestMessage.IMessage.Embeds
  fullName: Discord.Rest.RestMessage.Discord.IMessage.Embeds
  nameWithType.vb: RestMessage.Discord.IMessage.Embeds
  name.vb: Discord.IMessage.Embeds
- uid: Discord.Rest.RestMessage.Discord#IMessage#MentionedUserIds
  commentId: P:Discord.Rest.RestMessage.Discord#IMessage#MentionedUserIds
  parent: Discord.Rest.RestMessage
  name: IMessage.MentionedUserIds
  nameWithType: RestMessage.IMessage.MentionedUserIds
  fullName: Discord.Rest.RestMessage.Discord.IMessage.MentionedUserIds
  nameWithType.vb: RestMessage.Discord.IMessage.MentionedUserIds
  name.vb: Discord.IMessage.MentionedUserIds
- uid: Discord.Rest.RestEntity{System.UInt64}.Id
  commentId: P:Discord.Rest.RestEntity{System.UInt64}.Id
  parent: Discord.Rest.RestEntity{System.UInt64}
  definition: Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<UInt64>.Id
  fullName: Discord.Rest.RestEntity<System.UInt64>.Id
  nameWithType.vb: RestEntity(Of UInt64).Id
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64).Id
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IUserMessage.Discord.Commands.MessageExtensions.HasCharPrefix(System.Char,System.Int32@)
  commentId: M:Discord.Commands.MessageExtensions.HasCharPrefix(Discord.IUserMessage,System.Char,System.Int32@)
  parent: Discord.Commands.MessageExtensions
  definition: Discord.Commands.MessageExtensions.HasCharPrefix(Discord.IUserMessage,System.Char,System.Int32@)
  name: HasCharPrefix(Char, Int32)
  nameWithType: MessageExtensions.HasCharPrefix(Char, Int32)
  fullName: Discord.Commands.MessageExtensions.HasCharPrefix(System.Char, System.Int32)
  spec.csharp:
  - uid: Discord.Commands.MessageExtensions.HasCharPrefix(System.Char,System.Int32@)
    name: HasCharPrefix
    nameWithType: MessageExtensions.HasCharPrefix
    fullName: Discord.Commands.MessageExtensions.HasCharPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.MessageExtensions.HasCharPrefix(System.Char,System.Int32@)
    name: HasCharPrefix
    nameWithType: MessageExtensions.HasCharPrefix
    fullName: Discord.Commands.MessageExtensions.HasCharPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IUserMessage.Discord.Commands.MessageExtensions.HasStringPrefix(System.String,System.Int32@,System.StringComparison)
  commentId: M:Discord.Commands.MessageExtensions.HasStringPrefix(Discord.IUserMessage,System.String,System.Int32@,System.StringComparison)
  parent: Discord.Commands.MessageExtensions
  definition: Discord.Commands.MessageExtensions.HasStringPrefix(Discord.IUserMessage,System.String,System.Int32@,System.StringComparison)
  name: HasStringPrefix(String, Int32, StringComparison)
  nameWithType: MessageExtensions.HasStringPrefix(String, Int32, StringComparison)
  fullName: Discord.Commands.MessageExtensions.HasStringPrefix(System.String, System.Int32, System.StringComparison)
  spec.csharp:
  - uid: Discord.Commands.MessageExtensions.HasStringPrefix(System.String,System.Int32@,System.StringComparison)
    name: HasStringPrefix
    nameWithType: MessageExtensions.HasStringPrefix
    fullName: Discord.Commands.MessageExtensions.HasStringPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.StringComparison
    name: StringComparison
    nameWithType: StringComparison
    fullName: System.StringComparison
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.MessageExtensions.HasStringPrefix(System.String,System.Int32@,System.StringComparison)
    name: HasStringPrefix
    nameWithType: MessageExtensions.HasStringPrefix
    fullName: Discord.Commands.MessageExtensions.HasStringPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.StringComparison
    name: StringComparison
    nameWithType: StringComparison
    fullName: System.StringComparison
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IUserMessage.Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUser,System.Int32@)
  commentId: M:Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUserMessage,Discord.IUser,System.Int32@)
  parent: Discord.Commands.MessageExtensions
  definition: Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUserMessage,Discord.IUser,System.Int32@)
  name: HasMentionPrefix(IUser, Int32)
  nameWithType: MessageExtensions.HasMentionPrefix(IUser, Int32)
  fullName: Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUser, System.Int32)
  spec.csharp:
  - uid: Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUser,System.Int32@)
    name: HasMentionPrefix
    nameWithType: MessageExtensions.HasMentionPrefix
    fullName: Discord.Commands.MessageExtensions.HasMentionPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUser,System.Int32@)
    name: HasMentionPrefix
    nameWithType: MessageExtensions.HasMentionPrefix
    fullName: Discord.Commands.MessageExtensions.HasMentionPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Discord.Rest.RestEntity`1
  commentId: T:Discord.Rest.RestEntity`1
  name: RestEntity<T>
  nameWithType: RestEntity<T>
  fullName: Discord.Rest.RestEntity<T>
  nameWithType.vb: RestEntity(Of T)
  fullName.vb: Discord.Rest.RestEntity(Of T)
  name.vb: RestEntity(Of T)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestEntity`1.Id
  commentId: P:Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<T>.Id
  fullName: Discord.Rest.RestEntity<T>.Id
  nameWithType.vb: RestEntity(Of T).Id
  fullName.vb: Discord.Rest.RestEntity(Of T).Id
- uid: Discord.Commands.MessageExtensions.HasCharPrefix(Discord.IUserMessage,System.Char,System.Int32@)
  commentId: M:Discord.Commands.MessageExtensions.HasCharPrefix(Discord.IUserMessage,System.Char,System.Int32@)
  isExternal: true
  name: HasCharPrefix(IUserMessage, Char, Int32)
  nameWithType: MessageExtensions.HasCharPrefix(IUserMessage, Char, Int32)
  fullName: Discord.Commands.MessageExtensions.HasCharPrefix(Discord.IUserMessage, System.Char, System.Int32)
  spec.csharp:
  - uid: Discord.Commands.MessageExtensions.HasCharPrefix(Discord.IUserMessage,System.Char,System.Int32@)
    name: HasCharPrefix
    nameWithType: MessageExtensions.HasCharPrefix
    fullName: Discord.Commands.MessageExtensions.HasCharPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.MessageExtensions.HasCharPrefix(Discord.IUserMessage,System.Char,System.Int32@)
    name: HasCharPrefix
    nameWithType: MessageExtensions.HasCharPrefix
    fullName: Discord.Commands.MessageExtensions.HasCharPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.MessageExtensions
  commentId: T:Discord.Commands.MessageExtensions
  parent: Discord.Commands
  name: MessageExtensions
  nameWithType: MessageExtensions
  fullName: Discord.Commands.MessageExtensions
- uid: Discord.Commands.MessageExtensions.HasStringPrefix(Discord.IUserMessage,System.String,System.Int32@,System.StringComparison)
  commentId: M:Discord.Commands.MessageExtensions.HasStringPrefix(Discord.IUserMessage,System.String,System.Int32@,System.StringComparison)
  isExternal: true
  name: HasStringPrefix(IUserMessage, String, Int32, StringComparison)
  nameWithType: MessageExtensions.HasStringPrefix(IUserMessage, String, Int32, StringComparison)
  fullName: Discord.Commands.MessageExtensions.HasStringPrefix(Discord.IUserMessage, System.String, System.Int32, System.StringComparison)
  spec.csharp:
  - uid: Discord.Commands.MessageExtensions.HasStringPrefix(Discord.IUserMessage,System.String,System.Int32@,System.StringComparison)
    name: HasStringPrefix
    nameWithType: MessageExtensions.HasStringPrefix
    fullName: Discord.Commands.MessageExtensions.HasStringPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.StringComparison
    name: StringComparison
    nameWithType: StringComparison
    fullName: System.StringComparison
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.MessageExtensions.HasStringPrefix(Discord.IUserMessage,System.String,System.Int32@,System.StringComparison)
    name: HasStringPrefix
    nameWithType: MessageExtensions.HasStringPrefix
    fullName: Discord.Commands.MessageExtensions.HasStringPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.StringComparison
    name: StringComparison
    nameWithType: StringComparison
    fullName: System.StringComparison
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUserMessage,Discord.IUser,System.Int32@)
  commentId: M:Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUserMessage,Discord.IUser,System.Int32@)
  isExternal: true
  name: HasMentionPrefix(IUserMessage, IUser, Int32)
  nameWithType: MessageExtensions.HasMentionPrefix(IUserMessage, IUser, Int32)
  fullName: Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUserMessage, Discord.IUser, System.Int32)
  spec.csharp:
  - uid: Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUserMessage,Discord.IUser,System.Int32@)
    name: HasMentionPrefix
    nameWithType: MessageExtensions.HasMentionPrefix
    fullName: Discord.Commands.MessageExtensions.HasMentionPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Commands.MessageExtensions.HasMentionPrefix(Discord.IUserMessage,Discord.IUser,System.Int32@)
    name: HasMentionPrefix
    nameWithType: MessageExtensions.HasMentionPrefix
    fullName: Discord.Commands.MessageExtensions.HasMentionPrefix
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IUserMessage
    name: IUserMessage
    nameWithType: IUserMessage
    fullName: Discord.IUserMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Commands
  commentId: N:Discord.Commands
  name: Discord.Commands
  nameWithType: Discord.Commands
  fullName: Discord.Commands
- uid: Discord.Rest.RestMessage.IsTTS
  commentId: P:Discord.Rest.RestMessage.IsTTS
  parent: Discord.Rest.RestMessage
  name: IsTTS
  nameWithType: RestMessage.IsTTS
  fullName: Discord.Rest.RestMessage.IsTTS
- uid: Discord.Rest.RestUserMessage.IsTTS*
  commentId: Overload:Discord.Rest.RestUserMessage.IsTTS
  name: IsTTS
  nameWithType: RestUserMessage.IsTTS
  fullName: Discord.Rest.RestUserMessage.IsTTS
- uid: Discord.IMessage.IsTTS
  commentId: P:Discord.IMessage.IsTTS
  parent: Discord.IMessage
  name: IsTTS
  nameWithType: IMessage.IsTTS
  fullName: Discord.IMessage.IsTTS
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.Rest.RestMessage.IsPinned
  commentId: P:Discord.Rest.RestMessage.IsPinned
  parent: Discord.Rest.RestMessage
  name: IsPinned
  nameWithType: RestMessage.IsPinned
  fullName: Discord.Rest.RestMessage.IsPinned
- uid: Discord.Rest.RestUserMessage.IsPinned*
  commentId: Overload:Discord.Rest.RestUserMessage.IsPinned
  name: IsPinned
  nameWithType: RestUserMessage.IsPinned
  fullName: Discord.Rest.RestUserMessage.IsPinned
- uid: Discord.IMessage.IsPinned
  commentId: P:Discord.IMessage.IsPinned
  parent: Discord.IMessage
  name: IsPinned
  nameWithType: IMessage.IsPinned
  fullName: Discord.IMessage.IsPinned
- uid: Discord.Rest.RestMessage.IsSuppressed
  commentId: P:Discord.Rest.RestMessage.IsSuppressed
  parent: Discord.Rest.RestMessage
  name: IsSuppressed
  nameWithType: RestMessage.IsSuppressed
  fullName: Discord.Rest.RestMessage.IsSuppressed
- uid: Discord.Rest.RestUserMessage.IsSuppressed*
  commentId: Overload:Discord.Rest.RestUserMessage.IsSuppressed
  name: IsSuppressed
  nameWithType: RestUserMessage.IsSuppressed
  fullName: Discord.Rest.RestUserMessage.IsSuppressed
- uid: Discord.IMessage.IsSuppressed
  commentId: P:Discord.IMessage.IsSuppressed
  parent: Discord.IMessage
  name: IsSuppressed
  nameWithType: IMessage.IsSuppressed
  fullName: Discord.IMessage.IsSuppressed
- uid: Discord.Rest.RestMessage.EditedTimestamp
  commentId: P:Discord.Rest.RestMessage.EditedTimestamp
  parent: Discord.Rest.RestMessage
  name: EditedTimestamp
  nameWithType: RestMessage.EditedTimestamp
  fullName: Discord.Rest.RestMessage.EditedTimestamp
- uid: Discord.Rest.RestUserMessage.EditedTimestamp*
  commentId: Overload:Discord.Rest.RestUserMessage.EditedTimestamp
  name: EditedTimestamp
  nameWithType: RestUserMessage.EditedTimestamp
  fullName: Discord.Rest.RestUserMessage.EditedTimestamp
- uid: Discord.IMessage.EditedTimestamp
  commentId: P:Discord.IMessage.EditedTimestamp
  parent: Discord.IMessage
  name: EditedTimestamp
  nameWithType: IMessage.EditedTimestamp
  fullName: Discord.IMessage.EditedTimestamp
- uid: System.Nullable{System.DateTimeOffset}
  commentId: T:System.Nullable{System.DateTimeOffset}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTimeOffset>
  nameWithType: Nullable<DateTimeOffset>
  fullName: System.Nullable<System.DateTimeOffset>
  nameWithType.vb: Nullable(Of DateTimeOffset)
  fullName.vb: System.Nullable(Of System.DateTimeOffset)
  name.vb: Nullable(Of DateTimeOffset)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestMessage.Attachments
  commentId: P:Discord.Rest.RestMessage.Attachments
  parent: Discord.Rest.RestMessage
  name: Attachments
  nameWithType: RestMessage.Attachments
  fullName: Discord.Rest.RestMessage.Attachments
- uid: Discord.Rest.RestUserMessage.Attachments*
  commentId: Overload:Discord.Rest.RestUserMessage.Attachments
  name: Attachments
  nameWithType: RestUserMessage.Attachments
  fullName: Discord.Rest.RestUserMessage.Attachments
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.Attachment}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.Attachment}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<Attachment>
  nameWithType: IReadOnlyCollection<Attachment>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.Attachment>
  nameWithType.vb: IReadOnlyCollection(Of Attachment)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.Attachment)
  name.vb: IReadOnlyCollection(Of Attachment)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Attachment
    name: Attachment
    nameWithType: Attachment
    fullName: Discord.Attachment
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Attachment
    name: Attachment
    nameWithType: Attachment
    fullName: Discord.Attachment
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Discord.Rest.RestMessage.Embeds
  commentId: P:Discord.Rest.RestMessage.Embeds
  parent: Discord.Rest.RestMessage
  name: Embeds
  nameWithType: RestMessage.Embeds
  fullName: Discord.Rest.RestMessage.Embeds
- uid: Discord.Rest.RestUserMessage.Embeds*
  commentId: Overload:Discord.Rest.RestUserMessage.Embeds
  name: Embeds
  nameWithType: RestUserMessage.Embeds
  fullName: Discord.Rest.RestUserMessage.Embeds
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.Embed}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.Embed}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<Embed>
  nameWithType: IReadOnlyCollection<Embed>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.Embed>
  nameWithType.vb: IReadOnlyCollection(Of Embed)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.Embed)
  name.vb: IReadOnlyCollection(Of Embed)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestMessage.MentionedChannelIds
  commentId: P:Discord.Rest.RestMessage.MentionedChannelIds
  parent: Discord.Rest.RestMessage
  name: MentionedChannelIds
  nameWithType: RestMessage.MentionedChannelIds
  fullName: Discord.Rest.RestMessage.MentionedChannelIds
- uid: Discord.Rest.RestUserMessage.MentionedChannelIds*
  commentId: Overload:Discord.Rest.RestUserMessage.MentionedChannelIds
  name: MentionedChannelIds
  nameWithType: RestUserMessage.MentionedChannelIds
  fullName: Discord.Rest.RestUserMessage.MentionedChannelIds
- uid: Discord.IMessage.MentionedChannelIds
  commentId: P:Discord.IMessage.MentionedChannelIds
  parent: Discord.IMessage
  name: MentionedChannelIds
  nameWithType: IMessage.MentionedChannelIds
  fullName: Discord.IMessage.MentionedChannelIds
- uid: System.Collections.Generic.IReadOnlyCollection{System.UInt64}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{System.UInt64}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<UInt64>
  nameWithType: IReadOnlyCollection<UInt64>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.UInt64>
  nameWithType.vb: IReadOnlyCollection(Of UInt64)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of System.UInt64)
  name.vb: IReadOnlyCollection(Of UInt64)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestMessage.MentionedRoleIds
  commentId: P:Discord.Rest.RestMessage.MentionedRoleIds
  parent: Discord.Rest.RestMessage
  name: MentionedRoleIds
  nameWithType: RestMessage.MentionedRoleIds
  fullName: Discord.Rest.RestMessage.MentionedRoleIds
- uid: Discord.Rest.RestUserMessage.MentionedRoleIds*
  commentId: Overload:Discord.Rest.RestUserMessage.MentionedRoleIds
  name: MentionedRoleIds
  nameWithType: RestUserMessage.MentionedRoleIds
  fullName: Discord.Rest.RestUserMessage.MentionedRoleIds
- uid: Discord.IMessage.MentionedRoleIds
  commentId: P:Discord.IMessage.MentionedRoleIds
  parent: Discord.IMessage
  name: MentionedRoleIds
  nameWithType: IMessage.MentionedRoleIds
  fullName: Discord.IMessage.MentionedRoleIds
- uid: Discord.Rest.RestMessage.MentionedUsers
  commentId: P:Discord.Rest.RestMessage.MentionedUsers
  parent: Discord.Rest.RestMessage
  name: MentionedUsers
  nameWithType: RestMessage.MentionedUsers
  fullName: Discord.Rest.RestMessage.MentionedUsers
- uid: Discord.Rest.RestUserMessage.MentionedUsers*
  commentId: Overload:Discord.Rest.RestUserMessage.MentionedUsers
  name: MentionedUsers
  nameWithType: RestUserMessage.MentionedUsers
  fullName: Discord.Rest.RestUserMessage.MentionedUsers
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestUser}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.Rest.RestUser}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<RestUser>
  nameWithType: IReadOnlyCollection<RestUser>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.Rest.RestUser>
  nameWithType.vb: IReadOnlyCollection(Of RestUser)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.Rest.RestUser)
  name.vb: IReadOnlyCollection(Of RestUser)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestUser
    name: RestUser
    nameWithType: RestUser
    fullName: Discord.Rest.RestUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestUser
    name: RestUser
    nameWithType: RestUser
    fullName: Discord.Rest.RestUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestMessage.Tags
  commentId: P:Discord.Rest.RestMessage.Tags
  parent: Discord.Rest.RestMessage
  name: Tags
  nameWithType: RestMessage.Tags
  fullName: Discord.Rest.RestMessage.Tags
- uid: Discord.Rest.RestUserMessage.Tags*
  commentId: Overload:Discord.Rest.RestUserMessage.Tags
  name: Tags
  nameWithType: RestUserMessage.Tags
  fullName: Discord.Rest.RestUserMessage.Tags
- uid: Discord.IMessage.Tags
  commentId: P:Discord.IMessage.Tags
  parent: Discord.IMessage
  name: Tags
  nameWithType: IMessage.Tags
  fullName: Discord.IMessage.Tags
- uid: System.Collections.Generic.IReadOnlyCollection{Discord.ITag}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Discord.ITag}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<ITag>
  nameWithType: IReadOnlyCollection<ITag>
  fullName: System.Collections.Generic.IReadOnlyCollection<Discord.ITag>
  nameWithType.vb: IReadOnlyCollection(Of ITag)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Discord.ITag)
  name.vb: IReadOnlyCollection(Of ITag)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ITag
    name: ITag
    nameWithType: ITag
    fullName: Discord.ITag
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ITag
    name: ITag
    nameWithType: ITag
    fullName: Discord.ITag
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestUserMessage.Reactions*
  commentId: Overload:Discord.Rest.RestUserMessage.Reactions
  name: Reactions
  nameWithType: RestUserMessage.Reactions
  fullName: Discord.Rest.RestUserMessage.Reactions
- uid: Discord.IUserMessage.Reactions
  commentId: P:Discord.IUserMessage.Reactions
  parent: Discord.IUserMessage
  name: Reactions
  nameWithType: IUserMessage.Reactions
  fullName: Discord.IUserMessage.Reactions
- uid: System.Collections.Generic.IReadOnlyDictionary{Discord.IEmote,Discord.ReactionMetadata}
  commentId: T:System.Collections.Generic.IReadOnlyDictionary{Discord.IEmote,Discord.ReactionMetadata}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: IReadOnlyDictionary<IEmote, ReactionMetadata>
  nameWithType: IReadOnlyDictionary<IEmote, ReactionMetadata>
  fullName: System.Collections.Generic.IReadOnlyDictionary<Discord.IEmote, Discord.ReactionMetadata>
  nameWithType.vb: IReadOnlyDictionary(Of IEmote, ReactionMetadata)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of Discord.IEmote, Discord.ReactionMetadata)
  name.vb: IReadOnlyDictionary(Of IEmote, ReactionMetadata)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.ReactionMetadata
    name: ReactionMetadata
    nameWithType: ReactionMetadata
    fullName: Discord.ReactionMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.ReactionMetadata
    name: ReactionMetadata
    nameWithType: ReactionMetadata
    fullName: Discord.ReactionMetadata
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestUserMessage.ModifyAsync*
  commentId: Overload:Discord.Rest.RestUserMessage.ModifyAsync
  name: ModifyAsync
  nameWithType: RestUserMessage.ModifyAsync
  fullName: Discord.Rest.RestUserMessage.ModifyAsync
- uid: Discord.IUserMessage.ModifyAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)
  commentId: M:Discord.IUserMessage.ModifyAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)
  parent: Discord.IUserMessage
  isExternal: true
  name: ModifyAsync(Action<MessageProperties>, RequestOptions)
  nameWithType: IUserMessage.ModifyAsync(Action<MessageProperties>, RequestOptions)
  fullName: Discord.IUserMessage.ModifyAsync(System.Action<Discord.MessageProperties>, Discord.RequestOptions)
  nameWithType.vb: IUserMessage.ModifyAsync(Action(Of MessageProperties), RequestOptions)
  fullName.vb: Discord.IUserMessage.ModifyAsync(System.Action(Of Discord.MessageProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of MessageProperties), RequestOptions)
  spec.csharp:
  - uid: Discord.IUserMessage.ModifyAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: IUserMessage.ModifyAsync
    fullName: Discord.IUserMessage.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.MessageProperties
    name: MessageProperties
    nameWithType: MessageProperties
    fullName: Discord.MessageProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IUserMessage.ModifyAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)
    name: ModifyAsync
    nameWithType: IUserMessage.ModifyAsync
    fullName: Discord.IUserMessage.ModifyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.MessageProperties
    name: MessageProperties
    nameWithType: MessageProperties
    fullName: Discord.MessageProperties
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{Discord.MessageProperties}
  commentId: T:System.Action{Discord.MessageProperties}
  parent: System
  definition: System.Action`1
  name: Action<MessageProperties>
  nameWithType: Action<MessageProperties>
  fullName: System.Action<Discord.MessageProperties>
  nameWithType.vb: Action(Of MessageProperties)
  fullName.vb: System.Action(Of Discord.MessageProperties)
  name.vb: Action(Of MessageProperties)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.MessageProperties
    name: MessageProperties
    nameWithType: MessageProperties
    fullName: Discord.MessageProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.MessageProperties
    name: MessageProperties
    nameWithType: MessageProperties
    fullName: Discord.MessageProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Discord.Rest.RestUserMessage.AddReactionAsync*
  commentId: Overload:Discord.Rest.RestUserMessage.AddReactionAsync
  name: AddReactionAsync
  nameWithType: RestUserMessage.AddReactionAsync
  fullName: Discord.Rest.RestUserMessage.AddReactionAsync
- uid: Discord.IUserMessage.AddReactionAsync(Discord.IEmote,Discord.RequestOptions)
  commentId: M:Discord.IUserMessage.AddReactionAsync(Discord.IEmote,Discord.RequestOptions)
  parent: Discord.IUserMessage
  name: AddReactionAsync(IEmote, RequestOptions)
  nameWithType: IUserMessage.AddReactionAsync(IEmote, RequestOptions)
  fullName: Discord.IUserMessage.AddReactionAsync(Discord.IEmote, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IUserMessage.AddReactionAsync(Discord.IEmote,Discord.RequestOptions)
    name: AddReactionAsync
    nameWithType: IUserMessage.AddReactionAsync
    fullName: Discord.IUserMessage.AddReactionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IUserMessage.AddReactionAsync(Discord.IEmote,Discord.RequestOptions)
    name: AddReactionAsync
    nameWithType: IUserMessage.AddReactionAsync
    fullName: Discord.IUserMessage.AddReactionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IEmote
  commentId: T:Discord.IEmote
  parent: Discord
  name: IEmote
  nameWithType: IEmote
  fullName: Discord.IEmote
- uid: Discord.Rest.RestUserMessage.RemoveReactionAsync*
  commentId: Overload:Discord.Rest.RestUserMessage.RemoveReactionAsync
  name: RemoveReactionAsync
  nameWithType: RestUserMessage.RemoveReactionAsync
  fullName: Discord.Rest.RestUserMessage.RemoveReactionAsync
- uid: Discord.IUserMessage.RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)
  commentId: M:Discord.IUserMessage.RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)
  parent: Discord.IUserMessage
  name: RemoveReactionAsync(IEmote, IUser, RequestOptions)
  nameWithType: IUserMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions)
  fullName: Discord.IUserMessage.RemoveReactionAsync(Discord.IEmote, Discord.IUser, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IUserMessage.RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)
    name: RemoveReactionAsync
    nameWithType: IUserMessage.RemoveReactionAsync
    fullName: Discord.IUserMessage.RemoveReactionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IUserMessage.RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)
    name: RemoveReactionAsync
    nameWithType: IUserMessage.RemoveReactionAsync
    fullName: Discord.IUserMessage.RemoveReactionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IUser
  commentId: T:Discord.IUser
  parent: Discord
  name: IUser
  nameWithType: IUser
  fullName: Discord.IUser
- uid: Discord.IUserMessage.RemoveReactionAsync(Discord.IEmote,System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.IUserMessage.RemoveReactionAsync(Discord.IEmote,System.UInt64,Discord.RequestOptions)
  parent: Discord.IUserMessage
  isExternal: true
  name: RemoveReactionAsync(IEmote, UInt64, RequestOptions)
  nameWithType: IUserMessage.RemoveReactionAsync(IEmote, UInt64, RequestOptions)
  fullName: Discord.IUserMessage.RemoveReactionAsync(Discord.IEmote, System.UInt64, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IUserMessage.RemoveReactionAsync(Discord.IEmote,System.UInt64,Discord.RequestOptions)
    name: RemoveReactionAsync
    nameWithType: IUserMessage.RemoveReactionAsync
    fullName: Discord.IUserMessage.RemoveReactionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IUserMessage.RemoveReactionAsync(Discord.IEmote,System.UInt64,Discord.RequestOptions)
    name: RemoveReactionAsync
    nameWithType: IUserMessage.RemoveReactionAsync
    fullName: Discord.IUserMessage.RemoveReactionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Discord.Rest.RestUserMessage.RemoveAllReactionsAsync*
  commentId: Overload:Discord.Rest.RestUserMessage.RemoveAllReactionsAsync
  name: RemoveAllReactionsAsync
  nameWithType: RestUserMessage.RemoveAllReactionsAsync
  fullName: Discord.Rest.RestUserMessage.RemoveAllReactionsAsync
- uid: Discord.IUserMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
  commentId: M:Discord.IUserMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
  parent: Discord.IUserMessage
  name: RemoveAllReactionsAsync(RequestOptions)
  nameWithType: IUserMessage.RemoveAllReactionsAsync(RequestOptions)
  fullName: Discord.IUserMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IUserMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
    name: RemoveAllReactionsAsync
    nameWithType: IUserMessage.RemoveAllReactionsAsync
    fullName: Discord.IUserMessage.RemoveAllReactionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IUserMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
    name: RemoveAllReactionsAsync
    nameWithType: IUserMessage.RemoveAllReactionsAsync
    fullName: Discord.IUserMessage.RemoveAllReactionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestUserMessage.GetReactionUsersAsync*
  commentId: Overload:Discord.Rest.RestUserMessage.GetReactionUsersAsync
  name: GetReactionUsersAsync
  nameWithType: RestUserMessage.GetReactionUsersAsync
  fullName: Discord.Rest.RestUserMessage.GetReactionUsersAsync
- uid: Discord.IUserMessage.GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions)
  commentId: M:Discord.IUserMessage.GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions)
  parent: Discord.IUserMessage
  isExternal: true
  name: GetReactionUsersAsync(IEmote, Int32, RequestOptions)
  nameWithType: IUserMessage.GetReactionUsersAsync(IEmote, Int32, RequestOptions)
  fullName: Discord.IUserMessage.GetReactionUsersAsync(Discord.IEmote, System.Int32, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IUserMessage.GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions)
    name: GetReactionUsersAsync
    nameWithType: IUserMessage.GetReactionUsersAsync
    fullName: Discord.IUserMessage.GetReactionUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IUserMessage.GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions)
    name: GetReactionUsersAsync
    nameWithType: IUserMessage.GetReactionUsersAsync
    fullName: Discord.IUserMessage.GetReactionUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IUser}}
  commentId: T:System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IReadOnlyCollection{Discord.IUser}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IAsyncEnumerable`1
  name: IAsyncEnumerable<IReadOnlyCollection<IUser>>
  nameWithType: IAsyncEnumerable<IReadOnlyCollection<IUser>>
  fullName: System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyCollection<Discord.IUser>>
  nameWithType.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IUser))
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of System.Collections.Generic.IReadOnlyCollection(Of Discord.IUser))
  name.vb: IAsyncEnumerable(Of IReadOnlyCollection(Of IUser))
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IAsyncEnumerable`1
  commentId: T:System.Collections.Generic.IAsyncEnumerable`1
  isExternal: true
  name: IAsyncEnumerable<T>
  nameWithType: IAsyncEnumerable<T>
  fullName: System.Collections.Generic.IAsyncEnumerable<T>
  nameWithType.vb: IAsyncEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of T)
  name.vb: IAsyncEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: System.Collections.Generic.IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestUserMessage.PinAsync*
  commentId: Overload:Discord.Rest.RestUserMessage.PinAsync
  name: PinAsync
  nameWithType: RestUserMessage.PinAsync
  fullName: Discord.Rest.RestUserMessage.PinAsync
- uid: Discord.IUserMessage.PinAsync(Discord.RequestOptions)
  commentId: M:Discord.IUserMessage.PinAsync(Discord.RequestOptions)
  parent: Discord.IUserMessage
  name: PinAsync(RequestOptions)
  nameWithType: IUserMessage.PinAsync(RequestOptions)
  fullName: Discord.IUserMessage.PinAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IUserMessage.PinAsync(Discord.RequestOptions)
    name: PinAsync
    nameWithType: IUserMessage.PinAsync
    fullName: Discord.IUserMessage.PinAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IUserMessage.PinAsync(Discord.RequestOptions)
    name: PinAsync
    nameWithType: IUserMessage.PinAsync
    fullName: Discord.IUserMessage.PinAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestUserMessage.UnpinAsync*
  commentId: Overload:Discord.Rest.RestUserMessage.UnpinAsync
  name: UnpinAsync
  nameWithType: RestUserMessage.UnpinAsync
  fullName: Discord.Rest.RestUserMessage.UnpinAsync
- uid: Discord.IUserMessage.UnpinAsync(Discord.RequestOptions)
  commentId: M:Discord.IUserMessage.UnpinAsync(Discord.RequestOptions)
  parent: Discord.IUserMessage
  name: UnpinAsync(RequestOptions)
  nameWithType: IUserMessage.UnpinAsync(RequestOptions)
  fullName: Discord.IUserMessage.UnpinAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IUserMessage.UnpinAsync(Discord.RequestOptions)
    name: UnpinAsync
    nameWithType: IUserMessage.UnpinAsync
    fullName: Discord.IUserMessage.UnpinAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IUserMessage.UnpinAsync(Discord.RequestOptions)
    name: UnpinAsync
    nameWithType: IUserMessage.UnpinAsync
    fullName: Discord.IUserMessage.UnpinAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestUserMessage.ModifySuppressionAsync*
  commentId: Overload:Discord.Rest.RestUserMessage.ModifySuppressionAsync
  name: ModifySuppressionAsync
  nameWithType: RestUserMessage.ModifySuppressionAsync
  fullName: Discord.Rest.RestUserMessage.ModifySuppressionAsync
- uid: Discord.IUserMessage.ModifySuppressionAsync(System.Boolean,Discord.RequestOptions)
  commentId: M:Discord.IUserMessage.ModifySuppressionAsync(System.Boolean,Discord.RequestOptions)
  parent: Discord.IUserMessage
  isExternal: true
  name: ModifySuppressionAsync(Boolean, RequestOptions)
  nameWithType: IUserMessage.ModifySuppressionAsync(Boolean, RequestOptions)
  fullName: Discord.IUserMessage.ModifySuppressionAsync(System.Boolean, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.IUserMessage.ModifySuppressionAsync(System.Boolean,Discord.RequestOptions)
    name: ModifySuppressionAsync
    nameWithType: IUserMessage.ModifySuppressionAsync
    fullName: Discord.IUserMessage.ModifySuppressionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IUserMessage.ModifySuppressionAsync(System.Boolean,Discord.RequestOptions)
    name: ModifySuppressionAsync
    nameWithType: IUserMessage.ModifySuppressionAsync
    fullName: Discord.IUserMessage.ModifySuppressionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestUserMessage.Resolve*
  commentId: Overload:Discord.Rest.RestUserMessage.Resolve
  name: Resolve
  nameWithType: RestUserMessage.Resolve
  fullName: Discord.Rest.RestUserMessage.Resolve
- uid: Discord.TagHandling
  commentId: T:Discord.TagHandling
  parent: Discord
  name: TagHandling
  nameWithType: TagHandling
  fullName: Discord.TagHandling
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Discord.IUserMessage.Resolve(Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  commentId: M:Discord.IUserMessage.Resolve(Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  parent: Discord.IUserMessage
  name: Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling)
  nameWithType: IUserMessage.Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling)
  fullName: Discord.IUserMessage.Resolve(Discord.TagHandling, Discord.TagHandling, Discord.TagHandling, Discord.TagHandling, Discord.TagHandling)
  spec.csharp:
  - uid: Discord.IUserMessage.Resolve(Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
    name: Resolve
    nameWithType: IUserMessage.Resolve
    fullName: Discord.IUserMessage.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.TagHandling
    name: TagHandling
    nameWithType: TagHandling
    fullName: Discord.TagHandling
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.TagHandling
    name: TagHandling
    nameWithType: TagHandling
    fullName: Discord.TagHandling
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.TagHandling
    name: TagHandling
    nameWithType: TagHandling
    fullName: Discord.TagHandling
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.TagHandling
    name: TagHandling
    nameWithType: TagHandling
    fullName: Discord.TagHandling
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.TagHandling
    name: TagHandling
    nameWithType: TagHandling
    fullName: Discord.TagHandling
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.IUserMessage.Resolve(Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
    name: Resolve
    nameWithType: IUserMessage.Resolve
    fullName: Discord.IUserMessage.Resolve
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.TagHandling
    name: TagHandling
    nameWithType: TagHandling
    fullName: Discord.TagHandling
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.TagHandling
    name: TagHandling
    nameWithType: TagHandling
    fullName: Discord.TagHandling
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.TagHandling
    name: TagHandling
    nameWithType: TagHandling
    fullName: Discord.TagHandling
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.TagHandling
    name: TagHandling
    nameWithType: TagHandling
    fullName: Discord.TagHandling
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.TagHandling
    name: TagHandling
    nameWithType: TagHandling
    fullName: Discord.TagHandling
  - name: )
    nameWithType: )
    fullName: )
