### YamlMime:ManagedReference
items:
- uid: Discord.Rest.RestUserMessage
  commentId: T:Discord.Rest.RestUserMessage
  id: RestUserMessage
  parent: Discord.Rest
  children:
  - Discord.Rest.RestUserMessage.Attachments
  - Discord.Rest.RestUserMessage.EditedTimestamp
  - Discord.Rest.RestUserMessage.Embeds
  - Discord.Rest.RestUserMessage.IsPinned
  - Discord.Rest.RestUserMessage.IsSuppressed
  - Discord.Rest.RestUserMessage.IsTTS
  - Discord.Rest.RestUserMessage.MentionedChannelIds
  - Discord.Rest.RestUserMessage.MentionedRoleIds
  - Discord.Rest.RestUserMessage.MentionedUsers
  - Discord.Rest.RestUserMessage.ModifyAsync(Action{Discord.MessageProperties},Discord.RequestOptions)
  - Discord.Rest.RestUserMessage.ModifySuppressionAsync(System.Boolean,Discord.RequestOptions)
  - Discord.Rest.RestUserMessage.PinAsync(Discord.RequestOptions)
  - Discord.Rest.RestUserMessage.Resolve(Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  - Discord.Rest.RestUserMessage.Resolve(System.Int32,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  - Discord.Rest.RestUserMessage.Tags
  - Discord.Rest.RestUserMessage.UnpinAsync(Discord.RequestOptions)
  langs:
  - csharp
  - vb
  name: RestUserMessage
  nameWithType: RestUserMessage
  fullName: Discord.Rest.RestUserMessage
  type: Class
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: RestUserMessage
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 12
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nRepresents a REST-based message sent by a user.\n"
  example: []
  syntax:
    content: 'public class RestUserMessage : RestMessage, IEntity<ulong>, IUpdateable, IUserMessage, IMessage, ISnowflakeEntity, IEntity<ulong>, IDeletable'
    content.vb: >-
      Public Class RestUserMessage
          Inherits RestMessage
          Implements IEntity(Of ULong), IUpdateable, IUserMessage, IMessage, ISnowflakeEntity, IEntity(Of ULong), IDeletable
  inheritance:
  - System.Object
  - Discord.Rest.RestEntity{System.UInt64}
  - Discord.Rest.RestMessage
  implements:
  - Discord.IEntity{System.UInt64}
  - Discord.IUpdateable
  - Discord.IUserMessage
  - Discord.IMessage
  - Discord.ISnowflakeEntity
  - Discord.IEntity{System.UInt64}
  - Discord.IDeletable
  inheritedMembers:
  - Discord.Rest.RestMessage.Channel
  - Discord.Rest.RestMessage.Author
  - Discord.Rest.RestMessage.Source
  - Discord.Rest.RestMessage.Content
  - Discord.Rest.RestMessage.CreatedAt
  - Discord.Rest.RestMessage.Timestamp
  - Discord.Rest.RestMessage.Activity
  - Discord.Rest.RestMessage.Application
  - Discord.Rest.RestMessage.UpdateAsync(Discord.RequestOptions)
  - Discord.Rest.RestMessage.DeleteAsync(Discord.RequestOptions)
  - Discord.Rest.RestMessage.ToString
  - Discord.Rest.RestMessage.Discord#IMessage#Type
  - Discord.Rest.RestMessage.Discord#IMessage#Author
  - Discord.Rest.RestMessage.Reactions
  - Discord.Rest.RestMessage.AddReactionAsync(Discord.IEmote,Discord.RequestOptions)
  - Discord.Rest.RestMessage.RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)
  - Discord.Rest.RestMessage.RemoveReactionAsync(Discord.IEmote,System.UInt64,Discord.RequestOptions)
  - Discord.Rest.RestMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
  - Discord.Rest.RestMessage.GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions)
  - Discord.Rest.RestEntity{System.UInt64}.Id
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Discord.Rest.RestUserMessage.IsTTS
  commentId: P:Discord.Rest.RestUserMessage.IsTTS
  id: IsTTS
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: IsTTS
  nameWithType: RestUserMessage.IsTTS
  fullName: Discord.Rest.RestUserMessage.IsTTS
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsTTS
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 22
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public override bool IsTTS { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property IsTTS As Boolean
  overridden: Discord.Rest.RestMessage.IsTTS
  overload: Discord.Rest.RestUserMessage.IsTTS*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.Rest.RestUserMessage.IsPinned
  commentId: P:Discord.Rest.RestUserMessage.IsPinned
  id: IsPinned
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: IsPinned
  nameWithType: RestUserMessage.IsPinned
  fullName: Discord.Rest.RestUserMessage.IsPinned
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsPinned
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 24
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public override bool IsPinned { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property IsPinned As Boolean
  overridden: Discord.Rest.RestMessage.IsPinned
  overload: Discord.Rest.RestUserMessage.IsPinned*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.Rest.RestUserMessage.IsSuppressed
  commentId: P:Discord.Rest.RestUserMessage.IsSuppressed
  id: IsSuppressed
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: IsSuppressed
  nameWithType: RestUserMessage.IsSuppressed
  fullName: Discord.Rest.RestUserMessage.IsSuppressed
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: IsSuppressed
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 26
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public override bool IsSuppressed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property IsSuppressed As Boolean
  overridden: Discord.Rest.RestMessage.IsSuppressed
  overload: Discord.Rest.RestUserMessage.IsSuppressed*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.Rest.RestUserMessage.EditedTimestamp
  commentId: P:Discord.Rest.RestUserMessage.EditedTimestamp
  id: EditedTimestamp
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: EditedTimestamp
  nameWithType: RestUserMessage.EditedTimestamp
  fullName: Discord.Rest.RestUserMessage.EditedTimestamp
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: EditedTimestamp
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 28
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public override DateTimeOffset? EditedTimestamp { get; }
    parameters: []
    return:
      type: System.Nullable{DateTimeOffset}
    content.vb: Public Overrides ReadOnly Property EditedTimestamp As DateTimeOffset?
  overridden: Discord.Rest.RestMessage.EditedTimestamp
  overload: Discord.Rest.RestUserMessage.EditedTimestamp*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.Rest.RestUserMessage.Attachments
  commentId: P:Discord.Rest.RestUserMessage.Attachments
  id: Attachments
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: Attachments
  nameWithType: RestUserMessage.Attachments
  fullName: Discord.Rest.RestUserMessage.Attachments
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Attachments
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 30
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of the <xref href=\"Discord.Attachment\" data-throw-if-not-resolved=\"false\"></xref>&apos;s on the message.\n"
  example: []
  syntax:
    content: public override IReadOnlyCollection<Attachment> Attachments { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.Attachment}
    content.vb: Public Overrides ReadOnly Property Attachments As IReadOnlyCollection(Of Attachment)
  overridden: Discord.Rest.RestMessage.Attachments
  overload: Discord.Rest.RestUserMessage.Attachments*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.Rest.RestUserMessage.Embeds
  commentId: P:Discord.Rest.RestUserMessage.Embeds
  id: Embeds
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: Embeds
  nameWithType: RestUserMessage.Embeds
  fullName: Discord.Rest.RestUserMessage.Embeds
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Embeds
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 32
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of the <xref href=\"Discord.Embed\" data-throw-if-not-resolved=\"false\"></xref>&apos;s on the message.\n"
  example: []
  syntax:
    content: public override IReadOnlyCollection<Embed> Embeds { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.Embed}
    content.vb: Public Overrides ReadOnly Property Embeds As IReadOnlyCollection(Of Embed)
  overridden: Discord.Rest.RestMessage.Embeds
  overload: Discord.Rest.RestUserMessage.Embeds*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.Rest.RestUserMessage.MentionedChannelIds
  commentId: P:Discord.Rest.RestUserMessage.MentionedChannelIds
  id: MentionedChannelIds
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: MentionedChannelIds
  nameWithType: RestUserMessage.MentionedChannelIds
  fullName: Discord.Rest.RestUserMessage.MentionedChannelIds
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: MentionedChannelIds
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 34
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public override IReadOnlyCollection<ulong> MentionedChannelIds { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{System.UInt64}
    content.vb: Public Overrides ReadOnly Property MentionedChannelIds As IReadOnlyCollection(Of ULong)
  overridden: Discord.Rest.RestMessage.MentionedChannelIds
  overload: Discord.Rest.RestUserMessage.MentionedChannelIds*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.Rest.RestUserMessage.MentionedRoleIds
  commentId: P:Discord.Rest.RestUserMessage.MentionedRoleIds
  id: MentionedRoleIds
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: MentionedRoleIds
  nameWithType: RestUserMessage.MentionedRoleIds
  fullName: Discord.Rest.RestUserMessage.MentionedRoleIds
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: MentionedRoleIds
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 36
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public override IReadOnlyCollection<ulong> MentionedRoleIds { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{System.UInt64}
    content.vb: Public Overrides ReadOnly Property MentionedRoleIds As IReadOnlyCollection(Of ULong)
  overridden: Discord.Rest.RestMessage.MentionedRoleIds
  overload: Discord.Rest.RestUserMessage.MentionedRoleIds*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.Rest.RestUserMessage.MentionedUsers
  commentId: P:Discord.Rest.RestUserMessage.MentionedUsers
  id: MentionedUsers
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: MentionedUsers
  nameWithType: RestUserMessage.MentionedUsers
  fullName: Discord.Rest.RestUserMessage.MentionedUsers
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: MentionedUsers
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 38
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  summary: "\nGets a collection of the mentioned users in the message.\n"
  example: []
  syntax:
    content: public override IReadOnlyCollection<RestUser> MentionedUsers { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.Rest.RestUser}
    content.vb: Public Overrides ReadOnly Property MentionedUsers As IReadOnlyCollection(Of RestUser)
  overridden: Discord.Rest.RestMessage.MentionedUsers
  overload: Discord.Rest.RestUserMessage.MentionedUsers*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.Rest.RestUserMessage.Tags
  commentId: P:Discord.Rest.RestUserMessage.Tags
  id: Tags
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: Tags
  nameWithType: RestUserMessage.Tags
  fullName: Discord.Rest.RestUserMessage.Tags
  type: Property
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Tags
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 40
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public override IReadOnlyCollection<ITag> Tags { get; }
    parameters: []
    return:
      type: IReadOnlyCollection{Discord.ITag}
    content.vb: Public Overrides ReadOnly Property Tags As IReadOnlyCollection(Of ITag)
  overridden: Discord.Rest.RestMessage.Tags
  overload: Discord.Rest.RestUserMessage.Tags*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Discord.Rest.RestUserMessage.ModifyAsync(Action{Discord.MessageProperties},Discord.RequestOptions)
  commentId: M:Discord.Rest.RestUserMessage.ModifyAsync(Action{Discord.MessageProperties},Discord.RequestOptions)
  id: ModifyAsync(Action{Discord.MessageProperties},Discord.RequestOptions)
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: ModifyAsync(Action<MessageProperties>, RequestOptions)
  nameWithType: RestUserMessage.ModifyAsync(Action<MessageProperties>, RequestOptions)
  fullName: Discord.Rest.RestUserMessage.ModifyAsync(Action<Discord.MessageProperties>, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ModifyAsync
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 126
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task ModifyAsync(Action<MessageProperties> func, RequestOptions options = null)
    parameters:
    - id: func
      type: Action{Discord.MessageProperties}
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function ModifyAsync(func As Action(Of MessageProperties), options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestUserMessage.ModifyAsync*
  nameWithType.vb: RestUserMessage.ModifyAsync(Action(Of MessageProperties), RequestOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Discord.Rest.RestUserMessage.ModifyAsync(Action(Of Discord.MessageProperties), Discord.RequestOptions)
  name.vb: ModifyAsync(Action(Of MessageProperties), RequestOptions)
- uid: Discord.Rest.RestUserMessage.PinAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestUserMessage.PinAsync(Discord.RequestOptions)
  id: PinAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: PinAsync(RequestOptions)
  nameWithType: RestUserMessage.PinAsync(RequestOptions)
  fullName: Discord.Rest.RestUserMessage.PinAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: PinAsync
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 133
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task PinAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function PinAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestUserMessage.PinAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestUserMessage.UnpinAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestUserMessage.UnpinAsync(Discord.RequestOptions)
  id: UnpinAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: UnpinAsync(RequestOptions)
  nameWithType: RestUserMessage.UnpinAsync(RequestOptions)
  fullName: Discord.Rest.RestUserMessage.UnpinAsync(Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: UnpinAsync
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 136
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task UnpinAsync(RequestOptions options = null)
    parameters:
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function UnpinAsync(options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestUserMessage.UnpinAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestUserMessage.ModifySuppressionAsync(System.Boolean,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestUserMessage.ModifySuppressionAsync(System.Boolean,Discord.RequestOptions)
  id: ModifySuppressionAsync(System.Boolean,Discord.RequestOptions)
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: ModifySuppressionAsync(Boolean, RequestOptions)
  nameWithType: RestUserMessage.ModifySuppressionAsync(Boolean, RequestOptions)
  fullName: Discord.Rest.RestUserMessage.ModifySuppressionAsync(System.Boolean, Discord.RequestOptions)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: ModifySuppressionAsync
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 139
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public Task ModifySuppressionAsync(bool suppressEmbeds, RequestOptions options = null)
    parameters:
    - id: suppressEmbeds
      type: System.Boolean
    - id: options
      type: Discord.RequestOptions
    return:
      type: Task
    content.vb: Public Function ModifySuppressionAsync(suppressEmbeds As Boolean, options As RequestOptions = Nothing) As Task
  overload: Discord.Rest.RestUserMessage.ModifySuppressionAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestUserMessage.Resolve(System.Int32,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  commentId: M:Discord.Rest.RestUserMessage.Resolve(System.Int32,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  id: Resolve(System.Int32,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: Resolve(Int32, TagHandling, TagHandling, TagHandling, TagHandling, TagHandling)
  nameWithType: RestUserMessage.Resolve(Int32, TagHandling, TagHandling, TagHandling, TagHandling, TagHandling)
  fullName: Discord.Rest.RestUserMessage.Resolve(System.Int32, Discord.TagHandling, Discord.TagHandling, Discord.TagHandling, Discord.TagHandling, Discord.TagHandling)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Resolve
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 142
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  syntax:
    content: public string Resolve(int startIndex, TagHandling userHandling = default(TagHandling), TagHandling channelHandling = default(TagHandling), TagHandling roleHandling = default(TagHandling), TagHandling everyoneHandling = default(TagHandling), TagHandling emojiHandling = default(TagHandling))
    parameters:
    - id: startIndex
      type: System.Int32
    - id: userHandling
      type: Discord.TagHandling
    - id: channelHandling
      type: Discord.TagHandling
    - id: roleHandling
      type: Discord.TagHandling
    - id: everyoneHandling
      type: Discord.TagHandling
    - id: emojiHandling
      type: Discord.TagHandling
    return:
      type: System.String
    content.vb: Public Function Resolve(startIndex As Integer, userHandling As TagHandling = Nothing, channelHandling As TagHandling = Nothing, roleHandling As TagHandling = Nothing, everyoneHandling As TagHandling = Nothing, emojiHandling As TagHandling = Nothing) As String
  overload: Discord.Rest.RestUserMessage.Resolve*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Discord.Rest.RestUserMessage.Resolve(Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  commentId: M:Discord.Rest.RestUserMessage.Resolve(Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  id: Resolve(Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)
  parent: Discord.Rest.RestUserMessage
  langs:
  - csharp
  - vb
  name: Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling)
  nameWithType: RestUserMessage.Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling)
  fullName: Discord.Rest.RestUserMessage.Resolve(Discord.TagHandling, Discord.TagHandling, Discord.TagHandling, Discord.TagHandling, Discord.TagHandling)
  type: Method
  source:
    remote:
      path: src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
      branch: dev
      repo: https://github.com/discord-net/Discord.Net
    id: Resolve
    path: ../src/Discord.Net.Rest/Entities/Messages/RestUserMessage.cs
    startLine: 146
  assemblies:
  - Discord.Net.Rest
  namespace: Discord.Rest
  example: []
  syntax:
    content: public string Resolve(TagHandling userHandling = default(TagHandling), TagHandling channelHandling = default(TagHandling), TagHandling roleHandling = default(TagHandling), TagHandling everyoneHandling = default(TagHandling), TagHandling emojiHandling = default(TagHandling))
    parameters:
    - id: userHandling
      type: Discord.TagHandling
    - id: channelHandling
      type: Discord.TagHandling
    - id: roleHandling
      type: Discord.TagHandling
    - id: everyoneHandling
      type: Discord.TagHandling
    - id: emojiHandling
      type: Discord.TagHandling
    return:
      type: System.String
    content.vb: Public Function Resolve(userHandling As TagHandling = Nothing, channelHandling As TagHandling = Nothing, roleHandling As TagHandling = Nothing, everyoneHandling As TagHandling = Nothing, emojiHandling As TagHandling = Nothing) As String
  overload: Discord.Rest.RestUserMessage.Resolve*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Discord.Rest
  commentId: N:Discord.Rest
  name: Discord.Rest
  nameWithType: Discord.Rest
  fullName: Discord.Rest
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Discord.Rest.RestEntity{System.UInt64}
  commentId: T:Discord.Rest.RestEntity{System.UInt64}
  parent: Discord.Rest
  definition: Discord.Rest.RestEntity`1
  name: RestEntity<UInt64>
  nameWithType: RestEntity<UInt64>
  fullName: Discord.Rest.RestEntity<System.UInt64>
  nameWithType.vb: RestEntity(Of UInt64)
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64)
  name.vb: RestEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestMessage
  commentId: T:Discord.Rest.RestMessage
  parent: Discord.Rest
  name: RestMessage
  nameWithType: RestMessage
  fullName: Discord.Rest.RestMessage
- uid: Discord.IEntity{System.UInt64}
  commentId: T:Discord.IEntity{System.UInt64}
  parent: Discord
  definition: Discord.IEntity`1
  name: IEntity<UInt64>
  nameWithType: IEntity<UInt64>
  fullName: Discord.IEntity<System.UInt64>
  nameWithType.vb: IEntity(Of UInt64)
  fullName.vb: Discord.IEntity(Of System.UInt64)
  name.vb: IEntity(Of UInt64)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IUpdateable
  commentId: T:Discord.IUpdateable
  parent: Discord
  name: IUpdateable
  nameWithType: IUpdateable
  fullName: Discord.IUpdateable
- uid: Discord.IUserMessage
  commentId: T:Discord.IUserMessage
  parent: Discord
  name: IUserMessage
  nameWithType: IUserMessage
  fullName: Discord.IUserMessage
- uid: Discord.IMessage
  commentId: T:Discord.IMessage
  parent: Discord
  name: IMessage
  nameWithType: IMessage
  fullName: Discord.IMessage
- uid: Discord.ISnowflakeEntity
  commentId: T:Discord.ISnowflakeEntity
  parent: Discord
  name: ISnowflakeEntity
  nameWithType: ISnowflakeEntity
  fullName: Discord.ISnowflakeEntity
- uid: Discord.IDeletable
  commentId: T:Discord.IDeletable
  parent: Discord
  name: IDeletable
  nameWithType: IDeletable
  fullName: Discord.IDeletable
- uid: Discord.Rest.RestMessage.Channel
  commentId: P:Discord.Rest.RestMessage.Channel
  parent: Discord.Rest.RestMessage
  name: Channel
  nameWithType: RestMessage.Channel
  fullName: Discord.Rest.RestMessage.Channel
- uid: Discord.Rest.RestMessage.Author
  commentId: P:Discord.Rest.RestMessage.Author
  parent: Discord.Rest.RestMessage
  name: Author
  nameWithType: RestMessage.Author
  fullName: Discord.Rest.RestMessage.Author
- uid: Discord.Rest.RestMessage.Source
  commentId: P:Discord.Rest.RestMessage.Source
  parent: Discord.Rest.RestMessage
  name: Source
  nameWithType: RestMessage.Source
  fullName: Discord.Rest.RestMessage.Source
- uid: Discord.Rest.RestMessage.Content
  commentId: P:Discord.Rest.RestMessage.Content
  parent: Discord.Rest.RestMessage
  name: Content
  nameWithType: RestMessage.Content
  fullName: Discord.Rest.RestMessage.Content
- uid: Discord.Rest.RestMessage.CreatedAt
  commentId: P:Discord.Rest.RestMessage.CreatedAt
  parent: Discord.Rest.RestMessage
  name: CreatedAt
  nameWithType: RestMessage.CreatedAt
  fullName: Discord.Rest.RestMessage.CreatedAt
- uid: Discord.Rest.RestMessage.Timestamp
  commentId: P:Discord.Rest.RestMessage.Timestamp
  parent: Discord.Rest.RestMessage
  name: Timestamp
  nameWithType: RestMessage.Timestamp
  fullName: Discord.Rest.RestMessage.Timestamp
- uid: Discord.Rest.RestMessage.Activity
  commentId: P:Discord.Rest.RestMessage.Activity
  parent: Discord.Rest.RestMessage
  name: Activity
  nameWithType: RestMessage.Activity
  fullName: Discord.Rest.RestMessage.Activity
- uid: Discord.Rest.RestMessage.Application
  commentId: P:Discord.Rest.RestMessage.Application
  parent: Discord.Rest.RestMessage
  name: Application
  nameWithType: RestMessage.Application
  fullName: Discord.Rest.RestMessage.Application
- uid: Discord.Rest.RestMessage.UpdateAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestMessage.UpdateAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestMessage
  name: UpdateAsync(RequestOptions)
  nameWithType: RestMessage.UpdateAsync(RequestOptions)
  fullName: Discord.Rest.RestMessage.UpdateAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestMessage.UpdateAsync(Discord.RequestOptions)
    name: UpdateAsync
    nameWithType: RestMessage.UpdateAsync
    fullName: Discord.Rest.RestMessage.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestMessage.UpdateAsync(Discord.RequestOptions)
    name: UpdateAsync
    nameWithType: RestMessage.UpdateAsync
    fullName: Discord.Rest.RestMessage.UpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestMessage.DeleteAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestMessage.DeleteAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestMessage
  name: DeleteAsync(RequestOptions)
  nameWithType: RestMessage.DeleteAsync(RequestOptions)
  fullName: Discord.Rest.RestMessage.DeleteAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestMessage.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: RestMessage.DeleteAsync
    fullName: Discord.Rest.RestMessage.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestMessage.DeleteAsync(Discord.RequestOptions)
    name: DeleteAsync
    nameWithType: RestMessage.DeleteAsync
    fullName: Discord.Rest.RestMessage.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestMessage.ToString
  commentId: M:Discord.Rest.RestMessage.ToString
  parent: Discord.Rest.RestMessage
  name: ToString()
  nameWithType: RestMessage.ToString()
  fullName: Discord.Rest.RestMessage.ToString()
  spec.csharp:
  - uid: Discord.Rest.RestMessage.ToString
    name: ToString
    nameWithType: RestMessage.ToString
    fullName: Discord.Rest.RestMessage.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestMessage.ToString
    name: ToString
    nameWithType: RestMessage.ToString
    fullName: Discord.Rest.RestMessage.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestMessage.Discord#IMessage#Type
  commentId: P:Discord.Rest.RestMessage.Discord#IMessage#Type
  parent: Discord.Rest.RestMessage
  name: IMessage.Type
  nameWithType: RestMessage.IMessage.Type
  fullName: Discord.Rest.RestMessage.Discord.IMessage.Type
  nameWithType.vb: RestMessage.Discord.IMessage.Type
  name.vb: Discord.IMessage.Type
- uid: Discord.Rest.RestMessage.Discord#IMessage#Author
  commentId: P:Discord.Rest.RestMessage.Discord#IMessage#Author
  parent: Discord.Rest.RestMessage
  name: IMessage.Author
  nameWithType: RestMessage.IMessage.Author
  fullName: Discord.Rest.RestMessage.Discord.IMessage.Author
  nameWithType.vb: RestMessage.Discord.IMessage.Author
  name.vb: Discord.IMessage.Author
- uid: Discord.Rest.RestMessage.Reactions
  commentId: P:Discord.Rest.RestMessage.Reactions
  parent: Discord.Rest.RestMessage
  name: Reactions
  nameWithType: RestMessage.Reactions
  fullName: Discord.Rest.RestMessage.Reactions
- uid: Discord.Rest.RestMessage.AddReactionAsync(Discord.IEmote,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestMessage.AddReactionAsync(Discord.IEmote,Discord.RequestOptions)
  parent: Discord.Rest.RestMessage
  name: AddReactionAsync(IEmote, RequestOptions)
  nameWithType: RestMessage.AddReactionAsync(IEmote, RequestOptions)
  fullName: Discord.Rest.RestMessage.AddReactionAsync(Discord.IEmote, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestMessage.AddReactionAsync(Discord.IEmote,Discord.RequestOptions)
    name: AddReactionAsync
    nameWithType: RestMessage.AddReactionAsync
    fullName: Discord.Rest.RestMessage.AddReactionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestMessage.AddReactionAsync(Discord.IEmote,Discord.RequestOptions)
    name: AddReactionAsync
    nameWithType: RestMessage.AddReactionAsync
    fullName: Discord.Rest.RestMessage.AddReactionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestMessage.RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestMessage.RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)
  parent: Discord.Rest.RestMessage
  name: RemoveReactionAsync(IEmote, IUser, RequestOptions)
  nameWithType: RestMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions)
  fullName: Discord.Rest.RestMessage.RemoveReactionAsync(Discord.IEmote, Discord.IUser, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestMessage.RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)
    name: RemoveReactionAsync
    nameWithType: RestMessage.RemoveReactionAsync
    fullName: Discord.Rest.RestMessage.RemoveReactionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestMessage.RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)
    name: RemoveReactionAsync
    nameWithType: RestMessage.RemoveReactionAsync
    fullName: Discord.Rest.RestMessage.RemoveReactionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.IUser
    name: IUser
    nameWithType: IUser
    fullName: Discord.IUser
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestMessage.RemoveReactionAsync(Discord.IEmote,System.UInt64,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestMessage.RemoveReactionAsync(Discord.IEmote,System.UInt64,Discord.RequestOptions)
  parent: Discord.Rest.RestMessage
  isExternal: true
  name: RemoveReactionAsync(IEmote, UInt64, RequestOptions)
  nameWithType: RestMessage.RemoveReactionAsync(IEmote, UInt64, RequestOptions)
  fullName: Discord.Rest.RestMessage.RemoveReactionAsync(Discord.IEmote, System.UInt64, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestMessage.RemoveReactionAsync(Discord.IEmote,System.UInt64,Discord.RequestOptions)
    name: RemoveReactionAsync
    nameWithType: RestMessage.RemoveReactionAsync
    fullName: Discord.Rest.RestMessage.RemoveReactionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestMessage.RemoveReactionAsync(Discord.IEmote,System.UInt64,Discord.RequestOptions)
    name: RemoveReactionAsync
    nameWithType: RestMessage.RemoveReactionAsync
    fullName: Discord.Rest.RestMessage.RemoveReactionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
  commentId: M:Discord.Rest.RestMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
  parent: Discord.Rest.RestMessage
  name: RemoveAllReactionsAsync(RequestOptions)
  nameWithType: RestMessage.RemoveAllReactionsAsync(RequestOptions)
  fullName: Discord.Rest.RestMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
    name: RemoveAllReactionsAsync
    nameWithType: RestMessage.RemoveAllReactionsAsync
    fullName: Discord.Rest.RestMessage.RemoveAllReactionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestMessage.RemoveAllReactionsAsync(Discord.RequestOptions)
    name: RemoveAllReactionsAsync
    nameWithType: RestMessage.RemoveAllReactionsAsync
    fullName: Discord.Rest.RestMessage.RemoveAllReactionsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestMessage.GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions)
  commentId: M:Discord.Rest.RestMessage.GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions)
  parent: Discord.Rest.RestMessage
  isExternal: true
  name: GetReactionUsersAsync(IEmote, Int32, RequestOptions)
  nameWithType: RestMessage.GetReactionUsersAsync(IEmote, Int32, RequestOptions)
  fullName: Discord.Rest.RestMessage.GetReactionUsersAsync(Discord.IEmote, System.Int32, Discord.RequestOptions)
  spec.csharp:
  - uid: Discord.Rest.RestMessage.GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions)
    name: GetReactionUsersAsync
    nameWithType: RestMessage.GetReactionUsersAsync
    fullName: Discord.Rest.RestMessage.GetReactionUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Discord.Rest.RestMessage.GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions)
    name: GetReactionUsersAsync
    nameWithType: RestMessage.GetReactionUsersAsync
    fullName: Discord.Rest.RestMessage.GetReactionUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Discord.IEmote
    name: IEmote
    nameWithType: IEmote
    fullName: Discord.IEmote
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Discord.RequestOptions
    name: RequestOptions
    nameWithType: RequestOptions
    fullName: Discord.RequestOptions
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestEntity{System.UInt64}.Id
  commentId: P:Discord.Rest.RestEntity{System.UInt64}.Id
  parent: Discord.Rest.RestEntity{System.UInt64}
  definition: Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<UInt64>.Id
  fullName: Discord.Rest.RestEntity<System.UInt64>.Id
  nameWithType.vb: RestEntity(Of UInt64).Id
  fullName.vb: Discord.Rest.RestEntity(Of System.UInt64).Id
- uid: Discord.Rest.RestEntity`1
  commentId: T:Discord.Rest.RestEntity`1
  name: RestEntity<T>
  nameWithType: RestEntity<T>
  fullName: Discord.Rest.RestEntity<T>
  nameWithType.vb: RestEntity(Of T)
  fullName.vb: Discord.Rest.RestEntity(Of T)
  name.vb: RestEntity(Of T)
  spec.csharp:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.Rest.RestEntity`1
    name: RestEntity
    nameWithType: RestEntity
    fullName: Discord.Rest.RestEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.IEntity`1
  commentId: T:Discord.IEntity`1
  name: IEntity<TId>
  nameWithType: IEntity<TId>
  fullName: Discord.IEntity<TId>
  nameWithType.vb: IEntity(Of TId)
  fullName.vb: Discord.IEntity(Of TId)
  name.vb: IEntity(Of TId)
  spec.csharp:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Discord.IEntity`1
    name: IEntity
    nameWithType: IEntity
    fullName: Discord.IEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TId
    nameWithType: TId
    fullName: TId
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord
  commentId: N:Discord
  name: Discord
  nameWithType: Discord
  fullName: Discord
- uid: Discord.Rest.RestEntity`1.Id
  commentId: P:Discord.Rest.RestEntity`1.Id
  name: Id
  nameWithType: RestEntity<T>.Id
  fullName: Discord.Rest.RestEntity<T>.Id
  nameWithType.vb: RestEntity(Of T).Id
  fullName.vb: Discord.Rest.RestEntity(Of T).Id
- uid: Discord.Rest.RestMessage.IsTTS
  commentId: P:Discord.Rest.RestMessage.IsTTS
  parent: Discord.Rest.RestMessage
  name: IsTTS
  nameWithType: RestMessage.IsTTS
  fullName: Discord.Rest.RestMessage.IsTTS
- uid: Discord.Rest.RestUserMessage.IsTTS*
  commentId: Overload:Discord.Rest.RestUserMessage.IsTTS
  name: IsTTS
  nameWithType: RestUserMessage.IsTTS
  fullName: Discord.Rest.RestUserMessage.IsTTS
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Discord.Rest.RestMessage.IsPinned
  commentId: P:Discord.Rest.RestMessage.IsPinned
  parent: Discord.Rest.RestMessage
  name: IsPinned
  nameWithType: RestMessage.IsPinned
  fullName: Discord.Rest.RestMessage.IsPinned
- uid: Discord.Rest.RestUserMessage.IsPinned*
  commentId: Overload:Discord.Rest.RestUserMessage.IsPinned
  name: IsPinned
  nameWithType: RestUserMessage.IsPinned
  fullName: Discord.Rest.RestUserMessage.IsPinned
- uid: Discord.Rest.RestMessage.IsSuppressed
  commentId: P:Discord.Rest.RestMessage.IsSuppressed
  parent: Discord.Rest.RestMessage
  name: IsSuppressed
  nameWithType: RestMessage.IsSuppressed
  fullName: Discord.Rest.RestMessage.IsSuppressed
- uid: Discord.Rest.RestUserMessage.IsSuppressed*
  commentId: Overload:Discord.Rest.RestUserMessage.IsSuppressed
  name: IsSuppressed
  nameWithType: RestUserMessage.IsSuppressed
  fullName: Discord.Rest.RestUserMessage.IsSuppressed
- uid: Discord.Rest.RestMessage.EditedTimestamp
  commentId: P:Discord.Rest.RestMessage.EditedTimestamp
  parent: Discord.Rest.RestMessage
  name: EditedTimestamp
  nameWithType: RestMessage.EditedTimestamp
  fullName: Discord.Rest.RestMessage.EditedTimestamp
- uid: Discord.Rest.RestUserMessage.EditedTimestamp*
  commentId: Overload:Discord.Rest.RestUserMessage.EditedTimestamp
  name: EditedTimestamp
  nameWithType: RestUserMessage.EditedTimestamp
  fullName: Discord.Rest.RestUserMessage.EditedTimestamp
- uid: System.Nullable{DateTimeOffset}
  commentId: '!:System.Nullable{DateTimeOffset}'
  definition: System.Nullable`1
  name: Nullable<DateTimeOffset>
  nameWithType: Nullable<DateTimeOffset>
  fullName: System.Nullable<DateTimeOffset>
  nameWithType.vb: Nullable(Of DateTimeOffset)
  fullName.vb: System.Nullable(Of DateTimeOffset)
  name.vb: Nullable(Of DateTimeOffset)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: DateTimeOffset
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestMessage.Attachments
  commentId: P:Discord.Rest.RestMessage.Attachments
  parent: Discord.Rest.RestMessage
  name: Attachments
  nameWithType: RestMessage.Attachments
  fullName: Discord.Rest.RestMessage.Attachments
- uid: Discord.Rest.RestUserMessage.Attachments*
  commentId: Overload:Discord.Rest.RestUserMessage.Attachments
  name: Attachments
  nameWithType: RestUserMessage.Attachments
  fullName: Discord.Rest.RestUserMessage.Attachments
- uid: IReadOnlyCollection{Discord.Attachment}
  commentId: '!:IReadOnlyCollection{Discord.Attachment}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<Attachment>
  nameWithType: IReadOnlyCollection<Attachment>
  fullName: IReadOnlyCollection<Discord.Attachment>
  nameWithType.vb: IReadOnlyCollection(Of Attachment)
  fullName.vb: IReadOnlyCollection(Of Discord.Attachment)
  name.vb: IReadOnlyCollection(Of Attachment)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Attachment
    name: Attachment
    nameWithType: Attachment
    fullName: Discord.Attachment
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Attachment
    name: Attachment
    nameWithType: Attachment
    fullName: Discord.Attachment
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<>
  nameWithType: IReadOnlyCollection<>
  fullName: IReadOnlyCollection<>
  nameWithType.vb: IReadOnlyCollection(Of )
  fullName.vb: IReadOnlyCollection(Of )
  name.vb: IReadOnlyCollection(Of )
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestMessage.Embeds
  commentId: P:Discord.Rest.RestMessage.Embeds
  parent: Discord.Rest.RestMessage
  name: Embeds
  nameWithType: RestMessage.Embeds
  fullName: Discord.Rest.RestMessage.Embeds
- uid: Discord.Rest.RestUserMessage.Embeds*
  commentId: Overload:Discord.Rest.RestUserMessage.Embeds
  name: Embeds
  nameWithType: RestUserMessage.Embeds
  fullName: Discord.Rest.RestUserMessage.Embeds
- uid: IReadOnlyCollection{Discord.Embed}
  commentId: '!:IReadOnlyCollection{Discord.Embed}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<Embed>
  nameWithType: IReadOnlyCollection<Embed>
  fullName: IReadOnlyCollection<Discord.Embed>
  nameWithType.vb: IReadOnlyCollection(Of Embed)
  fullName.vb: IReadOnlyCollection(Of Discord.Embed)
  name.vb: IReadOnlyCollection(Of Embed)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Embed
    name: Embed
    nameWithType: Embed
    fullName: Discord.Embed
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestMessage.MentionedChannelIds
  commentId: P:Discord.Rest.RestMessage.MentionedChannelIds
  parent: Discord.Rest.RestMessage
  name: MentionedChannelIds
  nameWithType: RestMessage.MentionedChannelIds
  fullName: Discord.Rest.RestMessage.MentionedChannelIds
- uid: Discord.Rest.RestUserMessage.MentionedChannelIds*
  commentId: Overload:Discord.Rest.RestUserMessage.MentionedChannelIds
  name: MentionedChannelIds
  nameWithType: RestUserMessage.MentionedChannelIds
  fullName: Discord.Rest.RestUserMessage.MentionedChannelIds
- uid: IReadOnlyCollection{System.UInt64}
  commentId: '!:IReadOnlyCollection{System.UInt64}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<UInt64>
  nameWithType: IReadOnlyCollection<UInt64>
  fullName: IReadOnlyCollection<System.UInt64>
  nameWithType.vb: IReadOnlyCollection(Of UInt64)
  fullName.vb: IReadOnlyCollection(Of System.UInt64)
  name.vb: IReadOnlyCollection(Of UInt64)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestMessage.MentionedRoleIds
  commentId: P:Discord.Rest.RestMessage.MentionedRoleIds
  parent: Discord.Rest.RestMessage
  name: MentionedRoleIds
  nameWithType: RestMessage.MentionedRoleIds
  fullName: Discord.Rest.RestMessage.MentionedRoleIds
- uid: Discord.Rest.RestUserMessage.MentionedRoleIds*
  commentId: Overload:Discord.Rest.RestUserMessage.MentionedRoleIds
  name: MentionedRoleIds
  nameWithType: RestUserMessage.MentionedRoleIds
  fullName: Discord.Rest.RestUserMessage.MentionedRoleIds
- uid: Discord.Rest.RestMessage.MentionedUsers
  commentId: P:Discord.Rest.RestMessage.MentionedUsers
  parent: Discord.Rest.RestMessage
  name: MentionedUsers
  nameWithType: RestMessage.MentionedUsers
  fullName: Discord.Rest.RestMessage.MentionedUsers
- uid: Discord.Rest.RestUserMessage.MentionedUsers*
  commentId: Overload:Discord.Rest.RestUserMessage.MentionedUsers
  name: MentionedUsers
  nameWithType: RestUserMessage.MentionedUsers
  fullName: Discord.Rest.RestUserMessage.MentionedUsers
- uid: IReadOnlyCollection{Discord.Rest.RestUser}
  commentId: '!:IReadOnlyCollection{Discord.Rest.RestUser}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<RestUser>
  nameWithType: IReadOnlyCollection<RestUser>
  fullName: IReadOnlyCollection<Discord.Rest.RestUser>
  nameWithType.vb: IReadOnlyCollection(Of RestUser)
  fullName.vb: IReadOnlyCollection(Of Discord.Rest.RestUser)
  name.vb: IReadOnlyCollection(Of RestUser)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.Rest.RestUser
    name: RestUser
    nameWithType: RestUser
    fullName: Discord.Rest.RestUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.Rest.RestUser
    name: RestUser
    nameWithType: RestUser
    fullName: Discord.Rest.RestUser
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestMessage.Tags
  commentId: P:Discord.Rest.RestMessage.Tags
  parent: Discord.Rest.RestMessage
  name: Tags
  nameWithType: RestMessage.Tags
  fullName: Discord.Rest.RestMessage.Tags
- uid: Discord.Rest.RestUserMessage.Tags*
  commentId: Overload:Discord.Rest.RestUserMessage.Tags
  name: Tags
  nameWithType: RestUserMessage.Tags
  fullName: Discord.Rest.RestUserMessage.Tags
- uid: IReadOnlyCollection{Discord.ITag}
  commentId: '!:IReadOnlyCollection{Discord.ITag}'
  definition: IReadOnlyCollection`1
  name: IReadOnlyCollection<ITag>
  nameWithType: IReadOnlyCollection<ITag>
  fullName: IReadOnlyCollection<Discord.ITag>
  nameWithType.vb: IReadOnlyCollection(Of ITag)
  fullName.vb: IReadOnlyCollection(Of Discord.ITag)
  name.vb: IReadOnlyCollection(Of ITag)
  spec.csharp:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.ITag
    name: ITag
    nameWithType: ITag
    fullName: Discord.ITag
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.ITag
    name: ITag
    nameWithType: ITag
    fullName: Discord.ITag
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestUserMessage.ModifyAsync*
  commentId: Overload:Discord.Rest.RestUserMessage.ModifyAsync
  name: ModifyAsync
  nameWithType: RestUserMessage.ModifyAsync
  fullName: Discord.Rest.RestUserMessage.ModifyAsync
- uid: Action{Discord.MessageProperties}
  commentId: '!:Action{Discord.MessageProperties}'
  definition: Action`1
  name: Action<MessageProperties>
  nameWithType: Action<MessageProperties>
  fullName: Action<Discord.MessageProperties>
  nameWithType.vb: Action(Of MessageProperties)
  fullName.vb: Action(Of Discord.MessageProperties)
  name.vb: Action(Of MessageProperties)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Discord.MessageProperties
    name: MessageProperties
    nameWithType: MessageProperties
    fullName: Discord.MessageProperties
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Discord.MessageProperties
    name: MessageProperties
    nameWithType: MessageProperties
    fullName: Discord.MessageProperties
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.RequestOptions
  commentId: T:Discord.RequestOptions
  parent: Discord
  name: RequestOptions
  nameWithType: RequestOptions
  fullName: Discord.RequestOptions
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Discord.Rest.RestUserMessage.PinAsync*
  commentId: Overload:Discord.Rest.RestUserMessage.PinAsync
  name: PinAsync
  nameWithType: RestUserMessage.PinAsync
  fullName: Discord.Rest.RestUserMessage.PinAsync
- uid: Discord.Rest.RestUserMessage.UnpinAsync*
  commentId: Overload:Discord.Rest.RestUserMessage.UnpinAsync
  name: UnpinAsync
  nameWithType: RestUserMessage.UnpinAsync
  fullName: Discord.Rest.RestUserMessage.UnpinAsync
- uid: Discord.Rest.RestUserMessage.ModifySuppressionAsync*
  commentId: Overload:Discord.Rest.RestUserMessage.ModifySuppressionAsync
  name: ModifySuppressionAsync
  nameWithType: RestUserMessage.ModifySuppressionAsync
  fullName: Discord.Rest.RestUserMessage.ModifySuppressionAsync
- uid: Discord.Rest.RestUserMessage.Resolve*
  commentId: Overload:Discord.Rest.RestUserMessage.Resolve
  name: Resolve
  nameWithType: RestUserMessage.Resolve
  fullName: Discord.Rest.RestUserMessage.Resolve
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Discord.TagHandling
  commentId: T:Discord.TagHandling
  parent: Discord
  name: TagHandling
  nameWithType: TagHandling
  fullName: Discord.TagHandling
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
