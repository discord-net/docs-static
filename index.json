{
  "CHANGELOG.html": {
    "href": "CHANGELOG.html",
    "title": "Changelog | Discord.Net Documentation",
    "keywords": "Changelog [3.13.0] - 2023-11-18 Added #2707 Added Super reactions support (9fd5c6c) #2725 Added Media channel support (e3cd340) #2753 Added additional Update/Modify Async Attachment's (ae275ab) #2769 Added missing parameters to RespondWithModalAsync methods and implement missing overloads (4e78aec) #2773 Added useful utility methods to ModalBuilder (8591de7) #2776 Added Select menu default values (ac274d4) #2777 Added Voice channel status support (8060dcf) #2781 Added premium subscriptions support (7723f61) #2782 Added Avatar decorations support (f64d9d6) #2784 Added App subscriptions additional support (a9a8da4) #2783 Added Guild incident actions (9b36df3) #2787 Added Embed ToJsonString & (Try)Parse (7b5c40a) #2791 Added Automod member profile moderation, new application fields, use clyde ai & guild invenory settings (699554a) #2792 Added create roles with icons (b45b774) #2796 Added clips support (poggers) (89bebc3) Fixed #2758 Fixed Slash Command Localizations lost after AddCommandsToGuildAsync and deleteMissing = false (8d5022a) #2759 Fixed missing null checks in RoleConnectionProperties (ab3b30d) #2766 Fixed UpdateAsync Remove Attachment Bug (a668757) #2763 Fixed SocketKickAuditLogData User never having value (5cfec05) #2770 Fixed URL encode timestamps sent as query parameters (589c58a) #2774 Fixed some IDiscordClient methods are not properly implemented in clients (8baf913) #2789 Fixed multiline values in short TextInputs (33e8340) Misc #2739 Remove some unnecessary async/await (86655a8) #2754 Replace Moq with NSubstitute for Mocking in GuildHelperTests (b988a18) #2765 Use Discord heartbeat interval in audio. (9cedfbc) #2771 Extract GetDisplayAvatarUrl in IUser (b1787d8) [3.12.0] - 2023-08-10 Added #2644 Added ComponentBuilder component removal methods. (d5d7378) #2668 Added a method for sending silent audio frames on OpusEncodeStream. (59094d2) #2675 Added missing remove property to MemberRoleAudit. (5fb9152) #2720 Added role & attachment flags (a421715) #2723 Added missing properties to webhook implementation (2b8584d) #2729 Added new onboarding methods/properties (8cd4c1c) #2730 Added new ModifyCurrentApplication features (166d40f) #2749 Added support for setting custom status (b2820d5) Fixed #2711 Fixed modifying guild resets preferred locale (12c50f2) #2713 Fixed some ReplyAsync methods missing MessageFlags parameter. (56769cb) #2714 Fixed disconnecting socket client not sending close code. (6bb3777) #2722 Fixed modal's DeferAsync implementation (5f580f6) #2726 Fixed global name not being passed to UserUpdated event (9dfd4d7) #2742 Fixed ModifyAsync attachments #2236 (0c12079) #2745 Fixed GetMessagesAsync with Direction.After not working as expected (c922497) [3.11.0] - 2023-6-27 Added #2616 Added guild Onboarding support (3a8f76c) #2627 Added Audit Log Created gateway event support (dff6a57) #2645 Added Message property and UpdateAsync() to IModalInteraction (83dfa0c) #2648 Added MaxStageVideoChannelUsers property to IGuild (bdd755b) #2665 Added voice messages support (f171684) #2619 Added get current bot application information (9ef5a76) #2649 Added SafetyAlertsChannelId to IGuild (2112e1f) #2696 Added support for the new username system (df717e6) #2620 Added support for filtering audit log entries by after id (529fe3d) #2622 Added default thread ratelimit in guild text channels (f9c8530) Fixed #2628 Allow creating stickers with no description (c950106) #2682 Fixed missing JsonProperty attributes in params for modifying automod rules (9df4438) #2702 Fixed TypingStartedEvent model to support Clyde (547bc92) #2652 Fixed streams being incorrectly disposed in DefaultRestClient (84431de) #2708 Fixed threads not getting removed from cache on THREAD_DELETE (fe4130d) #2688 Fixed some internal classes being public (9ddd922) #2687 Allow more than 1 action to be registered per automod rule (200bed7) #2683 Fixed mention limit, regex patterns & allowlist for automod rules (a41fa62) #2663 Fixed T3 file upload size to be 25MiB (98f974d) #2662 Fixed duplicate SlashCommandExecuted event on failed result (fe9657a) #2651 Fixed name translations (NameLocalizations) for ChoiceAttribute (75ae488) #2647 Fixed ChannelPermissions.All() exception on forums (6265dd5) #2642 Enforce rate limits on 429s (69cce5b) Misc #2601 Add missing json error (a8ae1e9) #2609 Refactor SendMessageAsync & SendFile(s)Async methods & modify webhook message attachments (898ee56) #2646 Create forum channels with default layout (0720049) #2666 Switch channel to channel_id in interactions (d5ba7d2) #2670 Disable FEC in OPUS (2be9b00) [3.10.0] - 2023-03-27 Added #2507 Added selects v2 support (48fb1b5) #2509 Added SendFileAsync to UserExtensions (25cfb88) #2510 Added missing invite guild properties & welcome screen support (7c535b9) #2520 Added ClientDisconnect event for audio client. (4cad546) #2521 Added OwnerId to IThreadChannel and RestThreadChannel #2521 Added ActiveDeveloper to UserProperies #2523 Added emojis from Emoji 13.0, Emoji 13.1 and Emoji 14.0 (23b2822) #2528 Added wildcard length quantifiers and TreatAsRegex property #2530 Added application Role Connections Metadata support (37d868f) #2531 Added age restricted (NSFW) application commands support (56b1a93) #2537 Added RemoveModulesFromGuildAsync (7acbcfd) #2560 Added app Command channel target permission (2616d35) #2562 Added new message types & error codes (a3ee855) #2564 Added RespondWithModal() which accepts an IModal instance as template (e7bda0f) #2571 Added guild member flags (7d8d6ec) #2573 Added missing VoiceChannel properties (1e21a6e) #2574 Added GetCurrentUser method to DiscordRestClient (e3da96f) #2574 Added GetCurrentUserGuildMemberAsync method to DiscordRestClient and RestGuild (e3da96f) #2574 Added GuildFeatures property to IUserGuild (e3da96f) #2575 Added Thread property to RestMessage (91e2084) #2578 Added AutoMod support (673b02d) #2579 Added Thread property to IUserMessage (0998285) #2580 Added thread user member & thread members pagination (b085621) #2582 Added IIntegrationChannel (75f3c91) #2582 Added support for creating webhooks in forums (75f3c91) #2590 Added FollowAnnouncementChannelAsync to INewsChannel (bb056df) #2591 Added support for silent mentions (2ea8af1) #2599 Added AddModalCommand to ModalBuilder with option to specify callback (50e0e59) #2605 Added GuildFeatures to GuildProperties (177df2c) #2603 Added support for creating forum posts with DiscordWebhookClient (e69e27a) #2610 Added Text-In-Stage support & missing IVoiceChannel properties (76bb901) #2613 Added AutoMod custom block message (709364a) #2615 Added missing invite properties (abfa8d1) Fixed #2483 Fixed an NRE when event was changed from in channel to external or vice versa (493f604) #2526 Fixed GetActiveThreadsAsync & add it to ITextChannel (bd2f719) #2528 Fixed catastrophic backtracking (3b107c2) #2532 Fixed permissions on deleteMissing=false (274be5d) #2540 Fixed reason not being included in audit logs when calling AddBanAsync and BanAsync (e71faf7) #2541 Fixed CreatePost methods for IForumChannel (a53f1df) #2549 Fixed NullReferenceException caused by Options being undefined. (02d3ce6) #2557 Fixed customId template generator to escape regex metachars used in â€¦ (1602437) #2577 Fixed GetEventCoverImageUrl (0af835a) #2600 Fixed gateway deadlock (0c27395) #2606 Fixed AutoMod action executed event message being null (7b321af) Misc #2542 Resolve inconsistencies with components (f224eb0) #2546 Argument handling with thread tags(c67642a) #2551 Format the project with 'dotnet format' (257f246) #2561 Remove outdated checks (94996e7) #2572 Reduce DateTime Boilerplate from LogMessage (14b2901) #2614 Optimize Add/RemoveRolesAsync methods (11481a1) #2617 Update IP discovery to send 74 bytes (66e6329) [3.9.0] - 2022-12-23 Added #2469 Add missing properties in forum & thread channels (01ae904) #2501 Add new discord stuff (ed38635) #2521 Add missing property & new stuff (82b772a) #2520 Implemented ClientDisconnect event for audio client. (4cad546) #2509 Add SendFiles to UserExtensions ( 4cad546) #2528 Implement wildcard lenght quantifiers, TreatAsRegex property and solve catastrpohic backtracking (25cfb88) #2531 Add Age restricted (NSFW) application commands support (60956c7) Fixed #2500 Fix duplicated members of DiscordErrorCode (6712ef4) #2468 Fix TimestampTag being sadge (bc89d3c) #2497 Avoid throwing on missing Application (7077c44) #2485 Fixed an oversight clearing session data upon any disconnect. (c7ac59d) #2526 Fix GetActiveThreadsAsync & add it to ITextChannel (bd2f719) #2535 Fix deploy.yml (20d8fdf) Misc #2471 Update samples to use MessageContent intent & update v2 => v3 guide (a4d34f6) #2505 Update events.cs (ea039b8) #2467 Update license and icon nuspec props (11ed0ff) #2306 Command execution code rework & TypeConverters auto-scope fix (6869817) #2534 Fully qualify SlashCommandBuilder namespace ( 3b107c2) [3.8.1] - 2022-09-12 Added #2437 Added scheduled event types to AuditLog ActionTypes (fca9c6b) #2423 Added support for resume gateway url (d4c533a) Fixed #2443 Fixed typos of word length (adf012d) #2438 Fixed http query symbol in ModifyWebhookMessageAsync (0aa381d) #2444 Fixed BulkOverwriteCommands NRE (9feb703) #2417 Fixed CommandService RemoveModuleMethod not removing modules (fca9c6b) #2345 Fixed EmbedBuilder.Length NRE (11ece4b) #2453 Fixed NRE on SlashCommandBuilder.Build method (5073afa) #2457 Fixed typo in SlashCommandBuilder.AddNameLocalizationMethod (1b01fed) Misc #2462 Add additional checks for gateway event warnings (b45b152) #2448 Bump to Discord API V10 (fbc5ad4) #2451 Return a list instead of an array in GetModulePath and GetChoicePath methods (370bdfa) #2453 Update app commands regex and fix localization on app context commands (3dec99f) #2333 Update package logo (2b86a79) [3.8.0] - 2022-08-27 Added #2384 Added support for the WEBHOOKS_UPDATED event (010e8e8) #2370 Add async callbacks for IModuleBase (503fa75) #2367 Added DeleteMessagesAsync for TIV and added remaining rate limit in client log (f178660) #2379 Added Max/Min length fields for ApplicationCommandOption (e551431) #2369 Added support for using RespondWithModalAsync<IModal>() without prior IModal declaration (500e7b4) #2347 Added Embed field comparison operators (89a8ea1) #2359 Added support for creating lottie stickers (32b03c8) #2395 Added App Command localization support and ILocalizationManager to IF (39bbd29) Fixed #2425 Fix missing Fact attribute in ColorTests (92215b1) #2424 Fix IGuild.GetBansAsync() (b7b7964) #2416 Fix role icon & emoji assignment (b6b5e95) #2414 Fix NRE on RestCommandBase Data (02bc3b7) #2421 Fix placeholder length being hardcoded (8dfe19f) #2352 Fix issues related to the absence of bot scope (1eb42c6) #2346 Fix IGuild.DisconnectAsync(IUser) not disconnecting users (ba02416) #2404 Fix range of issues presented by 3rd party analyzer (902326d) #2409 Removes GroupContext from requirecontext (b0b8167) Misc #2366 Fixed typo in ChannelUpdatedEvent's documentation (cfd2662) #2408 Fix sharding sample throwing at appcommand registration (519deda) #2420 Fix broken code snippet in dependency injection docs (ddcf68a) #2430 Add a note about DontAutoRegisterAttribute (917118d) #2418 Update xmldocs to reflect the ConnectedUsers split (65b98f8) #2415 Adds missing DI entries in TOC (c49d483) #2407 Introduces high quality dependency injection documentation (6fdcf98) #2348 Added RequiredInput attribute to example in int.framework intro (ee6e0ad) #2385 Add ServerStarter.Host to deployment.md (06ed995) #2405 Add a note about IgnoreGroupNames to IF docs (cf25acd) #2356 Makes voice section about precompiled binaries more visible (e0d68d4 ) #2405 IF intro docs improvements (246282d) #2406 Labs deprecation & readme/docs edits (bf493ea) [3.7.2] - 2022-06-02 Added #2328 Add method overloads to InteractionService (0fad3e8) #2336 Add support for attachments on interaction response type 7 (35db22e) #2338 AddOptions no longer has an uneeded restriction, added AddOptions to SlashCommandOptionBuilder (3a37f89) Fixed #2342 Disable TIV restrictions for rollout of TIV (7adf516) [3.7.1] - 2022-05-27 Added #2325 Add missing interaction properties (d3a693a) #2330 Add better call control in ParseHttpInteraction (a890de9) Fixed #2329 Voice perms not retaining text perms. (712a4ae) #2331 NRE with Cacheable.DownloadAsync() (e1f9b76) [3.7.0] - 2022-05-24 Added #2269 Text-In-Voice (23656e8) #2281 Optional API calling to RestInteraction (a24dde4) #2283 Support FailIfNotExists on MessageReference (0ec8938) #2284 Add Parse & TryParse to EmbedBuilder & Add ToJsonString extension (cea59b5) #2289 Add UpdateAsync to SocketModal (b333de2) #2291 Webhook support for threads (b0a3b65) #2295 Add DefaultArchiveDuration to ITextChannel (1f01881) #2296 Add .With methods to ActionRowBuilder (13ccc7c) #2307 Add Nullable ComponentTypeConverter and TypeReader (6fbd396) #2316 Forum channels (7a07fd6) Fixed #2290 Possible NRE in Sanitize (20ffa64) #2293 Application commands are disabled to everyone except admins by default (b465d60) #2299 Close-stage bucketId being null (725d255) #2313 Upload file size limit being incorrectly calculated (54a5af7) #2319 Use IDiscordClient.GetUserAsync impl in DiscordSocketClient (f47f319) #2320 NRE with bot scope and user parameters (88f6168) [3.6.1] - 2022-04-30 Added #2272 add 50080 Error code (503e720) Fixed #2267 Permissions v2 Invalid Operation Exception (a8f6075) #2271 null user on interaction without bot scope (f2bb55e) #2274 Implement fix for Custom Id Segments NRE (0d74c5c) Misc 3.6.0 (27226f0) [3.6.0] - 2022-04-28 Added #2136 Passing CustomId matches into contexts (4ce1801) #2222 V2 Permissions (d98b3cc) Fixed #2260 Guarding against empty descriptions in SlashCommandBuilder/SlashCommandOptionBuilder (0554ac2) #2248 Fix SocketGuild not returning the AudioClient (daba58c) #2254 Fix browser property (275b833) [3.5.0] - 2022-04-05 Added #2204 Added config option for bidirectional formatting of usernames (e38104b) #2210 Add a way to remove type readers from the interaction/command service. (7339945) #2213 Add global interaction post execution event. (a744948) #2223 Add ban pagination support (d8757a5) #2201 Add missing interface methods to IComponentInteraction (741ed80) #2226 Add an action delegate parameter to RespondWithModalAsync<T>() for modifying the modal (d2118f0) #2227 Add RespondWithModal methods to RestInteractinModuleBase (1c680db) Fixed #2168 Fix Integration model from GuildIntegration and added INTEGRATION gateway events (305d7f9) #2187 Fix modal response failing (d656722) #2188 Fix serialization error on thread creation timestamp. (d48a7bd) #2209 Fix GuildPermissions.All not including newer permissions (91d8fab) #2219 Fix ShardedClients not pushing PresenceUpdates (c4131cf) #2225 Fix GuildMemberUpdated cacheable before entity being incorrect (bfd0d9b) #2217 Fix gateway interactions not running without bot scope. (8522447) Misc #2193 Update GuildMemberUpdated comment regarding presence (82473bc) #2206 Fixed typo (c286b99) #2216 Fix small typo in modal example (0439437) #2228 Correct minor typo (d1cf1bf) [3.4.1] - 2022-03-9 Added #2169 Component TypeConverters and CustomID TypeReaders (fb4250b) #2180 Attachment description and content type (765c0c5) #2162 Add configuration toggle to suppress Unknown dispatch warnings (1ba96d6) #2178 Add 10065 Error code (cc6918d) Fixed #2179 Logging out sharded client throws (24b7bb5) #2182 Thread owner always returns null (25aaa49) #2165 Fix error with flag params when uploading files. (a5d3add) #2181 Fix ambiguous reference for creating roles (f8ec3c7) [3.4.0] - 2022-3-2 Added #2146 Add FromDateTimeOffset in TimestampTag (553055b) #2062 Add return statement to precondition handling (3e52fab) #2131 Add support for sending Message Flags (1fb62de) #2137 Add self_video to VoiceState (8bcd3da) #2151 Add Image property to Guild Scheduled Events (1dc473c) #2152 Add missing json error codes (202554f) #2153 Add IsInvitable and CreatedAt to threads (6bf5818) #2155 Add Interaction Service Complex Parameters (9ba64f6) #2156 Add Display name support for enum type converter (c800674) Fixed #2117 Fix stream access exception when ratelimited (a1cfa41) #2128 Fix context menu comand message type (f601e9b) #2135 Fix NRE when ratelimmited requests don't return a body (b95b942) #2154 Fix usage of CacheMode.AllowDownload in channels (b3370c3) Misc #2149 Clarify Users property on SocketGuildChannel (5594739) #2157 Enforce valid button styles (507a18d) [3.3.2] - 2022-02-16 Fixed #2116 Fix null rest client in shards [3.3.1] - 2022-02-16 Added #2107 Add DisplayName property to IGuildUser. (abfba3c) Fixed #2110 Fix incorrect ratelimit handles for 429's (b2598d3) #2094 Fix ToString() on CommandInfo (01735c8) #2098 Fix channel being null in DMs on Interactions (7e1b8c9) #2100 Fix crosspost ratelimits (fad217e) #2108 Fix being unable to modify AllowedMentions with no embeds set. (169d54f) #2109 Fix unused creation of REST clients for DiscordShardedClient shards. (6039378) Misc #2099 Update interaction summaries (503d32a) [3.3.0] - 2022-02-09 Added #2087 Add modals (c8f175e) #2088 Add support for slash command attachment type (33efd89) Fixed #2091 Fix modifying attachments on interactions and extend the module base (97e54e1) #2076 Fix rest message components cannot pass through execute method (b45aebf) #2077 Fix clone being created on updated entity (7d6f4f3) #2092 Fix Current user null on reconnect (b424bb2) #2089 Fix guild feature enum (d142710) #2090 Fix attempts to fetch channels in interactions (6290f75) Misc #1713 Simplify code in DiscordComparers (43b20bc) #2079 Add IEnumerable collection parameters instead of arrays for MessageExtensions (75e94fe) [3.2.1] - 2022-01-30 Added #2055 Add IThreadUser interface (3475bd8) Fixed #2030 Fix logging a TaskCanceledException out of users control (82f3879) #2064 Fix markdown formatting in Glossary (f525131) #2066 Fix Channel Types Attribute (1917961) #2071 Fix attempt to get application info for non-bot tokens (37ada59) #2072 Fix thread member download on create (09eb9fa) #2063 Fix stream position not being zero when uploading files (6dada66) Misc #2059 Update HttpException to display inner-errors on the HttpException.Message for better debugging (5773b8e) [3.2.0] - 2022-01-15 Added #2015 Add user-built AddCommand overloads to ModuleBuilder (68e3bed) #2016 Add Construct Method to InteractionModuleBase and Fix NRE on User-Built Module Creation (4ed4718) #2035 Add GetChannelType extension method (64423a0) #2036 Add missing guild features (7075d4e) #2037 Add default ratelimit callback (4d9389b) #2038 Add AddRow and WithRows to ComponentBuilder (3429cf9) #2040 Add user locale & guild locale in interactions (2731e20) #2041 Add search methods to InteractionService (9a52d05) Fixed #1562 Fix OperationCancelledException and add IAsyncEnumerable to wait without thread blocking (cd36bb8) #2014 Fix InteractionContext.Guild (944a0de) #2023 Fix ModifyAsync when only modifying a message's flags (e3eb0a9) #2025 Fix IsTopLevelCommand returning the wrong value (4b7cda0) #2031 Fix DefaultChannel to exclude threads (a06ba9f) #2033 Fix Interaction delete original response throwing 404 (291d1e4) #2034 Fix exception when uploading files with non seekable streams (7f4feea) #2044 Fix ApplicationId not being used for interactions (c682564) #2045 Fix argument null exception on Message Create (a07531f) #2046 Fix ThreadMember null ref in constructor (bcd5fa4) Misc #2018 Match argument defaults with IDiscordInteraction on SocketInteraction (093e548) #2024 Remove .ToLower from group name registration (9594ccc) #2042 Move gateway intents warning to ready event (3633929) [3.1.0] - 2021-12-24 Added #1996 Add nullable type converter to Interaction service (ccc365e) #1998 Add before and after execute async (9f124b2) #2001 Add MaxUploadLimit to guilds (7745558) #2002 Add RTCRegion to voice channels (2a416a3) #2003 Add Guilduser timeouts and MODERATE_MEMBERS permission (144741e) Fixed #1976 fix guild scheduled events update (8daa0b6) #1977 fix thread member nre (5d43fe6) #1980 fix requireRole attribute of interaction service (a2f57f8) #1990 Fix images path for select menu section (a8b5506) #1992 fix images; fix closing brace on cs ref (fb52525) #1993 Fix CommandExecuted not invoked on failed parse (82bb3e4) #1995 Fixed file being disposed on upload (ad20e03) #1999 Fix SocketGuildUser being changed to SocketGlobalUser in UserLeft (5446bfe) Fix voice codes namespace (768a0a9) Misc #1994 Make HasResponded public and add it to IDiscordInteraction (1fbcbb8) #1997 Make module service scopes optional (cb1aad3) [3.0.0] - 2021-12-13 Added #1152 Add characters commonly use in links to Sanitize (b9274d1) #1518 Add default nullable enum typereader (f7a07ae) #1700 Added Implementation of ValidateAndGetBestMatch (3cd9f39) #1767 Add method to clear guild user cache (19a66bf) #1847 Bump API version to 9 (06a64b7) #1848 Remove obsolete sync voice regions methods and properties (ed8e573) #1851 Remove DM cache and fix references (7a201e9) #1860 Remove /users/@me call for socket and rework sharded client a bit (384ad85) #1863 Change GuildMemberUpdate before state to cacheable (c2e87f5) #1666 Added negative TimeSpan handling (6abdfcb) #1861 Add MaxBitrate to the interface (e0dbe7c) #1865 Add null check to AllowedMentions.ToModel() (3cb662f) #1879 Add Name property to Teams (c5b4b64) #1890 Add default avatar to WithAuthor extension (c200861) #1896 IVoiceChannel implements IMentionable (3395700) #1923 Add Interaction Support (933ea42) #1923 Add Application commands (933ea42) #1923 Add Message Components (933ea42) #1923 Add Thread Channels (933ea42) #1923 Add Stage Channels (933ea42) #1923 Add Guild Events (933ea42) #1923 Revamped Stickers (933ea42) #1923 Add TimestampTag (933ea42) #1923 Add name property to teams (933ea42) #1923 Add url validation on embeds (933ea42) #1923 Add NsfwLevel to Guilds (933ea42) #1923 Add helpers to Emoji for parsing (933ea42) #1923 Add banner and accent color to guild users (933ea42) #1923 Add RatelimitCallback to RequestOptions (933ea42) #1923 Add Emoji to roles (933ea42) #1923 Add UseInteractionSnowflakeDate to config (933ea42) #1923 Add checks for gateway intent in some methods (933ea42) #1923 Add SendFilesAsync to channels (933ea42) #1923 Add Attachments property to MessageProperties (933ea42) #1942 Add multi-file upload to webhooks (bc440ab) #1943 Handle bidirectional usernames (10afd96) #1945 Updated socket presence and add new presence event (9d6dc62) #1948 Added warnings on invalid gateway intents (51e06e9) #1949 Add default application games (82276e3) #1950 Add custom setter to Group property of ModuleBuilder to automatically invoke AddAliases (ba656e9) #1958 Add Discord.Interactions framework (aa6bb5e) Fixed #1832 Grab correct Uses value for vanity urls (8ed8714) #1849 Remove obsolete methods and properties (70aab6c) #1850 Create DM channel with id and author alone (95bae78) #1853 Fire GuildMemberUpdated without cached user (d176fef) #1854 Gateway events for DMs (a7ff6ce) #1858 MessageUpdated without author (8b29e0f) #1859 Fix missing AddRef and related (de7f9b5) #1862 Message update without author (fabe034) #1864 ApiClient.CurrentUser being null (08507c0) #1871 Fix empty role list if not present (f47001a) #1872 Connection deadlock when trying to Send and Disconnect (97d90b9) #1873 Remove OperationCanceledException handling in connecting logic (7cf8499) #1876 Fix SocketMessage type always being default (ac52a11) #1877 Fix RestMessage type always being default (22bb1b0) #1886 Change embed description max length to 4096 (8349cd7) #1923 Fix ReactionAdded cached parameters (933ea42) #1923 Fixed GuildMemberUpdated cached parameters (933ea42) #1923 Fixed UserIsTypeing cached parameters (933ea42) #1941 Fix Emote.TryParse (900c1f4) #1946 Fix NRE when adding parameters in ModuleBuilders (143ca6d) #1947 ShardedClient's CurrentUser interface property being null (d5f5ae1) Misc #1852 Internal change to GetOrCreateUser (dfaaa21) #1923 Make Hierarchy a IGuildUser property (933ea42) #1923 Fixed gateway serialization to include nulls for API v9 (933ea42) #1923 Removed error log for gateway reconnects (933ea42) [2.4.0] - 2021-05-22 Added #1726 Add stickers (91a9063) #1753 Webhook message edit & delete functionality (f67cd8e) #1757 Add ability to add/remove roles by id (4c9910c) #1781 Add GetEmotesAsync to IGuild (df23d57) #1801 Add missing property to MESSAGE_REACTION_ADD event (0715d7d) #1828 Add methods to interact with reactions without a message object (5b244f2) #1830 Add ModifyMessageAsync to IMessageChannel (365a848) #1844 Add Discord Certified Moderator user flag (4b8d444) Fixed #1486 Add type reader when entity type reader exists (c46daaa) #1835 Cached message emoji cleanup at MESSAGE_REACTION_REMOVE_EMOJI (8afef82) Misc #1778 Remove URI check from EmbedBuilder (25b04c4) #1800 Fix spelling in SnowflakeUtils.FromSnowflake (6aff419) [2.3.1] - 2021-03-10 Fixed #1761 Deadlock in DiscordShardedClient when Ready is never received (73e5cc2) #1773 Private methods aren't added as commands (0fc713a) #1780 NullReferenceException in pin/unpin audit logs (f794163) #1786 Add ChannelType property to ChannelInfo audit log (6ac5ea1) #1791 Update Webhook ChannelId from model change (d2518db) #1794 Audit log UserId can be null (d41aeee) Misc #1774 Add remark regarding CustomStatus as the activity (51b7afe) [2.3.0] - 2021-01-28 Added #1491 Add INVITE_CREATE and INVITE_DELETE events (1ab670b) #1520 Support reading multiple activities (421a0c1) #1521 Allow for inherited commands in modules (a51cdf6) #1526 Add Direction.Around to GetMessagesAsync (f2130f8) #1537 Implement gateway ratelimit (ec673e1) #1544 Add MESSAGE_REACTION_REMOVE_EMOJI and RemoveAllReactionsForEmoteAsync (a89f076) #1549 Add GetUsersAsync to SocketGuild (30b5a83) #1566 Support Gateway Intents (d5d10d3) #1573 Add missing properties to Guild and deprecate GuildEmbed (ec212b1) #1581 Add includeRoleIds to PruneUsersAsync (a80e5ff) #1588 Add GetStreams to AudioClient (1e012ac) #1596 Add missing channel properties (2d80037) #1604 Add missing application properties (including Teams) (10fcde0) #1619 Add \"View Guild Insights\" to GuildPermission (2592264) #1637 Added CultureInvariant RegexOption to WebhookUrlRegex (e3925a7) #1659 Add inline replies (e3850e1) #1688 Send presence on Identify payload (25d5d36) #1721 Add role tags (6a62c47) #1722 Add user public flags (c683b29) #1724 Add MessageFlags and AllowedMentions to message modify (225550d) #1731 Add GuildUser IsPending property (8b25c9b) #1690 Add max bitrate value to SocketGuild (aacfea0) Fixed #1244 Missing AddReactions permission for DM channels. (e40ca4a) #1469 unsupported property causes an exception (468f826) #1525 AllowedMentions and AllowedMentionTypes (3325031) #1531 Add AllowedMentions to SendFileAsync (ab32607) #1532 GuildEmbed.ChannelId as nullable per API documentation (971d519) #1546 Different ratelimits for the same route (implement discord buckets) (2f6c017) #1548 Incomplete Ready, DownloadUsersAsync, and optimize AlwaysDownloadUsers (dc8c959) #1555 InvalidOperationException at MESSAGE_CREATE (bd4672a) #1557 Sending 2 requests instead of 1 to create a Guild role. (5430cc8) #1571 Not using the new domain name. (df8a0f7) #1578 Trim token before passing it to the authorization header (42ba372) #1580 Stop TaskCanceledException from bubbling up (b8fa464) #1599 Invite audit log without inviter (b95b95b) #1602 Add AllowedMentions to webhooks (bd4516b) #1603 Cancel reconnection when 4014 (f396cd9) #1608 Voice overwrites and CategoryId remarks (43c8fc0) #1614 Check error 404 and return null for GetBanAsync (ae9fff6) #1621 Parse mentions from message payload (366ca9a) #1622 Do not update overwrite cache locally (3860da0) #1623 Invoke UserUpdated from GuildMemberUpdated if needed (3085e88) #1624 Handle null PreferredLocale in rare cases (c1d04b4) #1639 Invite and InviteMetadata properties (dd2e524) #1642 Add missing permissions (4b389f3) #1647 handicap member downloading for verified bots (fa5ef5e) #1652 Update README.MD to reflect new discord domain (03b831e) #1667 Audio stream dispose (a2af985) #1671 Crosspost throwing InvalidOperationException (9134443) #1672 Team is nullable, not optional (be60d81) #1681 Emoji url encode (04389a4) #1683 SocketGuild.HasAllMembers is false if a user left a guild (47f571e) #1686 Revert PremiumSubscriptionCount type (97e71cd) #1695 Possible NullReferenceException when receiving InvalidSession (5213916) #1702 Rollback Activities to Game (9d7cb39) #1727 Move and fix internal AllowedMentions object (4a7f8fe) limit request members batch size (084db25) UserMentions throwing NullRef (5ed01a3) Wrong author for SocketUserMessage.ReferencedMessage (1e9b252) Discord sends null when there's no team (05a1f0a) IMessage.Embeds docs remarks (a4d32d3) Missing MessageReference when sending files (2095701) Misc #1545 MutualGuilds optimization (323a677) #1551 Update webhook regex to support discord.com (7585789) #1556 Add SearchUsersAsync (57880de) #1561 Minor refactor to switch expression (42826df) #1576 Updating comments for privileged intents (c42bfa6) #1678 Change ratelimit messages (47ed806) #1714 Update summary of SocketVoiceChannel.Users (e385c40) #1720 VoiceRegions and related changes (5934c79) Add updated libraries for LastModified (d761846) Add alternative documentation link (accd351) Temporarily disable StyleCops until all the fixes are impl'd (36de7b2) Remove redundant CreateGuildRoleParams (3df0539) Add minor tweaks to DiscordSocketConfig docs strings (2cd1880) Fix MaxWaitBetweenGuildAvailablesBeforeReady docs string (e31cdc7) Missing summary tag for GatewayIntents (3a10018) Add new method of role ID copy (857ef77) Resolve inheritdocs for IAttachment (9ea3291) Mark null as a specific langword in summary (13a41f8) Cleanup GatewayReconnectException docs (833ee42) Update Docfx.Plugins.LastModified to v1.2.4 (28a6f97) Update framework version for tests to Core 3.1 to comply with LTS (4988a07) Move bulk deletes remarks from to (62539f0) [2.2.0] - 2020-04-16 Added #1247 Implement Client Status Support (9da11b4) #1310 id overload for RemoveReactionAsync (c88b1da) #1319 BOOST (faf23de) #1326 Added a Rest property to DiscordShardedClient (9fede34) #1348 Add Quote Formatting (265da99) #1354 Add support for setting X-RateLimit-Precision (9482204) #1355 Provide ParameterInfo with error ParseResult (3755a02) #1357 add the \"Stream\" permission. (b00da3d) #1358 Add ChannelFollowAdd MessageType (794eba5) #1369 Add SelfStream voice state property (9bb08c9) #1372 support X-RateLimit-Reset-After (7b9029d) #1373 update audit log models (c54867f) #1377 Support filtering audit log entries on user, action type, and before entry id (68eb71c) #1386 support guild subscription opt-out (0d54207) #1387 #1381 Guild PreferredLocale support (a61adb0) #1406 CustomStatusGame Activity (79a0ea9) #1413 Implemented Message Reference Property (f86c39d) #1414 add StartedAt, EndsAt, Elapsed and Remaining to SpotifyGame. (2bba324) #1432 Add ability to modify the banner for guilds (d734ce0) suppress messages (cd28892) Fixed #1318 #1314 Don't parse tags within code blocks (c977f2e) #1333 Remove null coalescing on ToEmbedBuilder Color (120c0f7) #1337 Fixed attempting to access a non-present optional value (4edda5b) #1346 CommandExecuted event will fire when a parameter precondition fails like what happens when standard precondition fails. (e8cb031) #1371 Fix keys of guild update audit (b0a595b) #1375 Use double precision for X-Reset-After, set CultureInfo when parsing numeric types (606dac3) #1392 patch todo in NamedTypeReader (0bda8a4) #1405 add .NET Standard 2.1 support for Color (7f0c0c9) #1412 GetUsersAsync to use MaxUsersPerBatch const as limit instead of MaxMessagesPerBatch. (5439cba) #1416 false-positive detection of CustomStatusGame based on Id property (a484651) #1418 #1335 Add isMentionable parameter to CreateRoleAsync in non-breaking manner (1c63fd4) #1421 (3ff4e3d) include MessageFlags and SuppressEmbedParams (d6d4429) Changed #1368 Update ISystemMessage interface to allow reactions (07f4d5f) #1417 fix #1415 Re-add support for overwrite permissions for news channels (e627f07) use millisecond precision by default (bcb3534) Misc #1290 Split Unit and Integration tests into separate projects (a797be9) #1328 Fix #1327 Color.ToString returns wrong value (1e8aa08) #1329 Fix invalid cref values in docs (363d1c6) #1330 Fix spelling mistake in ExclusiveBulkDelete warning (c864f48) #1331 Change token explanation (0484fe8) #1349 Fixed a spelling error. (af79ed5) #1353 [ci skip] Removed duplicate \"any\" from the readme (15b2a36) #1359 Fixing GatewayEncoding comment (52565ed) #1379 September 2019 Documentation Update (fd3810e) #1382 Fix .NET Core 3.0 compatibility + Drop NS1.3 (d199d93) #1388 fix coercion error with DateTime/Offset (3d39704) #1393 Utilize ValueTuples (99d7135) #1400 Fix #1394 Misworded doc for command params args (1c6ee72) #1401 Fix package publishing in azure pipelines (a08d529) #1402 Fix packaging (65223a6) #1403 Cache regex instances in MessageHelper (007b011) #1424 Fix the Comparer descriptions not linking the type (911523d) #1426 Fix incorrect and missing colour values for Color fields (9ede6b9) #1470 Added System.Linq reference (adf823c) temporary sanity checking in SocketGuild (c870e67) build and deploy docs automatically (2981d6b) 2.2.0 (4b602b4) target the Process env-var scope (3c6b376) fix metapackage build (1794f95) copy only _site to docs-static (a8cdadc) do not exit on failed robocopy (fd204ee) add idn debugger (91aec9f) rename IsStream to IsStreaming (dcd9cdd) feature (40844b9) [2.1.1] - 2019-06-08 Fixed #994: Remainder parameters now ignore character escaping, as there is no reason to escape characters here (2e95c49) #1316: Emote.Equals now pays no respect to the Name property, since Discord's API does not care about an emote's name (abf3e90) #1317: Emote.GetHashCode now pays no respect to the Name property, see above (1b54883) #1323: Optionals will no longer claim to be specified when a reaction message was not cached (1cc5d73) Log messages sourcing from REST events will no longer be raised twice (c78a679) News embeds will be processed as EmbedType.Unknown, rather than throwing an error and dropping the message (d287ed1) Changed #1311: Members may now be disconnected from voice channels by passing null as GuildUserProperties.Channel (fc48c66) #1313: IMessage.Tags now includes the EveryoneRole on @everyone and @here mentions (1f55f01) #1320: The maximum value for setting slow-mode has been updated to 6 hours, per the new API limit (4433ca7) Misc This library's compatibility with Semantic Versioning has been clarified. Please see the README (4d7de17) The depency on System.Interactive.Async has been bumped to 3.2.0 (3e65e03) [2.1.0] - 2019-05-18 Added #1236: Bulk deletes (for messages) may now be accessed via the MessagesBulkDeleted event (dec353e) #1240: OAuth applications utilizing the guilds.join scope may now add users to guilds through any client (1356ea9) #1255: Message and attachment spoilers may now be set or detected (f3b20b2) #1260: DiscordWebhookClient may be created from a Webhook URL (f2113c7) #1261: A GetCategoryChannel helper may now be used to retrieve category channels directly from socket guilds (e03c527) #1263: \"user joined the guild\" messages are now supported (00d3f5a) #1271: AuthorID may now be retrieved from message delete audit log entries (1ae4220) #1293: News Channels are now supported 📰 (9084c42) ExclusiveBulkDelete configuration setting can be used to control bulk delete event behavior (03e6401) Removed #1294: The IGuildUser overload of EmbedBuilder.WithAuthor no longer exists (b52b54d) Fixed #1256: Fetching audit logs no longer raises null reference exceptions when a webhook has been deleted (049b014) #1268: Null reference exceptions on MESSAGE_CREATE concerning partial member objects no longer occur (377622b) #1278: The token validator now internally pads tokens to the proper length (48b327b) #1292: Messages now properly initialize empty collections (b2ebc03) The DiscordSocketRestClient is now properly initialized (a44c13a) Exceptions in event handlers are now always logged (f6e3200) Changed #1305: Token validation will fail when tokens contain whitespace (bb61efa) Misc #1241: Added documentation samples for Webhooks (655a006) #1243: Happy new year 🎉 (0275f7d) #1257: Improved clarity in comments in the command samples (2473619) #1276: Documentation uses a relative path for the logo asset (b80f0e8) #1303: EmbedBuilder documentation now builds in the correct spot (51618e6) #1304: Updated documentation (4309550) CI for this project is now powered by Azure DevOps (this is not a sponsored message 🚀) (9b2bc18) IDisposableAnalyzers should now be a development dependency (8003ac8) [2.0.1] - 2019-01-04 Fixed #1226: Only escape the closing quotation mark of non-remainder strings (65b8c09) Commands with async RunModes will now propagate exceptions up to CommandExecuted (497918e) Misc #1225: Commands sample no longer hooks the log event twice (552f34c) #1227: The logo on the docs index page should scale responsively (d39bf6e) #1230: Replaced precondition sample on docs (feed4fd) [2.0.0] - 2018-12-28 Added #747: CommandService now has a CommandExecuted event (e991715) #765: Parameters may have a name specified via NameAttribute (9c81ab9) #773: Both socket clients inherit from BaseSocketClient (9b7afec) #785: Primitives now automatically load a NullableTypeReader (cb0ff78) #819: Support for Welcome Message channels (30e867a) #835: Emoji may now be managed from a bot (b4bf046) #843: Webhooks may now be managed from a bot (7b2ddd0) #863: An embed may be converted to an EmbedBuilder using the .ToEmbedBuilder() method (5218e6b) #877: Support for reading rich presences (34b4e5a) #888: Users may now opt-in to using a proxy (678a723) #906: API Analyzers to assist users when writing their bot (f69ef2a) #907: Full support for channel categories (030422f) #913: Animated emoji may be read and written (a19ff18) #915: Unused parameters may be discarded, rather than failing the command (5f46aef) #929: Standard EqualityComparers for use in LINQ operations with the library's entities (b5e7548) #934: Modules now contain an OnModuleBuilding method, which is invoked when the module is built (bb8ebc1) #952: Added 'All' permission set for categories (6d58796) #957: Ratelimit related objects now include request information (500f5f4) #962: Add GetRecommendedShardCountAsync (fc5e70c) #970: Add Spotify track support to user Activities (64b9cc7) #973: Added GetDefaultAvatarUrl to user (109f663) #978: Embeds can be attached alongside a file upload (e9f9b48) #984, #1089: VoiceServerUpdate events are now publically accessible (e775853, 48fed06) #996: Added DeleteMessageAsync to IMessageChannel (bc6009e) #1005: Added dedicated TimeSpan TypeReader which \"doesn't suck\" (b52af7a) #1009: Users can now specify the replacement behavior or default typereaders (6b7c6e9) #1020: Users can now specify parameters when creating channels (bf5275e) #1030: Added IsDeprecated, IsCustom properties to VoiceRegion (510f474) #1037: Added SocketUser.MutualGuilds, various extension methods to commands (637d9fc) #1043: Discord.Color is now compatible with System.Drawing.Color (c275e57) #1055: Added audit logs (39dffe8) #1056: Added GetBanAsync (97c8931) #1102: Added GetJumpUrl() to messages (afc3a9d) #1123: Commands can now accept named parameters (419c0a5) #1124: Preconditions can now set custom error messages (5677f23) #1126: Color now has equality (a2d8800) #1159: Guild channels can now by synced with their parent category (5ea1fb3) #1165: Bring Guild and Message models up to date with the API (d30d122) #1166: Added GetVoiceRegionsAsync to IGuild (00717cf) #1183: Added Add Guild Member endpoint for OAuth clients (8ef5f81) #1196: Channel position can now be specified when creating a channel (a64ab60) #1198: The Socket client can now access its underlying REST client (65afd37) #1213: Added GuildEmote#CreatorId (92bf836) 'html' variant added to the EmbedType enum (42c879c) Modules can now be nested in non-module classes (4edbd8d) Added BanAsync to guild members (1905fde) Added the permisison bit for priority speaker (c1d7818) All result types can use FromError (748e92b) Added support for reading/writing slow mode (97d17cf) Added markdown format for URLs (f005af3) Reactions can now be added to messages in bulk (5421df1) Fixed #742: DiscordShardedClient#GetGuildFor will now direct null guilds to Shard 0 (d5e9d6f) #743: Various issues with permissions and inheritance of permissions (f996338) #755: IRole.Mention will correctly tag the @everyone role (6b5a6e7) #768: CreateGuildAsync will include the icon stream (865080a) #866: Revised permissions constants and behavior (dec7cb2) #872: Bulk message deletion should no longer fail for incomplete batch sizes (804d918) #923: A null value should properly reset a user's nickname (227f61a) #938: The reconnect handler should no longer deadlock during Discord outages (73ac9d7) #941: Fix behavior of OverrideTypeReader (170a2e0) #945: Fix properties on SocketCategoryChannel (810f6d6) #959: Webhooks now use the correct parameter when assigning to the Avatar URL (8876597) #966: Correct the implementation of HasFlag and ResolveChannel in permissions (32ebdd5) #968: Add missing parameter in WebSocket4Net constructor (8537924) #981: Enforce a maximum value when parsing timestamps from Discord (bfaa6fc) #993: Null content will no longer null-ref on message sends/edits (55299ff) #1003: Fixed ordering of parameters in permissions classes (a06e212) #1010: EmbedBuilder no longer produces mutable embeds (2988b38) #1012: Embed.Length should now yield the correct results (a3ce80c) #1017: GetReactionUsersAsync includes query parameters (9b29c00) #1022: GetReactionUsersAsync is now correctly paginated (79811d0) #1023: Fix/update invite-related behaviors (7022149) #1031: Messages with no guild-specific data should no longer be lost (3631886) #1036: Fixed cases where RetryMode.RetryRatelimit were ignored (c618cb3) #1044: Populate the guild in SocketWebhookUser (6a7810b) #1048: The REST client will now create a full GuildUser object (033d312) #1049: Fixed null-ref in GetShardIdFor (7cfed7f) #1059: Include 'view channel' in voice channel's All permissions set (e764daf) #1083: Default type readers will now be properly replaced (4bc06a0) #1093: Fixed race condition in audio client authentication (322d46e) #1139: Fixed consistency in exceptions (9e9a11d) #1151: GetReactionUsersAsync now uses the correct pagination constant (c898325) #1163: Reaction ratelimits are now placed in the same bucket, treated correctly (5ea1fb3) #1186: Webhooks can now send files with embeds correctly (c1d5152) #1192: CommandExecuted no longer fires twice for RuntimeResults (10233f3) #1195: Channel Create audit log events properly deserialize (dca6c33) #1202: The UDP client should no longer be used after disposed (ccb16e4) #1203: The Audio client should no longer lock up on disconnect (2c93363) #1209: MessageUpdated should no longer pass a null after object (91e0f03) Ignore messages with no ID in bulk delete (676be40) No longer attempt to load generic types as modules (b1eaa44) No longer complain when a PRESENCES_REPLACE update is received (beb3d46) CommandExecuted will be raised on async exception failures (6260749) ExecuteResult now contains the entire exception, not an abridged message (f549da5) CommandExecuted will no longer be raised twice for exceptions (aec7105) The default WebSocket will now close correctly (ac389f5) Changed #731: IUserMessage#GetReactionUsersAsync now takes an IEmote instead of a string (5d7f2fc) #744: IAsyncEnumerable has been redesigned (5bbd9bb) #777: IGuild#DefaultChannel will now resolve the first accessible channel, per changes to Discord (1ffcd4b) #781: Attempting to add or remove a member's EveryoneRole will throw (506a6c9) #801: EmbedBuilder will no longer implicitly convert to Embed, you must build manually (94f7dd2) #804: Command-related tasks will have the 'async' suffix (14fbe40) #812: The WebSocket4Net provider has been bumped to version 0.15, allowing support for .NET Standard apps (e25054b) #829: DeleteMessagesAsync moved from IMessageChannel to ITextChannel (e00f17f) #853: WebSocket will now use zlib-stream compression (759db34) #874: The ReadMessages permission is moving to ViewChannel (edfbd05) #877: Refactored Games into Activities (34b4e5a) #943: Multiple types of quotation marks can now be parsed (thanks 🍎) (cee71ef) #955: The GameParty model will now use long values (178ea8d) #986: Expose the internal entity TypeReaders (660fec0) #992: Throw an exception when trying to modify someone else's message (d50fc3b) #998: Commands can specify their own IgnoreExtraArgs behavior (6d30100) #1033: The ReadMessages permission bit is now named ViewChannel (5f084ad) #1042: Content parameter of SendMessageAsync is now optional (0ba8b06) #1057: An audio channel's ConnectAsync now allows users to handle the voice connection elsewhere, such as in Lavalink (890904f) #1094: Overhauled invites, added vanity invite support (ffe994a) #1108: Reactions now use the undocumented 1/.25 ratelimit, making them 4x faster (6b21b11) #1128: Bot tokens will now be validated for common mishaps before use (2de6cef) #1140: Check the invite maxAge parameter before making the request (649a779) #1164: All command results will now be raised in CommandExecuted (10f67a8) #1171: Clients have been changed to properly make use of IDisposable (7366cd4) #1172: Invite related methods were moved from IGuildChannel to INestedChannel (a3f5e0b) #1200: HasPrefix extensions now check for null values first (46e2674) IGuildChannel#Nsfw moved to ITextChannel, now maps to the API property (608bc35) Preemptive ratelimits are now logged under verbose, rather than warning. (3c1e766) The default InviteAge when creating Invites is now 24 hours (9979a02) All parameters to ReplyAsync have been made optional (b38dca7) The socket client will now use additional fields to fill in member/guild information on messages (8fb2c71) The Audio Client now uses Voice WS v3 (9ba38d7) Removed #790: Redundant overloads for AddField removed from EmbedBuilder (479361b) #925: RPC is no longer being maintained nor packaged (b30af57) #958: Remove support for user tokens (2fd4f56) User logins (including selfbots) are no longer supported (fc5adca) Misc #786: Unit tests for the Color structure (22b969c) #828: We now include a contributing guide (cd82a0f) #876: We now include a standard editorconfig (5c8c784) #963: Docs now include a release version, build instructions (88e6244) #964: Fix documentation spelling of 'echoes' (fda19b5) #967: Unit test permissions (63e6704) #968: Bumped version of WebSocket4Net to 0.15.2 (8537924) #972: Include sample bots in the source repository (217ec34) #1046: We now support .NET Standard 2.0 (bbbac85) #1114: Various performance optimizations (82cfdff) #1149: The CI will now test on Ubuntu as well as Windows (674a0fc) #1161: The entire documentation has been rewritten, all core entities were docstringed (ff0fea9) #1175: Documentation changes in command samples (fb8dbca) #1177: Added documentation for sharded bots (00097d3) #1219: The project now has a logo! 🎉 (5750c3e) This project is now licensed to the Discord.Net contributors (710e182) Added templates for pull requests (f2ddf51) Fixed documentation layout for the logo (bafdce4) [1.0.2] - 2017-09-09 Fixed Guilds utilizing Channel Categories will no longer crash bots on the READY event. [1.0.1] - 2017-07-05 Fixed #732: Fixed parameter preconditions not being loaded from class-based modules (b6dcc9e) #726: Fixed CalculateScore throwing an ArgumentException for missing parameters (7597cf5) EmbedBuilder URI validation should no longer throw NullReferenceExceptions in certain edge cases (d89804d) Fixed module auto-detection for nested modules (d2afb06) Changed ShardedCommandContext now inherits from SocketCommandContext (8cd99be)"
  },
  "api/Discord.ActionRowBuilder.html": {
    "href": "api/Discord.ActionRowBuilder.html",
    "title": "Class ActionRowBuilder | Discord.Net Documentation",
    "keywords": "Class ActionRowBuilder Namespace Discord Assembly Discord.Net.Core.dll Represents a class used to build Action rows. public class ActionRowBuilder Inheritance object ActionRowBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields MaxChildCount The max amount of child components this row can hold. public const int MaxChildCount = 5 Field Value int Properties Components Gets or sets the components inside this row. public List<IMessageComponent> Components { get; set; } Property Value List<IMessageComponent> Exceptions ArgumentNullException Components cannot be null. ArgumentException Components count exceeds MaxChildCount. Methods AddComponent(IMessageComponent) Adds a component at the end of the current row. public ActionRowBuilder AddComponent(IMessageComponent component) Parameters component IMessageComponent The component to add. Returns ActionRowBuilder The current builder. Exceptions InvalidOperationException Components count reached MaxChildCount Build() Builds the current builder to a ActionRowComponent that can be used within a ComponentBuilder public ActionRowComponent Build() Returns ActionRowComponent A ActionRowComponent that can be used within a ComponentBuilder WithButton(ButtonBuilder) Adds a ButtonBuilder to the ActionRowBuilder. public ActionRowBuilder WithButton(ButtonBuilder button) Parameters button ButtonBuilder The button to add. Returns ActionRowBuilder The current builder. Exceptions InvalidOperationException Components count reached MaxChildCount. InvalidOperationException A button cannot be added to a row with a SelectMenu. WithButton(string, string, ButtonStyle, IEmote, string, bool) Adds a ButtonBuilder with specified parameters to the ActionRowBuilder. public ActionRowBuilder WithButton(string label = null, string customId = null, ButtonStyle style = ButtonStyle.Primary, IEmote emote = null, string url = null, bool disabled = false) Parameters label string The label text for the newly added button. customId string The custom id of the newly added button. style ButtonStyle The style of this newly added button. emote IEmote A IEmote to be used with this button. url string A URL to be used only if the ButtonStyle is a Link. disabled bool Whether or not the newly created button is disabled. Returns ActionRowBuilder The current builder. WithComponents(List<IMessageComponent>) Adds a list of components to the current row. public ActionRowBuilder WithComponents(List<IMessageComponent> components) Parameters components List<IMessageComponent> The list of components to add. Returns ActionRowBuilder The current builder. Exceptions ArgumentNullException Components cannot be null. ArgumentException Components count exceeds MaxChildCount. WithSelectMenu(SelectMenuBuilder) Adds a SelectMenuBuilder to the ActionRowBuilder. public ActionRowBuilder WithSelectMenu(SelectMenuBuilder menu) Parameters menu SelectMenuBuilder The menu to add. Returns ActionRowBuilder The current builder. Exceptions InvalidOperationException A Select Menu cannot exist in a pre-occupied ActionRow. WithSelectMenu(string, List<SelectMenuOptionBuilder>, string, int, int, bool, ComponentType, ChannelType[]) Adds a SelectMenuBuilder to the ActionRowBuilder. public ActionRowBuilder WithSelectMenu(string customId, List<SelectMenuOptionBuilder> options = null, string placeholder = null, int minValues = 1, int maxValues = 1, bool disabled = false, ComponentType type = ComponentType.SelectMenu, ChannelType[] channelTypes = null) Parameters customId string The custom id of the menu. options List<SelectMenuOptionBuilder> The options of the menu. placeholder string The placeholder of the menu. minValues int The min values of the placeholder. maxValues int The max values of the placeholder. disabled bool Whether or not the menu is disabled. type ComponentType The type of the select menu. channelTypes ChannelType[] Menus valid channel types (only for ChannelSelect) Returns ActionRowBuilder The current builder."
  },
  "api/Discord.ActionRowComponent.html": {
    "href": "api/Discord.ActionRowComponent.html",
    "title": "Class ActionRowComponent | Discord.Net Documentation",
    "keywords": "Class ActionRowComponent Namespace Discord Assembly Discord.Net.Core.dll Represents a IMessageComponent Row for child components to live in. public class ActionRowComponent : IMessageComponent Inheritance object ActionRowComponent Implements IMessageComponent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Components Gets the child components in this row. public IReadOnlyCollection<IMessageComponent> Components { get; } Property Value IReadOnlyCollection<IMessageComponent> Type Gets the ComponentType of this Message Component. public ComponentType Type { get; } Property Value ComponentType"
  },
  "api/Discord.ActionType.html": {
    "href": "api/Discord.ActionType.html",
    "title": "Enum ActionType | Discord.Net Documentation",
    "keywords": "Enum ActionType Namespace Discord Assembly Discord.Net.Core.dll Representing a type of action within an IAuditLogEntry. public enum ActionType Fields ApplicationCommandPermissionUpdate = 121 Permissions were updated for a command. AutoModerationBlockMessage = 143 Message was blocked by Auto Moderation. AutoModerationFlagToChannel = 144 Message was flagged by Auto Moderation. AutoModerationRuleCreate = 140 Auto Moderation rule was created. AutoModerationRuleDelete = 142 Auto Moderation rule was deleted. AutoModerationRuleUpdate = 141 Auto Moderation rule was updated. AutoModerationUserCommunicationDisabled = 145 Member was timed out by Auto Moderation. Ban = 22 A user banned another user from this guild. BotAdded = 28 A bot was added to this guild. ChannelCreated = 10 A channel was created. ChannelDeleted = 12 A channel was deleted. ChannelUpdated = 11 A channel was updated. EmojiCreated = 60 An emoji was created in this guild. EmojiDeleted = 62 An emoji was deleted from this guild. EmojiUpdated = 61 An emoji was updated in this guild. EventCreate = 100 A scheduled event was created. EventDelete = 102 A scheduled event was created. EventUpdate = 101 A scheduled event was created. GuildUpdated = 1 this guild was updated. IntegrationCreated = 80 A integration was created IntegrationDeleted = 82 An integration was deleted IntegrationUpdated = 81 A integration was updated InviteCreated = 40 An invite was created in this guild. InviteDeleted = 42 An invite was deleted from this guild. InviteUpdated = 41 An invite was updated in this guild. Kick = 20 A user was kicked from this guild. MemberDisconnected = 27 A guild member disconnected from a voice channel. MemberMoved = 26 A guild member moved to a voice channel. MemberRoleUpdated = 25 A guild member's role collection was updated. MemberUpdated = 24 A guild member whose information was updated. MessageBulkDeleted = 73 Multiple messages were deleted from this guild. MessageDeleted = 72 A message was deleted from this guild. MessagePinned = 74 A message was pinned from this guild. MessageUnpinned = 75 A message was unpinned from this guild. OnboardingQuestionCreated = 163 Guild Onboarding Question was created. OnboardingQuestionUpdated = 164 Guild Onboarding Question was updated. OnboardingUpdated = 167 Guild Onboarding was updated. OverwriteCreated = 13 A permission overwrite was created for a channel. OverwriteDeleted = 15 A permission overwrite was deleted for a channel. OverwriteUpdated = 14 A permission overwrite was updated for a channel. Prune = 21 A prune took place in this guild. RoleCreated = 30 A role was created in this guild. RoleDeleted = 32 A role was deleted from this guild. RoleUpdated = 31 A role was updated in this guild. StageInstanceCreated = 83 A stage instance was created. StageInstanceDeleted = 85 A stage instance was deleted. StageInstanceUpdated = 84 A stage instance was updated. StickerCreated = 90 A sticker was created. StickerDeleted = 92 A sticker was deleted. StickerUpdated = 91 A sticker was updated. ThreadCreate = 110 A thread was created. ThreadDelete = 112 A thread was deleted. ThreadUpdate = 111 A thread was updated. Unban = 23 A user unbanned another user from this guild. VoiceChannelStatusDeleted = 193 A voice channel status was deleted by a user. VoiceChannelStatusUpdated = 192 A voice channel status was updated by a user. WebhookCreated = 50 A Webhook was created in this guild. WebhookDeleted = 52 A Webhook was deleted from this guild. WebhookUpdated = 51 A Webhook was updated in this guild."
  },
  "api/Discord.ActivityProperties.html": {
    "href": "api/Discord.ActivityProperties.html",
    "title": "Enum ActivityProperties | Discord.Net Documentation",
    "keywords": "Enum ActivityProperties Namespace Discord Assembly Discord.Net.Core.dll Flags for the Flags property, that are ORd together. These describe what the activity payload includes. [Flags] public enum ActivityProperties Fields Embedded = 128 Indicates that a user is playing an activity in a voice channel. Instance = 1 Join = 2 Indicates that this activity can be joined. JoinRequest = 8 Indicates that a user may request to join an activity. None = 0 Indicates that no actions on this activity can be taken. PartyPrivacyFriends = 64 Indicates that a user is playing an activity in a voice channel with friends. PartyPrivacyVoiceChannel = 128 Indicates that a user is playing an activity in a voice channel. Play = 32 Indicates that a user can play this song. Spectate = 4 Indicates that this activity can be spectated. Sync = 16 Indicates that a user can listen along in Spotify."
  },
  "api/Discord.ActivityType.html": {
    "href": "api/Discord.ActivityType.html",
    "title": "Enum ActivityType | Discord.Net Documentation",
    "keywords": "Enum ActivityType Namespace Discord Assembly Discord.Net.Core.dll Specifies a Discord user's activity type. public enum ActivityType Fields Competing = 5 The user is competing in a game. CustomStatus = 4 The user has set a custom status. Listening = 2 The user is listening to a song. Playing = 0 The user is playing a game. Streaming = 1 The user is streaming online. Watching = 3 The user is watching some form of media."
  },
  "api/Discord.AddGuildUserProperties.html": {
    "href": "api/Discord.AddGuildUserProperties.html",
    "title": "Class AddGuildUserProperties | Discord.Net Documentation",
    "keywords": "Class AddGuildUserProperties Namespace Discord Assembly Discord.Net.Core.dll Properties that are used to add a new IGuildUser to the guild with the following parameters. public class AddGuildUserProperties Inheritance object AddGuildUserProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Deaf Gets or sets whether the user should be deafened in a voice channel. public Optional<bool> Deaf { get; set; } Property Value Optional<bool> Remarks If this value is set to true, this user will not be able to hear anyone speak in the guild. See Also AddGuildUserAsync(ulong, string, Action<AddGuildUserProperties>, RequestOptions) Mute Gets or sets whether the user should be muted in a voice channel. public Optional<bool> Mute { get; set; } Property Value Optional<bool> Remarks If this value is set to true, no user will be able to hear this user speak in the guild. See Also AddGuildUserAsync(ulong, string, Action<AddGuildUserProperties>, RequestOptions) Nickname Gets or sets the user's nickname. public Optional<string> Nickname { get; set; } Property Value Optional<string> Remarks To clear the user's nickname, this value can be set to null or Empty. See Also AddGuildUserAsync(ulong, string, Action<AddGuildUserProperties>, RequestOptions) RoleIds Gets or sets the roles the user should have. public Optional<IEnumerable<ulong>> RoleIds { get; set; } Property Value Optional<IEnumerable<ulong>> Remarks To add a role to a user: AddRolesAsync(IEnumerable<IRole>, RequestOptions) To remove a role from a user: RemoveRolesAsync(IEnumerable<IRole>, RequestOptions) See Also AddGuildUserAsync(ulong, string, Action<AddGuildUserProperties>, RequestOptions) Roles Gets or sets the roles the user should have. public Optional<IEnumerable<IRole>> Roles { get; set; } Property Value Optional<IEnumerable<IRole>> Remarks To add a role to a user: AddRolesAsync(IEnumerable<IRole>, RequestOptions) To remove a role from a user: RemoveRolesAsync(IEnumerable<IRole>, RequestOptions) See Also AddGuildUserAsync(ulong, string, Action<AddGuildUserProperties>, RequestOptions) See Also AddGuildUserAsync(ulong, string, Action<AddGuildUserProperties>, RequestOptions)"
  },
  "api/Discord.AllowedMentionTypes.html": {
    "href": "api/Discord.AllowedMentionTypes.html",
    "title": "Enum AllowedMentionTypes | Discord.Net Documentation",
    "keywords": "Enum AllowedMentionTypes Namespace Discord Assembly Discord.Net.Core.dll Specifies the type of mentions that will be notified from the message content. [Flags] public enum AllowedMentionTypes Fields Everyone = 4 Controls @everyone and @here mentions. None = 0 No flag is set. Roles = 1 Controls role mentions. Users = 2 Controls user mentions."
  },
  "api/Discord.AllowedMentions.html": {
    "href": "api/Discord.AllowedMentions.html",
    "title": "Class AllowedMentions | Discord.Net Documentation",
    "keywords": "Class AllowedMentions Namespace Discord Assembly Discord.Net.Core.dll Defines which mentions and types of mentions that will notify users from the message content. public class AllowedMentions Inheritance object AllowedMentions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AllowedMentions(AllowedMentionTypes?) Initializes a new instance of the AllowedMentions class. public AllowedMentions(AllowedMentionTypes? allowedTypes = null) Parameters allowedTypes AllowedMentionTypes? The types of mentions to parse from the message content. If null, only the ids specified in UserIds and RoleIds will be mentioned. Properties All Gets a value which indicates that all mentions in the message content should notify users. public static AllowedMentions All { get; } Property Value AllowedMentions AllowedTypes Gets or sets the type of mentions that will be parsed from the message content. public AllowedMentionTypes? AllowedTypes { get; set; } Property Value AllowedMentionTypes? Remarks The Users flag is mutually exclusive with the UserIds property, and the Roles flag is mutually exclusive with the RoleIds property. If null, only the ids specified in UserIds and RoleIds will be mentioned. MentionRepliedUser Gets or sets whether to mention the author of the message you are replying to or not. public bool? MentionRepliedUser { get; set; } Property Value bool? Remarks Specifically for inline replies. None Gets a value which indicates that no mentions in the message content should notify users. public static AllowedMentions None { get; } Property Value AllowedMentions RoleIds Gets or sets the list of all role ids that will be mentioned. This property is mutually exclusive with the Roles flag of the AllowedTypes property. If the flag is set, the value of this property must be null or empty. public List<ulong> RoleIds { get; set; } Property Value List<ulong> UserIds Gets or sets the list of all user ids that will be mentioned. This property is mutually exclusive with the Users flag of the AllowedTypes property. If the flag is set, the value of this property must be null or empty. public List<ulong> UserIds { get; set; } Property Value List<ulong>"
  },
  "api/Discord.ApplicationCommandOptionChoiceProperties.html": {
    "href": "api/Discord.ApplicationCommandOptionChoiceProperties.html",
    "title": "Class ApplicationCommandOptionChoiceProperties | Discord.Net Documentation",
    "keywords": "Class ApplicationCommandOptionChoiceProperties Namespace Discord Assembly Discord.Net.Core.dll Represents a choice for a IApplicationCommandInteractionDataOption. This class is used when making new commands. public class ApplicationCommandOptionChoiceProperties Inheritance object ApplicationCommandOptionChoiceProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets or sets the name of this choice. public string Name { get; set; } Property Value string NameLocalizations Gets or sets the localization dictionary for the name field of this choice. public IDictionary<string, string> NameLocalizations { get; set; } Property Value IDictionary<string, string> Exceptions ArgumentException Thrown when any of the dictionary keys is an invalid locale. Value Gets the value of this choice. warning Discord only accepts int, double/floats, and string as the input. public object Value { get; set; } Property Value object"
  },
  "api/Discord.ApplicationCommandOptionProperties.html": {
    "href": "api/Discord.ApplicationCommandOptionProperties.html",
    "title": "Class ApplicationCommandOptionProperties | Discord.Net Documentation",
    "keywords": "Class ApplicationCommandOptionProperties Namespace Discord Assembly Discord.Net.Core.dll Represents a IApplicationCommandOption for making slash commands. public class ApplicationCommandOptionProperties Inheritance object ApplicationCommandOptionProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelTypes Gets or sets the allowed channel types for this option. public List<ChannelType> ChannelTypes { get; set; } Property Value List<ChannelType> Choices Gets or sets the choices for string and int types for the user to pick from. public List<ApplicationCommandOptionChoiceProperties> Choices { get; set; } Property Value List<ApplicationCommandOptionChoiceProperties> Description Gets or sets the description of this option. public string Description { get; set; } Property Value string DescriptionLocalizations Gets or sets the localization dictionary for the description field of this option. public IDictionary<string, string> DescriptionLocalizations { get; set; } Property Value IDictionary<string, string> Exceptions ArgumentException Thrown when any of the dictionary keys is an invalid locale. IsAutocomplete Gets or sets whether or not this option supports autocomplete. public bool IsAutocomplete { get; set; } Property Value bool IsDefault Gets or sets whether or not this options is the first required option for the user to complete. only one option can be default. public bool? IsDefault { get; set; } Property Value bool? IsRequired Gets or sets if the option is required. public bool? IsRequired { get; set; } Property Value bool? MaxLength Gets or sets the maximum allowed length for a string input. public int? MaxLength { get; set; } Property Value int? MaxValue Gets or sets the largest number value the user can input. public double? MaxValue { get; set; } Property Value double? MinLength Gets or sets the minimum allowed length for a string input. public int? MinLength { get; set; } Property Value int? MinValue Gets or sets the smallest number value the user can input. public double? MinValue { get; set; } Property Value double? Name Gets or sets the name of this option. public string Name { get; set; } Property Value string NameLocalizations Gets or sets the localization dictionary for the name field of this option. public IDictionary<string, string> NameLocalizations { get; set; } Property Value IDictionary<string, string> Exceptions ArgumentException Thrown when any of the dictionary keys is an invalid locale. Options Gets or sets if this option is a subcommand or subcommand group type, these nested options will be the parameters. public List<ApplicationCommandOptionProperties> Options { get; set; } Property Value List<ApplicationCommandOptionProperties> Type Gets or sets the type of this option. public ApplicationCommandOptionType Type { get; set; } Property Value ApplicationCommandOptionType"
  },
  "api/Discord.ApplicationCommandOptionType.html": {
    "href": "api/Discord.ApplicationCommandOptionType.html",
    "title": "Enum ApplicationCommandOptionType | Discord.Net Documentation",
    "keywords": "Enum ApplicationCommandOptionType Namespace Discord Assembly Discord.Net.Core.dll The option type of the Slash command parameter, See the discord docs. public enum ApplicationCommandOptionType : byte Fields Attachment = 11 A IAttachment. Boolean = 5 A bool. Channel = 7 A IGuildChannel. Integer = 4 An long. Mentionable = 9 A IUser or IRole. Number = 10 A double. Role = 8 A IRole. String = 3 A string of text. SubCommand = 1 A sub command. SubCommandGroup = 2 A group of sub commands. User = 6 A IUser."
  },
  "api/Discord.ApplicationCommandPermission.html": {
    "href": "api/Discord.ApplicationCommandPermission.html",
    "title": "Class ApplicationCommandPermission | Discord.Net Documentation",
    "keywords": "Class ApplicationCommandPermission Namespace Discord Assembly Discord.Net.Core.dll Application command permissions allow you to enable or disable commands for specific users or roles within a guild. public class ApplicationCommandPermission Inheritance object ApplicationCommandPermission Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApplicationCommandPermission(IChannel, bool) Creates a new ApplicationCommandPermission targeting Channel. public ApplicationCommandPermission(IChannel channel, bool allow) Parameters channel IChannel The channel you want to target this permission value for. allow bool The value of this permission. ApplicationCommandPermission(IRole, bool) Creates a new ApplicationCommandPermission targeting Role. public ApplicationCommandPermission(IRole target, bool allow) Parameters target IRole The role you want to target this permission value for. allow bool The value of this permission. ApplicationCommandPermission(IUser, bool) Creates a new ApplicationCommandPermission targeting User. public ApplicationCommandPermission(IUser target, bool allow) Parameters target IUser The user you want to target this permission value for. allow bool The value of this permission. ApplicationCommandPermission(ulong, ApplicationCommandPermissionTarget, bool) Creates a new ApplicationCommandPermission. public ApplicationCommandPermission(ulong targetId, ApplicationCommandPermissionTarget targetType, bool allow) Parameters targetId ulong The id you want to target this permission value for. targetType ApplicationCommandPermissionTarget The type of the targetId parameter. allow bool The value of this permission. Properties Permission true to allow, otherwise false. public bool Permission { get; } Property Value bool TargetId The id of the role or user. public ulong TargetId { get; } Property Value ulong TargetType The target of this permission. public ApplicationCommandPermissionTarget TargetType { get; } Property Value ApplicationCommandPermissionTarget Methods ForAllChannels(IGuild, bool) Creates a new ApplicationCommandPermission targeting every channel in a guild. public static ApplicationCommandPermission ForAllChannels(IGuild guild, bool allow) Parameters guild IGuild Target guild. allow bool The value of this permission. Returns ApplicationCommandPermission Instance of ApplicationCommandPermission targeting every channel in a guild. ForAllChannels(ulong, bool) Creates a new ApplicationCommandPermission targeting every channel in a guild. public static ApplicationCommandPermission ForAllChannels(ulong guildId, bool allow) Parameters guildId ulong Id of the target guild. allow bool The value of this permission. Returns ApplicationCommandPermission Instance of ApplicationCommandPermission targeting every channel in a guild. ForEveryone(IGuild, bool) Creates a new ApplicationCommandPermission targeting @everyone in a guild. public static ApplicationCommandPermission ForEveryone(IGuild guild, bool allow) Parameters guild IGuild Target guild. allow bool The value of this permission. Returns ApplicationCommandPermission Instance of ApplicationCommandPermission targeting @everyone in a guild. ForEveryone(ulong, bool) Creates a new ApplicationCommandPermission targeting @everyone in a guild. public static ApplicationCommandPermission ForEveryone(ulong guildId, bool allow) Parameters guildId ulong Id of the target guild. allow bool The value of this permission. Returns ApplicationCommandPermission Instance of ApplicationCommandPermission targeting @everyone in a guild."
  },
  "api/Discord.ApplicationCommandPermissionTarget.html": {
    "href": "api/Discord.ApplicationCommandPermissionTarget.html",
    "title": "Enum ApplicationCommandPermissionTarget | Discord.Net Documentation",
    "keywords": "Enum ApplicationCommandPermissionTarget Namespace Discord Assembly Discord.Net.Core.dll Specifies the target of the permission. public enum ApplicationCommandPermissionTarget Fields Channel = 3 The target of the permission is a channel. Role = 1 The target of the permission is a role. User = 2 The target of the permission is a user."
  },
  "api/Discord.ApplicationCommandProperties.html": {
    "href": "api/Discord.ApplicationCommandProperties.html",
    "title": "Class ApplicationCommandProperties | Discord.Net Documentation",
    "keywords": "Class ApplicationCommandProperties Namespace Discord Assembly Discord.Net.Core.dll Represents the base class to create/modify application commands. public abstract class ApplicationCommandProperties Inheritance object ApplicationCommandProperties Derived MessageCommandProperties SlashCommandProperties UserCommandProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DefaultMemberPermissions Gets or sets the default permissions required by a user to execute this application command. public Optional<GuildPermission> DefaultMemberPermissions { get; set; } Property Value Optional<GuildPermission> DescriptionLocalizations Gets or sets the localization dictionary for the description field of this command. public IReadOnlyDictionary<string, string> DescriptionLocalizations { get; set; } Property Value IReadOnlyDictionary<string, string> IsDMEnabled Gets or sets whether or not this command can be used in DMs. public Optional<bool> IsDMEnabled { get; set; } Property Value Optional<bool> IsDefaultPermission Gets or sets whether the command is enabled by default when the app is added to a guild. Default is true public Optional<bool> IsDefaultPermission { get; set; } Property Value Optional<bool> IsNsfw Gets or sets whether or not this command is age restricted. public Optional<bool> IsNsfw { get; set; } Property Value Optional<bool> Name Gets or sets the name of this command. public Optional<string> Name { get; set; } Property Value Optional<string> NameLocalizations Gets or sets the localization dictionary for the name field of this command. public IReadOnlyDictionary<string, string> NameLocalizations { get; set; } Property Value IReadOnlyDictionary<string, string>"
  },
  "api/Discord.ApplicationCommandType.html": {
    "href": "api/Discord.ApplicationCommandType.html",
    "title": "Enum ApplicationCommandType | Discord.Net Documentation",
    "keywords": "Enum ApplicationCommandType Namespace Discord Assembly Discord.Net.Core.dll Represents the types of application commands. public enum ApplicationCommandType : byte Fields Message = 3 A Context Menu Message command type Slash = 1 A Slash command type User = 2 A Context Menu User command type"
  },
  "api/Discord.ApplicationDiscoverabilityState.html": {
    "href": "api/Discord.ApplicationDiscoverabilityState.html",
    "title": "Enum ApplicationDiscoverabilityState | Discord.Net Documentation",
    "keywords": "Enum ApplicationDiscoverabilityState Namespace Discord Assembly Discord.Net.Core.dll public enum ApplicationDiscoverabilityState Fields Blocked = 5 Application has been blocked from appearing in the application directory. Discoverable = 3 Application is listed in the application directory. Featureable = 4 Application is featureable in the application directory. Ineligible = 1 Application is ineligible for the application directory. None = 0 Application has no discoverability state. NotDiscoverable = 2 Application is not listed in the application directory."
  },
  "api/Discord.ApplicationExplicitContentFilterLevel.html": {
    "href": "api/Discord.ApplicationExplicitContentFilterLevel.html",
    "title": "Enum ApplicationExplicitContentFilterLevel | Discord.Net Documentation",
    "keywords": "Enum ApplicationExplicitContentFilterLevel Namespace Discord Assembly Discord.Net.Core.dll public enum ApplicationExplicitContentFilterLevel Fields Disabled = 0 Media content will not be filtered. Enabled = 1 Media content will be filtered."
  },
  "api/Discord.ApplicationFlags.html": {
    "href": "api/Discord.ApplicationFlags.html",
    "title": "Enum ApplicationFlags | Discord.Net Documentation",
    "keywords": "Enum ApplicationFlags Namespace Discord Assembly Discord.Net.Core.dll Represents public flags for an application. [Flags] public enum ApplicationFlags Fields ActiveApplication = 16777216 Indicates if an app is considered active. ApplicationCommandBadge = 8388608 Indicates if an app has registered global application commands. Embedded = 131072 Indicates if an app is embedded within the Discord client. GatewayGuildMembers = 16384 Indicates that the app has been verified to use GUILD_MEMBERS intent. GatewayGuildMembersLimited = 32768 Indicates that the app has enabled the GUILD_MEMBERS intent on a bot in less than 100 servers. GatewayMessageContent = 262144 Indicates that the app has been verified to use MESSAGE_CONTENT intent. GatewayMessageContentLimited = 524288 Indicates that the app has enabled the MESSAGE_CONTENT intent on a bot in less than 100 servers. GatewayPresence = 4096 Indicates that the app has been verified to use GUILD_PRESENCES intent. GatewayPresenceLimited = 8192 Indicates that the app has enabled the GUILD_PRESENCES intent on a bot in less than 100 servers. UsesAutoModApi = 64 Indicates if an app uses the Auto Moderation API. VerificationPendingGuildLimit = 65536 Indicates unusual growth of an app that prevents verification."
  },
  "api/Discord.ApplicationInstallParams.html": {
    "href": "api/Discord.ApplicationInstallParams.html",
    "title": "Class ApplicationInstallParams | Discord.Net Documentation",
    "keywords": "Class ApplicationInstallParams Namespace Discord Assembly Discord.Net.Core.dll Represents install parameters for an application. public class ApplicationInstallParams Inheritance object ApplicationInstallParams Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApplicationInstallParams(string[], GuildPermission) public ApplicationInstallParams(string[] scopes, GuildPermission permission) Parameters scopes string[] permission GuildPermission Properties Permission Gets the default permissions to install this application. public GuildPermission Permission { get; } Property Value GuildPermission Scopes Gets the scopes to install this application. public IReadOnlyCollection<string> Scopes { get; } Property Value IReadOnlyCollection<string>"
  },
  "api/Discord.ApplicationInteractionsVersion.html": {
    "href": "api/Discord.ApplicationInteractionsVersion.html",
    "title": "Enum ApplicationInteractionsVersion | Discord.Net Documentation",
    "keywords": "Enum ApplicationInteractionsVersion Namespace Discord Assembly Discord.Net.Core.dll public enum ApplicationInteractionsVersion Fields Version1 = 1 Only Interaction Create events are sent as documented (default). Version2 = 2 A selection of chosen events are sent."
  },
  "api/Discord.ApplicationMonetizationEligibilityFlags.html": {
    "href": "api/Discord.ApplicationMonetizationEligibilityFlags.html",
    "title": "Enum ApplicationMonetizationEligibilityFlags | Discord.Net Documentation",
    "keywords": "Enum ApplicationMonetizationEligibilityFlags Namespace Discord Assembly Discord.Net.Core.dll Gets the monetization eligibility flags for the application combined as a bitfield. [Flags] public enum ApplicationMonetizationEligibilityFlags Fields ApprovedCommands = 4 Application has the message content intent approved or uses application commands. HasTeam = 2 Application is owned by a team. NoBlockingIssues = 131072 Application has no issues blocking monetization. None = 0 The application has no monetization eligibility flags set. NotQuarantined = 512 Application is not quarantined. PrivacyPolicy = 16 Application has a privacy policy set. SafeDescription = 64 Application's description is safe for work. SafeName = 32 Application's name is safe for work. SafeRoleConnections = 128 Application's role connections metadata is safe for work. TeamMembersEmailVerified = 32768 Application's team members all have verified emails. TeamMembersMfaEnabled = 65536 Application's team members all have MFA enabled. TermsOfService = 8 Application has terms of service set. ValidPayoutStatus = 262144 Application's team has a valid payout status. Verified = 1 Application is verified."
  },
  "api/Discord.ApplicationMonetizationState.html": {
    "href": "api/Discord.ApplicationMonetizationState.html",
    "title": "Enum ApplicationMonetizationState | Discord.Net Documentation",
    "keywords": "Enum ApplicationMonetizationState Namespace Discord Assembly Discord.Net.Core.dll public enum ApplicationMonetizationState Fields Blocked = 3 Application has been blocked from monetizing. Enabled = 2 Application has monetization set up. None = 1 Application has no monetization set up."
  },
  "api/Discord.ApplicationRpcState.html": {
    "href": "api/Discord.ApplicationRpcState.html",
    "title": "Enum ApplicationRpcState | Discord.Net Documentation",
    "keywords": "Enum ApplicationRpcState Namespace Discord Assembly Discord.Net.Core.dll public enum ApplicationRpcState Fields Approved = 3 Application has been approved for RPC access. Disabled = 0 Application does not have access to RPC. Rejected = 4 Application has been rejected from RPC access. Submitted = 2 Application has submitted a RPC access request. Unsubmitted = 1 Application has not yet been applied for RPC access."
  },
  "api/Discord.ApplicationStoreState.html": {
    "href": "api/Discord.ApplicationStoreState.html",
    "title": "Enum ApplicationStoreState | Discord.Net Documentation",
    "keywords": "Enum ApplicationStoreState Namespace Discord Assembly Discord.Net.Core.dll public enum ApplicationStoreState Fields Approved = 4 Application has been approved for the store. None = 1 Application does not have a commerce license. Paid = 2 Application has a commerce license but has not yet submitted a store approval request. Rejected = 5 Application has been rejected from the store. Submitted = 3 Application has submitted a store approval request."
  },
  "api/Discord.ApplicationVerificationState.html": {
    "href": "api/Discord.ApplicationVerificationState.html",
    "title": "Enum ApplicationVerificationState | Discord.Net Documentation",
    "keywords": "Enum ApplicationVerificationState Namespace Discord Assembly Discord.Net.Core.dll public enum ApplicationVerificationState Fields Ineligible = 1 Application is ineligible for verification. Submitted = 3 Application has submitted a verification request. Succeeded = 4 Application has been verified. Unsubmitted = 2 Application has not yet been applied for verification."
  },
  "api/Discord.AsyncEnumerableExtensions.html": {
    "href": "api/Discord.AsyncEnumerableExtensions.html",
    "title": "Class AsyncEnumerableExtensions | Discord.Net Documentation",
    "keywords": "Class AsyncEnumerableExtensions Namespace Discord Assembly Discord.Net.Core.dll An extension class for squashing IAsyncEnumerable<T>. public static class AsyncEnumerableExtensions Inheritance object AsyncEnumerableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This set of extension methods will squash an IAsyncEnumerable<T> into a single IEnumerable<T>. This is often associated with requests that has a set limit when requesting. Methods FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) Flattens the specified pages into one IEnumerable<T> asynchronously. public static Task<IEnumerable<T>> FlattenAsync<T>(this IAsyncEnumerable<IEnumerable<T>> source) Parameters source IAsyncEnumerable<IEnumerable<T>> Returns Task<IEnumerable<T>> Type Parameters T Flatten<T>(IAsyncEnumerable<IEnumerable<T>>) Flattens the specified pages into one IAsyncEnumerable<T>. public static IAsyncEnumerable<T> Flatten<T>(this IAsyncEnumerable<IEnumerable<T>> source) Parameters source IAsyncEnumerable<IEnumerable<T>> Returns IAsyncEnumerable<T> Type Parameters T"
  },
  "api/Discord.Attachment.html": {
    "href": "api/Discord.Attachment.html",
    "title": "Class Attachment | Discord.Net Documentation",
    "keywords": "Class Attachment Namespace Discord Assembly Discord.Net.Rest.dll Represents a message attachment found in a IUserMessage. public class Attachment : IAttachment, ISnowflakeEntity, IEntity<ulong> Inheritance object Attachment Implements IAttachment ISnowflakeEntity IEntity<ulong> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods AttachmentExtensions.IsSpoiler(IAttachment) Properties ClipCreatedAt Gets the timestamp of the clip. null if the attachment is not a clip. public DateTimeOffset? ClipCreatedAt { get; } Property Value DateTimeOffset? ClipParticipants Gets users who participated in the clip. public IReadOnlyCollection<RestUser> ClipParticipants { get; } Property Value IReadOnlyCollection<RestUser> ContentType Gets the media's MIME type if present; otherwise null. public string ContentType { get; } Property Value string CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. Description Gets the description of the attachment; or null if there is none set. public string Description { get; } Property Value string Duration Gets the duration of the audio file. null if the attachment is not a voice message. public double? Duration { get; } Property Value double? Ephemeral Gets whether or not this attachment is ephemeral. public bool Ephemeral { get; } Property Value bool true if the attachment is ephemeral; otherwise false. Filename Gets the filename of this attachment. public string Filename { get; } Property Value string A string containing the full filename of this attachment (e.g. textFile.txt). Flags Gets flags related to this to this attachment. public AttachmentFlags Flags { get; } Property Value AttachmentFlags Height Gets the height of this attachment. public int? Height { get; } Property Value int? The height of this attachment if it is a picture; otherwise null. Id Gets the unique identifier for this object. public ulong Id { get; } Property Value ulong ProxyUrl Gets a proxied URL of this attachment. public string ProxyUrl { get; } Property Value string A string containing the proxied URL of this attachment. Size Gets the file size of this attachment. public int Size { get; } Property Value int The size of this attachment in bytes. Title Gets the title of the clip. null if the clip has no title set. public string Title { get; } Property Value string Url Gets the URL of this attachment. public string Url { get; } Property Value string A string containing the URL of this attachment. Waveform Gets the base64 encoded bytearray representing a sampled waveform. null if the attachment is not a voice message. public string Waveform { get; } Property Value string Width Gets the width of this attachment. public int? Width { get; } Property Value int? The width of this attachment if it is a picture; otherwise null. Methods ToString() Returns the filename of this attachment. public override string ToString() Returns string A string containing the filename of this attachment."
  },
  "api/Discord.AttachmentExtensions.html": {
    "href": "api/Discord.AttachmentExtensions.html",
    "title": "Class AttachmentExtensions | Discord.Net Documentation",
    "keywords": "Class AttachmentExtensions Namespace Discord Assembly Discord.Net.Core.dll public static class AttachmentExtensions Inheritance object AttachmentExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields SpoilerPrefix The prefix applied to files to indicate that it is a spoiler. public const string SpoilerPrefix = \"SPOILER_\" Field Value string Methods IsSpoiler(IAttachment) Gets whether the message's attachments are spoilers or not. public static bool IsSpoiler(this IAttachment attachment) Parameters attachment IAttachment Returns bool"
  },
  "api/Discord.AttachmentFlags.html": {
    "href": "api/Discord.AttachmentFlags.html",
    "title": "Enum AttachmentFlags | Discord.Net Documentation",
    "keywords": "Enum AttachmentFlags Namespace Discord Assembly Discord.Net.Core.dll [Flags] public enum AttachmentFlags Fields IsClip = 1 Indicates that this attachment is a clip. IsRemix = 4 Indicates that this attachment has been edited using the remix feature on mobile. IsThumbnail = 2 Indicates that this attachment is a thumbnail. None = 0 The attachment has no flags."
  },
  "api/Discord.Audio.AudioApplication.html": {
    "href": "api/Discord.Audio.AudioApplication.html",
    "title": "Enum AudioApplication | Discord.Net Documentation",
    "keywords": "Enum AudioApplication Namespace Discord.Audio Assembly Discord.Net.Core.dll public enum AudioApplication Fields Mixed = 2 Music = 1 Voice = 0"
  },
  "api/Discord.Audio.AudioInStream.html": {
    "href": "api/Discord.Audio.AudioInStream.html",
    "title": "Class AudioInStream | Discord.Net Documentation",
    "keywords": "Class AudioInStream Namespace Discord.Audio Assembly Discord.Net.Core.dll public abstract class AudioInStream : AudioStream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream AudioStream AudioInStream Implements IAsyncDisposable IDisposable Derived InputStream Inherited Members AudioStream.CanSeek AudioStream.WriteHeader(ushort, uint, bool) AudioStream.Write(byte[], int, int) AudioStream.Flush() AudioStream.Clear() AudioStream.ClearAsync(CancellationToken) AudioStream.Length AudioStream.Position AudioStream.Read(byte[], int, int) AudioStream.SetLength(long) AudioStream.Seek(long, SeekOrigin) Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.Dispose(bool) Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadByte() Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(byte[], int, int, CancellationToken) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AvailableFrames public abstract int AvailableFrames { get; } Property Value int CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. public override bool CanRead { get; } Property Value bool true if the stream supports reading; otherwise, false. CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. public override bool CanWrite { get; } Property Value bool true if the stream supports writing; otherwise, false. Methods FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. public override Task FlushAsync(CancellationToken cancelToken) Parameters cancelToken CancellationToken Returns Task A task that represents the asynchronous flush operation. Exceptions ObjectDisposedException The stream has been disposed. ReadFrameAsync(CancellationToken) public abstract Task<RTPFrame> ReadFrameAsync(CancellationToken cancelToken) Parameters cancelToken CancellationToken Returns Task<RTPFrame> TryReadFrame(CancellationToken, out RTPFrame) public abstract bool TryReadFrame(CancellationToken cancelToken, out RTPFrame frame) Parameters cancelToken CancellationToken frame RTPFrame Returns bool"
  },
  "api/Discord.Audio.AudioOutStream.html": {
    "href": "api/Discord.Audio.AudioOutStream.html",
    "title": "Class AudioOutStream | Discord.Net Documentation",
    "keywords": "Class AudioOutStream Namespace Discord.Audio Assembly Discord.Net.Core.dll public abstract class AudioOutStream : AudioStream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream AudioStream AudioOutStream Implements IAsyncDisposable IDisposable Derived BufferedWriteStream OpusDecodeStream OpusEncodeStream OutputStream RTPReadStream RTPWriteStream SodiumDecryptStream SodiumEncryptStream Inherited Members AudioStream.CanRead AudioStream.CanSeek AudioStream.WriteHeader(ushort, uint, bool) AudioStream.Write(byte[], int, int) AudioStream.Flush() AudioStream.Clear() AudioStream.ClearAsync(CancellationToken) AudioStream.Length AudioStream.Position Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.Dispose(bool) Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadByte() Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(byte[], int, int, CancellationToken) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. public override bool CanWrite { get; } Property Value bool true if the stream supports writing; otherwise, false. Methods Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. public override int Read(byte[] buffer, int offset, int count) Parameters buffer byte[] An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. offset int The zero-based byte offset in buffer at which to begin storing the data read from the current stream. count int The maximum number of bytes to be read from the current stream. Returns int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached. Exceptions ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException Reading this stream is not supported. NotSupportedException Reading this stream is not supported. Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. public override long Seek(long offset, SeekOrigin origin) Parameters offset long A byte offset relative to the origin parameter. origin SeekOrigin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns long The new position within the current stream. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException Seeking this stream is not supported.. NotSupportedException Seeking this stream is not supported.. SetLength(long) When overridden in a derived class, sets the length of the current stream. public override void SetLength(long value) Parameters value long The desired length of the current stream in bytes. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException Setting the length to this stream is not supported. NotSupportedException Setting the length to this stream is not supported."
  },
  "api/Discord.Audio.AudioStream.html": {
    "href": "api/Discord.Audio.AudioStream.html",
    "title": "Class AudioStream | Discord.Net Documentation",
    "keywords": "Class AudioStream Namespace Discord.Audio Assembly Discord.Net.Core.dll public abstract class AudioStream : Stream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream AudioStream Implements IAsyncDisposable IDisposable Derived AudioInStream AudioOutStream Inherited Members Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.Dispose(bool) Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadByte() Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(byte[], int, int, CancellationToken) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. public override bool CanRead { get; } Property Value bool true if the stream supports reading; otherwise, false. CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. public override bool CanSeek { get; } Property Value bool true if the stream supports seeking; otherwise, false. CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. public override bool CanWrite { get; } Property Value bool true if the stream supports writing; otherwise, false. Length When overridden in a derived class, gets the length in bytes of the stream. public override long Length { get; } Property Value long A long value representing the length of the stream in bytes. Exceptions NotSupportedException A class derived from Stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException Reading stream length is not supported. Position When overridden in a derived class, gets or sets the position within the current stream. public override long Position { get; set; } Property Value long The current position within the stream. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support seeking. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException Getting or setting this stream position is not supported. Methods Clear() public void Clear() ClearAsync(CancellationToken) public virtual Task ClearAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Returns Task Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. public override void Flush() Exceptions IOException An I/O error occurs. Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. public override int Read(byte[] buffer, int offset, int count) Parameters buffer byte[] An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. offset int The zero-based byte offset in buffer at which to begin storing the data read from the current stream. count int The maximum number of bytes to be read from the current stream. Returns int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached. Exceptions ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException Reading this stream is not supported. Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. public override long Seek(long offset, SeekOrigin origin) Parameters offset long A byte offset relative to the origin parameter. origin SeekOrigin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns long The new position within the current stream. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException Seeking this stream is not supported.. SetLength(long) When overridden in a derived class, sets the length of the current stream. public override void SetLength(long value) Parameters value long The desired length of the current stream in bytes. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. NotSupportedException Setting the length to this stream is not supported. Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. public override void Write(byte[] buffer, int offset, int count) Parameters buffer byte[] An array of bytes. This method copies count bytes from buffer to the current stream. offset int The zero-based byte offset in buffer at which to begin copying bytes to the current stream. count int The number of bytes to be written to the current stream. Exceptions ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. WriteHeader(ushort, uint, bool) public virtual void WriteHeader(ushort seq, uint timestamp, bool missed) Parameters seq ushort timestamp uint missed bool Exceptions InvalidOperationException This stream does not accept headers."
  },
  "api/Discord.Audio.IAudioClient.html": {
    "href": "api/Discord.Audio.IAudioClient.html",
    "title": "Interface IAudioClient | Discord.Net Documentation",
    "keywords": "Interface IAudioClient Namespace Discord.Audio Assembly Discord.Net.Core.dll public interface IAudioClient : IDisposable Inherited Members IDisposable.Dispose() Properties ConnectionState Gets the current connection state of this client. ConnectionState ConnectionState { get; } Property Value ConnectionState Latency Gets the estimated round-trip latency, in milliseconds, to the voice WebSocket server. int Latency { get; } Property Value int UdpLatency Gets the estimated round-trip latency, in milliseconds, to the voice UDP server. int UdpLatency { get; } Property Value int Methods CreateDirectOpusStream() Creates a new outgoing stream accepting Opus-encoded data. This is a direct stream with no internal timer. AudioOutStream CreateDirectOpusStream() Returns AudioOutStream CreateDirectPCMStream(AudioApplication, int?, int) Creates a new direct outgoing stream accepting PCM (raw) data. This is a direct stream with no internal timer. AudioOutStream CreateDirectPCMStream(AudioApplication application, int? bitrate = null, int packetLoss = 30) Parameters application AudioApplication bitrate int? packetLoss int Returns AudioOutStream CreateOpusStream(int) Creates a new outgoing stream accepting Opus-encoded data. AudioOutStream CreateOpusStream(int bufferMillis = 1000) Parameters bufferMillis int Returns AudioOutStream CreatePCMStream(AudioApplication, int?, int, int) Creates a new outgoing stream accepting PCM (raw) data. AudioOutStream CreatePCMStream(AudioApplication application, int? bitrate = null, int bufferMillis = 1000, int packetLoss = 30) Parameters application AudioApplication bitrate int? bufferMillis int packetLoss int Returns AudioOutStream GetStreams() Gets the current audio streams. IReadOnlyDictionary<ulong, AudioInStream> GetStreams() Returns IReadOnlyDictionary<ulong, AudioInStream> SetSpeakingAsync(bool) Task SetSpeakingAsync(bool value) Parameters value bool Returns Task StopAsync() Task StopAsync() Returns Task Events ClientDisconnected event Func<ulong, Task> ClientDisconnected Event Type Func<ulong, Task> Connected event Func<Task> Connected Event Type Func<Task> Disconnected event Func<Exception, Task> Disconnected Event Type Func<Exception, Task> LatencyUpdated event Func<int, int, Task> LatencyUpdated Event Type Func<int, int, Task> SpeakingUpdated event Func<ulong, bool, Task> SpeakingUpdated Event Type Func<ulong, bool, Task> StreamCreated event Func<ulong, AudioInStream, Task> StreamCreated Event Type Func<ulong, AudioInStream, Task> StreamDestroyed event Func<ulong, Task> StreamDestroyed Event Type Func<ulong, Task> UdpLatencyUpdated event Func<int, int, Task> UdpLatencyUpdated Event Type Func<int, int, Task>"
  },
  "api/Discord.Audio.RTPFrame.html": {
    "href": "api/Discord.Audio.RTPFrame.html",
    "title": "Struct RTPFrame | Discord.Net Documentation",
    "keywords": "Struct RTPFrame Namespace Discord.Audio Assembly Discord.Net.Core.dll public struct RTPFrame Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors RTPFrame(ushort, uint, byte[], bool) public RTPFrame(ushort sequence, uint timestamp, byte[] payload, bool missed) Parameters sequence ushort timestamp uint payload byte[] missed bool Fields Missed public readonly bool Missed Field Value bool Payload public readonly byte[] Payload Field Value byte[] Sequence public readonly ushort Sequence Field Value ushort Timestamp public readonly uint Timestamp Field Value uint"
  },
  "api/Discord.Audio.SecretBox.html": {
    "href": "api/Discord.Audio.SecretBox.html",
    "title": "Class SecretBox | Discord.Net Documentation",
    "keywords": "Class SecretBox Namespace Discord.Audio Assembly Discord.Net.WebSocket.dll public static class SecretBox Inheritance object SecretBox Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Decrypt(byte[], int, int, byte[], int, byte[], byte[]) public static int Decrypt(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, byte[] nonce, byte[] secret) Parameters input byte[] inputOffset int inputLength int output byte[] outputOffset int nonce byte[] secret byte[] Returns int Encrypt(byte[], int, int, byte[], int, byte[], byte[]) public static int Encrypt(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, byte[] nonce, byte[] secret) Parameters input byte[] inputOffset int inputLength int output byte[] outputOffset int nonce byte[] secret byte[] Returns int"
  },
  "api/Discord.Audio.Streams.BufferedWriteStream.html": {
    "href": "api/Discord.Audio.Streams.BufferedWriteStream.html",
    "title": "Class BufferedWriteStream | Discord.Net Documentation",
    "keywords": "Class BufferedWriteStream Namespace Discord.Audio.Streams Assembly Discord.Net.WebSocket.dll Wraps another stream with a timed buffer. public class BufferedWriteStream : AudioOutStream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream AudioStream AudioOutStream BufferedWriteStream Implements IAsyncDisposable IDisposable Inherited Members AudioOutStream.CanWrite AudioOutStream.Read(byte[], int, int) AudioOutStream.SetLength(long) AudioOutStream.Seek(long, SeekOrigin) AudioStream.CanRead AudioStream.CanSeek AudioStream.Write(byte[], int, int) AudioStream.Flush() AudioStream.Clear() AudioStream.Length AudioStream.Position Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadByte() Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BufferedWriteStream(AudioStream, IAudioClient, int, CancellationToken, int) public BufferedWriteStream(AudioStream next, IAudioClient client, int bufferMillis, CancellationToken cancelToken, int maxFrameSize = 1500) Parameters next AudioStream client IAudioClient bufferMillis int cancelToken CancellationToken maxFrameSize int Methods ClearAsync(CancellationToken) public override Task ClearAsync(CancellationToken cancelToken) Parameters cancelToken CancellationToken Returns Task Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. protected override void Dispose(bool disposing) Parameters disposing bool true to release both managed and unmanaged resources; false to release only unmanaged resources. FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. public override Task FlushAsync(CancellationToken cancelToken) Parameters cancelToken CancellationToken Returns Task A task that represents the asynchronous flush operation. Exceptions ObjectDisposedException The stream has been disposed. WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. public override Task WriteAsync(byte[] data, int offset, int count, CancellationToken cancelToken) Parameters data byte[] offset int The zero-based byte offset in buffer from which to begin copying bytes to the stream. count int The maximum number of bytes to write. cancelToken CancellationToken Returns Task A task that represents the asynchronous write operation. Exceptions ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. WriteHeader(ushort, uint, bool) public override void WriteHeader(ushort seq, uint timestamp, bool missed) Parameters seq ushort timestamp uint missed bool Exceptions InvalidOperationException This stream does not accept headers."
  },
  "api/Discord.Audio.Streams.InputStream.html": {
    "href": "api/Discord.Audio.Streams.InputStream.html",
    "title": "Class InputStream | Discord.Net Documentation",
    "keywords": "Class InputStream Namespace Discord.Audio.Streams Assembly Discord.Net.WebSocket.dll Reads the payload from an RTP frame public class InputStream : AudioInStream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream AudioStream AudioInStream InputStream Implements IAsyncDisposable IDisposable Inherited Members AudioInStream.FlushAsync(CancellationToken) AudioStream.Write(byte[], int, int) AudioStream.Flush() AudioStream.Clear() AudioStream.ClearAsync(CancellationToken) AudioStream.Length AudioStream.Position AudioStream.Read(byte[], int, int) AudioStream.SetLength(long) AudioStream.Seek(long, SeekOrigin) Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadByte() Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InputStream() public InputStream() Properties AvailableFrames public override int AvailableFrames { get; } Property Value int CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. public override bool CanRead { get; } Property Value bool true if the stream supports reading; otherwise, false. CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. public override bool CanSeek { get; } Property Value bool true if the stream supports seeking; otherwise, false. CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. public override bool CanWrite { get; } Property Value bool true if the stream supports writing; otherwise, false. Methods Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. protected override void Dispose(bool isDisposing) Parameters isDisposing bool ReadAsync(byte[], int, int, CancellationToken) Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests. public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancelToken) Parameters buffer byte[] The buffer to write the data into. offset int The byte offset in buffer at which to begin writing data from the stream. count int The maximum number of bytes to read. cancelToken CancellationToken Returns Task<int> A task that represents the asynchronous read operation. The value of the TResult parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached. Exceptions ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous read operation. ReadFrameAsync(CancellationToken) public override Task<RTPFrame> ReadFrameAsync(CancellationToken cancelToken) Parameters cancelToken CancellationToken Returns Task<RTPFrame> TryReadFrame(CancellationToken, out RTPFrame) public override bool TryReadFrame(CancellationToken cancelToken, out RTPFrame frame) Parameters cancelToken CancellationToken frame RTPFrame Returns bool WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancelToken) Parameters buffer byte[] The buffer to write data from. offset int The zero-based byte offset in buffer from which to begin copying bytes to the stream. count int The maximum number of bytes to write. cancelToken CancellationToken Returns Task A task that represents the asynchronous write operation. Exceptions ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. WriteHeader(ushort, uint, bool) public override void WriteHeader(ushort seq, uint timestamp, bool missed) Parameters seq ushort timestamp uint missed bool Exceptions InvalidOperationException This stream does not accept headers."
  },
  "api/Discord.Audio.Streams.OpusDecodeStream.html": {
    "href": "api/Discord.Audio.Streams.OpusDecodeStream.html",
    "title": "Class OpusDecodeStream | Discord.Net Documentation",
    "keywords": "Class OpusDecodeStream Namespace Discord.Audio.Streams Assembly Discord.Net.WebSocket.dll Converts Opus to PCM public class OpusDecodeStream : AudioOutStream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream AudioStream AudioOutStream OpusDecodeStream Implements IAsyncDisposable IDisposable Inherited Members AudioOutStream.CanWrite AudioOutStream.Read(byte[], int, int) AudioOutStream.SetLength(long) AudioOutStream.Seek(long, SeekOrigin) AudioStream.CanRead AudioStream.CanSeek AudioStream.Write(byte[], int, int) AudioStream.Flush() AudioStream.Clear() AudioStream.Length AudioStream.Position Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadByte() Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OpusDecodeStream(AudioStream) public OpusDecodeStream(AudioStream next) Parameters next AudioStream Fields SampleRate public const int SampleRate = 48000 Field Value int Methods ClearAsync(CancellationToken) public override Task ClearAsync(CancellationToken cancelToken) Parameters cancelToken CancellationToken Returns Task Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. protected override void Dispose(bool disposing) Parameters disposing bool true to release both managed and unmanaged resources; false to release only unmanaged resources. FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. public override Task FlushAsync(CancellationToken cancelToken) Parameters cancelToken CancellationToken Returns Task A task that represents the asynchronous flush operation. Exceptions ObjectDisposedException The stream has been disposed. WriteAsync(byte[], int, int, CancellationToken) public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancelToken) Parameters buffer byte[] offset int count int cancelToken CancellationToken Returns Task Exceptions InvalidOperationException Received payload without an RTP header. WriteHeader(ushort, uint, bool) public override void WriteHeader(ushort seq, uint timestamp, bool missed) Parameters seq ushort timestamp uint missed bool Exceptions InvalidOperationException Header received with no payload."
  },
  "api/Discord.Audio.Streams.OpusEncodeStream.html": {
    "href": "api/Discord.Audio.Streams.OpusEncodeStream.html",
    "title": "Class OpusEncodeStream | Discord.Net Documentation",
    "keywords": "Class OpusEncodeStream Namespace Discord.Audio.Streams Assembly Discord.Net.WebSocket.dll Converts PCM to Opus public class OpusEncodeStream : AudioOutStream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream AudioStream AudioOutStream OpusEncodeStream Implements IAsyncDisposable IDisposable Inherited Members AudioOutStream.CanWrite AudioOutStream.Read(byte[], int, int) AudioOutStream.SetLength(long) AudioOutStream.Seek(long, SeekOrigin) AudioStream.CanRead AudioStream.CanSeek AudioStream.WriteHeader(ushort, uint, bool) AudioStream.Write(byte[], int, int) AudioStream.Flush() AudioStream.Clear() AudioStream.Length AudioStream.Position Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadByte() Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OpusEncodeStream(AudioStream, int, AudioApplication, int) public OpusEncodeStream(AudioStream next, int bitrate, AudioApplication application, int packetLoss) Parameters next AudioStream bitrate int application AudioApplication packetLoss int Fields SampleRate public const int SampleRate = 48000 Field Value int Methods ClearAsync(CancellationToken) public override Task ClearAsync(CancellationToken cancelToken) Parameters cancelToken CancellationToken Returns Task Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. protected override void Dispose(bool disposing) Parameters disposing bool true to release both managed and unmanaged resources; false to release only unmanaged resources. FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. public override Task FlushAsync(CancellationToken cancelToken) Parameters cancelToken CancellationToken Returns Task A task that represents the asynchronous flush operation. Exceptions ObjectDisposedException The stream has been disposed. WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancelToken) Parameters buffer byte[] The buffer to write data from. offset int The zero-based byte offset in buffer from which to begin copying bytes to the stream. count int The maximum number of bytes to write. cancelToken CancellationToken Returns Task A task that represents the asynchronous write operation. Exceptions ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. WriteSilentFramesAsync() Sends silent frames to avoid interpolation errors after breaks in data transmission. public Task WriteSilentFramesAsync() Returns Task A task representing the asynchronous operation of sending a silent frame."
  },
  "api/Discord.Audio.Streams.OutputStream.html": {
    "href": "api/Discord.Audio.Streams.OutputStream.html",
    "title": "Class OutputStream | Discord.Net Documentation",
    "keywords": "Class OutputStream Namespace Discord.Audio.Streams Assembly Discord.Net.WebSocket.dll Wraps an IAudioClient, sending voice data on write. public class OutputStream : AudioOutStream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream AudioStream AudioOutStream OutputStream Implements IAsyncDisposable IDisposable Inherited Members AudioOutStream.CanWrite AudioOutStream.Read(byte[], int, int) AudioOutStream.SetLength(long) AudioOutStream.Seek(long, SeekOrigin) AudioStream.CanRead AudioStream.CanSeek AudioStream.Write(byte[], int, int) AudioStream.Flush() AudioStream.Clear() AudioStream.ClearAsync(CancellationToken) AudioStream.Length AudioStream.Position Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.Dispose(bool) Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadByte() Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OutputStream(IAudioClient) public OutputStream(IAudioClient client) Parameters client IAudioClient Methods WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancelToken) Parameters buffer byte[] The buffer to write data from. offset int The zero-based byte offset in buffer from which to begin copying bytes to the stream. count int The maximum number of bytes to write. cancelToken CancellationToken Returns Task A task that represents the asynchronous write operation. Exceptions ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. WriteHeader(ushort, uint, bool) public override void WriteHeader(ushort seq, uint timestamp, bool missed) Parameters seq ushort timestamp uint missed bool Exceptions InvalidOperationException This stream does not accept headers."
  },
  "api/Discord.Audio.Streams.RTPReadStream.html": {
    "href": "api/Discord.Audio.Streams.RTPReadStream.html",
    "title": "Class RTPReadStream | Discord.Net Documentation",
    "keywords": "Class RTPReadStream Namespace Discord.Audio.Streams Assembly Discord.Net.WebSocket.dll Reads the payload from an RTP frame public class RTPReadStream : AudioOutStream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream AudioStream AudioOutStream RTPReadStream Implements IAsyncDisposable IDisposable Inherited Members AudioOutStream.Read(byte[], int, int) AudioOutStream.SetLength(long) AudioOutStream.Seek(long, SeekOrigin) AudioStream.WriteHeader(ushort, uint, bool) AudioStream.Write(byte[], int, int) AudioStream.Flush() AudioStream.Clear() AudioStream.ClearAsync(CancellationToken) AudioStream.Length AudioStream.Position Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadByte() Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RTPReadStream(AudioStream, int) public RTPReadStream(AudioStream next, int bufferSize = 4000) Parameters next AudioStream bufferSize int Properties CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. public override bool CanRead { get; } Property Value bool true if the stream supports reading; otherwise, false. CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. public override bool CanSeek { get; } Property Value bool true if the stream supports seeking; otherwise, false. CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. public override bool CanWrite { get; } Property Value bool true if the stream supports writing; otherwise, false. Methods Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. protected override void Dispose(bool disposing) Parameters disposing bool true to release both managed and unmanaged resources; false to release only unmanaged resources. GetHeaderSize(byte[], int) public static int GetHeaderSize(byte[] buffer, int offset) Parameters buffer byte[] offset int Returns int TryReadSsrc(byte[], int, out uint) public static bool TryReadSsrc(byte[] buffer, int offset, out uint ssrc) Parameters buffer byte[] offset int ssrc uint Returns bool WriteAsync(byte[], int, int, CancellationToken) public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancelToken) Parameters buffer byte[] offset int count int cancelToken CancellationToken Returns Task Exceptions OperationCanceledException The token has had cancellation requested. ObjectDisposedException The associated CancellationTokenSource has been disposed."
  },
  "api/Discord.Audio.Streams.RTPWriteStream.html": {
    "href": "api/Discord.Audio.Streams.RTPWriteStream.html",
    "title": "Class RTPWriteStream | Discord.Net Documentation",
    "keywords": "Class RTPWriteStream Namespace Discord.Audio.Streams Assembly Discord.Net.WebSocket.dll Wraps data in an RTP frame public class RTPWriteStream : AudioOutStream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream AudioStream AudioOutStream RTPWriteStream Implements IAsyncDisposable IDisposable Inherited Members AudioOutStream.CanWrite AudioOutStream.Read(byte[], int, int) AudioOutStream.SetLength(long) AudioOutStream.Seek(long, SeekOrigin) AudioStream.CanRead AudioStream.CanSeek AudioStream.Write(byte[], int, int) AudioStream.Flush() AudioStream.Clear() AudioStream.Length AudioStream.Position Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadByte() Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RTPWriteStream(AudioStream, uint, int) public RTPWriteStream(AudioStream next, uint ssrc, int bufferSize = 4000) Parameters next AudioStream ssrc uint bufferSize int Fields _buffer protected readonly byte[] _buffer Field Value byte[] Methods ClearAsync(CancellationToken) public override Task ClearAsync(CancellationToken cancelToken) Parameters cancelToken CancellationToken Returns Task Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. protected override void Dispose(bool disposing) Parameters disposing bool true to release both managed and unmanaged resources; false to release only unmanaged resources. FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. public override Task FlushAsync(CancellationToken cancelToken) Parameters cancelToken CancellationToken Returns Task A task that represents the asynchronous flush operation. Exceptions ObjectDisposedException The stream has been disposed. WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancelToken) Parameters buffer byte[] The buffer to write data from. offset int The zero-based byte offset in buffer from which to begin copying bytes to the stream. count int The maximum number of bytes to write. cancelToken CancellationToken Returns Task A task that represents the asynchronous write operation. Exceptions ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation. WriteHeader(ushort, uint, bool) public override void WriteHeader(ushort seq, uint timestamp, bool missed) Parameters seq ushort timestamp uint missed bool Exceptions InvalidOperationException This stream does not accept headers."
  },
  "api/Discord.Audio.Streams.SodiumDecryptStream.html": {
    "href": "api/Discord.Audio.Streams.SodiumDecryptStream.html",
    "title": "Class SodiumDecryptStream | Discord.Net Documentation",
    "keywords": "Class SodiumDecryptStream Namespace Discord.Audio.Streams Assembly Discord.Net.WebSocket.dll Decrypts an RTP frame using libsodium. public class SodiumDecryptStream : AudioOutStream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream AudioStream AudioOutStream SodiumDecryptStream Implements IAsyncDisposable IDisposable Inherited Members AudioOutStream.Read(byte[], int, int) AudioOutStream.SetLength(long) AudioOutStream.Seek(long, SeekOrigin) AudioStream.WriteHeader(ushort, uint, bool) AudioStream.Write(byte[], int, int) AudioStream.Flush() AudioStream.Clear() AudioStream.Length AudioStream.Position Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadByte() Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SodiumDecryptStream(AudioStream, IAudioClient) public SodiumDecryptStream(AudioStream next, IAudioClient client) Parameters next AudioStream client IAudioClient Properties CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. public override bool CanRead { get; } Property Value bool true if the stream supports reading; otherwise, false. CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. public override bool CanSeek { get; } Property Value bool true if the stream supports seeking; otherwise, false. CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. public override bool CanWrite { get; } Property Value bool true if the stream supports writing; otherwise, false. Methods ClearAsync(CancellationToken) public override Task ClearAsync(CancellationToken cancelToken) Parameters cancelToken CancellationToken Returns Task Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. protected override void Dispose(bool disposing) Parameters disposing bool true to release both managed and unmanaged resources; false to release only unmanaged resources. FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. public override Task FlushAsync(CancellationToken cancelToken) Parameters cancelToken CancellationToken Returns Task A task that represents the asynchronous flush operation. Exceptions ObjectDisposedException The stream has been disposed. WriteAsync(byte[], int, int, CancellationToken) Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests. public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancelToken) Parameters buffer byte[] The buffer to write data from. offset int The zero-based byte offset in buffer from which to begin copying bytes to the stream. count int The maximum number of bytes to write. cancelToken CancellationToken Returns Task A task that represents the asynchronous write operation. Exceptions ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. ObjectDisposedException The stream has been disposed. InvalidOperationException The stream is currently in use by a previous write operation."
  },
  "api/Discord.Audio.Streams.SodiumEncryptStream.html": {
    "href": "api/Discord.Audio.Streams.SodiumEncryptStream.html",
    "title": "Class SodiumEncryptStream | Discord.Net Documentation",
    "keywords": "Class SodiumEncryptStream Namespace Discord.Audio.Streams Assembly Discord.Net.WebSocket.dll Encrypts an RTP frame using libsodium. public class SodiumEncryptStream : AudioOutStream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream AudioStream AudioOutStream SodiumEncryptStream Implements IAsyncDisposable IDisposable Inherited Members AudioOutStream.CanWrite AudioOutStream.Read(byte[], int, int) AudioOutStream.SetLength(long) AudioOutStream.Seek(long, SeekOrigin) AudioStream.CanRead AudioStream.CanSeek AudioStream.Write(byte[], int, int) AudioStream.Flush() AudioStream.Clear() AudioStream.Length AudioStream.Position Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadByte() Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.Write(ReadOnlySpan<byte>) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.WriteByte(byte) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SodiumEncryptStream(AudioStream, IAudioClient) public SodiumEncryptStream(AudioStream next, IAudioClient client) Parameters next AudioStream client IAudioClient Methods ClearAsync(CancellationToken) public override Task ClearAsync(CancellationToken cancelToken) Parameters cancelToken CancellationToken Returns Task Dispose(bool) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. protected override void Dispose(bool disposing) Parameters disposing bool true to release both managed and unmanaged resources; false to release only unmanaged resources. FlushAsync(CancellationToken) Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests. public override Task FlushAsync(CancellationToken cancelToken) Parameters cancelToken CancellationToken Returns Task A task that represents the asynchronous flush operation. Exceptions ObjectDisposedException The stream has been disposed. WriteAsync(byte[], int, int, CancellationToken) public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancelToken) Parameters buffer byte[] offset int count int cancelToken CancellationToken Returns Task Exceptions InvalidOperationException Received payload without an RTP header. OperationCanceledException The token has had cancellation requested. ObjectDisposedException The associated CancellationTokenSource has been disposed. WriteHeader(ushort, uint, bool) public override void WriteHeader(ushort seq, uint timestamp, bool missed) Parameters seq ushort timestamp uint missed bool Exceptions InvalidOperationException Header received with no payload."
  },
  "api/Discord.Audio.Streams.html": {
    "href": "api/Discord.Audio.Streams.html",
    "title": "Namespace Discord.Audio.Streams | Discord.Net Documentation",
    "keywords": "Namespace Discord.Audio.Streams Classes BufferedWriteStream Wraps another stream with a timed buffer. InputStream Reads the payload from an RTP frame OpusDecodeStream Converts Opus to PCM OpusEncodeStream Converts PCM to Opus OutputStream Wraps an IAudioClient, sending voice data on write. RTPReadStream Reads the payload from an RTP frame RTPWriteStream Wraps data in an RTP frame SodiumDecryptStream Decrypts an RTP frame using libsodium. SodiumEncryptStream Encrypts an RTP frame using libsodium."
  },
  "api/Discord.Audio.html": {
    "href": "api/Discord.Audio.html",
    "title": "Namespace Discord.Audio | Discord.Net Documentation",
    "keywords": "Namespace Discord.Audio Classes AudioInStream AudioOutStream AudioStream SecretBox Structs RTPFrame Interfaces IAudioClient Enums AudioApplication"
  },
  "api/Discord.AudioChannelProperties.html": {
    "href": "api/Discord.AudioChannelProperties.html",
    "title": "Class AudioChannelProperties | Discord.Net Documentation",
    "keywords": "Class AudioChannelProperties Namespace Discord Assembly Discord.Net.Core.dll Provides properties that are used to modify an IAudioChannel with the specified changes. public class AudioChannelProperties Inheritance object AudioChannelProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties SelfDeaf Sets whether the user should be deafened. public Optional<bool> SelfDeaf { get; set; } Property Value Optional<bool> SelfMute Sets whether the user should be muted. public Optional<bool> SelfMute { get; set; } Property Value Optional<bool>"
  },
  "api/Discord.AutoModActionType.html": {
    "href": "api/Discord.AutoModActionType.html",
    "title": "Enum AutoModActionType | Discord.Net Documentation",
    "keywords": "Enum AutoModActionType Namespace Discord Assembly Discord.Net.Core.dll public enum AutoModActionType Fields BlockMemberInteraction = 4 Prevents a member from using text, voice, or other interactions. BlockMessage = 1 Blocks the content of a message according to the rule. SendAlertMessage = 2 Logs user content to a specified channel. Timeout = 3 Timeout user for a specified duration."
  },
  "api/Discord.AutoModEventType.html": {
    "href": "api/Discord.AutoModEventType.html",
    "title": "Enum AutoModEventType | Discord.Net Documentation",
    "keywords": "Enum AutoModEventType Namespace Discord Assembly Discord.Net.Core.dll An enum indecating in what event context a rule should be checked. public enum AutoModEventType Fields MemberUpdate = 2 When a member edits their profile. MessageSend = 1 When a member sends or edits a message in the guild."
  },
  "api/Discord.AutoModRuleAction.html": {
    "href": "api/Discord.AutoModRuleAction.html",
    "title": "Class AutoModRuleAction | Discord.Net Documentation",
    "keywords": "Class AutoModRuleAction Namespace Discord Assembly Discord.Net.Core.dll Represents an action that will be preformed if a user breaks an IAutoModRule. public class AutoModRuleAction Inheritance object AutoModRuleAction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Get the channel id on which to post alerts. null if no channel has been provided. public ulong? ChannelId { get; } Property Value ulong? CustomMessage Gets the custom message that will be shown to members whenever their message is blocked. null if no message has been set. public Optional<string> CustomMessage { get; set; } Property Value Optional<string> TimeoutDuration Gets the duration of which a user will be timed out for breaking this rule. null if no timeout duration has been provided. public TimeSpan? TimeoutDuration { get; } Property Value TimeSpan? Type Gets the type for this action. public AutoModActionType Type { get; } Property Value AutoModActionType"
  },
  "api/Discord.AutoModRuleActionProperties.html": {
    "href": "api/Discord.AutoModRuleActionProperties.html",
    "title": "Class AutoModRuleActionProperties | Discord.Net Documentation",
    "keywords": "Class AutoModRuleActionProperties Namespace Discord Assembly Discord.Net.Core.dll Provides properties used to modify a AutoModRuleAction. public class AutoModRuleActionProperties Inheritance object AutoModRuleActionProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Get or sets the channel id on which to post alerts. public ulong? ChannelId { get; set; } Property Value ulong? CustomMessage Gets or sets the custom message that will be shown to members whenever their message is blocked. public Optional<string> CustomMessage { get; set; } Property Value Optional<string> TimeoutDuration Gets or sets the duration of which a user will be timed out for breaking this rule. public TimeSpan? TimeoutDuration { get; set; } Property Value TimeSpan? Type Gets or sets the type for this action. public AutoModActionType Type { get; set; } Property Value AutoModActionType"
  },
  "api/Discord.AutoModRuleProperties.html": {
    "href": "api/Discord.AutoModRuleProperties.html",
    "title": "Class AutoModRuleProperties | Discord.Net Documentation",
    "keywords": "Class AutoModRuleProperties Namespace Discord Assembly Discord.Net.Core.dll Provides properties used to modify a IAutoModRule. public class AutoModRuleProperties Inheritance object AutoModRuleProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields MaxAllowListCountKeyword Returns the max allowlist keyword count for a Keyword AutoMod rule allowed by Discord. public const int MaxAllowListCountKeyword = 100 Field Value int MaxAllowListCountKeywordPreset Returns the max allowlist keyword count for a KeywordPreset AutoMod rule allowed by Discord. public const int MaxAllowListCountKeywordPreset = 1000 Field Value int MaxAllowListEntryLength Returns the max allowlist keyword length for an AutoMod rule allowed by Discord. public const int MaxAllowListEntryLength = 60 Field Value int MaxCustomBlockMessageLength Returns the max custom message length AutoMod rule action allowed by Discord. public const int MaxCustomBlockMessageLength = 50 Field Value int MaxExemptChannels Returns the max exempt channel count for an AutoMod rule allowed by Discord. public const int MaxExemptChannels = 50 Field Value int MaxExemptRoles Returns the max exempt role count for an AutoMod rule allowed by Discord. public const int MaxExemptRoles = 20 Field Value int MaxKeywordCount Returns the max keyword count for an AutoMod rule allowed by Discord. public const int MaxKeywordCount = 1000 Field Value int MaxKeywordLength Returns the max keyword length for an AutoMod rule allowed by Discord. public const int MaxKeywordLength = 60 Field Value int MaxMentionLimit Returns the max mention limit for an AutoMod rule allowed by Discord. public const int MaxMentionLimit = 50 Field Value int MaxRegexPatternCount Returns the max regex pattern count for an AutoMod rule allowed by Discord. public const int MaxRegexPatternCount = 10 Field Value int MaxRegexPatternLength Returns the max regex pattern length for an AutoMod rule allowed by Discord. public const int MaxRegexPatternLength = 260 Field Value int MaxTimeoutSeconds Returns the max timeout duration in seconds for an auto moderation rule action. public const int MaxTimeoutSeconds = 2419200 Field Value int Properties Actions Gets or sets the actions for the rule. public Optional<AutoModRuleActionProperties[]> Actions { get; set; } Property Value Optional<AutoModRuleActionProperties[]> AllowList Gets or sets the allow list for the rule. public Optional<string[]> AllowList { get; set; } Property Value Optional<string[]> Enabled Gets or sets whether or not the rule is enabled. public Optional<bool> Enabled { get; set; } Property Value Optional<bool> EventType Gets or sets the event type for the rule. public Optional<AutoModEventType> EventType { get; set; } Property Value Optional<AutoModEventType> ExemptChannels Gets or sets the exempt channels for the rule. Empty if the rule has no exempt channels. public Optional<ulong[]> ExemptChannels { get; set; } Property Value Optional<ulong[]> ExemptRoles Gets or sets the exempt roles for the rule. Empty if the rule has no exempt roles. public Optional<ulong[]> ExemptRoles { get; set; } Property Value Optional<ulong[]> KeywordFilter Gets or sets the keyword filter for the rule. public Optional<string[]> KeywordFilter { get; set; } Property Value Optional<string[]> MentionLimit Gets or sets total mention limit for the rule. public Optional<int> MentionLimit { get; set; } Property Value Optional<int> Name Gets or sets the name for the rule. public Optional<string> Name { get; set; } Property Value Optional<string> Presets Gets or sets the presets for the rule. Empty if the rule has no presets. public Optional<KeywordPresetTypes[]> Presets { get; set; } Property Value Optional<KeywordPresetTypes[]> RegexPatterns Gets or sets regex patterns for the rule. public Optional<string[]> RegexPatterns { get; set; } Property Value Optional<string[]> TriggerType Gets or sets the trigger type for the rule. public Optional<AutoModTriggerType> TriggerType { get; set; } Property Value Optional<AutoModTriggerType>"
  },
  "api/Discord.AutoModTriggerType.html": {
    "href": "api/Discord.AutoModTriggerType.html",
    "title": "Enum AutoModTriggerType | Discord.Net Documentation",
    "keywords": "Enum AutoModTriggerType Namespace Discord Assembly Discord.Net.Core.dll An enum representing the type of content which can trigger the rule. public enum AutoModTriggerType Fields HarmfulLink = 2 Check if content contains any harmful links. Keyword = 1 Check if content contains words from a user defined list of keywords. KeywordPreset = 4 Check if content contains words from internal pre-defined wordsets. MemberProfile = 6 Check if member profile contains words from a user defined list of keywords. MentionSpam = 5 Check if content contains more unique mentions than allowed. Spam = 3 Check if content represents generic spam."
  },
  "api/Discord.AutocompleteOption.html": {
    "href": "api/Discord.AutocompleteOption.html",
    "title": "Class AutocompleteOption | Discord.Net Documentation",
    "keywords": "Class AutocompleteOption Namespace Discord Assembly Discord.Net.Core.dll Represents an autocomplete option. public class AutocompleteOption Inheritance object AutocompleteOption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Focused Gets whether or not this option is focused by the executing user. public bool Focused { get; } Property Value bool Name Gets the name of the option. public string Name { get; } Property Value string Type Gets the type of this option. public ApplicationCommandOptionType Type { get; } Property Value ApplicationCommandOptionType Value Gets the value of the option. public object Value { get; } Property Value object"
  },
  "api/Discord.AutocompleteResult.html": {
    "href": "api/Discord.AutocompleteResult.html",
    "title": "Class AutocompleteResult | Discord.Net Documentation",
    "keywords": "Class AutocompleteResult Namespace Discord Assembly Discord.Net.Core.dll Represents a result to an autocomplete interaction. public class AutocompleteResult Inheritance object AutocompleteResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AutocompleteResult() Creates a new AutocompleteResult. public AutocompleteResult() AutocompleteResult(string, object) Creates a new AutocompleteResult with the passed in name and value. public AutocompleteResult(string name, object value) Parameters name string value object Exceptions ArgumentNullException ArgumentException Properties Name Gets or sets the name of the result. public string Name { get; set; } Property Value string Remarks Name cannot be null and has to be between 1-100 characters in length. Exceptions ArgumentNullException ArgumentException Value Gets or sets the value of the result. public object Value { get; set; } Property Value object Remarks Only string, int, and double are allowed for a value. Exceptions ArgumentNullException ArgumentException"
  },
  "api/Discord.BotGateway.html": {
    "href": "api/Discord.BotGateway.html",
    "title": "Class BotGateway | Discord.Net Documentation",
    "keywords": "Class BotGateway Namespace Discord Assembly Discord.Net.Core.dll Stores the gateway information related to the current bot. public class BotGateway Inheritance object BotGateway Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties SessionStartLimit Gets the SessionStartLimit that contains the information about the current session start limit. public SessionStartLimit SessionStartLimit { get; } Property Value SessionStartLimit Shards Gets the recommended number of shards to use when connecting. public int Shards { get; } Property Value int Url Gets the WSS URL that can be used for connecting to the gateway. public string Url { get; } Property Value string"
  },
  "api/Discord.ButtonBuilder.html": {
    "href": "api/Discord.ButtonBuilder.html",
    "title": "Class ButtonBuilder | Discord.Net Documentation",
    "keywords": "Class ButtonBuilder Namespace Discord Assembly Discord.Net.Core.dll Represents a class used to build ButtonComponent's. public class ButtonBuilder Inheritance object ButtonBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ButtonBuilder() Creates a new instance of a ButtonBuilder. public ButtonBuilder() ButtonBuilder(ButtonComponent) Creates a new instance of a ButtonBuilder from instance of a ButtonComponent. public ButtonBuilder(ButtonComponent button) Parameters button ButtonComponent ButtonBuilder(string, string, ButtonStyle, string, IEmote, bool) Creates a new instance of a ButtonBuilder. public ButtonBuilder(string label = null, string customId = null, ButtonStyle style = ButtonStyle.Primary, string url = null, IEmote emote = null, bool isDisabled = false) Parameters label string The label to use on the newly created link button. customId string The custom ID of this button. style ButtonStyle The custom ID of this button. url string The url of this button. emote IEmote The emote of this button. isDisabled bool Disabled this button or not. Fields MaxButtonLabelLength The max length of a Label. public const int MaxButtonLabelLength = 80 Field Value int Properties CustomId Gets or sets the custom id of the current button. public string CustomId { get; set; } Property Value string Exceptions ArgumentException CustomId length exceeds MaxCustomIdLength ArgumentException CustomId length subceeds 1. Emote Gets or sets the IEmote of the current button. public IEmote Emote { get; set; } Property Value IEmote IsDisabled Gets or sets whether the current button is disabled. public bool IsDisabled { get; set; } Property Value bool Label Gets or sets the label of the current button. public string Label { get; set; } Property Value string Exceptions ArgumentException Label length exceeds MaxButtonLabelLength. ArgumentException Label length exceeds MaxButtonLabelLength. Style Gets or sets the ButtonStyle of the current button. public ButtonStyle Style { get; set; } Property Value ButtonStyle Url Gets or sets the url of the current button. public string Url { get; set; } Property Value string Methods Build() Builds this builder into a ButtonComponent to be used in a ComponentBuilder. public ButtonComponent Build() Returns ButtonComponent A ButtonComponent to be used in a ComponentBuilder. Exceptions InvalidOperationException A button must contain either a Url or a CustomId, but not both. InvalidOperationException A button must have an Emote or a Label. InvalidOperationException A link button must contain a URL. InvalidOperationException A URL must include a protocol (http or https). InvalidOperationException A non-link button must contain a custom id CreateDangerButton(string, string, IEmote) Creates a button with the Danger style. public static ButtonBuilder CreateDangerButton(string label, string customId, IEmote emote = null) Parameters label string The label for this danger button. customId string The custom id for this danger button. emote IEmote The emote for this danger button. Returns ButtonBuilder A builder with the newly created button. CreateLinkButton(string, string, IEmote) Creates a button with the Link style. public static ButtonBuilder CreateLinkButton(string label, string url, IEmote emote = null) Parameters label string The label for this link button. url string The url for this link button to go to. emote IEmote The emote for this link button. Returns ButtonBuilder A builder with the newly created button. CreatePrimaryButton(string, string, IEmote) Creates a button with the Primary style. public static ButtonBuilder CreatePrimaryButton(string label, string customId, IEmote emote = null) Parameters label string The label for this primary button. customId string The custom id for this primary button. emote IEmote The emote for this primary button. Returns ButtonBuilder A builder with the newly created button. CreateSecondaryButton(string, string, IEmote) Creates a button with the Secondary style. public static ButtonBuilder CreateSecondaryButton(string label, string customId, IEmote emote = null) Parameters label string The label for this secondary button. customId string The custom id for this secondary button. emote IEmote The emote for this secondary button. Returns ButtonBuilder A builder with the newly created button. CreateSuccessButton(string, string, IEmote) Creates a button with the Success style. public static ButtonBuilder CreateSuccessButton(string label, string customId, IEmote emote = null) Parameters label string The label for this success button. customId string The custom id for this success button. emote IEmote The emote for this success button. Returns ButtonBuilder A builder with the newly created button. WithCustomId(string) Sets the custom id of the current button. public ButtonBuilder WithCustomId(string id) Parameters id string The id to use for the current button. Returns ButtonBuilder The current builder. Exceptions ArgumentException CustomId length exceeds MaxCustomIdLength ArgumentException CustomId length subceeds 1. WithDisabled(bool) Sets whether the current button is disabled. public ButtonBuilder WithDisabled(bool isDisabled) Parameters isDisabled bool Whether the current button is disabled or not. Returns ButtonBuilder The current builder. WithEmote(IEmote) Sets the current buttons emote. public ButtonBuilder WithEmote(IEmote emote) Parameters emote IEmote The emote to use for the current button. Returns ButtonBuilder The current builder. WithLabel(string) Sets the current buttons label to the specified text. public ButtonBuilder WithLabel(string label) Parameters label string The text for the label. Returns ButtonBuilder The current builder. Exceptions ArgumentException Label length exceeds MaxButtonLabelLength. ArgumentException Label length exceeds MaxButtonLabelLength. WithStyle(ButtonStyle) Sets the current buttons style. public ButtonBuilder WithStyle(ButtonStyle style) Parameters style ButtonStyle The style for this builders button. Returns ButtonBuilder The current builder. WithUrl(string) Sets the current buttons url. public ButtonBuilder WithUrl(string url) Parameters url string The url to use for the current button. Returns ButtonBuilder The current builder."
  },
  "api/Discord.ButtonComponent.html": {
    "href": "api/Discord.ButtonComponent.html",
    "title": "Class ButtonComponent | Discord.Net Documentation",
    "keywords": "Class ButtonComponent Namespace Discord Assembly Discord.Net.Core.dll Represents a IMessageComponent Button. public class ButtonComponent : IMessageComponent Inheritance object ButtonComponent Implements IMessageComponent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CustomId Gets the custom id of the component if possible; otherwise null. public string CustomId { get; } Property Value string Emote Gets the IEmote displayed with this button. public IEmote Emote { get; } Property Value IEmote IsDisabled Gets whether this button is disabled or not. public bool IsDisabled { get; } Property Value bool Label Gets the label of the button, this is the text that is shown. public string Label { get; } Property Value string Style Gets the ButtonStyle of this button, example buttons with each style can be found Here. public ButtonStyle Style { get; } Property Value ButtonStyle Type Gets the ComponentType of this Message Component. public ComponentType Type { get; } Property Value ComponentType Url Gets the URL for a Link button. public string Url { get; } Property Value string Remarks You cannot have a button with a URL and a CustomId. Methods ToBuilder() Turns this button into a button builder. public ButtonBuilder ToBuilder() Returns ButtonBuilder A newly created button builder with the same properties as this button."
  },
  "api/Discord.ButtonStyle.html": {
    "href": "api/Discord.ButtonStyle.html",
    "title": "Enum ButtonStyle | Discord.Net Documentation",
    "keywords": "Enum ButtonStyle Namespace Discord Assembly Discord.Net.Core.dll Represents different styles to use with buttons. You can see an example of the different styles at https://discord.com/developers/docs/interactions/message-components#buttons-button-styles public enum ButtonStyle Fields Danger = 4 A Red button Link = 5 A Secondary button with a little popup box indicating that this button is a link. Primary = 1 A Blurple button Secondary = 2 A Grey (or gray) button Success = 3 A Green button"
  },
  "api/Discord.CDN.html": {
    "href": "api/Discord.CDN.html",
    "title": "Class CDN | Discord.Net Documentation",
    "keywords": "Class CDN Namespace Discord Assembly Discord.Net.Core.dll Represents a class containing the strings related to various Content Delivery Networks (CDNs). public static class CDN Inheritance object CDN Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetApplicationIconUrl(ulong, string) Returns an application icon URL. public static string GetApplicationIconUrl(ulong appId, string iconId) Parameters appId ulong The application identifier. iconId string The icon identifier. Returns string A URL pointing to the application's icon. GetAvatarDecorationUrl(string) Gets an avatar decoration url based off the hash. public static string GetAvatarDecorationUrl(string avatarDecorationHash) Parameters avatarDecorationHash string The hash of the avatar decoraition. Returns string A URL to the avatar decoration. GetChannelIconUrl(ulong, string) Returns a channel icon URL. public static string GetChannelIconUrl(ulong channelId, string iconId) Parameters channelId ulong The channel snowflake identifier. iconId string The icon identifier. Returns string A URL pointing to the channel's icon. GetDefaultUserAvatarUrl(ushort) Returns the default user avatar URL. public static string GetDefaultUserAvatarUrl(ushort discriminator) Parameters discriminator ushort The discriminator value of a user. Returns string A URL pointing to the user's default avatar when one isn't set. GetDefaultUserAvatarUrl(ulong) Returns the default user avatar URL. public static string GetDefaultUserAvatarUrl(ulong userId) Parameters userId ulong The Id of a user. Returns string A URL pointing to the user's default avatar when one isn't set. GetEmojiUrl(ulong, bool) Returns an emoji URL. public static string GetEmojiUrl(ulong emojiId, bool animated) Parameters emojiId ulong The emoji snowflake identifier. animated bool Whether this emoji is animated. Returns string A URL pointing to the custom emote. GetEventCoverImageUrl(ulong, ulong, string, ImageFormat, ushort) Returns an events cover image url. null if the assetId null. public static string GetEventCoverImageUrl(ulong guildId, ulong eventId, string assetId, ImageFormat format = ImageFormat.Auto, ushort size = 1024) Parameters guildId ulong The guild id that the event is in. eventId ulong The id of the event. assetId string The id of the cover image asset. format ImageFormat The format of the image. size ushort The size of the image. Returns string GetGuildBannerUrl(ulong, string, ImageFormat, ushort?) Returns a guild banner URL. public static string GetGuildBannerUrl(ulong guildId, string bannerId, ImageFormat format, ushort? size = null) Parameters guildId ulong The guild snowflake identifier. bannerId string The banner image identifier. format ImageFormat The format to return. size ushort? The size of the image to return in horizontal pixels. This can be any power of two between 16 and 2048 inclusive. Returns string A URL pointing to the guild's banner image. GetGuildDiscoverySplashUrl(ulong, string) Returns a guild discovery splash URL. public static string GetGuildDiscoverySplashUrl(ulong guildId, string discoverySplashId) Parameters guildId ulong The guild snowflake identifier. discoverySplashId string The discovery splash icon identifier. Returns string A URL pointing to the guild's discovery splash. GetGuildIconUrl(ulong, string) Returns an icon URL. public static string GetGuildIconUrl(ulong guildId, string iconId) Parameters guildId ulong The guild snowflake identifier. iconId string The icon identifier. Returns string A URL pointing to the guild's icon. GetGuildRoleIconUrl(ulong, string) Returns a guild role's icon URL. public static string GetGuildRoleIconUrl(ulong roleId, string roleHash) Parameters roleId ulong The role identifier. roleHash string The icon hash. Returns string A URL pointing to the guild role's icon. GetGuildSplashUrl(ulong, string) Returns a guild splash URL. public static string GetGuildSplashUrl(ulong guildId, string splashId) Parameters guildId ulong The guild snowflake identifier. splashId string The splash icon identifier. Returns string A URL pointing to the guild's splash. GetGuildUserAvatarUrl(ulong, ulong, string, ushort, ImageFormat) public static string GetGuildUserAvatarUrl(ulong userId, ulong guildId, string avatarId, ushort size, ImageFormat format) Parameters userId ulong guildId ulong avatarId string size ushort format ImageFormat Returns string GetRichAssetUrl(ulong, string, ushort, ImageFormat) Returns a Rich Presence asset URL. public static string GetRichAssetUrl(ulong appId, string assetId, ushort size, ImageFormat format) Parameters appId ulong The application identifier. assetId string The asset identifier. size ushort The size of the image to return in. This can be any power of two between 16 and 2048. format ImageFormat The format to return. Returns string A URL pointing to the asset image in the specified size. GetSpotifyAlbumArtUrl(string) Returns a Spotify album URL. public static string GetSpotifyAlbumArtUrl(string albumArtId) Parameters albumArtId string The identifier for the album art (e.g. 6be8f4c8614ecf4f1dd3ebba8d8692d8ce4951ac). Returns string A URL pointing to the Spotify album art. GetSpotifyDirectUrl(string) Returns a Spotify direct URL for a track. public static string GetSpotifyDirectUrl(string trackId) Parameters trackId string The identifier for the track (e.g. 4uLU6hMCjMI75M1A2tKUQC). Returns string A URL pointing to the Spotify track. GetStickerUrl(ulong, StickerFormatType) Gets a stickers url based off the id and format. public static string GetStickerUrl(ulong stickerId, StickerFormatType format = StickerFormatType.Png) Parameters stickerId ulong The id of the sticker. format StickerFormatType The format of the sticker. Returns string A URL to the sticker. GetTeamIconUrl(ulong, string) Returns a team icon URL. public static string GetTeamIconUrl(ulong teamId, string iconId) Parameters teamId ulong The team identifier. iconId string The icon identifier. Returns string A URL pointing to the team's icon. GetUserAvatarUrl(ulong, string, ushort, ImageFormat) Returns a user avatar URL. public static string GetUserAvatarUrl(ulong userId, string avatarId, ushort size, ImageFormat format) Parameters userId ulong The user snowflake identifier. avatarId string The avatar identifier. size ushort The size of the image to return in horizontal pixels. This can be any power of two between 16 and 2048. format ImageFormat The format to return. Returns string A URL pointing to the user's avatar in the specified size. GetUserBannerUrl(ulong, string, ushort, ImageFormat) Returns a user banner URL. public static string GetUserBannerUrl(ulong userId, string bannerId, ushort size, ImageFormat format) Parameters userId ulong The user snowflake identifier. bannerId string The banner identifier. size ushort The size of the image to return in horizontal pixels. This can be any power of two between 16 and 2048. format ImageFormat The format to return. Returns string A URL pointing to the user's banner in the specified size."
  },
  "api/Discord.CacheMode.html": {
    "href": "api/Discord.CacheMode.html",
    "title": "Enum CacheMode | Discord.Net Documentation",
    "keywords": "Enum CacheMode Namespace Discord Assembly Discord.Net.Core.dll Specifies the cache mode that should be used. public enum CacheMode Fields AllowDownload = 0 Allows the object to be downloaded if it does not exist in the current cache. CacheOnly = 1 Only allows the object to be pulled from the existing cache."
  },
  "api/Discord.Cacheable-2.html": {
    "href": "api/Discord.Cacheable-2.html",
    "title": "Struct Cacheable<TEntity, TId> | Discord.Net Documentation",
    "keywords": "Struct Cacheable<TEntity, TId> Namespace Discord Assembly Discord.Net.Core.dll Represents a cached entity. public struct Cacheable<TEntity, TId> where TEntity : IEntity<TId> where TId : IEquatable<TId> Type Parameters TEntity The type of entity that is cached. TId The type of this entity's ID. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties HasValue Gets whether this entity is cached. public readonly bool HasValue { get; } Property Value bool Id Gets the ID of this entity. public readonly TId Id { get; } Property Value TId Value Gets the entity if it could be pulled from cache. public readonly TEntity Value { get; } Property Value TEntity Remarks This value is not guaranteed to be set; in cases where the entity cannot be pulled from cache, it is null. Methods DownloadAsync() Downloads this entity to cache. public Task<TEntity> DownloadAsync() Returns Task<TEntity> A task that represents the asynchronous download operation. The task result contains the downloaded entity. Exceptions HttpException Thrown when used from a user account. NullReferenceException Thrown when the message is deleted. GetOrDownloadAsync() Returns the cached entity if it exists; otherwise downloads it. public Task<TEntity> GetOrDownloadAsync() Returns Task<TEntity> A task that represents the asynchronous operation that attempts to get the message via cache or to download the message. The task result contains the downloaded entity. Exceptions HttpException Thrown when used from a user account. NullReferenceException Thrown when the message is deleted and is not in cache."
  },
  "api/Discord.Cacheable-4.html": {
    "href": "api/Discord.Cacheable-4.html",
    "title": "Struct Cacheable<TCachedEntity, TDownloadableEntity, TRelationship, TId> | Discord.Net Documentation",
    "keywords": "Struct Cacheable<TCachedEntity, TDownloadableEntity, TRelationship, TId> Namespace Discord Assembly Discord.Net.Core.dll public struct Cacheable<TCachedEntity, TDownloadableEntity, TRelationship, TId> where TCachedEntity : IEntity<TId>, TRelationship where TDownloadableEntity : IEntity<TId>, TRelationship where TId : IEquatable<TId> Type Parameters TCachedEntity TDownloadableEntity TRelationship TId Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties HasValue Gets whether this entity is cached. public readonly bool HasValue { get; } Property Value bool Id Gets the ID of this entity. public readonly TId Id { get; } Property Value TId Value Gets the entity if it could be pulled from cache. public readonly TCachedEntity Value { get; } Property Value TCachedEntity Remarks This value is not guaranteed to be set; in cases where the entity cannot be pulled from cache, it is null. Methods DownloadAsync() Downloads this entity. public Task<TDownloadableEntity> DownloadAsync() Returns Task<TDownloadableEntity> A task that represents the asynchronous download operation. The task result contains the downloaded entity. Exceptions HttpException Thrown when used from a user account. NullReferenceException Thrown when the message is deleted. GetOrDownloadAsync() Returns the cached entity if it exists; otherwise downloads it. public Task<TRelationship> GetOrDownloadAsync() Returns Task<TRelationship> A task that represents the asynchronous operation that attempts to get the message via cache or to download the message. The task result contains the downloaded entity. Exceptions HttpException Thrown when used from a user account. NullReferenceException Thrown when the message is deleted and is not in cache."
  },
  "api/Discord.ChannelExtensions.html": {
    "href": "api/Discord.ChannelExtensions.html",
    "title": "Class ChannelExtensions | Discord.Net Documentation",
    "keywords": "Class ChannelExtensions Namespace Discord Assembly Discord.Net.Core.dll public static class ChannelExtensions Inheritance object ChannelExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetChannelType(IChannel) Attempts to get the ChannelType based off of the channel's interfaces. public static ChannelType? GetChannelType(this IChannel channel) Parameters channel IChannel The channel to get the type of. Returns ChannelType? The ChannelType of the channel if found, otherwise null."
  },
  "api/Discord.ChannelFlags.html": {
    "href": "api/Discord.ChannelFlags.html",
    "title": "Enum ChannelFlags | Discord.Net Documentation",
    "keywords": "Enum ChannelFlags Namespace Discord Assembly Discord.Net.Core.dll Represents public flags for a channel. public enum ChannelFlags Fields HideMediaDownloadOption = 32768 Flag given to a media channel that hides the embedded media download options. None = 0 Default value for flags, when none are given to a channel. Pinned = 2 Flag given to a thread channel pinned on top of parent forum channel. RequireTag = 16 Flag given to a forum or media channel that requires people to select tags when posting."
  },
  "api/Discord.ChannelPermission.html": {
    "href": "api/Discord.ChannelPermission.html",
    "title": "Enum ChannelPermission | Discord.Net Documentation",
    "keywords": "Enum ChannelPermission Namespace Discord Assembly Discord.Net.Core.dll Defines the available permissions for a channel. [Flags] public enum ChannelPermission : ulong Fields AddReactions = 64 Allows for the addition of reactions to messages. AttachFiles = 32768 Allows for uploading images and files. Connect = 1048576 Allows for joining of a voice channel. CreateEvents = 17592186044416 Allows members to edit and cancel events in this channel. CreateInstantInvite = 1 Allows creation of instant invites. CreatePrivateThreads = 68719476736 Allows for creating private threads. CreatePublicThreads = 34359738368 Allows for creating public threads. DeafenMembers = 8388608 Allows for deafening of members in a voice channel. EmbedLinks = 16384 Allows links sent by users with this permission will be auto-embedded. ManageChannels = 16 Allows management and editing of channels. ManageEmojis = 1073741824 Allows management and editing of emojis. ManageMessages = 8192 Allows for deletion of other users messages. ManageRoles = 268435456 Allows management and editing of roles. ManageThreads = 17179869184 Allows for deleting and archiving threads, and viewing all private threads ManageWebhooks = 536870912 Allows management and editing of webhooks. MentionEveryone = 131072 Allows for using the @everyone tag to notify all users in a channel, and the @here tag to notify all online users in a channel. MoveMembers = 16777216 Allows for moving of members between voice channels. MuteMembers = 4194304 Allows for muting members in a voice channel. PrioritySpeaker = 256 Allows for using priority speaker in a voice channel. ReadMessageHistory = 65536 Allows for reading of message history. RequestToSpeak = 4294967296 Allows for requesting to speak in stage channels. (This permission is under active development and may be changed or removed.) SendMessages = 2048 Allows for sending messages in a channel. SendMessagesInThreads = 274877906944 Allows for sending messages in threads. SendTTSMessages = 4096 Allows for sending of text-to-speech messages. SendVoiceMessages = 70368744177664 Allows sending voice messages. SetVoiceChannelStatus = 281474976710656 Allows setting voice channel status. Speak = 2097152 Allows for speaking in a voice channel. StartEmbeddedActivities = 549755813888 Allows for launching activities (applications with the EMBEDDED flag) in a voice channel. Stream = 512 Allows video streaming in a voice channel. UseApplicationCommands = 2147483648 Allows members to use slash commands in text channels. UseClydeAI = 140737488355328 Allows members to interact with the Clyde AI bot. UseExternalEmojis = 262144 Allows the usage of custom emojis from other servers. UseExternalStickers = 137438953472 Allows the usage of custom stickers from other servers. UseSoundboard = 4398046511104 Allows for using the soundboard in a voice channel. UseVAD = 33554432 Allows for using voice-activity-detection in a voice channel. ViewChannel = 1024 Allows guild members to view a channel, which includes reading messages in text channels."
  },
  "api/Discord.ChannelPermissions.html": {
    "href": "api/Discord.ChannelPermissions.html",
    "title": "Struct ChannelPermissions | Discord.Net Documentation",
    "keywords": "Struct ChannelPermissions Namespace Discord Assembly Discord.Net.Core.dll public struct ChannelPermissions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ChannelPermissions(bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool) Creates a new ChannelPermissions with the provided permissions. public ChannelPermissions(bool createInstantInvite = false, bool manageChannel = false, bool addReactions = false, bool viewChannel = false, bool sendMessages = false, bool sendTTSMessages = false, bool manageMessages = false, bool embedLinks = false, bool attachFiles = false, bool readMessageHistory = false, bool mentionEveryone = false, bool useExternalEmojis = false, bool connect = false, bool speak = false, bool muteMembers = false, bool deafenMembers = false, bool moveMembers = false, bool useVoiceActivation = false, bool prioritySpeaker = false, bool stream = false, bool manageRoles = false, bool manageWebhooks = false, bool useApplicationCommands = false, bool requestToSpeak = false, bool manageThreads = false, bool createPublicThreads = false, bool createPrivateThreads = false, bool useExternalStickers = false, bool sendMessagesInThreads = false, bool startEmbeddedActivities = false, bool useSoundboard = false, bool createEvents = false, bool sendVoiceMessages = false, bool useClydeAI = false, bool setVoiceChannelStatus = false) Parameters createInstantInvite bool manageChannel bool addReactions bool viewChannel bool sendMessages bool sendTTSMessages bool manageMessages bool embedLinks bool attachFiles bool readMessageHistory bool mentionEveryone bool useExternalEmojis bool connect bool speak bool muteMembers bool deafenMembers bool moveMembers bool useVoiceActivation bool prioritySpeaker bool stream bool manageRoles bool manageWebhooks bool useApplicationCommands bool requestToSpeak bool manageThreads bool createPublicThreads bool createPrivateThreads bool useExternalStickers bool sendMessagesInThreads bool startEmbeddedActivities bool useSoundboard bool createEvents bool sendVoiceMessages bool useClydeAI bool setVoiceChannelStatus bool ChannelPermissions(ulong) Creates a new ChannelPermissions with the provided packed value. public ChannelPermissions(ulong rawValue) Parameters rawValue ulong Fields Category Gets a ChannelPermissions that grants all permissions for category channels. public static readonly ChannelPermissions Category Field Value ChannelPermissions DM Gets a ChannelPermissions that grants all permissions for direct message channels. public static readonly ChannelPermissions DM Field Value ChannelPermissions Forum Gets a ChannelPermissions that grants all permissions for forum channels. public static readonly ChannelPermissions Forum Field Value ChannelPermissions Group Gets a ChannelPermissions that grants all permissions for group channels. public static readonly ChannelPermissions Group Field Value ChannelPermissions Media Gets a ChannelPermissions that grants all permissions for media channels. public static readonly ChannelPermissions Media Field Value ChannelPermissions None Gets a blank ChannelPermissions that grants no permissions. public static readonly ChannelPermissions None Field Value ChannelPermissions A ChannelPermissions structure that does not contain any set permissions. Stage Gets a ChannelPermissions that grants all permissions for stage channels. public static readonly ChannelPermissions Stage Field Value ChannelPermissions Text Gets a ChannelPermissions that grants all permissions for text channels. public static readonly ChannelPermissions Text Field Value ChannelPermissions Voice Gets a ChannelPermissions that grants all permissions for voice channels. public static readonly ChannelPermissions Voice Field Value ChannelPermissions Properties AddReactions If true, a user may add reactions. public bool AddReactions { get; } Property Value bool AttachFiles If true, a user may send files. public bool AttachFiles { get; } Property Value bool Connect If true, a user may connect to a voice channel. public bool Connect { get; } Property Value bool CreateEvents If true, a user can edit and cancel events in this channel. public bool CreateEvents { get; } Property Value bool CreateInstantInvite If true, a user may create invites. public bool CreateInstantInvite { get; } Property Value bool CreatePrivateThreads If true, a user may create private threads in this guild. public bool CreatePrivateThreads { get; } Property Value bool CreatePublicThreads If true, a user may create public threads in this guild. public bool CreatePublicThreads { get; } Property Value bool DeafenMembers If true, a user may deafen users. public bool DeafenMembers { get; } Property Value bool EmbedLinks If true, Discord will auto-embed links sent by this user. public bool EmbedLinks { get; } Property Value bool ManageChannel If true, a user may create, delete and modify this channel. public bool ManageChannel { get; } Property Value bool ManageMessages If true, a user may delete messages. public bool ManageMessages { get; } Property Value bool ManageRoles If true, a user may adjust role permissions. This also implicitly grants all other permissions. public bool ManageRoles { get; } Property Value bool ManageThreads If true, a user may manage threads in this guild. public bool ManageThreads { get; } Property Value bool ManageWebhooks If true, a user may edit the webhooks for this channel. public bool ManageWebhooks { get; } Property Value bool MentionEveryone If true, a user may mention @everyone. public bool MentionEveryone { get; } Property Value bool MoveMembers If true, a user may move other users between voice channels. public bool MoveMembers { get; } Property Value bool MuteMembers If true, a user may mute users. public bool MuteMembers { get; } Property Value bool PrioritySpeaker If true, a user may use priority speaker in a voice channel. public bool PrioritySpeaker { get; } Property Value bool RawValue Gets a packed value representing all the permissions in this ChannelPermissions. public readonly ulong RawValue { get; } Property Value ulong ReadMessageHistory If true, a user may read previous messages. public bool ReadMessageHistory { get; } Property Value bool RequestToSpeak If true, a user may request to speak in stage channels. public bool RequestToSpeak { get; } Property Value bool SendMessages If true, a user may send messages. public bool SendMessages { get; } Property Value bool SendMessagesInThreads If true, a user may send messages in threads in this guild. public bool SendMessagesInThreads { get; } Property Value bool SendTTSMessages If true, a user may send text-to-speech messages. public bool SendTTSMessages { get; } Property Value bool SendVoiceMessages If true, a user can send voice messages in this channel. public bool SendVoiceMessages { get; } Property Value bool SetVoiceChannelStatus If true, a user can set the status of a voice channel. public bool SetVoiceChannelStatus { get; } Property Value bool Speak If true, a user may speak in a voice channel. public bool Speak { get; } Property Value bool StartEmbeddedActivities If true, a user launch application activities in voice channels in this guild. public bool StartEmbeddedActivities { get; } Property Value bool Stream If true, a user may stream video in a voice channel. public bool Stream { get; } Property Value bool UseApplicationCommands If true, a user may use application commands in this guild. public bool UseApplicationCommands { get; } Property Value bool UseClydeAI If true, a user can use the Clyde AI bot in this channel. public bool UseClydeAI { get; } Property Value bool UseExternalEmojis If true, a user may use custom emoji from other guilds. public bool UseExternalEmojis { get; } Property Value bool UseExternalStickers If true, a user may use external stickers in this guild. public bool UseExternalStickers { get; } Property Value bool UseSoundboard If true, a user can use soundboard in a voice channel. public bool UseSoundboard { get; } Property Value bool UseVAD If true, a user may use voice-activity-detection rather than push-to-talk. public bool UseVAD { get; } Property Value bool ViewChannel If true, a user may view channels. public bool ViewChannel { get; } Property Value bool Methods All(IChannel) Gets a ChannelPermissions that grants all permissions for a given channel type. public static ChannelPermissions All(IChannel channel) Parameters channel IChannel Returns ChannelPermissions Exceptions ArgumentException Unknown channel type. Has(ChannelPermission) public bool Has(ChannelPermission permission) Parameters permission ChannelPermission Returns bool Modify(bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?) Creates a new ChannelPermissions from this one, changing the provided non-null permissions. public ChannelPermissions Modify(bool? createInstantInvite = null, bool? manageChannel = null, bool? addReactions = null, bool? viewChannel = null, bool? sendMessages = null, bool? sendTTSMessages = null, bool? manageMessages = null, bool? embedLinks = null, bool? attachFiles = null, bool? readMessageHistory = null, bool? mentionEveryone = null, bool? useExternalEmojis = null, bool? connect = null, bool? speak = null, bool? muteMembers = null, bool? deafenMembers = null, bool? moveMembers = null, bool? useVoiceActivation = null, bool? prioritySpeaker = null, bool? stream = null, bool? manageRoles = null, bool? manageWebhooks = null, bool? useApplicationCommands = null, bool? requestToSpeak = null, bool? manageThreads = null, bool? createPublicThreads = null, bool? createPrivateThreads = null, bool? useExternalStickers = null, bool? sendMessagesInThreads = null, bool? startEmbeddedActivities = null, bool? useSoundboard = null, bool? createEvents = null, bool? sendVoiceMessages = null, bool? useClydeAI = null, bool? setVoiceChannelStatus = null) Parameters createInstantInvite bool? manageChannel bool? addReactions bool? viewChannel bool? sendMessages bool? sendTTSMessages bool? manageMessages bool? embedLinks bool? attachFiles bool? readMessageHistory bool? mentionEveryone bool? useExternalEmojis bool? connect bool? speak bool? muteMembers bool? deafenMembers bool? moveMembers bool? useVoiceActivation bool? prioritySpeaker bool? stream bool? manageRoles bool? manageWebhooks bool? useApplicationCommands bool? requestToSpeak bool? manageThreads bool? createPublicThreads bool? createPrivateThreads bool? useExternalStickers bool? sendMessagesInThreads bool? startEmbeddedActivities bool? useSoundboard bool? createEvents bool? sendVoiceMessages bool? useClydeAI bool? setVoiceChannelStatus bool? Returns ChannelPermissions ToList() public List<ChannelPermission> ToList() Returns List<ChannelPermission> ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name."
  },
  "api/Discord.ChannelType.html": {
    "href": "api/Discord.ChannelType.html",
    "title": "Enum ChannelType | Discord.Net Documentation",
    "keywords": "Enum ChannelType Namespace Discord Assembly Discord.Net.Core.dll Defines the types of channels. public enum ChannelType Fields Category = 4 The channel is a category channel. DM = 1 The channel is a Direct Message channel. Forum = 15 The channel is a forum channel containing multiple threads. Group = 3 The channel is a group channel. GuildDirectory = 14 The channel is a guild directory used in hub servers. (Unreleased) Media = 16 The channel is a media channel containing multiple threads. News = 5 The channel is a news channel. NewsThread = 10 The channel is a temporary thread channel under a news channel. PrivateThread = 12 The channel is a private temporary thread channel under a text channel. PublicThread = 11 The channel is a temporary thread channel under a text channel. Stage = 13 The channel is a stage voice channel. Store = 6 The channel is a store channel. Text = 0 The channel is a text channel. Voice = 2 The channel is a voice channel."
  },
  "api/Discord.ClientType.html": {
    "href": "api/Discord.ClientType.html",
    "title": "Enum ClientType | Discord.Net Documentation",
    "keywords": "Enum ClientType Namespace Discord Assembly Discord.Net.Core.dll Defines the types of clients a user can be active on. public enum ClientType Fields Desktop = 1 The user is active using the desktop application. Mobile = 0 The user is active using the mobile application. Web = 2 The user is active using the web application."
  },
  "api/Discord.Color.html": {
    "href": "api/Discord.Color.html",
    "title": "Struct Color | Discord.Net Documentation",
    "keywords": "Struct Color Namespace Discord Assembly Discord.Net.Core.dll Represents a color used in Discord. public struct Color Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Color(byte, byte, byte) Initializes a Color struct with the given RGB bytes. public Color(byte r, byte g, byte b) Parameters r byte The byte that represents the red color. g byte The byte that represents the green color. b byte The byte that represents the blue color. Examples The following will create a color that has a value of #607D8B. Color darkGrey = new Color((byte)0b_01100000, (byte)0b_01111101, (byte)0b_10001011); Exceptions ArgumentException Value exceeds MaxDecimalValue. Color(int, int, int) Initializes a Color struct with the given RGB value. public Color(int r, int g, int b) Parameters r int The value that represents the red color. Must be within 0~255. g int The value that represents the green color. Must be within 0~255. b int The value that represents the blue color. Must be within 0~255. Examples The following will create a color that has a value of #607D8B. Color darkGrey = new Color(96, 125, 139); Exceptions ArgumentOutOfRangeException The argument value is not between 0 to 255. Color(float, float, float) Initializes a Color struct with the given RGB float value. public Color(float r, float g, float b) Parameters r float The value that represents the red color. Must be within 0~1. g float The value that represents the green color. Must be within 0~1. b float The value that represents the blue color. Must be within 0~1. Examples The following will create a color that has a value of #607c8c. Color darkGrey = new Color(0.38f, 0.49f, 0.55f); Exceptions ArgumentOutOfRangeException The argument value is not between 0 to 1. Color(uint) Initializes a Color struct with the given raw value. public Color(uint rawValue) Parameters rawValue uint The raw value of the color (e.g. 0x607D8B). Examples The following will create a color that has a hex value of #607D8B. Color darkGrey = new Color(0x607D8B); Exceptions ArgumentException Value exceeds MaxDecimalValue. Fields Blue Gets the blue color value. public static readonly Color Blue Field Value Color A color struct with the hex value of 3498DB. DarkBlue Gets the dark blue color value. public static readonly Color DarkBlue Field Value Color A color struct with the hex value of 206694. DarkGreen Gets the dark green color value. public static readonly Color DarkGreen Field Value Color A color struct with the hex value of 1F8B4C. DarkGrey Gets the dark grey color value. public static readonly Color DarkGrey Field Value Color A color struct with the hex value of 607D8B. DarkMagenta Gets the dark magenta color value. public static readonly Color DarkMagenta Field Value Color A color struct with the hex value of AD1457. DarkOrange Gets the dark orange color value. public static readonly Color DarkOrange Field Value Color A color struct with the hex value of A84300. DarkPurple Gets the dark purple color value. public static readonly Color DarkPurple Field Value Color A color struct with the hex value of 71368A. DarkRed Gets the dark red color value. public static readonly Color DarkRed Field Value Color A color struct with the hex value of 992D22. DarkTeal Gets the dark teal color value. public static readonly Color DarkTeal Field Value Color A color struct with the hex value of 11806A. DarkerGrey Gets the darker grey color value. public static readonly Color DarkerGrey Field Value Color A color struct with the hex value of 546E7A. Default Gets the default user color value. public static readonly Color Default Field Value Color Gold Gets the gold color value. public static readonly Color Gold Field Value Color A color struct with the hex value of F1C40F. Green Gets the green color value. public static readonly Color Green Field Value Color A color struct with the hex value of 2ECC71. LightGrey Gets the light grey color value. public static readonly Color LightGrey Field Value Color A color struct with the hex value of 979C9F. LightOrange Gets the light orange color value. public static readonly Color LightOrange Field Value Color A color struct with the hex value of C27C0E. LighterGrey Gets the lighter grey color value. public static readonly Color LighterGrey Field Value Color A color struct with the hex value of 95A5A6. Magenta Gets the magenta color value. public static readonly Color Magenta Field Value Color A color struct with the hex value of E91E63. MaxDecimalValue Gets the max decimal value of color. public const uint MaxDecimalValue = 16777215 Field Value uint Orange Gets the orange color value. public static readonly Color Orange Field Value Color A color struct with the hex value of E67E22. Purple Gets the purple color value. public static readonly Color Purple Field Value Color A color struct with the hex value of 9B59B6. Red Gets the red color value. public static readonly Color Red Field Value Color A color struct with the hex value of E74C3C. Teal Gets the teal color value. public static readonly Color Teal Field Value Color A color struct with the hex value of 1ABC9C. Properties B Gets the blue component for this color. public byte B { get; } Property Value byte G Gets the green component for this color. public byte G { get; } Property Value byte R Gets the red component for this color. public byte R { get; } Property Value byte RawValue Gets the encoded value for this color. public readonly uint RawValue { get; } Property Value uint Remarks This value is encoded as an unsigned integer value. The most-significant 8 bits contain the red value, the middle 8 bits contain the green value, and the least-significant 8 bits contain the blue value. Methods Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. ToString() Gets the hexadecimal representation of the color (e.g. #000ccc). public override string ToString() Returns string A hexadecimal string of the color. Operators operator ==(Color, Color) public static bool operator ==(Color lhs, Color rhs) Parameters lhs Color rhs Color Returns bool explicit operator Color(Color) public static explicit operator Color(Color color) Parameters color Color Returns Color implicit operator Color(Color) public static implicit operator Color(Color color) Parameters color Color Returns Color implicit operator uint(Color) public static implicit operator uint(Color color) Parameters color Color Returns uint implicit operator Color(uint) public static implicit operator Color(uint rawValue) Parameters rawValue uint Returns Color operator !=(Color, Color) public static bool operator !=(Color lhs, Color rhs) Parameters lhs Color rhs Color Returns bool"
  },
  "api/Discord.Commands.AliasAttribute.html": {
    "href": "api/Discord.Commands.AliasAttribute.html",
    "title": "Class AliasAttribute | Discord.Net Documentation",
    "keywords": "Class AliasAttribute Namespace Discord.Commands Assembly Discord.Net.Commands.dll Marks the aliases for a command. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = false, Inherited = true)] public class AliasAttribute : Attribute Inheritance object Attribute AliasAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples In the following example, the command can be triggered with the base name, \"stats\", or either \"stat\" or \"info\". [Command(\"stats\")] [Alias(\"stat\", \"info\")] public async Task GetStatsAsync(IUser user) { // ...pull stats } Remarks This attribute allows a command to have one or multiple aliases. In other words, the base command can have multiple aliases when triggering the command itself, giving the end-user more freedom of choices when giving hot-words to trigger the desired command. See the example for a better illustration. Constructors AliasAttribute(params string[]) Creates a new AliasAttribute with the given aliases. public AliasAttribute(params string[] aliases) Parameters aliases string[] Properties Aliases Gets the aliases which have been defined for the command. public string[] Aliases { get; } Property Value string[]"
  },
  "api/Discord.Commands.Builders.CommandBuilder.html": {
    "href": "api/Discord.Commands.Builders.CommandBuilder.html",
    "title": "Class CommandBuilder | Discord.Net Documentation",
    "keywords": "Class CommandBuilder Namespace Discord.Commands.Builders Assembly Discord.Net.Commands.dll public class CommandBuilder Inheritance object CommandBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Aliases public IReadOnlyList<string> Aliases { get; } Property Value IReadOnlyList<string> Attributes public IReadOnlyList<Attribute> Attributes { get; } Property Value IReadOnlyList<Attribute> IgnoreExtraArgs public bool IgnoreExtraArgs { get; set; } Property Value bool Module public ModuleBuilder Module { get; } Property Value ModuleBuilder Name public string Name { get; set; } Property Value string Parameters public IReadOnlyList<ParameterBuilder> Parameters { get; } Property Value IReadOnlyList<ParameterBuilder> Preconditions public IReadOnlyList<PreconditionAttribute> Preconditions { get; } Property Value IReadOnlyList<PreconditionAttribute> PrimaryAlias public string PrimaryAlias { get; set; } Property Value string Priority public int Priority { get; set; } Property Value int Remarks public string Remarks { get; set; } Property Value string RunMode public RunMode RunMode { get; set; } Property Value RunMode Summary public string Summary { get; set; } Property Value string Methods AddAliases(params string[]) public CommandBuilder AddAliases(params string[] aliases) Parameters aliases string[] Returns CommandBuilder AddAttributes(params Attribute[]) public CommandBuilder AddAttributes(params Attribute[] attributes) Parameters attributes Attribute[] Returns CommandBuilder AddParameter(string, Type, Action<ParameterBuilder>) public CommandBuilder AddParameter(string name, Type type, Action<ParameterBuilder> createFunc) Parameters name string type Type createFunc Action<ParameterBuilder> Returns CommandBuilder AddParameter<T>(string, Action<ParameterBuilder>) public CommandBuilder AddParameter<T>(string name, Action<ParameterBuilder> createFunc) Parameters name string createFunc Action<ParameterBuilder> Returns CommandBuilder Type Parameters T AddPrecondition(PreconditionAttribute) public CommandBuilder AddPrecondition(PreconditionAttribute precondition) Parameters precondition PreconditionAttribute Returns CommandBuilder WithName(string) public CommandBuilder WithName(string name) Parameters name string Returns CommandBuilder WithPriority(int) public CommandBuilder WithPriority(int priority) Parameters priority int Returns CommandBuilder WithRemarks(string) public CommandBuilder WithRemarks(string remarks) Parameters remarks string Returns CommandBuilder WithRunMode(RunMode) public CommandBuilder WithRunMode(RunMode runMode) Parameters runMode RunMode Returns CommandBuilder WithSummary(string) public CommandBuilder WithSummary(string summary) Parameters summary string Returns CommandBuilder"
  },
  "api/Discord.Commands.Builders.ModuleBuilder.html": {
    "href": "api/Discord.Commands.Builders.ModuleBuilder.html",
    "title": "Class ModuleBuilder | Discord.Net Documentation",
    "keywords": "Class ModuleBuilder Namespace Discord.Commands.Builders Assembly Discord.Net.Commands.dll public class ModuleBuilder Inheritance object ModuleBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Aliases public IReadOnlyList<string> Aliases { get; } Property Value IReadOnlyList<string> Attributes public IReadOnlyList<Attribute> Attributes { get; } Property Value IReadOnlyList<Attribute> Commands public IReadOnlyList<CommandBuilder> Commands { get; } Property Value IReadOnlyList<CommandBuilder> Group public string Group { get; set; } Property Value string Modules public IReadOnlyList<ModuleBuilder> Modules { get; } Property Value IReadOnlyList<ModuleBuilder> Name public string Name { get; set; } Property Value string Parent public ModuleBuilder Parent { get; } Property Value ModuleBuilder Preconditions public IReadOnlyList<PreconditionAttribute> Preconditions { get; } Property Value IReadOnlyList<PreconditionAttribute> Remarks public string Remarks { get; set; } Property Value string Service public CommandService Service { get; } Property Value CommandService Summary public string Summary { get; set; } Property Value string Methods AddAliases(params string[]) public ModuleBuilder AddAliases(params string[] aliases) Parameters aliases string[] Returns ModuleBuilder AddAttributes(params Attribute[]) public ModuleBuilder AddAttributes(params Attribute[] attributes) Parameters attributes Attribute[] Returns ModuleBuilder AddCommand(string, Func<ICommandContext, object[], IServiceProvider, CommandInfo, Task>, Action<CommandBuilder>) public ModuleBuilder AddCommand(string primaryAlias, Func<ICommandContext, object[], IServiceProvider, CommandInfo, Task> callback, Action<CommandBuilder> createFunc) Parameters primaryAlias string callback Func<ICommandContext, object[], IServiceProvider, CommandInfo, Task> createFunc Action<CommandBuilder> Returns ModuleBuilder AddModule(string, Action<ModuleBuilder>) public ModuleBuilder AddModule(string primaryAlias, Action<ModuleBuilder> createFunc) Parameters primaryAlias string createFunc Action<ModuleBuilder> Returns ModuleBuilder AddPrecondition(PreconditionAttribute) public ModuleBuilder AddPrecondition(PreconditionAttribute precondition) Parameters precondition PreconditionAttribute Returns ModuleBuilder Build(CommandService, IServiceProvider) public ModuleInfo Build(CommandService service, IServiceProvider services) Parameters service CommandService services IServiceProvider Returns ModuleInfo WithName(string) public ModuleBuilder WithName(string name) Parameters name string Returns ModuleBuilder WithRemarks(string) public ModuleBuilder WithRemarks(string remarks) Parameters remarks string Returns ModuleBuilder WithSummary(string) public ModuleBuilder WithSummary(string summary) Parameters summary string Returns ModuleBuilder"
  },
  "api/Discord.Commands.Builders.ParameterBuilder.html": {
    "href": "api/Discord.Commands.Builders.ParameterBuilder.html",
    "title": "Class ParameterBuilder | Discord.Net Documentation",
    "keywords": "Class ParameterBuilder Namespace Discord.Commands.Builders Assembly Discord.Net.Commands.dll public class ParameterBuilder Inheritance object ParameterBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Attributes public IReadOnlyList<Attribute> Attributes { get; } Property Value IReadOnlyList<Attribute> Command public CommandBuilder Command { get; } Property Value CommandBuilder DefaultValue public object DefaultValue { get; set; } Property Value object IsMultiple public bool IsMultiple { get; set; } Property Value bool IsOptional public bool IsOptional { get; set; } Property Value bool IsRemainder public bool IsRemainder { get; set; } Property Value bool Name public string Name { get; } Property Value string ParameterType public Type ParameterType { get; } Property Value Type Preconditions public IReadOnlyList<ParameterPreconditionAttribute> Preconditions { get; } Property Value IReadOnlyList<ParameterPreconditionAttribute> Summary public string Summary { get; set; } Property Value string TypeReader public TypeReader TypeReader { get; set; } Property Value TypeReader Methods AddAttributes(params Attribute[]) public ParameterBuilder AddAttributes(params Attribute[] attributes) Parameters attributes Attribute[] Returns ParameterBuilder AddPrecondition(ParameterPreconditionAttribute) public ParameterBuilder AddPrecondition(ParameterPreconditionAttribute precondition) Parameters precondition ParameterPreconditionAttribute Returns ParameterBuilder WithDefault(object) public ParameterBuilder WithDefault(object defaultValue) Parameters defaultValue object Returns ParameterBuilder WithIsMultiple(bool) public ParameterBuilder WithIsMultiple(bool isMultiple) Parameters isMultiple bool Returns ParameterBuilder WithIsOptional(bool) public ParameterBuilder WithIsOptional(bool isOptional) Parameters isOptional bool Returns ParameterBuilder WithIsRemainder(bool) public ParameterBuilder WithIsRemainder(bool isRemainder) Parameters isRemainder bool Returns ParameterBuilder WithSummary(string) public ParameterBuilder WithSummary(string summary) Parameters summary string Returns ParameterBuilder"
  },
  "api/Discord.Commands.Builders.html": {
    "href": "api/Discord.Commands.Builders.html",
    "title": "Namespace Discord.Commands.Builders | Discord.Net Documentation",
    "keywords": "Namespace Discord.Commands.Builders Classes CommandBuilder ModuleBuilder ParameterBuilder"
  },
  "api/Discord.Commands.ChannelTypeReader-1.html": {
    "href": "api/Discord.Commands.ChannelTypeReader-1.html",
    "title": "Class ChannelTypeReader<T> | Discord.Net Documentation",
    "keywords": "Class ChannelTypeReader<T> Namespace Discord.Commands Assembly Discord.Net.Commands.dll A TypeReader for parsing objects implementing IChannel. public class ChannelTypeReader<T> : TypeReader where T : class, IChannel Type Parameters T The type to be checked; must implement IChannel. Inheritance object TypeReader ChannelTypeReader<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This TypeReader is shipped with Discord.Net and is used by default to parse any IChannel implemented object within a command. The TypeReader will attempt to first parse the input by mention, then the snowflake identifier, then by name; the highest candidate will be chosen as the final output; otherwise, an erroneous TypeReaderResult is returned. Methods ReadAsync(ICommandContext, string, IServiceProvider) Attempts to parse the input into the desired type. public override Task<TypeReaderResult> ReadAsync(ICommandContext context, string input, IServiceProvider services) Parameters context ICommandContext The context of the command. input string The raw input of the command. services IServiceProvider The service collection used for dependency injection. Returns Task<TypeReaderResult> A task that represents the asynchronous parsing operation. The task result contains the parsing result."
  },
  "api/Discord.Commands.CommandAttribute.html": {
    "href": "api/Discord.Commands.CommandAttribute.html",
    "title": "Class CommandAttribute | Discord.Net Documentation",
    "keywords": "Class CommandAttribute Namespace Discord.Commands Assembly Discord.Net.Commands.dll Marks the execution information for a command. [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = true)] public class CommandAttribute : Attribute Inheritance object Attribute CommandAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandAttribute() Initializes a new instance of the Attribute class. public CommandAttribute() CommandAttribute(string) Initializes a new CommandAttribute attribute with the specified name. public CommandAttribute(string text) Parameters text string The name of the command. CommandAttribute(string, bool) public CommandAttribute(string text, bool ignoreExtraArgs) Parameters text string ignoreExtraArgs bool CommandAttribute(string, bool, string, string[], string) public CommandAttribute(string text, bool ignoreExtraArgs, string summary = null, string[] aliases = null, string remarks = null) Parameters text string ignoreExtraArgs bool summary string aliases string[] remarks string Properties Aliases Marks the aliases for a command. public string[] Aliases { get; set; } Property Value string[] Remarks AliasAttribute extends the base value of this if present. IgnoreExtraArgs public bool? IgnoreExtraArgs { get; } Property Value bool? Remarks Attaches remarks to your commands. public string Remarks { get; set; } Property Value string Remarks RemainderAttribute overrides the value of this property if present. RunMode Specifies the RunMode of the command. This affects how the command is executed. public RunMode RunMode { get; set; } Property Value RunMode Summary Attaches a summary to your command. public string Summary { get; set; } Property Value string Remarks Summary overrides the value of this property if present. Text Gets the text that has been set to be recognized as a command. public string Text { get; } Property Value string"
  },
  "api/Discord.Commands.CommandContext.html": {
    "href": "api/Discord.Commands.CommandContext.html",
    "title": "Class CommandContext | Discord.Net Documentation",
    "keywords": "Class CommandContext Namespace Discord.Commands Assembly Discord.Net.Commands.dll The context of a command which may contain the client, user, guild, channel, and message. public class CommandContext : ICommandContext Inheritance object CommandContext Implements ICommandContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples An example of how this class is used the command system can be seen below: using Discord.Commands; // Keep in mind your module **must** be public and inherit ModuleBase. // If it isn't, it will not be discovered by AddModulesAsync! public class InfoModule : ModuleBase<SocketCommandContext> { } public class CommandHandler { private readonly DiscordSocketClient _client; private readonly CommandService _commands; // Retrieve client and CommandService instance via ctor public CommandHandler(DiscordSocketClient client, CommandService commands) { _commands = commands; _client = client; } public async Task InstallCommandsAsync() { // Hook the MessageReceived event into our command handler _client.MessageReceived += HandleCommandAsync; // Here we discover all of the command modules in the entry // assembly and load them. Starting from Discord.NET 2.0, a // service provider is required to be passed into the // module registration method to inject the // required dependencies. // // If you do not use Dependency Injection, pass null. // See Dependency Injection guide for more information. await _commands.AddModulesAsync(assembly: Assembly.GetEntryAssembly(), services: null); } private async Task HandleCommandAsync(SocketMessage messageParam) { // Don't process the command if it was a system message var message = messageParam as SocketUserMessage; if (message == null) return; // Create a number to track where the prefix ends and the command begins int argPos = 0; // Determine if the message is a command based on the prefix and make sure no bots trigger commands if (!(message.HasCharPrefix('!', ref argPos) || message.HasMentionPrefix(_client.CurrentUser, ref argPos)) || message.Author.IsBot) return; // Create a WebSocket-based command context based on the message var context = new SocketCommandContext(_client, message); // Execute the command with the command context we just // created, along with the service provider for precondition checks. await _commands.ExecuteAsync( context: context, argPos: argPos, services: null); } } Constructors CommandContext(IDiscordClient, IUserMessage) Initializes a new CommandContext class with the provided client and message. public CommandContext(IDiscordClient client, IUserMessage msg) Parameters client IDiscordClient The underlying client. msg IUserMessage The underlying message. Properties Channel Gets the IMessageChannel that the command is executed in. public IMessageChannel Channel { get; } Property Value IMessageChannel Client Gets the IDiscordClient that the command is executed with. public IDiscordClient Client { get; } Property Value IDiscordClient Guild Gets the IGuild that the command is executed in. public IGuild Guild { get; } Property Value IGuild IsPrivate Indicates whether the channel that the command is executed in is a private channel. public bool IsPrivate { get; } Property Value bool Message Gets the IUserMessage that the command is interpreted from. public IUserMessage Message { get; } Property Value IUserMessage User Gets the IUser who executed the command. public IUser User { get; } Property Value IUser"
  },
  "api/Discord.Commands.CommandError.html": {
    "href": "api/Discord.Commands.CommandError.html",
    "title": "Enum CommandError | Discord.Net Documentation",
    "keywords": "Enum CommandError Namespace Discord.Commands Assembly Discord.Net.Commands.dll Defines the type of error a command can throw. public enum CommandError Fields BadArgCount = 3 Thrown when the input text has too few or too many arguments. Exception = 7 Thrown when an exception occurs mid-command execution. MultipleMatches = 5 Thrown when more than one object is matched by TypeReader. ObjectNotFound = 4 Thrown when the object cannot be found by the TypeReader. ParseFailed = 2 Thrown when the command fails to be parsed. UnknownCommand = 1 Thrown when the command is unknown. UnmetPrecondition = 6 Thrown when the command fails to meet a PreconditionAttribute's conditions. Unsuccessful = 8 Thrown when the command is not successfully executed on runtime."
  },
  "api/Discord.Commands.CommandException.html": {
    "href": "api/Discord.Commands.CommandException.html",
    "title": "Class CommandException | Discord.Net Documentation",
    "keywords": "Class CommandException Namespace Discord.Commands Assembly Discord.Net.Commands.dll The exception that is thrown if another exception occurs during a command execution. public class CommandException : Exception, ISerializable Inheritance object Exception CommandException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Examples You may use this information to handle runtime exceptions after execution. Below is an example of how you may use this: public Task LogHandlerAsync(LogMessage logMessage) { // Note that this casting method requires C#7 and up. if (logMessage?.Exception is CommandException cmdEx) { Console.WriteLine($\"{cmdEx.GetBaseException().GetType()} was thrown while executing {cmdEx.Command.Aliases.First()} in {cmdEx.Context.Channel} by {cmdEx.Context.User}.\"); } return Task.CompletedTask; } Remarks This Exception class is typically used when diagnosing an error thrown during the execution of a command. You will find the thrown exception passed into LogMessage.Exception, which is sent to your CommandService.Log event handler. Constructors CommandException(CommandInfo, ICommandContext, Exception) Initializes a new instance of the CommandException class using a command information, a command context, and the exception that interrupted the execution. public CommandException(CommandInfo command, ICommandContext context, Exception ex) Parameters command CommandInfo The command information. context ICommandContext The context of the command. ex Exception The exception that interrupted the command execution. Properties Command Gets the command that caused the exception. public CommandInfo Command { get; } Property Value CommandInfo Context Gets the command context of the exception. public ICommandContext Context { get; } Property Value ICommandContext"
  },
  "api/Discord.Commands.CommandInfo.html": {
    "href": "api/Discord.Commands.CommandInfo.html",
    "title": "Class CommandInfo | Discord.Net Documentation",
    "keywords": "Class CommandInfo Namespace Discord.Commands Assembly Discord.Net.Commands.dll Provides the information of a command. public class CommandInfo Inheritance object CommandInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This object contains the information of a command. This can include the module of the command, various descriptions regarding the command, and its RunMode. Properties Aliases Gets a list of aliases defined by the AliasAttribute of the command. public IReadOnlyList<string> Aliases { get; } Property Value IReadOnlyList<string> Attributes Gets a list of attributes of the command. public IReadOnlyList<Attribute> Attributes { get; } Property Value IReadOnlyList<Attribute> HasVarArgs Indicates whether the command accepts a params Type[] for its parameter. public bool HasVarArgs { get; } Property Value bool IgnoreExtraArgs Indicates whether extra arguments should be ignored for this command. public bool IgnoreExtraArgs { get; } Property Value bool Module Gets the module that the command belongs in. public ModuleInfo Module { get; } Property Value ModuleInfo Name Gets the name of the command. If none is set, the first alias is used. public string Name { get; } Property Value string Parameters Gets a list of information about the parameters of the command. public IReadOnlyList<ParameterInfo> Parameters { get; } Property Value IReadOnlyList<ParameterInfo> Preconditions Gets a list of preconditions defined by the PreconditionAttribute of the command. public IReadOnlyList<PreconditionAttribute> Preconditions { get; } Property Value IReadOnlyList<PreconditionAttribute> Priority Gets the priority of the command. This is used when there are multiple overloads of the command. public int Priority { get; } Property Value int Remarks Gets the remarks of the command. public string Remarks { get; } Property Value string Remarks This field returns the summary of the command. Summary and Remarks can be useful in help commands and various implementation that fetches details of the command for the user. RunMode Gets the RunMode that is being used for the command. public RunMode RunMode { get; } Property Value RunMode Summary Gets the summary of the command. public string Summary { get; } Property Value string Remarks This field returns the summary of the command. Summary and Remarks can be useful in help commands and various implementation that fetches details of the command for the user. Methods CheckPreconditionsAsync(ICommandContext, IServiceProvider) public Task<PreconditionResult> CheckPreconditionsAsync(ICommandContext context, IServiceProvider services = null) Parameters context ICommandContext services IServiceProvider Returns Task<PreconditionResult> ExecuteAsync(ICommandContext, ParseResult, IServiceProvider) public Task<IResult> ExecuteAsync(ICommandContext context, ParseResult parseResult, IServiceProvider services) Parameters context ICommandContext parseResult ParseResult services IServiceProvider Returns Task<IResult> ExecuteAsync(ICommandContext, IEnumerable<object>, IEnumerable<object>, IServiceProvider) public Task<IResult> ExecuteAsync(ICommandContext context, IEnumerable<object> argList, IEnumerable<object> paramList, IServiceProvider services) Parameters context ICommandContext argList IEnumerable<object> paramList IEnumerable<object> services IServiceProvider Returns Task<IResult> ParseAsync(ICommandContext, int, SearchResult, PreconditionResult, IServiceProvider) public Task<ParseResult> ParseAsync(ICommandContext context, int startIndex, SearchResult searchResult, PreconditionResult preconditionResult = null, IServiceProvider services = null) Parameters context ICommandContext startIndex int searchResult SearchResult preconditionResult PreconditionResult services IServiceProvider Returns Task<ParseResult>"
  },
  "api/Discord.Commands.CommandMatch.html": {
    "href": "api/Discord.Commands.CommandMatch.html",
    "title": "Struct CommandMatch | Discord.Net Documentation",
    "keywords": "Struct CommandMatch Namespace Discord.Commands Assembly Discord.Net.Commands.dll public struct CommandMatch Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors CommandMatch(CommandInfo, string) public CommandMatch(CommandInfo command, string alias) Parameters command CommandInfo alias string Properties Alias The alias of the command. public readonly string Alias { get; } Property Value string Command The command that matches the search result. public readonly CommandInfo Command { get; } Property Value CommandInfo Methods CheckPreconditionsAsync(ICommandContext, IServiceProvider) public Task<PreconditionResult> CheckPreconditionsAsync(ICommandContext context, IServiceProvider services = null) Parameters context ICommandContext services IServiceProvider Returns Task<PreconditionResult> ExecuteAsync(ICommandContext, ParseResult, IServiceProvider) public Task<IResult> ExecuteAsync(ICommandContext context, ParseResult parseResult, IServiceProvider services) Parameters context ICommandContext parseResult ParseResult services IServiceProvider Returns Task<IResult> ExecuteAsync(ICommandContext, IEnumerable<object>, IEnumerable<object>, IServiceProvider) public Task<IResult> ExecuteAsync(ICommandContext context, IEnumerable<object> argList, IEnumerable<object> paramList, IServiceProvider services) Parameters context ICommandContext argList IEnumerable<object> paramList IEnumerable<object> services IServiceProvider Returns Task<IResult> ParseAsync(ICommandContext, SearchResult, PreconditionResult, IServiceProvider) public Task<ParseResult> ParseAsync(ICommandContext context, SearchResult searchResult, PreconditionResult preconditionResult = null, IServiceProvider services = null) Parameters context ICommandContext searchResult SearchResult preconditionResult PreconditionResult services IServiceProvider Returns Task<ParseResult>"
  },
  "api/Discord.Commands.CommandService.html": {
    "href": "api/Discord.Commands.CommandService.html",
    "title": "Class CommandService | Discord.Net Documentation",
    "keywords": "Class CommandService Namespace Discord.Commands Assembly Discord.Net.Commands.dll Provides a framework for building Discord commands. public class CommandService : IDisposable Inheritance object CommandService Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CommandServiceExtensions.GetExecutableCommandsAsync(CommandService, ICommandContext, IServiceProvider) Remarks The service provides a framework for building Discord commands both dynamically via runtime builders or statically via compile-time modules. To create a command module at compile-time, see ModuleBase (most common); otherwise, see ModuleBuilder. This service also provides several events for monitoring command usages; such as Log for any command-related log events, and CommandExecuted for information about commands that have been successfully executed. Constructors CommandService() Initializes a new CommandService class. public CommandService() CommandService(CommandServiceConfig) Initializes a new CommandService class with the provided configuration. public CommandService(CommandServiceConfig config) Parameters config CommandServiceConfig The configuration class. Exceptions InvalidOperationException The RunMode cannot be set to Default. Properties Commands Represents all commands loaded within CommandService. public IEnumerable<CommandInfo> Commands { get; } Property Value IEnumerable<CommandInfo> Modules Represents all modules loaded within CommandService. public IEnumerable<ModuleInfo> Modules { get; } Property Value IEnumerable<ModuleInfo> TypeReaders Represents all TypeReader loaded within CommandService. public ILookup<Type, TypeReader> TypeReaders { get; } Property Value ILookup<Type, TypeReader> Methods AddModuleAsync(Type, IServiceProvider) Adds a command module from a Type. public Task<ModuleInfo> AddModuleAsync(Type type, IServiceProvider services) Parameters type Type The type of module. services IServiceProvider The IServiceProvider for your dependency injection solution if using one; otherwise, pass null . Returns Task<ModuleInfo> A task that represents the asynchronous operation for adding the module. The task result contains the built module. Exceptions ArgumentException This module has already been added. InvalidOperationException The ModuleInfo fails to be built; an invalid type may have been provided. AddModuleAsync<T>(IServiceProvider) Add a command module from a Type. public Task<ModuleInfo> AddModuleAsync<T>(IServiceProvider services) Parameters services IServiceProvider The IServiceProvider for your dependency injection solution if using one; otherwise, pass null. Returns Task<ModuleInfo> A task that represents the asynchronous operation for adding the module. The task result contains the built module. Type Parameters T The type of module. Examples The following example registers the module MyModule to commandService. await commandService.AddModuleAsync<MyModule>(serviceProvider); Exceptions ArgumentException This module has already been added. InvalidOperationException The ModuleInfo fails to be built; an invalid type may have been provided. AddModulesAsync(Assembly, IServiceProvider) Add command modules from an Assembly. public Task<IEnumerable<ModuleInfo>> AddModulesAsync(Assembly assembly, IServiceProvider services) Parameters assembly Assembly The Assembly containing command modules. services IServiceProvider The IServiceProvider for your dependency injection solution if using one; otherwise, pass null. Returns Task<IEnumerable<ModuleInfo>> A task that represents the asynchronous operation for adding the command modules. The task result contains an enumerable collection of modules added. AddTypeReader(Type, TypeReader) Adds a custom TypeReader to this CommandService for the supplied object type. If type is a ValueType, a nullable TypeReader for the value type will also be added. If a default TypeReader exists for type, a warning will be logged and the default TypeReader will be replaced. public void AddTypeReader(Type type, TypeReader reader) Parameters type Type A Type instance for the type to be read. reader TypeReader An instance of the TypeReader to be added. AddTypeReader(Type, TypeReader, bool) Adds a custom TypeReader to this CommandService for the supplied object type. If type is a ValueType, a nullable TypeReader for the value type will also be added. public void AddTypeReader(Type type, TypeReader reader, bool replaceDefault) Parameters type Type A Type instance for the type to be read. reader TypeReader An instance of the TypeReader to be added. replaceDefault bool Defines whether the TypeReader should replace the default one for Type if it exists. AddTypeReader<T>(TypeReader) Adds a custom TypeReader to this CommandService for the supplied object type. If T is a ValueType, a nullable TypeReader will also be added. If a default TypeReader exists for T, a warning will be logged and the default TypeReader will be replaced. public void AddTypeReader<T>(TypeReader reader) Parameters reader TypeReader An instance of the TypeReader to be added. Type Parameters T The object type to be read by the TypeReader. AddTypeReader<T>(TypeReader, bool) Adds a custom TypeReader to this CommandService for the supplied object type. If T is a ValueType, a nullable TypeReader will also be added. public void AddTypeReader<T>(TypeReader reader, bool replaceDefault) Parameters reader TypeReader An instance of the TypeReader to be added. replaceDefault bool Defines whether the TypeReader should replace the default one for Type if it exists. Type Parameters T The object type to be read by the TypeReader. CreateModuleAsync(string, Action<ModuleBuilder>) public Task<ModuleInfo> CreateModuleAsync(string primaryAlias, Action<ModuleBuilder> buildFunc) Parameters primaryAlias string buildFunc Action<ModuleBuilder> Returns Task<ModuleInfo> Dispose(bool) protected virtual void Dispose(bool disposing) Parameters disposing bool ExecuteAsync(ICommandContext, int, IServiceProvider, MultiMatchHandling) Executes the command. public Task<IResult> ExecuteAsync(ICommandContext context, int argPos, IServiceProvider services, MultiMatchHandling multiMatchHandling = MultiMatchHandling.Exception) Parameters context ICommandContext The context of the command. argPos int The position of which the command starts at. services IServiceProvider The service to be used in the command's dependency injection. multiMatchHandling MultiMatchHandling The handling mode when multiple command matches are found. Returns Task<IResult> A task that represents the asynchronous execution operation. The task result contains the result of the command execution. ExecuteAsync(ICommandContext, string, IServiceProvider, MultiMatchHandling) Executes the command. public Task<IResult> ExecuteAsync(ICommandContext context, string input, IServiceProvider services, MultiMatchHandling multiMatchHandling = MultiMatchHandling.Exception) Parameters context ICommandContext The context of the command. input string The command string. services IServiceProvider The service to be used in the command's dependency injection. multiMatchHandling MultiMatchHandling The handling mode when multiple command matches are found. Returns Task<IResult> A task that represents the asynchronous execution operation. The task result contains the result of the command execution. RemoveModuleAsync(ModuleInfo) Removes the command module. public Task<bool> RemoveModuleAsync(ModuleInfo module) Parameters module ModuleInfo The ModuleInfo to be removed from the service. Returns Task<bool> A task that represents the asynchronous removal operation. The task result contains a value that indicates whether the module is successfully removed. RemoveModuleAsync(Type) Removes the command module. public Task<bool> RemoveModuleAsync(Type type) Parameters type Type The Type of the module. Returns Task<bool> A task that represents the asynchronous removal operation. The task result contains a value that indicates whether the module is successfully removed. RemoveModuleAsync<T>() Removes the command module. public Task<bool> RemoveModuleAsync<T>() Returns Task<bool> A task that represents the asynchronous removal operation. The task result contains a value that indicates whether the module is successfully removed. Type Parameters T The Type of the module. Search(ICommandContext, int) Searches for the command. public SearchResult Search(ICommandContext context, int argPos) Parameters context ICommandContext The context of the command. argPos int The position of which the command starts at. Returns SearchResult The result containing the matching commands. Search(ICommandContext, string) Searches for the command. public SearchResult Search(ICommandContext context, string input) Parameters context ICommandContext The context of the command. input string The command string. Returns SearchResult The result containing the matching commands. Search(string) public SearchResult Search(string input) Parameters input string Returns SearchResult TryRemoveTypeReader(Type, bool, out IDictionary<Type, TypeReader>) Removes a type reader from the list of type readers. public bool TryRemoveTypeReader(Type type, bool isDefaultTypeReader, out IDictionary<Type, TypeReader> readers) Parameters type Type The type to remove the readers from. isDefaultTypeReader bool true if the default readers for type should be removed; otherwise false. readers IDictionary<Type, TypeReader> The removed collection of type readers. Returns bool true if the remove operation was successful; otherwise false. Remarks Removing a TypeReader from the CommandService will not dereference the TypeReader from the loaded module/command instances. You need to reload the modules for the changes to take effect. ValidateAndGetBestMatch(SearchResult, ICommandContext, IServiceProvider, MultiMatchHandling) Validates and gets the best CommandMatch from a specified SearchResult public Task<IResult> ValidateAndGetBestMatch(SearchResult matches, ICommandContext context, IServiceProvider provider, MultiMatchHandling multiMatchHandling = MultiMatchHandling.Exception) Parameters matches SearchResult The SearchResult. context ICommandContext The context of the command. provider IServiceProvider The service provider to be used on the command's dependency injection. multiMatchHandling MultiMatchHandling The handling mode when multiple command matches are found. Returns Task<IResult> A task that represents the asynchronous validation operation. The task result contains the result of the command validation as a MatchResult or a SearchResult if no matches were found. Events CommandExecuted Occurs when a command is executed. public event Func<Optional<CommandInfo>, ICommandContext, IResult, Task> CommandExecuted Event Type Func<Optional<CommandInfo>, ICommandContext, IResult, Task> Remarks This event is fired when a command has been executed, successfully or not. When a command fails to execute during parsing or precondition stage, the CommandInfo may not be returned. Log Occurs when a command-related information is received. public event Func<LogMessage, Task> Log Event Type Func<LogMessage, Task>"
  },
  "api/Discord.Commands.CommandServiceConfig.html": {
    "href": "api/Discord.Commands.CommandServiceConfig.html",
    "title": "Class CommandServiceConfig | Discord.Net Documentation",
    "keywords": "Class CommandServiceConfig Namespace Discord.Commands Assembly Discord.Net.Commands.dll Represents a configuration class for CommandService. public class CommandServiceConfig Inheritance object CommandServiceConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CaseSensitiveCommands Gets or sets whether commands should be case-sensitive. public bool CaseSensitiveCommands { get; set; } Property Value bool DefaultRunMode Gets or sets the default RunMode commands should have, if one is not specified on the Command attribute or builder. public RunMode DefaultRunMode { get; set; } Property Value RunMode IgnoreExtraArgs Gets or sets a value that indicates whether extra parameters should be ignored. public bool IgnoreExtraArgs { get; set; } Property Value bool LogLevel Gets or sets the minimum log level severity that will be sent to the Log event. public LogSeverity LogLevel { get; set; } Property Value LogSeverity QuotationMarkAliasMap Collection of aliases for matching pairs of string delimiters. The dictionary stores the opening delimiter as a key, and the matching closing delimiter as the value. If no value is supplied GetDefaultAliasMap will be used, which contains many regional equivalents. Only values that are specified in this map will be used as string delimiters, so if \" is removed then it won't be used. If this map is set to null or empty, the default delimiter of \" will be used. public Dictionary<char, char> QuotationMarkAliasMap { get; set; } Property Value Dictionary<char, char> Examples QuotationMarkAliasMap = new Dictionary<char, char>() { {'\\\"', '\\\"' }, {'“', '”' }, {'「', '」' }, } SeparatorChar Gets or sets the char that separates an argument with another. public char SeparatorChar { get; set; } Property Value char ThrowOnError Gets or sets whether Sync commands should push exceptions up to the caller. public bool ThrowOnError { get; set; } Property Value bool"
  },
  "api/Discord.Commands.CommandServiceExtensions.html": {
    "href": "api/Discord.Commands.CommandServiceExtensions.html",
    "title": "Class CommandServiceExtensions | Discord.Net Documentation",
    "keywords": "Class CommandServiceExtensions Namespace Discord.Commands Assembly Discord.Net.Commands.dll Provides extension methods for the CommandService class. public static class CommandServiceExtensions Inheritance object CommandServiceExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetExecutableCommandsAsync(CommandService, ICommandContext, IServiceProvider) Returns commands that can be executed under the current context. public static Task<IReadOnlyCollection<CommandInfo>> GetExecutableCommandsAsync(this CommandService commandService, ICommandContext context, IServiceProvider provider) Parameters commandService CommandService The desired command service class to check against. context ICommandContext The current command context. provider IServiceProvider The service provider used for dependency injection upon precondition check. Returns Task<IReadOnlyCollection<CommandInfo>> A read-only collection of commands that can be executed under the current context. GetExecutableCommandsAsync(ModuleInfo, ICommandContext, IServiceProvider) Returns commands that can be executed under the current context. public static Task<IReadOnlyCollection<CommandInfo>> GetExecutableCommandsAsync(this ModuleInfo module, ICommandContext context, IServiceProvider provider) Parameters module ModuleInfo The module to be checked against. context ICommandContext The current command context. provider IServiceProvider The service provider used for dependency injection upon precondition check. Returns Task<IReadOnlyCollection<CommandInfo>> A read-only collection of commands that can be executed under the current context. GetExecutableCommandsAsync(ICollection<CommandInfo>, ICommandContext, IServiceProvider) Returns commands that can be executed under the current context. public static Task<IReadOnlyCollection<CommandInfo>> GetExecutableCommandsAsync(this ICollection<CommandInfo> commands, ICommandContext context, IServiceProvider provider) Parameters commands ICollection<CommandInfo> The set of commands to be checked against. context ICommandContext The current command context. provider IServiceProvider The service provider used for dependency injection upon precondition check. Returns Task<IReadOnlyCollection<CommandInfo>> A read-only collection of commands that can be executed under the current context."
  },
  "api/Discord.Commands.ContextType.html": {
    "href": "api/Discord.Commands.ContextType.html",
    "title": "Enum ContextType | Discord.Net Documentation",
    "keywords": "Enum ContextType Namespace Discord.Commands Assembly Discord.Net.Commands.dll Defines the type of command context (i.e. where the command is being executed). [Flags] public enum ContextType Fields DM = 2 Specifies the command to be executed within a DM. Group = 4 Specifies the command to be executed within a group. Guild = 1 Specifies the command to be executed within a guild."
  },
  "api/Discord.Commands.DontAutoLoadAttribute.html": {
    "href": "api/Discord.Commands.DontAutoLoadAttribute.html",
    "title": "Class DontAutoLoadAttribute | Discord.Net Documentation",
    "keywords": "Class DontAutoLoadAttribute Namespace Discord.Commands Assembly Discord.Net.Commands.dll Prevents the marked module from being loaded automatically. [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)] public class DontAutoLoadAttribute : Attribute Inheritance object Attribute DontAutoLoadAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples [DontAutoLoad] public class MyModule : ModuleBase<SocketCommandContext> { // ... } Remarks The attribute can be applied to a public class that inherits ModuleBase. By applying this attribute, AddModulesAsync will not discover and add the marked module to the CommandService."
  },
  "api/Discord.Commands.DontInjectAttribute.html": {
    "href": "api/Discord.Commands.DontInjectAttribute.html",
    "title": "Class DontInjectAttribute | Discord.Net Documentation",
    "keywords": "Class DontInjectAttribute Namespace Discord.Commands Assembly Discord.Net.Commands.dll Prevents the marked property from being injected into a module. [AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)] public class DontInjectAttribute : Attribute Inheritance object Attribute DontInjectAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples public class MyModule : ModuleBase<SocketCommandContext> { [DontInject] public MyService MyService { get; set; } public MyModule() { MyService = new MyService(); } } Remarks The attribute can be applied to a public settable property inside a ModuleBase based class. By applying this attribute, the marked property will not be automatically injected of the dependency. See @Guides.Commands.DI to learn more."
  },
  "api/Discord.Commands.ExecuteResult.html": {
    "href": "api/Discord.Commands.ExecuteResult.html",
    "title": "Struct ExecuteResult | Discord.Net Documentation",
    "keywords": "Struct ExecuteResult Namespace Discord.Commands Assembly Discord.Net.Commands.dll Contains information of the command's overall execution result. public struct ExecuteResult : IResult Implements IResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Error Describes the error type that may have occurred during the operation. public readonly CommandError? Error { get; } Property Value CommandError? A CommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. ErrorReason Describes the reason for the error. public readonly string ErrorReason { get; } Property Value string A string containing the error reason. Exception Gets the exception that may have occurred during the command execution. public readonly Exception Exception { get; } Property Value Exception IsSuccess Indicates whether the operation was successful or not. public bool IsSuccess { get; } Property Value bool true if the result is positive; otherwise false. Methods FromError(CommandError, string) Initializes a new ExecuteResult with a specified CommandError and its reason, indicating an unsuccessful execution. public static ExecuteResult FromError(CommandError error, string reason) Parameters error CommandError The type of error. reason string The reason behind the error. Returns ExecuteResult A ExecuteResult that contains a CommandError and reason. FromError(IResult) Initializes a new ExecuteResult with a specified result; this may or may not be an successful execution depending on the Error and ErrorReason specified. public static ExecuteResult FromError(IResult result) Parameters result IResult The result to inherit from. Returns ExecuteResult A ExecuteResult that inherits the IResult error type and reason. FromError(Exception) Initializes a new ExecuteResult with a specified exception, indicating an unsuccessful execution. public static ExecuteResult FromError(Exception ex) Parameters ex Exception The exception that caused the command execution to fail. Returns ExecuteResult A ExecuteResult that contains the exception that caused the unsuccessful execution, along with a CommandError of type Exception as well as the exception message as the reason. FromSuccess() Initializes a new ExecuteResult with no error, indicating a successful execution. public static ExecuteResult FromSuccess() Returns ExecuteResult A ExecuteResult that does not contain any errors. ToString() Gets a string that indicates the execution result. public override string ToString() Returns string Success if IsSuccess is true; otherwise \"Error: ErrorReason\"."
  },
  "api/Discord.Commands.GroupAttribute.html": {
    "href": "api/Discord.Commands.GroupAttribute.html",
    "title": "Class GroupAttribute | Discord.Net Documentation",
    "keywords": "Class GroupAttribute Namespace Discord.Commands Assembly Discord.Net.Commands.dll Marks the module as a command group. [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)] public class GroupAttribute : Attribute Inheritance object Attribute GroupAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GroupAttribute() Initializes a new instance of the Attribute class. public GroupAttribute() GroupAttribute(string) Initializes a new GroupAttribute with the provided prefix. public GroupAttribute(string prefix) Parameters prefix string The prefix of the module group. Properties Prefix Gets the prefix set for the module. public string Prefix { get; } Property Value string"
  },
  "api/Discord.Commands.ICommandContext.html": {
    "href": "api/Discord.Commands.ICommandContext.html",
    "title": "Interface ICommandContext | Discord.Net Documentation",
    "keywords": "Interface ICommandContext Namespace Discord.Commands Assembly Discord.Net.Core.dll Represents a context of a command. This may include the client, guild, channel, user, and message. public interface ICommandContext Examples An example of how this class is used the command system can be seen below: using Discord.Commands; // Keep in mind your module **must** be public and inherit ModuleBase. // If it isn't, it will not be discovered by AddModulesAsync! public class InfoModule : ModuleBase<SocketCommandContext> { } public class CommandHandler { private readonly DiscordSocketClient _client; private readonly CommandService _commands; // Retrieve client and CommandService instance via ctor public CommandHandler(DiscordSocketClient client, CommandService commands) { _commands = commands; _client = client; } public async Task InstallCommandsAsync() { // Hook the MessageReceived event into our command handler _client.MessageReceived += HandleCommandAsync; // Here we discover all of the command modules in the entry // assembly and load them. Starting from Discord.NET 2.0, a // service provider is required to be passed into the // module registration method to inject the // required dependencies. // // If you do not use Dependency Injection, pass null. // See Dependency Injection guide for more information. await _commands.AddModulesAsync(assembly: Assembly.GetEntryAssembly(), services: null); } private async Task HandleCommandAsync(SocketMessage messageParam) { // Don't process the command if it was a system message var message = messageParam as SocketUserMessage; if (message == null) return; // Create a number to track where the prefix ends and the command begins int argPos = 0; // Determine if the message is a command based on the prefix and make sure no bots trigger commands if (!(message.HasCharPrefix('!', ref argPos) || message.HasMentionPrefix(_client.CurrentUser, ref argPos)) || message.Author.IsBot) return; // Create a WebSocket-based command context based on the message var context = new SocketCommandContext(_client, message); // Execute the command with the command context we just // created, along with the service provider for precondition checks. await _commands.ExecuteAsync( context: context, argPos: argPos, services: null); } } Properties Channel Gets the IMessageChannel that the command is executed in. IMessageChannel Channel { get; } Property Value IMessageChannel Client Gets the IDiscordClient that the command is executed with. IDiscordClient Client { get; } Property Value IDiscordClient Guild Gets the IGuild that the command is executed in. IGuild Guild { get; } Property Value IGuild Message Gets the IUserMessage that the command is interpreted from. IUserMessage Message { get; } Property Value IUserMessage User Gets the IUser who executed the command. IUser User { get; } Property Value IUser"
  },
  "api/Discord.Commands.IEnumerableExtensions.html": {
    "href": "api/Discord.Commands.IEnumerableExtensions.html",
    "title": "Class IEnumerableExtensions | Discord.Net Documentation",
    "keywords": "Class IEnumerableExtensions Namespace Discord.Commands Assembly Discord.Net.Commands.dll public static class IEnumerableExtensions Inheritance object IEnumerableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Permutate<TFirst, TSecond, TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, TResult>) public static IEnumerable<TResult> Permutate<TFirst, TSecond, TResult>(this IEnumerable<TFirst> set, IEnumerable<TSecond> others, Func<TFirst, TSecond, TResult> func) Parameters set IEnumerable<TFirst> others IEnumerable<TSecond> func Func<TFirst, TSecond, TResult> Returns IEnumerable<TResult> Type Parameters TFirst TSecond TResult"
  },
  "api/Discord.Commands.IModuleBase.html": {
    "href": "api/Discord.Commands.IModuleBase.html",
    "title": "Interface IModuleBase | Discord.Net Documentation",
    "keywords": "Interface IModuleBase Namespace Discord.Commands Assembly Discord.Net.Commands.dll Represents a generic module base. public interface IModuleBase Methods AfterExecute(CommandInfo) Executed after a command is ran in this module base. void AfterExecute(CommandInfo command) Parameters command CommandInfo The command that ran. AfterExecuteAsync(CommandInfo) Executed asynchronously after a command is run in this module base. Task AfterExecuteAsync(CommandInfo command) Parameters command CommandInfo The command that's about to run. Returns Task BeforeExecute(CommandInfo) Executed before a command is run in this module base. void BeforeExecute(CommandInfo command) Parameters command CommandInfo The command that's about to run. BeforeExecuteAsync(CommandInfo) Executed asynchronously before a command is run in this module base. Task BeforeExecuteAsync(CommandInfo command) Parameters command CommandInfo The command that's about to run. Returns Task OnModuleBuilding(CommandService, ModuleBuilder) Executed when this module is building. void OnModuleBuilding(CommandService commandService, ModuleBuilder builder) Parameters commandService CommandService The command service that is building this module. builder ModuleBuilder The builder constructing this module. SetContext(ICommandContext) Sets the context of this module base. void SetContext(ICommandContext context) Parameters context ICommandContext The context to set."
  },
  "api/Discord.Commands.IResult.html": {
    "href": "api/Discord.Commands.IResult.html",
    "title": "Interface IResult | Discord.Net Documentation",
    "keywords": "Interface IResult Namespace Discord.Commands Assembly Discord.Net.Commands.dll Contains information of the result related to a command. public interface IResult Properties Error Describes the error type that may have occurred during the operation. CommandError? Error { get; } Property Value CommandError? A CommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. ErrorReason Describes the reason for the error. string ErrorReason { get; } Property Value string A string containing the error reason. IsSuccess Indicates whether the operation was successful or not. bool IsSuccess { get; } Property Value bool true if the result is positive; otherwise false."
  },
  "api/Discord.Commands.MatchResult.html": {
    "href": "api/Discord.Commands.MatchResult.html",
    "title": "Class MatchResult | Discord.Net Documentation",
    "keywords": "Class MatchResult Namespace Discord.Commands Assembly Discord.Net.Commands.dll public class MatchResult : IResult Inheritance object MatchResult Implements IResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Error Describes the error type that may have occurred during the operation. public CommandError? Error { get; } Property Value CommandError? A CommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. ErrorReason Describes the reason for the error. public string ErrorReason { get; } Property Value string A string containing the error reason. IsSuccess Indicates whether the operation was successful or not. public bool IsSuccess { get; } Property Value bool true if the result is positive; otherwise false. Match Gets the command that may have matched during the command execution. public CommandMatch? Match { get; } Property Value CommandMatch? Pipeline Gets on which pipeline stage the command may have matched or failed. public IResult Pipeline { get; } Property Value IResult Methods FromError(CommandError, string) public static MatchResult FromError(CommandError error, string reason) Parameters error CommandError reason string Returns MatchResult FromError(IResult) public static MatchResult FromError(IResult result) Parameters result IResult Returns MatchResult FromError(IResult, CommandError, string) public static MatchResult FromError(IResult pipeline, CommandError error, string reason) Parameters pipeline IResult error CommandError reason string Returns MatchResult FromError(Exception) public static MatchResult FromError(Exception ex) Parameters ex Exception Returns MatchResult FromSuccess(CommandMatch, IResult) public static MatchResult FromSuccess(CommandMatch match, IResult pipeline) Parameters match CommandMatch pipeline IResult Returns MatchResult ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Discord.Commands.MessageExtensions.html": {
    "href": "api/Discord.Commands.MessageExtensions.html",
    "title": "Class MessageExtensions | Discord.Net Documentation",
    "keywords": "Class MessageExtensions Namespace Discord.Commands Assembly Discord.Net.Commands.dll Provides extension methods for IUserMessage that relates to commands. public static class MessageExtensions Inheritance object MessageExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HasCharPrefix(IUserMessage, char, ref int) Gets whether the message starts with the provided character. public static bool HasCharPrefix(this IUserMessage msg, char c, ref int argPos) Parameters msg IUserMessage The message to check against. c char The char prefix. argPos int References where the command starts. Returns bool true if the message begins with the char c; otherwise false. HasMentionPrefix(IUserMessage, IUser, ref int) Gets whether the message starts with the user's mention string. public static bool HasMentionPrefix(this IUserMessage msg, IUser user, ref int argPos) Parameters msg IUserMessage user IUser argPos int Returns bool HasStringPrefix(IUserMessage, string, ref int, StringComparison) Gets whether the message starts with the provided string. public static bool HasStringPrefix(this IUserMessage msg, string str, ref int argPos, StringComparison comparisonType = StringComparison.Ordinal) Parameters msg IUserMessage str string argPos int comparisonType StringComparison Returns bool"
  },
  "api/Discord.Commands.MessageTypeReader-1.html": {
    "href": "api/Discord.Commands.MessageTypeReader-1.html",
    "title": "Class MessageTypeReader<T> | Discord.Net Documentation",
    "keywords": "Class MessageTypeReader<T> Namespace Discord.Commands Assembly Discord.Net.Commands.dll A TypeReader for parsing objects implementing IMessage. public class MessageTypeReader<T> : TypeReader where T : class, IMessage Type Parameters T The type to be checked; must implement IMessage. Inheritance object TypeReader MessageTypeReader<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ReadAsync(ICommandContext, string, IServiceProvider) Attempts to parse the input into the desired type. public override Task<TypeReaderResult> ReadAsync(ICommandContext context, string input, IServiceProvider services) Parameters context ICommandContext The context of the command. input string The raw input of the command. services IServiceProvider The service collection used for dependency injection. Returns Task<TypeReaderResult> A task that represents the asynchronous parsing operation. The task result contains the parsing result."
  },
  "api/Discord.Commands.ModuleBase-1.html": {
    "href": "api/Discord.Commands.ModuleBase-1.html",
    "title": "Class ModuleBase<T> | Discord.Net Documentation",
    "keywords": "Class ModuleBase<T> Namespace Discord.Commands Assembly Discord.Net.Commands.dll Provides a base class for a command module to inherit from. public abstract class ModuleBase<T> : IModuleBase where T : class, ICommandContext Type Parameters T A class that implements ICommandContext. Inheritance object ModuleBase<T> Implements IModuleBase Derived ModuleBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Context The underlying context of the command. public T Context { get; } Property Value T See Also ICommandContext CommandContext Methods AfterExecute(CommandInfo) The method to execute after executing the command. protected virtual void AfterExecute(CommandInfo command) Parameters command CommandInfo The CommandInfo of the command to be executed. AfterExecuteAsync(CommandInfo) The method to execute asynchronously after executing the command. protected virtual Task AfterExecuteAsync(CommandInfo command) Parameters command CommandInfo The CommandInfo of the command to be executed. Returns Task BeforeExecute(CommandInfo) The method to execute before executing the command. protected virtual void BeforeExecute(CommandInfo command) Parameters command CommandInfo The CommandInfo of the command to be executed. BeforeExecuteAsync(CommandInfo) The method to execute asynchronously before executing the command. protected virtual Task BeforeExecuteAsync(CommandInfo command) Parameters command CommandInfo The CommandInfo of the command to be executed. Returns Task OnModuleBuilding(CommandService, ModuleBuilder) The method to execute when building the module. protected virtual void OnModuleBuilding(CommandService commandService, ModuleBuilder builder) Parameters commandService CommandService The CommandService used to create the module. builder ModuleBuilder The builder used to build the module. ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a message to the source channel. protected virtual Task<IUserMessage> ReplyAsync(string message = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters message string Contents of the message; optional only if embed is specified. isTTS bool Specifies if Discord should read this message aloud using text-to-speech. embed Embed An embed to be displayed alongside the message. options RequestOptions The request options for this async request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags Message flags combined as a bitfield. Returns Task<IUserMessage>"
  },
  "api/Discord.Commands.ModuleBase.html": {
    "href": "api/Discord.Commands.ModuleBase.html",
    "title": "Class ModuleBase | Discord.Net Documentation",
    "keywords": "Class ModuleBase Namespace Discord.Commands Assembly Discord.Net.Commands.dll Provides a base class for a command module to inherit from. public abstract class ModuleBase : ModuleBase<ICommandContext>, IModuleBase Inheritance object ModuleBase<ICommandContext> ModuleBase Implements IModuleBase Inherited Members ModuleBase<ICommandContext>.Context ModuleBase<ICommandContext>.ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) ModuleBase<ICommandContext>.BeforeExecuteAsync(CommandInfo) ModuleBase<ICommandContext>.BeforeExecute(CommandInfo) ModuleBase<ICommandContext>.AfterExecuteAsync(CommandInfo) ModuleBase<ICommandContext>.AfterExecute(CommandInfo) ModuleBase<ICommandContext>.OnModuleBuilding(CommandService, ModuleBuilder) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Discord.Commands.ModuleInfo.html": {
    "href": "api/Discord.Commands.ModuleInfo.html",
    "title": "Class ModuleInfo | Discord.Net Documentation",
    "keywords": "Class ModuleInfo Namespace Discord.Commands Assembly Discord.Net.Commands.dll Provides the information of a module. public class ModuleInfo Inheritance object ModuleInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods CommandServiceExtensions.GetExecutableCommandsAsync(ModuleInfo, ICommandContext, IServiceProvider) Properties Aliases Gets a read-only list of aliases associated with this module. public IReadOnlyList<string> Aliases { get; } Property Value IReadOnlyList<string> Attributes Gets a read-only list of attributes that apply to this module. public IReadOnlyList<Attribute> Attributes { get; } Property Value IReadOnlyList<Attribute> Commands Gets a read-only list of commands associated with this module. public IReadOnlyList<CommandInfo> Commands { get; } Property Value IReadOnlyList<CommandInfo> Group Gets the group name (main prefix) of this module. public string Group { get; } Property Value string IsSubmodule Gets a value that indicates whether this module is a submodule or not. public bool IsSubmodule { get; } Property Value bool Name Gets the name of this module. public string Name { get; } Property Value string Parent Gets the parent module of this submodule if applicable. public ModuleInfo Parent { get; } Property Value ModuleInfo Preconditions Gets a read-only list of preconditions that apply to this module. public IReadOnlyList<PreconditionAttribute> Preconditions { get; } Property Value IReadOnlyList<PreconditionAttribute> Remarks Gets the remarks of this module. public string Remarks { get; } Property Value string Service Gets the command service associated with this module. public CommandService Service { get; } Property Value CommandService Submodules Gets a read-only list of submodules associated with this module. public IReadOnlyList<ModuleInfo> Submodules { get; } Property Value IReadOnlyList<ModuleInfo> Summary Gets the summary of this module. public string Summary { get; } Property Value string"
  },
  "api/Discord.Commands.MultiMatchHandling.html": {
    "href": "api/Discord.Commands.MultiMatchHandling.html",
    "title": "Enum MultiMatchHandling | Discord.Net Documentation",
    "keywords": "Enum MultiMatchHandling Namespace Discord.Commands Assembly Discord.Net.Commands.dll Specifies the behavior when multiple matches are found during the command parsing stage. public enum MultiMatchHandling Fields Best = 1 Indicates that when multiple results are found, the best result should be chosen. Exception = 0 Indicates that when multiple results are found, an exception should be thrown."
  },
  "api/Discord.Commands.NameAttribute.html": {
    "href": "api/Discord.Commands.NameAttribute.html",
    "title": "Class NameAttribute | Discord.Net Documentation",
    "keywords": "Class NameAttribute Namespace Discord.Commands Assembly Discord.Net.Commands.dll Marks the public name of a command, module, or parameter. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method|AttributeTargets.Parameter, AllowMultiple = false, Inherited = true)] public class NameAttribute : Attribute Inheritance object Attribute NameAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NameAttribute(string) Marks the public name of a command, module, or parameter with the provided name. public NameAttribute(string text) Parameters text string The public name of the object. Properties Text Gets the name of the command. public string Text { get; } Property Value string"
  },
  "api/Discord.Commands.NamedArgumentTypeAttribute.html": {
    "href": "api/Discord.Commands.NamedArgumentTypeAttribute.html",
    "title": "Class NamedArgumentTypeAttribute | Discord.Net Documentation",
    "keywords": "Class NamedArgumentTypeAttribute Namespace Discord.Commands Assembly Discord.Net.Commands.dll Instructs the command system to treat command parameters of this type as a collection of named arguments matching to its properties. [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)] public sealed class NamedArgumentTypeAttribute : Attribute Inheritance object Attribute NamedArgumentTypeAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Discord.Commands.OverrideTypeReaderAttribute.html": {
    "href": "api/Discord.Commands.OverrideTypeReaderAttribute.html",
    "title": "Class OverrideTypeReaderAttribute | Discord.Net Documentation",
    "keywords": "Class OverrideTypeReaderAttribute Namespace Discord.Commands Assembly Discord.Net.Commands.dll Marks the Type to be read by the specified TypeReader. [AttributeUsage(AttributeTargets.Property|AttributeTargets.Parameter, AllowMultiple = false, Inherited = true)] public sealed class OverrideTypeReaderAttribute : Attribute Inheritance object Attribute OverrideTypeReaderAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Examples In this example, the TimeSpan will be read by a custom TypeReader, FriendlyTimeSpanTypeReader, instead of the TimeSpanTypeReader shipped by Discord.Net. [Command(\"time\")] public Task GetTimeAsync([OverrideTypeReader(typeof(FriendlyTimeSpanTypeReader))]TimeSpan time) => ReplyAsync(time); Remarks This attribute is used to override a command parameter's type reading behaviour. This may be useful when you have multiple custom TypeReader and would like to specify one. Constructors OverrideTypeReaderAttribute(Type) public OverrideTypeReaderAttribute(Type overridenTypeReader) Parameters overridenTypeReader Type The TypeReader to be used with the parameter. Exceptions ArgumentException The given overridenTypeReader does not inherit from TypeReader. Properties TypeReader Gets the specified TypeReader of the parameter. public Type TypeReader { get; } Property Value Type"
  },
  "api/Discord.Commands.ParameterInfo.html": {
    "href": "api/Discord.Commands.ParameterInfo.html",
    "title": "Class ParameterInfo | Discord.Net Documentation",
    "keywords": "Class ParameterInfo Namespace Discord.Commands Assembly Discord.Net.Commands.dll Provides the information of a parameter. public class ParameterInfo Inheritance object ParameterInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Attributes Gets a read-only list of attributes that apply to this parameter. public IReadOnlyList<Attribute> Attributes { get; } Property Value IReadOnlyList<Attribute> Command Gets the command that associates with this parameter. public CommandInfo Command { get; } Property Value CommandInfo DefaultValue Gets the default value for this optional parameter if applicable. public object DefaultValue { get; } Property Value object IsMultiple public bool IsMultiple { get; } Property Value bool IsOptional Gets a value that indicates whether this parameter is optional or not. public bool IsOptional { get; } Property Value bool IsRemainder Gets a value that indicates whether this parameter is a remainder parameter or not. public bool IsRemainder { get; } Property Value bool Name Gets the name of this parameter. public string Name { get; } Property Value string Preconditions Gets a read-only list of precondition that apply to this parameter. public IReadOnlyList<ParameterPreconditionAttribute> Preconditions { get; } Property Value IReadOnlyList<ParameterPreconditionAttribute> Summary Gets the summary of this parameter. public string Summary { get; } Property Value string Type Gets the type of the parameter. public Type Type { get; } Property Value Type Methods CheckPreconditionsAsync(ICommandContext, object, IServiceProvider) public Task<PreconditionResult> CheckPreconditionsAsync(ICommandContext context, object arg, IServiceProvider services = null) Parameters context ICommandContext arg object services IServiceProvider Returns Task<PreconditionResult> ParseAsync(ICommandContext, string, IServiceProvider) public Task<TypeReaderResult> ParseAsync(ICommandContext context, string input, IServiceProvider services = null) Parameters context ICommandContext input string services IServiceProvider Returns Task<TypeReaderResult> ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Discord.Commands.ParameterPreconditionAttribute.html": {
    "href": "api/Discord.Commands.ParameterPreconditionAttribute.html",
    "title": "Class ParameterPreconditionAttribute | Discord.Net Documentation",
    "keywords": "Class ParameterPreconditionAttribute Namespace Discord.Commands Assembly Discord.Net.Commands.dll Requires the parameter to pass the specified precondition before execution can begin. [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = true, Inherited = true)] public abstract class ParameterPreconditionAttribute : Attribute Inheritance object Attribute ParameterPreconditionAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples The following example creates a precondition on a parameter-level to see if the targeted user has a lower hierarchy than the user who executed the command. public class RequireHierarchyAttribute : ParameterPreconditionAttribute { public override async Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, ParameterInfo parameter, object value, IServiceProvider services) { // Hierarchy is only available under the socket variant of the user. if (!(context.User is SocketGuildUser guildUser)) return PreconditionResult.FromError(\"This command cannot be used outside of a guild.\"); SocketGuildUser targetUser; switch (value) { case SocketGuildUser targetGuildUser: targetUser = targetGuildUser; break; case ulong userId: targetUser = await context.Guild.GetUserAsync(userId).ConfigureAwait(false) as SocketGuildUser; break; default: throw new ArgumentOutOfRangeException(); } if (targetUser == null) return PreconditionResult.FromError(\"Target user not found.\"); if (guildUser.Hierarchy < targetUser.Hierarchy) return PreconditionResult.FromError(\"You cannot target anyone else whose roles are higher than yours.\"); var currentUser = await context.Guild.GetCurrentUserAsync().ConfigureAwait(false) as SocketGuildUser; if (currentUser?.Hierarchy < targetUser.Hierarchy) return PreconditionResult.FromError(\"The bot's role is lower than the targeted user.\"); return PreconditionResult.FromSuccess(); } } Remarks This precondition attribute can be applied on parameter-level for a command. A \"precondition\" in the command system is used to determine if a condition is met before entering the command task. Using a precondition may aid in keeping a well-organized command logic. The most common use case being whether a user has sufficient permission to execute the command. Methods CheckPermissionsAsync(ICommandContext, ParameterInfo, object, IServiceProvider) Checks whether the condition is met before execution of the command. public abstract Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, ParameterInfo parameter, object value, IServiceProvider services) Parameters context ICommandContext The context of the command. parameter ParameterInfo The parameter of the command being checked against. value object The raw value of the parameter. services IServiceProvider The service collection used for dependency injection. Returns Task<PreconditionResult> See Also PreconditionAttribute See Also PreconditionAttribute"
  },
  "api/Discord.Commands.ParseResult.html": {
    "href": "api/Discord.Commands.ParseResult.html",
    "title": "Struct ParseResult | Discord.Net Documentation",
    "keywords": "Struct ParseResult Namespace Discord.Commands Assembly Discord.Net.Commands.dll Contains information for the parsing result from the command service's parser. public struct ParseResult : IResult Implements IResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties ArgValues public readonly IReadOnlyList<TypeReaderResult> ArgValues { get; } Property Value IReadOnlyList<TypeReaderResult> Error Describes the error type that may have occurred during the operation. public readonly CommandError? Error { get; } Property Value CommandError? A CommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. ErrorParameter Provides information about the parameter that caused the parsing error. public readonly ParameterInfo ErrorParameter { get; } Property Value ParameterInfo A ParameterInfo indicating the parameter info of the error that may have occurred during parsing; null if the parsing was successful or the parsing error is not specific to a single parameter. ErrorReason Describes the reason for the error. public readonly string ErrorReason { get; } Property Value string A string containing the error reason. IsSuccess Indicates whether the operation was successful or not. public bool IsSuccess { get; } Property Value bool true if the result is positive; otherwise false. ParamValues public readonly IReadOnlyList<TypeReaderResult> ParamValues { get; } Property Value IReadOnlyList<TypeReaderResult> Methods FromError(CommandError, string) public static ParseResult FromError(CommandError error, string reason) Parameters error CommandError reason string Returns ParseResult FromError(CommandError, string, ParameterInfo) public static ParseResult FromError(CommandError error, string reason, ParameterInfo parameterInfo) Parameters error CommandError reason string parameterInfo ParameterInfo Returns ParseResult FromError(IResult) public static ParseResult FromError(IResult result) Parameters result IResult Returns ParseResult FromError(IResult, ParameterInfo) public static ParseResult FromError(IResult result, ParameterInfo parameterInfo) Parameters result IResult parameterInfo ParameterInfo Returns ParseResult FromError(Exception) public static ParseResult FromError(Exception ex) Parameters ex Exception Returns ParseResult FromSuccess(IReadOnlyList<TypeReaderResult>, IReadOnlyList<TypeReaderResult>) public static ParseResult FromSuccess(IReadOnlyList<TypeReaderResult> argValues, IReadOnlyList<TypeReaderResult> paramValues) Parameters argValues IReadOnlyList<TypeReaderResult> paramValues IReadOnlyList<TypeReaderResult> Returns ParseResult FromSuccess(IReadOnlyList<TypeReaderValue>, IReadOnlyList<TypeReaderValue>) public static ParseResult FromSuccess(IReadOnlyList<TypeReaderValue> argValues, IReadOnlyList<TypeReaderValue> paramValues) Parameters argValues IReadOnlyList<TypeReaderValue> paramValues IReadOnlyList<TypeReaderValue> Returns ParseResult ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name."
  },
  "api/Discord.Commands.PreconditionAttribute.html": {
    "href": "api/Discord.Commands.PreconditionAttribute.html",
    "title": "Class PreconditionAttribute | Discord.Net Documentation",
    "keywords": "Class PreconditionAttribute Namespace Discord.Commands Assembly Discord.Net.Commands.dll Requires the module or class to pass the specified precondition before execution can begin. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = true, Inherited = true)] public abstract class PreconditionAttribute : Attribute Inheritance object Attribute PreconditionAttribute Derived RequireBotPermissionAttribute RequireContextAttribute RequireNsfwAttribute RequireOwnerAttribute RequireUserPermissionAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples The following example creates a precondition to see if the user has sufficient role required to access the command. public class RequireRoleAttribute : PreconditionAttribute { private readonly ulong _roleId; public RequireRoleAttribute(ulong roleId) { _roleId = roleId; } public override async Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services) { var guildUser = context.User as IGuildUser; if (guildUser == null) return PreconditionResult.FromError(\"This command cannot be executed outside of a guild.\"); var guild = guildUser.Guild; if (guild.Roles.All(r => r.Id != _roleId)) return PreconditionResult.FromError( $\"The guild does not have the role ({_roleId}) required to access this command.\"); return guildUser.RoleIds.Any(rId => rId == _roleId) ? PreconditionResult.FromSuccess() : PreconditionResult.FromError(\"You do not have the sufficient role required to access this command.\"); } } Remarks This precondition attribute can be applied on module-level or method-level for a command. A \"precondition\" in the command system is used to determine if a condition is met before entering the command task. Using a precondition may aid in keeping a well-organized command logic. The most common use case being whether a user has sufficient permission to execute the command. Properties ErrorMessage When overridden in a derived class, uses the supplied string as the error message if the precondition doesn't pass. Setting this for a class that doesn't override this property is a no-op. public virtual string ErrorMessage { get; set; } Property Value string See Also ParameterPreconditionAttribute Group Specifies a group that this precondition belongs to. public string Group { get; set; } Property Value string Remarks Preconditions of the same group require only one of the preconditions to pass in order to be successful (A || B). Specifying Group = null or not at all will require all preconditions to pass, just like normal (A && B). See Also ParameterPreconditionAttribute Methods CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider) Checks if the command has the sufficient permission to be executed. public abstract Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services) Parameters context ICommandContext The context of the command. command CommandInfo The command being executed. services IServiceProvider The service collection used for dependency injection. Returns Task<PreconditionResult> See Also ParameterPreconditionAttribute See Also ParameterPreconditionAttribute"
  },
  "api/Discord.Commands.PreconditionGroupResult.html": {
    "href": "api/Discord.Commands.PreconditionGroupResult.html",
    "title": "Class PreconditionGroupResult | Discord.Net Documentation",
    "keywords": "Class PreconditionGroupResult Namespace Discord.Commands Assembly Discord.Net.Commands.dll public class PreconditionGroupResult : PreconditionResult, IResult Inheritance object PreconditionResult PreconditionGroupResult Implements IResult Inherited Members PreconditionResult.Error PreconditionResult.ErrorReason PreconditionResult.IsSuccess PreconditionResult.FromError(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PreconditionGroupResult(CommandError?, string, ICollection<PreconditionResult>) protected PreconditionGroupResult(CommandError? error, string errorReason, ICollection<PreconditionResult> preconditions) Parameters error CommandError? errorReason string preconditions ICollection<PreconditionResult> Properties PreconditionResults public IReadOnlyCollection<PreconditionResult> PreconditionResults { get; } Property Value IReadOnlyCollection<PreconditionResult> Methods FromError(IResult) public static PreconditionGroupResult FromError(IResult result) Parameters result IResult Returns PreconditionGroupResult FromError(Exception) public static PreconditionGroupResult FromError(Exception ex) Parameters ex Exception Returns PreconditionGroupResult FromError(string, ICollection<PreconditionResult>) public static PreconditionGroupResult FromError(string reason, ICollection<PreconditionResult> preconditions) Parameters reason string preconditions ICollection<PreconditionResult> Returns PreconditionGroupResult FromSuccess() public static PreconditionGroupResult FromSuccess() Returns PreconditionGroupResult ToString() Returns a string indicating whether the PreconditionResult is successful. public override string ToString() Returns string"
  },
  "api/Discord.Commands.PreconditionResult.html": {
    "href": "api/Discord.Commands.PreconditionResult.html",
    "title": "Class PreconditionResult | Discord.Net Documentation",
    "keywords": "Class PreconditionResult Namespace Discord.Commands Assembly Discord.Net.Commands.dll Represents a result type for command preconditions. public class PreconditionResult : IResult Inheritance object PreconditionResult Implements IResult Derived PreconditionGroupResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PreconditionResult(CommandError?, string) Initializes a new PreconditionResult class with the command error type and reason. protected PreconditionResult(CommandError? error, string errorReason) Parameters error CommandError? The type of failure. errorReason string The reason of failure. Properties Error Describes the error type that may have occurred during the operation. public CommandError? Error { get; } Property Value CommandError? A CommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. ErrorReason Describes the reason for the error. public string ErrorReason { get; } Property Value string A string containing the error reason. IsSuccess Indicates whether the operation was successful or not. public bool IsSuccess { get; } Property Value bool true if the result is positive; otherwise false. Methods FromError(IResult) Returns a PreconditionResult with the specified result type. public static PreconditionResult FromError(IResult result) Parameters result IResult The result of failure. Returns PreconditionResult FromError(Exception) public static PreconditionResult FromError(Exception ex) Parameters ex Exception Returns PreconditionResult FromError(string) Returns a PreconditionResult with UnmetPrecondition and the specified reason. public static PreconditionResult FromError(string reason) Parameters reason string The reason of failure. Returns PreconditionResult FromSuccess() Returns a PreconditionResult with no errors. public static PreconditionResult FromSuccess() Returns PreconditionResult ToString() Returns a string indicating whether the PreconditionResult is successful. public override string ToString() Returns string"
  },
  "api/Discord.Commands.PriorityAttribute.html": {
    "href": "api/Discord.Commands.PriorityAttribute.html",
    "title": "Class PriorityAttribute | Discord.Net Documentation",
    "keywords": "Class PriorityAttribute Namespace Discord.Commands Assembly Discord.Net.Commands.dll Sets priority of commands. [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = true)] public class PriorityAttribute : Attribute Inheritance object Attribute PriorityAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PriorityAttribute(int) Initializes a new PriorityAttribute attribute with the given priority. public PriorityAttribute(int priority) Parameters priority int Properties Priority Gets the priority which has been set for the command. public int Priority { get; } Property Value int"
  },
  "api/Discord.Commands.RemainderAttribute.html": {
    "href": "api/Discord.Commands.RemainderAttribute.html",
    "title": "Class RemainderAttribute | Discord.Net Documentation",
    "keywords": "Class RemainderAttribute Namespace Discord.Commands Assembly Discord.Net.Commands.dll Marks the input to not be parsed by the parser. [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false, Inherited = true)] public class RemainderAttribute : Attribute Inheritance object Attribute RemainderAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Discord.Commands.RemarksAttribute.html": {
    "href": "api/Discord.Commands.RemarksAttribute.html",
    "title": "Class RemarksAttribute | Discord.Net Documentation",
    "keywords": "Class RemarksAttribute Namespace Discord.Commands Assembly Discord.Net.Commands.dll Attaches remarks to your commands. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = false, Inherited = true)] public class RemarksAttribute : Attribute Inheritance object Attribute RemarksAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RemarksAttribute(string) public RemarksAttribute(string text) Parameters text string Properties Text public string Text { get; } Property Value string"
  },
  "api/Discord.Commands.RequireBotPermissionAttribute.html": {
    "href": "api/Discord.Commands.RequireBotPermissionAttribute.html",
    "title": "Class RequireBotPermissionAttribute | Discord.Net Documentation",
    "keywords": "Class RequireBotPermissionAttribute Namespace Discord.Commands Assembly Discord.Net.Commands.dll Requires the bot to have a specific permission in the channel a command is invoked in. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = true, Inherited = true)] public class RequireBotPermissionAttribute : PreconditionAttribute Inheritance object Attribute PreconditionAttribute RequireBotPermissionAttribute Inherited Members PreconditionAttribute.Group Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RequireBotPermissionAttribute(ChannelPermission) Requires that the bot account to have a specific ChannelPermission. public RequireBotPermissionAttribute(ChannelPermission permission) Parameters permission ChannelPermission The ChannelPermission that the bot must have. Multiple permissions can be specified by ORing the permissions together. RequireBotPermissionAttribute(GuildPermission) Requires the bot account to have a specific GuildPermission. public RequireBotPermissionAttribute(GuildPermission permission) Parameters permission GuildPermission The GuildPermission that the bot must have. Multiple permissions can be specified by ORing the permissions together. Remarks This precondition will always fail if the command is being invoked in a IPrivateChannel. Properties ChannelPermission Gets the specified ChannelPermission of the precondition. public ChannelPermission? ChannelPermission { get; } Property Value ChannelPermission? ErrorMessage When overridden in a derived class, uses the supplied string as the error message if the precondition doesn't pass. Setting this for a class that doesn't override this property is a no-op. public override string ErrorMessage { get; set; } Property Value string GuildPermission Gets the specified GuildPermission of the precondition. public GuildPermission? GuildPermission { get; } Property Value GuildPermission? NotAGuildErrorMessage Gets or sets the error message if the precondition fails due to being run outside of a Guild channel. public string NotAGuildErrorMessage { get; set; } Property Value string Methods CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider) Checks if the command has the sufficient permission to be executed. public override Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services) Parameters context ICommandContext The context of the command. command CommandInfo The command being executed. services IServiceProvider The service collection used for dependency injection. Returns Task<PreconditionResult>"
  },
  "api/Discord.Commands.RequireContextAttribute.html": {
    "href": "api/Discord.Commands.RequireContextAttribute.html",
    "title": "Class RequireContextAttribute | Discord.Net Documentation",
    "keywords": "Class RequireContextAttribute Namespace Discord.Commands Assembly Discord.Net.Commands.dll Requires the command to be invoked in a specified context (e.g. in guild, DM). [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = true, Inherited = true)] public class RequireContextAttribute : PreconditionAttribute Inheritance object Attribute PreconditionAttribute RequireContextAttribute Inherited Members PreconditionAttribute.Group Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RequireContextAttribute(ContextType) Requires the command to be invoked in the specified context. public RequireContextAttribute(ContextType contexts) Parameters contexts ContextType The type of context the command can be invoked in. Multiple contexts can be specified by ORing the contexts together. Examples [Command(\"secret\")] [RequireContext(ContextType.DM | ContextType.Group)] public Task PrivateOnlyAsync() { return ReplyAsync(\"shh, this command is a secret\"); } Properties Contexts Gets the context required to execute the command. public ContextType Contexts { get; } Property Value ContextType ErrorMessage When overridden in a derived class, uses the supplied string as the error message if the precondition doesn't pass. Setting this for a class that doesn't override this property is a no-op. public override string ErrorMessage { get; set; } Property Value string Methods CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider) Checks if the command has the sufficient permission to be executed. public override Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services) Parameters context ICommandContext The context of the command. command CommandInfo The command being executed. services IServiceProvider The service collection used for dependency injection. Returns Task<PreconditionResult>"
  },
  "api/Discord.Commands.RequireNsfwAttribute.html": {
    "href": "api/Discord.Commands.RequireNsfwAttribute.html",
    "title": "Class RequireNsfwAttribute | Discord.Net Documentation",
    "keywords": "Class RequireNsfwAttribute Namespace Discord.Commands Assembly Discord.Net.Commands.dll Requires the command to be invoked in a channel marked NSFW. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = true, Inherited = true)] public class RequireNsfwAttribute : PreconditionAttribute Inheritance object Attribute PreconditionAttribute RequireNsfwAttribute Inherited Members PreconditionAttribute.Group Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples The following example restricts the command too-cool to an NSFW-enabled channel only. public class DankModule : ModuleBase { [Command(\"cool\")] public Task CoolAsync() => ReplyAsync(\"I'm cool for everyone.\"); [RequireNsfw] [Command(\"too-cool\")] public Task TooCoolAsync() => ReplyAsync(\"You can only see this if you're cool enough.\"); } Remarks The precondition will restrict the access of the command or module to be accessed within a guild channel that has been marked as mature or NSFW. If the channel is not of type ITextChannel or the channel is not marked as NSFW, the precondition will fail with an erroneous PreconditionResult. Properties ErrorMessage When overridden in a derived class, uses the supplied string as the error message if the precondition doesn't pass. Setting this for a class that doesn't override this property is a no-op. public override string ErrorMessage { get; set; } Property Value string Methods CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider) Checks if the command has the sufficient permission to be executed. public override Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services) Parameters context ICommandContext The context of the command. command CommandInfo The command being executed. services IServiceProvider The service collection used for dependency injection. Returns Task<PreconditionResult>"
  },
  "api/Discord.Commands.RequireOwnerAttribute.html": {
    "href": "api/Discord.Commands.RequireOwnerAttribute.html",
    "title": "Class RequireOwnerAttribute | Discord.Net Documentation",
    "keywords": "Class RequireOwnerAttribute Namespace Discord.Commands Assembly Discord.Net.Commands.dll Requires the command to be invoked by the owner of the bot. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = true, Inherited = true)] public class RequireOwnerAttribute : PreconditionAttribute Inheritance object Attribute PreconditionAttribute RequireOwnerAttribute Inherited Members PreconditionAttribute.Group Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples The following example restricts the command to a set of sensitive commands that only the owner of the bot application should be able to access. [RequireOwner] [Group(\"admin\")] public class AdminModule : ModuleBase { [Command(\"exit\")] public async Task ExitAsync() { Environment.Exit(0); } } Remarks This precondition will restrict the access of the command or module to the owner of the Discord application. If the precondition fails to be met, an erroneous PreconditionResult will be returned with the message \"Command can only be run by the owner of the bot.\" note This precondition will only work if the account has a TokenType of Bot ;otherwise, this precondition will always fail. Properties ErrorMessage When overridden in a derived class, uses the supplied string as the error message if the precondition doesn't pass. Setting this for a class that doesn't override this property is a no-op. public override string ErrorMessage { get; set; } Property Value string Methods CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider) Checks if the command has the sufficient permission to be executed. public override Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services) Parameters context ICommandContext The context of the command. command CommandInfo The command being executed. services IServiceProvider The service collection used for dependency injection. Returns Task<PreconditionResult>"
  },
  "api/Discord.Commands.RequireUserPermissionAttribute.html": {
    "href": "api/Discord.Commands.RequireUserPermissionAttribute.html",
    "title": "Class RequireUserPermissionAttribute | Discord.Net Documentation",
    "keywords": "Class RequireUserPermissionAttribute Namespace Discord.Commands Assembly Discord.Net.Commands.dll Requires the user invoking the command to have a specified permission. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = true, Inherited = true)] public class RequireUserPermissionAttribute : PreconditionAttribute Inheritance object Attribute PreconditionAttribute RequireUserPermissionAttribute Inherited Members PreconditionAttribute.Group Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RequireUserPermissionAttribute(ChannelPermission) Requires that the user invoking the command to have a specific ChannelPermission. public RequireUserPermissionAttribute(ChannelPermission permission) Parameters permission ChannelPermission The ChannelPermission that the user must have. Multiple permissions can be specified by ORing the permissions together. RequireUserPermissionAttribute(GuildPermission) Requires that the user invoking the command to have a specific GuildPermission. public RequireUserPermissionAttribute(GuildPermission permission) Parameters permission GuildPermission The GuildPermission that the user must have. Multiple permissions can be specified by ORing the permissions together. Remarks This precondition will always fail if the command is being invoked in a IPrivateChannel. Properties ChannelPermission Gets the specified ChannelPermission of the precondition. public ChannelPermission? ChannelPermission { get; } Property Value ChannelPermission? ErrorMessage When overridden in a derived class, uses the supplied string as the error message if the precondition doesn't pass. Setting this for a class that doesn't override this property is a no-op. public override string ErrorMessage { get; set; } Property Value string GuildPermission Gets the specified GuildPermission of the precondition. public GuildPermission? GuildPermission { get; } Property Value GuildPermission? NotAGuildErrorMessage Gets or sets the error message if the precondition fails due to being run outside of a Guild channel. public string NotAGuildErrorMessage { get; set; } Property Value string Methods CheckPermissionsAsync(ICommandContext, CommandInfo, IServiceProvider) Checks if the command has the sufficient permission to be executed. public override Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services) Parameters context ICommandContext The context of the command. command CommandInfo The command being executed. services IServiceProvider The service collection used for dependency injection. Returns Task<PreconditionResult>"
  },
  "api/Discord.Commands.RoleTypeReader-1.html": {
    "href": "api/Discord.Commands.RoleTypeReader-1.html",
    "title": "Class RoleTypeReader<T> | Discord.Net Documentation",
    "keywords": "Class RoleTypeReader<T> Namespace Discord.Commands Assembly Discord.Net.Commands.dll A TypeReader for parsing objects implementing IRole. public class RoleTypeReader<T> : TypeReader where T : class, IRole Type Parameters T The type to be checked; must implement IRole. Inheritance object TypeReader RoleTypeReader<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ReadAsync(ICommandContext, string, IServiceProvider) Attempts to parse the input into the desired type. public override Task<TypeReaderResult> ReadAsync(ICommandContext context, string input, IServiceProvider services) Parameters context ICommandContext The context of the command. input string The raw input of the command. services IServiceProvider The service collection used for dependency injection. Returns Task<TypeReaderResult> A task that represents the asynchronous parsing operation. The task result contains the parsing result."
  },
  "api/Discord.Commands.RunMode.html": {
    "href": "api/Discord.Commands.RunMode.html",
    "title": "Enum RunMode | Discord.Net Documentation",
    "keywords": "Enum RunMode Namespace Discord.Commands Assembly Discord.Net.Commands.dll Specifies the behavior of the command execution workflow. public enum RunMode Fields Async = 2 Executes the command on a different thread from the gateway one. Default = 0 The default behavior set in CommandServiceConfig. Sync = 1 Executes the command on the same thread as gateway one. See Also CommandServiceConfig CommandAttribute"
  },
  "api/Discord.Commands.RuntimeResult.html": {
    "href": "api/Discord.Commands.RuntimeResult.html",
    "title": "Class RuntimeResult | Discord.Net Documentation",
    "keywords": "Class RuntimeResult Namespace Discord.Commands Assembly Discord.Net.Commands.dll public abstract class RuntimeResult : IResult Inheritance object RuntimeResult Implements IResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RuntimeResult(CommandError?, string) Initializes a new RuntimeResult class with the type of error and reason. protected RuntimeResult(CommandError? error, string reason) Parameters error CommandError? The type of failure, or null if none. reason string The reason of failure. Properties Error Describes the error type that may have occurred during the operation. public CommandError? Error { get; } Property Value CommandError? A CommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. IsSuccess Indicates whether the operation was successful or not. public bool IsSuccess { get; } Property Value bool true if the result is positive; otherwise false. Reason Describes the execution reason or result. public string Reason { get; } Property Value string Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Discord.Commands.SearchResult.html": {
    "href": "api/Discord.Commands.SearchResult.html",
    "title": "Struct SearchResult | Discord.Net Documentation",
    "keywords": "Struct SearchResult Namespace Discord.Commands Assembly Discord.Net.Commands.dll public struct SearchResult : IResult Implements IResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Commands public readonly IReadOnlyList<CommandMatch> Commands { get; } Property Value IReadOnlyList<CommandMatch> Error Describes the error type that may have occurred during the operation. public readonly CommandError? Error { get; } Property Value CommandError? A CommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. ErrorReason Describes the reason for the error. public readonly string ErrorReason { get; } Property Value string A string containing the error reason. IsSuccess Indicates whether the operation was successful or not. public bool IsSuccess { get; } Property Value bool true if the result is positive; otherwise false. Text public readonly string Text { get; } Property Value string Methods FromError(CommandError, string) public static SearchResult FromError(CommandError error, string reason) Parameters error CommandError reason string Returns SearchResult FromError(IResult) public static SearchResult FromError(IResult result) Parameters result IResult Returns SearchResult FromError(Exception) public static SearchResult FromError(Exception ex) Parameters ex Exception Returns SearchResult FromSuccess(string, IReadOnlyList<CommandMatch>) public static SearchResult FromSuccess(string text, IReadOnlyList<CommandMatch> commands) Parameters text string commands IReadOnlyList<CommandMatch> Returns SearchResult ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name."
  },
  "api/Discord.Commands.ShardedCommandContext.html": {
    "href": "api/Discord.Commands.ShardedCommandContext.html",
    "title": "Class ShardedCommandContext | Discord.Net Documentation",
    "keywords": "Class ShardedCommandContext Namespace Discord.Commands Assembly Discord.Net.WebSocket.dll The sharded variant of ICommandContext, which may contain the client, user, guild, channel, and message. public class ShardedCommandContext : SocketCommandContext, ICommandContext Inheritance object SocketCommandContext ShardedCommandContext Implements ICommandContext Inherited Members SocketCommandContext.Guild SocketCommandContext.Channel SocketCommandContext.User SocketCommandContext.Message SocketCommandContext.IsPrivate object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ShardedCommandContext(DiscordShardedClient, SocketUserMessage) public ShardedCommandContext(DiscordShardedClient client, SocketUserMessage msg) Parameters client DiscordShardedClient msg SocketUserMessage Properties Client Gets the DiscordShardedClient that the command is executed with. public DiscordShardedClient Client { get; } Property Value DiscordShardedClient"
  },
  "api/Discord.Commands.SocketCommandContext.html": {
    "href": "api/Discord.Commands.SocketCommandContext.html",
    "title": "Class SocketCommandContext | Discord.Net Documentation",
    "keywords": "Class SocketCommandContext Namespace Discord.Commands Assembly Discord.Net.WebSocket.dll Represents a WebSocket-based context of a command. This may include the client, guild, channel, user, and message. public class SocketCommandContext : ICommandContext Inheritance object SocketCommandContext Implements ICommandContext Derived ShardedCommandContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples An example of how this class is used the command system can be seen below: using Discord.Commands; // Keep in mind your module **must** be public and inherit ModuleBase. // If it isn't, it will not be discovered by AddModulesAsync! public class InfoModule : ModuleBase<SocketCommandContext> { } public class CommandHandler { private readonly DiscordSocketClient _client; private readonly CommandService _commands; // Retrieve client and CommandService instance via ctor public CommandHandler(DiscordSocketClient client, CommandService commands) { _commands = commands; _client = client; } public async Task InstallCommandsAsync() { // Hook the MessageReceived event into our command handler _client.MessageReceived += HandleCommandAsync; // Here we discover all of the command modules in the entry // assembly and load them. Starting from Discord.NET 2.0, a // service provider is required to be passed into the // module registration method to inject the // required dependencies. // // If you do not use Dependency Injection, pass null. // See Dependency Injection guide for more information. await _commands.AddModulesAsync(assembly: Assembly.GetEntryAssembly(), services: null); } private async Task HandleCommandAsync(SocketMessage messageParam) { // Don't process the command if it was a system message var message = messageParam as SocketUserMessage; if (message == null) return; // Create a number to track where the prefix ends and the command begins int argPos = 0; // Determine if the message is a command based on the prefix and make sure no bots trigger commands if (!(message.HasCharPrefix('!', ref argPos) || message.HasMentionPrefix(_client.CurrentUser, ref argPos)) || message.Author.IsBot) return; // Create a WebSocket-based command context based on the message var context = new SocketCommandContext(_client, message); // Execute the command with the command context we just // created, along with the service provider for precondition checks. await _commands.ExecuteAsync( context: context, argPos: argPos, services: null); } } Constructors SocketCommandContext(DiscordSocketClient, SocketUserMessage) Initializes a new SocketCommandContext class with the provided client and message. public SocketCommandContext(DiscordSocketClient client, SocketUserMessage msg) Parameters client DiscordSocketClient The underlying client. msg SocketUserMessage The underlying message. Properties Channel Gets the ISocketMessageChannel that the command is executed in. public ISocketMessageChannel Channel { get; } Property Value ISocketMessageChannel Client Gets the DiscordSocketClient that the command is executed with. public DiscordSocketClient Client { get; } Property Value DiscordSocketClient Guild Gets the SocketGuild that the command is executed in. public SocketGuild Guild { get; } Property Value SocketGuild IsPrivate Indicates whether the channel that the command is executed in is a private channel. public bool IsPrivate { get; } Property Value bool Message Gets the SocketUserMessage that the command is interpreted from. public SocketUserMessage Message { get; } Property Value SocketUserMessage User Gets the SocketUser who executed the command. public SocketUser User { get; } Property Value SocketUser"
  },
  "api/Discord.Commands.SummaryAttribute.html": {
    "href": "api/Discord.Commands.SummaryAttribute.html",
    "title": "Class SummaryAttribute | Discord.Net Documentation",
    "keywords": "Class SummaryAttribute Namespace Discord.Commands Assembly Discord.Net.Commands.dll Attaches a summary to your command. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method|AttributeTargets.Parameter, AllowMultiple = false, Inherited = true)] public class SummaryAttribute : Attribute Inheritance object Attribute SummaryAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SummaryAttribute(string) public SummaryAttribute(string text) Parameters text string Properties Text public string Text { get; } Property Value string"
  },
  "api/Discord.Commands.TypeReader.html": {
    "href": "api/Discord.Commands.TypeReader.html",
    "title": "Class TypeReader | Discord.Net Documentation",
    "keywords": "Class TypeReader Namespace Discord.Commands Assembly Discord.Net.Commands.dll Defines a reader class that parses user input into a specified type. public abstract class TypeReader Inheritance object TypeReader Derived ChannelTypeReader<T> MessageTypeReader<T> RoleTypeReader<T> UserTypeReader<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ReadAsync(ICommandContext, string, IServiceProvider) Attempts to parse the input into the desired type. public abstract Task<TypeReaderResult> ReadAsync(ICommandContext context, string input, IServiceProvider services) Parameters context ICommandContext The context of the command. input string The raw input of the command. services IServiceProvider The service collection used for dependency injection. Returns Task<TypeReaderResult> A task that represents the asynchronous parsing operation. The task result contains the parsing result."
  },
  "api/Discord.Commands.TypeReaderResult.html": {
    "href": "api/Discord.Commands.TypeReaderResult.html",
    "title": "Struct TypeReaderResult | Discord.Net Documentation",
    "keywords": "Struct TypeReaderResult Namespace Discord.Commands Assembly Discord.Net.Commands.dll public struct TypeReaderResult : IResult Implements IResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties BestMatch public object BestMatch { get; } Property Value object Exceptions InvalidOperationException TypeReaderResult was not successful. Error Describes the error type that may have occurred during the operation. public readonly CommandError? Error { get; } Property Value CommandError? A CommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. ErrorReason Describes the reason for the error. public readonly string ErrorReason { get; } Property Value string A string containing the error reason. IsSuccess Indicates whether the operation was successful or not. public bool IsSuccess { get; } Property Value bool true if the result is positive; otherwise false. Values public readonly IReadOnlyCollection<TypeReaderValue> Values { get; } Property Value IReadOnlyCollection<TypeReaderValue> Methods FromError(CommandError, string) public static TypeReaderResult FromError(CommandError error, string reason) Parameters error CommandError reason string Returns TypeReaderResult FromError(IResult) public static TypeReaderResult FromError(IResult result) Parameters result IResult Returns TypeReaderResult FromError(Exception) public static TypeReaderResult FromError(Exception ex) Parameters ex Exception Returns TypeReaderResult FromSuccess(TypeReaderValue) public static TypeReaderResult FromSuccess(TypeReaderValue value) Parameters value TypeReaderValue Returns TypeReaderResult FromSuccess(IReadOnlyCollection<TypeReaderValue>) public static TypeReaderResult FromSuccess(IReadOnlyCollection<TypeReaderValue> values) Parameters values IReadOnlyCollection<TypeReaderValue> Returns TypeReaderResult FromSuccess(object) public static TypeReaderResult FromSuccess(object value) Parameters value object Returns TypeReaderResult ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name."
  },
  "api/Discord.Commands.TypeReaderValue.html": {
    "href": "api/Discord.Commands.TypeReaderValue.html",
    "title": "Struct TypeReaderValue | Discord.Net Documentation",
    "keywords": "Struct TypeReaderValue Namespace Discord.Commands Assembly Discord.Net.Commands.dll public struct TypeReaderValue Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors TypeReaderValue(object, float) public TypeReaderValue(object value, float score) Parameters value object score float Properties Score public readonly float Score { get; } Property Value float Value public readonly object Value { get; } Property Value object Methods ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name."
  },
  "api/Discord.Commands.UserTypeReader-1.html": {
    "href": "api/Discord.Commands.UserTypeReader-1.html",
    "title": "Class UserTypeReader<T> | Discord.Net Documentation",
    "keywords": "Class UserTypeReader<T> Namespace Discord.Commands Assembly Discord.Net.Commands.dll A TypeReader for parsing objects implementing IUser. public class UserTypeReader<T> : TypeReader where T : class, IUser Type Parameters T The type to be checked; must implement IUser. Inheritance object TypeReader UserTypeReader<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ReadAsync(ICommandContext, string, IServiceProvider) Attempts to parse the input into the desired type. public override Task<TypeReaderResult> ReadAsync(ICommandContext context, string input, IServiceProvider services) Parameters context ICommandContext The context of the command. input string The raw input of the command. services IServiceProvider The service collection used for dependency injection. Returns Task<TypeReaderResult> A task that represents the asynchronous parsing operation. The task result contains the parsing result."
  },
  "api/Discord.Commands.html": {
    "href": "api/Discord.Commands.html",
    "title": "Namespace Discord.Commands | Discord.Net Documentation",
    "keywords": "Namespace Discord.Commands Classes AliasAttribute Marks the aliases for a command. ChannelTypeReader<T> A TypeReader for parsing objects implementing IChannel. CommandAttribute Marks the execution information for a command. CommandContext The context of a command which may contain the client, user, guild, channel, and message. CommandException The exception that is thrown if another exception occurs during a command execution. CommandInfo Provides the information of a command. CommandService Provides a framework for building Discord commands. CommandServiceConfig Represents a configuration class for CommandService. CommandServiceExtensions Provides extension methods for the CommandService class. DontAutoLoadAttribute Prevents the marked module from being loaded automatically. DontInjectAttribute Prevents the marked property from being injected into a module. GroupAttribute Marks the module as a command group. IEnumerableExtensions MatchResult MessageExtensions Provides extension methods for IUserMessage that relates to commands. MessageTypeReader<T> A TypeReader for parsing objects implementing IMessage. ModuleBase Provides a base class for a command module to inherit from. ModuleBase<T> Provides a base class for a command module to inherit from. ModuleInfo Provides the information of a module. NameAttribute Marks the public name of a command, module, or parameter. NamedArgumentTypeAttribute Instructs the command system to treat command parameters of this type as a collection of named arguments matching to its properties. OverrideTypeReaderAttribute Marks the Type to be read by the specified TypeReader. ParameterInfo Provides the information of a parameter. ParameterPreconditionAttribute Requires the parameter to pass the specified precondition before execution can begin. PreconditionAttribute Requires the module or class to pass the specified precondition before execution can begin. PreconditionGroupResult PreconditionResult Represents a result type for command preconditions. PriorityAttribute Sets priority of commands. RemainderAttribute Marks the input to not be parsed by the parser. RemarksAttribute Attaches remarks to your commands. RequireBotPermissionAttribute Requires the bot to have a specific permission in the channel a command is invoked in. RequireContextAttribute Requires the command to be invoked in a specified context (e.g. in guild, DM). RequireNsfwAttribute Requires the command to be invoked in a channel marked NSFW. RequireOwnerAttribute Requires the command to be invoked by the owner of the bot. RequireUserPermissionAttribute Requires the user invoking the command to have a specified permission. RoleTypeReader<T> A TypeReader for parsing objects implementing IRole. RuntimeResult ShardedCommandContext The sharded variant of ICommandContext, which may contain the client, user, guild, channel, and message. SocketCommandContext Represents a WebSocket-based context of a command. This may include the client, guild, channel, user, and message. SummaryAttribute Attaches a summary to your command. TypeReader Defines a reader class that parses user input into a specified type. UserTypeReader<T> A TypeReader for parsing objects implementing IUser. Structs CommandMatch ExecuteResult Contains information of the command's overall execution result. ParseResult Contains information for the parsing result from the command service's parser. SearchResult TypeReaderResult TypeReaderValue Interfaces ICommandContext Represents a context of a command. This may include the client, guild, channel, user, and message. IModuleBase Represents a generic module base. IResult Contains information of the result related to a command. Enums CommandError Defines the type of error a command can throw. ContextType Defines the type of command context (i.e. where the command is being executed). MultiMatchHandling Specifies the behavior when multiple matches are found during the command parsing stage. RunMode Specifies the behavior of the command execution workflow."
  },
  "api/Discord.ComponentBuilder.html": {
    "href": "api/Discord.ComponentBuilder.html",
    "title": "Class ComponentBuilder | Discord.Net Documentation",
    "keywords": "Class ComponentBuilder Namespace Discord Assembly Discord.Net.Core.dll Represents a builder for creating a MessageComponent. public class ComponentBuilder Inheritance object ComponentBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields MaxActionRowCount The max amount of rows a message can have. public const int MaxActionRowCount = 5 Field Value int MaxCustomIdLength The max length of a CustomId. public const int MaxCustomIdLength = 100 Field Value int Properties ActionRows Gets or sets the Action Rows for this Component Builder. public List<ActionRowBuilder> ActionRows { get; set; } Property Value List<ActionRowBuilder> Exceptions ArgumentNullException ActionRows cannot be null. ArgumentException ActionRows count exceeds MaxActionRowCount. Methods AddRow(ActionRowBuilder) Adds a row to this component builder. public ComponentBuilder AddRow(ActionRowBuilder row) Parameters row ActionRowBuilder The row to add. Returns ComponentBuilder The current builder. Exceptions IndexOutOfRangeException The component builder contains the max amount of rows defined as MaxActionRowCount. Build() Builds this builder into a MessageComponent used to send your components. public MessageComponent Build() Returns MessageComponent A MessageComponent that can be sent with SendMessageAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags). FromComponents(IReadOnlyCollection<IMessageComponent>) Creates a new builder from the provided list of components. public static ComponentBuilder FromComponents(IReadOnlyCollection<IMessageComponent> components) Parameters components IReadOnlyCollection<IMessageComponent> The components to create the builder from. Returns ComponentBuilder The newly created builder. FromMessage(IMessage) Creates a new builder from a message. public static ComponentBuilder FromMessage(IMessage message) Parameters message IMessage The message to create the builder from. Returns ComponentBuilder The newly created builder. RemoveButtonByURL(string) Removes a Link Button from the ComponentBuilder based on its URL. public ComponentBuilder RemoveButtonByURL(string url) Parameters url string The URL of the Link Button. Returns ComponentBuilder The current builder. RemoveComponent(string) Removes a component from the ComponentBuilder. public ComponentBuilder RemoveComponent(string customId) Parameters customId string The custom id of the component. Returns ComponentBuilder The current builder. RemoveComponentsOfType(ComponentType) Removes all components of the given type from the ComponentBuilder. public ComponentBuilder RemoveComponentsOfType(ComponentType t) Parameters t ComponentType The ComponentType to remove. Returns ComponentBuilder The current builder. WithButton(ButtonBuilder, int) Adds a ButtonBuilder to the ComponentBuilder at the specific row. If the row cannot accept the component then it will add it to a row that can. public ComponentBuilder WithButton(ButtonBuilder button, int row = 0) Parameters button ButtonBuilder The button to add. row int The row to add the button. Returns ComponentBuilder The current builder. Exceptions InvalidOperationException There is no more row to add a button. ArgumentException row must be less than MaxActionRowCount. WithButton(string, string, ButtonStyle, IEmote, string, bool, int) Adds a ButtonBuilder with specified parameters to the ComponentBuilder at the specific row. If the row cannot accept the component then it will add it to a row that can. public ComponentBuilder WithButton(string label = null, string customId = null, ButtonStyle style = ButtonStyle.Primary, IEmote emote = null, string url = null, bool disabled = false, int row = 0) Parameters label string The label text for the newly added button. customId string The custom id of the newly added button. style ButtonStyle The style of this newly added button. emote IEmote A IEmote to be used with this button. url string A URL to be used only if the ButtonStyle is a Link. disabled bool Whether or not the newly created button is disabled. row int The row the button should be placed on. Returns ComponentBuilder The current builder. WithRows(IEnumerable<ActionRowBuilder>) Sets the rows of this component builder to a specified collection. public ComponentBuilder WithRows(IEnumerable<ActionRowBuilder> rows) Parameters rows IEnumerable<ActionRowBuilder> The rows to set. Returns ComponentBuilder The current builder. Exceptions IndexOutOfRangeException The collection contains more rows then is allowed by discord. WithSelectMenu(SelectMenuBuilder, int) Adds a SelectMenuBuilder to the ComponentBuilder at the specific row. If the row cannot accept the component then it will add it to a row that can. public ComponentBuilder WithSelectMenu(SelectMenuBuilder menu, int row = 0) Parameters menu SelectMenuBuilder The menu to add. row int The row to attempt to add this component on. Returns ComponentBuilder The current builder. Exceptions InvalidOperationException There is no more row to add a menu. ArgumentException row must be less than MaxActionRowCount. WithSelectMenu(string, List<SelectMenuOptionBuilder>, string, int, int, bool, int, ComponentType, ChannelType[], SelectMenuDefaultValue[]) Adds a SelectMenuBuilder to the ComponentBuilder at the specific row. If the row cannot accept the component then it will add it to a row that can. public ComponentBuilder WithSelectMenu(string customId, List<SelectMenuOptionBuilder> options = null, string placeholder = null, int minValues = 1, int maxValues = 1, bool disabled = false, int row = 0, ComponentType type = ComponentType.SelectMenu, ChannelType[] channelTypes = null, SelectMenuDefaultValue[] defaultValues = null) Parameters customId string The custom id of the menu. options List<SelectMenuOptionBuilder> The options of the menu. placeholder string The placeholder of the menu. minValues int The min values of the placeholder. maxValues int The max values of the placeholder. disabled bool Whether or not the menu is disabled. row int The row to add the menu to. type ComponentType The type of the select menu. channelTypes ChannelType[] Menus valid channel types (only for ChannelSelect) defaultValues SelectMenuDefaultValue[] Returns ComponentBuilder"
  },
  "api/Discord.ComponentType.html": {
    "href": "api/Discord.ComponentType.html",
    "title": "Enum ComponentType | Discord.Net Documentation",
    "keywords": "Enum ComponentType Namespace Discord Assembly Discord.Net.Core.dll Represents a type of a component. public enum ComponentType Extension Methods ComponentTypeUtils.IsSelectType(ComponentType) Fields ActionRow = 1 A container for other components. Button = 2 A clickable button. ChannelSelect = 8 A select menu for picking from channels. MentionableSelect = 7 A select menu for picking from roles and users. RoleSelect = 6 A select menu for picking from roles. SelectMenu = 3 A select menu for picking from choices. TextInput = 4 A box for entering text. UserSelect = 5 A select menu for picking from users."
  },
  "api/Discord.ConnectionState.html": {
    "href": "api/Discord.ConnectionState.html",
    "title": "Enum ConnectionState | Discord.Net Documentation",
    "keywords": "Enum ConnectionState Namespace Discord Assembly Discord.Net.Core.dll Specifies the connection state of a client. public enum ConnectionState : byte Fields Connected = 2 The client has established a connection to Discord. Connecting = 1 The client is connecting to Discord. Disconnected = 0 The client has disconnected from Discord. Disconnecting = 3 The client is disconnecting from Discord."
  },
  "api/Discord.ConnectionVisibility.html": {
    "href": "api/Discord.ConnectionVisibility.html",
    "title": "Enum ConnectionVisibility | Discord.Net Documentation",
    "keywords": "Enum ConnectionVisibility Namespace Discord Assembly Discord.Net.Core.dll The visibility of the connected account. public enum ConnectionVisibility Fields Everyone = 1 Visible to everyone. None = 0 Invisible to everyone except the user themselves."
  },
  "api/Discord.CustomStatusGame.html": {
    "href": "api/Discord.CustomStatusGame.html",
    "title": "Class CustomStatusGame | Discord.Net Documentation",
    "keywords": "Class CustomStatusGame Namespace Discord Assembly Discord.Net.Core.dll A user's activity for their custom status. public class CustomStatusGame : Game, IActivity Inheritance object Game CustomStatusGame Implements IActivity Inherited Members Game.Name Game.Type Game.Flags Game.Details object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CustomStatusGame(string) Creates a new custom status activity. public CustomStatusGame(string state) Parameters state string The string displayed as bot's custom status. Remarks Bots can't set custom status emoji. Properties CreatedAt Gets the timestamp of when this status was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset containing the time when this status was created. Emote Gets the emote, if it is set. public IEmote Emote { get; } Property Value IEmote An IEmote containing the Emoji or GuildEmote set by the user. State Gets the state of the status. public string State { get; } Property Value string Methods ToString() Returns the name of the Game. public override string ToString() Returns string"
  },
  "api/Discord.DefaultApplications.html": {
    "href": "api/Discord.DefaultApplications.html",
    "title": "Enum DefaultApplications | Discord.Net Documentation",
    "keywords": "Enum DefaultApplications Namespace Discord Assembly Discord.Net.Core.dll public enum DefaultApplications : ulong Fields Awkword = 879863881349087252 It's like cards against humanity. Betrayal = 773336526917861400 Betrayal: A Party Adventure. Betrayal is a social deduction game inspired by Werewolf, Town of Salem, and Among Us. Checkers = 832013003968348200 Classic checkers Chess = 832012774040141894 The queens gambit. ChessDev = 832012586023256104 Development version of chess. DoodleCrew = 878067389634314250 It's like skribbl.io. Fishing = 814288819477020702 Sit back, relax, and do some fishing! LetterTile = 879863686565621790 LetterTile is a version of scrabble. Poker = 755827207812677713 Poker! PokerDev = 763133495793942528 The development version of poker. SketchyArtist = 879864070101172255 SketchyArtist. SpellCast = 852509694341283871 A word-search like game where you unscramble words and score points in a scrabble fashion. WordSnack = 879863976006127627 Find words in a jumble of letters in coffee. Youtube = 880218394199220334 Watch youtube together. YoutubeDev = 880218832743055411 Youtube development application."
  },
  "api/Discord.DefaultMessageNotifications.html": {
    "href": "api/Discord.DefaultMessageNotifications.html",
    "title": "Enum DefaultMessageNotifications | Discord.Net Documentation",
    "keywords": "Enum DefaultMessageNotifications Namespace Discord Assembly Discord.Net.Core.dll Specifies the default message notification behavior the guild uses. public enum DefaultMessageNotifications Fields AllMessages = 0 By default, all messages will trigger notifications. MentionsOnly = 1 By default, only mentions will trigger notifications."
  },
  "api/Discord.Direction.html": {
    "href": "api/Discord.Direction.html",
    "title": "Enum Direction | Discord.Net Documentation",
    "keywords": "Enum Direction Namespace Discord Assembly Discord.Net.Core.dll Specifies the direction of where entities (e.g. bans/messages) should be retrieved from. public enum Direction Fields After = 1 The entity(s) should be retrieved after an entity. Around = 2 The entity(s) should be retrieved around an entity. Before = 0 The entity(s) should be retrieved before an entity. Remarks This enum is used to specify the direction for retrieving entities. important At the time of writing, Around is not yet implemented into GetMessagesAsync(int, CacheMode, RequestOptions). Attempting to use the method with Around will throw a NotImplementedException."
  },
  "api/Discord.DiscordClientExtensions.html": {
    "href": "api/Discord.DiscordClientExtensions.html",
    "title": "Class DiscordClientExtensions | Discord.Net Documentation",
    "keywords": "Class DiscordClientExtensions Namespace Discord Assembly Discord.Net.Core.dll An extension class for the Discord client. public static class DiscordClientExtensions Inheritance object DiscordClientExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetDMChannelAsync(IDiscordClient, ulong) Gets the DM channel with the provided ID. public static Task<IDMChannel> GetDMChannelAsync(this IDiscordClient client, ulong id) Parameters client IDiscordClient id ulong Returns Task<IDMChannel> GetDMChannelsAsync(IDiscordClient) Gets all available DM channels for the client. public static Task<IEnumerable<IDMChannel>> GetDMChannelsAsync(this IDiscordClient client) Parameters client IDiscordClient Returns Task<IEnumerable<IDMChannel>> GetGroupChannelAsync(IDiscordClient, ulong) Gets the group channel with the provided ID. public static Task<IGroupChannel> GetGroupChannelAsync(this IDiscordClient client, ulong id) Parameters client IDiscordClient id ulong Returns Task<IGroupChannel> GetGroupChannelsAsync(IDiscordClient) Gets all available group channels for the client. public static Task<IEnumerable<IGroupChannel>> GetGroupChannelsAsync(this IDiscordClient client) Parameters client IDiscordClient Returns Task<IEnumerable<IGroupChannel>> GetOptimalVoiceRegionAsync(IDiscordClient) Gets the most optimal voice region for the client. public static Task<IVoiceRegion> GetOptimalVoiceRegionAsync(this IDiscordClient discord) Parameters discord IDiscordClient Returns Task<IVoiceRegion> GetPrivateChannelAsync(IDiscordClient, ulong) Gets the private channel with the provided ID. public static Task<IPrivateChannel> GetPrivateChannelAsync(this IDiscordClient client, ulong id) Parameters client IDiscordClient id ulong Returns Task<IPrivateChannel>"
  },
  "api/Discord.DiscordComparers.html": {
    "href": "api/Discord.DiscordComparers.html",
    "title": "Class DiscordComparers | Discord.Net Documentation",
    "keywords": "Class DiscordComparers Namespace Discord Assembly Discord.Net.Core.dll Represents a collection of IEqualityComparer<T> for various Discord objects. public static class DiscordComparers Inheritance object DiscordComparers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelComparer Gets an IEqualityComparer<IChannel> to be used to compare channels. public static IEqualityComparer<IChannel> ChannelComparer { get; } Property Value IEqualityComparer<IChannel> GuildComparer Gets an IEqualityComparer<IGuild> to be used to compare guilds. public static IEqualityComparer<IGuild> GuildComparer { get; } Property Value IEqualityComparer<IGuild> MessageComparer Gets an IEqualityComparer<IMessage> to be used to compare messages. public static IEqualityComparer<IMessage> MessageComparer { get; } Property Value IEqualityComparer<IMessage> RoleComparer Gets an IEqualityComparer<IRole> to be used to compare roles. public static IEqualityComparer<IRole> RoleComparer { get; } Property Value IEqualityComparer<IRole> UserComparer Gets an IEqualityComparer<IUser> to be used to compare users. public static IEqualityComparer<IUser> UserComparer { get; } Property Value IEqualityComparer<IUser>"
  },
  "api/Discord.DiscordConfig.html": {
    "href": "api/Discord.DiscordConfig.html",
    "title": "Class DiscordConfig | Discord.Net Documentation",
    "keywords": "Class DiscordConfig Namespace Discord Assembly Discord.Net.Core.dll Defines various behaviors of Discord.Net. public class DiscordConfig Inheritance object DiscordConfig Derived DiscordRestConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields APIUrl Returns the base Discord API URL. public static readonly string APIUrl Field Value string The Discord API URL using APIVersion. APIVersion Returns the API version Discord.Net uses. public const int APIVersion = 10 Field Value int An int representing the API version that Discord.Net uses to communicate with Discord. A list of available API version can be seen on the official Discord API documentation . CDNUrl Returns the base Discord CDN URL. public const string CDNUrl = \"https://cdn.discordapp.com/\" Field Value string The base Discord Content Delivery Network (CDN) URL. DefaultRequestTimeout Returns the default timeout for requests. public const int DefaultRequestTimeout = 15000 Field Value int The amount of time it takes in milliseconds before a request is timed out. InviteUrl Returns the base Discord invite URL. public const string InviteUrl = \"https://discord.gg/\" Field Value string The base Discord invite URL. MaxApplicationDescriptionLength Returns the max length of an application description. public const int MaxApplicationDescriptionLength = 400 Field Value int MaxApplicationTagCount Returns the max amount of tags applied to an application. public const int MaxApplicationTagCount = 5 Field Value int MaxApplicationTagLength Returns the max length of an application tag. public const int MaxApplicationTagLength = 20 Field Value int MaxAuditLogEntriesPerBatch Returns the max audit log entries allowed to be in a request. public const int MaxAuditLogEntriesPerBatch = 100 Field Value int The maximum number of audit log entries that can be gotten per-batch. MaxBansPerBatch Returns the max bans allowed to be in a request. public const int MaxBansPerBatch = 1000 Field Value int The maximum number of bans that can be gotten per-batch. MaxEmbedsPerMessage Returns the max number of embeds that can be sent with a message. public const int MaxEmbedsPerMessage = 10 Field Value int MaxEntitlementsPerBatch Returns the maximum number of entitlements that can be gotten per-batch. public const int MaxEntitlementsPerBatch = 100 Field Value int MaxGuildEventUsersPerBatch Returns the max users allowed to be in a request for guild event users. public const int MaxGuildEventUsersPerBatch = 100 Field Value int The maximum number of users that can be gotten per-batch. MaxGuildsPerBatch Returns the max guilds allowed to be in a request. public const int MaxGuildsPerBatch = 100 Field Value int The maximum number of guilds that can be gotten per-batch. MaxMessageSize Returns the max length for a Discord message. public const int MaxMessageSize = 2000 Field Value int The maximum length of a message allowed by Discord. MaxMessagesPerBatch Returns the max messages allowed to be in a request. public const int MaxMessagesPerBatch = 100 Field Value int The maximum number of messages that can be gotten per-batch. MaxStickersPerMessage Returns the max number of stickers that can be sent with a message. public const int MaxStickersPerMessage = 3 Field Value int MaxThreadMembersPerBatch Returns the max thread members allowed to be in a request. public const int MaxThreadMembersPerBatch = 100 Field Value int The maximum number of thread members that can be gotten per-batch. MaxUserReactionsPerBatch Returns the max user reactions allowed to be in a request. public const int MaxUserReactionsPerBatch = 100 Field Value int The maximum number of user reactions that can be gotten per-batch. MaxUsersPerBatch Returns the max users allowed to be in a request. public const int MaxUsersPerBatch = 1000 Field Value int The maximum number of users that can be gotten per-batch. MaxVoiceChannelStatusLength Returns the maximum length of a voice channel status. public const int MaxVoiceChannelStatusLength = 500 Field Value int VoiceAPIVersion Returns the Voice API version Discord.Net uses. public const int VoiceAPIVersion = 3 Field Value int An int representing the API version that Discord.Net uses to communicate with Discord's voice server. Properties DefaultRatelimitCallback Gets or sets the default callback for ratelimits. public Func<IRateLimitInfo, Task> DefaultRatelimitCallback { get; set; } Property Value Func<IRateLimitInfo, Task> Remarks This property is mutually exclusive with RatelimitCallback. DefaultRetryMode Gets or sets how a request should act in the case of an error, by default. public RetryMode DefaultRetryMode { get; set; } Property Value RetryMode The currently set RetryMode. FormatUsersInBidirectionalUnicode Gets or sets if the Rest/Socket user ToString() override formats the string in respect to bidirectional unicode. public bool FormatUsersInBidirectionalUnicode { get; set; } Property Value bool Remarks By default, the returned value will be \"?Discord?#1234\", to work with bidirectional usernames. If set to false, this value will be \"Discord#1234\". LogLevel Gets or sets the minimum log level severity that will be sent to the Log event. public LogSeverity LogLevel { get; set; } Property Value LogSeverity The currently set LogSeverity for logging level. UseInteractionSnowflakeDate Gets or sets whether or not the internal expiration check uses the system date snowflake date to check if an interaction can be responded to. public bool UseInteractionSnowflakeDate { get; set; } Property Value bool Remarks If set to false then the CreatedAt property in an interaction will be set to when it was received instead of the snowflakes date. This will still require a stable clock on your system. UseSystemClock Gets or sets whether or not rate-limits should use the system clock. public bool UseSystemClock { get; set; } Property Value bool Remarks If set to false, we will use the X-RateLimit-Reset-After header to determine when a rate-limit expires, rather than comparing the X-RateLimit-Reset timestamp to the system time. This should only be changed to false if the system is known to have a clock that is out of sync. Relying on the Reset-After header will incur network lag. Regardless of this property, we still rely on the system's wall-clock to determine if a bucket is rate-limited; we do not use any monotonic clock. Your system will still need a stable clock. UserAgent Gets the user agent that Discord.Net uses in its clients. public static string UserAgent { get; } Property Value string The user agent used in each Discord.Net request. Version Gets the Discord.Net version, including the build number. public static string Version { get; } Property Value string A string containing the detailed version information, including its build number; Unknown when the version fails to be fetched."
  },
  "api/Discord.DiscordError.html": {
    "href": "api/Discord.DiscordError.html",
    "title": "Struct DiscordError | Discord.Net Documentation",
    "keywords": "Struct DiscordError Namespace Discord Assembly Discord.Net.Core.dll Represents an error with a property. public struct DiscordError Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Code Gets the code of the error. public readonly string Code { get; } Property Value string Message Gets the message describing what went wrong. public readonly string Message { get; } Property Value string"
  },
  "api/Discord.DiscordErrorCode.html": {
    "href": "api/Discord.DiscordErrorCode.html",
    "title": "Enum DiscordErrorCode | Discord.Net Documentation",
    "keywords": "Enum DiscordErrorCode Namespace Discord Assembly Discord.Net.Core.dll Represents a set of json error codes received by discord. public enum DiscordErrorCode Fields APIOverloaded = 130000 ATagIsRequiredToCreateAForumPostInThisChannel = 40067 ActionSlowmode = 20016 AnnouncementEditRatelimit = 20022 ApplicationActionUnauthorized = 20012 ApplicationInteractionFailedToSend = 40043 ApplicationNameAlreadyExists = 40041 ApplicationNotYetAvailable = 110001 BeforeValueEarlierThanThreadCreation = 50085 BitrateIsTooHighForChannelOfThisType = 30052 BotsCannotUse = 20001 BulkDeleteMessageTooOld = 50034 CannotConvertBetweenPremiumEmojiAndNormalEmoji = 50145 CannotDeleteRequiredCommunityChannel = 50074 CannotEditOtherUsersMessage = 50005 CannotEditStickersWithinAMessage = 50080 CannotEnableOnboardingUnmetRequirements = 350000 CannotExecuteForDM = 50003 CannotExecuteOnArchivedThread = 50083 CannotExecuteOnChannelType = 50024 CannotExecuteOnSystemMessage = 50021 CannotMixSubscriptionAndNonSubscriptionRolesForAnEmoji = 50144 CannotModifySystemWebhook = 50073 CannotReplyWithoutReadMessageHistory = 160002 CannotSelfRedeemGift = 50054 CannotSendAMessageInAForumChannel = 40058 CannotSendEmptyMessage = 50006 CannotSendExplicitContent = 20009 CannotSendMessageToUser = 50007 CannotSendMessageToVoiceChannel = 50008 CannotSendVoiceMessageInThisChannel = 50173 CannotUpdateFinishedEvent = 180000 CannotUpdateOnboardingBelowRequirements = 350001 CannotUseBurstReaction = 90002 ChannelVerificationTooHigh = 50009 ChannelWriteRatelimit = 20028 CommunityServerChannelsMustBeTextChannels = 50086 ConnectionHasBeenRevoked = 40012 FailedStageCreation = 180002 FailedToResizeAssetBelowTheMaximumSize = 50138 FeatureDisabled = 40006 FeatureInProcessOfRollingOut = 50155 FileUploadTooBig = 50045 GeneralError = 0 GuildPremiumTooLow = 20035 GuildTemplateAlreadyExists = 30031 GuildWidgetDisabled = 50004 InsufficientPermissions = 50013 InteractionHasAlreadyBeenAcknowledged = 40060 InvalidAPIVersion = 50041 InvalidAccountType = 50002 InvalidActivityAction = 50039 InvalidAuthenticationToken = 50014 InvalidFileUpload = 50046 InvalidFormBody = 50035 InvalidGuild = 50055 InvalidInvite = 50020 InvalidJSONLottie = 170001 InvalidMFALevel = 50017 InvalidMessageType = 50068 InvalidOAuth2State = 50012 InvalidOAuth2Token = 50025 InvalidPinChannel = 50019 InvalidRecipients = 50033 InvalidRequestOrigin = 50067 InvalidRole = 50028 InvalidSticker = 50081 InvalidThreadNotificationSettings = 50084 InvalidVerification = 40002 InvalidWebhookToken = 50027 InviteAcceptedForGuildThatBotIsntIn = 50036 LottieCantContainRasters = 170002 LottieMaximumDimensionsExceeded = 170005 MaxNumberOfDailyApplicationCommandCreatesHasBeenReached = 30034 MaximumActiveThreadsReached = 160006 MaximumAnimatedEmojisReached = 30018 MaximumAnnouncementThreadsReached = 160007 MaximumAttachmentsReached = 30015 MaximumBanFetchesReached = 30037 MaximumBansForNonGuildMembersReached = 30035 MaximumEmojisReached = 30008 MaximumFriendsReached = 30002 MaximumGuildChannelsReached = 30013 MaximumGuildRolesReached = 30005 MaximumGuildWidgetsReached = 30042 MaximumGuildsReached = 30001 MaximumInvitesReached = 30016 MaximumNumberOfApplicationCommandsReached = 30032 MaximumNumberOfChannelPermissionOverwritesReached = 30060 MaximumNumberOfEditsReached = 30046 MaximumNumberOfGDMsReached = 30011 MaximumNumberOfPinnedThreadsInAForumChannelReached = 30047 MaximumNumberOfPremiumEmojisReached = 30056 MaximumNumberOfTagsInAForumChannelReached = 30048 MaximumNumberOfWebhooksReached = 30058 MaximumPinsReached = 30003 MaximumPruneRequestReached = 30040 MaximumReactionsReached = 30010 MaximumRecipientsReached = 30004 MaximumServerCategoriesReached = 30030 MaximumServerMembersReached = 30019 MaximumStickersReached = 30039 MaximumThreadMembersReached = 30033 MaximumUncompletedGuildScheduledEvents = 30038 MaximumWebhooksReached = 30007 MessageAlreadyContainsThread = 160004 MessageAlreadyCrossposted = 40033 MessageBlockedByHarmfulLinksFilter = 240000 MessageWasBlockedByAutomaticModeration = 200000 MissingOAuth2Scope = 50026 MissingPermissionToSendThisSticker = 50600 MissingPermissions = 50001 NoUsersWithTag = 80004 NoteTooLong = 50015 OAuth2ApplicationDoesntHaveBot = 50010 OAuth2ApplicationLimitReached = 50011 OnlyBotsCanUse = 20002 OnlyOwnerAction = 20018 OpeningDMTooFast = 40003 OwnershipCannotBeTransferredToABotUser = 50132 PaymentSourceRequiredForGift = 50070 ProvidedMessageDeleteCountOutOfBounds = 50016 ReactionBlocked = 90001 RequestBodyContainsInvalidJSON = 50109 RequestEntityTooLarge = 40005 Requires2FA = 60003 SendMessagesHasBeenTemporarilyDisabled = 40004 ServerLocaleUnavailable = 50095 ServerRequiresBoosts = 50101 ServerRequiresMonetization = 50097 ServiceResourceIsBeingRateLimited = 40062 StageAlreadyOpened = 150006 StickerAnimationDurationTooLong = 170007 StickerFramerateBoundsExceeded = 170006 StickerMaximumFrameCountExceeded = 170004 StickerMaximumFramerateExceeded = 170003 TagNamesMustBeUnique = 40061 TargetUserNotInVoice = 40032 TheChannelsForThisGuildAreTooLarge = 30061 TheEntityTypeOfTheEventIsDifferentFromTheEntityYouAreTryingToStartTheEventFor = 50091 ThereAreNoTagsAvailableThatCanBeSetByNonModerators = 40066 ThreadIsLocked = 160005 TitleWasBlockedByAutomaticModeration = 200001 TokenUnauthorized = 40001 UnderMinimumAge = 20024 UnknownAccount = 10001 UnknownApplication = 10002 UnknownApplicationCommand = 10063 UnknownApplicationCommandPermissions = 10066 UnknownBan = 10026 UnknownBranch = 10032 UnknownBuild = 10030 UnknownChannel = 10003 UnknownDiscoverableServerCategory = 10059 UnknownEmoji = 10014 UnknownEntitlement = 10029 UnknownGiftCode = 10038 UnknownGuild = 10004 UnknownGuildMemberVerificationForm = 10068 UnknownGuildScheduledEvent = 10070 UnknownGuildScheduledEventUser = 10071 UnknownGuildTemplate = 10057 UnknownGuildWelcomeScreen = 10069 UnknownIntegration = 10005 UnknownInteraction = 10062 UnknownInvite = 10006 UnknownLobby = 10031 UnknownMember = 10007 UnknownMessage = 10008 UnknownPermissionOverwrite = 10009 UnknownPremiumServerSubscribeCooldown = 10050 UnknownProvider = 10010 UnknownRedistributable = 10036 UnknownRole = 10011 UnknownSKU = 10027 UnknownSession = 10020 UnknownStageInstance = 10067 UnknownSticker = 10060 UnknownStoreDirectoryLayout = 10033 UnknownStoreListing = 10028 UnknownStream = 10049 UnknownTag = 10087 UnknownToken = 10012 UnknownUser = 10013 UnknownVoiceState = 10065 UnknownWebhook = 10015 UnknownWebhookService = 10016 UploadedFileNotFound = 50146 UserBanned = 40007 WebhookServicesCannotBeUsedInForumChannels = 220004 WebhooksCanOnlyCreateThreadsInForumChannels = 220003 WebhooksPostedToForumChannelsCannotHaveBothAThreadNameAndThreadId = 220002 WebhooksPostedToForumChannelsMustHaveAThreadNameOrThreadId = 220001 WordsNotAllowed = 20031 WriteRatelimitReached = 20029"
  },
  "api/Discord.DiscordJsonError.html": {
    "href": "api/Discord.DiscordJsonError.html",
    "title": "Struct DiscordJsonError | Discord.Net Documentation",
    "keywords": "Struct DiscordJsonError Namespace Discord Assembly Discord.Net.Core.dll Represents a generic parsed json error received from discord after performing a rest request. public struct DiscordJsonError Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Errors Gets a collection of errors associated with the specific property at the path. public readonly IReadOnlyCollection<DiscordError> Errors { get; } Property Value IReadOnlyCollection<DiscordError> Path Gets the json path of the error. public readonly string Path { get; } Property Value string"
  },
  "api/Discord.DiscoveryEligibilityFlags.html": {
    "href": "api/Discord.DiscoveryEligibilityFlags.html",
    "title": "Enum DiscoveryEligibilityFlags | Discord.Net Documentation",
    "keywords": "Enum DiscoveryEligibilityFlags Namespace Discord Assembly Discord.Net.Core.dll Gets the discovery eligibility flags for the application combined as a bitfield. [Flags] public enum DiscoveryEligibilityFlags Fields ApprovedCommands = 256 Application has the message content intent approved or uses application commands. Description = 4 Application has a description. Eligible = 65536 Application is eligible for discovery. InstallParams = 32 Application has a custom install URL or install parameters. MfaEnabled = 2048 Application's owner has MFA enabled. None = 0 The application has no eligibility flags. PrivacyPolicy = 16 Application has a privacy policy set. SafeCommands = 1024 Application's commands are safe for work. SafeDescription = 128 Application's description is safe for work. SafeDirectoryOverview = 4096 Application's directory long description is safe for work. SafeName = 64 Application's name is safe for work. SafeRoleConnections = 32768 Application's role connections metadata is safe for work. SafeShortDescription = 16384 Application's directory short description is safe for work. SupportGuild = 512 Application has a support guild set. SupportedLocales = 8192 Application has at least one supported locale set. Tag = 2 Application has at least one tag set. TermsOfService = 8 Application has terms of service set. Verified = 1 Application is verified."
  },
  "api/Discord.Embed.html": {
    "href": "api/Discord.Embed.html",
    "title": "Class Embed | Discord.Net Documentation",
    "keywords": "Class Embed Namespace Discord Assembly Discord.Net.Core.dll Represents an embed object seen in an IUserMessage. public class Embed : IEmbed Inheritance object Embed Implements IEmbed Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods StringExtensions.ToJsonString(Embed, Formatting) EmbedBuilderExtensions.ToEmbedBuilder(IEmbed) Properties Author Gets the author field of this embed. public EmbedAuthor? Author { get; } Property Value EmbedAuthor? The author field of the embed, or null if none is set. Color Gets the color of this embed. public Color? Color { get; } Property Value Color? The color of the embed present on the side of the embed, or null if none is set. Description Gets the description of this embed. public string Description { get; } Property Value string The description field of the embed. Fields Gets the fields of the embed. public ImmutableArray<EmbedField> Fields { get; } Property Value ImmutableArray<EmbedField> An array of the fields of the embed. Footer Gets the footer field of this embed. public EmbedFooter? Footer { get; } Property Value EmbedFooter? The author field of the embed, or null if none is set. Image Gets the image of this embed. public EmbedImage? Image { get; } Property Value EmbedImage? The image of the embed, or null if none is set. Length Gets the total length of all embed properties. public int Length { get; } Property Value int Provider Gets the provider of this embed. public EmbedProvider? Provider { get; } Property Value EmbedProvider? The source of the embed, or null if none is set. Thumbnail Gets the thumbnail featured in this embed. public EmbedThumbnail? Thumbnail { get; } Property Value EmbedThumbnail? The thumbnail featured in the embed, or null if none is set. Timestamp Gets the timestamp of this embed. public DateTimeOffset? Timestamp { get; } Property Value DateTimeOffset? A DateTimeOffset based on the timestamp present at the bottom left of the embed, or null if none is set. Title Gets the title of this embed. public string Title { get; } Property Value string The title of the embed. Type Gets the type of this embed. public EmbedType Type { get; } Property Value EmbedType The type of the embed. Url Gets the title URL of this embed. public string Url { get; } Property Value string A string containing the URL set in a title of the embed. Video Gets the video of this embed. public EmbedVideo? Video { get; } Property Value EmbedVideo? The video of the embed, or null if none is set. Methods Equals(Embed) Determines whether the specified Embed is equal to the current Embed public bool Equals(Embed embed) Parameters embed Embed The Embed to compare with the current Embed Returns bool Equals(object) Determines whether the specified object is equal to the current Embed. public override bool Equals(object obj) Parameters obj object The object to compare with the current Embed Returns bool Remarks If the object passes is an Embed, Equals(Embed) will be called to compare the 2 instances GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ToString() Gets the title of the embed. public override string ToString() Returns string Operators operator ==(Embed, Embed) public static bool operator ==(Embed left, Embed right) Parameters left Embed right Embed Returns bool operator !=(Embed, Embed) public static bool operator !=(Embed left, Embed right) Parameters left Embed right Embed Returns bool"
  },
  "api/Discord.EmbedAuthor.html": {
    "href": "api/Discord.EmbedAuthor.html",
    "title": "Struct EmbedAuthor | Discord.Net Documentation",
    "keywords": "Struct EmbedAuthor Namespace Discord Assembly Discord.Net.Core.dll A author field of an Embed. public struct EmbedAuthor Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties IconUrl Gets the icon URL of the author field. public readonly string IconUrl { get; } Property Value string Name Gets the name of the author field. public readonly string Name { get; } Property Value string ProxyIconUrl Gets the proxified icon URL of the author field. public readonly string ProxyIconUrl { get; } Property Value string Url Gets the URL of the author field. public readonly string Url { get; } Property Value string Methods Equals(EmbedAuthor?) Determines whether the specified EmbedAuthor is equal to the current EmbedAuthor public bool Equals(EmbedAuthor? embedAuthor) Parameters embedAuthor EmbedAuthor? The EmbedAuthor to compare with the current EmbedAuthor Returns bool Equals(object) Determines whether the specified object is equal to the current EmbedAuthor. public override bool Equals(object obj) Parameters obj object The object to compare with the current EmbedAuthor Returns bool Remarks If the object passes is an EmbedAuthor, Equals(EmbedAuthor?) will be called to compare the 2 instances GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. ToString() Gets the name of the author field. public override string ToString() Returns string Operators operator ==(EmbedAuthor?, EmbedAuthor?) public static bool operator ==(EmbedAuthor? left, EmbedAuthor? right) Parameters left EmbedAuthor? right EmbedAuthor? Returns bool operator !=(EmbedAuthor?, EmbedAuthor?) public static bool operator !=(EmbedAuthor? left, EmbedAuthor? right) Parameters left EmbedAuthor? right EmbedAuthor? Returns bool"
  },
  "api/Discord.EmbedAuthorBuilder.html": {
    "href": "api/Discord.EmbedAuthorBuilder.html",
    "title": "Class EmbedAuthorBuilder | Discord.Net Documentation",
    "keywords": "Class EmbedAuthorBuilder Namespace Discord Assembly Discord.Net.Core.dll Represents a builder class for a author field. public class EmbedAuthorBuilder Inheritance object EmbedAuthorBuilder Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples The example will build a rich embed with an author field, a footer field, and 2 normal fields using an EmbedBuilder: var exampleAuthor = new EmbedAuthorBuilder() .WithName(\"I am a bot\") .WithIconUrl(\"https://discord.com/assets/e05ead6e6ebc08df9291738d0aa6986d.png\"); var exampleFooter = new EmbedFooterBuilder() .WithText(\"I am a nice footer\") .WithIconUrl(\"https://discord.com/assets/28174a34e77bb5e5310ced9f95cb480b.png\"); var exampleField = new EmbedFieldBuilder() .WithName(\"Title of Another Field\") .WithValue(\"I am an [example](https://example.com).\") .WithInline(true); var otherField = new EmbedFieldBuilder() .WithName(\"Title of a Field\") .WithValue(\"Notice how I'm inline with that other field next to me.\") .WithInline(true); var embed = new EmbedBuilder() .AddField(exampleField) .AddField(otherField) .WithAuthor(exampleAuthor) .WithFooter(exampleFooter) .Build(); Fields MaxAuthorNameLength Gets the maximum author name length allowed by Discord. public const int MaxAuthorNameLength = 256 Field Value int Properties IconUrl Gets or sets the icon URL of the author field. public string IconUrl { get; set; } Property Value string The icon URL of the author field. Exceptions ArgumentException Url is not a well-formed Uri. Name Gets or sets the author name. public string Name { get; set; } Property Value string The author name. Exceptions ArgumentException Author name length is longer than MaxAuthorNameLength. Url Gets or sets the URL of the author field. public string Url { get; set; } Property Value string The URL of the author field. Exceptions ArgumentException Url is not a well-formed Uri. Methods Build() Builds the author field to be used. public EmbedAuthor Build() Returns EmbedAuthor The built author field. Exceptions ArgumentException Author name length is longer than MaxAuthorNameLength. - or - Url is not a well-formed Uri. - or - IconUrl is not a well-formed Uri. Equals(EmbedAuthorBuilder) Determines whether the specified EmbedAuthorBuilder is equals to the current EmbedAuthorBuilder public bool Equals(EmbedAuthorBuilder embedAuthorBuilder) Parameters embedAuthorBuilder EmbedAuthorBuilder The EmbedAuthorBuilder to compare with the current EmbedAuthorBuilder Returns bool Equals(object) Determines whether the specified object is equal to the current EmbedAuthorBuilder. public override bool Equals(object obj) Parameters obj object The object to compare with the current EmbedAuthorBuilder Returns bool Remarks If the object passes is an EmbedAuthorBuilder, Equals(EmbedAuthorBuilder) will be called to compare the 2 instances GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithIconUrl(string) Sets the icon URL of the author field. public EmbedAuthorBuilder WithIconUrl(string iconUrl) Parameters iconUrl string The icon URL of the author field. Returns EmbedAuthorBuilder The current builder. WithName(string) Sets the name of the author field. public EmbedAuthorBuilder WithName(string name) Parameters name string The name of the author field. Returns EmbedAuthorBuilder The current builder. WithUrl(string) Sets the URL of the author field. public EmbedAuthorBuilder WithUrl(string url) Parameters url string The URL of the author field. Returns EmbedAuthorBuilder The current builder. Operators operator ==(EmbedAuthorBuilder, EmbedAuthorBuilder) public static bool operator ==(EmbedAuthorBuilder left, EmbedAuthorBuilder right) Parameters left EmbedAuthorBuilder right EmbedAuthorBuilder Returns bool operator !=(EmbedAuthorBuilder, EmbedAuthorBuilder) public static bool operator !=(EmbedAuthorBuilder left, EmbedAuthorBuilder right) Parameters left EmbedAuthorBuilder right EmbedAuthorBuilder Returns bool"
  },
  "api/Discord.EmbedBuilder.html": {
    "href": "api/Discord.EmbedBuilder.html",
    "title": "Class EmbedBuilder | Discord.Net Documentation",
    "keywords": "Class EmbedBuilder Namespace Discord Assembly Discord.Net.Core.dll Represents a builder class for creating a Rich Embed. public class EmbedBuilder Inheritance object EmbedBuilder Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EmbedBuilderExtensions.WithAuthor(EmbedBuilder, IUser) EmbedBuilderExtensions.WithColor(EmbedBuilder, byte, byte, byte) EmbedBuilderExtensions.WithColor(EmbedBuilder, int, int, int) EmbedBuilderExtensions.WithColor(EmbedBuilder, float, float, float) EmbedBuilderExtensions.WithColor(EmbedBuilder, uint) EmbedBuilderExtensions.WithFields(EmbedBuilder, params EmbedFieldBuilder[]) EmbedBuilderExtensions.WithFields(EmbedBuilder, IEnumerable<EmbedFieldBuilder>) StringExtensions.ToJsonString(EmbedBuilder, Formatting) Examples Basic Usage The example below builds an embed and sends it to the chat using the command system. [Command(\"embed\")] public async Task SendRichEmbedAsync() { var embed = new EmbedBuilder { // Embed property can be set within object initializer Title = \"Hello world!\", Description = \"I am a description set by initializer.\" }; // Or with methods embed.AddField(\"Field title\", \"Field value. I also support [hyperlink markdown](https://example.com)!\") .WithAuthor(Context.Client.CurrentUser) .WithFooter(footer => footer.Text = \"I am a footer.\") .WithColor(Color.Blue) .WithTitle(\"I overwrote \\\"Hello world!\\\"\") .WithDescription(\"I am a description.\") .WithUrl(\"https://example.com\") .WithCurrentTimestamp(); //Your embed needs to be built before it is able to be sent await ReplyAsync(embed: embed.Build()); } Usage with Local Images The example below sends an image and has the image embedded in the rich embed. See SendFileAsync for more information about uploading a file or image. [Command(\"embedimage\")] public async Task SendEmbedWithImageAsync() { var fileName = \"image.png\"; var embed = new EmbedBuilder() { ImageUrl = $\"attachment://{fileName}\" }.Build(); await Context.Channel.SendFileAsync(fileName, embed: embed); } Remarks This builder class is used to build an Embed (rich embed) object that will be ready to be sent via SendMessageAsync after Build is called. Constructors EmbedBuilder() Initializes a new EmbedBuilder class. public EmbedBuilder() See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder Fields MaxDescriptionLength Returns the maximum length of description allowed by Discord. public const int MaxDescriptionLength = 4096 Field Value int See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder MaxEmbedLength Returns the maximum length of total characters allowed by Discord. public const int MaxEmbedLength = 6000 Field Value int See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder MaxFieldCount Returns the maximum number of fields allowed by Discord. public const int MaxFieldCount = 25 Field Value int See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder MaxTitleLength Returns the maximum length of title allowed by Discord. public const int MaxTitleLength = 256 Field Value int See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder Properties Author Gets or sets the EmbedAuthorBuilder of an Embed. public EmbedAuthorBuilder Author { get; set; } Property Value EmbedAuthorBuilder The author field builder of the embed, or null if none is set. See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder Color Gets or sets the sidebar color of an Embed. public Color? Color { get; set; } Property Value Color? The color of the embed, or null if none is set. See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder Description Gets or sets the description of an Embed. public string Description { get; set; } Property Value string The description of the embed. Exceptions ArgumentException Description length exceeds MaxDescriptionLength. See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder Fields Gets or sets the list of EmbedFieldBuilder of an Embed. public List<EmbedFieldBuilder> Fields { get; set; } Property Value List<EmbedFieldBuilder> The list of existing EmbedFieldBuilder. Exceptions ArgumentNullException An embed builder's fields collection is set to null. ArgumentException Fields count exceeds MaxFieldCount. See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder Footer Gets or sets the EmbedFooterBuilder of an Embed. public EmbedFooterBuilder Footer { get; set; } Property Value EmbedFooterBuilder The footer field builder of the embed, or null if none is set. See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder ImageUrl Gets or sets the image URL of an Embed. public string ImageUrl { get; set; } Property Value string The image URL of the embed. Exceptions ArgumentException Url is not a well-formed Uri. See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder Length Gets the total length of all embed properties. public int Length { get; } Property Value int The combined length of Title, Name, Description, Text, Name, and Value. See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder ThumbnailUrl Gets or sets the thumbnail URL of an Embed. public string ThumbnailUrl { get; set; } Property Value string The thumbnail URL of the embed. Exceptions ArgumentException Url is not a well-formed Uri. See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder Timestamp Gets or sets the timestamp of an Embed. public DateTimeOffset? Timestamp { get; set; } Property Value DateTimeOffset? The timestamp of the embed, or null if none is set. See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder Title Gets or sets the title of an Embed. public string Title { get; set; } Property Value string The title of the embed. Exceptions ArgumentException Title length exceeds MaxTitleLength. See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder Url Gets or sets the URL of an Embed. public string Url { get; set; } Property Value string The URL of the embed. Exceptions ArgumentException Url is not a well-formed Uri. See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder Methods AddField(EmbedFieldBuilder) Adds a field with the provided EmbedFieldBuilder to an Embed. public EmbedBuilder AddField(EmbedFieldBuilder field) Parameters field EmbedFieldBuilder The field builder class containing the field properties. Returns EmbedBuilder The current builder. Exceptions ArgumentException Field count exceeds MaxFieldCount. See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder AddField(Action<EmbedFieldBuilder>) Adds an Embed field with the provided properties. public EmbedBuilder AddField(Action<EmbedFieldBuilder> action) Parameters action Action<EmbedFieldBuilder> The delegate containing the field properties. Returns EmbedBuilder The current builder. See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder AddField(string, object, bool) Adds an Embed field with the provided name and value. public EmbedBuilder AddField(string name, object value, bool inline = false) Parameters name string The title of the field. value object The value of the field. inline bool Indicates whether the field is in-line or not. Returns EmbedBuilder The current builder. See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder Build() Builds the Embed into a Rich Embed ready to be sent. public Embed Build() Returns Embed The built embed object. Exceptions InvalidOperationException Total embed length exceeds MaxEmbedLength. InvalidOperationException Any Url must include its protocols (i.e http:// or https://). See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder Equals(EmbedBuilder) Determines whether the specified EmbedBuilder is equal to the current EmbedBuilder public bool Equals(EmbedBuilder embedBuilder) Parameters embedBuilder EmbedBuilder The EmbedBuilder to compare with the current EmbedBuilder Returns bool See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder Equals(object) Determines whether the specified object is equal to the current EmbedBuilder. public override bool Equals(object obj) Parameters obj object The object to compare with the current EmbedBuilder Returns bool Remarks If the object passes is an EmbedBuilder, Equals(EmbedBuilder) will be called to compare the 2 instances See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder WithAuthor(EmbedAuthorBuilder) Sets the EmbedAuthorBuilder of an Embed. public EmbedBuilder WithAuthor(EmbedAuthorBuilder author) Parameters author EmbedAuthorBuilder The author builder class containing the author field properties. Returns EmbedBuilder The current builder. See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder WithAuthor(Action<EmbedAuthorBuilder>) Sets the author field of an Embed with the provided properties. public EmbedBuilder WithAuthor(Action<EmbedAuthorBuilder> action) Parameters action Action<EmbedAuthorBuilder> The delegate containing the author field properties. Returns EmbedBuilder The current builder. See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder WithAuthor(string, string, string) Sets the author field of an Embed with the provided name, icon URL, and URL. public EmbedBuilder WithAuthor(string name, string iconUrl = null, string url = null) Parameters name string The title of the author field. iconUrl string The icon URL of the author field. url string The URL of the author field. Returns EmbedBuilder The current builder. See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder WithColor(Color) Sets the sidebar color of an Embed. public EmbedBuilder WithColor(Color color) Parameters color Color The color to be set. Returns EmbedBuilder The current builder. See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder WithCurrentTimestamp() Sets the timestamp of an Embed to the current time. public EmbedBuilder WithCurrentTimestamp() Returns EmbedBuilder The current builder. See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder WithDescription(string) Sets the description of an Embed. public EmbedBuilder WithDescription(string description) Parameters description string The description to be set. Returns EmbedBuilder The current builder. See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder WithFooter(EmbedFooterBuilder) Sets the EmbedFooterBuilder of an Embed. public EmbedBuilder WithFooter(EmbedFooterBuilder footer) Parameters footer EmbedFooterBuilder The footer builder class containing the footer field properties. Returns EmbedBuilder The current builder. See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder WithFooter(Action<EmbedFooterBuilder>) Sets the footer field of an Embed with the provided properties. public EmbedBuilder WithFooter(Action<EmbedFooterBuilder> action) Parameters action Action<EmbedFooterBuilder> The delegate containing the footer field properties. Returns EmbedBuilder The current builder. See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder WithFooter(string, string) Sets the footer field of an Embed with the provided name, icon URL. public EmbedBuilder WithFooter(string text, string iconUrl = null) Parameters text string The title of the footer field. iconUrl string The icon URL of the footer field. Returns EmbedBuilder The current builder. See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder WithImageUrl(string) Sets the image URL of an Embed. public EmbedBuilder WithImageUrl(string imageUrl) Parameters imageUrl string The image URL to be set. Returns EmbedBuilder The current builder. See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder WithThumbnailUrl(string) Sets the thumbnail URL of an Embed. public EmbedBuilder WithThumbnailUrl(string thumbnailUrl) Parameters thumbnailUrl string The thumbnail URL to be set. Returns EmbedBuilder The current builder. See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder WithTimestamp(DateTimeOffset) Sets the timestamp of an Embed. public EmbedBuilder WithTimestamp(DateTimeOffset dateTimeOffset) Parameters dateTimeOffset DateTimeOffset The timestamp to be set. Returns EmbedBuilder The current builder. See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder WithTitle(string) Sets the title of an Embed. public EmbedBuilder WithTitle(string title) Parameters title string The title to be set. Returns EmbedBuilder The current builder. See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder WithUrl(string) Sets the URL of an Embed. public EmbedBuilder WithUrl(string url) Parameters url string The URL to be set. Returns EmbedBuilder The current builder. See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder Operators operator ==(EmbedBuilder, EmbedBuilder) public static bool operator ==(EmbedBuilder left, EmbedBuilder right) Parameters left EmbedBuilder right EmbedBuilder Returns bool See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder operator !=(EmbedBuilder, EmbedBuilder) public static bool operator !=(EmbedBuilder left, EmbedBuilder right) Parameters left EmbedBuilder right EmbedBuilder Returns bool See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder See Also EmbedFooterBuilder EmbedAuthorBuilder EmbedFieldBuilder"
  },
  "api/Discord.EmbedBuilderExtensions.html": {
    "href": "api/Discord.EmbedBuilderExtensions.html",
    "title": "Class EmbedBuilderExtensions | Discord.Net Documentation",
    "keywords": "Class EmbedBuilderExtensions Namespace Discord Assembly Discord.Net.Core.dll An extension class for building an embed. public static class EmbedBuilderExtensions Inheritance object EmbedBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToEmbedBuilder(IEmbed) Converts a Rich IEmbed object to a EmbedBuilder. public static EmbedBuilder ToEmbedBuilder(this IEmbed embed) Parameters embed IEmbed Returns EmbedBuilder Exceptions InvalidOperationException The embed type is not Rich. WithAuthor(EmbedBuilder, IUser) Fills the embed author field with the provided user's full username and avatar URL. public static EmbedBuilder WithAuthor(this EmbedBuilder builder, IUser user) Parameters builder EmbedBuilder user IUser Returns EmbedBuilder WithColor(EmbedBuilder, byte, byte, byte) Adds embed color based on the provided RGB byte value. public static EmbedBuilder WithColor(this EmbedBuilder builder, byte r, byte g, byte b) Parameters builder EmbedBuilder r byte g byte b byte Returns EmbedBuilder WithColor(EmbedBuilder, int, int, int) Adds embed color based on the provided RGB int value. public static EmbedBuilder WithColor(this EmbedBuilder builder, int r, int g, int b) Parameters builder EmbedBuilder r int g int b int Returns EmbedBuilder Exceptions ArgumentOutOfRangeException The argument value is not between 0 to 255. WithColor(EmbedBuilder, float, float, float) Adds embed color based on the provided RGB float value. public static EmbedBuilder WithColor(this EmbedBuilder builder, float r, float g, float b) Parameters builder EmbedBuilder r float g float b float Returns EmbedBuilder Exceptions ArgumentOutOfRangeException The argument value is not between 0 to 1. WithColor(EmbedBuilder, uint) Adds embed color based on the provided raw value. public static EmbedBuilder WithColor(this EmbedBuilder builder, uint rawValue) Parameters builder EmbedBuilder rawValue uint Returns EmbedBuilder WithFields(EmbedBuilder, params EmbedFieldBuilder[]) Adds the specified fields into this EmbedBuilder. public static EmbedBuilder WithFields(this EmbedBuilder builder, params EmbedFieldBuilder[] fields) Parameters builder EmbedBuilder fields EmbedFieldBuilder[] Returns EmbedBuilder WithFields(EmbedBuilder, IEnumerable<EmbedFieldBuilder>) Adds the specified fields into this EmbedBuilder. public static EmbedBuilder WithFields(this EmbedBuilder builder, IEnumerable<EmbedFieldBuilder> fields) Parameters builder EmbedBuilder fields IEnumerable<EmbedFieldBuilder> Returns EmbedBuilder Exceptions ArgumentException Field count exceeds MaxFieldCount."
  },
  "api/Discord.EmbedField.html": {
    "href": "api/Discord.EmbedField.html",
    "title": "Struct EmbedField | Discord.Net Documentation",
    "keywords": "Struct EmbedField Namespace Discord Assembly Discord.Net.Core.dll A field for an Embed. public struct EmbedField Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Inline Gets a value that indicates whether the field should be in-line with each other. public readonly bool Inline { get; } Property Value bool Name Gets the name of the field. public readonly string Name { get; } Property Value string Value Gets the value of the field. public readonly string Value { get; } Property Value string Methods Equals(EmbedField?) Determines whether the specified EmbedField is equal to the current EmbedField public bool Equals(EmbedField? embedField) Parameters embedField EmbedField? Returns bool Equals(object) Determines whether the specified object is equal to the current EmbedField. public override bool Equals(object obj) Parameters obj object The object to compare with the current object Returns bool Remarks If the object passes is an EmbedField, Equals(EmbedField?) will be called to compare the 2 instances GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. ToString() Gets the name of the field. public override string ToString() Returns string A string that resolves to Name. Operators operator ==(EmbedField?, EmbedField?) public static bool operator ==(EmbedField? left, EmbedField? right) Parameters left EmbedField? right EmbedField? Returns bool operator !=(EmbedField?, EmbedField?) public static bool operator !=(EmbedField? left, EmbedField? right) Parameters left EmbedField? right EmbedField? Returns bool"
  },
  "api/Discord.EmbedFieldBuilder.html": {
    "href": "api/Discord.EmbedFieldBuilder.html",
    "title": "Class EmbedFieldBuilder | Discord.Net Documentation",
    "keywords": "Class EmbedFieldBuilder Namespace Discord Assembly Discord.Net.Core.dll Represents a builder class for an embed field. public class EmbedFieldBuilder Inheritance object EmbedFieldBuilder Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples The example will build a rich embed with an author field, a footer field, and 2 normal fields using an EmbedBuilder: var exampleAuthor = new EmbedAuthorBuilder() .WithName(\"I am a bot\") .WithIconUrl(\"https://discord.com/assets/e05ead6e6ebc08df9291738d0aa6986d.png\"); var exampleFooter = new EmbedFooterBuilder() .WithText(\"I am a nice footer\") .WithIconUrl(\"https://discord.com/assets/28174a34e77bb5e5310ced9f95cb480b.png\"); var exampleField = new EmbedFieldBuilder() .WithName(\"Title of Another Field\") .WithValue(\"I am an [example](https://example.com).\") .WithInline(true); var otherField = new EmbedFieldBuilder() .WithName(\"Title of a Field\") .WithValue(\"Notice how I'm inline with that other field next to me.\") .WithInline(true); var embed = new EmbedBuilder() .AddField(exampleField) .AddField(otherField) .WithAuthor(exampleAuthor) .WithFooter(exampleFooter) .Build(); Fields MaxFieldNameLength Gets the maximum field length for name allowed by Discord. public const int MaxFieldNameLength = 256 Field Value int MaxFieldValueLength Gets the maximum field length for value allowed by Discord. public const int MaxFieldValueLength = 1024 Field Value int Properties IsInline Gets or sets a value that indicates whether the field should be in-line with each other. public bool IsInline { get; set; } Property Value bool Name Gets or sets the field name. public string Name { get; set; } Property Value string The name of the field. Exceptions ArgumentException Field name is null, empty or entirely whitespace. - or - Field name length exceeds MaxFieldNameLength. Value Gets or sets the field value. public object Value { get; set; } Property Value object The value of the field. Exceptions ArgumentException Field value is null, empty or entirely whitespace. - or - Field value length exceeds MaxFieldValueLength. Methods Build() Builds the field builder into a EmbedField class. public EmbedField Build() Returns EmbedField The current builder. Exceptions ArgumentException Name or Value is null, empty or entirely whitespace. - or - Name or Value exceeds the maximum length allowed by Discord. Equals(EmbedFieldBuilder) Determines whether the specified EmbedFieldBuilder is equal to the current EmbedFieldBuilder public bool Equals(EmbedFieldBuilder embedFieldBuilder) Parameters embedFieldBuilder EmbedFieldBuilder The EmbedFieldBuilder to compare with the current EmbedFieldBuilder Returns bool Equals(object) Determines whether the specified object is equal to the current EmbedFieldBuilder. public override bool Equals(object obj) Parameters obj object The object to compare with the current EmbedFieldBuilder Returns bool Remarks If the object passes is an EmbedFieldBuilder, Equals(EmbedFieldBuilder) will be called to compare the 2 instances GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithIsInline(bool) Determines whether the field should be in-line with each other. public EmbedFieldBuilder WithIsInline(bool isInline) Parameters isInline bool Returns EmbedFieldBuilder The current builder. WithName(string) Sets the field name. public EmbedFieldBuilder WithName(string name) Parameters name string The name to set the field name to. Returns EmbedFieldBuilder The current builder. WithValue(object) Sets the field value. public EmbedFieldBuilder WithValue(object value) Parameters value object The value to set the field value to. Returns EmbedFieldBuilder The current builder. Operators operator ==(EmbedFieldBuilder, EmbedFieldBuilder) public static bool operator ==(EmbedFieldBuilder left, EmbedFieldBuilder right) Parameters left EmbedFieldBuilder right EmbedFieldBuilder Returns bool operator !=(EmbedFieldBuilder, EmbedFieldBuilder) public static bool operator !=(EmbedFieldBuilder left, EmbedFieldBuilder right) Parameters left EmbedFieldBuilder right EmbedFieldBuilder Returns bool"
  },
  "api/Discord.EmbedFooter.html": {
    "href": "api/Discord.EmbedFooter.html",
    "title": "Struct EmbedFooter | Discord.Net Documentation",
    "keywords": "Struct EmbedFooter Namespace Discord Assembly Discord.Net.Core.dll A footer field for an Embed. public struct EmbedFooter Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties IconUrl Gets the URL of the footer icon. public readonly string IconUrl { get; } Property Value string A string containing the URL of the footer icon. ProxyUrl Gets the proxied URL of the footer icon link. public readonly string ProxyUrl { get; } Property Value string A string containing the proxied URL of the footer icon. Text Gets the text of the footer field. public readonly string Text { get; } Property Value string A string containing the text of the footer field. Methods Equals(EmbedFooter?) Determines whether the specified EmbedFooter is equal to the current EmbedFooter public bool Equals(EmbedFooter? embedFooter) Parameters embedFooter EmbedFooter? The EmbedFooter to compare with the current EmbedFooter Returns bool Equals(object) Determines whether the specified object is equal to the current EmbedFooter. public override bool Equals(object obj) Parameters obj object The object to compare with the current EmbedFooter Returns bool Remarks If the object passes is an EmbedFooter, Equals(EmbedFooter?) will be called to compare the 2 instances GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. ToString() Gets the text of the footer field. public override string ToString() Returns string A string that resolves to Text. Operators operator ==(EmbedFooter?, EmbedFooter?) public static bool operator ==(EmbedFooter? left, EmbedFooter? right) Parameters left EmbedFooter? right EmbedFooter? Returns bool operator !=(EmbedFooter?, EmbedFooter?) public static bool operator !=(EmbedFooter? left, EmbedFooter? right) Parameters left EmbedFooter? right EmbedFooter? Returns bool"
  },
  "api/Discord.EmbedFooterBuilder.html": {
    "href": "api/Discord.EmbedFooterBuilder.html",
    "title": "Class EmbedFooterBuilder | Discord.Net Documentation",
    "keywords": "Class EmbedFooterBuilder Namespace Discord Assembly Discord.Net.Core.dll Represents a builder class for an embed footer. public class EmbedFooterBuilder Inheritance object EmbedFooterBuilder Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples The example will build a rich embed with an author field, a footer field, and 2 normal fields using an EmbedBuilder: var exampleAuthor = new EmbedAuthorBuilder() .WithName(\"I am a bot\") .WithIconUrl(\"https://discord.com/assets/e05ead6e6ebc08df9291738d0aa6986d.png\"); var exampleFooter = new EmbedFooterBuilder() .WithText(\"I am a nice footer\") .WithIconUrl(\"https://discord.com/assets/28174a34e77bb5e5310ced9f95cb480b.png\"); var exampleField = new EmbedFieldBuilder() .WithName(\"Title of Another Field\") .WithValue(\"I am an [example](https://example.com).\") .WithInline(true); var otherField = new EmbedFieldBuilder() .WithName(\"Title of a Field\") .WithValue(\"Notice how I'm inline with that other field next to me.\") .WithInline(true); var embed = new EmbedBuilder() .AddField(exampleField) .AddField(otherField) .WithAuthor(exampleAuthor) .WithFooter(exampleFooter) .Build(); Fields MaxFooterTextLength Gets the maximum footer length allowed by Discord. public const int MaxFooterTextLength = 2048 Field Value int Properties IconUrl Gets or sets the icon URL of the footer field. public string IconUrl { get; set; } Property Value string The icon URL of the footer field. Exceptions ArgumentException Url is not a well-formed Uri. Text Gets or sets the footer text. public string Text { get; set; } Property Value string The footer text. Exceptions ArgumentException Author name length is longer than MaxFooterTextLength. Methods Build() Builds the footer field to be used. public EmbedFooter Build() Returns EmbedFooter Exceptions ArgumentException Text length is longer than MaxFooterTextLength. - or - IconUrl is not a well-formed Uri. Equals(EmbedFooterBuilder) Determines whether the specified EmbedFooterBuilder is equal to the current EmbedFooterBuilder public bool Equals(EmbedFooterBuilder embedFooterBuilder) Parameters embedFooterBuilder EmbedFooterBuilder The EmbedFooterBuilder to compare with the current EmbedFooterBuilder Returns bool Equals(object) Determines whether the specified object is equal to the current EmbedFooterBuilder. public override bool Equals(object obj) Parameters obj object The object to compare with the current EmbedFooterBuilder Returns bool Remarks If the object passes is an EmbedFooterBuilder, Equals(EmbedFooterBuilder) will be called to compare the 2 instances GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithIconUrl(string) Sets the icon URL of the footer field. public EmbedFooterBuilder WithIconUrl(string iconUrl) Parameters iconUrl string The icon URL of the footer field. Returns EmbedFooterBuilder The current builder. WithText(string) Sets the name of the footer field. public EmbedFooterBuilder WithText(string text) Parameters text string The text of the footer field. Returns EmbedFooterBuilder The current builder. Operators operator ==(EmbedFooterBuilder, EmbedFooterBuilder) public static bool operator ==(EmbedFooterBuilder left, EmbedFooterBuilder right) Parameters left EmbedFooterBuilder right EmbedFooterBuilder Returns bool operator !=(EmbedFooterBuilder, EmbedFooterBuilder) public static bool operator !=(EmbedFooterBuilder left, EmbedFooterBuilder right) Parameters left EmbedFooterBuilder right EmbedFooterBuilder Returns bool"
  },
  "api/Discord.EmbedImage.html": {
    "href": "api/Discord.EmbedImage.html",
    "title": "Struct EmbedImage | Discord.Net Documentation",
    "keywords": "Struct EmbedImage Namespace Discord Assembly Discord.Net.Core.dll An image for an Embed. public struct EmbedImage Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Height Gets the height of this image. public readonly int? Height { get; } Property Value int? A int representing the height of this image if it can be retrieved; otherwise null. ProxyUrl Gets a proxied URL of this image. public readonly string ProxyUrl { get; } Property Value string A string containing the proxied URL of this image. Url Gets the URL of the image. public readonly string Url { get; } Property Value string A string containing the URL of the image. Width Gets the width of this image. public readonly int? Width { get; } Property Value int? A int representing the width of this image if it can be retrieved; otherwise null. Methods Equals(EmbedImage?) Determines whether the specified EmbedImage is equal to the current EmbedImage public bool Equals(EmbedImage? embedImage) Parameters embedImage EmbedImage? The EmbedImage to compare with the current EmbedImage Returns bool Equals(object) Determines whether the specified object is equal to the current EmbedImage. public override bool Equals(object obj) Parameters obj object The object to compare with the current EmbedImage Returns bool Remarks If the object passes is an EmbedImage, Equals(EmbedImage?) will be called to compare the 2 instances GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. ToString() Gets the URL of the thumbnail. public override string ToString() Returns string A string that resolves to Url . Operators operator ==(EmbedImage?, EmbedImage?) public static bool operator ==(EmbedImage? left, EmbedImage? right) Parameters left EmbedImage? right EmbedImage? Returns bool operator !=(EmbedImage?, EmbedImage?) public static bool operator !=(EmbedImage? left, EmbedImage? right) Parameters left EmbedImage? right EmbedImage? Returns bool"
  },
  "api/Discord.EmbedProvider.html": {
    "href": "api/Discord.EmbedProvider.html",
    "title": "Struct EmbedProvider | Discord.Net Documentation",
    "keywords": "Struct EmbedProvider Namespace Discord Assembly Discord.Net.Core.dll A provider field for an Embed. public struct EmbedProvider Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Name Gets the name of the provider. public readonly string Name { get; } Property Value string A string representing the name of the provider. Url Gets the URL of the provider. public readonly string Url { get; } Property Value string A string representing the link to the provider. Methods Equals(EmbedProvider?) Determines whether the specified EmbedProvider is equal to the current EmbedProvider public bool Equals(EmbedProvider? embedProvider) Parameters embedProvider EmbedProvider? The EmbedProvider to compare with the current EmbedProvider Returns bool Equals(object) Determines whether the specified object is equal to the current EmbedProvider. public override bool Equals(object obj) Parameters obj object The object to compare with the current EmbedProvider Returns bool Remarks If the object passes is an EmbedProvider, Equals(EmbedProvider?) will be called to compare the 2 instances GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. ToString() Gets the name of the provider. public override string ToString() Returns string A string that resolves to Name. Operators operator ==(EmbedProvider?, EmbedProvider?) public static bool operator ==(EmbedProvider? left, EmbedProvider? right) Parameters left EmbedProvider? right EmbedProvider? Returns bool operator !=(EmbedProvider?, EmbedProvider?) public static bool operator !=(EmbedProvider? left, EmbedProvider? right) Parameters left EmbedProvider? right EmbedProvider? Returns bool"
  },
  "api/Discord.EmbedThumbnail.html": {
    "href": "api/Discord.EmbedThumbnail.html",
    "title": "Struct EmbedThumbnail | Discord.Net Documentation",
    "keywords": "Struct EmbedThumbnail Namespace Discord Assembly Discord.Net.Core.dll A thumbnail featured in an Embed. public struct EmbedThumbnail Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Height Gets the height of this thumbnail. public readonly int? Height { get; } Property Value int? A int representing the height of this thumbnail if it can be retrieved; otherwise null. ProxyUrl Gets a proxied URL of this thumbnail. public readonly string ProxyUrl { get; } Property Value string A string containing the proxied URL of this thumbnail. Url Gets the URL of the thumbnail. public readonly string Url { get; } Property Value string A string containing the URL of the thumbnail. Width Gets the width of this thumbnail. public readonly int? Width { get; } Property Value int? A int representing the width of this thumbnail if it can be retrieved; otherwise null. Methods Equals(EmbedThumbnail?) Determines whether the specified EmbedThumbnail is equal to the current EmbedThumbnail public bool Equals(EmbedThumbnail? embedThumbnail) Parameters embedThumbnail EmbedThumbnail? The EmbedThumbnail to compare with the current EmbedThumbnail Returns bool Equals(object) Determines whether the specified object is equal to the current EmbedThumbnail. public override bool Equals(object obj) Parameters obj object The object to compare with the current EmbedThumbnail Returns bool Remarks If the object passes is an EmbedThumbnail, Equals(EmbedThumbnail?) will be called to compare the 2 instances GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. ToString() Gets the URL of the thumbnail. public override string ToString() Returns string A string that resolves to Url. Operators operator ==(EmbedThumbnail?, EmbedThumbnail?) public static bool operator ==(EmbedThumbnail? left, EmbedThumbnail? right) Parameters left EmbedThumbnail? right EmbedThumbnail? Returns bool operator !=(EmbedThumbnail?, EmbedThumbnail?) public static bool operator !=(EmbedThumbnail? left, EmbedThumbnail? right) Parameters left EmbedThumbnail? right EmbedThumbnail? Returns bool"
  },
  "api/Discord.EmbedType.html": {
    "href": "api/Discord.EmbedType.html",
    "title": "Enum EmbedType | Discord.Net Documentation",
    "keywords": "Enum EmbedType Namespace Discord Assembly Discord.Net.Core.dll Specifies the type of embed. public enum EmbedType Fields Article = 5 An article embed type. Gifv = 4 A GIFV embed type. Html = 7 A HTML embed type. Image = 3 An image embed type. Link = 1 A link embed type. Rich = 0 A rich embed type. Tweet = 6 A tweet embed type. Unknown = -1 An unknown embed type. Video = 2 A video embed type."
  },
  "api/Discord.EmbedVideo.html": {
    "href": "api/Discord.EmbedVideo.html",
    "title": "Struct EmbedVideo | Discord.Net Documentation",
    "keywords": "Struct EmbedVideo Namespace Discord Assembly Discord.Net.Core.dll A video featured in an Embed. public struct EmbedVideo Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Height Gets the height of the video. public readonly int? Height { get; } Property Value int? A int representing the height of this video if it can be retrieved; otherwise null. Url Gets the URL of the video. public readonly string Url { get; } Property Value string A string containing the URL of the image. Width Gets the weight of the video. public readonly int? Width { get; } Property Value int? A int representing the width of this video if it can be retrieved; otherwise null. Methods Equals(EmbedVideo?) Determines whether the specified EmbedVideo is equal to the current EmbedVideo public bool Equals(EmbedVideo? embedVideo) Parameters embedVideo EmbedVideo? The EmbedVideo to compare with the current EmbedVideo Returns bool Equals(object) Determines whether the specified object is equal to the current EmbedVideo. public override bool Equals(object obj) Parameters obj object The object to compare with the current EmbedVideo Returns bool Remarks If the object passes is an EmbedVideo, Equals(EmbedVideo?) will be called to compare the 2 instances GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. ToString() Gets the URL of the video. public override string ToString() Returns string A string that resolves to Url. Operators operator ==(EmbedVideo?, EmbedVideo?) public static bool operator ==(EmbedVideo? left, EmbedVideo? right) Parameters left EmbedVideo? right EmbedVideo? Returns bool operator !=(EmbedVideo?, EmbedVideo?) public static bool operator !=(EmbedVideo? left, EmbedVideo? right) Parameters left EmbedVideo? right EmbedVideo? Returns bool"
  },
  "api/Discord.Emoji.html": {
    "href": "api/Discord.Emoji.html",
    "title": "Class Emoji | Discord.Net Documentation",
    "keywords": "Class Emoji Namespace Discord Assembly Discord.Net.Core.dll A Unicode emoji. public class Emoji : IEmote Inheritance object Emoji Implements IEmote Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Examples The sample below sends a message and adds an Emoji and a custom Emote to the message. public async Task SendAndReactAsync(ISocketMessageChannel channel) { var message = await channel.SendMessageAsync(\"I am a message.\"); // Creates a Unicode-based emoji based on the Unicode string. // This is effectively the same as new Emoji(\"💕\"). var heartEmoji = new Emoji(\"\\U0001f495\"); // Reacts to the message with the Emoji. await message.AddReactionAsync(heartEmoji); // Parses a custom emote based on the provided Discord emote format. // Please note that this does not guarantee the existence of // the emote. var emote = Emote.Parse(\"<:thonkang:282745590985523200>\"); // Reacts to the message with the Emote. await message.AddReactionAsync(emote); } Result Remarks Note A valid Emoji format is Unicode-based. This means only something like 🙃 or \\U0001f643 would work, instead of :upside_down:. A Unicode-based emoji can be obtained by escaping with a \\ in front of the emote using the Discord chat client or by looking up on Emojipedia. This class represents a standard Unicode-based emoji. This type of emoji can be created by passing the Unicode into the constructor. Constructors Emoji(string) Initializes a new Emoji class with the provided Unicode. public Emoji(string unicode) Parameters unicode string The pure UTF-8 encoding of an emoji. See Also Emoji Properties Name Gets the display name or Unicode representation of this emote. public string Name { get; } Property Value string A string representing the display name or the Unicode representation (e.g. 🤔) of this emote. See Also Emoji Methods Equals(object) Determines whether the specified emoji is equal to the current one. public override bool Equals(object other) Parameters other object The object to compare with the current object. Returns bool See Also Emoji GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. See Also Emoji Parse(string) Parse an Emoji from its raw format. public static Emoji Parse(string emojiStr) Parameters emojiStr string The raw encoding of an emoji. For example: :heart: or ❤ Returns Emoji Exceptions FormatException String is not emoji or unicode! See Also Emoji ToString() Gets the Unicode representation of this emoji. public override string ToString() Returns string A string that resolves to Name. See Also Emoji TryParse(string, out Emoji) Tries to parse an Emoji from its raw format. public static bool TryParse(string text, out Emoji result) Parameters text string The raw encoding of an emoji. For example: :heart: or ❤ result Emoji An emoji. Returns bool See Also Emoji Operators implicit operator Emoji(string) public static implicit operator Emoji(string s) Parameters s string Returns Emoji See Also Emoji See Also Emoji"
  },
  "api/Discord.Emote.html": {
    "href": "api/Discord.Emote.html",
    "title": "Class Emote | Discord.Net Documentation",
    "keywords": "Class Emote Namespace Discord Assembly Discord.Net.Core.dll A custom image-based emote. public class Emote : IEmote, ISnowflakeEntity, IEntity<ulong> Inheritance object Emote Implements IEmote ISnowflakeEntity IEntity<ulong> Derived GuildEmote Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Examples The sample below sends a message and adds an Emoji and a custom Emote to the message. public async Task SendAndReactAsync(ISocketMessageChannel channel) { var message = await channel.SendMessageAsync(\"I am a message.\"); // Creates a Unicode-based emoji based on the Unicode string. // This is effectively the same as new Emoji(\"💕\"). var heartEmoji = new Emoji(\"\\U0001f495\"); // Reacts to the message with the Emoji. await message.AddReactionAsync(heartEmoji); // Parses a custom emote based on the provided Discord emote format. // Please note that this does not guarantee the existence of // the emote. var emote = Emote.Parse(\"<:thonkang:282745590985523200>\"); // Reacts to the message with the Emote. await message.AddReactionAsync(emote); } Result Remarks Note A valid Emote format is <:emoteName:emoteId>. This can be obtained by escaping with a \\ in front of the emote using the Discord chat client. This class represents a custom emoji. This type of emoji can be created via the Parse or TryParse method. Properties Animated Gets whether this emote is animated. public bool Animated { get; } Property Value bool A boolean that determines whether or not this emote is an animated one. See Also IEmote CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. See Also IEmote Id Gets the unique identifier for this object. public ulong Id { get; } Property Value ulong See Also IEmote Name Gets the display name or Unicode representation of this emote. public string Name { get; } Property Value string A string representing the display name or the Unicode representation (e.g. 🤔) of this emote. See Also IEmote Url Gets the image URL of this emote. public string Url { get; } Property Value string A string that points to the URL of this emote. See Also IEmote Methods Equals(object) Determines whether the specified emote is equal to the current emote. public override bool Equals(object other) Parameters other object The object to compare with the current object. Returns bool See Also IEmote GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. See Also IEmote Parse(string) Parses an Emote from its raw format. public static Emote Parse(string text) Parameters text string The raw encoding of an emote (e.g. <:dab:277855270321782784>). Returns Emote An emote. Exceptions ArgumentException Invalid emote format. See Also IEmote ToString() Returns the raw representation of the emote. public override string ToString() Returns string A string representing the raw presentation of the emote (e.g. <:thonkang:282745590985523200>). See Also IEmote TryParse(string, out Emote) Tries to parse an Emote from its raw format. public static bool TryParse(string text, out Emote result) Parameters text string The raw encoding of an emote; for example, <:dab:277855270321782784>. result Emote An emote. Returns bool See Also IEmote Operators implicit operator Emote(string) public static implicit operator Emote(string s) Parameters s string Returns Emote See Also IEmote See Also IEmote"
  },
  "api/Discord.EmoteProperties.html": {
    "href": "api/Discord.EmoteProperties.html",
    "title": "Class EmoteProperties | Discord.Net Documentation",
    "keywords": "Class EmoteProperties Namespace Discord Assembly Discord.Net.Core.dll Provides properties that are used to modify an Emote with the specified changes. public class EmoteProperties Inheritance object EmoteProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples The following example uses ModifyEmoteAsync to apply changes specified in the properties, await guild.ModifyEmoteAsync(x => { x.Name = \"blobo\"; }); Properties Name Gets or sets the name of the Emote. public Optional<string> Name { get; set; } Property Value Optional<string> See Also ModifyEmoteAsync(GuildEmote, Action<EmoteProperties>, RequestOptions) Roles Gets or sets the roles that can access this Emote. public Optional<IEnumerable<IRole>> Roles { get; set; } Property Value Optional<IEnumerable<IRole>> See Also ModifyEmoteAsync(GuildEmote, Action<EmoteProperties>, RequestOptions) See Also ModifyEmoteAsync(GuildEmote, Action<EmoteProperties>, RequestOptions)"
  },
  "api/Discord.EntitlementType.html": {
    "href": "api/Discord.EntitlementType.html",
    "title": "Enum EntitlementType | Discord.Net Documentation",
    "keywords": "Enum EntitlementType Namespace Discord Assembly Discord.Net.Core.dll public enum EntitlementType Fields ApplicationSubscription = 8 The entitlement was purchased as an app subscription."
  },
  "api/Discord.ExplicitContentFilterLevel.html": {
    "href": "api/Discord.ExplicitContentFilterLevel.html",
    "title": "Enum ExplicitContentFilterLevel | Discord.Net Documentation",
    "keywords": "Enum ExplicitContentFilterLevel Namespace Discord Assembly Discord.Net.Core.dll public enum ExplicitContentFilterLevel Fields AllMembers = 2 Scan messages sent by all guild members. Disabled = 0 No messages will be scanned. MembersWithoutRoles = 1 Scans messages from all guild members that do not have a role."
  },
  "api/Discord.FileAttachment.html": {
    "href": "api/Discord.FileAttachment.html",
    "title": "Struct FileAttachment | Discord.Net Documentation",
    "keywords": "Struct FileAttachment Namespace Discord Assembly Discord.Net.Core.dll Represents an outgoing file attachment used to send a file to discord. public struct FileAttachment : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FileAttachment(Stream, string, string, bool, bool) Creates a file attachment from a stream. public FileAttachment(Stream stream, string fileName, string description = null, bool isSpoiler = false, bool isThumbnail = false) Parameters stream Stream The stream to create the attachment from. fileName string The name of the attachment. description string The description of the attachment. isSpoiler bool Whether or not the attachment is a spoiler. isThumbnail bool Whether or not this attachment should be a thumbnail for a media channel post. FileAttachment(string, string, string, bool, bool) Create the file attachment from a file path. public FileAttachment(string path, string fileName = null, string description = null, bool isSpoiler = false, bool isThumbnail = false) Parameters path string The path to the file. fileName string The name of the attachment. description string The description of the attachment. isSpoiler bool Whether or not the attachment is a spoiler. isThumbnail bool Whether or not this attachment should be a thumbnail for a media channel post. Remarks This file path is NOT validated and is passed directly into a OpenRead(string). Exceptions ArgumentException path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by GetInvalidPathChars(). ArgumentNullException path is null. PathTooLongException The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. NotSupportedException path is in an invalid format. DirectoryNotFoundException The specified path is invalid, (for example, it is on an unmapped drive). UnauthorizedAccessException path specified a directory.-or- The caller does not have the required permission. FileNotFoundException The file specified in path was not found. IOException An I/O error occurred while opening the file. Properties Description Gets or sets the description of the file. public string Description { readonly get; set; } Property Value string FileName Gets or sets the filename. public string FileName { readonly get; set; } Property Value string IsSpoiler Gets or sets whether this file should be marked as a spoiler. public bool IsSpoiler { readonly get; set; } Property Value bool IsThumbnail Gets or sets if this file should be a thumbnail for a media channel post. public bool IsThumbnail { readonly get; set; } Property Value bool Stream Gets the stream containing the file content. public readonly Stream Stream { get; } Property Value Stream Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "api/Discord.Format.html": {
    "href": "api/Discord.Format.html",
    "title": "Class Format | Discord.Net Documentation",
    "keywords": "Class Format Namespace Discord Assembly Discord.Net.Core.dll A helper class for formatting characters. public static class Format Inheritance object Format Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BlockQuote(string) Formats a string as a block quote. public static string BlockQuote(string text) Parameters text string The text to format. Returns string Gets the formatted block quote text. Bold(string) Returns a markdown-formatted string with bold formatting. public static string Bold(string text) Parameters text string Returns string Code(string, string) Returns a markdown-formatted string with codeblock formatting. public static string Code(string text, string language = null) Parameters text string language string Returns string EscapeUrl(string) Escapes a URL so that a preview is not generated. public static string EscapeUrl(string url) Parameters url string Returns string Italics(string) Returns a markdown-formatted string with italics formatting. public static string Italics(string text) Parameters text string Returns string Quote(string) Formats a string as a quote. public static string Quote(string text) Parameters text string The text to format. Returns string Gets the formatted quote text. Sanitize(string) Sanitizes the string, safely escaping any Markdown sequences. public static string Sanitize(string text) Parameters text string Returns string Spoiler(string) Returns a string with spoiler formatting. public static string Spoiler(string text) Parameters text string Returns string Strikethrough(string) Returns a markdown-formatted string with strike-through formatting. public static string Strikethrough(string text) Parameters text string Returns string StripMarkDown(string) Remove discord supported markdown from text. public static string StripMarkDown(string text) Parameters text string The to remove markdown from. Returns string Gets the unformatted text. Underline(string) Returns a markdown-formatted string with underline formatting. public static string Underline(string text) Parameters text string Returns string Url(string, string) Returns a markdown-formatted URL. Only works in EmbedBuilder descriptions and fields. public static string Url(string text, string url) Parameters text string url string Returns string UsernameAndDiscriminator(IUser, bool) Formats a user's username and optional discriminator. public static string UsernameAndDiscriminator(IUser user, bool doBidirectional) Parameters user IUser The user whose username and discriminator to format doBidirectional bool To format the string in bidirectional unicode or not Returns string The username + optional discriminator."
  },
  "api/Discord.ForumChannelProperties.html": {
    "href": "api/Discord.ForumChannelProperties.html",
    "title": "Class ForumChannelProperties | Discord.Net Documentation",
    "keywords": "Class ForumChannelProperties Namespace Discord Assembly Discord.Net.Core.dll public class ForumChannelProperties : TextChannelProperties Inheritance object GuildChannelProperties TextChannelProperties ForumChannelProperties Inherited Members TextChannelProperties.Topic TextChannelProperties.IsNsfw TextChannelProperties.AutoArchiveDuration TextChannelProperties.DefaultSlowModeInterval GuildChannelProperties.Name GuildChannelProperties.Position GuildChannelProperties.CategoryId GuildChannelProperties.PermissionOverwrites GuildChannelProperties.Flags object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DefaultLayout Gets or sets the rule used to display posts in a forum channel. public Optional<ForumLayout> DefaultLayout { get; set; } Property Value Optional<ForumLayout> Remarks This property cannot be changed in media channels. DefaultReactionEmoji Gets or sets a new default reaction emoji in this forum channel. public Optional<IEmote> DefaultReactionEmoji { get; set; } Property Value Optional<IEmote> DefaultSortOrder Gets or sets the rule used to order posts in forum channels. public Optional<ForumSortOrder> DefaultSortOrder { get; set; } Property Value Optional<ForumSortOrder> SlowModeInterval Gets or sets the topic of the channel. public Optional<int> SlowModeInterval { get; } Property Value Optional<int> Remarks Not available in forum channels. Tags Gets or sets a collection of tags inside of this forum channel. public Optional<IEnumerable<IForumTag>> Tags { get; set; } Property Value Optional<IEnumerable<IForumTag>> ThreadCreationInterval Gets or sets rate limit on creating posts in this forum channel. public Optional<int> ThreadCreationInterval { get; set; } Property Value Optional<int> Remarks Setting this value to anything above zero will require each user to wait X seconds before creating another thread; setting this value to 0 will disable rate limits for this channel. note Users with ManageMessages or ManageChannels will be exempt from rate limits. Exceptions ArgumentOutOfRangeException Thrown if the value does not fall within [0, 21600]."
  },
  "api/Discord.ForumLayout.html": {
    "href": "api/Discord.ForumLayout.html",
    "title": "Enum ForumLayout | Discord.Net Documentation",
    "keywords": "Enum ForumLayout Namespace Discord Assembly Discord.Net.Core.dll Represents the layout type used to display posts in a forum channel. public enum ForumLayout Fields Default = 0 A preferred forum layout hasn't been set by a server admin Grid = 2 Gallery View: display forum posts in a media-focused gallery List = 1 List View: display forum posts in a text-focused list"
  },
  "api/Discord.ForumSortOrder.html": {
    "href": "api/Discord.ForumSortOrder.html",
    "title": "Enum ForumSortOrder | Discord.Net Documentation",
    "keywords": "Enum ForumSortOrder Namespace Discord Assembly Discord.Net.Core.dll Defines the rule used to order posts in forum channels. public enum ForumSortOrder Fields CreationDate = 1 Sort forum posts by creation time (from most recent to oldest). LatestActivity = 0 Sort forum posts by activity."
  },
  "api/Discord.ForumTag.html": {
    "href": "api/Discord.ForumTag.html",
    "title": "Struct ForumTag | Discord.Net Documentation",
    "keywords": "Struct ForumTag Namespace Discord Assembly Discord.Net.Core.dll A struct representing a forum channel tag. public readonly struct ForumTag : ISnowflakeEntity, IEntity<ulong>, IForumTag Implements ISnowflakeEntity IEntity<ulong> IForumTag Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ForumTagBuilderExtensions.ToForumTagBuilder(ForumTag) Properties CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. Emoji Gets the emoji of the tag or null if none is set. public IEmote? Emoji { get; } Property Value IEmote Remarks If the emoji is Emote only the Id will be populated. Use GetEmoteAsync(ulong, RequestOptions) to get the emoji. Id Gets the unique identifier for this object. public ulong Id { get; } Property Value ulong IsModerated Gets whether this tag can only be added to or removed from threads by a member with the ManageThreads permission public bool IsModerated { get; } Property Value bool Name Gets the name of the tag. public string Name { get; } Property Value string Methods Equals(ForumTag) Gets whether supplied tag is equals to the current one. public bool Equals(ForumTag tag) Parameters tag ForumTag Returns bool Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Operators operator ==(ForumTag?, ForumTag?) public static bool operator ==(ForumTag? left, ForumTag? right) Parameters left ForumTag? right ForumTag? Returns bool operator !=(ForumTag?, ForumTag?) public static bool operator !=(ForumTag? left, ForumTag? right) Parameters left ForumTag? right ForumTag? Returns bool"
  },
  "api/Discord.ForumTagBuilder.html": {
    "href": "api/Discord.ForumTagBuilder.html",
    "title": "Class ForumTagBuilder | Discord.Net Documentation",
    "keywords": "Class ForumTagBuilder Namespace Discord Assembly Discord.Net.Core.dll public class ForumTagBuilder Inheritance object ForumTagBuilder Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ForumTagBuilder() Initializes a new ForumTagBuilder class. public ForumTagBuilder() ForumTagBuilder(string, ulong?, bool) Initializes a new ForumTagBuilder class with values public ForumTagBuilder(string name, ulong? id = null, bool isModerated = false) Parameters name string Name of the tag. id ulong? If set existing tag will be updated or a new one will be created otherwise. isModerated bool Sets whether this tag can only be added to or removed from threads by a member with the ManageThreads permission. ForumTagBuilder(string, ulong?, bool, IEmote?) Initializes a new ForumTagBuilder class with values public ForumTagBuilder(string name, ulong? id = null, bool isModerated = false, IEmote? emoji = null) Parameters name string Name of the tag. id ulong? If set existing tag will be updated or a new one will be created otherwise. isModerated bool Sets whether this tag can only be added to or removed from threads by a member with the ManageThreads permission. emoji IEmote Display emoji of the tag. ForumTagBuilder(string, ulong?, bool, ulong?) Initializes a new ForumTagBuilder class with values public ForumTagBuilder(string name, ulong? id = null, bool isModerated = false, ulong? emoteId = null) Parameters name string Name of the tag. id ulong? If set existing tag will be updated or a new one will be created otherwise. isModerated bool Sets whether this tag can only be added to or removed from threads by a member with the ManageThreads permission emoteId ulong? The id of custom Display emoji of the tag. Fields MaxNameLength Returns the maximum length of name allowed by Discord. public const int MaxNameLength = 20 Field Value int Properties Emoji Gets or sets the emoji of the tag. public IEmote? Emoji { get; set; } Property Value IEmote Id Gets or sets the snowflake Id of the tag. public ulong? Id { get; set; } Property Value ulong? Remarks If set this will update existing tag or will create a new one otherwise. IsModerated Gets or sets whether this tag can only be added to or removed from threads by a member with the ManageThreads permission public bool IsModerated { get; set; } Property Value bool Name Gets or sets the name of the tag. public string? Name { get; set; } Property Value string Exceptions ArgumentException Name length must be less than or equal to MaxNameLength. Methods Build() Builds the Tag. public ForumTagProperties Build() Returns ForumTagProperties An instance of ForumTagProperties Exceptions ArgumentNullException \"Name must be set to build the tag\" Equals(ForumTagBuilder?) Gets whether supplied tag builder is equals to the current one. public bool Equals(ForumTagBuilder? builder) Parameters builder ForumTagBuilder Returns bool Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. WithEmoji(IEmote?) Sets the emoji of the tag. public ForumTagBuilder WithEmoji(IEmote? emoji) Parameters emoji IEmote Returns ForumTagBuilder WithId(ulong?) Sets the id of the tag. public ForumTagBuilder WithId(ulong? id) Parameters id ulong? If set existing tag will be updated or a new one will be created otherwise. Returns ForumTagBuilder Exceptions ArgumentException Name length must be less than or equal to MaxNameLength. WithModerated(bool) Sets whether this tag can only be added to or removed from threads by a member with the ManageThreads permission public ForumTagBuilder WithModerated(bool moderated) Parameters moderated bool Returns ForumTagBuilder WithName(string) Sets the name of the tag. public ForumTagBuilder WithName(string name) Parameters name string Returns ForumTagBuilder Exceptions ArgumentException Name length must be less than or equal to MaxNameLength. Operators operator ==(ForumTagBuilder?, ForumTagBuilder?) public static bool operator ==(ForumTagBuilder? left, ForumTagBuilder? right) Parameters left ForumTagBuilder right ForumTagBuilder Returns bool operator !=(ForumTagBuilder?, ForumTagBuilder?) public static bool operator !=(ForumTagBuilder? left, ForumTagBuilder? right) Parameters left ForumTagBuilder right ForumTagBuilder Returns bool"
  },
  "api/Discord.ForumTagBuilderExtensions.html": {
    "href": "api/Discord.ForumTagBuilderExtensions.html",
    "title": "Class ForumTagBuilderExtensions | Discord.Net Documentation",
    "keywords": "Class ForumTagBuilderExtensions Namespace Discord Assembly Discord.Net.Core.dll public static class ForumTagBuilderExtensions Inheritance object ForumTagBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToForumTagBuilder(ForumTag) public static ForumTagBuilder ToForumTagBuilder(this ForumTag tag) Parameters tag ForumTag Returns ForumTagBuilder ToForumTagBuilder(ForumTagProperties) public static ForumTagBuilder ToForumTagBuilder(this ForumTagProperties tag) Parameters tag ForumTagProperties Returns ForumTagBuilder"
  },
  "api/Discord.ForumTagProperties.html": {
    "href": "api/Discord.ForumTagProperties.html",
    "title": "Class ForumTagProperties | Discord.Net Documentation",
    "keywords": "Class ForumTagProperties Namespace Discord Assembly Discord.Net.Core.dll public class ForumTagProperties : IForumTag Inheritance object ForumTagProperties Implements IForumTag Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ForumTagBuilderExtensions.ToForumTagBuilder(ForumTagProperties) Properties Emoji Gets the emoji of the tag or null if none is set. public IEmote? Emoji { get; } Property Value IEmote Remarks If the emoji is Emote only the Id will be populated. Use GetEmoteAsync(ulong, RequestOptions) to get the emoji. Id Gets the Id of the tag. public ulong? Id { get; } Property Value ulong? IsModerated Gets whether this tag can only be added to or removed from threads by a member with the ManageThreads permission public bool IsModerated { get; } Property Value bool Name Gets the name of the tag. public string Name { get; } Property Value string Methods Equals(ForumTagProperties?) Gets whether supplied tag is equals to the current one. public bool Equals(ForumTagProperties? tag) Parameters tag ForumTagProperties Returns bool Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(ForumTagProperties?, ForumTagProperties?) public static bool operator ==(ForumTagProperties? left, ForumTagProperties? right) Parameters left ForumTagProperties right ForumTagProperties Returns bool operator !=(ForumTagProperties?, ForumTagProperties?) public static bool operator !=(ForumTagProperties? left, ForumTagProperties? right) Parameters left ForumTagProperties right ForumTagProperties Returns bool"
  },
  "api/Discord.Game.html": {
    "href": "api/Discord.Game.html",
    "title": "Class Game | Discord.Net Documentation",
    "keywords": "Class Game Namespace Discord Assembly Discord.Net.Core.dll A user's game status. public class Game : IActivity Inheritance object Game Implements IActivity Derived CustomStatusGame RichGame SpotifyGame StreamingGame Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Game(string, ActivityType, ActivityProperties, string) Creates a Game with the provided name and ActivityType. public Game(string name, ActivityType type = ActivityType.Playing, ActivityProperties flags = ActivityProperties.None, string details = null) Parameters name string The name of the game. type ActivityType The type of activity. flags ActivityProperties details string Properties Details Gets the details on what the player is currently doing. public string Details { get; } Property Value string A string describing what the player is doing. Flags Gets the flags that are relevant to this activity. public ActivityProperties Flags { get; } Property Value ActivityProperties The value of flags for this activity. Remarks This value is determined by bitwise OR-ing ActivityProperties values together. Name Gets the name of the activity. public string Name { get; } Property Value string A string containing the name of the activity that the user is doing. Type Gets the type of the activity. public ActivityType Type { get; } Property Value ActivityType The type of activity. Methods ToString() Returns the name of the Game. public override string ToString() Returns string"
  },
  "api/Discord.GameAsset.html": {
    "href": "api/Discord.GameAsset.html",
    "title": "Class GameAsset | Discord.Net Documentation",
    "keywords": "Class GameAsset Namespace Discord Assembly Discord.Net.Core.dll An asset for a RichGame object containing the text and image. public class GameAsset Inheritance object GameAsset Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ImageId Gets the image ID of the asset. public string ImageId { get; } Property Value string A string containing the unique image identifier of the asset. Text Gets the description of the asset. public string Text { get; } Property Value string A string containing the description of the asset. Methods GetImageUrl(ImageFormat, ushort) Returns the image URL of the asset. public string GetImageUrl(ImageFormat format = ImageFormat.Auto, ushort size = 128) Parameters format ImageFormat The format to return. size ushort The size of the image to return in. This can be any power of two between 16 and 2048. Returns string A string pointing to the image URL of the asset; null when the application ID does not exist."
  },
  "api/Discord.GameParty.html": {
    "href": "api/Discord.GameParty.html",
    "title": "Class GameParty | Discord.Net Documentation",
    "keywords": "Class GameParty Namespace Discord Assembly Discord.Net.Core.dll Party information for a RichGame object. public class GameParty Inheritance object GameParty Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Capacity Gets the party's current and maximum size. public long Capacity { get; } Property Value long A long representing the capacity of the party. Id Gets the ID of the party. public string Id { get; } Property Value string A string containing the unique identifier of the party. Members public long Members { get; } Property Value long"
  },
  "api/Discord.GameSecrets.html": {
    "href": "api/Discord.GameSecrets.html",
    "title": "Class GameSecrets | Discord.Net Documentation",
    "keywords": "Class GameSecrets Namespace Discord Assembly Discord.Net.Core.dll Party secret for a RichGame object. public class GameSecrets Inheritance object GameSecrets Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Join Gets the secret for joining a party. public string Join { get; } Property Value string Match Gets the secret for a specific instanced match. public string Match { get; } Property Value string Spectate Gets the secret for spectating a game. public string Spectate { get; } Property Value string"
  },
  "api/Discord.GameTimestamps.html": {
    "href": "api/Discord.GameTimestamps.html",
    "title": "Class GameTimestamps | Discord.Net Documentation",
    "keywords": "Class GameTimestamps Namespace Discord Assembly Discord.Net.Core.dll Timestamps for a RichGame object. public class GameTimestamps Inheritance object GameTimestamps Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties End Gets when the activity ends. public DateTimeOffset? End { get; } Property Value DateTimeOffset? Start Gets when the activity started. public DateTimeOffset? Start { get; } Property Value DateTimeOffset?"
  },
  "api/Discord.GatewayIntents.html": {
    "href": "api/Discord.GatewayIntents.html",
    "title": "Enum GatewayIntents | Discord.Net Documentation",
    "keywords": "Enum GatewayIntents Namespace Discord Assembly Discord.Net.Core.dll [Flags] public enum GatewayIntents Fields All = GuildMembers | GuildPresences | MessageContent | AllUnprivileged This intent includes all of them, including privileged ones. AllUnprivileged = Guilds | GuildBans | GuildEmojis | GuildIntegrations | GuildWebhooks | GuildInvites | GuildVoiceStates | GuildMessages | GuildMessageReactions | GuildMessageTyping | DirectMessages | DirectMessageReactions | DirectMessageTyping | GuildScheduledEvents | AutoModerationConfiguration | AutoModerationActionExecution This intent includes all but GuildMembers, GuildPresences and MessageContent which are privileged and must be enabled in the Developer Portal. AutoModerationActionExecution = 2097152 This intent includes AUTO_MODERATION_ACTION_EXECUTION AutoModerationConfiguration = 1048576 This intent includes AUTO_MODERATION_RULE_CREATE, AUTO_MODERATION_RULE_UPDATE, AUTO_MODERATION_RULE_DELETE DirectMessageReactions = 8192 This intent includes MESSAGE_REACTION_ADD, MESSAGE_REACTION_REMOVE, MESSAGE_REACTION_REMOVE_ALL, MESSAGE_REACTION_REMOVE_EMOJI DirectMessageTyping = 16384 This intent includes TYPING_START DirectMessages = 4096 This intent includes CHANNEL_CREATE, MESSAGE_CREATE, MESSAGE_UPDATE, MESSAGE_DELETE, CHANNEL_PINS_UPDATE GuildBans = 4 This intent includes GUILD_BAN_ADD, GUILD_BAN_REMOVE GuildEmojis = 8 This intent includes GUILD_EMOJIS_UPDATE GuildIntegrations = 16 This intent includes GUILD_INTEGRATIONS_UPDATE GuildInvites = 64 This intent includes INVITE_CREATE, INVITE_DELETE GuildMembers = 2 This intent includes GUILD_MEMBER_ADD, GUILD_MEMBER_UPDATE, GUILD_MEMBER_REMOVE GuildMessageReactions = 1024 This intent includes MESSAGE_REACTION_ADD, MESSAGE_REACTION_REMOVE, MESSAGE_REACTION_REMOVE_ALL, MESSAGE_REACTION_REMOVE_EMOJI GuildMessageTyping = 2048 This intent includes TYPING_START GuildMessages = 512 This intent includes MESSAGE_CREATE, MESSAGE_UPDATE, MESSAGE_DELETE, MESSAGE_DELETE_BULK GuildPresences = 256 This intent includes PRESENCE_UPDATE GuildScheduledEvents = 65536 This intent includes GUILD_SCHEDULED_EVENT_CREATE, GUILD_SCHEDULED_EVENT_UPDATE, GUILD_SCHEDULED_EVENT_DELETE, GUILD_SCHEDULED_EVENT_USER_ADD, GUILD_SCHEDULED_EVENT_USER_REMOVE GuildVoiceStates = 128 This intent includes VOICE_STATE_UPDATE GuildWebhooks = 32 This intent includes WEBHOOKS_UPDATE Guilds = 1 This intent includes GUILD_CREATE, GUILD_UPDATE, GUILD_DELETE, GUILD_ROLE_CREATE, GUILD_ROLE_UPDATE, GUILD_ROLE_DELETE, CHANNEL_CREATE, CHANNEL_UPDATE, CHANNEL_DELETE, CHANNEL_PINS_UPDATE MessageContent = 32768 This intent defines if the content within messages received by MESSAGE_CREATE is available or not. This is a privileged intent and needs to be enabled in the developer portal. None = 0 This intent includes no events"
  },
  "api/Discord.GuildApplicationCommandPermission.html": {
    "href": "api/Discord.GuildApplicationCommandPermission.html",
    "title": "Class GuildApplicationCommandPermission | Discord.Net Documentation",
    "keywords": "Class GuildApplicationCommandPermission Namespace Discord Assembly Discord.Net.Core.dll Returned when fetching the permissions for a command in a guild. public class GuildApplicationCommandPermission Inheritance object GuildApplicationCommandPermission Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ApplicationId The id of the application the command belongs to. public ulong ApplicationId { get; } Property Value ulong CommandId The id of the command. public ulong CommandId { get; } Property Value ulong GuildId The id of the guild. public ulong GuildId { get; } Property Value ulong Permissions The permissions for the command in the guild. public IReadOnlyCollection<ApplicationCommandPermission> Permissions { get; } Property Value IReadOnlyCollection<ApplicationCommandPermission>"
  },
  "api/Discord.GuildChannelProperties.html": {
    "href": "api/Discord.GuildChannelProperties.html",
    "title": "Class GuildChannelProperties | Discord.Net Documentation",
    "keywords": "Class GuildChannelProperties Namespace Discord Assembly Discord.Net.Core.dll Properties that are used to modify an IGuildChannel with the specified changes. public class GuildChannelProperties Inheritance object GuildChannelProperties Derived TextChannelProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples The following example uses ModifyAsync to apply changes specified in the properties, var channel = _client.GetChannel(id) as IGuildChannel; if (channel == null) return; await channel.ModifyAsync(x => { x.Name = \"new-name\"; x.Position = channel.Position - 1; }); Properties CategoryId Gets or sets the category ID for this channel. public Optional<ulong?> CategoryId { get; set; } Property Value Optional<ulong?> Remarks Setting this value to a category's snowflake identifier will change or set this channel's parent to the specified channel; setting this value to null will detach this channel from its parent if one is set. See Also ModifyAsync(Action<GuildChannelProperties>, RequestOptions) Flags Gets or sets the flags of the channel. public Optional<ChannelFlags> Flags { get; set; } Property Value Optional<ChannelFlags> See Also ModifyAsync(Action<GuildChannelProperties>, RequestOptions) Name Gets or sets the channel to this name. public Optional<string> Name { get; set; } Property Value Optional<string> Remarks This property defines the new name for this channel. warning When modifying an ITextChannel, the Name must be alphanumeric with dashes. It must match the RegEx [a-z0-9-_]{2,100}. See Also ModifyAsync(Action<GuildChannelProperties>, RequestOptions) PermissionOverwrites Gets or sets the permission overwrites for this channel. public Optional<IEnumerable<Overwrite>> PermissionOverwrites { get; set; } Property Value Optional<IEnumerable<Overwrite>> See Also ModifyAsync(Action<GuildChannelProperties>, RequestOptions) Position Moves the channel to the following position. This property is zero-based. public Optional<int> Position { get; set; } Property Value Optional<int> See Also ModifyAsync(Action<GuildChannelProperties>, RequestOptions) See Also ModifyAsync(Action<GuildChannelProperties>, RequestOptions)"
  },
  "api/Discord.GuildEmote.html": {
    "href": "api/Discord.GuildEmote.html",
    "title": "Class GuildEmote | Discord.Net Documentation",
    "keywords": "Class GuildEmote Namespace Discord Assembly Discord.Net.Core.dll An image-based emote that is attached to a guild. public class GuildEmote : Emote, IEmote, ISnowflakeEntity, IEntity<ulong> Inheritance object Emote GuildEmote Implements IEmote ISnowflakeEntity IEntity<ulong> Inherited Members Emote.Name Emote.Id Emote.Animated Emote.CreatedAt Emote.Url Emote.Equals(object) Emote.GetHashCode() Emote.Parse(string) Emote.TryParse(string, out Emote) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Examples The sample below sends a message and adds an Emoji and a custom Emote to the message. public async Task SendAndReactAsync(ISocketMessageChannel channel) { var message = await channel.SendMessageAsync(\"I am a message.\"); // Creates a Unicode-based emoji based on the Unicode string. // This is effectively the same as new Emoji(\"💕\"). var heartEmoji = new Emoji(\"\\U0001f495\"); // Reacts to the message with the Emoji. await message.AddReactionAsync(heartEmoji); // Parses a custom emote based on the provided Discord emote format. // Please note that this does not guarantee the existence of // the emote. var emote = Emote.Parse(\"<:thonkang:282745590985523200>\"); // Reacts to the message with the Emote. await message.AddReactionAsync(emote); } Result Properties CreatorId Gets the user ID associated with the creation of this emoji. public ulong? CreatorId { get; } Property Value ulong? An ulong snowflake identifier representing the user who created this emoji; null if unknown. IsManaged Gets whether this emoji is managed by an integration. public bool IsManaged { get; } Property Value bool A boolean that determines whether or not this emote is managed by a Twitch integration. RequireColons Gets whether this emoji must be wrapped in colons. public bool RequireColons { get; } Property Value bool A boolean that determines whether or not this emote requires the use of colons in chat to be used. RoleIds Gets the roles that are allowed to use this emoji. public IReadOnlyList<ulong> RoleIds { get; } Property Value IReadOnlyList<ulong> A read-only list containing snowflake identifiers for roles that are allowed to use this emoji. Methods ToString() Gets the raw representation of the emote. public override string ToString() Returns string A string representing the raw presentation of the emote (e.g. <:thonkang:282745590985523200>)."
  },
  "api/Discord.GuildExtensions.html": {
    "href": "api/Discord.GuildExtensions.html",
    "title": "Class GuildExtensions | Discord.Net Documentation",
    "keywords": "Class GuildExtensions Namespace Discord Assembly Discord.Net.Core.dll An extension class for IGuild. public static class GuildExtensions Inheritance object GuildExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetGuildBoostMessagesEnabled(IGuild) Gets if guild boost system messages are enabled. public static bool GetGuildBoostMessagesEnabled(this IGuild guild) Parameters guild IGuild The guild to check. Returns bool A bool indicating if the guild boost messages are enabled in the system channel. GetGuildSetupTipMessagesEnabled(IGuild) Gets if guild setup system messages are enabled. public static bool GetGuildSetupTipMessagesEnabled(this IGuild guild) Parameters guild IGuild The guild to check. Returns bool A bool indicating if the guild setup messages are enabled in the system channel. GetGuildWelcomeMessageReplyEnabled(IGuild) Gets if guild welcome messages have a reply with sticker button. public static bool GetGuildWelcomeMessageReplyEnabled(this IGuild guild) Parameters guild IGuild The guild to check. Returns bool A bool indicating if the guild welcome messages have a reply with sticker button. GetWelcomeMessagesEnabled(IGuild) Gets if welcome system messages are enabled. public static bool GetWelcomeMessagesEnabled(this IGuild guild) Parameters guild IGuild The guild to check. Returns bool A bool indicating if the welcome messages are enabled in the system channel."
  },
  "api/Discord.GuildFeature.html": {
    "href": "api/Discord.GuildFeature.html",
    "title": "Enum GuildFeature | Discord.Net Documentation",
    "keywords": "Enum GuildFeature Namespace Discord Assembly Discord.Net.Core.dll [Flags] public enum GuildFeature : long Fields AnimatedBanner = 1 The guild has access to animated banners. AnimatedIcon = 2 The guild has access to set an animated guild icon. AutoModeration = 17592186044416 The guild has auto moderation enabled. Banner = 4 The guild has access to set a guild banner image. ChannelBanner = 8 The guild has access to channel banners. ClydeEnabled = 70368744177664 This guild has Clyde AI enabled. Commerce = 16 The guild has access to use commerce features (i.e. create store channels). Community = 32 The guild can enable welcome screen, Membership Screening, stage channels and discovery, and receives community updates. DeveloperSupportServer = 4398046511104 The guild has been set as a support server on the App Directory. Discoverable = 64 The guild is able to be discovered in the directory. DiscoverableDisabled = 128 The guild has discoverable disabled. EnabledDiscoverableBefore = 256 The guild has enabled discoverable before. Featureable = 512 The guild is able to be featured in the directory. ForceRelay = 1024 The guild has a force relay. GuildWebPageVanityUrl = 140737488355328 This guild has a guild web page vanity url. HasDirectoryEntry = 2048 The guild has a directory entry. Hub = 4096 The guild is a hub. InternalEmployeeOnly = 8192 You shouldn't be here... InviteSplash = 16384 The guild has access to set an invite splash background. InvitesDisabled = 8796093022208 The guild has invites disabled. LinkedToHub = 32768 The guild is linked to a hub. MemberProfiles = 65536 The guild has member profiles. MemberVerificationGateEnabled = 131072 The guild has enabled Membership Screening. MonetizationEnabled = 262144 The guild has enabled monetization. MoreEmoji = 524288 The guild has more emojis. MoreStickers = 1048576 The guild has increased custom sticker slots. NewThreadPermissions = 4194304 The guild has new thread permissions. News = 2097152 The guild has access to create news channels. None = 0 The guild has no features. Partnered = 8388608 The guild is partnered. PremiumTier3Override = 16777216 The guild has a premium tier three override; guilds made by Discord usually have this. PreviewEnabled = 33554432 The guild can be previewed before joining via Membership Screening or the directory. PrivateThreads = 67108864 The guild has access to create private threads. RaidAlertsDisabled = 35184372088832 This guild has alerts for join raids disabled. RelayEnabled = 134217728 The guild has relay enabled. RoleIcons = 268435456 The guild is able to set role icons. RoleSubscriptionsAvailableForPurchase = 536870912 The guild has role subscriptions available for purchase. RoleSubscriptionsEnabled = 1073741824 The guild has role subscriptions enabled. SevenDayThreadArchive = 2147483648 The guild has access to the seven day archive time for threads. TextInVoiceEnabled = 4294967296 The guild has text in voice enabled. ThreadsDefaultAutoArchiveDuration = 34359738368 The guild has the default thread auto archive. ThreadsEnabled = 8589934592 The guild has threads enabled. ThreadsEnabledTesting = 17179869184 The guild has testing threads enabled. ThreeDayThreadArchive = 68719476736 The guild has access to the three day archive time for threads. TicketedEventsEnabled = 137438953472 The guild has enabled ticketed events. VIPRegions = 1099511627776 The guild has access to set 384kbps bitrate in voice (previously VIP voice servers). VanityUrl = 274877906944 The guild has access to set a vanity URL. Verified = 549755813888 The guild is verified. WelcomeScreenEnabled = 2199023255552 The guild has enabled the welcome screen."
  },
  "api/Discord.GuildFeatures.html": {
    "href": "api/Discord.GuildFeatures.html",
    "title": "Class GuildFeatures | Discord.Net Documentation",
    "keywords": "Class GuildFeatures Namespace Discord Assembly Discord.Net.Core.dll public class GuildFeatures Inheritance object GuildFeatures Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Experimental Gets a collection of experimental features for this guild. Features that are not contained in GuildFeature are put in here. public IReadOnlyCollection<string> Experimental { get; } Property Value IReadOnlyCollection<string> HasPrivateThreads Gets whether or not this server has private threads enabled. public bool HasPrivateThreads { get; } Property Value bool HasRoleIcons Gets whether or not this server has role icons enabled. public bool HasRoleIcons { get; } Property Value bool HasRoleSubscriptions Gets whether or not this server has role subscriptions enabled. public bool HasRoleSubscriptions { get; } Property Value bool HasTextInVoice Gets whether or not the guild has text-in-voice enabled. public bool HasTextInVoice { get; } Property Value bool HasThreads Gets whether or not the guild has threads enabled. public bool HasThreads { get; } Property Value bool HasVanityUrl Gets whether or not this server has vanity urls enabled. public bool HasVanityUrl { get; } Property Value bool IsHub Gets whether or not this server is a hub. public bool IsHub { get; } Property Value bool IsLinkedToHub Gets whether or this server is linked to a hub server. public bool IsLinkedToHub { get; } Property Value bool IsPartnered Gets whether or not this server is partnered. public bool IsPartnered { get; } Property Value bool IsStaffServer Gets whether or not the server is a internal staff server. public bool IsStaffServer { get; } Property Value bool Remarks You shouldn't touch anything here unless you know what you're doing :) IsVerified Gets whether or not this server is verified. public bool IsVerified { get; } Property Value bool Value Gets the flags of recognized features for this guild. public GuildFeature Value { get; } Property Value GuildFeature Methods HasFeature(GuildFeature) Returns whether or not this guild has a feature. public bool HasFeature(GuildFeature feature) Parameters feature GuildFeature The feature(s) to check for. Returns bool true if this guild has the provided feature(s), otherwise false. HasFeature(string) Returns whether or not this guild has a feature. public bool HasFeature(string feature) Parameters feature string The feature to check for. Returns bool true if this guild has the provided feature, otherwise false."
  },
  "api/Discord.GuildIncidentsData.html": {
    "href": "api/Discord.GuildIncidentsData.html",
    "title": "Class GuildIncidentsData | Discord.Net Documentation",
    "keywords": "Class GuildIncidentsData Namespace Discord Assembly Discord.Net.Core.dll public class GuildIncidentsData Inheritance object GuildIncidentsData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DmsDisabledUntil Gets the time when DMs get enabled again. null if DMs are not disabled. public DateTimeOffset? DmsDisabledUntil { get; set; } Property Value DateTimeOffset? InvitesDisabledUntil Gets the time when invites get enabled again. null if invites are not disabled. public DateTimeOffset? InvitesDisabledUntil { get; set; } Property Value DateTimeOffset?"
  },
  "api/Discord.GuildIncidentsDataProperties.html": {
    "href": "api/Discord.GuildIncidentsDataProperties.html",
    "title": "Class GuildIncidentsDataProperties | Discord.Net Documentation",
    "keywords": "Class GuildIncidentsDataProperties Namespace Discord Assembly Discord.Net.Core.dll public class GuildIncidentsDataProperties Inheritance object GuildIncidentsDataProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DmsDisabledUntil Gets or set when dms get enabled again, up to 24 hours in the future. public Optional<DateTimeOffset?> DmsDisabledUntil { get; set; } Property Value Optional<DateTimeOffset?> Remarks Set to null to enable dms. InvitesDisabledUntil Gets or set when invites get enabled again, up to 24 hours in the future. public Optional<DateTimeOffset?> InvitesDisabledUntil { get; set; } Property Value Optional<DateTimeOffset?> Remarks Set to null to enable invites."
  },
  "api/Discord.GuildInventorySettings.html": {
    "href": "api/Discord.GuildInventorySettings.html",
    "title": "Struct GuildInventorySettings | Discord.Net Documentation",
    "keywords": "Struct GuildInventorySettings Namespace Discord Assembly Discord.Net.Core.dll public struct GuildInventorySettings Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties IsEmojiPackCollectible Gets whether everyone can collect the pack to use emojis across servers. public readonly bool IsEmojiPackCollectible { get; } Property Value bool"
  },
  "api/Discord.GuildOnboardingExtensions.html": {
    "href": "api/Discord.GuildOnboardingExtensions.html",
    "title": "Class GuildOnboardingExtensions | Discord.Net Documentation",
    "keywords": "Class GuildOnboardingExtensions Namespace Discord Assembly Discord.Net.Core.dll public static class GuildOnboardingExtensions Inheritance object GuildOnboardingExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToProperties(IGuildOnboarding) public static GuildOnboardingProperties ToProperties(this IGuildOnboarding onboarding) Parameters onboarding IGuildOnboarding Returns GuildOnboardingProperties ToProperties(IGuildOnboardingPrompt) public static GuildOnboardingPromptProperties ToProperties(this IGuildOnboardingPrompt prompt) Parameters prompt IGuildOnboardingPrompt Returns GuildOnboardingPromptProperties ToProperties(IGuildOnboardingPromptOption) public static GuildOnboardingPromptOptionProperties ToProperties(this IGuildOnboardingPromptOption option) Parameters option IGuildOnboardingPromptOption Returns GuildOnboardingPromptOptionProperties"
  },
  "api/Discord.GuildOnboardingMode.html": {
    "href": "api/Discord.GuildOnboardingMode.html",
    "title": "Enum GuildOnboardingMode | Discord.Net Documentation",
    "keywords": "Enum GuildOnboardingMode Namespace Discord Assembly Discord.Net.Core.dll Defines the criteria used to satisfy Onboarding constraints that are required for enabling. public enum GuildOnboardingMode Fields Advanced = 1 Counts Default Channels and Questions towards constraints. Default = 0 Counts only Default Channels towards constraints."
  },
  "api/Discord.GuildOnboardingPromptOptionProperties.html": {
    "href": "api/Discord.GuildOnboardingPromptOptionProperties.html",
    "title": "Class GuildOnboardingPromptOptionProperties | Discord.Net Documentation",
    "keywords": "Class GuildOnboardingPromptOptionProperties Namespace Discord Assembly Discord.Net.Core.dll Represents properties used to create or modify guild onboarding prompt option. public class GuildOnboardingPromptOptionProperties Inheritance object GuildOnboardingPromptOptionProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelIds Gets or set IDs for channels a member is added to when the option is selected. public ulong[] ChannelIds { get; set; } Property Value ulong[] Description Gets or sets the description of the option. public string Description { get; set; } Property Value string Emoji Gets or sets the emoji of the option. public Optional<IEmote> Emoji { get; set; } Property Value Optional<IEmote> Id Gets or sets the Id of the prompt option. If the value is null a new prompt will be created. The existing one will be updated otherwise. public ulong? Id { get; set; } Property Value ulong? RoleIds Gets or sets IDs for roles assigned to a member when the option is selected. public ulong[] RoleIds { get; set; } Property Value ulong[] Title Gets or sets the title of the option. public string Title { get; set; } Property Value string"
  },
  "api/Discord.GuildOnboardingPromptProperties.html": {
    "href": "api/Discord.GuildOnboardingPromptProperties.html",
    "title": "Class GuildOnboardingPromptProperties | Discord.Net Documentation",
    "keywords": "Class GuildOnboardingPromptProperties Namespace Discord Assembly Discord.Net.Core.dll Represents properties used to create or modify guild onboarding prompt. public class GuildOnboardingPromptProperties Inheritance object GuildOnboardingPromptProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id Gets or sets the Id of the prompt. If the value is null a new prompt will be created. The existing one will be updated otherwise. public ulong? Id { get; set; } Property Value ulong? IsInOnboarding Gets or sets whether the prompt is present in the onboarding flow. public bool IsInOnboarding { get; set; } Property Value bool IsRequired Gets or sets whether the prompt is required before a user completes the onboarding flow. public bool IsRequired { get; set; } Property Value bool IsSingleSelect Gets or sets whether users are limited to selecting one option for the prompt. public bool IsSingleSelect { get; set; } Property Value bool Options Gets or sets options available within the prompt. public GuildOnboardingPromptOptionProperties[] Options { get; set; } Property Value GuildOnboardingPromptOptionProperties[] Title Gets or sets the title of the prompt. public string Title { get; set; } Property Value string Type Gets or set the type of the prompt. public GuildOnboardingPromptType Type { get; set; } Property Value GuildOnboardingPromptType"
  },
  "api/Discord.GuildOnboardingPromptType.html": {
    "href": "api/Discord.GuildOnboardingPromptType.html",
    "title": "Enum GuildOnboardingPromptType | Discord.Net Documentation",
    "keywords": "Enum GuildOnboardingPromptType Namespace Discord Assembly Discord.Net.Core.dll Represents the guild onboarding option type. public enum GuildOnboardingPromptType Fields Dropdown = 1 The prompt uses a dropdown menu. MultipleChoice = 0 The prompt accepts multiple choices."
  },
  "api/Discord.GuildOnboardingProperties.html": {
    "href": "api/Discord.GuildOnboardingProperties.html",
    "title": "Class GuildOnboardingProperties | Discord.Net Documentation",
    "keywords": "Class GuildOnboardingProperties Namespace Discord Assembly Discord.Net.Core.dll Represents properties used to create or modify guild onboarding. public class GuildOnboardingProperties Inheritance object GuildOnboardingProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelIds Gets or sets channel IDs that members get opted into automatically. public Optional<ulong[]> ChannelIds { get; set; } Property Value Optional<ulong[]> IsEnabled Gets or sets whether onboarding is enabled in the guild. public Optional<bool> IsEnabled { get; set; } Property Value Optional<bool> Mode Gets or sets current mode of onboarding. public Optional<GuildOnboardingMode> Mode { get; set; } Property Value Optional<GuildOnboardingMode> Prompts Gets or sets prompts shown during onboarding and in customize community. public Optional<GuildOnboardingPromptProperties[]> Prompts { get; set; } Property Value Optional<GuildOnboardingPromptProperties[]>"
  },
  "api/Discord.GuildPermission.html": {
    "href": "api/Discord.GuildPermission.html",
    "title": "Enum GuildPermission | Discord.Net Documentation",
    "keywords": "Enum GuildPermission Namespace Discord Assembly Discord.Net.Core.dll Defines the available permissions for a channel. [Flags] public enum GuildPermission : ulong Fields AddReactions = 64 Allows for the addition of reactions to messages. Administrator = 8 Allows all permissions and bypasses channel permission overwrites. AttachFiles = 32768 Allows for uploading images and files. BanMembers = 4 Allows banning members. ChangeNickname = 67108864 Allows for modification of own nickname. Connect = 1048576 Allows for joining of a voice channel. CreateGuildExpressions = 8796093022208 Allows for creating emojis, stickers, and soundboard sounds, and editing and deleting those created by the current user. CreateInstantInvite = 1 Allows creation of instant invites. CreatePrivateThreads = 68719476736 Allows for creating private threads. CreatePublicThreads = 34359738368 Allows for creating public threads. DeafenMembers = 8388608 Allows for deafening of members in a voice channel. EmbedLinks = 16384 Allows links sent by users with this permission will be auto-embedded. KickMembers = 2 Allows kicking members. ManageChannels = 16 Allows management and editing of channels. ManageEmojisAndStickers = 1073741824 Allows management and editing of emojis and stickers. ManageEvents = 8589934592 Allows for creating, editing, and deleting guild scheduled events. ManageGuild = 32 Allows management and editing of the guild. ManageMessages = 8192 Allows for deletion of other users messages. ManageNicknames = 134217728 Allows for modification of other users nicknames. ManageRoles = 268435456 Allows management and editing of roles. ManageThreads = 17179869184 Allows for deleting and archiving threads, and viewing all private threads. ManageWebhooks = 536870912 Allows management and editing of webhooks. MentionEveryone = 131072 Allows for using the @everyone tag to notify all users in a channel, and the @here tag to notify all online users in a channel. ModerateMembers = 1099511627776 Allows for timing out users. MoveMembers = 16777216 Allows for moving of members between voice channels. MuteMembers = 4194304 Allows for muting members in a voice channel. PrioritySpeaker = 256 Allows for using priority speaker in a voice channel. ReadMessageHistory = 65536 Allows for reading of message history. RequestToSpeak = 4294967296 Allows for requesting to speak in stage channels. SendMessages = 2048 Allows for sending messages in a channel SendMessagesInThreads = 274877906944 Allows for sending messages in threads. SendTTSMessages = 4096 Allows for sending of text-to-speech messages. SendVoiceMessages = 70368744177664 Allows sending voice messages. SetVoiceChannelStatus = 281474976710656 Allows setting voice channel status. Speak = 2097152 Allows for speaking in a voice channel. StartEmbeddedActivities = 549755813888 Allows for launching activities (applications with the EMBEDDED flag) in a voice channel. Stream = 512 Allows video streaming in a voice channel. UseApplicationCommands = 2147483648 Allows members to use application commands like slash commands and context menus in text channels. UseClydeAI = 140737488355328 Allows members to interact with the Clyde AI bot. UseExternalEmojis = 262144 Allows the usage of custom emojis from other servers. UseExternalStickers = 137438953472 Allows the usage of custom stickers from other servers. UseSoundboard = 4398046511104 Allows for using the soundboard. UseVAD = 33554432 Allows for using voice-activity-detection in a voice channel. ViewAuditLog = 128 Allows for viewing of audit logs. ViewChannel = 1024 Allows guild members to view a channel, which includes reading messages in text channels. ViewGuildInsights = 524288 Allows for viewing of guild insights ViewMonetizationAnalytics = 2199023255552 Allows for viewing role subscription insights."
  },
  "api/Discord.GuildPermissions.html": {
    "href": "api/Discord.GuildPermissions.html",
    "title": "Struct GuildPermissions | Discord.Net Documentation",
    "keywords": "Struct GuildPermissions Namespace Discord Assembly Discord.Net.Core.dll public struct GuildPermissions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors GuildPermissions(bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool) Creates a new GuildPermissions structure with the provided permissions. public GuildPermissions(bool createInstantInvite = false, bool kickMembers = false, bool banMembers = false, bool administrator = false, bool manageChannels = false, bool manageGuild = false, bool addReactions = false, bool viewAuditLog = false, bool viewGuildInsights = false, bool viewChannel = false, bool sendMessages = false, bool sendTTSMessages = false, bool manageMessages = false, bool embedLinks = false, bool attachFiles = false, bool readMessageHistory = false, bool mentionEveryone = false, bool useExternalEmojis = false, bool connect = false, bool speak = false, bool muteMembers = false, bool deafenMembers = false, bool moveMembers = false, bool useVoiceActivation = false, bool prioritySpeaker = false, bool stream = false, bool changeNickname = false, bool manageNicknames = false, bool manageRoles = false, bool manageWebhooks = false, bool manageEmojisAndStickers = false, bool useApplicationCommands = false, bool requestToSpeak = false, bool manageEvents = false, bool manageThreads = false, bool createPublicThreads = false, bool createPrivateThreads = false, bool useExternalStickers = false, bool sendMessagesInThreads = false, bool startEmbeddedActivities = false, bool moderateMembers = false, bool useSoundboard = false, bool viewMonetizationAnalytics = false, bool sendVoiceMessages = false, bool useClydeAI = false, bool createGuildExpressions = false, bool setVoiceChannelStatus = false) Parameters createInstantInvite bool kickMembers bool banMembers bool administrator bool manageChannels bool manageGuild bool addReactions bool viewAuditLog bool viewGuildInsights bool viewChannel bool sendMessages bool sendTTSMessages bool manageMessages bool embedLinks bool attachFiles bool readMessageHistory bool mentionEveryone bool useExternalEmojis bool connect bool speak bool muteMembers bool deafenMembers bool moveMembers bool useVoiceActivation bool prioritySpeaker bool stream bool changeNickname bool manageNicknames bool manageRoles bool manageWebhooks bool manageEmojisAndStickers bool useApplicationCommands bool requestToSpeak bool manageEvents bool manageThreads bool createPublicThreads bool createPrivateThreads bool useExternalStickers bool sendMessagesInThreads bool startEmbeddedActivities bool moderateMembers bool useSoundboard bool viewMonetizationAnalytics bool sendVoiceMessages bool useClydeAI bool createGuildExpressions bool setVoiceChannelStatus bool GuildPermissions(string) Creates a new GuildPermissions with the provided packed value after converting to ulong. public GuildPermissions(string rawValue) Parameters rawValue string GuildPermissions(ulong) Creates a new GuildPermissions with the provided packed value. public GuildPermissions(ulong rawValue) Parameters rawValue ulong Fields All Gets a GuildPermissions that grants all guild permissions. public static readonly GuildPermissions All Field Value GuildPermissions None Gets a blank GuildPermissions that grants no permissions. public static readonly GuildPermissions None Field Value GuildPermissions Webhook Gets a GuildPermissions that grants all guild permissions for webhook users. public static readonly GuildPermissions Webhook Field Value GuildPermissions Properties AddReactions If true, a user may add reactions. public bool AddReactions { get; } Property Value bool Administrator If true, a user is granted all permissions, and cannot have them revoked via channel permissions. public bool Administrator { get; } Property Value bool AttachFiles If true, a user may send files. public bool AttachFiles { get; } Property Value bool BanMembers If true, a user may ban users from the guild. public bool BanMembers { get; } Property Value bool ChangeNickname If true, a user may change their own nickname. public bool ChangeNickname { get; } Property Value bool Connect If true, a user may connect to a voice channel. public bool Connect { get; } Property Value bool CreateGuildExpressions If true, a user can create guild expressions in this guild. public bool CreateGuildExpressions { get; } Property Value bool CreateInstantInvite If true, a user may create invites. public bool CreateInstantInvite { get; } Property Value bool CreatePrivateThreads If true, a user may create private threads in this guild. public bool CreatePrivateThreads { get; } Property Value bool CreatePublicThreads If true, a user may create public threads in this guild. public bool CreatePublicThreads { get; } Property Value bool DeafenMembers If true, a user may deafen users. public bool DeafenMembers { get; } Property Value bool EmbedLinks If true, Discord will auto-embed links sent by this user. public bool EmbedLinks { get; } Property Value bool KickMembers If true, a user may kick users from the guild. public bool KickMembers { get; } Property Value bool ManageChannels If true, a user may create, delete and modify channels. public bool ManageChannels { get; } Property Value bool ManageEmojisAndStickers If true, a user may edit the emojis and stickers for this guild. public bool ManageEmojisAndStickers { get; } Property Value bool ManageEvents If true, a user may create, edit, and delete events. public bool ManageEvents { get; } Property Value bool ManageGuild If true, a user may adjust guild properties. public bool ManageGuild { get; } Property Value bool ManageMessages If true, a user may delete messages. public bool ManageMessages { get; } Property Value bool ManageNicknames If true, a user may change the nickname of other users. public bool ManageNicknames { get; } Property Value bool ManageRoles If true, a user may adjust roles. public bool ManageRoles { get; } Property Value bool ManageThreads If true, a user may manage threads in this guild. public bool ManageThreads { get; } Property Value bool ManageWebhooks If true, a user may edit the webhooks for this guild. public bool ManageWebhooks { get; } Property Value bool MentionEveryone If true, a user may mention @everyone. public bool MentionEveryone { get; } Property Value bool ModerateMembers If true, a user can timeout other users in this guild. public bool ModerateMembers { get; } Property Value bool MoveMembers If true, a user may move other users between voice channels. public bool MoveMembers { get; } Property Value bool MuteMembers If true, a user may mute users. public bool MuteMembers { get; } Property Value bool PrioritySpeaker If True, a user may use priority speaker in a voice channel. public bool PrioritySpeaker { get; } Property Value bool RawValue Gets a packed value representing all the permissions in this GuildPermissions. public readonly ulong RawValue { get; } Property Value ulong ReadMessageHistory If true, a user may read previous messages. public bool ReadMessageHistory { get; } Property Value bool RequestToSpeak If true, a user may request to speak in stage channels. public bool RequestToSpeak { get; } Property Value bool SendMessages If True, a user may send messages. public bool SendMessages { get; } Property Value bool SendMessagesInThreads If true, a user may send messages in threads in this guild. public bool SendMessagesInThreads { get; } Property Value bool SendTTSMessages If true, a user may send text-to-speech messages. public bool SendTTSMessages { get; } Property Value bool SendVoiceMessages If true, a user can send voice messages in this guild. public bool SendVoiceMessages { get; } Property Value bool SetVoiceChannelStatus If true, a user can set the status of a voice channel. public bool SetVoiceChannelStatus { get; } Property Value bool Speak If true, a user may speak in a voice channel. public bool Speak { get; } Property Value bool StartEmbeddedActivities If true, a user launch application activities in voice channels in this guild. public bool StartEmbeddedActivities { get; } Property Value bool Stream If True, a user may stream video in a voice channel. public bool Stream { get; } Property Value bool UseApplicationCommands If true, a user may use slash commands in this guild. public bool UseApplicationCommands { get; } Property Value bool UseClydeAI If true, a user can use the Clyde AI bot in this guild. public bool UseClydeAI { get; } Property Value bool UseExternalEmojis If true, a user may use custom emoji from other guilds. public bool UseExternalEmojis { get; } Property Value bool UseExternalStickers If true, a user may use external stickers in this guild. public bool UseExternalStickers { get; } Property Value bool UseSoundboard If true, a user can use soundboard in this guild. public bool UseSoundboard { get; } Property Value bool UseVAD If true, a user may use voice-activity-detection rather than push-to-talk. public bool UseVAD { get; } Property Value bool ViewAuditLog If true, a user may view the audit log. public bool ViewAuditLog { get; } Property Value bool ViewChannel If True, a user may view channels. public bool ViewChannel { get; } Property Value bool ViewGuildInsights If true, a user may view the guild insights. public bool ViewGuildInsights { get; } Property Value bool ViewMonetizationAnalytics If true, a user can view monetization analytics in this guild. public bool ViewMonetizationAnalytics { get; } Property Value bool Methods Has(GuildPermission) Returns a value that indicates if a specific GuildPermission is enabled in these permissions. public bool Has(GuildPermission permission) Parameters permission GuildPermission The permission value to check for. Returns bool true if the permission is enabled, false otherwise. Modify(bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?, bool?) Creates a new GuildPermissions from this one, changing the provided non-null permissions. public GuildPermissions Modify(bool? createInstantInvite = null, bool? kickMembers = null, bool? banMembers = null, bool? administrator = null, bool? manageChannels = null, bool? manageGuild = null, bool? addReactions = null, bool? viewAuditLog = null, bool? viewGuildInsights = null, bool? viewChannel = null, bool? sendMessages = null, bool? sendTTSMessages = null, bool? manageMessages = null, bool? embedLinks = null, bool? attachFiles = null, bool? readMessageHistory = null, bool? mentionEveryone = null, bool? useExternalEmojis = null, bool? connect = null, bool? speak = null, bool? muteMembers = null, bool? deafenMembers = null, bool? moveMembers = null, bool? useVoiceActivation = null, bool? prioritySpeaker = null, bool? stream = null, bool? changeNickname = null, bool? manageNicknames = null, bool? manageRoles = null, bool? manageWebhooks = null, bool? manageEmojisAndStickers = null, bool? useApplicationCommands = null, bool? requestToSpeak = null, bool? manageEvents = null, bool? manageThreads = null, bool? createPublicThreads = null, bool? createPrivateThreads = null, bool? useExternalStickers = null, bool? sendMessagesInThreads = null, bool? startEmbeddedActivities = null, bool? moderateMembers = null, bool? useSoundboard = null, bool? viewMonetizationAnalytics = null, bool? sendVoiceMessages = null, bool? useClydeAI = null, bool? createGuildExpressions = null, bool? setVoiceChannelStatus = null) Parameters createInstantInvite bool? kickMembers bool? banMembers bool? administrator bool? manageChannels bool? manageGuild bool? addReactions bool? viewAuditLog bool? viewGuildInsights bool? viewChannel bool? sendMessages bool? sendTTSMessages bool? manageMessages bool? embedLinks bool? attachFiles bool? readMessageHistory bool? mentionEveryone bool? useExternalEmojis bool? connect bool? speak bool? muteMembers bool? deafenMembers bool? moveMembers bool? useVoiceActivation bool? prioritySpeaker bool? stream bool? changeNickname bool? manageNicknames bool? manageRoles bool? manageWebhooks bool? manageEmojisAndStickers bool? useApplicationCommands bool? requestToSpeak bool? manageEvents bool? manageThreads bool? createPublicThreads bool? createPrivateThreads bool? useExternalStickers bool? sendMessagesInThreads bool? startEmbeddedActivities bool? moderateMembers bool? useSoundboard bool? viewMonetizationAnalytics bool? sendVoiceMessages bool? useClydeAI bool? createGuildExpressions bool? setVoiceChannelStatus bool? Returns GuildPermissions ToList() Returns a List<T> containing all of the GuildPermission flags that are enabled. public List<GuildPermission> ToList() Returns List<GuildPermission> A List<T> containing GuildPermission flags. Empty if none are enabled. ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name."
  },
  "api/Discord.GuildProperties.html": {
    "href": "api/Discord.GuildProperties.html",
    "title": "Class GuildProperties | Discord.Net Documentation",
    "keywords": "Class GuildProperties Namespace Discord Assembly Discord.Net.Core.dll Provides properties that are used to modify an IGuild with the specified changes. public class GuildProperties Inheritance object GuildProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples The following example uses ModifyAsync to apply changes specified in the properties, var guild = _client.GetGuild(id); if (guild == null) return; await guild.ModifyAsync(x => { x.Name = \"VERY Fast Discord Running at Incredible Hihg Speed\"; }); Properties AfkChannel Gets or sets the IVoiceChannel where AFK users should be sent. public Optional<IVoiceChannel> AfkChannel { get; set; } Property Value Optional<IVoiceChannel> AfkChannelId Gets or sets the ID of the IVoiceChannel where AFK users should be sent. public Optional<ulong?> AfkChannelId { get; set; } Property Value Optional<ulong?> AfkTimeout Gets or sets how many seconds before a user is sent to AFK. This value MUST be one of: (60, 300, 900, 1800, 3600). public Optional<int> AfkTimeout { get; set; } Property Value Optional<int> Banner Gets or sets the banner of the guild. public Optional<Image?> Banner { get; set; } Property Value Optional<Image?> DefaultMessageNotifications Gets or sets the default message notification state for the guild. public Optional<DefaultMessageNotifications> DefaultMessageNotifications { get; set; } Property Value Optional<DefaultMessageNotifications> ExplicitContentFilter Gets or sets the explicit content filter level of this guild. public Optional<ExplicitContentFilterLevel> ExplicitContentFilter { get; set; } Property Value Optional<ExplicitContentFilterLevel> Features Gets or sets the guild features enabled in this guild. Features that are not mutable will be ignored. public Optional<GuildFeature> Features { get; set; } Property Value Optional<GuildFeature> Icon Gets or sets the icon of the guild. public Optional<Image?> Icon { get; set; } Property Value Optional<Image?> IsBoostProgressBarEnabled Gets or sets if the boost progress bar is enabled. public Optional<bool> IsBoostProgressBarEnabled { get; set; } Property Value Optional<bool> Name Gets or sets the name of the guild. Must be within 100 characters. public Optional<string> Name { get; set; } Property Value Optional<string> Owner Gets or sets the owner of this guild. public Optional<IUser> Owner { get; set; } Property Value Optional<IUser> OwnerId Gets or sets the ID of the owner of this guild. public Optional<ulong> OwnerId { get; set; } Property Value Optional<ulong> PreferredCulture Gets or sets the preferred locale of the guild. public Optional<CultureInfo> PreferredCulture { get; set; } Property Value Optional<CultureInfo> Remarks The PreferredLocale property takes precedence over this property. When PreferredLocale is set, the value of PreferredCulture will be unused. PreferredLocale Gets or sets the preferred locale of the guild in IETF BCP 47 language tag format. public Optional<string> PreferredLocale { get; set; } Property Value Optional<string> Remarks This property takes precedence over PreferredCulture. When it is set, the value of PreferredCulture will not be used. Region Gets or sets the region for the guild's voice connections. public Optional<IVoiceRegion> Region { get; set; } Property Value Optional<IVoiceRegion> RegionId Gets or sets the ID of the region for the guild's voice connections. public Optional<string> RegionId { get; set; } Property Value Optional<string> SafetyAlertsChannelId Gets or sets the ID of the safety alerts channel. public Optional<ulong> SafetyAlertsChannelId { get; set; } Property Value Optional<ulong> Splash Gets or sets the guild's splash image. public Optional<Image?> Splash { get; set; } Property Value Optional<Image?> Remarks The guild must be partnered for this value to have any effect. SystemChannel Gets or sets the ITextChannel where system messages should be sent. public Optional<ITextChannel> SystemChannel { get; set; } Property Value Optional<ITextChannel> SystemChannelFlags Gets or sets the flags that DISABLE types of system channel messages. public Optional<SystemChannelMessageDeny> SystemChannelFlags { get; set; } Property Value Optional<SystemChannelMessageDeny> Remarks These flags are inverted. Setting a flag will disable that system channel message from being sent. A value of None will allow all system channel message types to be sent, given that the SystemChannelId has also been set. A value of GuildBoost will deny guild boost messages from being sent, and allow all other types of messages. Refer to the extension methods GetGuildBoostMessagesEnabled(IGuild), GetWelcomeMessagesEnabled(IGuild), GetGuildSetupTipMessagesEnabled(IGuild), and GetGuildWelcomeMessageReplyEnabled(IGuild) to check if these system channel message types are enabled, without the need to manipulate the logic of the flag. SystemChannelId Gets or sets the ID of the ITextChannel where system messages should be sent. public Optional<ulong?> SystemChannelId { get; set; } Property Value Optional<ulong?> VerificationLevel Gets or sets the verification level new users need to achieve before speaking. public Optional<VerificationLevel> VerificationLevel { get; set; } Property Value Optional<VerificationLevel>"
  },
  "api/Discord.GuildScheduledEventPrivacyLevel.html": {
    "href": "api/Discord.GuildScheduledEventPrivacyLevel.html",
    "title": "Enum GuildScheduledEventPrivacyLevel | Discord.Net Documentation",
    "keywords": "Enum GuildScheduledEventPrivacyLevel Namespace Discord Assembly Discord.Net.Core.dll Represents the privacy level of a guild scheduled event. public enum GuildScheduledEventPrivacyLevel Fields Private = 2 The scheduled event is only accessible to guild members. [Obsolete(\"This event type isn't supported yet! check back later.\", true)] Public = 1 The scheduled event is public and available in discovery."
  },
  "api/Discord.GuildScheduledEventStatus.html": {
    "href": "api/Discord.GuildScheduledEventStatus.html",
    "title": "Enum GuildScheduledEventStatus | Discord.Net Documentation",
    "keywords": "Enum GuildScheduledEventStatus Namespace Discord Assembly Discord.Net.Core.dll Represents the status of a guild event. public enum GuildScheduledEventStatus Fields Active = 2 The event has started. Cancelled = 4 The event was canceled. Completed = 3 The event was completed. Scheduled = 1 The event is scheduled for a set time."
  },
  "api/Discord.GuildScheduledEventType.html": {
    "href": "api/Discord.GuildScheduledEventType.html",
    "title": "Enum GuildScheduledEventType | Discord.Net Documentation",
    "keywords": "Enum GuildScheduledEventType Namespace Discord Assembly Discord.Net.Core.dll Represents the type of a guild scheduled event. public enum GuildScheduledEventType Fields External = 3 The event is set for somewhere externally from discord. None = 0 The event doesn't have a set type. Stage = 1 The event is set in a stage channel. Voice = 2 The event is set in a voice channel."
  },
  "api/Discord.GuildScheduledEventsProperties.html": {
    "href": "api/Discord.GuildScheduledEventsProperties.html",
    "title": "Class GuildScheduledEventsProperties | Discord.Net Documentation",
    "keywords": "Class GuildScheduledEventsProperties Namespace Discord Assembly Discord.Net.Core.dll Provides properties that are used to modify an IGuildScheduledEvent with the specified changes. public class GuildScheduledEventsProperties Inheritance object GuildScheduledEventsProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Gets or sets the channel id of the event. public Optional<ulong?> ChannelId { get; set; } Property Value Optional<ulong?> CoverImage Gets or sets the banner image of the event. public Optional<Image?> CoverImage { get; set; } Property Value Optional<Image?> Description Gets or sets the description of the event. public Optional<string> Description { get; set; } Property Value Optional<string> EndTime Gets or sets the end time of the event. public Optional<DateTimeOffset> EndTime { get; set; } Property Value Optional<DateTimeOffset> Location Gets or sets the location of this event. public Optional<string> Location { get; set; } Property Value Optional<string> Name Gets or sets the name of the event. public Optional<string> Name { get; set; } Property Value Optional<string> PrivacyLevel Gets or sets the privacy level of the event. public Optional<GuildScheduledEventPrivacyLevel> PrivacyLevel { get; set; } Property Value Optional<GuildScheduledEventPrivacyLevel> StartTime Gets or sets the start time of the event. public Optional<DateTimeOffset> StartTime { get; set; } Property Value Optional<DateTimeOffset> Status Gets or sets the status of the event. public Optional<GuildScheduledEventStatus> Status { get; set; } Property Value Optional<GuildScheduledEventStatus> Type Gets or sets the type of the event. public Optional<GuildScheduledEventType> Type { get; set; } Property Value Optional<GuildScheduledEventType>"
  },
  "api/Discord.GuildUserFlags.html": {
    "href": "api/Discord.GuildUserFlags.html",
    "title": "Enum GuildUserFlags | Discord.Net Documentation",
    "keywords": "Enum GuildUserFlags Namespace Discord Assembly Discord.Net.Core.dll Represents public flags for a guild member. public enum GuildUserFlags Fields BypassesVerification = 4 Member bypasses guild verification requirements. CompletedOnboarding = 2 Member has completed onboarding. DidRejoin = 1 Member has left and rejoined the guild. None = 0 Member has no flags set. StartedOnboarding = 8 Member has started onboarding."
  },
  "api/Discord.GuildUserProperties.html": {
    "href": "api/Discord.GuildUserProperties.html",
    "title": "Class GuildUserProperties | Discord.Net Documentation",
    "keywords": "Class GuildUserProperties Namespace Discord Assembly Discord.Net.Core.dll Properties that are used to modify an IGuildUser with the following parameters. public class GuildUserProperties Inheritance object GuildUserProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples The following example uses ModifyAsync to apply changes specified in the properties, var user = guild.GetUser(id); if (user == null) return; await user.ModifyAsync(x => { x.Nickname = \"I need healing\"; }); Properties Channel Moves a user to a voice channel. If null, this user will be disconnected from their current voice channel. public Optional<IVoiceChannel> Channel { get; set; } Property Value Optional<IVoiceChannel> Remarks This user MUST already be in a IVoiceChannel for this to work. When set, this property takes precedence over ChannelId. See Also ModifyAsync(Action<GuildUserProperties>, RequestOptions) ChannelId Moves a user to a voice channel. Set Channel to null to disconnect this user from their current voice channel. public Optional<ulong?> ChannelId { get; set; } Property Value Optional<ulong?> Remarks This user MUST already be in a IVoiceChannel for this to work. See Also ModifyAsync(Action<GuildUserProperties>, RequestOptions) Deaf Gets or sets whether the user should be deafened in a voice channel. public Optional<bool> Deaf { get; set; } Property Value Optional<bool> Remarks If this value is set to true, this user will not be able to hear anyone speak in the guild. See Also ModifyAsync(Action<GuildUserProperties>, RequestOptions) Flags Gets or sets the flags of the guild member. public Optional<GuildUserFlags> Flags { get; set; } Property Value Optional<GuildUserFlags> Remarks Not all flags can be modified, these are reserved for Discord. See Also ModifyAsync(Action<GuildUserProperties>, RequestOptions) Mute Gets or sets whether the user should be muted in a voice channel. public Optional<bool> Mute { get; set; } Property Value Optional<bool> Remarks If this value is set to true, no user will be able to hear this user speak in the guild. See Also ModifyAsync(Action<GuildUserProperties>, RequestOptions) Nickname Gets or sets the user's nickname. public Optional<string> Nickname { get; set; } Property Value Optional<string> Remarks To clear the user's nickname, this value can be set to null or Empty. See Also ModifyAsync(Action<GuildUserProperties>, RequestOptions) RoleIds Gets or sets the roles the user should have. public Optional<IEnumerable<ulong>> RoleIds { get; set; } Property Value Optional<IEnumerable<ulong>> Remarks To add a role to a user: AddRolesAsync(IEnumerable<IRole>, RequestOptions) To remove a role from a user: RemoveRolesAsync(IEnumerable<IRole>, RequestOptions) See Also ModifyAsync(Action<GuildUserProperties>, RequestOptions) Roles Gets or sets the roles the user should have. public Optional<IEnumerable<IRole>> Roles { get; set; } Property Value Optional<IEnumerable<IRole>> Remarks To add a role to a user: AddRolesAsync(IEnumerable<IRole>, RequestOptions) To remove a role from a user: RemoveRolesAsync(IEnumerable<IRole>, RequestOptions) See Also ModifyAsync(Action<GuildUserProperties>, RequestOptions) TimedOutUntil Sets a timestamp how long a user should be timed out for. public Optional<DateTimeOffset?> TimedOutUntil { get; set; } Property Value Optional<DateTimeOffset?> Remarks null or a time in the past to clear a currently existing timeout. See Also ModifyAsync(Action<GuildUserProperties>, RequestOptions) See Also ModifyAsync(Action<GuildUserProperties>, RequestOptions)"
  },
  "api/Discord.GuildWidgetProperties.html": {
    "href": "api/Discord.GuildWidgetProperties.html",
    "title": "Class GuildWidgetProperties | Discord.Net Documentation",
    "keywords": "Class GuildWidgetProperties Namespace Discord Assembly Discord.Net.Core.dll Provides properties that are used to modify the widget of an IGuild with the specified changes. public class GuildWidgetProperties Inheritance object GuildWidgetProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Channel Sets the channel that the invite should place its users in, if not null. public Optional<IChannel> Channel { get; set; } Property Value Optional<IChannel> ChannelId Sets the channel that the invite should place its users in, if not null. public Optional<ulong?> ChannelId { get; set; } Property Value Optional<ulong?> Enabled Sets whether the widget should be enabled. public Optional<bool> Enabled { get; set; } Property Value Optional<bool>"
  },
  "api/Discord.IActivity.html": {
    "href": "api/Discord.IActivity.html",
    "title": "Interface IActivity | Discord.Net Documentation",
    "keywords": "Interface IActivity Namespace Discord Assembly Discord.Net.Core.dll A user's activity status, typically a Game. public interface IActivity Properties Details Gets the details on what the player is currently doing. string Details { get; } Property Value string A string describing what the player is doing. Flags Gets the flags that are relevant to this activity. ActivityProperties Flags { get; } Property Value ActivityProperties The value of flags for this activity. Remarks This value is determined by bitwise OR-ing ActivityProperties values together. Name Gets the name of the activity. string Name { get; } Property Value string A string containing the name of the activity that the user is doing. Type Gets the type of the activity. ActivityType Type { get; } Property Value ActivityType The type of activity."
  },
  "api/Discord.IApplication.html": {
    "href": "api/Discord.IApplication.html",
    "title": "Interface IApplication | Discord.Net Documentation",
    "keywords": "Interface IApplication Namespace Discord Assembly Discord.Net.Core.dll Represents a Discord application created via the developer portal. public interface IApplication : ISnowflakeEntity, IEntity<ulong> Inherited Members ISnowflakeEntity.CreatedAt IEntity<ulong>.Id Properties ApproximateGuildCount Gets the approximate count of the guild the application was added to. null if not returned. int? ApproximateGuildCount { get; } Property Value int? BotRequiresCodeGrant Gets if the bot requires code grant. null if not set. bool? BotRequiresCodeGrant { get; } Property Value bool? CustomInstallUrl Gets application's default custom authorization url. null if disabled. string CustomInstallUrl { get; } Property Value string Description Gets the description of the application. string Description { get; } Property Value string DiscoverabilityState Gets the application's discoverability state. ApplicationDiscoverabilityState DiscoverabilityState { get; } Property Value ApplicationDiscoverabilityState DiscoveryEligibilityFlags Gets the application's discovery eligibility flags. DiscoveryEligibilityFlags DiscoveryEligibilityFlags { get; } Property Value DiscoveryEligibilityFlags ExplicitContentFilterLevel Gets the application's explicit content filter level for uploaded media content used in application commands. ApplicationExplicitContentFilterLevel ExplicitContentFilterLevel { get; } Property Value ApplicationExplicitContentFilterLevel Flags Gets the application's public flags. ApplicationFlags Flags { get; } Property Value ApplicationFlags Guild Gets the partial guild object of the application's developer's support server. null if not set. PartialGuild Guild { get; } Property Value PartialGuild IconUrl Gets the icon URL of the application. string IconUrl { get; } Property Value string InstallParams Gets a collection of install parameters for this application; null if disabled. ApplicationInstallParams InstallParams { get; } Property Value ApplicationInstallParams InteractionEventTypes Gets event types to be sent to the interaction endpoint. IReadOnlyCollection<string> InteractionEventTypes { get; } Property Value IReadOnlyCollection<string> InteractionsEndpointUrl Gets application's interactions endpoint url. null if not set. string InteractionsEndpointUrl { get; } Property Value string InteractionsVersion Gets the interactions version application uses. ApplicationInteractionsVersion InteractionsVersion { get; } Property Value ApplicationInteractionsVersion IsBotPublic Gets if the bot is public. null if not set. bool? IsBotPublic { get; } Property Value bool? IsHook Gets whether the bot is allowed to hook into the application's game directly. bool IsHook { get; } Property Value bool IsMonetized Whether the application has premium subscriptions. bool IsMonetized { get; } Property Value bool MonetizationEligibilityFlags Gets the application's monetization eligibility flags. ApplicationMonetizationEligibilityFlags MonetizationEligibilityFlags { get; } Property Value ApplicationMonetizationEligibilityFlags MonetizationState Gets the application's monetization state. ApplicationMonetizationState MonetizationState { get; } Property Value ApplicationMonetizationState Name Gets the name of the application. string Name { get; } Property Value string Owner Gets the partial user object containing info on the owner of the application. IUser Owner { get; } Property Value IUser PrivacyPolicy Gets the the url of the app's privacy policy. string PrivacyPolicy { get; } Property Value string RPCOrigins Gets the RPC origins of the application. IReadOnlyCollection<string> RPCOrigins { get; } Property Value IReadOnlyCollection<string> RedirectUris Gets the redirect uris configured for the application. IReadOnlyCollection<string> RedirectUris { get; } Property Value IReadOnlyCollection<string> RoleConnectionsVerificationUrl Gets the application's role connection verification entry point. null if not set. string RoleConnectionsVerificationUrl { get; } Property Value string RpcState Gets the application's rpc state. ApplicationRpcState RpcState { get; } Property Value ApplicationRpcState StoreState Gets the application's store state. ApplicationStoreState StoreState { get; } Property Value ApplicationStoreState Tags Gets a collection of tags related to the application. IReadOnlyCollection<string> Tags { get; } Property Value IReadOnlyCollection<string> Team Gets the team associated with this application if there is one. ITeam Team { get; } Property Value ITeam TermsOfService Gets the url of the app's terms of service. string TermsOfService { get; } Property Value string VerificationState Gets the application's verification state. ApplicationVerificationState VerificationState { get; } Property Value ApplicationVerificationState VerifyKey Gets the hex encoded key for verification in interactions. string VerifyKey { get; } Property Value string"
  },
  "api/Discord.IApplicationCommand.html": {
    "href": "api/Discord.IApplicationCommand.html",
    "title": "Interface IApplicationCommand | Discord.Net Documentation",
    "keywords": "Interface IApplicationCommand Namespace Discord Assembly Discord.Net.Core.dll The base command model that belongs to an application. public interface IApplicationCommand : ISnowflakeEntity, IEntity<ulong>, IDeletable Inherited Members ISnowflakeEntity.CreatedAt IEntity<ulong>.Id IDeletable.DeleteAsync(RequestOptions) Properties ApplicationId Gets the unique id of the parent application. ulong ApplicationId { get; } Property Value ulong DefaultMemberPermissions Set of default GuildPermission required to invoke the command. GuildPermissions DefaultMemberPermissions { get; } Property Value GuildPermissions Description Gets the description of the command. string Description { get; } Property Value string DescriptionLocalizations Gets the localization dictionary for the description field of this command. IReadOnlyDictionary<string, string> DescriptionLocalizations { get; } Property Value IReadOnlyDictionary<string, string> DescriptionLocalized Gets the localized description of this command. string DescriptionLocalized { get; } Property Value string Remarks Only returned when the withLocalizations query parameter is set to false when requesting the command. IsDefaultPermission Gets whether the command is enabled by default when the app is added to a guild. bool IsDefaultPermission { get; } Property Value bool IsEnabledInDm Indicates whether the command is available in DMs with the app. bool IsEnabledInDm { get; } Property Value bool Remarks Only for globally-scoped commands. IsNsfw Indicates whether the command is age restricted. bool IsNsfw { get; } Property Value bool Name Gets the name of the command. string Name { get; } Property Value string NameLocalizations Gets the localization dictionary for the name field of this command. IReadOnlyDictionary<string, string> NameLocalizations { get; } Property Value IReadOnlyDictionary<string, string> NameLocalized Gets the localized name of this command. string NameLocalized { get; } Property Value string Remarks Only returned when the withLocalizations query parameter is set to false when requesting the command. Options Gets a collection of options for this application command. IReadOnlyCollection<IApplicationCommandOption> Options { get; } Property Value IReadOnlyCollection<IApplicationCommandOption> Type Gets the type of the command. ApplicationCommandType Type { get; } Property Value ApplicationCommandType Methods ModifyAsync(Action<ApplicationCommandProperties>, RequestOptions) Modifies the current application command. Task ModifyAsync(Action<ApplicationCommandProperties> func, RequestOptions options = null) Parameters func Action<ApplicationCommandProperties> The new properties to use when modifying the command. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. ModifyAsync<TArg>(Action<TArg>, RequestOptions) Modifies the current application command. Task ModifyAsync<TArg>(Action<TArg> func, RequestOptions options = null) where TArg : ApplicationCommandProperties Parameters func Action<TArg> The new properties to use when modifying the command. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Type Parameters TArg Exceptions InvalidOperationException Thrown when you pass in an invalid ApplicationCommandProperties type."
  },
  "api/Discord.IApplicationCommandInteraction.html": {
    "href": "api/Discord.IApplicationCommandInteraction.html",
    "title": "Interface IApplicationCommandInteraction | Discord.Net Documentation",
    "keywords": "Interface IApplicationCommandInteraction Namespace Discord Assembly Discord.Net.Core.dll Represents an application command interaction. public interface IApplicationCommandInteraction : IDiscordInteraction, ISnowflakeEntity, IEntity<ulong> Inherited Members IDiscordInteraction.Id IDiscordInteraction.Type IDiscordInteraction.Token IDiscordInteraction.Version IDiscordInteraction.HasResponded IDiscordInteraction.User IDiscordInteraction.UserLocale IDiscordInteraction.GuildLocale IDiscordInteraction.IsDMInteraction IDiscordInteraction.ChannelId IDiscordInteraction.GuildId IDiscordInteraction.ApplicationId IDiscordInteraction.Entitlements IDiscordInteraction.RespondAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.RespondWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.RespondWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.RespondWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.RespondWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.GetOriginalResponseAsync(RequestOptions) IDiscordInteraction.ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) IDiscordInteraction.DeleteOriginalResponseAsync(RequestOptions) IDiscordInteraction.DeferAsync(bool, RequestOptions) IDiscordInteraction.RespondWithModalAsync(Modal, RequestOptions) IDiscordInteraction.RespondWithPremiumRequiredAsync(RequestOptions) ISnowflakeEntity.CreatedAt Extension Methods IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, InteractionService, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, T, RequestOptions, Action<ModalBuilder>) Properties Data Gets the data of the application command interaction IApplicationCommandInteractionData Data { get; } Property Value IApplicationCommandInteractionData"
  },
  "api/Discord.IApplicationCommandInteractionData.html": {
    "href": "api/Discord.IApplicationCommandInteractionData.html",
    "title": "Interface IApplicationCommandInteractionData | Discord.Net Documentation",
    "keywords": "Interface IApplicationCommandInteractionData Namespace Discord Assembly Discord.Net.Core.dll Represents data of an Interaction Command, see https://discord.com/developers/docs/interactions/slash-commands#interaction-applicationcommandinteractiondata. public interface IApplicationCommandInteractionData : IDiscordInteractionData Properties Id Gets the snowflake id of this command. ulong Id { get; } Property Value ulong Name Gets the name of this command. string Name { get; } Property Value string Options Gets the options that the user has provided. IReadOnlyCollection<IApplicationCommandInteractionDataOption> Options { get; } Property Value IReadOnlyCollection<IApplicationCommandInteractionDataOption>"
  },
  "api/Discord.IApplicationCommandInteractionDataOption.html": {
    "href": "api/Discord.IApplicationCommandInteractionDataOption.html",
    "title": "Interface IApplicationCommandInteractionDataOption | Discord.Net Documentation",
    "keywords": "Interface IApplicationCommandInteractionDataOption Namespace Discord Assembly Discord.Net.Core.dll Represents a option group for a command. public interface IApplicationCommandInteractionDataOption Properties Name Gets the name of the parameter. string Name { get; } Property Value string Options Gets the nested options of this option. IReadOnlyCollection<IApplicationCommandInteractionDataOption> Options { get; } Property Value IReadOnlyCollection<IApplicationCommandInteractionDataOption> Type Gets the type of this data's option. ApplicationCommandOptionType Type { get; } Property Value ApplicationCommandOptionType Value Gets the value of the pair. note This objects type can be any one of the option types in ApplicationCommandOptionType. object Value { get; } Property Value object"
  },
  "api/Discord.IApplicationCommandOption.html": {
    "href": "api/Discord.IApplicationCommandOption.html",
    "title": "Interface IApplicationCommandOption | Discord.Net Documentation",
    "keywords": "Interface IApplicationCommandOption Namespace Discord Assembly Discord.Net.Core.dll Options for the IApplicationCommand. public interface IApplicationCommandOption Properties ChannelTypes Gets the allowed channel types for this option. IReadOnlyCollection<ChannelType> ChannelTypes { get; } Property Value IReadOnlyCollection<ChannelType> Choices Gets the choices for string and int types for the user to pick from. IReadOnlyCollection<IApplicationCommandOptionChoice> Choices { get; } Property Value IReadOnlyCollection<IApplicationCommandOptionChoice> Description Gets the description of this command option. string Description { get; } Property Value string DescriptionLocalizations Gets the localization dictionary for the description field of this command option. IReadOnlyDictionary<string, string> DescriptionLocalizations { get; } Property Value IReadOnlyDictionary<string, string> DescriptionLocalized Gets the localized description of this command option. string DescriptionLocalized { get; } Property Value string Remarks Only returned when the withLocalizations query parameter is set to true when requesting the command. IsAutocomplete Gets whether or not the option has autocomplete enabled. bool? IsAutocomplete { get; } Property Value bool? IsDefault Gets whether or not this is the first required option for the user to complete. bool? IsDefault { get; } Property Value bool? IsRequired Gets whether or not the parameter is required or optional. bool? IsRequired { get; } Property Value bool? MaxLength Gets the maximum allowed length for a string input. int? MaxLength { get; } Property Value int? MaxValue Gets the largest number value the user can input. double? MaxValue { get; } Property Value double? MinLength Gets the minimum allowed length for a string input. int? MinLength { get; } Property Value int? MinValue Gets the smallest number value the user can input. double? MinValue { get; } Property Value double? Name Gets the name of this command option. string Name { get; } Property Value string NameLocalizations Gets the localization dictionary for the name field of this command option. IReadOnlyDictionary<string, string> NameLocalizations { get; } Property Value IReadOnlyDictionary<string, string> NameLocalized Gets the localized name of this command option. string NameLocalized { get; } Property Value string Remarks Only returned when the withLocalizations query parameter is set to false when requesting the command. Options Gets the sub-options for this command option. IReadOnlyCollection<IApplicationCommandOption> Options { get; } Property Value IReadOnlyCollection<IApplicationCommandOption> Type Gets the type of this IApplicationCommandOption. ApplicationCommandOptionType Type { get; } Property Value ApplicationCommandOptionType"
  },
  "api/Discord.IApplicationCommandOptionChoice.html": {
    "href": "api/Discord.IApplicationCommandOptionChoice.html",
    "title": "Interface IApplicationCommandOptionChoice | Discord.Net Documentation",
    "keywords": "Interface IApplicationCommandOptionChoice Namespace Discord Assembly Discord.Net.Core.dll Specifies choices for command group. public interface IApplicationCommandOptionChoice Properties Name Gets the choice name. string Name { get; } Property Value string NameLocalizations Gets the localization dictionary for the name field of this command option. IReadOnlyDictionary<string, string> NameLocalizations { get; } Property Value IReadOnlyDictionary<string, string> NameLocalized Gets the localized name of this command option. string NameLocalized { get; } Property Value string Remarks Only returned when the withLocalizations query parameter is set to false when requesting the command. Value Gets the value of the choice. object Value { get; } Property Value object"
  },
  "api/Discord.IAttachment.html": {
    "href": "api/Discord.IAttachment.html",
    "title": "Interface IAttachment | Discord.Net Documentation",
    "keywords": "Interface IAttachment Namespace Discord Assembly Discord.Net.Core.dll Represents a message attachment found in a IUserMessage. public interface IAttachment : ISnowflakeEntity, IEntity<ulong> Inherited Members ISnowflakeEntity.CreatedAt IEntity<ulong>.Id Extension Methods AttachmentExtensions.IsSpoiler(IAttachment) Properties ClipCreatedAt Gets the timestamp of the clip. null if the attachment is not a clip. DateTimeOffset? ClipCreatedAt { get; } Property Value DateTimeOffset? ClipParticipants Gets users who participated in the clip. IReadOnlyCollection<IUser> ClipParticipants { get; } Property Value IReadOnlyCollection<IUser> ContentType Gets the media's MIME type if present; otherwise null. string ContentType { get; } Property Value string Description Gets the description of the attachment; or null if there is none set. string Description { get; } Property Value string Duration Gets the duration of the audio file. null if the attachment is not a voice message. double? Duration { get; } Property Value double? Ephemeral Gets whether or not this attachment is ephemeral. bool Ephemeral { get; } Property Value bool true if the attachment is ephemeral; otherwise false. Filename Gets the filename of this attachment. string Filename { get; } Property Value string A string containing the full filename of this attachment (e.g. textFile.txt). Flags Gets flags related to this to this attachment. AttachmentFlags Flags { get; } Property Value AttachmentFlags Height Gets the height of this attachment. int? Height { get; } Property Value int? The height of this attachment if it is a picture; otherwise null. ProxyUrl Gets a proxied URL of this attachment. string ProxyUrl { get; } Property Value string A string containing the proxied URL of this attachment. Size Gets the file size of this attachment. int Size { get; } Property Value int The size of this attachment in bytes. Title Gets the title of the clip. null if the clip has no title set. string Title { get; } Property Value string Url Gets the URL of this attachment. string Url { get; } Property Value string A string containing the URL of this attachment. Waveform Gets the base64 encoded bytearray representing a sampled waveform. null if the attachment is not a voice message. string Waveform { get; } Property Value string Width Gets the width of this attachment. int? Width { get; } Property Value int? The width of this attachment if it is a picture; otherwise null."
  },
  "api/Discord.IAudioChannel.html": {
    "href": "api/Discord.IAudioChannel.html",
    "title": "Interface IAudioChannel | Discord.Net Documentation",
    "keywords": "Interface IAudioChannel Namespace Discord Assembly Discord.Net.Core.dll Represents a generic audio channel. public interface IAudioChannel : IChannel, ISnowflakeEntity, IEntity<ulong> Inherited Members IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) ISnowflakeEntity.CreatedAt IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties RTCRegion Gets the RTC region for this audio channel. string RTCRegion { get; } Property Value string Remarks This property can be null. Methods ConnectAsync(bool, bool, bool) Connects to this audio channel. Task<IAudioClient> ConnectAsync(bool selfDeaf = false, bool selfMute = false, bool external = false) Parameters selfDeaf bool Determines whether the client should deaf itself upon connection. selfMute bool Determines whether the client should mute itself upon connection. external bool Determines whether the audio client is an external one or not. Returns Task<IAudioClient> A task representing the asynchronous connection operation. The task result contains the IAudioClient responsible for the connection. DisconnectAsync() Disconnects from this audio channel. Task DisconnectAsync() Returns Task A task representing the asynchronous operation for disconnecting from the audio channel. ModifyAsync(Action<AudioChannelProperties>, RequestOptions) Modifies this audio channel. Task ModifyAsync(Action<AudioChannelProperties> func, RequestOptions options = null) Parameters func Action<AudioChannelProperties> The properties to modify the channel with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. See Also AudioChannelProperties"
  },
  "api/Discord.IAuditLogData.html": {
    "href": "api/Discord.IAuditLogData.html",
    "title": "Interface IAuditLogData | Discord.Net Documentation",
    "keywords": "Interface IAuditLogData Namespace Discord Assembly Discord.Net.Core.dll Represents data applied to an IAuditLogEntry. public interface IAuditLogData"
  },
  "api/Discord.IAuditLogEntry.html": {
    "href": "api/Discord.IAuditLogEntry.html",
    "title": "Interface IAuditLogEntry | Discord.Net Documentation",
    "keywords": "Interface IAuditLogEntry Namespace Discord Assembly Discord.Net.Core.dll Represents a generic audit log entry. public interface IAuditLogEntry : ISnowflakeEntity, IEntity<ulong> Inherited Members ISnowflakeEntity.CreatedAt IEntity<ulong>.Id Properties Action Gets the action which occurred to create this entry. ActionType Action { get; } Property Value ActionType The type of action for this audit log entry. Data Gets the data for this entry. IAuditLogData Data { get; } Property Value IAuditLogData An IAuditLogData for this audit log entry; null if no data is available. Reason Gets the reason behind the change. string Reason { get; } Property Value string A string containing the reason for the change; null if none is provided. User Gets the user responsible for causing the changes. IUser User { get; } Property Value IUser A user object."
  },
  "api/Discord.IAuditLogInfoModel.html": {
    "href": "api/Discord.IAuditLogInfoModel.html",
    "title": "Interface IAuditLogInfoModel | Discord.Net Documentation",
    "keywords": "Interface IAuditLogInfoModel Namespace Discord Assembly Discord.Net.Core.dll public interface IAuditLogInfoModel"
  },
  "api/Discord.IAutoModRule.html": {
    "href": "api/Discord.IAutoModRule.html",
    "title": "Interface IAutoModRule | Discord.Net Documentation",
    "keywords": "Interface IAutoModRule Namespace Discord Assembly Discord.Net.Core.dll Represents a auto mod rule within a guild. public interface IAutoModRule : ISnowflakeEntity, IEntity<ulong>, IDeletable Inherited Members ISnowflakeEntity.CreatedAt IEntity<ulong>.Id IDeletable.DeleteAsync(RequestOptions) Properties Actions Gets a collection of actions that will be preformed if a user breaks this rule. IReadOnlyCollection<AutoModRuleAction> Actions { get; } Property Value IReadOnlyCollection<AutoModRuleAction> AllowList Gets the allow list patterns for this rule. Empty if the rule has no allowed terms. IReadOnlyCollection<string> AllowList { get; } Property Value IReadOnlyCollection<string> Remarks This collection will be empty if TriggerType is not Keyword. CreatorId Gets the id of the user who created this use. ulong CreatorId { get; } Property Value ulong Enabled Gets whether or not this rule is enabled. bool Enabled { get; } Property Value bool EventType Gets the event type on which this rule is triggered. AutoModEventType EventType { get; } Property Value AutoModEventType ExemptChannels Gets a collection of channel ids that are exempt from this rule. Empty if the rule has no exempt channels. IReadOnlyCollection<ulong> ExemptChannels { get; } Property Value IReadOnlyCollection<ulong> ExemptRoles Gets a collection of role ids that are exempt from this rule. Empty if the rule has no exempt roles. IReadOnlyCollection<ulong> ExemptRoles { get; } Property Value IReadOnlyCollection<ulong> GuildId Gets the guild id on which this rule exists. ulong GuildId { get; } Property Value ulong KeywordFilter Gets the keyword filter for this rule. IReadOnlyCollection<string> KeywordFilter { get; } Property Value IReadOnlyCollection<string> Remarks This collection will be empty if TriggerType is not Keyword. MentionTotalLimit Gets the total mention limit for this rule. int? MentionTotalLimit { get; } Property Value int? Remarks This property will be null if TriggerType is not MentionSpam. Name Get the name of this rule. string Name { get; } Property Value string Presets Gets the preset keyword types for this rule. Empty if the rule has no presets. IReadOnlyCollection<KeywordPresetTypes> Presets { get; } Property Value IReadOnlyCollection<KeywordPresetTypes> Remarks This collection will be empty if TriggerType is not KeywordPreset. RegexPatterns Gets regex patterns for this rule. Empty if the rule has no regexes. IReadOnlyCollection<string> RegexPatterns { get; } Property Value IReadOnlyCollection<string> Remarks This collection will be empty if TriggerType is not Keyword. TriggerType Gets the trigger type on which this rule executes. AutoModTriggerType TriggerType { get; } Property Value AutoModTriggerType Methods ModifyAsync(Action<AutoModRuleProperties>, RequestOptions) Modifies this rule. Task ModifyAsync(Action<AutoModRuleProperties> func, RequestOptions options = null) Parameters func Action<AutoModRuleProperties> The delegate containing the properties to modify the rule with. options RequestOptions The options to be used when sending the request. Returns Task"
  },
  "api/Discord.IAutocompleteInteraction.html": {
    "href": "api/Discord.IAutocompleteInteraction.html",
    "title": "Interface IAutocompleteInteraction | Discord.Net Documentation",
    "keywords": "Interface IAutocompleteInteraction Namespace Discord Assembly Discord.Net.Core.dll Represents a ApplicationCommandAutocomplete. public interface IAutocompleteInteraction : IDiscordInteraction, ISnowflakeEntity, IEntity<ulong> Inherited Members IDiscordInteraction.Id IDiscordInteraction.Type IDiscordInteraction.Token IDiscordInteraction.Version IDiscordInteraction.HasResponded IDiscordInteraction.User IDiscordInteraction.UserLocale IDiscordInteraction.GuildLocale IDiscordInteraction.IsDMInteraction IDiscordInteraction.ChannelId IDiscordInteraction.GuildId IDiscordInteraction.ApplicationId IDiscordInteraction.Entitlements IDiscordInteraction.RespondAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.RespondWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.RespondWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.RespondWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.RespondWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.GetOriginalResponseAsync(RequestOptions) IDiscordInteraction.ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) IDiscordInteraction.DeleteOriginalResponseAsync(RequestOptions) IDiscordInteraction.DeferAsync(bool, RequestOptions) IDiscordInteraction.RespondWithModalAsync(Modal, RequestOptions) IDiscordInteraction.RespondWithPremiumRequiredAsync(RequestOptions) ISnowflakeEntity.CreatedAt Extension Methods IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, InteractionService, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, T, RequestOptions, Action<ModalBuilder>) Properties Data Gets the autocomplete data of this interaction. IAutocompleteInteractionData Data { get; } Property Value IAutocompleteInteractionData"
  },
  "api/Discord.IAutocompleteInteractionData.html": {
    "href": "api/Discord.IAutocompleteInteractionData.html",
    "title": "Interface IAutocompleteInteractionData | Discord.Net Documentation",
    "keywords": "Interface IAutocompleteInteractionData Namespace Discord Assembly Discord.Net.Core.dll Represents data for a slash commands autocomplete interaction. public interface IAutocompleteInteractionData : IDiscordInteractionData Properties CommandId Gets the id of the invoked command. ulong CommandId { get; } Property Value ulong CommandName Gets the name of the invoked command. string CommandName { get; } Property Value string Current Gets the current autocomplete option that is actively being filled out. AutocompleteOption Current { get; } Property Value AutocompleteOption Options Gets a collection of all the other options the executing users has filled out. IReadOnlyCollection<AutocompleteOption> Options { get; } Property Value IReadOnlyCollection<AutocompleteOption> Type Gets the type of the invoked command. ApplicationCommandType Type { get; } Property Value ApplicationCommandType Version Gets the version of the invoked command. ulong Version { get; } Property Value ulong"
  },
  "api/Discord.IBan.html": {
    "href": "api/Discord.IBan.html",
    "title": "Interface IBan | Discord.Net Documentation",
    "keywords": "Interface IBan Namespace Discord Assembly Discord.Net.Core.dll Represents a generic ban object. public interface IBan Properties Reason Gets the reason why the user is banned if specified. string Reason { get; } Property Value string A string containing the reason behind the ban; null if none is specified. User Gets the banned user. IUser User { get; } Property Value IUser A user that was banned."
  },
  "api/Discord.ICategoryChannel.html": {
    "href": "api/Discord.ICategoryChannel.html",
    "title": "Interface ICategoryChannel | Discord.Net Documentation",
    "keywords": "Interface ICategoryChannel Namespace Discord Assembly Discord.Net.Core.dll Represents a generic category channel. public interface ICategoryChannel : IGuildChannel, IChannel, ISnowflakeEntity, IEntity<ulong>, IDeletable Inherited Members IGuildChannel.Position IGuildChannel.Flags IGuildChannel.Guild IGuildChannel.GuildId IGuildChannel.PermissionOverwrites IGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions) IGuildChannel.GetPermissionOverwrite(IRole) IGuildChannel.GetPermissionOverwrite(IUser) IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions) IGuildChannel.GetUsersAsync(CacheMode, RequestOptions) IGuildChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IChannel.Name ISnowflakeEntity.CreatedAt IEntity<ulong>.Id IDeletable.DeleteAsync(RequestOptions) Extension Methods ChannelExtensions.GetChannelType(IChannel)"
  },
  "api/Discord.IChannel.html": {
    "href": "api/Discord.IChannel.html",
    "title": "Interface IChannel | Discord.Net Documentation",
    "keywords": "Interface IChannel Namespace Discord Assembly Discord.Net.Core.dll Represents a generic channel. public interface IChannel : ISnowflakeEntity, IEntity<ulong> Inherited Members ISnowflakeEntity.CreatedAt IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties Name Gets the name of this channel. string Name { get; } Property Value string A string containing the name of this channel. Methods GetUserAsync(ulong, CacheMode, RequestOptions) Gets a user in this channel. Task<IUser> GetUserAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters id ulong The snowflake identifier of the user (e.g. 168693960628371456). mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IUser> A task that represents the asynchronous get operation. The task result contains a user object that represents the found user; null if none is found. GetUsersAsync(CacheMode, RequestOptions) Gets a collection of users that are able to view the channel or are currently in this channel. IAsyncEnumerable<IReadOnlyCollection<IUser>> GetUsersAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IUser>> Paged collection of users. Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the individual messages as a collection. This method will attempt to fetch all users that is able to view this channel or is currently in this channel. The library will attempt to split up the requests according to and MaxUsersPerBatch. In other words, if there are 3000 users, and the MaxUsersPerBatch constant is 1000, the request will be split into 3 individual requests; thus returning 53individual asynchronous responses, hence the need of flattening."
  },
  "api/Discord.IComponentInteraction.html": {
    "href": "api/Discord.IComponentInteraction.html",
    "title": "Interface IComponentInteraction | Discord.Net Documentation",
    "keywords": "Interface IComponentInteraction Namespace Discord Assembly Discord.Net.Core.dll Represents an interaction type for Message Components. public interface IComponentInteraction : IDiscordInteraction, ISnowflakeEntity, IEntity<ulong> Inherited Members IDiscordInteraction.Id IDiscordInteraction.Type IDiscordInteraction.Token IDiscordInteraction.Version IDiscordInteraction.HasResponded IDiscordInteraction.User IDiscordInteraction.UserLocale IDiscordInteraction.GuildLocale IDiscordInteraction.IsDMInteraction IDiscordInteraction.ChannelId IDiscordInteraction.GuildId IDiscordInteraction.ApplicationId IDiscordInteraction.Entitlements IDiscordInteraction.RespondAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.RespondWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.RespondWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.RespondWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.RespondWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.GetOriginalResponseAsync(RequestOptions) IDiscordInteraction.ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) IDiscordInteraction.DeleteOriginalResponseAsync(RequestOptions) IDiscordInteraction.DeferAsync(bool, RequestOptions) IDiscordInteraction.RespondWithModalAsync(Modal, RequestOptions) IDiscordInteraction.RespondWithPremiumRequiredAsync(RequestOptions) ISnowflakeEntity.CreatedAt Extension Methods IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, InteractionService, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, T, RequestOptions, Action<ModalBuilder>) Properties Data Gets the data received with this component interaction. IComponentInteractionData Data { get; } Property Value IComponentInteractionData Message Gets the message that contained the trigger for this interaction. IUserMessage Message { get; } Property Value IUserMessage Methods DeferLoadingAsync(bool, RequestOptions) Defers an interaction with the response type 5 (DeferredChannelMessageWithSource). Task DeferLoadingAsync(bool ephemeral = false, RequestOptions options = null) Parameters ephemeral bool true to defer ephemerally, otherwise false. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation of acknowledging the interaction. UpdateAsync(Action<MessageProperties>, RequestOptions) Updates the message which this component resides in with the type UpdateMessage Task UpdateAsync(Action<MessageProperties> func, RequestOptions options = null) Parameters func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation of updating the message."
  },
  "api/Discord.IComponentInteractionData.html": {
    "href": "api/Discord.IComponentInteractionData.html",
    "title": "Interface IComponentInteractionData | Discord.Net Documentation",
    "keywords": "Interface IComponentInteractionData Namespace Discord Assembly Discord.Net.Core.dll Represents the data sent with the IComponentInteraction. public interface IComponentInteractionData : IDiscordInteractionData Properties Channels Gets the channels(s) of a ChannelSelect interaction response. null if select type is different. IReadOnlyCollection<IChannel> Channels { get; } Property Value IReadOnlyCollection<IChannel> CustomId Gets the component's Custom Id that was clicked. string CustomId { get; } Property Value string Members Gets the guild member(s) of a UserSelect or MentionableSelect interaction response. null if type select is different. IReadOnlyCollection<IGuildUser> Members { get; } Property Value IReadOnlyCollection<IGuildUser> Roles Gets the roles(s) of a RoleSelect or MentionableSelect interaction response. null if select type is different. IReadOnlyCollection<IRole> Roles { get; } Property Value IReadOnlyCollection<IRole> Type Gets the type of the component clicked. ComponentType Type { get; } Property Value ComponentType Users Gets the user(s) of a UserSelect or MentionableSelect interaction response. null if select type is different. IReadOnlyCollection<IUser> Users { get; } Property Value IReadOnlyCollection<IUser> Value Gets the value of a TextInput interaction response. string Value { get; } Property Value string Values Gets the value(s) of a SelectMenu interaction response. null if select type is different. IReadOnlyCollection<string> Values { get; } Property Value IReadOnlyCollection<string>"
  },
  "api/Discord.IConnection.html": {
    "href": "api/Discord.IConnection.html",
    "title": "Interface IConnection | Discord.Net Documentation",
    "keywords": "Interface IConnection Namespace Discord Assembly Discord.Net.Core.dll public interface IConnection Properties FriendSync Gets whether friend sync is enabled for this connection. bool FriendSync { get; } Property Value bool Id Gets the ID of the connection account. string Id { get; } Property Value string A string representing the unique identifier value of this connection. Integrations Gets a IReadOnlyCollection<T> of integration partials. IReadOnlyCollection<IIntegration> Integrations { get; } Property Value IReadOnlyCollection<IIntegration> IsRevoked Gets whether the connection is revoked. bool? IsRevoked { get; } Property Value bool? A value which if true indicates that this connection has been revoked, otherwise false. Name Gets the username of the connection account. string Name { get; } Property Value string A string containing the name of this connection. ShowActivity Gets whether activities related to this connection will be shown in presence updates. bool ShowActivity { get; } Property Value bool Type Gets the service of the connection (twitch, youtube). string Type { get; } Property Value string A string containing the name of this type of connection. Verified Gets whether the connection is verified. bool Verified { get; } Property Value bool Visibility Visibility of this connection. ConnectionVisibility Visibility { get; } Property Value ConnectionVisibility"
  },
  "api/Discord.ICustomSticker.html": {
    "href": "api/Discord.ICustomSticker.html",
    "title": "Interface ICustomSticker | Discord.Net Documentation",
    "keywords": "Interface ICustomSticker Namespace Discord Assembly Discord.Net.Core.dll Represents a custom sticker within a guild. public interface ICustomSticker : ISticker, IStickerItem Inherited Members ISticker.Id ISticker.PackId ISticker.Name ISticker.Description ISticker.Tags ISticker.Type ISticker.Format ISticker.IsAvailable ISticker.SortOrder ISticker.GetStickerUrl() Properties AuthorId Gets the users id who uploaded the sticker. ulong? AuthorId { get; } Property Value ulong? Remarks In order to get the author id, the bot needs the MANAGE_EMOJIS_AND_STICKERS permission. Guild Gets the guild that this custom sticker is in. IGuild Guild { get; } Property Value IGuild Methods DeleteAsync(RequestOptions) Deletes the current sticker. Task DeleteAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous deletion operation. ModifyAsync(Action<StickerProperties>, RequestOptions) Modifies this sticker. Task ModifyAsync(Action<StickerProperties> func, RequestOptions options = null) Parameters func Action<StickerProperties> A delegate containing the properties to modify the sticker with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Examples The following example replaces the name of the sticker with kekw. await sticker.ModifyAsync(x => x.Name = \"kekw\"); Remarks This method modifies this sticker with the specified properties. To see an example of this method and what properties are available, please refer to StickerProperties. The bot needs the MANAGE_EMOJIS_AND_STICKERS permission within the guild in order to modify stickers."
  },
  "api/Discord.IDMChannel.html": {
    "href": "api/Discord.IDMChannel.html",
    "title": "Interface IDMChannel | Discord.Net Documentation",
    "keywords": "Interface IDMChannel Namespace Discord Assembly Discord.Net.Core.dll Represents a generic direct-message channel. public interface IDMChannel : IMessageChannel, IPrivateChannel, IChannel, ISnowflakeEntity, IEntity<ulong> Inherited Members IMessageChannel.SendMessageAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.SendFileAsync(string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.SendFileAsync(Stream, string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.SendFileAsync(FileAttachment, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.SendFilesAsync(IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.GetMessageAsync(ulong, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(ulong, Direction, int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions) IMessageChannel.GetPinnedMessagesAsync(RequestOptions) IMessageChannel.DeleteMessageAsync(ulong, RequestOptions) IMessageChannel.DeleteMessageAsync(IMessage, RequestOptions) IMessageChannel.ModifyMessageAsync(ulong, Action<MessageProperties>, RequestOptions) IMessageChannel.TriggerTypingAsync(RequestOptions) IMessageChannel.EnterTypingState(RequestOptions) IPrivateChannel.Recipients IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) ISnowflakeEntity.CreatedAt IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties Recipient Gets the recipient of all messages in this channel. IUser Recipient { get; } Property Value IUser A user object that represents the other user in this channel. Methods CloseAsync(RequestOptions) Closes this private channel, removing it from your channel list. Task CloseAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous close operation."
  },
  "api/Discord.IDeletable.html": {
    "href": "api/Discord.IDeletable.html",
    "title": "Interface IDeletable | Discord.Net Documentation",
    "keywords": "Interface IDeletable Namespace Discord Assembly Discord.Net.Core.dll Determines whether the object is deletable or not. public interface IDeletable Methods DeleteAsync(RequestOptions) Deletes this object and all its children. Task DeleteAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task"
  },
  "api/Discord.IDiscordClient.html": {
    "href": "api/Discord.IDiscordClient.html",
    "title": "Interface IDiscordClient | Discord.Net Documentation",
    "keywords": "Interface IDiscordClient Namespace Discord Assembly Discord.Net.Core.dll Represents a generic Discord client. public interface IDiscordClient : IDisposable, IAsyncDisposable Inherited Members IDisposable.Dispose() IAsyncDisposable.DisposeAsync() Extension Methods DiscordClientExtensions.GetDMChannelAsync(IDiscordClient, ulong) DiscordClientExtensions.GetDMChannelsAsync(IDiscordClient) DiscordClientExtensions.GetGroupChannelAsync(IDiscordClient, ulong) DiscordClientExtensions.GetGroupChannelsAsync(IDiscordClient) DiscordClientExtensions.GetOptimalVoiceRegionAsync(IDiscordClient) DiscordClientExtensions.GetPrivateChannelAsync(IDiscordClient, ulong) Properties ConnectionState Gets the current state of connection. ConnectionState ConnectionState { get; } Property Value ConnectionState CurrentUser Gets the currently logged-in user. ISelfUser CurrentUser { get; } Property Value ISelfUser TokenType Gets the token type of the logged-in user. TokenType TokenType { get; } Property Value TokenType Methods BulkOverwriteGlobalApplicationCommand(ApplicationCommandProperties[], RequestOptions) Bulk overwrites all global application commands. Task<IReadOnlyCollection<IApplicationCommand>> BulkOverwriteGlobalApplicationCommand(ApplicationCommandProperties[] properties, RequestOptions options = null) Parameters properties ApplicationCommandProperties[] A collection of properties to use when creating the commands. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IApplicationCommand>> A task that represents the asynchronous creation operation. The task result contains a collection of application commands that were created. CreateGlobalApplicationCommand(ApplicationCommandProperties, RequestOptions) Creates a global application command. Task<IApplicationCommand> CreateGlobalApplicationCommand(ApplicationCommandProperties properties, RequestOptions options = null) Parameters properties ApplicationCommandProperties The properties to use when creating the command. options RequestOptions The options to be used when sending the request. Returns Task<IApplicationCommand> A task that represents the asynchronous creation operation. The task result contains the created application command. CreateGuildAsync(string, IVoiceRegion, Stream, RequestOptions) Creates a guild for the logged-in user who is in less than 10 active guilds. Task<IGuild> CreateGuildAsync(string name, IVoiceRegion region, Stream jpegIcon = null, RequestOptions options = null) Parameters name string The name of the new guild. region IVoiceRegion The voice region to create the guild with. jpegIcon Stream The icon of the guild. options RequestOptions The options to be used when sending the request. Returns Task<IGuild> A task that represents the asynchronous creation operation. The task result contains the created guild. Remarks This method creates a new guild on behalf of the logged-in user. warning Due to Discord's limitation, this method will only work for users that are in less than 10 guilds. CreateTestEntitlementAsync(ulong, ulong, SubscriptionOwnerType, RequestOptions) Creates a test entitlement to a given SKU for a given guild or user. Task<IEntitlement> CreateTestEntitlementAsync(ulong skuId, ulong ownerId, SubscriptionOwnerType ownerType, RequestOptions options = null) Parameters skuId ulong ownerId ulong ownerType SubscriptionOwnerType options RequestOptions Returns Task<IEntitlement> DeleteTestEntitlementAsync(ulong, RequestOptions) Deletes a currently-active test entitlement. Task DeleteTestEntitlementAsync(ulong entitlementId, RequestOptions options = null) Parameters entitlementId ulong options RequestOptions Returns Task GetApplicationInfoAsync(RequestOptions) Gets a Discord application information for the logged-in user. Task<IApplication> GetApplicationInfoAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IApplication> A task that represents the asynchronous get operation. The task result contains the application information. Remarks This method reflects your application information you submitted when creating a Discord application via the Developer Portal. GetBotGatewayAsync(RequestOptions) Gets the gateway information related to the bot. Task<BotGateway> GetBotGatewayAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<BotGateway> A task that represents the asynchronous get operation. The task result contains a BotGateway that represents the gateway information related to the bot. GetChannelAsync(ulong, CacheMode, RequestOptions) Gets a generic channel. Task<IChannel> GetChannelAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters id ulong The snowflake identifier of the channel (e.g. 381889909113225237). mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IChannel> A task that represents the asynchronous get operation. The task result contains the channel associated with the snowflake identifier; null when the channel cannot be found. Examples var channel = await _client.GetChannelAsync(381889909113225237); if (channel != null && channel is IMessageChannel msgChannel) { await msgChannel.SendMessageAsync($\"{msgChannel} is created at {msgChannel.CreatedAt}\"); } GetConnectionsAsync(RequestOptions) Gets the connections that the user has set up. Task<IReadOnlyCollection<IConnection>> GetConnectionsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IConnection>> A task that represents the asynchronous get operation. The task result contains a read-only collection of connections. GetDMChannelsAsync(CacheMode, RequestOptions) Gets a collection of direct message channels opened in this session. Task<IReadOnlyCollection<IDMChannel>> GetDMChannelsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IDMChannel>> A task that represents the asynchronous get operation. The task result contains a read-only collection of direct-message channels that the user currently partakes in. Remarks This method returns a collection of currently opened direct message channels. warning This method will not return previously opened DM channels outside of the current session! If you have just started the client, this may return an empty collection. GetEntitlementsAsync(int?, ulong?, ulong?, bool, ulong?, ulong?, ulong[], RequestOptions) Returns all entitlements for a given app, active and expired. IAsyncEnumerable<IReadOnlyCollection<IEntitlement>> GetEntitlementsAsync(int? limit = 100, ulong? afterId = null, ulong? beforeId = null, bool excludeEnded = false, ulong? guildId = null, ulong? userId = null, ulong[] skuIds = null, RequestOptions options = null) Parameters limit int? afterId ulong? beforeId ulong? excludeEnded bool guildId ulong? userId ulong? skuIds ulong[] options RequestOptions Returns IAsyncEnumerable<IReadOnlyCollection<IEntitlement>> GetGlobalApplicationCommandAsync(ulong, RequestOptions) Gets a global application command. Task<IApplicationCommand> GetGlobalApplicationCommandAsync(ulong id, RequestOptions options = null) Parameters id ulong The id of the command. options RequestOptions The options to be used when sending the request. Returns Task<IApplicationCommand> A task that represents the asynchronous get operation. The task result contains the application command if found, otherwise null. GetGlobalApplicationCommandsAsync(bool, string, RequestOptions) Gets a collection of all global commands. Task<IReadOnlyCollection<IApplicationCommand>> GetGlobalApplicationCommandsAsync(bool withLocalizations = false, string locale = null, RequestOptions options = null) Parameters withLocalizations bool Whether to include full localization dictionaries in the returned objects, instead of the name localized and description localized fields. locale string The target locale of the localized name and description fields. Sets X-Discord-Locale header, which takes precedence over Accept-Language. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IApplicationCommand>> A task that represents the asynchronous get operation. The task result contains a read-only collection of global application commands. GetGroupChannelsAsync(CacheMode, RequestOptions) Gets a collection of group channels opened in this session. Task<IReadOnlyCollection<IGroupChannel>> GetGroupChannelsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IGroupChannel>> A task that represents the asynchronous get operation. The task result contains a read-only collection of group channels that the user currently partakes in. Remarks This method returns a collection of currently opened group channels. warning This method will not return previously opened group channels outside of the current session! If you have just started the client, this may return an empty collection. GetGuildAsync(ulong, CacheMode, RequestOptions) Gets a guild. Task<IGuild> GetGuildAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters id ulong The guild snowflake identifier. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IGuild> A task that represents the asynchronous get operation. The task result contains the guild associated with the snowflake identifier; null when the guild cannot be found. GetGuildsAsync(CacheMode, RequestOptions) Gets a collection of guilds that the user is currently in. Task<IReadOnlyCollection<IGuild>> GetGuildsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IGuild>> A task that represents the asynchronous get operation. The task result contains a read-only collection of guilds that the current user is in. GetInviteAsync(string, RequestOptions) Gets an invite. Task<IInvite> GetInviteAsync(string inviteId, RequestOptions options = null) Parameters inviteId string The invitation identifier. options RequestOptions The options to be used when sending the request. Returns Task<IInvite> A task that represents the asynchronous get operation. The task result contains the invite information. GetPrivateChannelsAsync(CacheMode, RequestOptions) Gets a collection of private channels opened in this session. Task<IReadOnlyCollection<IPrivateChannel>> GetPrivateChannelsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IPrivateChannel>> A task that represents the asynchronous get operation. The task result contains a read-only collection of private channels that the user currently partakes in. Remarks This method will retrieve all private channels (including direct-message, group channel and such) that are currently opened in this session. warning This method will not return previously opened private channels outside of the current session! If you have just started the client, this may return an empty collection. GetRecommendedShardCountAsync(RequestOptions) Gets the recommended shard count as suggested by Discord. Task<int> GetRecommendedShardCountAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<int> A task that represents the asynchronous get operation. The task result contains an int that represents the number of shards that should be used with this account. GetSKUsAsync(RequestOptions) Returns all SKUs for a given application. Task<IReadOnlyCollection<SKU>> GetSKUsAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task<IReadOnlyCollection<SKU>> GetUserAsync(string, string, RequestOptions) Gets a user. Task<IUser> GetUserAsync(string username, string discriminator, RequestOptions options = null) Parameters username string The name of the user (e.g. Still). discriminator string The discriminator value of the user (e.g. 2876). options RequestOptions The options to be used when sending the request. Returns Task<IUser> A task that represents the asynchronous get operation. The task result contains the user associated with the name and the discriminator; null if the user is not found. Examples var user = await _client.GetUserAsync(\"Still\", \"2876\"); if (user != null) Console.WriteLine($\"{user} is created at {user.CreatedAt}.\"; GetUserAsync(ulong, CacheMode, RequestOptions) Gets a user. Task<IUser> GetUserAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters id ulong The snowflake identifier of the user (e.g. 168693960628371456). mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IUser> A task that represents the asynchronous get operation. The task result contains the user associated with the snowflake identifier; null if the user is not found. Examples var user = await _client.GetUserAsync(168693960628371456); if (user != null) Console.WriteLine($\"{user} is created at {user.CreatedAt}.\"; GetVoiceRegionAsync(string, RequestOptions) Gets a voice region. Task<IVoiceRegion> GetVoiceRegionAsync(string id, RequestOptions options = null) Parameters id string The identifier of the voice region (e.g. eu-central ). options RequestOptions The options to be used when sending the request. Returns Task<IVoiceRegion> A task that represents the asynchronous get operation. The task result contains the voice region associated with the identifier; null if the voice region is not found. GetVoiceRegionsAsync(RequestOptions) Gets a collection of the available voice regions. Task<IReadOnlyCollection<IVoiceRegion>> GetVoiceRegionsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IVoiceRegion>> A task that represents the asynchronous get operation. The task result contains a read-only collection with all of the available voice regions in this session. Examples The following example gets the most optimal voice region from the collection. var regions = await client.GetVoiceRegionsAsync(); var optimalRegion = regions.FirstOrDefault(x => x.IsOptimal); GetWebhookAsync(ulong, RequestOptions) Gets a webhook available. Task<IWebhook> GetWebhookAsync(ulong id, RequestOptions options = null) Parameters id ulong The identifier of the webhook. options RequestOptions The options to be used when sending the request. Returns Task<IWebhook> A task that represents the asynchronous get operation. The task result contains a webhook associated with the identifier; null if the webhook is not found. StartAsync() Starts the connection between Discord and the client.. Task StartAsync() Returns Task A task that represents the asynchronous start operation. Remarks This method will initialize the connection between the client and Discord. important This method will immediately return after it is called, as it will initialize the connection on another thread. StopAsync() Stops the connection between Discord and the client. Task StopAsync() Returns Task A task that represents the asynchronous stop operation."
  },
  "api/Discord.IDiscordInteraction.html": {
    "href": "api/Discord.IDiscordInteraction.html",
    "title": "Interface IDiscordInteraction | Discord.Net Documentation",
    "keywords": "Interface IDiscordInteraction Namespace Discord Assembly Discord.Net.Core.dll Represents a discord interaction. public interface IDiscordInteraction : ISnowflakeEntity, IEntity<ulong> Inherited Members ISnowflakeEntity.CreatedAt Extension Methods IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, InteractionService, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, T, RequestOptions, Action<ModalBuilder>) Properties ApplicationId Gets the ID of the application this interaction is for. ulong ApplicationId { get; } Property Value ulong ChannelId Gets the ID of the channel this interaction was executed in. ulong? ChannelId { get; } Property Value ulong? Remarks This property returns null if the interaction is a REST ping interaction. Data Gets the data sent within this interaction. IDiscordInteractionData Data { get; } Property Value IDiscordInteractionData Entitlements Gets entitlements for the invoking user. IReadOnlyCollection<IEntitlement> Entitlements { get; } Property Value IReadOnlyCollection<IEntitlement> GuildId Gets the ID of the guild this interaction was executed in. ulong? GuildId { get; } Property Value ulong? Remarks This property returns null if the interaction was not executed in a guild. GuildLocale Gets the preferred locale of the guild this interaction was executed in. null if not executed in a guild. string GuildLocale { get; } Property Value string Remarks Non-community guilds (With no locale setting available) will have en-US as the default value sent by Discord. HasResponded Gets whether or not this interaction has been responded to. bool HasResponded { get; } Property Value bool Remarks This property is locally set -- if you're running multiple bots off the same token then this property won't be in sync with them. Id Gets the id of the interaction. ulong Id { get; } Property Value ulong IsDMInteraction Gets whether or not this interaction was executed in a dm channel. bool IsDMInteraction { get; } Property Value bool Token Gets the continuation token for responding to the interaction. string Token { get; } Property Value string Type Gets the type of this IDiscordInteraction. InteractionType Type { get; } Property Value InteractionType User Gets the user who invoked the interaction. IUser User { get; } Property Value IUser UserLocale Gets the preferred locale of the invoking User. string UserLocale { get; } Property Value string Remarks This property returns null if the interaction is a REST ping interaction. Version Gets the version of the interaction, always 1. int Version { get; } Property Value int Methods DeferAsync(bool, RequestOptions) Acknowledges this interaction. Task DeferAsync(bool ephemeral = false, RequestOptions options = null) Parameters ephemeral bool options RequestOptions Returns Task A task that represents the asynchronous operation of deferring the interaction. DeleteOriginalResponseAsync(RequestOptions) Deletes the original response to this interaction. Task DeleteOriginalResponseAsync(RequestOptions options = null) Parameters options RequestOptions The request options for this async request. Returns Task A task that represents an asynchronous deletion operation. FollowupAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. Task<IUserMessage> FollowupAsync(string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<IUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. Task<IUserMessage> FollowupWithFileAsync(FileAttachment attachment, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachment FileAttachment The attachment containing the file and description. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<IUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. Task<IUserMessage> FollowupWithFileAsync(Stream fileStream, string fileName, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters fileStream Stream The file to upload. fileName string The file name of the attachment. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<IUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. Task<IUserMessage> FollowupWithFileAsync(string filePath, string fileName = null, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters filePath string The file to upload. fileName string The file name of the attachment. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<IUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. Task<IUserMessage> FollowupWithFilesAsync(IEnumerable<FileAttachment> attachments, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<IUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. GetOriginalResponseAsync(RequestOptions) Gets the original response for this interaction. Task<IUserMessage> GetOriginalResponseAsync(RequestOptions options = null) Parameters options RequestOptions The request options for this async request. Returns Task<IUserMessage> A IUserMessage that represents the initial response. ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) Edits original response for this interaction. Task<IUserMessage> ModifyOriginalResponseAsync(Action<MessageProperties> func, RequestOptions options = null) Parameters func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The request options for this async request. Returns Task<IUserMessage> A task that represents an asynchronous modification operation. The task result contains the updated message. RespondAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Responds to an Interaction with type ChannelMessageWithSource. Task RespondAsync(string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task A task that represents an asynchronous send operation for delivering the message. RespondWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Responds to this interaction with a file attachment. Task RespondWithFileAsync(FileAttachment attachment, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachment FileAttachment The attachment containing the file and description. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. RespondWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Responds to this interaction with a file attachment. Task RespondWithFileAsync(Stream fileStream, string fileName, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters fileStream Stream The file to upload. fileName string The file name of the attachment. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. RespondWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Responds to this interaction with a file attachment. Task RespondWithFileAsync(string filePath, string fileName = null, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters filePath string The file to upload. fileName string The file name of the attachment. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. RespondWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Responds to this interaction with a collection of file attachments. Task RespondWithFilesAsync(IEnumerable<FileAttachment> attachments, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. RespondWithModalAsync(Modal, RequestOptions) Responds to the interaction with a modal. Task RespondWithModalAsync(Modal modal, RequestOptions options = null) Parameters modal Modal The modal to respond with. options RequestOptions The request options for this async request. Returns Task A task that represents the asynchronous operation of responding to the interaction. RespondWithPremiumRequiredAsync(RequestOptions) Responds to the interaction with an ephemeral message the invoking user, instructing them that whatever they tried to do requires the premium benefits of your app. Task RespondWithPremiumRequiredAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task A task that represents the asynchronous operation of responding to the interaction."
  },
  "api/Discord.IDiscordInteractionData.html": {
    "href": "api/Discord.IDiscordInteractionData.html",
    "title": "Interface IDiscordInteractionData | Discord.Net Documentation",
    "keywords": "Interface IDiscordInteractionData Namespace Discord Assembly Discord.Net.Core.dll Represents an interface used to specify classes that they are a valid data type of a IDiscordInteraction class. public interface IDiscordInteractionData"
  },
  "api/Discord.IEmbed.html": {
    "href": "api/Discord.IEmbed.html",
    "title": "Interface IEmbed | Discord.Net Documentation",
    "keywords": "Interface IEmbed Namespace Discord Assembly Discord.Net.Core.dll Represents a Discord embed object. public interface IEmbed Extension Methods EmbedBuilderExtensions.ToEmbedBuilder(IEmbed) Properties Author Gets the author field of this embed. EmbedAuthor? Author { get; } Property Value EmbedAuthor? The author field of the embed, or null if none is set. Color Gets the color of this embed. Color? Color { get; } Property Value Color? The color of the embed present on the side of the embed, or null if none is set. Description Gets the description of this embed. string Description { get; } Property Value string The description field of the embed. Fields Gets the fields of the embed. ImmutableArray<EmbedField> Fields { get; } Property Value ImmutableArray<EmbedField> An array of the fields of the embed. Footer Gets the footer field of this embed. EmbedFooter? Footer { get; } Property Value EmbedFooter? The author field of the embed, or null if none is set. Image Gets the image of this embed. EmbedImage? Image { get; } Property Value EmbedImage? The image of the embed, or null if none is set. Provider Gets the provider of this embed. EmbedProvider? Provider { get; } Property Value EmbedProvider? The source of the embed, or null if none is set. Thumbnail Gets the thumbnail featured in this embed. EmbedThumbnail? Thumbnail { get; } Property Value EmbedThumbnail? The thumbnail featured in the embed, or null if none is set. Timestamp Gets the timestamp of this embed. DateTimeOffset? Timestamp { get; } Property Value DateTimeOffset? A DateTimeOffset based on the timestamp present at the bottom left of the embed, or null if none is set. Title Gets the title of this embed. string Title { get; } Property Value string The title of the embed. Type Gets the type of this embed. EmbedType Type { get; } Property Value EmbedType The type of the embed. Url Gets the title URL of this embed. string Url { get; } Property Value string A string containing the URL set in a title of the embed. Video Gets the video of this embed. EmbedVideo? Video { get; } Property Value EmbedVideo? The video of the embed, or null if none is set."
  },
  "api/Discord.IEmote.html": {
    "href": "api/Discord.IEmote.html",
    "title": "Interface IEmote | Discord.Net Documentation",
    "keywords": "Interface IEmote Namespace Discord Assembly Discord.Net.Core.dll Represents a general container for any type of emote in a message. public interface IEmote Examples The sample below sends a message and adds an Emoji and a custom Emote to the message. public async Task SendAndReactAsync(ISocketMessageChannel channel) { var message = await channel.SendMessageAsync(\"I am a message.\"); // Creates a Unicode-based emoji based on the Unicode string. // This is effectively the same as new Emoji(\"💕\"). var heartEmoji = new Emoji(\"\\U0001f495\"); // Reacts to the message with the Emoji. await message.AddReactionAsync(heartEmoji); // Parses a custom emote based on the provided Discord emote format. // Please note that this does not guarantee the existence of // the emote. var emote = Emote.Parse(\"<:thonkang:282745590985523200>\"); // Reacts to the message with the Emote. await message.AddReactionAsync(emote); } Result Remarks This interface is often used with reactions. It can represent an unicode-based Emoji, or a custom Emote. Properties Name Gets the display name or Unicode representation of this emote. string Name { get; } Property Value string A string representing the display name or the Unicode representation (e.g. 🤔) of this emote. See Also See Also"
  },
  "api/Discord.IEntitlement.html": {
    "href": "api/Discord.IEntitlement.html",
    "title": "Interface IEntitlement | Discord.Net Documentation",
    "keywords": "Interface IEntitlement Namespace Discord Assembly Discord.Net.Core.dll public interface IEntitlement : ISnowflakeEntity, IEntity<ulong> Inherited Members ISnowflakeEntity.CreatedAt IEntity<ulong>.Id Properties ApplicationId Gets the ID of the parent application. ulong ApplicationId { get; } Property Value ulong EndsAt Gets the end date at which the entitlement is no longer valid. DateTimeOffset? EndsAt { get; } Property Value DateTimeOffset? Remarks null when using test entitlements. GuildId Gets the ID of the guild that is granted access to the entitlement's SKU. ulong? GuildId { get; } Property Value ulong? Remarks null if the entitlement is for a user. IsConsumed Gets whether this entitlement has been consumed. bool IsConsumed { get; } Property Value bool Remarks Not applicable for App Subscriptions. SkuId Gets the ID of the SKU this entitlement is for. ulong SkuId { get; } Property Value ulong StartsAt Gets the start date at which the entitlement is valid. DateTimeOffset? StartsAt { get; } Property Value DateTimeOffset? Remarks null when using test entitlements. Type Gets the type of the entitlement. EntitlementType Type { get; } Property Value EntitlementType UserId Gets the ID of the user that is granted access to the entitlement's SKU. ulong? UserId { get; } Property Value ulong? Remarks null if the entitlement is for a guild."
  },
  "api/Discord.IEntity-1.html": {
    "href": "api/Discord.IEntity-1.html",
    "title": "Interface IEntity<TId> | Discord.Net Documentation",
    "keywords": "Interface IEntity<TId> Namespace Discord Assembly Discord.Net.Core.dll public interface IEntity<TId> where TId : IEquatable<TId> Type Parameters TId Properties Id Gets the unique identifier for this object. TId Id { get; } Property Value TId"
  },
  "api/Discord.IForumChannel.html": {
    "href": "api/Discord.IForumChannel.html",
    "title": "Interface IForumChannel | Discord.Net Documentation",
    "keywords": "Interface IForumChannel Namespace Discord Assembly Discord.Net.Core.dll Represents a forum channel in a guild that can create posts. public interface IForumChannel : IMentionable, INestedChannel, IIntegrationChannel, IGuildChannel, IChannel, ISnowflakeEntity, IEntity<ulong>, IDeletable Inherited Members IMentionable.Mention INestedChannel.CategoryId INestedChannel.GetCategoryAsync(CacheMode, RequestOptions) INestedChannel.SyncPermissionsAsync(RequestOptions) INestedChannel.CreateInviteAsync(int?, int?, bool, bool, RequestOptions) INestedChannel.CreateInviteToApplicationAsync(ulong, int?, int?, bool, bool, RequestOptions) INestedChannel.CreateInviteToApplicationAsync(DefaultApplications, int?, int?, bool, bool, RequestOptions) INestedChannel.CreateInviteToStreamAsync(IUser, int?, int?, bool, bool, RequestOptions) INestedChannel.GetInvitesAsync(RequestOptions) IIntegrationChannel.CreateWebhookAsync(string, Stream, RequestOptions) IIntegrationChannel.GetWebhookAsync(ulong, RequestOptions) IIntegrationChannel.GetWebhooksAsync(RequestOptions) IGuildChannel.Position IGuildChannel.Flags IGuildChannel.Guild IGuildChannel.GuildId IGuildChannel.PermissionOverwrites IGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions) IGuildChannel.GetPermissionOverwrite(IRole) IGuildChannel.GetPermissionOverwrite(IUser) IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions) IGuildChannel.GetUsersAsync(CacheMode, RequestOptions) IGuildChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IChannel.Name ISnowflakeEntity.CreatedAt IEntity<ulong>.Id IDeletable.DeleteAsync(RequestOptions) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties DefaultAutoArchiveDuration Gets the default archive duration for a newly created post. ThreadArchiveDuration DefaultAutoArchiveDuration { get; } Property Value ThreadArchiveDuration DefaultLayout Gets the rule used to display posts in a forum channel. ForumLayout DefaultLayout { get; } Property Value ForumLayout DefaultReactionEmoji Gets the emoji to show in the add reaction button on a thread in a forum channel IEmote DefaultReactionEmoji { get; } Property Value IEmote Remarks If the emoji is Emote only the Id will be populated. Use GetEmoteAsync(ulong, RequestOptions) to get the emoji. DefaultSlowModeInterval Gets the current default slow-mode delay for threads in this forum channel. int DefaultSlowModeInterval { get; } Property Value int An int representing the time in seconds required before the user can send another message; 0 if disabled. DefaultSortOrder Gets the rule used to order posts in forum channels. ForumSortOrder? DefaultSortOrder { get; } Property Value ForumSortOrder? Remarks Defaults to null, which indicates a preferred sort order hasn't been set IsNsfw Gets a value that indicates whether the channel is NSFW. bool IsNsfw { get; } Property Value bool true if the channel has the NSFW flag enabled; otherwise false. Tags Gets a collection of tags inside of this forum channel. IReadOnlyCollection<ForumTag> Tags { get; } Property Value IReadOnlyCollection<ForumTag> ThreadCreationInterval Gets the current rate limit on creating posts in this forum channel. int ThreadCreationInterval { get; } Property Value int An int representing the time in seconds required before the user can send another message; 0 if disabled. Topic Gets the current topic for this text channel. string Topic { get; } Property Value string A string representing the topic set in the channel; null if none is set. Methods CreatePostAsync(string, ThreadArchiveDuration, int?, string, Embed, RequestOptions, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) Creates a new post (thread) within the forum. Task<IThreadChannel> CreatePostAsync(string title, ThreadArchiveDuration archiveDuration = ThreadArchiveDuration.OneDay, int? slowmode = null, string text = null, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None, ForumTag[] tags = null) Parameters title string The title of the post. archiveDuration ThreadArchiveDuration The archive duration of the post. slowmode int? The slowmode for the posts thread. text string The message to be sent. embed Embed The Rich Embed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the message. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds is permitted. tags ForumTag[] An array of ForumTag to be applied to the post. Returns Task<IThreadChannel> A task that represents the asynchronous creation operation. CreatePostWithFileAsync(string, FileAttachment, ThreadArchiveDuration, int?, string, Embed, RequestOptions, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) Creates a new post (thread) within the forum. Task<IThreadChannel> CreatePostWithFileAsync(string title, FileAttachment attachment, ThreadArchiveDuration archiveDuration = ThreadArchiveDuration.OneDay, int? slowmode = null, string text = null, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None, ForumTag[] tags = null) Parameters title string The title of the post. attachment FileAttachment The attachment containing the file and description. archiveDuration ThreadArchiveDuration The archive duration of the post. slowmode int? The slowmode for the posts thread. text string The message to be sent. embed Embed The Rich Embed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds is permitted. tags ForumTag[] An array of ForumTag to be applied to the post. Returns Task<IThreadChannel> A task that represents the asynchronous creation operation. CreatePostWithFileAsync(string, Stream, string, ThreadArchiveDuration, int?, string, Embed, RequestOptions, bool, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) Creates a new post (thread) within the forum. Task<IThreadChannel> CreatePostWithFileAsync(string title, Stream stream, string filename, ThreadArchiveDuration archiveDuration = ThreadArchiveDuration.OneDay, int? slowmode = null, string text = null, Embed embed = null, RequestOptions options = null, bool isSpoiler = false, AllowedMentions allowedMentions = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None, ForumTag[] tags = null) Parameters title string The title of the post. stream Stream The Stream of the file to be sent. filename string The name of the attachment. archiveDuration ThreadArchiveDuration The archive duration of the post. slowmode int? The slowmode for the posts thread. text string The message to be sent. embed Embed The Rich Embed to be sent. options RequestOptions The options to be used when sending the request. isSpoiler bool Whether the message attachment should be hidden as a spoiler. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds is permitted. tags ForumTag[] An array of ForumTag to be applied to the post. Returns Task<IThreadChannel> A task that represents the asynchronous creation operation. CreatePostWithFileAsync(string, string, ThreadArchiveDuration, int?, string, Embed, RequestOptions, bool, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) Creates a new post (thread) within the forum. Task<IThreadChannel> CreatePostWithFileAsync(string title, string filePath, ThreadArchiveDuration archiveDuration = ThreadArchiveDuration.OneDay, int? slowmode = null, string text = null, Embed embed = null, RequestOptions options = null, bool isSpoiler = false, AllowedMentions allowedMentions = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None, ForumTag[] tags = null) Parameters title string The title of the post. filePath string The file path of the file. archiveDuration ThreadArchiveDuration The archive duration of the post. slowmode int? The slowmode for the posts thread. text string The message to be sent. embed Embed The Rich Embed to be sent. options RequestOptions The options to be used when sending the request. isSpoiler bool Whether the message attachment should be hidden as a spoiler. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds is permitted. tags ForumTag[] An array of ForumTag to be applied to the post. Returns Task<IThreadChannel> A task that represents the asynchronous creation operation. CreatePostWithFilesAsync(string, IEnumerable<FileAttachment>, ThreadArchiveDuration, int?, string, Embed, RequestOptions, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) Creates a new post (thread) within the forum. Task<IThreadChannel> CreatePostWithFilesAsync(string title, IEnumerable<FileAttachment> attachments, ThreadArchiveDuration archiveDuration = ThreadArchiveDuration.OneDay, int? slowmode = null, string text = null, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None, ForumTag[] tags = null) Parameters title string The title of the post. attachments IEnumerable<FileAttachment> A collection of attachments to upload. archiveDuration ThreadArchiveDuration The archive duration of the post. slowmode int? The slowmode for the posts thread. text string The message to be sent. embed Embed The Rich Embed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] An array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds is permitted. tags ForumTag[] An array of ForumTag to be applied to the post. Returns Task<IThreadChannel> A task that represents the asynchronous creation operation. GetActiveThreadsAsync(RequestOptions) Gets a collection of active threads within this forum channel. Task<IReadOnlyCollection<IThreadChannel>> GetActiveThreadsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IThreadChannel>> A task that represents an asynchronous get operation for retrieving the threads. The task result contains a collection of active threads. GetJoinedPrivateArchivedThreadsAsync(int?, DateTimeOffset?, RequestOptions) Gets a collection of privately archived threads that the current bot has joined within this forum channel. Task<IReadOnlyCollection<IThreadChannel>> GetJoinedPrivateArchivedThreadsAsync(int? limit = null, DateTimeOffset? before = null, RequestOptions options = null) Parameters limit int? The optional limit of how many to get. before DateTimeOffset? The optional date to return threads created before this timestamp. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IThreadChannel>> A task that represents an asynchronous get operation for retrieving the threads. The task result contains a collection of privately archived threads. GetPrivateArchivedThreadsAsync(int?, DateTimeOffset?, RequestOptions) Gets a collection of privately archived threads within this forum channel. Task<IReadOnlyCollection<IThreadChannel>> GetPrivateArchivedThreadsAsync(int? limit = null, DateTimeOffset? before = null, RequestOptions options = null) Parameters limit int? The optional limit of how many to get. before DateTimeOffset? The optional date to return threads created before this timestamp. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IThreadChannel>> A task that represents an asynchronous get operation for retrieving the threads. The task result contains a collection of privately archived threads. Remarks The bot requires the ManageThreads permission in order to execute this request. GetPublicArchivedThreadsAsync(int?, DateTimeOffset?, RequestOptions) Gets a collection of publicly archived threads within this forum channel. Task<IReadOnlyCollection<IThreadChannel>> GetPublicArchivedThreadsAsync(int? limit = null, DateTimeOffset? before = null, RequestOptions options = null) Parameters limit int? The optional limit of how many to get. before DateTimeOffset? The optional date to return threads created before this timestamp. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IThreadChannel>> A task that represents an asynchronous get operation for retrieving the threads. The task result contains a collection of publicly archived threads. ModifyAsync(Action<ForumChannelProperties>, RequestOptions) Modifies this forum channel. Task ModifyAsync(Action<ForumChannelProperties> func, RequestOptions options = null) Parameters func Action<ForumChannelProperties> The delegate containing the properties to modify the channel with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies the current forum channel with the specified properties. To see an example of this method and what properties are available, please refer to ForumChannelProperties."
  },
  "api/Discord.IForumTag.html": {
    "href": "api/Discord.IForumTag.html",
    "title": "Interface IForumTag | Discord.Net Documentation",
    "keywords": "Interface IForumTag Namespace Discord Assembly Discord.Net.Core.dll Represents a Discord forum tag public interface IForumTag Properties Emoji Gets the emoji of the tag or null if none is set. IEmote? Emoji { get; } Property Value IEmote Remarks If the emoji is Emote only the Id will be populated. Use GetEmoteAsync(ulong, RequestOptions) to get the emoji. Id Gets the Id of the tag. ulong? Id { get; } Property Value ulong? Remarks This property may be null if the object is ForumTagProperties. IsModerated Gets whether this tag can only be added to or removed from threads by a member with the ManageThreads permission bool IsModerated { get; } Property Value bool Name Gets the name of the tag. string Name { get; } Property Value string"
  },
  "api/Discord.IGroupChannel.html": {
    "href": "api/Discord.IGroupChannel.html",
    "title": "Interface IGroupChannel | Discord.Net Documentation",
    "keywords": "Interface IGroupChannel Namespace Discord Assembly Discord.Net.Core.dll Represents a generic private group channel. public interface IGroupChannel : IMessageChannel, IPrivateChannel, IAudioChannel, IChannel, ISnowflakeEntity, IEntity<ulong> Inherited Members IMessageChannel.SendMessageAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.SendFileAsync(string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.SendFileAsync(Stream, string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.SendFileAsync(FileAttachment, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.SendFilesAsync(IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.GetMessageAsync(ulong, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(ulong, Direction, int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions) IMessageChannel.GetPinnedMessagesAsync(RequestOptions) IMessageChannel.DeleteMessageAsync(ulong, RequestOptions) IMessageChannel.DeleteMessageAsync(IMessage, RequestOptions) IMessageChannel.ModifyMessageAsync(ulong, Action<MessageProperties>, RequestOptions) IMessageChannel.TriggerTypingAsync(RequestOptions) IMessageChannel.EnterTypingState(RequestOptions) IPrivateChannel.Recipients IAudioChannel.RTCRegion IAudioChannel.ConnectAsync(bool, bool, bool) IAudioChannel.DisconnectAsync() IAudioChannel.ModifyAsync(Action<AudioChannelProperties>, RequestOptions) IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) ISnowflakeEntity.CreatedAt IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) Methods LeaveAsync(RequestOptions) Leaves this group. Task LeaveAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous leave operation."
  },
  "api/Discord.IGroupUser.html": {
    "href": "api/Discord.IGroupUser.html",
    "title": "Interface IGroupUser | Discord.Net Documentation",
    "keywords": "Interface IGroupUser Namespace Discord Assembly Discord.Net.Core.dll Represents a Discord user that is in a group. public interface IGroupUser : IUser, ISnowflakeEntity, IEntity<ulong>, IMentionable, IPresence, IVoiceState Inherited Members IUser.AvatarId IUser.GetAvatarUrl(ImageFormat, ushort) IUser.GetDefaultAvatarUrl() IUser.GetDisplayAvatarUrl(ImageFormat, ushort) IUser.Discriminator IUser.DiscriminatorValue IUser.IsBot IUser.IsWebhook IUser.Username IUser.PublicFlags IUser.GlobalName IUser.AvatarDecorationHash IUser.AvatarDecorationSkuId IUser.CreateDMChannelAsync(RequestOptions) IUser.GetAvatarDecorationUrl() ISnowflakeEntity.CreatedAt IEntity<ulong>.Id IMentionable.Mention IPresence.Status IPresence.ActiveClients IPresence.Activities IVoiceState.IsDeafened IVoiceState.IsMuted IVoiceState.IsSelfDeafened IVoiceState.IsSelfMuted IVoiceState.IsSuppressed IVoiceState.VoiceChannel IVoiceState.VoiceSessionId IVoiceState.IsStreaming IVoiceState.IsVideoing IVoiceState.RequestToSpeakTimestamp Extension Methods UserExtensions.SendFileAsync(IUser, FileAttachment, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, Stream, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFilesAsync(IUser, IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendMessageAsync(IUser, string, bool, Embed, RequestOptions, AllowedMentions, MessageComponent, Embed[])"
  },
  "api/Discord.IGuild.html": {
    "href": "api/Discord.IGuild.html",
    "title": "Interface IGuild | Discord.Net Documentation",
    "keywords": "Interface IGuild Namespace Discord Assembly Discord.Net.Core.dll Represents a generic guild/server. public interface IGuild : IDeletable, ISnowflakeEntity, IEntity<ulong> Inherited Members IDeletable.DeleteAsync(RequestOptions) ISnowflakeEntity.CreatedAt IEntity<ulong>.Id Extension Methods GuildExtensions.GetGuildBoostMessagesEnabled(IGuild) GuildExtensions.GetGuildSetupTipMessagesEnabled(IGuild) GuildExtensions.GetGuildWelcomeMessageReplyEnabled(IGuild) GuildExtensions.GetWelcomeMessagesEnabled(IGuild) Properties AFKChannelId Gets the ID of the AFK voice channel for this guild. ulong? AFKChannelId { get; } Property Value ulong? A ulong representing the snowflake identifier of the AFK voice channel; null if none is set. AFKTimeout Gets the amount of time (in seconds) a user must be inactive in a voice channel for until they are automatically moved to the AFK voice channel. int AFKTimeout { get; } Property Value int An int representing the amount of time in seconds for a user to be marked as inactive and moved into the AFK voice channel. ApplicationId Gets the application ID of the guild creator if it is bot-created. ulong? ApplicationId { get; } Property Value ulong? A ulong representing the snowflake identifier of the application ID that created this guild, or null if it was not bot-created. ApproximateMemberCount Gets the approximate number of members in this guild. int? ApproximateMemberCount { get; } Property Value int? The approximate number of members in this guild. Remarks Only available when getting a guild via REST when with_counts is true. ApproximatePresenceCount Gets the approximate number of non-offline members in this guild. int? ApproximatePresenceCount { get; } Property Value int? The approximate number of non-offline members in this guild. Remarks Only available when getting a guild via REST when with_counts is true. AudioClient Gets the IAudioClient currently associated with this guild. IAudioClient AudioClient { get; } Property Value IAudioClient An IAudioClient currently associated with this guild. Available Determines if this guild is currently connected and ready to be used. bool Available { get; } Property Value bool true if this guild is currently connected and ready to be used; otherwise false. Remarks note This property only applies to a WebSocket-based client. This boolean is used to determine if the guild is currently connected to the WebSocket and is ready to be used/accessed. BannerId Gets the identifier for this guilds banner image. string BannerId { get; } Property Value string An identifier for the banner image; null if none is set. BannerUrl Gets the URL of this guild's banner image. string BannerUrl { get; } Property Value string A URL pointing to the guild's banner image; null if none is set. DefaultMessageNotifications Gets the default message notifications for users who haven't explicitly set their notification settings. DefaultMessageNotifications DefaultMessageNotifications { get; } Property Value DefaultMessageNotifications Description Gets the description for the guild. string Description { get; } Property Value string The description for the guild; null if none is set. DiscoverySplashId Gets the ID of this guild's discovery splash image. string DiscoverySplashId { get; } Property Value string An identifier for the discovery splash image; null if none is set. DiscoverySplashUrl Gets the URL of this guild's discovery splash image. string DiscoverySplashUrl { get; } Property Value string A URL pointing to the guild's discovery splash image; null if none is set. Emotes Gets a collection of all custom emotes for this guild. IReadOnlyCollection<GuildEmote> Emotes { get; } Property Value IReadOnlyCollection<GuildEmote> A read-only collection of all custom emotes for this guild. EveryoneRole Gets the built-in role containing all users in this guild. IRole EveryoneRole { get; } Property Value IRole A role object that represents an @everyone role in this guild. ExplicitContentFilter Gets the level of content filtering applied to user's content in a Guild. ExplicitContentFilterLevel ExplicitContentFilter { get; } Property Value ExplicitContentFilterLevel The level of explicit content filtering. Features Gets the features for this guild. GuildFeatures Features { get; } Property Value GuildFeatures A flags enum containing all the features for the guild. IconId Gets the ID of this guild's icon. string IconId { get; } Property Value string An identifier for the splash image; null if none is set. IconUrl Gets the URL of this guild's icon. string IconUrl { get; } Property Value string A URL pointing to the guild's icon; null if none is set. IncidentsData Gets the incidents data for this guild. GuildIncidentsData IncidentsData { get; } Property Value GuildIncidentsData InventorySettings Get the inventory settings on the guild. null if not available in the guild. GuildInventorySettings? InventorySettings { get; } Property Value GuildInventorySettings? IsBoostProgressBarEnabled Gets whether the guild has the boost progress bar enabled. bool IsBoostProgressBarEnabled { get; } Property Value bool true if the boost progress bar is enabled; otherwise false. IsWidgetEnabled Gets a value that indicates whether this guild has the widget enabled. bool IsWidgetEnabled { get; } Property Value bool true if this guild has a widget enabled; otherwise false. MaxBitrate Gets the max bitrate for voice channels in this guild. int MaxBitrate { get; } Property Value int A int representing the maximum bitrate value allowed by Discord in this guild. MaxMembers Gets the maximum number of members for the guild. int? MaxMembers { get; } Property Value int? The maximum number of members for the guild. MaxPresences Gets the maximum number of presences for the guild. int? MaxPresences { get; } Property Value int? The maximum number of presences for the guild. MaxStageVideoChannelUsers Gets the maximum amount of users in a stage video channel. int? MaxStageVideoChannelUsers { get; } Property Value int? The maximum amount of users in a stage video channel. MaxUploadLimit Gets the upload limit in bytes for this guild. This number is dependent on the guild's boost status. ulong MaxUploadLimit { get; } Property Value ulong MaxVideoChannelUsers Gets the maximum amount of users in a video channel. int? MaxVideoChannelUsers { get; } Property Value int? The maximum amount of users in a video channel. MfaLevel Gets the level of Multi-Factor Authentication requirements a user must fulfill before being allowed to perform administrative actions in this guild. MfaLevel MfaLevel { get; } Property Value MfaLevel The level of MFA requirement. Name Gets the name of this guild. string Name { get; } Property Value string A string containing the name of this guild. NsfwLevel Gets the NSFW level of this guild. NsfwLevel NsfwLevel { get; } Property Value NsfwLevel The NSFW level of this guild. OwnerId Gets the ID of the user that owns this guild. ulong OwnerId { get; } Property Value ulong A ulong representing the snowflake identifier of the user that owns this guild. PreferredCulture Gets the preferred culture of this guild. CultureInfo PreferredCulture { get; } Property Value CultureInfo The preferred culture information of this guild. PreferredLocale Gets the preferred locale of this guild in IETF BCP 47 language tag format. string PreferredLocale { get; } Property Value string The preferred locale of the guild in IETF BCP 47 language tag format. PremiumSubscriptionCount Gets the number of premium subscribers of this guild. int PremiumSubscriptionCount { get; } Property Value int The number of premium subscribers of this guild. Remarks This is the number of users who have boosted this guild. PremiumTier Gets the tier of guild boosting in this guild. PremiumTier PremiumTier { get; } Property Value PremiumTier The tier of guild boosting in this guild. PublicUpdatesChannelId Gets the ID of the channel where admins and moderators of Community guilds receive notices from Discord. ulong? PublicUpdatesChannelId { get; } Property Value ulong? A ulong representing the snowflake identifier of the channel where admins and moderators of Community guilds receive notices from Discord; null if none is set. Roles Gets a collection of all roles in this guild. IReadOnlyCollection<IRole> Roles { get; } Property Value IReadOnlyCollection<IRole> A read-only collection of roles found within this guild. RulesChannelId Gets the ID of the channel with the rules. ulong? RulesChannelId { get; } Property Value ulong? A ulong representing the snowflake identifier of the channel that contains the rules; null if none is set. SafetyAlertsChannelId Gets the ID of the channel assigned to the safety alerts channel of this guild. ulong? SafetyAlertsChannelId { get; } Property Value ulong? A ulong representing the snowflake identifier of the safety alerts channel; null if none is set. SplashId Gets the ID of this guild's splash image. string SplashId { get; } Property Value string An identifier for the splash image; null if none is set. SplashUrl Gets the URL of this guild's splash image. string SplashUrl { get; } Property Value string A URL pointing to the guild's splash image; null if none is set. Stickers Gets a collection of all custom stickers for this guild. IReadOnlyCollection<ICustomSticker> Stickers { get; } Property Value IReadOnlyCollection<ICustomSticker> A read-only collection of all custom stickers for this guild. SystemChannelFlags Gets the flags for the types of system channel messages that are disabled. SystemChannelMessageDeny SystemChannelFlags { get; } Property Value SystemChannelMessageDeny The flags for the types of system channel messages that are disabled. SystemChannelId Gets the ID of the channel where randomized welcome messages are sent. ulong? SystemChannelId { get; } Property Value ulong? A ulong representing the snowflake identifier of the system channel where randomized welcome messages are sent; null if none is set. VanityURLCode Gets the code for this guild's vanity invite URL. string VanityURLCode { get; } Property Value string A string containing the vanity invite code for this guild; null if none is set. VerificationLevel Gets the level of requirements a user must fulfill before being allowed to post messages in this guild. VerificationLevel VerificationLevel { get; } Property Value VerificationLevel The level of requirements. VoiceRegionId Gets the ID of the region hosting this guild's voice channels. string VoiceRegionId { get; } Property Value string A string containing the identifier for the voice region that this guild uses (e.g. eu-central). WidgetChannelId Gets the ID of the channel assigned to the widget of this guild. ulong? WidgetChannelId { get; } Property Value ulong? A ulong representing the snowflake identifier of the channel assigned to the widget found within the widget settings of this guild; null if none is set. Methods AddBanAsync(IUser, int, string, RequestOptions) Bans the user from this guild and optionally prunes their recent messages. Task AddBanAsync(IUser user, int pruneDays = 0, string reason = null, RequestOptions options = null) Parameters user IUser The user to ban. pruneDays int The number of days to remove messages from this user for, and this number must be between [0, 7]. reason string The reason of the ban to be written in the audit log. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous add operation for the ban. Exceptions ArgumentException pruneDays is not between 0 to 7. AddBanAsync(ulong, int, string, RequestOptions) Bans the user from this guild and optionally prunes their recent messages. Task AddBanAsync(ulong userId, int pruneDays = 0, string reason = null, RequestOptions options = null) Parameters userId ulong The snowflake ID of the user to ban. pruneDays int The number of days to remove messages from this user for, and this number must be between [0, 7]. reason string The reason of the ban to be written in the audit log. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous add operation for the ban. Exceptions ArgumentException pruneDays is not between 0 to 7. AddGuildUserAsync(ulong, string, Action<AddGuildUserProperties>, RequestOptions) Adds a user to this guild. Task<IGuildUser> AddGuildUserAsync(ulong userId, string accessToken, Action<AddGuildUserProperties> func = null, RequestOptions options = null) Parameters userId ulong The snowflake identifier of the user. accessToken string The OAuth2 access token for the user, requested with the guilds.join scope. func Action<AddGuildUserProperties> The delegate containing the properties to be applied to the user upon being added to the guild. options RequestOptions The options to be used when sending the request. Returns Task<IGuildUser> A guild user associated with the specified userId; null if the user is already in the guild. Remarks This method requires you have an OAuth2 access token for the user, requested with the guilds.join scope, and that the bot have the MANAGE_INVITES permission in the guild. BulkOverwriteApplicationCommandsAsync(ApplicationCommandProperties[], RequestOptions) Overwrites the application commands within this guild. Task<IReadOnlyCollection<IApplicationCommand>> BulkOverwriteApplicationCommandsAsync(ApplicationCommandProperties[] properties, RequestOptions options = null) Parameters properties ApplicationCommandProperties[] A collection of properties to use when creating the commands. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IApplicationCommand>> A task that represents the asynchronous creation operation. The task result contains a collection of commands that was created. CreateApplicationCommandAsync(ApplicationCommandProperties, RequestOptions) Creates an application command within this guild. Task<IApplicationCommand> CreateApplicationCommandAsync(ApplicationCommandProperties properties, RequestOptions options = null) Parameters properties ApplicationCommandProperties The properties to use when creating the command. options RequestOptions The options to be used when sending the request. Returns Task<IApplicationCommand> A task that represents the asynchronous creation operation. The task result contains the command that was created. CreateAutoModRuleAsync(Action<AutoModRuleProperties>, RequestOptions) Creates a new auto moderation rule. Task<IAutoModRule> CreateAutoModRuleAsync(Action<AutoModRuleProperties> props, RequestOptions options = null) Parameters props Action<AutoModRuleProperties> options RequestOptions Returns Task<IAutoModRule> A task that represents the asynchronous creation operation. The task result contains the created IAutoModRule. CreateCategoryAsync(string, Action<GuildChannelProperties>, RequestOptions) Creates a new channel category in this guild. Task<ICategoryChannel> CreateCategoryAsync(string name, Action<GuildChannelProperties> func = null, RequestOptions options = null) Parameters name string The new name for the category. func Action<GuildChannelProperties> The delegate containing the properties to be applied to the channel upon its creation. options RequestOptions The options to be used when sending the request. Returns Task<ICategoryChannel> A task that represents the asynchronous creation operation. The task result contains the newly created category channel. CreateEmoteAsync(string, Image, Optional<IEnumerable<IRole>>, RequestOptions) Creates a new GuildEmote in this guild. Task<GuildEmote> CreateEmoteAsync(string name, Image image, Optional<IEnumerable<IRole>> roles = default, RequestOptions options = null) Parameters name string The name of the guild emote. image Image The image of the new emote. roles Optional<IEnumerable<IRole>> The roles to limit the emote usage to. options RequestOptions The options to be used when sending the request. Returns Task<GuildEmote> A task that represents the asynchronous creation operation. The task result contains the created emote. CreateEventAsync(string, DateTimeOffset, GuildScheduledEventType, GuildScheduledEventPrivacyLevel, string, DateTimeOffset?, ulong?, string, Image?, RequestOptions) Creates an event within this guild. Task<IGuildScheduledEvent> CreateEventAsync(string name, DateTimeOffset startTime, GuildScheduledEventType type, GuildScheduledEventPrivacyLevel privacyLevel = GuildScheduledEventPrivacyLevel.Private, string description = null, DateTimeOffset? endTime = null, ulong? channelId = null, string location = null, Image? coverImage = null, RequestOptions options = null) Parameters name string The name of the event. startTime DateTimeOffset The start time of the event. type GuildScheduledEventType The type of the event. privacyLevel GuildScheduledEventPrivacyLevel The privacy level of the event. description string The description of the event. endTime DateTimeOffset? The end time of the event. channelId ulong? The channel id of the event. The event must have a type of Stage or Voice in order to use this property. location string The location of the event; links are supported coverImage Image? The optional banner image for the event. options RequestOptions The options to be used when sending the request. Returns Task<IGuildScheduledEvent> A task that represents the asynchronous create operation. CreateForumChannelAsync(string, Action<ForumChannelProperties>, RequestOptions) Creates a new channel forum in this guild. Task<IForumChannel> CreateForumChannelAsync(string name, Action<ForumChannelProperties> func = null, RequestOptions options = null) Parameters name string The new name for the forum. func Action<ForumChannelProperties> The delegate containing the properties to be applied to the channel upon its creation. options RequestOptions The options to be used when sending the request. Returns Task<IForumChannel> A task that represents the asynchronous creation operation. The task result contains the newly created forum channel. CreateMediaChannelAsync(string, Action<ForumChannelProperties>, RequestOptions) Creates a new media channel in this guild. Task<IMediaChannel> CreateMediaChannelAsync(string name, Action<ForumChannelProperties> func = null, RequestOptions options = null) Parameters name string The new name for the media channel. func Action<ForumChannelProperties> The delegate containing the properties to be applied to the channel upon its creation. options RequestOptions The options to be used when sending the request. Returns Task<IMediaChannel> A task that represents the asynchronous creation operation. The task result contains the newly created forum channel. CreateRoleAsync(string, GuildPermissions?, Color?, bool, RequestOptions) Creates a new role with the provided name. Task<IRole> CreateRoleAsync(string name, GuildPermissions? permissions = null, Color? color = null, bool isHoisted = false, RequestOptions options = null) Parameters name string The new name for the role. permissions GuildPermissions? The guild permission that the role should possess. color Color? The color of the role. isHoisted bool Whether the role is separated from others on the sidebar. options RequestOptions The options to be used when sending the request. Returns Task<IRole> A task that represents the asynchronous creation operation. The task result contains the newly created role. CreateRoleAsync(string, GuildPermissions?, Color?, bool, bool, RequestOptions, Image?, Emoji) Creates a new role with the provided name. Task<IRole> CreateRoleAsync(string name, GuildPermissions? permissions = null, Color? color = null, bool isHoisted = false, bool isMentionable = false, RequestOptions options = null, Image? icon = null, Emoji emoji = null) Parameters name string The new name for the role. permissions GuildPermissions? The guild permission that the role should possess. color Color? The color of the role. isHoisted bool Whether the role is separated from others on the sidebar. isMentionable bool Whether the role can be mentioned. options RequestOptions The options to be used when sending the request. icon Image? The icon for the role. emoji Emoji The unicode emoji to be used as an icon for the role. Returns Task<IRole> A task that represents the asynchronous creation operation. The task result contains the newly created role. CreateStageChannelAsync(string, Action<VoiceChannelProperties>, RequestOptions) Creates a new stage channel in this guild. Task<IStageChannel> CreateStageChannelAsync(string name, Action<VoiceChannelProperties> func = null, RequestOptions options = null) Parameters name string The new name for the stage channel. func Action<VoiceChannelProperties> The delegate containing the properties to be applied to the channel upon its creation. options RequestOptions The options to be used when sending the request. Returns Task<IStageChannel> A task that represents the asynchronous creation operation. The task result contains the newly created stage channel. CreateStickerAsync(string, Image, IEnumerable<string>, string, RequestOptions) Creates a new sticker in this guild. Task<ICustomSticker> CreateStickerAsync(string name, Image image, IEnumerable<string> tags, string description = null, RequestOptions options = null) Parameters name string The name of the sticker. image Image The image of the new emote. tags IEnumerable<string> The tags of the sticker. description string The description of the sticker. options RequestOptions The options to be used when sending the request. Returns Task<ICustomSticker> A task that represents the asynchronous creation operation. The task result contains the created sticker. CreateStickerAsync(string, Stream, string, IEnumerable<string>, string, RequestOptions) Creates a new sticker in this guild. Task<ICustomSticker> CreateStickerAsync(string name, Stream stream, string filename, IEnumerable<string> tags, string description = null, RequestOptions options = null) Parameters name string The name of the sticker. stream Stream The stream containing the file data. filename string The name of the file with the extension, ex: image.png. tags IEnumerable<string> The tags of the sticker. description string The description of the sticker. options RequestOptions The options to be used when sending the request. Returns Task<ICustomSticker> A task that represents the asynchronous creation operation. The task result contains the created sticker. CreateStickerAsync(string, string, IEnumerable<string>, string, RequestOptions) Creates a new sticker in this guild. Task<ICustomSticker> CreateStickerAsync(string name, string path, IEnumerable<string> tags, string description = null, RequestOptions options = null) Parameters name string The name of the sticker. path string The path of the file to upload. tags IEnumerable<string> The tags of the sticker. description string The description of the sticker. options RequestOptions The options to be used when sending the request. Returns Task<ICustomSticker> A task that represents the asynchronous creation operation. The task result contains the created sticker. CreateTextChannelAsync(string, Action<TextChannelProperties>, RequestOptions) Creates a new text channel in this guild. Task<ITextChannel> CreateTextChannelAsync(string name, Action<TextChannelProperties> func = null, RequestOptions options = null) Parameters name string The new name for the text channel. func Action<TextChannelProperties> The delegate containing the properties to be applied to the channel upon its creation. options RequestOptions The options to be used when sending the request. Returns Task<ITextChannel> A task that represents the asynchronous creation operation. The task result contains the newly created text channel. Examples The following example creates a new text channel under an existing category named Wumpus with a set topic. public async Task CreateTextChannelUnderWumpus(IGuild guild, string name) { var categories = await guild.GetCategoriesAsync(); var targetCategory = categories.FirstOrDefault(x => x.Name == \"wumpus\"); if (targetCategory == null) return; await guild.CreateTextChannelAsync(name, x => { x.CategoryId = targetCategory.Id; x.Topic = $\"This channel was created at {DateTimeOffset.UtcNow}.\"; }); } CreateVoiceChannelAsync(string, Action<VoiceChannelProperties>, RequestOptions) Creates a new voice channel in this guild. Task<IVoiceChannel> CreateVoiceChannelAsync(string name, Action<VoiceChannelProperties> func = null, RequestOptions options = null) Parameters name string The new name for the voice channel. func Action<VoiceChannelProperties> The delegate containing the properties to be applied to the channel upon its creation. options RequestOptions The options to be used when sending the request. Returns Task<IVoiceChannel> A task that represents the asynchronous creation operation. The task result contains the newly created voice channel. DeleteEmoteAsync(GuildEmote, RequestOptions) Deletes an existing GuildEmote from this guild. Task DeleteEmoteAsync(GuildEmote emote, RequestOptions options = null) Parameters emote GuildEmote The emote to delete. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. DeleteIntegrationAsync(ulong, RequestOptions) Deletes an integration. Task DeleteIntegrationAsync(ulong id, RequestOptions options = null) Parameters id ulong The id for the integration. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. DeleteStickerAsync(ICustomSticker, RequestOptions) Deletes a sticker within this guild. Task DeleteStickerAsync(ICustomSticker sticker, RequestOptions options = null) Parameters sticker ICustomSticker The sticker to delete. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. DisconnectAsync(IGuildUser) Disconnects the user from its current voice channel. Task DisconnectAsync(IGuildUser user) Parameters user IGuildUser The user to disconnect. Returns Task A task that represents the asynchronous operation for disconnecting a user. DownloadUsersAsync() Downloads all users for this guild if the current list is incomplete. Task DownloadUsersAsync() Returns Task A task that represents the asynchronous download operation. Remarks This method downloads all users found within this guild through the Gateway and caches them. GetAFKChannelAsync(CacheMode, RequestOptions) Gets the AFK voice channel in this guild. Task<IVoiceChannel> GetAFKChannelAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IVoiceChannel> A task that represents the asynchronous get operation. The task result contains the voice channel that the AFK users will be moved to after they have idled for too long; null if none is set. GetApplicationCommandAsync(ulong, CacheMode, RequestOptions) Gets an application command within this guild with the specified id. Task<IApplicationCommand> GetApplicationCommandAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters id ulong The id of the application command to get. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IApplicationCommand> A ValueTask that represents the asynchronous get operation. The task result contains a IApplicationCommand if found, otherwise null. GetApplicationCommandsAsync(bool, string, RequestOptions) Gets this guilds application commands. Task<IReadOnlyCollection<IApplicationCommand>> GetApplicationCommandsAsync(bool withLocalizations = false, string locale = null, RequestOptions options = null) Parameters withLocalizations bool Whether to include full localization dictionaries in the returned objects, instead of the localized name and description fields. locale string The target locale of the localized name and description fields. Sets the X-Discord-Locale header, which takes precedence over Accept-Language. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IApplicationCommand>> A task that represents the asynchronous get operation. The task result contains a read-only collection of application commands found within the guild. GetAuditLogsAsync(int, CacheMode, RequestOptions, ulong?, ulong?, ActionType?, ulong?) Gets the specified number of audit log entries for this guild. Task<IReadOnlyCollection<IAuditLogEntry>> GetAuditLogsAsync(int limit = 100, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null, ulong? beforeId = null, ulong? userId = null, ActionType? actionType = null, ulong? afterId = null) Parameters limit int The number of audit log entries to fetch. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. beforeId ulong? The audit log entry ID to get entries before. userId ulong? The user ID to filter entries for. actionType ActionType? The type of actions to filter. afterId ulong? The audit log entry ID to get entries after. Returns Task<IReadOnlyCollection<IAuditLogEntry>> A task that represents the asynchronous get operation. The task result contains a read-only collection of the requested audit log entries. GetAutoModRuleAsync(ulong, RequestOptions) Gets a single rule configured in a guild. Returns null if the rule was not found. Task<IAutoModRule> GetAutoModRuleAsync(ulong ruleId, RequestOptions options = null) Parameters ruleId ulong options RequestOptions Returns Task<IAutoModRule> A task that represents the asynchronous creation operation. The task result contains a IAutoModRule. GetAutoModRulesAsync(RequestOptions) Get a list of all rules currently configured for the guild. Task<IAutoModRule[]> GetAutoModRulesAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task<IAutoModRule[]> A task that represents the asynchronous creation operation. The task result contains a collection of IAutoModRule. GetBanAsync(IUser, RequestOptions) Gets a ban object for a banned user. Task<IBan> GetBanAsync(IUser user, RequestOptions options = null) Parameters user IUser The banned user. options RequestOptions The options to be used when sending the request. Returns Task<IBan> A task that represents the asynchronous get operation. The task result contains a ban object, which contains the user information and the reason for the ban; null if the ban entry cannot be found. GetBanAsync(ulong, RequestOptions) Gets a ban object for a banned user. Task<IBan> GetBanAsync(ulong userId, RequestOptions options = null) Parameters userId ulong The snowflake identifier for the banned user. options RequestOptions The options to be used when sending the request. Returns Task<IBan> A task that represents the asynchronous get operation. The task result contains a ban object, which contains the user information and the reason for the ban; null if the ban entry cannot be found. GetBansAsync(IUser, Direction, int, RequestOptions) Gets limit amount of bans from the guild starting at the provided fromUser ordered by user ID. IAsyncEnumerable<IReadOnlyCollection<IBan>> GetBansAsync(IUser fromUser, Direction dir, int limit = 1000, RequestOptions options = null) Parameters fromUser IUser The user to start to get bans from. dir Direction The direction of the bans to be gotten. limit int The number of bans to get. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IBan>> A paged collection of bans. Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the individual messages as a collection. warning Do not fetch too many bans at once! This may cause unwanted preemptive rate limit or even actual rate limit, causing your bot to freeze! GetBansAsync(int, RequestOptions) Gets limit amount of bans from the guild ordered by user ID. IAsyncEnumerable<IReadOnlyCollection<IBan>> GetBansAsync(int limit = 1000, RequestOptions options = null) Parameters limit int The amount of bans to get from the guild. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IBan>> A paged collection of bans. Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the individual messages as a collection. warning Do not fetch too many bans at once! This may cause unwanted preemptive rate limit or even actual rate limit, causing your bot to freeze! GetBansAsync(ulong, Direction, int, RequestOptions) Gets limit amount of bans from the guild starting at the provided fromUserId ordered by user ID. IAsyncEnumerable<IReadOnlyCollection<IBan>> GetBansAsync(ulong fromUserId, Direction dir, int limit = 1000, RequestOptions options = null) Parameters fromUserId ulong The ID of the user to start to get bans from. dir Direction The direction of the bans to be gotten. limit int The number of bans to get. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IBan>> A paged collection of bans. Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the individual messages as a collection. warning Do not fetch too many bans at once! This may cause unwanted preemptive rate limit or even actual rate limit, causing your bot to freeze! GetCategoriesAsync(CacheMode, RequestOptions) Gets a collection of all category channels in this guild. Task<IReadOnlyCollection<ICategoryChannel>> GetCategoriesAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<ICategoryChannel>> A task that represents the asynchronous get operation. The task result contains a read-only collection of category channels found within this guild. GetChannelAsync(ulong, CacheMode, RequestOptions) Gets a channel in this guild. Task<IGuildChannel> GetChannelAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters id ulong The snowflake identifier for the channel. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IGuildChannel> A task that represents the asynchronous get operation. The task result contains the generic channel associated with the specified id; null if none is found. GetChannelsAsync(CacheMode, RequestOptions) Gets a collection of all channels in this guild. Task<IReadOnlyCollection<IGuildChannel>> GetChannelsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IGuildChannel>> A task that represents the asynchronous get operation. The task result contains a read-only collection of generic channels found within this guild. GetCurrentUserAsync(CacheMode, RequestOptions) Gets the current user for this guild. Task<IGuildUser> GetCurrentUserAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IGuildUser> A task that represents the asynchronous get operation. The task result contains the currently logged-in user within this guild. GetDefaultChannelAsync(CacheMode, RequestOptions) Gets the first viewable text channel in this guild. Task<ITextChannel> GetDefaultChannelAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<ITextChannel> A task that represents the asynchronous get operation. The task result contains the first viewable text channel in this guild; null if none is found. GetEmoteAsync(ulong, RequestOptions) Gets a specific emote from this guild. Task<GuildEmote> GetEmoteAsync(ulong id, RequestOptions options = null) Parameters id ulong The snowflake identifier for the guild emote. options RequestOptions The options to be used when sending the request. Returns Task<GuildEmote> A task that represents the asynchronous get operation. The task result contains the emote found with the specified id; null if none is found. GetEmotesAsync(RequestOptions) Gets a collection of emotes from this guild. Task<IReadOnlyCollection<GuildEmote>> GetEmotesAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<GuildEmote>> A task that represents the asynchronous get operation. The task result contains a read-only collection of emotes found within the guild. GetEventAsync(ulong, RequestOptions) Gets a event within this guild. Task<IGuildScheduledEvent> GetEventAsync(ulong id, RequestOptions options = null) Parameters id ulong The id of the event. options RequestOptions The options to be used when sending the request. Returns Task<IGuildScheduledEvent> A task that represents the asynchronous get operation. GetEventsAsync(RequestOptions) Gets a collection of events within this guild. Task<IReadOnlyCollection<IGuildScheduledEvent>> GetEventsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IGuildScheduledEvent>> A task that represents the asynchronous get operation. GetForumChannelAsync(ulong, CacheMode, RequestOptions) Gets a forum channel in this guild. Task<IForumChannel> GetForumChannelAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters id ulong The snowflake identifier for the stage channel. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IForumChannel> A task that represents the asynchronous get operation. The task result contains the stage channel associated with the specified id; null if none is found. GetForumChannelsAsync(CacheMode, RequestOptions) Gets a collection of all forum channels in this guild. Task<IReadOnlyCollection<IForumChannel>> GetForumChannelsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IForumChannel>> A task that represents the asynchronous get operation. The task result contains a read-only collection of forum channels found within this guild. GetIntegrationsAsync(RequestOptions) Gets a collection of all the integrations this guild contains. Task<IReadOnlyCollection<IIntegration>> GetIntegrationsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IIntegration>> A task that represents the asynchronous get operation. The task result contains a read-only collection of integrations the guild can has. GetInvitesAsync(RequestOptions) Gets a collection of all invites in this guild. Task<IReadOnlyCollection<IInviteMetadata>> GetInvitesAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IInviteMetadata>> A task that represents the asynchronous get operation. The task result contains a read-only collection of invite metadata, each representing information for an invite found within this guild. GetMediaChannelAsync(ulong, CacheMode, RequestOptions) Gets a forum channel in this guild. Task<IMediaChannel> GetMediaChannelAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters id ulong The snowflake identifier for the stage channel. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IMediaChannel> A task that represents the asynchronous get operation. The task result contains the stage channel associated with the specified id; null if none is found. GetMediaChannelsAsync(CacheMode, RequestOptions) Gets a collection of all forum channels in this guild. Task<IReadOnlyCollection<IMediaChannel>> GetMediaChannelsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IMediaChannel>> A task that represents the asynchronous get operation. The task result contains a read-only collection of media channels found within this guild. GetOnboardingAsync(RequestOptions) Gets the onboarding object configured for the guild. Task<IGuildOnboarding> GetOnboardingAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task<IGuildOnboarding> A task that represents the asynchronous creation operation. The task result contains the created IGuildOnboarding. GetOwnerAsync(CacheMode, RequestOptions) Gets the owner of this guild. Task<IGuildUser> GetOwnerAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IGuildUser> A task that represents the asynchronous get operation. The task result contains the owner of this guild. GetPublicUpdatesChannelAsync(CacheMode, RequestOptions) Gets the text channel where admins and moderators of Community guilds receive notices from Discord. Task<ITextChannel> GetPublicUpdatesChannelAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<ITextChannel> A task that represents the asynchronous get operation. The task result contains the text channel where admins and moderators of Community guilds receive notices from Discord; null if none is set. GetRole(ulong) Gets a role in this guild. IRole GetRole(ulong id) Parameters id ulong The snowflake identifier for the role. Returns IRole A role that is associated with the specified id; null if none is found. GetRulesChannelAsync(CacheMode, RequestOptions) Gets the text channel where Community guilds can display rules and/or guidelines. Task<ITextChannel> GetRulesChannelAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<ITextChannel> A task that represents the asynchronous get operation. The task result contains the text channel where Community guilds can display rules and/or guidelines; null if none is set. GetStageChannelAsync(ulong, CacheMode, RequestOptions) Gets a stage channel in this guild. Task<IStageChannel> GetStageChannelAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters id ulong The snowflake identifier for the stage channel. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IStageChannel> A task that represents the asynchronous get operation. The task result contains the stage channel associated with the specified id; null if none is found. GetStageChannelsAsync(CacheMode, RequestOptions) Gets a collection of all stage channels in this guild. Task<IReadOnlyCollection<IStageChannel>> GetStageChannelsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IStageChannel>> A task that represents the asynchronous get operation. The task result contains a read-only collection of stage channels found within this guild. GetStickerAsync(ulong, CacheMode, RequestOptions) Gets a specific sticker within this guild. Task<ICustomSticker> GetStickerAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters id ulong The id of the sticker to get. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<ICustomSticker> A task that represents the asynchronous get operation. The task result contains the sticker found with the specified id; null if none is found. GetStickersAsync(CacheMode, RequestOptions) Gets a collection of all stickers within this guild. Task<IReadOnlyCollection<ICustomSticker>> GetStickersAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<ICustomSticker>> A task that represents the asynchronous get operation. The task result contains a read-only collection of stickers found within the guild. GetSystemChannelAsync(CacheMode, RequestOptions) Gets the system channel where randomized welcome messages are sent in this guild. Task<ITextChannel> GetSystemChannelAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<ITextChannel> A task that represents the asynchronous get operation. The task result contains the text channel where randomized welcome messages will be sent to; null if none is set. GetTextChannelAsync(ulong, CacheMode, RequestOptions) Gets a text channel in this guild. Task<ITextChannel> GetTextChannelAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters id ulong The snowflake identifier for the text channel. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<ITextChannel> A task that represents the asynchronous get operation. The task result contains the text channel associated with the specified id; null if none is found. GetTextChannelsAsync(CacheMode, RequestOptions) Gets a collection of all text channels in this guild. Task<IReadOnlyCollection<ITextChannel>> GetTextChannelsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<ITextChannel>> A task that represents the asynchronous get operation. The task result contains a read-only collection of message channels found within this guild. GetThreadChannelAsync(ulong, CacheMode, RequestOptions) Gets a thread channel within this guild. Task<IThreadChannel> GetThreadChannelAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters id ulong The id of the thread channel. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IThreadChannel> A task that represents the asynchronous get operation. The task result contains the thread channel. GetThreadChannelsAsync(CacheMode, RequestOptions) Gets a collection of all thread channels in this guild. Task<IReadOnlyCollection<IThreadChannel>> GetThreadChannelsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IThreadChannel>> A task that represents the asynchronous get operation. The task result contains a read-only collection of thread channels found within this guild. GetUserAsync(ulong, CacheMode, RequestOptions) Gets a user from this guild. Task<IGuildUser> GetUserAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters id ulong The snowflake identifier of the user. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IGuildUser> A task that represents the asynchronous get operation. The task result contains the guild user associated with the specified id; null if none is found. Remarks This method retrieves a user found within this guild. note This may return null in the WebSocket implementation due to incomplete user collection in large guilds. GetUsersAsync(CacheMode, RequestOptions) Gets a collection of all users in this guild. Task<IReadOnlyCollection<IGuildUser>> GetUsersAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IGuildUser>> A task that represents the asynchronous get operation. The task result contains a collection of guild users found within this guild. Remarks This method retrieves all users found within this guild. note This may return an incomplete collection in the WebSocket implementation due to how Discord does not send a complete user list for large guilds. GetVanityInviteAsync(RequestOptions) Gets the vanity invite URL of this guild. Task<IInviteMetadata> GetVanityInviteAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IInviteMetadata> A task that represents the asynchronous get operation. The task result contains the partial metadata of the vanity invite found within this guild; null if none is found. GetVoiceChannelAsync(ulong, CacheMode, RequestOptions) Gets a voice channel in this guild. Task<IVoiceChannel> GetVoiceChannelAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters id ulong The snowflake identifier for the voice channel. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IVoiceChannel> A task that represents the asynchronous get operation. The task result contains the voice channel associated with the specified id; null if none is found. GetVoiceChannelsAsync(CacheMode, RequestOptions) Gets a collection of all voice channels in this guild. Task<IReadOnlyCollection<IVoiceChannel>> GetVoiceChannelsAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IVoiceChannel>> A task that represents the asynchronous get operation. The task result contains a read-only collection of voice channels found within this guild. GetVoiceRegionsAsync(RequestOptions) Gets a collection of all the voice regions this guild can access. Task<IReadOnlyCollection<IVoiceRegion>> GetVoiceRegionsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IVoiceRegion>> A task that represents the asynchronous get operation. The task result contains a read-only collection of voice regions the guild can access. GetWebhookAsync(ulong, RequestOptions) Gets a webhook found within this guild. Task<IWebhook> GetWebhookAsync(ulong id, RequestOptions options = null) Parameters id ulong The identifier for the webhook. options RequestOptions The options to be used when sending the request. Returns Task<IWebhook> A task that represents the asynchronous get operation. The task result contains the webhook with the specified id; null if none is found. GetWebhooksAsync(RequestOptions) Gets a collection of all webhook from this guild. Task<IReadOnlyCollection<IWebhook>> GetWebhooksAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IWebhook>> A task that represents the asynchronous get operation. The task result contains a read-only collection of webhooks found within the guild. GetWelcomeScreenAsync(RequestOptions) Gets the welcome screen of the guild. Returns null if the welcome channel is not set. Task<WelcomeScreen> GetWelcomeScreenAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task<WelcomeScreen> A task that represents the asynchronous creation operation. The task result contains a WelcomeScreen. GetWidgetChannelAsync(CacheMode, RequestOptions) Gets the widget channel (i.e. the channel set in the guild's widget settings) in this guild. Task<IGuildChannel> GetWidgetChannelAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IGuildChannel> A task that represents the asynchronous get operation. The task result contains the widget channel set within the server's widget settings; null if none is set. LeaveAsync(RequestOptions) Leaves this guild. Task LeaveAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous leave operation. Remarks This method will make the currently logged-in user leave the guild. note If the user is the owner of this guild, use DeleteAsync(RequestOptions) instead. ModifyAsync(Action<GuildProperties>, RequestOptions) Modifies this guild. Task ModifyAsync(Action<GuildProperties> func, RequestOptions options = null) Parameters func Action<GuildProperties> The delegate containing the properties to modify the guild with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. ModifyEmoteAsync(GuildEmote, Action<EmoteProperties>, RequestOptions) Modifies an existing GuildEmote in this guild. Task<GuildEmote> ModifyEmoteAsync(GuildEmote emote, Action<EmoteProperties> func, RequestOptions options = null) Parameters emote GuildEmote The emote to be modified. func Action<EmoteProperties> The delegate containing the properties to modify the emote with. options RequestOptions The options to be used when sending the request. Returns Task<GuildEmote> A task that represents the asynchronous modification operation. The task result contains the modified emote. ModifyIncidentActionsAsync(Action<GuildIncidentsDataProperties>, RequestOptions) Modifies the incident actions of the guild. Task<GuildIncidentsData> ModifyIncidentActionsAsync(Action<GuildIncidentsDataProperties> props, RequestOptions options = null) Parameters props Action<GuildIncidentsDataProperties> options RequestOptions Returns Task<GuildIncidentsData> A task that represents the asynchronous creation operation. The task result contains the modified IncidentsData. ModifyOnboardingAsync(Action<GuildOnboardingProperties>, RequestOptions) Modifies the onboarding object configured for the guild. Task<IGuildOnboarding> ModifyOnboardingAsync(Action<GuildOnboardingProperties> props, RequestOptions options = null) Parameters props Action<GuildOnboardingProperties> options RequestOptions Returns Task<IGuildOnboarding> A task that represents the asynchronous creation operation. The task result contains the modified IGuildOnboarding. ModifyWelcomeScreenAsync(bool, WelcomeScreenChannelProperties[], string, RequestOptions) Modifies the welcome screen of the guild. Returns null if welcome screen is removed. Task<WelcomeScreen> ModifyWelcomeScreenAsync(bool enabled, WelcomeScreenChannelProperties[] channels, string description = null, RequestOptions options = null) Parameters enabled bool channels WelcomeScreenChannelProperties[] description string options RequestOptions Returns Task<WelcomeScreen> A task that represents the asynchronous creation operation. The task result contains a WelcomeScreen. ModifyWidgetAsync(Action<GuildWidgetProperties>, RequestOptions) Modifies this guild's widget. Task ModifyWidgetAsync(Action<GuildWidgetProperties> func, RequestOptions options = null) Parameters func Action<GuildWidgetProperties> The delegate containing the properties to modify the guild widget with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. MoveAsync(IGuildUser, IVoiceChannel) Moves the user to the voice channel. Task MoveAsync(IGuildUser user, IVoiceChannel targetChannel) Parameters user IGuildUser The user to move. targetChannel IVoiceChannel the channel where the user gets moved to. Returns Task A task that represents the asynchronous operation for moving a user. PruneUsersAsync(int, bool, RequestOptions, IEnumerable<ulong>) Prunes inactive users. Task<int> PruneUsersAsync(int days = 30, bool simulate = false, RequestOptions options = null, IEnumerable<ulong> includeRoleIds = null) Parameters days int The number of days required for the users to be kicked. simulate bool Whether this prune action is a simulation. options RequestOptions The options to be used when sending the request. includeRoleIds IEnumerable<ulong> An array of role IDs to be included in the prune of users who do not have any additional roles. Returns Task<int> A task that represents the asynchronous prune operation. The task result contains the number of users to be or has been removed from this guild. Remarks This method removes all users that have not logged on in the provided number of days. If simulate is true, this method will only return the number of users that would be removed without kicking the users. RemoveBanAsync(IUser, RequestOptions) Unbans the user if they are currently banned. Task RemoveBanAsync(IUser user, RequestOptions options = null) Parameters user IUser The user to be unbanned. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation for the ban. RemoveBanAsync(ulong, RequestOptions) Unbans the user if they are currently banned. Task RemoveBanAsync(ulong userId, RequestOptions options = null) Parameters userId ulong The snowflake identifier of the user to be unbanned. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation for the ban. ReorderChannelsAsync(IEnumerable<ReorderChannelProperties>, RequestOptions) Bulk-modifies the order of channels in this guild. Task ReorderChannelsAsync(IEnumerable<ReorderChannelProperties> args, RequestOptions options = null) Parameters args IEnumerable<ReorderChannelProperties> The properties used to modify the channel positions with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous reorder operation. ReorderRolesAsync(IEnumerable<ReorderRoleProperties>, RequestOptions) Bulk-modifies the order of roles in this guild. Task ReorderRolesAsync(IEnumerable<ReorderRoleProperties> args, RequestOptions options = null) Parameters args IEnumerable<ReorderRoleProperties> The properties used to modify the role positions with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous reorder operation. SearchUsersAsync(string, int, CacheMode, RequestOptions) Gets a collection of users in this guild that the name or nickname starts with the provided string at query. Task<IReadOnlyCollection<IGuildUser>> SearchUsersAsync(string query, int limit = 1000, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters query string The partial name or nickname to search. limit int The maximum number of users to be gotten. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IGuildUser>> A task that represents the asynchronous get operation. The task result contains a collection of guild users that the name or nickname starts with the provided string at query. Remarks The limit can not be higher than MaxUsersPerBatch."
  },
  "api/Discord.IGuildChannel.html": {
    "href": "api/Discord.IGuildChannel.html",
    "title": "Interface IGuildChannel | Discord.Net Documentation",
    "keywords": "Interface IGuildChannel Namespace Discord Assembly Discord.Net.Core.dll Represents a generic guild channel. public interface IGuildChannel : IChannel, ISnowflakeEntity, IEntity<ulong>, IDeletable Inherited Members IChannel.Name ISnowflakeEntity.CreatedAt IEntity<ulong>.Id IDeletable.DeleteAsync(RequestOptions) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties Flags Gets the flags related to this channel. ChannelFlags Flags { get; } Property Value ChannelFlags A channel's flags, if any is associated. Remarks This value is determined by bitwise OR-ing ChannelFlags values together. See Also ITextChannel IVoiceChannel ICategoryChannel Guild Gets the guild associated with this channel. IGuild Guild { get; } Property Value IGuild A guild object that this channel belongs to. See Also ITextChannel IVoiceChannel ICategoryChannel GuildId Gets the guild ID associated with this channel. ulong GuildId { get; } Property Value ulong An ulong representing the guild snowflake identifier for the guild that this channel belongs to. See Also ITextChannel IVoiceChannel ICategoryChannel PermissionOverwrites Gets a collection of permission overwrites for this channel. IReadOnlyCollection<Overwrite> PermissionOverwrites { get; } Property Value IReadOnlyCollection<Overwrite> A collection of overwrites associated with this channel. See Also ITextChannel IVoiceChannel ICategoryChannel Position Gets the position of this channel. int Position { get; } Property Value int An int representing the position of this channel in the guild's channel list relative to others of the same type. See Also ITextChannel IVoiceChannel ICategoryChannel Methods AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions) Adds or updates the permission overwrite for the given role. Task AddPermissionOverwriteAsync(IRole role, OverwritePermissions permissions, RequestOptions options = null) Parameters role IRole The role to add the overwrite to. permissions OverwritePermissions The overwrite to add to the role. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous permission operation for adding the specified permissions to the channel. Examples The following example fetches a role via GetRole(ulong) and a channel via GetChannelAsync(ulong, CacheMode, RequestOptions). Next, it checks if an overwrite had already been set via GetPermissionOverwrite(IRole); if not, it denies the role from sending any messages to the channel. public async Task MuteRoleAsync(IRole role, IGuildChannel channel) { if (role == null) throw new ArgumentNullException(nameof(role)); if (channel == null) throw new ArgumentNullException(nameof(channel)); // Fetches the previous overwrite and bail if one is found var previousOverwrite = channel.GetPermissionOverwrite(role); if (previousOverwrite.HasValue && previousOverwrite.Value.SendMessages == PermValue.Deny) throw new InvalidOperationException($\"Role {role.Name} had already been muted in this channel.\"); // Creates a new OverwritePermissions with send message set to deny and pass it into the method await channel.AddPermissionOverwriteAsync(role, new OverwritePermissions(sendMessages: PermValue.Deny)); } See Also ITextChannel IVoiceChannel ICategoryChannel AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions) Adds or updates the permission overwrite for the given user. Task AddPermissionOverwriteAsync(IUser user, OverwritePermissions permissions, RequestOptions options = null) Parameters user IUser The user to add the overwrite to. permissions OverwritePermissions The overwrite to add to the user. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous permission operation for adding the specified permissions to the channel. Examples The following example fetches a user via GetUserAsync(ulong, CacheMode, RequestOptions) and a channel via GetChannelAsync(ulong, CacheMode, RequestOptions). Next, it checks if an overwrite had already been set via GetPermissionOverwrite(IUser); if not, it denies the user from sending any messages to the channel. public async Task MuteUserAsync(IGuildUser user, IGuildChannel channel) { if (user == null) throw new ArgumentNullException(nameof(user)); if (channel == null) throw new ArgumentNullException(nameof(channel)); // Fetches the previous overwrite and bail if one is found var previousOverwrite = channel.GetPermissionOverwrite(user); if (previousOverwrite.HasValue && previousOverwrite.Value.SendMessages == PermValue.Deny) throw new InvalidOperationException($\"User {user.Username} had already been muted in this channel.\"); // Creates a new OverwritePermissions with send message set to deny and pass it into the method await channel.AddPermissionOverwriteAsync(user, new OverwritePermissions(sendMessages: PermValue.Deny)); } See Also ITextChannel IVoiceChannel ICategoryChannel GetPermissionOverwrite(IRole) Gets the permission overwrite for a specific role. OverwritePermissions? GetPermissionOverwrite(IRole role) Parameters role IRole The role to get the overwrite from. Returns OverwritePermissions? An overwrite object for the targeted role; null if none is set. See Also ITextChannel IVoiceChannel ICategoryChannel GetPermissionOverwrite(IUser) Gets the permission overwrite for a specific user. OverwritePermissions? GetPermissionOverwrite(IUser user) Parameters user IUser The user to get the overwrite from. Returns OverwritePermissions? An overwrite object for the targeted user; null if none is set. See Also ITextChannel IVoiceChannel ICategoryChannel GetUserAsync(ulong, CacheMode, RequestOptions) Gets a user in this channel. Task<IGuildUser> GetUserAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters id ulong The snowflake identifier of the user. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IGuildUser> A task representing the asynchronous get operation. The task result contains a guild user object that represents the user; null if none is found. See Also ITextChannel IVoiceChannel ICategoryChannel GetUsersAsync(CacheMode, RequestOptions) Gets a collection of users that are able to view the channel or are currently in this channel. IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> GetUsersAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> Paged collection of users. Remarks This method follows the same behavior as described in GetUsersAsync(CacheMode, RequestOptions). Please visit its documentation for more details on this method. See Also ITextChannel IVoiceChannel ICategoryChannel ModifyAsync(Action<GuildChannelProperties>, RequestOptions) Modifies this guild channel. Task ModifyAsync(Action<GuildChannelProperties> func, RequestOptions options = null) Parameters func Action<GuildChannelProperties> The delegate containing the properties to modify the channel with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies the current guild channel with the specified properties. To see an example of this method and what properties are available, please refer to GuildChannelProperties. See Also ITextChannel IVoiceChannel ICategoryChannel RemovePermissionOverwriteAsync(IRole, RequestOptions) Removes the permission overwrite for the given role, if one exists. Task RemovePermissionOverwriteAsync(IRole role, RequestOptions options = null) Parameters role IRole The role to remove the overwrite from. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel. See Also ITextChannel IVoiceChannel ICategoryChannel RemovePermissionOverwriteAsync(IUser, RequestOptions) Removes the permission overwrite for the given user, if one exists. Task RemovePermissionOverwriteAsync(IUser user, RequestOptions options = null) Parameters user IUser The user to remove the overwrite from. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel. See Also ITextChannel IVoiceChannel ICategoryChannel See Also ITextChannel IVoiceChannel ICategoryChannel"
  },
  "api/Discord.IGuildOnboarding.html": {
    "href": "api/Discord.IGuildOnboarding.html",
    "title": "Interface IGuildOnboarding | Discord.Net Documentation",
    "keywords": "Interface IGuildOnboarding Namespace Discord Assembly Discord.Net.Core.dll Represents the guild onboarding flow. public interface IGuildOnboarding Extension Methods GuildOnboardingExtensions.ToProperties(IGuildOnboarding) Properties DefaultChannelIds Gets IDs of channels that members get opted into automatically. IReadOnlyCollection<ulong> DefaultChannelIds { get; } Property Value IReadOnlyCollection<ulong> Guild Gets the guild this onboarding is part of. IGuild Guild { get; } Property Value IGuild GuildId Gets the ID of the guild this onboarding is part of. ulong GuildId { get; } Property Value ulong IsBelowRequirements Gets whether the server does not meet requirements to enable guild onboarding. bool IsBelowRequirements { get; } Property Value bool IsEnabled Gets whether onboarding is enabled in the guild. bool IsEnabled { get; } Property Value bool Mode Gets the current mode of onboarding. GuildOnboardingMode Mode { get; } Property Value GuildOnboardingMode Prompts Gets prompts shown during onboarding and in customize community. IReadOnlyCollection<IGuildOnboardingPrompt> Prompts { get; } Property Value IReadOnlyCollection<IGuildOnboardingPrompt> Methods ModifyAsync(Action<GuildOnboardingProperties>, RequestOptions) Modifies the onboarding object. Task ModifyAsync(Action<GuildOnboardingProperties> props, RequestOptions options = null) Parameters props Action<GuildOnboardingProperties> options RequestOptions Returns Task"
  },
  "api/Discord.IGuildOnboardingPrompt.html": {
    "href": "api/Discord.IGuildOnboardingPrompt.html",
    "title": "Interface IGuildOnboardingPrompt | Discord.Net Documentation",
    "keywords": "Interface IGuildOnboardingPrompt Namespace Discord Assembly Discord.Net.Core.dll Represents the guild onboarding prompt. public interface IGuildOnboardingPrompt : ISnowflakeEntity, IEntity<ulong> Inherited Members ISnowflakeEntity.CreatedAt IEntity<ulong>.Id Extension Methods GuildOnboardingExtensions.ToProperties(IGuildOnboardingPrompt) Properties IsInOnboarding Indicates whether the prompt is present in the onboarding flow. If false, the prompt will only appear in the Channels and Roles tab. bool IsInOnboarding { get; } Property Value bool IsRequired Indicates whether the prompt is required before a user completes the onboarding flow. bool IsRequired { get; } Property Value bool IsSingleSelect Indicates whether users are limited to selecting one option for the prompt. bool IsSingleSelect { get; } Property Value bool Options Gets options available within the prompt. IReadOnlyCollection<IGuildOnboardingPromptOption> Options { get; } Property Value IReadOnlyCollection<IGuildOnboardingPromptOption> Title Gets the title of the prompt. string Title { get; } Property Value string Type Gets the type of the prompt. GuildOnboardingPromptType Type { get; } Property Value GuildOnboardingPromptType"
  },
  "api/Discord.IGuildOnboardingPromptOption.html": {
    "href": "api/Discord.IGuildOnboardingPromptOption.html",
    "title": "Interface IGuildOnboardingPromptOption | Discord.Net Documentation",
    "keywords": "Interface IGuildOnboardingPromptOption Namespace Discord Assembly Discord.Net.Core.dll Represents the guild onboarding prompt option. public interface IGuildOnboardingPromptOption : ISnowflakeEntity, IEntity<ulong> Inherited Members ISnowflakeEntity.CreatedAt IEntity<ulong>.Id Extension Methods GuildOnboardingExtensions.ToProperties(IGuildOnboardingPromptOption) Properties ChannelIds Gets IDs of channels a member is added to when the option is selected. IReadOnlyCollection<ulong> ChannelIds { get; } Property Value IReadOnlyCollection<ulong> Description Gets the description of the option. null if none is set. string Description { get; } Property Value string Emoji Gets the emoji of the option. null if none is set. IEmote Emoji { get; } Property Value IEmote RoleIds Gets IDs of roles assigned to a member when the option is selected. IReadOnlyCollection<ulong> RoleIds { get; } Property Value IReadOnlyCollection<ulong> Title Gets the title of the option. string Title { get; } Property Value string"
  },
  "api/Discord.IGuildScheduledEvent.html": {
    "href": "api/Discord.IGuildScheduledEvent.html",
    "title": "Interface IGuildScheduledEvent | Discord.Net Documentation",
    "keywords": "Interface IGuildScheduledEvent Namespace Discord Assembly Discord.Net.Core.dll Represents a generic guild scheduled event. public interface IGuildScheduledEvent : IEntity<ulong> Inherited Members IEntity<ulong>.Id Properties ChannelId Gets the optional channel id where this event will be hosted. ulong? ChannelId { get; } Property Value ulong? CoverImageId Gets the banner asset id of the event. string CoverImageId { get; } Property Value string Creator Gets the user who created the event. IUser Creator { get; } Property Value IUser Description Gets the description of the event. string Description { get; } Property Value string Remarks This field is null when the event doesn't have a description. EndTime Gets the optional end time of the event. DateTimeOffset? EndTime { get; } Property Value DateTimeOffset? EntityId Gets the optional entity id of the event. The \"entity\" of the event can be a stage instance event as is separate from ChannelId. ulong? EntityId { get; } Property Value ulong? Guild Gets the guild this event is scheduled in. IGuild Guild { get; } Property Value IGuild GuildId Gets the id of the guild this event is scheduled in. ulong GuildId { get; } Property Value ulong Location Gets the location of the event if the Type is external. string Location { get; } Property Value string Name Gets the name of the event. string Name { get; } Property Value string PrivacyLevel Gets the privacy level of the event. GuildScheduledEventPrivacyLevel PrivacyLevel { get; } Property Value GuildScheduledEventPrivacyLevel StartTime Gets the start time of the event. DateTimeOffset StartTime { get; } Property Value DateTimeOffset Status Gets the status of the event. GuildScheduledEventStatus Status { get; } Property Value GuildScheduledEventStatus Type Gets the type of the event. GuildScheduledEventType Type { get; } Property Value GuildScheduledEventType UserCount Gets the user count of the event. int? UserCount { get; } Property Value int? Methods DeleteAsync(RequestOptions) Deletes the current event. Task DeleteAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous delete operation. EndAsync(RequestOptions) Ends or cancels the event. Task EndAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous end operation. GetCoverImageUrl(ImageFormat, ushort) Gets this events banner image url. string GetCoverImageUrl(ImageFormat format = ImageFormat.Auto, ushort size = 1024) Parameters format ImageFormat The format to return. size ushort The size of the image to return in. This can be any power of two between 16 and 2048. Returns string The cover images url. GetUsersAsync(RequestOptions) Gets a collection of N users interested in the event. IAsyncEnumerable<IReadOnlyCollection<IUser>> GetUsersAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IUser>> Paged collection of users. Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the individual messages as a collection. This method will attempt to fetch all users that are interested in the event. The library will attempt to split up the requests according to and MaxGuildEventUsersPerBatch. In other words, if there are 300 users, and the MaxGuildEventUsersPerBatch constant is 100, the request will be split into 3 individual requests; thus returning 3 individual asynchronous responses, hence the need of flattening. GetUsersAsync(ulong, Direction, int, RequestOptions) Gets a collection of N users interested in the event. IAsyncEnumerable<IReadOnlyCollection<IUser>> GetUsersAsync(ulong fromUserId, Direction dir, int limit = 100, RequestOptions options = null) Parameters fromUserId ulong The ID of the starting user to get the users from. dir Direction The direction of the users to be gotten from. limit int The numbers of users to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IUser>> Paged collection of users. Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the individual users as a collection. warning Do not fetch too many users at once! This may cause unwanted preemptive rate limit or even actual rate limit, causing your bot to freeze! This method will attempt to fetch the number of users specified under limit around the user fromUserId depending on the dir. The library will attempt to split up the requests according to your limit and MaxGuildEventUsersPerBatch. In other words, should the user request 500 users, and the MaxGuildEventUsersPerBatch constant is 100, the request will be split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need of flattening. ModifyAsync(Action<GuildScheduledEventsProperties>, RequestOptions) Modifies the guild event. Task ModifyAsync(Action<GuildScheduledEventsProperties> func, RequestOptions options = null) Parameters func Action<GuildScheduledEventsProperties> The delegate containing the properties to modify the event with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. StartAsync(RequestOptions) Starts the event. Task StartAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous start operation."
  },
  "api/Discord.IGuildUser.html": {
    "href": "api/Discord.IGuildUser.html",
    "title": "Interface IGuildUser | Discord.Net Documentation",
    "keywords": "Interface IGuildUser Namespace Discord Assembly Discord.Net.Core.dll Represents a generic guild user. public interface IGuildUser : IUser, ISnowflakeEntity, IEntity<ulong>, IMentionable, IPresence, IVoiceState Inherited Members IUser.AvatarId IUser.GetAvatarUrl(ImageFormat, ushort) IUser.GetDefaultAvatarUrl() IUser.GetDisplayAvatarUrl(ImageFormat, ushort) IUser.Discriminator IUser.DiscriminatorValue IUser.IsBot IUser.IsWebhook IUser.Username IUser.PublicFlags IUser.GlobalName IUser.AvatarDecorationHash IUser.AvatarDecorationSkuId IUser.CreateDMChannelAsync(RequestOptions) IUser.GetAvatarDecorationUrl() ISnowflakeEntity.CreatedAt IEntity<ulong>.Id IMentionable.Mention IPresence.Status IPresence.ActiveClients IPresence.Activities IVoiceState.IsDeafened IVoiceState.IsMuted IVoiceState.IsSelfDeafened IVoiceState.IsSelfMuted IVoiceState.IsSuppressed IVoiceState.VoiceChannel IVoiceState.VoiceSessionId IVoiceState.IsStreaming IVoiceState.IsVideoing IVoiceState.RequestToSpeakTimestamp Extension Methods UserExtensions.BanAsync(IGuildUser, int, string, RequestOptions) UserExtensions.SendFileAsync(IUser, FileAttachment, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, Stream, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFilesAsync(IUser, IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendMessageAsync(IUser, string, bool, Embed, RequestOptions, AllowedMentions, MessageComponent, Embed[]) Properties DisplayAvatarId Gets the displayed avatar for this user. string DisplayAvatarId { get; } Property Value string The users displayed avatar hash. If the user does not have a guild avatar, this will be the regular avatar. If the user also does not have a regular avatar, this will be null. DisplayName Gets the displayed name for this user. string DisplayName { get; } Property Value string A string representing the display name of the user; If the nickname is null, this will be the username. Flags Gets the public flags for this guild member. GuildUserFlags Flags { get; } Property Value GuildUserFlags Guild Gets the guild for this user. IGuild Guild { get; } Property Value IGuild A guild object that this user belongs to. GuildAvatarId Gets the guild specific avatar for this user. string GuildAvatarId { get; } Property Value string The users guild avatar hash if they have one; otherwise null. GuildId Gets the ID of the guild for this user. ulong GuildId { get; } Property Value ulong An ulong representing the snowflake identifier of the guild that this user belongs to. GuildPermissions Gets the guild-level permissions for this user. GuildPermissions GuildPermissions { get; } Property Value GuildPermissions A GuildPermissions structure for this user, representing what permissions this user has in the guild. Hierarchy Gets the users position within the role hierarchy. int Hierarchy { get; } Property Value int IsPending Whether the user has passed the guild's Membership Screening requirements. bool? IsPending { get; } Property Value bool? JoinedAt Gets when this user joined the guild. DateTimeOffset? JoinedAt { get; } Property Value DateTimeOffset? A DateTimeOffset representing the time of which the user has joined the guild; null when it cannot be obtained. Nickname Gets the nickname for this user. string Nickname { get; } Property Value string A string representing the nickname of the user; null if none is set. PremiumSince Gets the date and time for when this user's guild boost began. DateTimeOffset? PremiumSince { get; } Property Value DateTimeOffset? A DateTimeOffset for when the user began boosting this guild; null if they are not boosting the guild. RoleIds Gets a collection of IDs for the roles that this user currently possesses in the guild. IReadOnlyCollection<ulong> RoleIds { get; } Property Value IReadOnlyCollection<ulong> A read-only collection of ulong, each representing a snowflake identifier for a role that this user possesses. Remarks This property returns a read-only collection of the identifiers of the roles that this user possesses. For WebSocket users, a Roles property can be found in place of this property. Due to the REST implementation, only a collection of identifiers can be retrieved instead of the full role objects. TimedOutUntil Gets the date and time that indicates if and for how long a user has been timed out. DateTimeOffset? TimedOutUntil { get; } Property Value DateTimeOffset? A DateTimeOffset indicating how long the user will be timed out for. Remarks null or a timestamp in the past if the user is not timed out. Methods AddRoleAsync(IRole, RequestOptions) Adds the specified role to this user in the guild. Task AddRoleAsync(IRole role, RequestOptions options = null) Parameters role IRole The role to be added to the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. AddRoleAsync(ulong, RequestOptions) Adds the specified role to this user in the guild. Task AddRoleAsync(ulong roleId, RequestOptions options = null) Parameters roleId ulong The role to be added to the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. AddRolesAsync(IEnumerable<IRole>, RequestOptions) Adds the specified roles to this user in the guild. Task AddRolesAsync(IEnumerable<IRole> roles, RequestOptions options = null) Parameters roles IEnumerable<IRole> The roles to be added to the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. AddRolesAsync(IEnumerable<ulong>, RequestOptions) Adds the specified roleIds to this user in the guild. Task AddRolesAsync(IEnumerable<ulong> roleIds, RequestOptions options = null) Parameters roleIds IEnumerable<ulong> The roles to be added to the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. GetGuildAvatarUrl(ImageFormat, ushort) Gets the guild-specific avatar URL for this user, if it is set. string GetGuildAvatarUrl(ImageFormat format = ImageFormat.Auto, ushort size = 128) Parameters format ImageFormat The format of the image. size ushort The size of the image that matches any power of two, ranging from 16 to 2048. Returns string A string representing the user's guild-specific avatar URL; null if the user has no guild avatar set. Remarks tip If you wish to retrieve the display avatar for this user, consider using GetDisplayAvatarUrl(ImageFormat, ushort). GetPermissions(IGuildChannel) Gets the level permissions granted to this user to a given channel. ChannelPermissions GetPermissions(IGuildChannel channel) Parameters channel IGuildChannel The channel to get the permission from. Returns ChannelPermissions A ChannelPermissions structure representing the permissions that a user has in the specified channel. Examples <p>The following example checks if the current user has the ability to send a message with attachment in this channel; if so, uploads a file via <xref href=\"Discord.IMessageChannel.SendFileAsync(System.String%2cSystem.String%2cSystem.Boolean%2cDiscord.Embed%2cDiscord.RequestOptions%2cSystem.Boolean%2cDiscord.AllowedMentions%2cDiscord.MessageReference%2cDiscord.MessageComponent%2cDiscord.ISticker%5b%5d%2cDiscord.Embed%5b%5d%2cDiscord.MessageFlags)\" data-throw-if-not-resolved=\"false\"></xref>.</p> if (currentUser?.GetPermissions(targetChannel)?.AttachFiles) await targetChannel.SendFileAsync(\"fortnite.png\"); KickAsync(string, RequestOptions) Kicks this user from this guild. Task KickAsync(string reason = null, RequestOptions options = null) Parameters reason string The reason for the kick which will be recorded in the audit log. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous kick operation. ModifyAsync(Action<GuildUserProperties>, RequestOptions) Modifies this user's properties in this guild. Task ModifyAsync(Action<GuildUserProperties> func, RequestOptions options = null) Parameters func Action<GuildUserProperties> The delegate containing the properties to modify the user with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies the current guild user with the specified properties. To see an example of this method and what properties are available, please refer to GuildUserProperties. RemoveRoleAsync(IRole, RequestOptions) Removes the specified role from this user in the guild. Task RemoveRoleAsync(IRole role, RequestOptions options = null) Parameters role IRole The role to be removed from the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. RemoveRoleAsync(ulong, RequestOptions) Removes the specified roleId from this user in the guild. Task RemoveRoleAsync(ulong roleId, RequestOptions options = null) Parameters roleId ulong The role to be removed from the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. RemoveRolesAsync(IEnumerable<IRole>, RequestOptions) Removes the specified roles from this user in the guild. Task RemoveRolesAsync(IEnumerable<IRole> roles, RequestOptions options = null) Parameters roles IEnumerable<IRole> The roles to be removed from the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. RemoveRolesAsync(IEnumerable<ulong>, RequestOptions) Removes the specified roleIds from this user in the guild. Task RemoveRolesAsync(IEnumerable<ulong> roleIds, RequestOptions options = null) Parameters roleIds IEnumerable<ulong> The roles to be removed from the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. RemoveTimeOutAsync(RequestOptions) Removes the current timeout from the user in this guild if one exists. Task RemoveTimeOutAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous timeout removal operation. SetTimeOutAsync(TimeSpan, RequestOptions) Sets a timeout based on provided TimeSpan to this user in the guild. Task SetTimeOutAsync(TimeSpan span, RequestOptions options = null) Parameters span TimeSpan The TimeSpan indicating how long a user should be timed out for. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous timeout creation operation."
  },
  "api/Discord.IIntegration.html": {
    "href": "api/Discord.IIntegration.html",
    "title": "Interface IIntegration | Discord.Net Documentation",
    "keywords": "Interface IIntegration Namespace Discord Assembly Discord.Net.Core.dll Holds information for an integration feature. Nullable fields not provided for Discord bot integrations, but are for Twitch etc. public interface IIntegration Properties Account Gets integration account information. IIntegrationAccount Account { get; } Property Value IIntegrationAccount Application Gets the bot/OAuth2 application for a discord integration. IIntegrationApplication Application { get; } Property Value IIntegrationApplication ExpireBehavior Gets the behavior of expiring subscribers. IntegrationExpireBehavior? ExpireBehavior { get; } Property Value IntegrationExpireBehavior? ExpireGracePeriod Gets the grace period before expiring \"subscribers\". int? ExpireGracePeriod { get; } Property Value int? Guild IGuild Guild { get; } Property Value IGuild GuildId ulong GuildId { get; } Property Value ulong HasEnabledEmoticons Gets whether emoticons should be synced for this integration (twitch only currently). bool? HasEnabledEmoticons { get; } Property Value bool? Id Gets the integration ID. ulong Id { get; } Property Value ulong A ulong representing the unique identifier value of this integration. IsEnabled Gets a value that indicates whether this integration is enabled or not. bool IsEnabled { get; } Property Value bool true if this integration is enabled; otherwise false. IsRevoked Gets whether this integration been revoked. bool? IsRevoked { get; } Property Value bool? IsSyncing Gets a value that indicates whether this integration is syncing or not. bool? IsSyncing { get; } Property Value bool? true if this integration is syncing; otherwise false. Remarks An integration with syncing enabled will update its \"subscribers\" on an interval, while one with syncing disabled will not. A user must manually choose when sync the integration if syncing is disabled. Name Gets the integration name. string Name { get; } Property Value string A string containing the name of this integration. RoleId Gets the ID that this integration uses for \"subscribers\". ulong? RoleId { get; } Property Value ulong? SubscriberCount Gets how many subscribers this integration has. int? SubscriberCount { get; } Property Value int? SyncedAt Gets when this integration was last synced. DateTimeOffset? SyncedAt { get; } Property Value DateTimeOffset? A DateTimeOffset containing a date and time of day when the integration was last synced. Type Gets the integration type (Twitch, YouTube, etc). string Type { get; } Property Value string A string containing the name of the type of integration. User Gets the user for this integration. IUser User { get; } Property Value IUser"
  },
  "api/Discord.IIntegrationAccount.html": {
    "href": "api/Discord.IIntegrationAccount.html",
    "title": "Interface IIntegrationAccount | Discord.Net Documentation",
    "keywords": "Interface IIntegrationAccount Namespace Discord Assembly Discord.Net.Core.dll Provides the account information for an IIntegration. public interface IIntegrationAccount Properties Id Gets the ID of the account. string Id { get; } Property Value string A string unique identifier of this integration account. Name Gets the name of the account. string Name { get; } Property Value string A string containing the name of this integration account."
  },
  "api/Discord.IIntegrationApplication.html": {
    "href": "api/Discord.IIntegrationApplication.html",
    "title": "Interface IIntegrationApplication | Discord.Net Documentation",
    "keywords": "Interface IIntegrationApplication Namespace Discord Assembly Discord.Net.Core.dll Provides the bot/OAuth2 application for an IIntegration. public interface IIntegrationApplication Properties Bot Gets the bot associated with this application. IUser Bot { get; } Property Value IUser Description Gets the description of the app. string Description { get; } Property Value string Icon Gets the icon hash of the app. string Icon { get; } Property Value string Id Gets the id of the app. ulong Id { get; } Property Value ulong Name Gets the name of the app. string Name { get; } Property Value string Summary Gets the summary of the app. string Summary { get; } Property Value string"
  },
  "api/Discord.IIntegrationChannel.html": {
    "href": "api/Discord.IIntegrationChannel.html",
    "title": "Interface IIntegrationChannel | Discord.Net Documentation",
    "keywords": "Interface IIntegrationChannel Namespace Discord Assembly Discord.Net.Core.dll Represents a channel in a guild that can create webhooks. public interface IIntegrationChannel : IGuildChannel, IChannel, ISnowflakeEntity, IEntity<ulong>, IDeletable Inherited Members IGuildChannel.Position IGuildChannel.Flags IGuildChannel.Guild IGuildChannel.GuildId IGuildChannel.PermissionOverwrites IGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions) IGuildChannel.GetPermissionOverwrite(IRole) IGuildChannel.GetPermissionOverwrite(IUser) IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions) IGuildChannel.GetUsersAsync(CacheMode, RequestOptions) IGuildChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IChannel.Name ISnowflakeEntity.CreatedAt IEntity<ulong>.Id IDeletable.DeleteAsync(RequestOptions) Extension Methods ChannelExtensions.GetChannelType(IChannel) Methods CreateWebhookAsync(string, Stream, RequestOptions) Creates a webhook in this channel. Task<IWebhook> CreateWebhookAsync(string name, Stream avatar = null, RequestOptions options = null) Parameters name string The name of the webhook. avatar Stream The avatar of the webhook. options RequestOptions The options to be used when sending the request. Returns Task<IWebhook> A task that represents the asynchronous creation operation. The task result contains the newly created webhook. GetWebhookAsync(ulong, RequestOptions) Gets a webhook available in this channel. Task<IWebhook> GetWebhookAsync(ulong id, RequestOptions options = null) Parameters id ulong The identifier of the webhook. options RequestOptions The options to be used when sending the request. Returns Task<IWebhook> A task that represents the asynchronous get operation. The task result contains a webhook associated with the identifier; null if the webhook is not found. GetWebhooksAsync(RequestOptions) Gets the webhooks available in this channel. Task<IReadOnlyCollection<IWebhook>> GetWebhooksAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IWebhook>> A task that represents the asynchronous get operation. The task result contains a read-only collection of webhooks that is available in this channel."
  },
  "api/Discord.IInteractionContext.html": {
    "href": "api/Discord.IInteractionContext.html",
    "title": "Interface IInteractionContext | Discord.Net Documentation",
    "keywords": "Interface IInteractionContext Namespace Discord Assembly Discord.Net.Core.dll Represents the context of an Interaction. public interface IInteractionContext Properties Channel Gets the channel the interaction originated from. IMessageChannel Channel { get; } Property Value IMessageChannel Client Gets the client that will be used to handle this interaction. IDiscordClient Client { get; } Property Value IDiscordClient Guild Gets the guild the interaction originated from. IGuild Guild { get; } Property Value IGuild Remarks Will be null if the interaction originated from a DM channel or the interaction was a Context Command interaction. Interaction Gets the underlying interaction. IDiscordInteraction Interaction { get; } Property Value IDiscordInteraction User Gets the user who invoked the interaction event. IUser User { get; } Property Value IUser"
  },
  "api/Discord.IInvite.html": {
    "href": "api/Discord.IInvite.html",
    "title": "Interface IInvite | Discord.Net Documentation",
    "keywords": "Interface IInvite Namespace Discord Assembly Discord.Net.Core.dll Represents a generic invite object. public interface IInvite : IEntity<string>, IDeletable Inherited Members IEntity<string>.Id IDeletable.DeleteAsync(RequestOptions) Properties Application Gets the embedded application to open for this voice channel embedded application invite. IApplication Application { get; } Property Value IApplication A partial IApplication object. null if TargetUserType is not EmbeddedApplication. Channel Gets the channel this invite is linked to. IChannel Channel { get; } Property Value IChannel A generic channel that the invite points to. ChannelId Gets the ID of the channel this invite is linked to. ulong ChannelId { get; } Property Value ulong An ulong representing the channel snowflake identifier that the invite points to. ChannelName Gets the name of the channel this invite is linked to. string ChannelName { get; } Property Value string A string containing the name of the channel that the invite points to. ChannelType Gets the type of the channel this invite is linked to. ChannelType ChannelType { get; } Property Value ChannelType Code Gets the unique identifier for this invite. string Code { get; } Property Value string A string containing the invite code (e.g. FTqNnyS). ExpiresAt Gets the expiration date of this invite. null if the invite never expires. DateTimeOffset? ExpiresAt { get; } Property Value DateTimeOffset? Guild Gets the guild this invite is linked to. IGuild Guild { get; } Property Value IGuild A guild object representing the guild that the invite points to. GuildId Gets the ID of the guild this invite is linked to. ulong? GuildId { get; } Property Value ulong? An ulong representing the guild snowflake identifier that the invite points to. GuildName Gets the name of the guild this invite is linked to. string GuildName { get; } Property Value string A string containing the name of the guild that the invite points to. Inviter Gets the user that created this invite. IUser Inviter { get; } Property Value IUser A user that created this invite. MemberCount Gets the approximated count of total members in the guild. int? MemberCount { get; } Property Value int? An int representing the approximated total member count of the guild that the invite points to; null if one cannot be obtained. PresenceCount Gets the approximated count of online members in the guild. int? PresenceCount { get; } Property Value int? An int representing the approximated online member count of the guild that the invite points to; null if one cannot be obtained. TargetUser Gets the user this invite is linked to via TargetUserType. IUser TargetUser { get; } Property Value IUser A user that is linked to this invite. TargetUserType Gets the type of the linked TargetUser for this invite. TargetUserType TargetUserType { get; } Property Value TargetUserType The type of the linked user that is linked to this invite. Url Gets the URL used to accept this invite using Code. string Url { get; } Property Value string A string containing the full invite URL (e.g. https://discord.gg/FTqNnyS)."
  },
  "api/Discord.IInviteMetadata.html": {
    "href": "api/Discord.IInviteMetadata.html",
    "title": "Interface IInviteMetadata | Discord.Net Documentation",
    "keywords": "Interface IInviteMetadata Namespace Discord Assembly Discord.Net.Core.dll Represents additional information regarding the generic invite object. public interface IInviteMetadata : IInvite, IEntity<string>, IDeletable Inherited Members IInvite.Code IInvite.Url IInvite.Inviter IInvite.Channel IInvite.ChannelType IInvite.ChannelId IInvite.ChannelName IInvite.Guild IInvite.GuildId IInvite.GuildName IInvite.PresenceCount IInvite.MemberCount IInvite.TargetUser IInvite.TargetUserType IInvite.Application IInvite.ExpiresAt IEntity<string>.Id IDeletable.DeleteAsync(RequestOptions) Properties CreatedAt Gets when this invite was created. DateTimeOffset? CreatedAt { get; } Property Value DateTimeOffset? A DateTimeOffset representing the time of which the invite was first created. IsTemporary Gets a value that indicates whether the invite is a temporary one. bool IsTemporary { get; } Property Value bool true if users accepting this invite will be removed from the guild when they log off; otherwise false. MaxAge Gets the time (in seconds) until the invite expires. int? MaxAge { get; } Property Value int? An int representing the time in seconds until this invite expires; null if this invite never expires. MaxUses Gets the max number of uses this invite may have. int? MaxUses { get; } Property Value int? An int representing the number of uses this invite may be accepted until it is removed from the guild; null if none is set. Uses Gets the number of times this invite has been used. int? Uses { get; } Property Value int? An int representing the number of times this invite has been used."
  },
  "api/Discord.IMediaChannel.html": {
    "href": "api/Discord.IMediaChannel.html",
    "title": "Interface IMediaChannel | Discord.Net Documentation",
    "keywords": "Interface IMediaChannel Namespace Discord Assembly Discord.Net.Core.dll Represents a media channel in a guild that can create posts. public interface IMediaChannel : IForumChannel, IMentionable, INestedChannel, IIntegrationChannel, IGuildChannel, IChannel, ISnowflakeEntity, IEntity<ulong>, IDeletable Inherited Members IForumChannel.IsNsfw IForumChannel.Topic IForumChannel.DefaultAutoArchiveDuration IForumChannel.Tags IForumChannel.ThreadCreationInterval IForumChannel.DefaultSlowModeInterval IForumChannel.DefaultReactionEmoji IForumChannel.DefaultSortOrder IForumChannel.DefaultLayout IForumChannel.ModifyAsync(Action<ForumChannelProperties>, RequestOptions) IForumChannel.CreatePostAsync(string, ThreadArchiveDuration, int?, string, Embed, RequestOptions, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) IForumChannel.CreatePostWithFileAsync(string, string, ThreadArchiveDuration, int?, string, Embed, RequestOptions, bool, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) IForumChannel.CreatePostWithFileAsync(string, Stream, string, ThreadArchiveDuration, int?, string, Embed, RequestOptions, bool, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) IForumChannel.CreatePostWithFileAsync(string, FileAttachment, ThreadArchiveDuration, int?, string, Embed, RequestOptions, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) IForumChannel.CreatePostWithFilesAsync(string, IEnumerable<FileAttachment>, ThreadArchiveDuration, int?, string, Embed, RequestOptions, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) IForumChannel.GetActiveThreadsAsync(RequestOptions) IForumChannel.GetPublicArchivedThreadsAsync(int?, DateTimeOffset?, RequestOptions) IForumChannel.GetPrivateArchivedThreadsAsync(int?, DateTimeOffset?, RequestOptions) IForumChannel.GetJoinedPrivateArchivedThreadsAsync(int?, DateTimeOffset?, RequestOptions) IMentionable.Mention INestedChannel.CategoryId INestedChannel.GetCategoryAsync(CacheMode, RequestOptions) INestedChannel.SyncPermissionsAsync(RequestOptions) INestedChannel.CreateInviteAsync(int?, int?, bool, bool, RequestOptions) INestedChannel.CreateInviteToApplicationAsync(ulong, int?, int?, bool, bool, RequestOptions) INestedChannel.CreateInviteToApplicationAsync(DefaultApplications, int?, int?, bool, bool, RequestOptions) INestedChannel.CreateInviteToStreamAsync(IUser, int?, int?, bool, bool, RequestOptions) INestedChannel.GetInvitesAsync(RequestOptions) IIntegrationChannel.CreateWebhookAsync(string, Stream, RequestOptions) IIntegrationChannel.GetWebhookAsync(ulong, RequestOptions) IIntegrationChannel.GetWebhooksAsync(RequestOptions) IGuildChannel.Position IGuildChannel.Flags IGuildChannel.Guild IGuildChannel.GuildId IGuildChannel.PermissionOverwrites IGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions) IGuildChannel.GetPermissionOverwrite(IRole) IGuildChannel.GetPermissionOverwrite(IUser) IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions) IGuildChannel.GetUsersAsync(CacheMode, RequestOptions) IGuildChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IChannel.Name ISnowflakeEntity.CreatedAt IEntity<ulong>.Id IDeletable.DeleteAsync(RequestOptions) Extension Methods ChannelExtensions.GetChannelType(IChannel)"
  },
  "api/Discord.IMentionable.html": {
    "href": "api/Discord.IMentionable.html",
    "title": "Interface IMentionable | Discord.Net Documentation",
    "keywords": "Interface IMentionable Namespace Discord Assembly Discord.Net.Core.dll Determines whether the object is mentionable or not. public interface IMentionable Properties Mention Returns a special string used to mention this object. string Mention { get; } Property Value string A string that is recognized by Discord as a mention (e.g. <@168693960628371456>)."
  },
  "api/Discord.IMessage.html": {
    "href": "api/Discord.IMessage.html",
    "title": "Interface IMessage | Discord.Net Documentation",
    "keywords": "Interface IMessage Namespace Discord Assembly Discord.Net.Core.dll Represents a message object. public interface IMessage : ISnowflakeEntity, IEntity<ulong>, IDeletable Inherited Members ISnowflakeEntity.CreatedAt IEntity<ulong>.Id IDeletable.DeleteAsync(RequestOptions) Extension Methods MessageExtensions.GetJumpUrl(IMessage) Properties Activity Gets the activity associated with a message. MessageActivity Activity { get; } Property Value MessageActivity A message's activity, if any is associated. Remarks Sent with Rich Presence-related chat embeds. This often refers to activity that requires end-user's interaction, such as a Spotify Invite activity. Application Gets the application associated with a message. MessageApplication Application { get; } Property Value MessageApplication A message's application, if any is associated. Remarks Sent with Rich-Presence-related chat embeds. Attachments Gets all attachments included in this message. IReadOnlyCollection<IAttachment> Attachments { get; } Property Value IReadOnlyCollection<IAttachment> A read-only collection of attachments. Remarks This property gets a read-only collection of attachments associated with this message. Depending on the user's end-client, a sent message may contain one or more attachments. For example, mobile users may attach more than one file in their message, while the desktop client only allows for one. Author Gets the author of this message. IUser Author { get; } Property Value IUser Channel Gets the source channel of the message. IMessageChannel Channel { get; } Property Value IMessageChannel CleanContent Gets the clean content for this message. string CleanContent { get; } Property Value string A string that contains the body of the message stripped of mentions, markdown, emojis and pings; note that this field may be empty if there is an embed. Remarks This will be empty if the privileged MessageContent is disabled. Components The IMessageComponent's attached to this message IReadOnlyCollection<IMessageComponent> Components { get; } Property Value IReadOnlyCollection<IMessageComponent> Content Gets the content for this message. string Content { get; } Property Value string A string that contains the body of the message; note that this field may be empty if there is an embed. Remarks This will be empty if the privileged MessageContent is disabled. EditedTimestamp Gets the time of this message's last edit. DateTimeOffset? EditedTimestamp { get; } Property Value DateTimeOffset? Time of when the message was last edited; null if the message is never edited. Embeds Gets all embeds included in this message. IReadOnlyCollection<IEmbed> Embeds { get; } Property Value IReadOnlyCollection<IEmbed> A read-only collection of embed objects. Remarks This property gets a read-only collection of embeds associated with this message. Depending on the message, a sent message may contain one or more embeds. This is usually true when multiple link previews are generated; however, only one Rich Embed can be featured. Flags Gets the flags related to this message. MessageFlags? Flags { get; } Property Value MessageFlags? A message's flags, if any is associated. Remarks This value is determined by bitwise OR-ing MessageFlags values together. Interaction Gets the interaction this message is a response to. IMessageInteraction Interaction { get; } Property Value IMessageInteraction A IMessageInteraction if the message is a response to an interaction; otherwise null. IsPinned Gets the value that indicates whether this message is pinned. bool IsPinned { get; } Property Value bool true if this message was added to its channel's pinned messages; otherwise false. IsSuppressed Gets the value that indicates whether or not this message's embeds are suppressed. bool IsSuppressed { get; } Property Value bool true if the embeds in this message have been suppressed (made invisible); otherwise false. IsTTS Gets the value that indicates whether this message was meant to be read-aloud by Discord. bool IsTTS { get; } Property Value bool true if this message was sent as a text-to-speech message; otherwise false. MentionedChannelIds Gets the IDs of channels mentioned in this message. IReadOnlyCollection<ulong> MentionedChannelIds { get; } Property Value IReadOnlyCollection<ulong> A read-only collection of channel IDs. MentionedEveryone Gets the value that indicates whether this message mentioned everyone. bool MentionedEveryone { get; } Property Value bool true if this message mentioned everyone; otherwise false. MentionedRoleIds Gets the IDs of roles mentioned in this message. IReadOnlyCollection<ulong> MentionedRoleIds { get; } Property Value IReadOnlyCollection<ulong> A read-only collection of role IDs. MentionedUserIds Gets the IDs of users mentioned in this message. IReadOnlyCollection<ulong> MentionedUserIds { get; } Property Value IReadOnlyCollection<ulong> A read-only collection of user IDs. Reactions Gets all reactions included in this message. IReadOnlyDictionary<IEmote, ReactionMetadata> Reactions { get; } Property Value IReadOnlyDictionary<IEmote, ReactionMetadata> Reference Gets the reference to the original message if it is a crosspost, channel follow add, pin, or reply message. MessageReference Reference { get; } Property Value MessageReference A message's reference, if any is associated. Remarks Sent with cross-posted messages, meaning they were published from news channels and received by subscriber channels, channel follow adds, pins, and message replies. RoleSubscriptionData Gets the data of the role subscription purchase or renewal that prompted this RoleSubscriptionPurchase message. MessageRoleSubscriptionData RoleSubscriptionData { get; } Property Value MessageRoleSubscriptionData A MessageRoleSubscriptionData if the message is a role subscription purchase message; otherwise null. Source Gets the source type of this message. MessageSource Source { get; } Property Value MessageSource Stickers Gets all stickers items included in this message. IReadOnlyCollection<IStickerItem> Stickers { get; } Property Value IReadOnlyCollection<IStickerItem> A read-only collection of sticker item objects. Tags Gets all tags included in this message's content. IReadOnlyCollection<ITag> Tags { get; } Property Value IReadOnlyCollection<ITag> Thread Gets the thread that was started from this message. IThreadChannel Thread { get; } Property Value IThreadChannel An IThreadChannel object if this message has thread attached; otherwise null. Timestamp Gets the time this message was sent. DateTimeOffset Timestamp { get; } Property Value DateTimeOffset Time of when the message was sent. Type Gets the type of this message. MessageType Type { get; } Property Value MessageType Methods AddReactionAsync(IEmote, RequestOptions) Adds a reaction to this message. Task AddReactionAsync(IEmote emote, RequestOptions options = null) Parameters emote IEmote The emoji used to react to this message. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for adding a reaction to this message. Examples The following example adds the reaction, 💕, to the message. await msg.AddReactionAsync(new Emoji(\"\\U0001f495\")); See Also IEmote GetReactionUsersAsync(IEmote, int, RequestOptions, ReactionType) Gets all users that reacted to a message with a given emote. IAsyncEnumerable<IReadOnlyCollection<IUser>> GetReactionUsersAsync(IEmote emoji, int limit, RequestOptions options = null, ReactionType type = ReactionType.Normal) Parameters emoji IEmote The emoji that represents the reaction that you wish to get. limit int The number of users to request. options RequestOptions The options to be used when sending the request. type ReactionType The type of the reaction you wish to get users for. Returns IAsyncEnumerable<IReadOnlyCollection<IUser>> Paged collection of users. Examples The following example gets the users that have reacted with the emoji 💕 to the message. var emoji = new Emoji(\"\\U0001f495\"); var reactedUsers = await message.GetReactionUsersAsync(emoji, 100).FlattenAsync(); Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the users as a collection. warning Do not fetch too many users at once! This may cause unwanted preemptive rate limit or even actual rate limit, causing your bot to freeze! This method will attempt to fetch the number of reactions specified under limit. The library will attempt to split up the requests according to your limit and MaxUserReactionsPerBatch. In other words, should the user request 500 reactions, and the MaxUserReactionsPerBatch constant is 100, the request will be split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need of flattening. RemoveAllReactionsAsync(RequestOptions) Removes all reactions from this message. Task RemoveAllReactionsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. RemoveAllReactionsForEmoteAsync(IEmote, RequestOptions) Removes all reactions with a specific emoji from this message. Task RemoveAllReactionsForEmoteAsync(IEmote emote, RequestOptions options = null) Parameters emote IEmote The emoji used to react to this message. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. RemoveReactionAsync(IEmote, IUser, RequestOptions) Removes a reaction from message. Task RemoveReactionAsync(IEmote emote, IUser user, RequestOptions options = null) Parameters emote IEmote The emoji used to react to this message. user IUser The user that added the emoji. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for removing a reaction to this message. Examples The following example removes the reaction, 💕, added by the message author from the message. await msg.RemoveReactionAsync(new Emoji(\"\\U0001f495\"), msg.Author); See Also IEmote RemoveReactionAsync(IEmote, ulong, RequestOptions) Removes a reaction from message. Task RemoveReactionAsync(IEmote emote, ulong userId, RequestOptions options = null) Parameters emote IEmote The emoji used to react to this message. userId ulong The ID of the user that added the emoji. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for removing a reaction to this message. Examples The following example removes the reaction, 💕, added by the user with ID 84291986575613952 from the message. await msg.RemoveReactionAsync(new Emoji(\"\\U0001f495\"), 84291986575613952); See Also IEmote"
  },
  "api/Discord.IMessageChannel.html": {
    "href": "api/Discord.IMessageChannel.html",
    "title": "Interface IMessageChannel | Discord.Net Documentation",
    "keywords": "Interface IMessageChannel Namespace Discord Assembly Discord.Net.Core.dll Represents a generic channel that can send and receive messages. public interface IMessageChannel : IChannel, ISnowflakeEntity, IEntity<ulong> Inherited Members IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) ISnowflakeEntity.CreatedAt IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) Methods DeleteMessageAsync(IMessage, RequestOptions) Deletes a message based on the provided message in this channel. Task DeleteMessageAsync(IMessage message, RequestOptions options = null) Parameters message IMessage The message that would be removed. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. DeleteMessageAsync(ulong, RequestOptions) Deletes a message. Task DeleteMessageAsync(ulong messageId, RequestOptions options = null) Parameters messageId ulong The snowflake identifier of the message that would be removed. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. EnterTypingState(RequestOptions) Continuously broadcasts the \"user is typing\" message to all users in this channel until the returned object is disposed. IDisposable EnterTypingState(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns IDisposable A disposable object that, upon its disposal, will stop the client from broadcasting its typing state in this channel. Examples The following example keeps the client in the typing state until LongRunningAsync has finished. using (channel.EnterTypingState()) await LongRunningAsync(); GetMessageAsync(ulong, CacheMode, RequestOptions) Gets a message from this message channel. Task<IMessage> GetMessageAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters id ulong The snowflake identifier of the message. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<IMessage> A task that represents an asynchronous get operation for retrieving the message. The task result contains the retrieved message; null if no message is found with the specified identifier. GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions) Gets a collection of messages in this channel. IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(IMessage fromMessage, Direction dir, int limit = 100, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters fromMessage IMessage The starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> Paged collection of messages. Examples The following example gets 5 message prior to a specific message, oldMessage. var oldMessage = await channel.SendMessageAsync(\"boi\"); var messagesFromMsg = await channel.GetMessagesAsync(oldMessage, Direction.Before, 5).FlattenAsync(); Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the individual messages as a collection. warning Do not fetch too many messages at once! This may cause unwanted preemptive rate limit or even actual rate limit, causing your bot to freeze! This method will attempt to fetch the number of messages specified under limit around the message fromMessage depending on the dir. The library will attempt to split up the requests according to your limit and MaxMessagesPerBatch. In other words, should the user request 500 messages, and the MaxMessagesPerBatch constant is 100, the request will be split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need of flattening. GetMessagesAsync(int, CacheMode, RequestOptions) Gets the last N messages from this message channel. IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(int limit = 100, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters limit int The numbers of message to be gotten from. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> Paged collection of messages. Examples The following example downloads 300 messages and gets messages that belong to the user 53905483156684800. var messages = await channel.GetMessagesAsync(300).FlattenAsync(); var userMessages = messages.Where(x => x.Author.Id == 53905483156684800); Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the individual messages as a collection. warning Do not fetch too many messages at once! This may cause unwanted preemptive rate limit or even actual rate limit, causing your bot to freeze! This method will attempt to fetch the number of messages specified under limit. The library will attempt to split up the requests according to your limit and MaxMessagesPerBatch. In other words, should the user request 500 messages, and the MaxMessagesPerBatch constant is 100, the request will be split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need of flattening. GetMessagesAsync(ulong, Direction, int, CacheMode, RequestOptions) Gets a collection of messages in this channel. IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(ulong fromMessageId, Direction dir, int limit = 100, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters fromMessageId ulong The ID of the starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> Paged collection of messages. Examples The following example gets 5 message prior to the message identifier 442012544660537354. await channel.GetMessagesAsync(442012544660537354, Direction.Before, 5).FlattenAsync(); The following example attempts to retrieve messageCount number of messages from the beginning of the channel and prints them to the console. public async Task PrintFirstMessages(IMessageChannel channel, int messageCount) { // Although the library does attempt to divide the messageCount by 100 // to comply to Discord's maximum message limit per request, sending // too many could still cause the queue to clog up. // The purpose of this exception is to discourage users from sending // too many requests at once. if (messageCount > 1000) throw new InvalidOperationException(\"Too many messages requested.\"); // Setting fromMessageId to 0 will make Discord // default to the first message in channel. var messages = await channel.GetMessagesAsync( 0, Direction.After, messageCount) .FlattenAsync(); // Print message content foreach (var message in messages) Console.WriteLine($\"{message.Author} posted '{message.Content}' at {message.CreatedAt}.\"); } Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the individual messages as a collection. warning Do not fetch too many messages at once! This may cause unwanted preemptive rate limit or even actual rate limit, causing your bot to freeze! This method will attempt to fetch the number of messages specified under limit around the message fromMessageId depending on the dir. The library will attempt to split up the requests according to your limit and MaxMessagesPerBatch. In other words, should the user request 500 messages, and the MaxMessagesPerBatch constant is 100, the request will be split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need of flattening. GetPinnedMessagesAsync(RequestOptions) Gets a collection of pinned messages in this channel. Task<IReadOnlyCollection<IMessage>> GetPinnedMessagesAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IMessage>> A task that represents the asynchronous get operation for retrieving pinned messages in this channel. The task result contains a collection of messages found in the pinned messages. ModifyMessageAsync(ulong, Action<MessageProperties>, RequestOptions) Modifies a message. Task<IUserMessage> ModifyMessageAsync(ulong messageId, Action<MessageProperties> func, RequestOptions options = null) Parameters messageId ulong The snowflake identifier of the message that would be changed. func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The options to be used when sending the request. Returns Task<IUserMessage> A task that represents the asynchronous modification operation. Remarks This method modifies this message with the specified properties. To see an example of this method and what properties are available, please refer to MessageProperties. SendFileAsync(FileAttachment, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a file to this message channel with an optional caption. Task<IUserMessage> SendFileAsync(FileAttachment attachment, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters attachment FileAttachment The attachment containing the file and description. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The Rich Embed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<IUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Remarks This method sends a file as if you are uploading an attachment directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. SendFileAsync(Stream, string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a file to this message channel with an optional caption. Task<IUserMessage> SendFileAsync(Stream stream, string filename, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters stream Stream The Stream of the file to be sent. filename string The name of the attachment. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The Rich Embed to be sent. options RequestOptions The options to be used when sending the request. isSpoiler bool Whether the message attachment should be hidden as a spoiler. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<IUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example uploads a streamed image that will be called b1nzy.jpg embedded inside a rich embed to the channel. using (var b1nzyStream = await httpClient.GetStreamAsync(\"https://example.com/b1nzy\")) await channel.SendFileAsync(b1nzyStream, \"b1nzy.jpg\", embed: new EmbedBuilder { ImageUrl = \"attachment://b1nzy.jpg\" }.Build()); Remarks This method sends a file as if you are uploading an attachment directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. SendFileAsync(string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a file to this message channel with an optional caption. Task<IUserMessage> SendFileAsync(string filePath, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters filePath string The file path of the file. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The Rich Embed to be sent. options RequestOptions The options to be used when sending the request. isSpoiler bool Whether the message attachment should be hidden as a spoiler. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<IUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example uploads a local file called wumpus.txt along with the text good discord boi to the channel. await channel.SendFileAsync(\"wumpus.txt\", \"good discord boi\"); The following example uploads a local image called b1nzy.jpg embedded inside a rich embed to the channel. await channel.SendFileAsync(\"b1nzy.jpg\", embed: new EmbedBuilder { ImageUrl = \"attachment://b1nzy.jpg\" }.Build()); Remarks This method sends a file as if you are uploading an attachment directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. SendFilesAsync(IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a collection of files to this message channel. Task<IUserMessage> SendFilesAsync(IEnumerable<FileAttachment> attachments, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The Rich Embed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<IUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Remarks This method sends files as if you are uploading attachments directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. SendMessageAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a message to this message channel. Task<IUserMessage> SendMessageAsync(string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters text string The message to be sent. isTTS bool Determines whether the message should be read aloud by Discord or not. embed Embed The Rich Embed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the message. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<IUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example sends a message with the current system time in RFC 1123 format to the channel and deletes itself after 5 seconds. var message = await channel.SendMessageAsync(DateTimeOffset.UtcNow.ToString(\"R\")); await Task.Delay(TimeSpan.FromSeconds(5)) .ContinueWith(x => message.DeleteAsync()); TriggerTypingAsync(RequestOptions) Broadcasts the \"user is typing\" message to all users in this channel, lasting 10 seconds. Task TriggerTypingAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation that triggers the broadcast."
  },
  "api/Discord.IMessageCommandInteraction.html": {
    "href": "api/Discord.IMessageCommandInteraction.html",
    "title": "Interface IMessageCommandInteraction | Discord.Net Documentation",
    "keywords": "Interface IMessageCommandInteraction Namespace Discord Assembly Discord.Net.Core.dll Represents a Message Command interaction. public interface IMessageCommandInteraction : IApplicationCommandInteraction, IDiscordInteraction, ISnowflakeEntity, IEntity<ulong> Inherited Members IDiscordInteraction.Id IDiscordInteraction.Type IDiscordInteraction.Token IDiscordInteraction.Version IDiscordInteraction.HasResponded IDiscordInteraction.User IDiscordInteraction.UserLocale IDiscordInteraction.GuildLocale IDiscordInteraction.IsDMInteraction IDiscordInteraction.ChannelId IDiscordInteraction.GuildId IDiscordInteraction.ApplicationId IDiscordInteraction.Entitlements IDiscordInteraction.RespondAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.RespondWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.RespondWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.RespondWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.RespondWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.GetOriginalResponseAsync(RequestOptions) IDiscordInteraction.ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) IDiscordInteraction.DeleteOriginalResponseAsync(RequestOptions) IDiscordInteraction.DeferAsync(bool, RequestOptions) IDiscordInteraction.RespondWithModalAsync(Modal, RequestOptions) IDiscordInteraction.RespondWithPremiumRequiredAsync(RequestOptions) ISnowflakeEntity.CreatedAt Extension Methods IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, InteractionService, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, T, RequestOptions, Action<ModalBuilder>) Properties Data Gets the data associated with this interaction. IMessageCommandInteractionData Data { get; } Property Value IMessageCommandInteractionData"
  },
  "api/Discord.IMessageCommandInteractionData.html": {
    "href": "api/Discord.IMessageCommandInteractionData.html",
    "title": "Interface IMessageCommandInteractionData | Discord.Net Documentation",
    "keywords": "Interface IMessageCommandInteractionData Namespace Discord Assembly Discord.Net.Core.dll Represents the data tied with the IMessageCommandInteraction interaction. public interface IMessageCommandInteractionData : IApplicationCommandInteractionData, IDiscordInteractionData Inherited Members IApplicationCommandInteractionData.Id IApplicationCommandInteractionData.Name IApplicationCommandInteractionData.Options Properties Message Gets the message associated with this message command. IMessage Message { get; } Property Value IMessage"
  },
  "api/Discord.IMessageComponent.html": {
    "href": "api/Discord.IMessageComponent.html",
    "title": "Interface IMessageComponent | Discord.Net Documentation",
    "keywords": "Interface IMessageComponent Namespace Discord Assembly Discord.Net.Core.dll Represents a message component on a message. public interface IMessageComponent Properties CustomId Gets the custom id of the component if possible; otherwise null. string CustomId { get; } Property Value string Type Gets the ComponentType of this Message Component. ComponentType Type { get; } Property Value ComponentType"
  },
  "api/Discord.IMessageInteraction.html": {
    "href": "api/Discord.IMessageInteraction.html",
    "title": "Interface IMessageInteraction | Discord.Net Documentation",
    "keywords": "Interface IMessageInteraction Namespace Discord Assembly Discord.Net.Core.dll Represents a partial IDiscordInteraction within a message. public interface IMessageInteraction Properties Id Gets the snowflake id of the interaction. ulong Id { get; } Property Value ulong Name Gets the name of the application command used. string Name { get; } Property Value string Type Gets the type of the interaction. InteractionType Type { get; } Property Value InteractionType User Gets the IUser who invoked the interaction. IUser User { get; } Property Value IUser"
  },
  "api/Discord.IModalInteraction.html": {
    "href": "api/Discord.IModalInteraction.html",
    "title": "Interface IModalInteraction | Discord.Net Documentation",
    "keywords": "Interface IModalInteraction Namespace Discord Assembly Discord.Net.Core.dll Represents an interaction type for Modals. public interface IModalInteraction : IDiscordInteraction, ISnowflakeEntity, IEntity<ulong> Inherited Members IDiscordInteraction.Id IDiscordInteraction.Type IDiscordInteraction.Token IDiscordInteraction.Version IDiscordInteraction.HasResponded IDiscordInteraction.User IDiscordInteraction.UserLocale IDiscordInteraction.GuildLocale IDiscordInteraction.IsDMInteraction IDiscordInteraction.ChannelId IDiscordInteraction.GuildId IDiscordInteraction.ApplicationId IDiscordInteraction.Entitlements IDiscordInteraction.RespondAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.RespondWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.RespondWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.RespondWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.RespondWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.GetOriginalResponseAsync(RequestOptions) IDiscordInteraction.ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) IDiscordInteraction.DeleteOriginalResponseAsync(RequestOptions) IDiscordInteraction.DeferAsync(bool, RequestOptions) IDiscordInteraction.RespondWithModalAsync(Modal, RequestOptions) IDiscordInteraction.RespondWithPremiumRequiredAsync(RequestOptions) ISnowflakeEntity.CreatedAt Extension Methods IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, InteractionService, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, T, RequestOptions, Action<ModalBuilder>) Properties Data Gets the data received with this interaction; contains the clicked button. IModalInteractionData Data { get; } Property Value IModalInteractionData Message Gets the message the modal originates from. IUserMessage Message { get; } Property Value IUserMessage Remarks This property is only populated if the modal was created from a message component. Methods DeferLoadingAsync(bool, RequestOptions) Defers an interaction with the response type 5 (DeferredChannelMessageWithSource). Task DeferLoadingAsync(bool ephemeral = false, RequestOptions options = null) Parameters ephemeral bool true to defer ephemerally, otherwise false. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation of acknowledging the interaction. UpdateAsync(Action<MessageProperties>, RequestOptions) Updates the message which this modal originates from with the type UpdateMessage Task UpdateAsync(Action<MessageProperties> func, RequestOptions options = null) Parameters func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation of updating the message. Remarks This method can be used only if the modal was created from a message component."
  },
  "api/Discord.IModalInteractionData.html": {
    "href": "api/Discord.IModalInteractionData.html",
    "title": "Interface IModalInteractionData | Discord.Net Documentation",
    "keywords": "Interface IModalInteractionData Namespace Discord Assembly Discord.Net.Core.dll Represents the data sent with the IModalInteraction. public interface IModalInteractionData : IDiscordInteractionData Properties Components Gets the Modal components submitted by the user. IReadOnlyCollection<IComponentInteractionData> Components { get; } Property Value IReadOnlyCollection<IComponentInteractionData> CustomId Gets the Modal's Custom Id. string CustomId { get; } Property Value string"
  },
  "api/Discord.INestedChannel.html": {
    "href": "api/Discord.INestedChannel.html",
    "title": "Interface INestedChannel | Discord.Net Documentation",
    "keywords": "Interface INestedChannel Namespace Discord Assembly Discord.Net.Core.dll Represents a type of guild channel that can be nested within a category. public interface INestedChannel : IGuildChannel, IChannel, ISnowflakeEntity, IEntity<ulong>, IDeletable Inherited Members IGuildChannel.Position IGuildChannel.Flags IGuildChannel.Guild IGuildChannel.GuildId IGuildChannel.PermissionOverwrites IGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions) IGuildChannel.GetPermissionOverwrite(IRole) IGuildChannel.GetPermissionOverwrite(IUser) IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions) IGuildChannel.GetUsersAsync(CacheMode, RequestOptions) IGuildChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IChannel.Name ISnowflakeEntity.CreatedAt IEntity<ulong>.Id IDeletable.DeleteAsync(RequestOptions) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties CategoryId Gets the parent (category) ID of this channel in the guild's channel list. ulong? CategoryId { get; } Property Value ulong? A ulong representing the snowflake identifier of the parent of this channel; null if none is set. Methods CreateInviteAsync(int?, int?, bool, bool, RequestOptions) Creates a new invite to this channel. Task<IInviteMetadata> CreateInviteAsync(int? maxAge = 86400, int? maxUses = null, bool isTemporary = false, bool isUnique = false, RequestOptions options = null) Parameters maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. isTemporary bool If true, the user accepting this invite will be kicked from the guild after closing their client. isUnique bool If true, don't try to reuse a similar invite (useful for creating many unique one time use invites). options RequestOptions The options to be used when sending the request. Returns Task<IInviteMetadata> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. Examples The following example creates a new invite to this channel; the invite lasts for 12 hours and can only be used 3 times throughout its lifespan. await guildChannel.CreateInviteAsync(maxAge: 43200, maxUses: 3); CreateInviteToApplicationAsync(DefaultApplications, int?, int?, bool, bool, RequestOptions) Creates a new invite to this channel. Task<IInviteMetadata> CreateInviteToApplicationAsync(DefaultApplications application, int? maxAge = 86400, int? maxUses = null, bool isTemporary = false, bool isUnique = false, RequestOptions options = null) Parameters application DefaultApplications The application to open for this invite. maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. isTemporary bool If true, the user accepting this invite will be kicked from the guild after closing their client. isUnique bool If true, don't try to reuse a similar invite (useful for creating many unique one time use invites). options RequestOptions The options to be used when sending the request. Returns Task<IInviteMetadata> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. CreateInviteToApplicationAsync(ulong, int?, int?, bool, bool, RequestOptions) Creates a new invite to this channel. Task<IInviteMetadata> CreateInviteToApplicationAsync(ulong applicationId, int? maxAge = 86400, int? maxUses = null, bool isTemporary = false, bool isUnique = false, RequestOptions options = null) Parameters applicationId ulong The id of the embedded application to open for this invite. maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. isTemporary bool If true, the user accepting this invite will be kicked from the guild after closing their client. isUnique bool If true, don't try to reuse a similar invite (useful for creating many unique one time use invites). options RequestOptions The options to be used when sending the request. Returns Task<IInviteMetadata> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. CreateInviteToStreamAsync(IUser, int?, int?, bool, bool, RequestOptions) Creates a new invite to this channel. Task<IInviteMetadata> CreateInviteToStreamAsync(IUser user, int? maxAge = 86400, int? maxUses = null, bool isTemporary = false, bool isUnique = false, RequestOptions options = null) Parameters user IUser The id of the user whose stream to display for this invite. maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. isTemporary bool If true, the user accepting this invite will be kicked from the guild after closing their client. isUnique bool If true, don't try to reuse a similar invite (useful for creating many unique one time use invites). options RequestOptions The options to be used when sending the request. Returns Task<IInviteMetadata> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. Examples The following example creates a new invite to this channel; the invite lasts for 12 hours and can only be used 3 times throughout its lifespan. await guildChannel.CreateInviteAsync(maxAge: 43200, maxUses: 3); GetCategoryAsync(CacheMode, RequestOptions) Gets the parent (category) channel of this channel. Task<ICategoryChannel> GetCategoryAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns Task<ICategoryChannel> A task that represents the asynchronous get operation. The task result contains the category channel representing the parent of this channel; null if none is set. GetInvitesAsync(RequestOptions) Gets a collection of all invites to this channel. Task<IReadOnlyCollection<IInviteMetadata>> GetInvitesAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IInviteMetadata>> A task that represents the asynchronous get operation. The task result contains a read-only collection of invite metadata that are created for this channel. Examples The following example gets all of the invites that have been created in this channel and selects the most used invite. var invites = await channel.GetInvitesAsync(); if (invites.Count == 0) return; var invite = invites.OrderByDescending(x => x.Uses).FirstOrDefault(); SyncPermissionsAsync(RequestOptions) Syncs the permissions of this nested channel with its parent's. Task SyncPermissionsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for syncing channel permissions with its parent's."
  },
  "api/Discord.INewsChannel.html": {
    "href": "api/Discord.INewsChannel.html",
    "title": "Interface INewsChannel | Discord.Net Documentation",
    "keywords": "Interface INewsChannel Namespace Discord Assembly Discord.Net.Core.dll Represents a generic news channel in a guild that can send and receive messages. public interface INewsChannel : ITextChannel, IMessageChannel, IMentionable, INestedChannel, IIntegrationChannel, IGuildChannel, IChannel, ISnowflakeEntity, IEntity<ulong>, IDeletable Inherited Members ITextChannel.IsNsfw ITextChannel.Topic ITextChannel.SlowModeInterval ITextChannel.DefaultSlowModeInterval ITextChannel.DefaultArchiveDuration ITextChannel.DeleteMessagesAsync(IEnumerable<IMessage>, RequestOptions) ITextChannel.DeleteMessagesAsync(IEnumerable<ulong>, RequestOptions) ITextChannel.ModifyAsync(Action<TextChannelProperties>, RequestOptions) ITextChannel.CreateThreadAsync(string, ThreadType, ThreadArchiveDuration, IMessage, bool?, int?, RequestOptions) ITextChannel.GetActiveThreadsAsync(RequestOptions) IMessageChannel.SendMessageAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.SendFileAsync(string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.SendFileAsync(Stream, string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.SendFileAsync(FileAttachment, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.SendFilesAsync(IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.GetMessageAsync(ulong, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(ulong, Direction, int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions) IMessageChannel.GetPinnedMessagesAsync(RequestOptions) IMessageChannel.DeleteMessageAsync(ulong, RequestOptions) IMessageChannel.DeleteMessageAsync(IMessage, RequestOptions) IMessageChannel.ModifyMessageAsync(ulong, Action<MessageProperties>, RequestOptions) IMessageChannel.TriggerTypingAsync(RequestOptions) IMessageChannel.EnterTypingState(RequestOptions) IMentionable.Mention INestedChannel.CategoryId INestedChannel.GetCategoryAsync(CacheMode, RequestOptions) INestedChannel.SyncPermissionsAsync(RequestOptions) INestedChannel.CreateInviteAsync(int?, int?, bool, bool, RequestOptions) INestedChannel.CreateInviteToApplicationAsync(ulong, int?, int?, bool, bool, RequestOptions) INestedChannel.CreateInviteToApplicationAsync(DefaultApplications, int?, int?, bool, bool, RequestOptions) INestedChannel.CreateInviteToStreamAsync(IUser, int?, int?, bool, bool, RequestOptions) INestedChannel.GetInvitesAsync(RequestOptions) IIntegrationChannel.CreateWebhookAsync(string, Stream, RequestOptions) IIntegrationChannel.GetWebhookAsync(ulong, RequestOptions) IIntegrationChannel.GetWebhooksAsync(RequestOptions) IGuildChannel.Position IGuildChannel.Flags IGuildChannel.Guild IGuildChannel.GuildId IGuildChannel.PermissionOverwrites IGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions) IGuildChannel.GetPermissionOverwrite(IRole) IGuildChannel.GetPermissionOverwrite(IUser) IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions) IGuildChannel.GetUsersAsync(CacheMode, RequestOptions) IGuildChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IChannel.Name ISnowflakeEntity.CreatedAt IEntity<ulong>.Id IDeletable.DeleteAsync(RequestOptions) Extension Methods ChannelExtensions.GetChannelType(IChannel) Methods FollowAnnouncementChannelAsync(ulong, RequestOptions) Follow this channel to send messages to a target channel. Task<ulong> FollowAnnouncementChannelAsync(ulong channelId, RequestOptions options) Parameters channelId ulong options RequestOptions Returns Task<ulong> The Id of the created webhook."
  },
  "api/Discord.IPresence.html": {
    "href": "api/Discord.IPresence.html",
    "title": "Interface IPresence | Discord.Net Documentation",
    "keywords": "Interface IPresence Namespace Discord Assembly Discord.Net.Core.dll Represents the user's presence status. This may include their online status and their activity. public interface IPresence Properties ActiveClients Gets the set of clients where this user is currently active. IReadOnlyCollection<ClientType> ActiveClients { get; } Property Value IReadOnlyCollection<ClientType> Activities Gets the list of activities that this user currently has available. IReadOnlyCollection<IActivity> Activities { get; } Property Value IReadOnlyCollection<IActivity> Status Gets the current status of this user. UserStatus Status { get; } Property Value UserStatus"
  },
  "api/Discord.IPrivateChannel.html": {
    "href": "api/Discord.IPrivateChannel.html",
    "title": "Interface IPrivateChannel | Discord.Net Documentation",
    "keywords": "Interface IPrivateChannel Namespace Discord Assembly Discord.Net.Core.dll Represents a generic channel that is private to select recipients. public interface IPrivateChannel : IChannel, ISnowflakeEntity, IEntity<ulong> Inherited Members IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) ISnowflakeEntity.CreatedAt IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties Recipients Gets the users that can access this channel. IReadOnlyCollection<IUser> Recipients { get; } Property Value IReadOnlyCollection<IUser> A read-only collection of users that can access this channel."
  },
  "api/Discord.IRateLimitInfo.html": {
    "href": "api/Discord.IRateLimitInfo.html",
    "title": "Interface IRateLimitInfo | Discord.Net Documentation",
    "keywords": "Interface IRateLimitInfo Namespace Discord Assembly Discord.Net.Core.dll Represents a generic ratelimit info. public interface IRateLimitInfo Properties Bucket Gets a unique string denoting the rate limit being encountered (non-inclusive of major parameters in the route path). string Bucket { get; } Property Value string Endpoint Gets the endpoint that this ratelimit info came from. string Endpoint { get; } Property Value string IsGlobal Gets whether or not this ratelimit info is global. bool IsGlobal { get; } Property Value bool Lag Gets the amount of lag for the request. This is used to denote the precise time of when the ratelimit expires. TimeSpan? Lag { get; } Property Value TimeSpan? Limit Gets the number of requests that can be made. int? Limit { get; } Property Value int? Remaining Gets the number of remaining requests that can be made. int? Remaining { get; } Property Value int? Reset Gets the DateTimeOffset at which the rate limit resets. DateTimeOffset? Reset { get; } Property Value DateTimeOffset? ResetAfter Gets the absolute time when this ratelimit resets. TimeSpan? ResetAfter { get; } Property Value TimeSpan? RetryAfter Gets the total time (in seconds) of when the current rate limit bucket will reset. Can have decimals to match previous millisecond ratelimit precision. int? RetryAfter { get; } Property Value int?"
  },
  "api/Discord.IReaction.html": {
    "href": "api/Discord.IReaction.html",
    "title": "Interface IReaction | Discord.Net Documentation",
    "keywords": "Interface IReaction Namespace Discord Assembly Discord.Net.Core.dll Represents a generic reaction object. public interface IReaction Properties BurstColors Gets colors used for the super reaction. IReadOnlyCollection<Color> BurstColors { get; } Property Value IReadOnlyCollection<Color> Remarks The collection will be empty if the reaction is a normal reaction. Emote The IEmote used in the reaction. IEmote Emote { get; } Property Value IEmote"
  },
  "api/Discord.IRestInteractionContext.html": {
    "href": "api/Discord.IRestInteractionContext.html",
    "title": "Interface IRestInteractionContext | Discord.Net Documentation",
    "keywords": "Interface IRestInteractionContext Namespace Discord Assembly Discord.Net.Core.dll public interface IRestInteractionContext : IInteractionContext Inherited Members IInteractionContext.Client IInteractionContext.Guild IInteractionContext.Channel IInteractionContext.User IInteractionContext.Interaction Properties InteractionResponseCallback Gets or sets the callback to use when the service has outgoing json for the rest webhook. Func<string, Task> InteractionResponseCallback { get; } Property Value Func<string, Task> Remarks If this property is null the default callback will be used."
  },
  "api/Discord.IRole.html": {
    "href": "api/Discord.IRole.html",
    "title": "Interface IRole | Discord.Net Documentation",
    "keywords": "Interface IRole Namespace Discord Assembly Discord.Net.Core.dll Represents a generic role object to be given to a guild user. public interface IRole : ISnowflakeEntity, IEntity<ulong>, IDeletable, IMentionable, IComparable<IRole> Inherited Members ISnowflakeEntity.CreatedAt IEntity<ulong>.Id IDeletable.DeleteAsync(RequestOptions) IMentionable.Mention IComparable<IRole>.CompareTo(IRole) Properties Color Gets the color given to users of this role. Color Color { get; } Property Value Color A Color struct representing the color of this role. Emoji Gets the unicode emoji of this role. Emoji Emoji { get; } Property Value Emoji Remarks This field is mutually exclusive with Icon, either icon is set or emoji is set. Flags Gets flags related to this role. RoleFlags Flags { get; } Property Value RoleFlags Guild Gets the guild that owns this role. IGuild Guild { get; } Property Value IGuild A guild representing the parent guild of this role. Icon Gets the icon of this role. string Icon { get; } Property Value string A string containing the hash of this role's icon. IsHoisted Gets a value that indicates whether the role can be separated in the user list. bool IsHoisted { get; } Property Value bool true if users of this role are separated in the user list; otherwise false. IsManaged Gets a value that indicates whether the role is managed by Discord. bool IsManaged { get; } Property Value bool true if this role is automatically managed by Discord; otherwise false. IsMentionable Gets a value that indicates whether the role is mentionable. bool IsMentionable { get; } Property Value bool true if this role may be mentioned in messages; otherwise false. Name Gets the name of this role. string Name { get; } Property Value string A string containing the name of this role. Permissions Gets the permissions granted to members of this role. GuildPermissions Permissions { get; } Property Value GuildPermissions A GuildPermissions struct that this role possesses. Position Gets this role's position relative to other roles in the same guild. int Position { get; } Property Value int An int representing the position of the role in the role list of the guild. Tags Gets the tags related to this role. RoleTags Tags { get; } Property Value RoleTags A RoleTags object containing all tags related to this role. Methods GetIconUrl() Gets the image url of the icon role. string GetIconUrl() Returns string An image url of the icon role. ModifyAsync(Action<RoleProperties>, RequestOptions) Modifies this role. Task ModifyAsync(Action<RoleProperties> func, RequestOptions options = null) Parameters func Action<RoleProperties> A delegate containing the properties to modify the role with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies this role with the specified properties. To see an example of this method and what properties are available, please refer to RoleProperties."
  },
  "api/Discord.IRouteMatchContainer.html": {
    "href": "api/Discord.IRouteMatchContainer.html",
    "title": "Interface IRouteMatchContainer | Discord.Net Documentation",
    "keywords": "Interface IRouteMatchContainer Namespace Discord Assembly Discord.Net.Core.dll Represents a container for temporarily storing CustomId wild card matches of a component. public interface IRouteMatchContainer Properties SegmentMatches Gets the collection of captured route segments in this container. IEnumerable<IRouteSegmentMatch> SegmentMatches { get; } Property Value IEnumerable<IRouteSegmentMatch> A collection of captured route segments. Methods SetSegmentMatches(IEnumerable<IRouteSegmentMatch>) Sets the SegmentMatches property of this container. void SetSegmentMatches(IEnumerable<IRouteSegmentMatch> segmentMatches) Parameters segmentMatches IEnumerable<IRouteSegmentMatch> The collection of captured route segments."
  },
  "api/Discord.IRouteSegmentMatch.html": {
    "href": "api/Discord.IRouteSegmentMatch.html",
    "title": "Interface IRouteSegmentMatch | Discord.Net Documentation",
    "keywords": "Interface IRouteSegmentMatch Namespace Discord Assembly Discord.Net.Core.dll Represents an object for storing a CustomId wild card match. public interface IRouteSegmentMatch Properties Value Gets the captured value of this wild card match. string Value { get; } Property Value string The value of this wild card."
  },
  "api/Discord.ISelfUser.html": {
    "href": "api/Discord.ISelfUser.html",
    "title": "Interface ISelfUser | Discord.Net Documentation",
    "keywords": "Interface ISelfUser Namespace Discord Assembly Discord.Net.Core.dll Represents the logged-in Discord user. public interface ISelfUser : IUser, ISnowflakeEntity, IEntity<ulong>, IMentionable, IPresence Inherited Members IUser.AvatarId IUser.GetAvatarUrl(ImageFormat, ushort) IUser.GetDefaultAvatarUrl() IUser.GetDisplayAvatarUrl(ImageFormat, ushort) IUser.Discriminator IUser.DiscriminatorValue IUser.IsBot IUser.IsWebhook IUser.Username IUser.PublicFlags IUser.GlobalName IUser.AvatarDecorationHash IUser.AvatarDecorationSkuId IUser.CreateDMChannelAsync(RequestOptions) IUser.GetAvatarDecorationUrl() ISnowflakeEntity.CreatedAt IEntity<ulong>.Id IMentionable.Mention IPresence.Status IPresence.ActiveClients IPresence.Activities Extension Methods UserExtensions.SendFileAsync(IUser, FileAttachment, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, Stream, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFilesAsync(IUser, IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendMessageAsync(IUser, string, bool, Embed, RequestOptions, AllowedMentions, MessageComponent, Embed[]) Properties Email Gets the email associated with this user. string Email { get; } Property Value string Flags Gets the flags that are applied to a user's account. UserProperties Flags { get; } Property Value UserProperties The value of flags for this user. Remarks This value is determined by bitwise OR-ing UserProperties values together. IsMfaEnabled Indicates whether or not this user has MFA enabled on their account. bool IsMfaEnabled { get; } Property Value bool true if this user has enabled multi-factor authentication on their account; false if not. IsVerified Indicates whether or not this user has their email verified. bool IsVerified { get; } Property Value bool true if this user's email has been verified; false if not. Locale Gets the user's chosen language option. string Locale { get; } Property Value string The IETF language tag of the user's chosen region, if provided. For example, a locale of \"English, US\" is \"en-US\", \"Chinese (Taiwan)\" is \"zh-TW\", etc. PremiumType Gets the type of Nitro subscription that is active on this user's account. PremiumType PremiumType { get; } Property Value PremiumType The type of Nitro subscription the user subscribes to, if any. Remarks This information may only be available with the identify OAuth scope. Methods ModifyAsync(Action<SelfUserProperties>, RequestOptions) Modifies the user's properties. Task ModifyAsync(Action<SelfUserProperties> func, RequestOptions options = null) Parameters func Action<SelfUserProperties> options RequestOptions Returns Task"
  },
  "api/Discord.ISlashCommandInteraction.html": {
    "href": "api/Discord.ISlashCommandInteraction.html",
    "title": "Interface ISlashCommandInteraction | Discord.Net Documentation",
    "keywords": "Interface ISlashCommandInteraction Namespace Discord Assembly Discord.Net.Core.dll Represents a slash command interaction. public interface ISlashCommandInteraction : IApplicationCommandInteraction, IDiscordInteraction, ISnowflakeEntity, IEntity<ulong> Inherited Members IDiscordInteraction.Id IDiscordInteraction.Type IDiscordInteraction.Token IDiscordInteraction.Version IDiscordInteraction.HasResponded IDiscordInteraction.User IDiscordInteraction.UserLocale IDiscordInteraction.GuildLocale IDiscordInteraction.IsDMInteraction IDiscordInteraction.ChannelId IDiscordInteraction.GuildId IDiscordInteraction.ApplicationId IDiscordInteraction.Entitlements IDiscordInteraction.RespondAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.RespondWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.RespondWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.RespondWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.RespondWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.GetOriginalResponseAsync(RequestOptions) IDiscordInteraction.ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) IDiscordInteraction.DeleteOriginalResponseAsync(RequestOptions) IDiscordInteraction.DeferAsync(bool, RequestOptions) IDiscordInteraction.RespondWithModalAsync(Modal, RequestOptions) IDiscordInteraction.RespondWithPremiumRequiredAsync(RequestOptions) ISnowflakeEntity.CreatedAt Extension Methods IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, InteractionService, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, T, RequestOptions, Action<ModalBuilder>) Properties Data Gets the data associated with this interaction. IApplicationCommandInteractionData Data { get; } Property Value IApplicationCommandInteractionData"
  },
  "api/Discord.ISnowflakeEntity.html": {
    "href": "api/Discord.ISnowflakeEntity.html",
    "title": "Interface ISnowflakeEntity | Discord.Net Documentation",
    "keywords": "Interface ISnowflakeEntity Namespace Discord Assembly Discord.Net.Core.dll Represents a Discord snowflake entity. public interface ISnowflakeEntity : IEntity<ulong> Inherited Members IEntity<ulong>.Id Properties CreatedAt Gets when the snowflake was created. DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created."
  },
  "api/Discord.IStageChannel.html": {
    "href": "api/Discord.IStageChannel.html",
    "title": "Interface IStageChannel | Discord.Net Documentation",
    "keywords": "Interface IStageChannel Namespace Discord Assembly Discord.Net.Core.dll Represents a generic Stage Channel. public interface IStageChannel : IVoiceChannel, ITextChannel, IMessageChannel, IMentionable, INestedChannel, IIntegrationChannel, IGuildChannel, IDeletable, IAudioChannel, IChannel, ISnowflakeEntity, IEntity<ulong> Inherited Members IVoiceChannel.Bitrate IVoiceChannel.UserLimit IVoiceChannel.VideoQualityMode IVoiceChannel.ModifyAsync(Action<VoiceChannelProperties>, RequestOptions) IVoiceChannel.SetStatusAsync(string, RequestOptions) ITextChannel.IsNsfw ITextChannel.Topic ITextChannel.SlowModeInterval ITextChannel.DefaultSlowModeInterval ITextChannel.DefaultArchiveDuration ITextChannel.DeleteMessagesAsync(IEnumerable<IMessage>, RequestOptions) ITextChannel.DeleteMessagesAsync(IEnumerable<ulong>, RequestOptions) ITextChannel.ModifyAsync(Action<TextChannelProperties>, RequestOptions) ITextChannel.CreateThreadAsync(string, ThreadType, ThreadArchiveDuration, IMessage, bool?, int?, RequestOptions) ITextChannel.GetActiveThreadsAsync(RequestOptions) IMessageChannel.SendMessageAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.SendFileAsync(string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.SendFileAsync(Stream, string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.SendFileAsync(FileAttachment, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.SendFilesAsync(IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.GetMessageAsync(ulong, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(ulong, Direction, int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions) IMessageChannel.GetPinnedMessagesAsync(RequestOptions) IMessageChannel.DeleteMessageAsync(ulong, RequestOptions) IMessageChannel.DeleteMessageAsync(IMessage, RequestOptions) IMessageChannel.ModifyMessageAsync(ulong, Action<MessageProperties>, RequestOptions) IMessageChannel.TriggerTypingAsync(RequestOptions) IMessageChannel.EnterTypingState(RequestOptions) IMentionable.Mention INestedChannel.CategoryId INestedChannel.GetCategoryAsync(CacheMode, RequestOptions) INestedChannel.SyncPermissionsAsync(RequestOptions) INestedChannel.CreateInviteAsync(int?, int?, bool, bool, RequestOptions) INestedChannel.CreateInviteToApplicationAsync(ulong, int?, int?, bool, bool, RequestOptions) INestedChannel.CreateInviteToApplicationAsync(DefaultApplications, int?, int?, bool, bool, RequestOptions) INestedChannel.CreateInviteToStreamAsync(IUser, int?, int?, bool, bool, RequestOptions) INestedChannel.GetInvitesAsync(RequestOptions) IIntegrationChannel.CreateWebhookAsync(string, Stream, RequestOptions) IIntegrationChannel.GetWebhookAsync(ulong, RequestOptions) IIntegrationChannel.GetWebhooksAsync(RequestOptions) IGuildChannel.Position IGuildChannel.Flags IGuildChannel.Guild IGuildChannel.GuildId IGuildChannel.PermissionOverwrites IGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions) IGuildChannel.GetPermissionOverwrite(IRole) IGuildChannel.GetPermissionOverwrite(IUser) IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions) IGuildChannel.GetUsersAsync(CacheMode, RequestOptions) IGuildChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IDeletable.DeleteAsync(RequestOptions) IAudioChannel.RTCRegion IAudioChannel.ConnectAsync(bool, bool, bool) IAudioChannel.DisconnectAsync() IAudioChannel.ModifyAsync(Action<AudioChannelProperties>, RequestOptions) IChannel.Name ISnowflakeEntity.CreatedAt IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties IsDiscoverableDisabled Gets whether or not stage discovery is disabled. bool? IsDiscoverableDisabled { get; } Property Value bool? IsLive Gets whether or not the stage is live. bool IsLive { get; } Property Value bool PrivacyLevel Gets the StagePrivacyLevel of the current stage. StagePrivacyLevel? PrivacyLevel { get; } Property Value StagePrivacyLevel? Remarks If the stage isn't live then this property will be set to null. Methods BecomeSpeakerAsync(RequestOptions) Makes the current user become a speaker within a stage. Task BecomeSpeakerAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous speaker modify operation. ModifyInstanceAsync(Action<StageInstanceProperties>, RequestOptions) Modifies the current stage instance. Task ModifyInstanceAsync(Action<StageInstanceProperties> func, RequestOptions options = null) Parameters func Action<StageInstanceProperties> The properties to modify the stage instance with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modify operation. MoveToSpeakerAsync(IGuildUser, RequestOptions) Makes a user a speaker within a stage. Task MoveToSpeakerAsync(IGuildUser user, RequestOptions options = null) Parameters user IGuildUser The user to make the speaker. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous move operation. RemoveFromSpeakerAsync(IGuildUser, RequestOptions) Removes a user from speaking. Task RemoveFromSpeakerAsync(IGuildUser user, RequestOptions options = null) Parameters user IGuildUser The user to remove from speaking. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous remove operation. RequestToSpeakAsync(RequestOptions) Indicates that the bot would like to speak within a stage channel. Task RequestToSpeakAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous request to speak operation. StartStageAsync(string, StagePrivacyLevel, RequestOptions) Starts the stage, creating a stage instance. Task StartStageAsync(string topic, StagePrivacyLevel privacyLevel = StagePrivacyLevel.GuildOnly, RequestOptions options = null) Parameters topic string The topic for the stage/ privacyLevel StagePrivacyLevel The privacy level of the stage. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous start operation. StopSpeakingAsync(RequestOptions) Makes the current user a listener. Task StopSpeakingAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous stop operation. StopStageAsync(RequestOptions) Stops the stage, deleting the stage instance. Task StopStageAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous stop operation."
  },
  "api/Discord.ISticker.html": {
    "href": "api/Discord.ISticker.html",
    "title": "Interface ISticker | Discord.Net Documentation",
    "keywords": "Interface ISticker Namespace Discord Assembly Discord.Net.Core.dll Represents a discord sticker. public interface ISticker : IStickerItem Properties Description Gets the description of this sticker. string Description { get; } Property Value string A string with the description of this sticker. Format Gets the format type of this sticker. StickerFormatType Format { get; } Property Value StickerFormatType A StickerFormatType with the format type of this sticker. Id Gets the ID of this sticker. ulong Id { get; } Property Value ulong A snowflake ID associated with this sticker. IsAvailable Gets whether this guild sticker can be used, may be false due to loss of Server Boosts. bool? IsAvailable { get; } Property Value bool? Name Gets the name of this sticker. string Name { get; } Property Value string A string with the name of this sticker. PackId Gets the ID of the pack of this sticker. ulong PackId { get; } Property Value ulong A snowflake ID associated with the pack of this sticker. SortOrder Gets the standard sticker's sort order within its pack. int? SortOrder { get; } Property Value int? Tags Gets the list of tags of this sticker. IReadOnlyCollection<string> Tags { get; } Property Value IReadOnlyCollection<string> A read-only list with the tags of this sticker. Type Gets the type of this sticker. StickerType Type { get; } Property Value StickerType Methods GetStickerUrl() Gets the image url for this sticker. string GetStickerUrl() Returns string"
  },
  "api/Discord.IStickerItem.html": {
    "href": "api/Discord.IStickerItem.html",
    "title": "Interface IStickerItem | Discord.Net Documentation",
    "keywords": "Interface IStickerItem Namespace Discord Assembly Discord.Net.Core.dll Represents a partial sticker item received with a message. public interface IStickerItem Properties Format The format of the sticker. StickerFormatType Format { get; } Property Value StickerFormatType Id The id of the sticker. ulong Id { get; } Property Value ulong Name The name of the sticker. string Name { get; } Property Value string"
  },
  "api/Discord.ISystemMessage.html": {
    "href": "api/Discord.ISystemMessage.html",
    "title": "Interface ISystemMessage | Discord.Net Documentation",
    "keywords": "Interface ISystemMessage Namespace Discord Assembly Discord.Net.Core.dll Represents a generic message sent by the system. public interface ISystemMessage : IMessage, ISnowflakeEntity, IEntity<ulong>, IDeletable Inherited Members IMessage.Type IMessage.Source IMessage.IsTTS IMessage.IsPinned IMessage.IsSuppressed IMessage.MentionedEveryone IMessage.Content IMessage.CleanContent IMessage.Timestamp IMessage.EditedTimestamp IMessage.Channel IMessage.Author IMessage.Thread IMessage.Attachments IMessage.Embeds IMessage.Tags IMessage.MentionedChannelIds IMessage.MentionedRoleIds IMessage.MentionedUserIds IMessage.Activity IMessage.Application IMessage.Reference IMessage.Reactions IMessage.Components IMessage.Stickers IMessage.Flags IMessage.Interaction IMessage.RoleSubscriptionData IMessage.AddReactionAsync(IEmote, RequestOptions) IMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions) IMessage.RemoveReactionAsync(IEmote, ulong, RequestOptions) IMessage.RemoveAllReactionsAsync(RequestOptions) IMessage.RemoveAllReactionsForEmoteAsync(IEmote, RequestOptions) IMessage.GetReactionUsersAsync(IEmote, int, RequestOptions, ReactionType) ISnowflakeEntity.CreatedAt IEntity<ulong>.Id IDeletable.DeleteAsync(RequestOptions) Extension Methods MessageExtensions.GetJumpUrl(IMessage)"
  },
  "api/Discord.ITag.html": {
    "href": "api/Discord.ITag.html",
    "title": "Interface ITag | Discord.Net Documentation",
    "keywords": "Interface ITag Namespace Discord Assembly Discord.Net.Core.dll public interface ITag Properties Index int Index { get; } Property Value int Key ulong Key { get; } Property Value ulong Length int Length { get; } Property Value int Type TagType Type { get; } Property Value TagType Value object Value { get; } Property Value object"
  },
  "api/Discord.ITeam.html": {
    "href": "api/Discord.ITeam.html",
    "title": "Interface ITeam | Discord.Net Documentation",
    "keywords": "Interface ITeam Namespace Discord Assembly Discord.Net.Core.dll Represents a Discord Team. public interface ITeam Properties IconUrl Gets the team icon url. string IconUrl { get; } Property Value string Id Gets the team unique identifier. ulong Id { get; } Property Value ulong Name Gets the name of this team. string Name { get; } Property Value string OwnerUserId Gets the user identifier that owns this team. ulong OwnerUserId { get; } Property Value ulong TeamMembers Gets the members of this team. IReadOnlyList<ITeamMember> TeamMembers { get; } Property Value IReadOnlyList<ITeamMember>"
  },
  "api/Discord.ITeamMember.html": {
    "href": "api/Discord.ITeamMember.html",
    "title": "Interface ITeamMember | Discord.Net Documentation",
    "keywords": "Interface ITeamMember Namespace Discord Assembly Discord.Net.Core.dll Represents a Discord Team member. public interface ITeamMember Properties MembershipState Gets the membership state of this team member. MembershipState MembershipState { get; } Property Value MembershipState Permissions Gets the permissions of this team member. string[] Permissions { get; } Property Value string[] TeamId Gets the team unique identifier for this team member. ulong TeamId { get; } Property Value ulong User Gets the Discord user of this team member. IUser User { get; } Property Value IUser"
  },
  "api/Discord.ITextChannel.html": {
    "href": "api/Discord.ITextChannel.html",
    "title": "Interface ITextChannel | Discord.Net Documentation",
    "keywords": "Interface ITextChannel Namespace Discord Assembly Discord.Net.Core.dll Represents a generic channel in a guild that can send and receive messages. public interface ITextChannel : IMessageChannel, IMentionable, INestedChannel, IIntegrationChannel, IGuildChannel, IChannel, ISnowflakeEntity, IEntity<ulong>, IDeletable Inherited Members IMessageChannel.SendMessageAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.SendFileAsync(string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.SendFileAsync(Stream, string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.SendFileAsync(FileAttachment, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.SendFilesAsync(IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.GetMessageAsync(ulong, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(ulong, Direction, int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions) IMessageChannel.GetPinnedMessagesAsync(RequestOptions) IMessageChannel.DeleteMessageAsync(ulong, RequestOptions) IMessageChannel.DeleteMessageAsync(IMessage, RequestOptions) IMessageChannel.ModifyMessageAsync(ulong, Action<MessageProperties>, RequestOptions) IMessageChannel.TriggerTypingAsync(RequestOptions) IMessageChannel.EnterTypingState(RequestOptions) IMentionable.Mention INestedChannel.CategoryId INestedChannel.GetCategoryAsync(CacheMode, RequestOptions) INestedChannel.SyncPermissionsAsync(RequestOptions) INestedChannel.CreateInviteAsync(int?, int?, bool, bool, RequestOptions) INestedChannel.CreateInviteToApplicationAsync(ulong, int?, int?, bool, bool, RequestOptions) INestedChannel.CreateInviteToApplicationAsync(DefaultApplications, int?, int?, bool, bool, RequestOptions) INestedChannel.CreateInviteToStreamAsync(IUser, int?, int?, bool, bool, RequestOptions) INestedChannel.GetInvitesAsync(RequestOptions) IIntegrationChannel.CreateWebhookAsync(string, Stream, RequestOptions) IIntegrationChannel.GetWebhookAsync(ulong, RequestOptions) IIntegrationChannel.GetWebhooksAsync(RequestOptions) IGuildChannel.Position IGuildChannel.Flags IGuildChannel.Guild IGuildChannel.GuildId IGuildChannel.PermissionOverwrites IGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions) IGuildChannel.GetPermissionOverwrite(IRole) IGuildChannel.GetPermissionOverwrite(IUser) IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions) IGuildChannel.GetUsersAsync(CacheMode, RequestOptions) IGuildChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IChannel.Name ISnowflakeEntity.CreatedAt IEntity<ulong>.Id IDeletable.DeleteAsync(RequestOptions) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties DefaultArchiveDuration Gets the default auto-archive duration for client-created threads in this channel. ThreadArchiveDuration DefaultArchiveDuration { get; } Property Value ThreadArchiveDuration The default auto-archive duration for thread creation in this channel. Remarks The value of this property does not affect API thread creation, it will not respect this value. DefaultSlowModeInterval Gets the current default slow-mode delay for threads in this channel. int DefaultSlowModeInterval { get; } Property Value int An int representing the time in seconds required before the user can send another message; 0 if disabled. IsNsfw Gets a value that indicates whether the channel is NSFW. bool IsNsfw { get; } Property Value bool true if the channel has the NSFW flag enabled; otherwise false. SlowModeInterval Gets the current slow-mode delay for this channel. int SlowModeInterval { get; } Property Value int An int representing the time in seconds required before the user can send another message; 0 if disabled. Topic Gets the current topic for this text channel. string Topic { get; } Property Value string A string representing the topic set in the channel; null if none is set. Methods CreateThreadAsync(string, ThreadType, ThreadArchiveDuration, IMessage, bool?, int?, RequestOptions) Creates a thread within this ITextChannel. Task<IThreadChannel> CreateThreadAsync(string name, ThreadType type = ThreadType.PublicThread, ThreadArchiveDuration autoArchiveDuration = ThreadArchiveDuration.OneDay, IMessage message = null, bool? invitable = null, int? slowmode = null, RequestOptions options = null) Parameters name string The name of the thread. type ThreadType The type of the thread. Note: This parameter is not used if the message parameter is not specified. autoArchiveDuration ThreadArchiveDuration The duration on which this thread archives after. Note: Options OneWeek and ThreeDays are only available for guilds that are boosted. You can check in the Features to see if the guild has the THREE_DAY_THREAD_ARCHIVE and SEVEN_DAY_THREAD_ARCHIVE. message IMessage The message which to start the thread from. invitable bool? Whether non-moderators can add other non-moderators to a thread; only available when creating a private thread slowmode int? The amount of seconds a user has to wait before sending another message (0-21600) options RequestOptions The options to be used when sending the request. Returns Task<IThreadChannel> A task that represents the asynchronous create operation. The task result contains a IThreadChannel Remarks When message is null the thread type will be based off of the channel its created in. When called on a ITextChannel, it creates a PublicThread. When called on a INewsChannel, it creates a NewsThread. The id of the created thread will be the same as the id of the message, and as such a message can only have a single thread created from it. DeleteMessagesAsync(IEnumerable<IMessage>, RequestOptions) Bulk-deletes multiple messages. Task DeleteMessagesAsync(IEnumerable<IMessage> messages, RequestOptions options = null) Parameters messages IEnumerable<IMessage> The messages to be bulk-deleted. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous bulk-removal operation. Examples The following example gets 250 messages from the channel and deletes them. var messages = await textChannel.GetMessagesAsync(250).FlattenAsync(); await textChannel.DeleteMessagesAsync(messages); Remarks This method attempts to remove the messages specified in bulk. important Due to the limitation set by Discord, this method can only remove messages that are posted within 14 days! DeleteMessagesAsync(IEnumerable<ulong>, RequestOptions) Bulk-deletes multiple messages. Task DeleteMessagesAsync(IEnumerable<ulong> messageIds, RequestOptions options = null) Parameters messageIds IEnumerable<ulong> The snowflake identifier of the messages to be bulk-deleted. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous bulk-removal operation. Remarks This method attempts to remove the messages specified in bulk. important Due to the limitation set by Discord, this method can only remove messages that are posted within 14 days! GetActiveThreadsAsync(RequestOptions) Gets a collection of active threads within this channel. Task<IReadOnlyCollection<IThreadChannel>> GetActiveThreadsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IThreadChannel>> A task that represents an asynchronous get operation for retrieving the threads. The task result contains a collection of active threads. ModifyAsync(Action<TextChannelProperties>, RequestOptions) Modifies this text channel. Task ModifyAsync(Action<TextChannelProperties> func, RequestOptions options = null) Parameters func Action<TextChannelProperties> The delegate containing the properties to modify the channel with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. See Also TextChannelProperties"
  },
  "api/Discord.IThreadChannel.html": {
    "href": "api/Discord.IThreadChannel.html",
    "title": "Interface IThreadChannel | Discord.Net Documentation",
    "keywords": "Interface IThreadChannel Namespace Discord Assembly Discord.Net.Core.dll Represents a thread channel inside of a guild. public interface IThreadChannel : ITextChannel, IMessageChannel, IMentionable, INestedChannel, IIntegrationChannel, IGuildChannel, IChannel, ISnowflakeEntity, IEntity<ulong>, IDeletable Inherited Members ITextChannel.IsNsfw ITextChannel.Topic ITextChannel.SlowModeInterval ITextChannel.DefaultSlowModeInterval ITextChannel.DefaultArchiveDuration ITextChannel.DeleteMessagesAsync(IEnumerable<IMessage>, RequestOptions) ITextChannel.DeleteMessagesAsync(IEnumerable<ulong>, RequestOptions) ITextChannel.ModifyAsync(Action<TextChannelProperties>, RequestOptions) ITextChannel.CreateThreadAsync(string, ThreadType, ThreadArchiveDuration, IMessage, bool?, int?, RequestOptions) ITextChannel.GetActiveThreadsAsync(RequestOptions) IMessageChannel.SendMessageAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.SendFileAsync(string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.SendFileAsync(Stream, string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.SendFileAsync(FileAttachment, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.SendFilesAsync(IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.GetMessageAsync(ulong, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(ulong, Direction, int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions) IMessageChannel.GetPinnedMessagesAsync(RequestOptions) IMessageChannel.DeleteMessageAsync(ulong, RequestOptions) IMessageChannel.DeleteMessageAsync(IMessage, RequestOptions) IMessageChannel.ModifyMessageAsync(ulong, Action<MessageProperties>, RequestOptions) IMessageChannel.TriggerTypingAsync(RequestOptions) IMessageChannel.EnterTypingState(RequestOptions) IMentionable.Mention INestedChannel.CategoryId INestedChannel.GetCategoryAsync(CacheMode, RequestOptions) INestedChannel.SyncPermissionsAsync(RequestOptions) INestedChannel.CreateInviteAsync(int?, int?, bool, bool, RequestOptions) INestedChannel.CreateInviteToApplicationAsync(ulong, int?, int?, bool, bool, RequestOptions) INestedChannel.CreateInviteToApplicationAsync(DefaultApplications, int?, int?, bool, bool, RequestOptions) INestedChannel.CreateInviteToStreamAsync(IUser, int?, int?, bool, bool, RequestOptions) INestedChannel.GetInvitesAsync(RequestOptions) IIntegrationChannel.CreateWebhookAsync(string, Stream, RequestOptions) IIntegrationChannel.GetWebhookAsync(ulong, RequestOptions) IIntegrationChannel.GetWebhooksAsync(RequestOptions) IGuildChannel.Position IGuildChannel.Flags IGuildChannel.Guild IGuildChannel.GuildId IGuildChannel.PermissionOverwrites IGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions) IGuildChannel.GetPermissionOverwrite(IRole) IGuildChannel.GetPermissionOverwrite(IUser) IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions) IGuildChannel.GetUsersAsync(CacheMode, RequestOptions) IGuildChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IChannel.Name IEntity<ulong>.Id IDeletable.DeleteAsync(RequestOptions) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties AppliedTags Gets ids of tags applied to a forum thread IReadOnlyCollection<ulong> AppliedTags { get; } Property Value IReadOnlyCollection<ulong> Remarks This property is only available on forum threads. ArchiveTimestamp Gets the timestamp when the thread's archive status was last changed, used for calculating recent activity. DateTimeOffset ArchiveTimestamp { get; } Property Value DateTimeOffset AutoArchiveDuration Gets the duration of time before the thread is automatically archived after no activity. ThreadArchiveDuration AutoArchiveDuration { get; } Property Value ThreadArchiveDuration CreatedAt Gets when the thread was created. DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset Remarks This property is only populated for threads created after 2022-01-09, hence the default date of this property will be that date. HasJoined Gets whether or not the current user has joined this thread. bool HasJoined { get; } Property Value bool IsArchived Gets whether or not the current thread is archived. bool IsArchived { get; } Property Value bool IsInvitable Gets whether non-moderators can add other non-moderators to a thread. bool? IsInvitable { get; } Property Value bool? Remarks This property is only available on private threads. IsLocked Gets whether or not the current thread is locked. bool IsLocked { get; } Property Value bool MemberCount Gets an approximate count of users in a thread, stops counting after 50. int MemberCount { get; } Property Value int MessageCount Gets an approximate count of messages in a thread, stops counting after 50. int MessageCount { get; } Property Value int OwnerId Gets the id of the creator of the thread. ulong OwnerId { get; } Property Value ulong Type Gets the type of the current thread channel. ThreadType Type { get; } Property Value ThreadType Methods AddUserAsync(IGuildUser, RequestOptions) Adds a user to this thread. Task AddUserAsync(IGuildUser user, RequestOptions options = null) Parameters user IGuildUser The IGuildUser to add. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation of adding a member to a thread. JoinAsync(RequestOptions) Joins the current thread. Task JoinAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous join operation. LeaveAsync(RequestOptions) Leaves the current thread. Task LeaveAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous leave operation. ModifyAsync(Action<ThreadChannelProperties>, RequestOptions) Modifies this thread channel. Task ModifyAsync(Action<ThreadChannelProperties> func, RequestOptions options = null) Parameters func Action<ThreadChannelProperties> The delegate containing the properties to modify the channel with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. See Also ThreadChannelProperties RemoveUserAsync(IGuildUser, RequestOptions) Removes a user from this thread. Task RemoveUserAsync(IGuildUser user, RequestOptions options = null) Parameters user IGuildUser The IGuildUser to remove from this thread. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation of removing a user from this thread."
  },
  "api/Discord.IThreadUser.html": {
    "href": "api/Discord.IThreadUser.html",
    "title": "Interface IThreadUser | Discord.Net Documentation",
    "keywords": "Interface IThreadUser Namespace Discord Assembly Discord.Net.Core.dll Represents a Discord thread user. public interface IThreadUser : IMentionable Inherited Members IMentionable.Mention Properties Guild Gets the guild this thread was created in. IGuild Guild { get; } Property Value IGuild GuildUser Gets the IGuildUser on the server this thread was created in. IGuildUser GuildUser { get; } Property Value IGuildUser Thread Gets the IThreadChannel this user is in. IThreadChannel Thread { get; } Property Value IThreadChannel ThreadJoinedAt Gets the timestamp for when this user joined this thread. DateTimeOffset ThreadJoinedAt { get; } Property Value DateTimeOffset"
  },
  "api/Discord.IUpdateable.html": {
    "href": "api/Discord.IUpdateable.html",
    "title": "Interface IUpdateable | Discord.Net Documentation",
    "keywords": "Interface IUpdateable Namespace Discord Assembly Discord.Net.Core.dll Defines whether the object is updateable or not. public interface IUpdateable Methods UpdateAsync(RequestOptions) Updates this object's properties with its current state. Task UpdateAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task"
  },
  "api/Discord.IUser.html": {
    "href": "api/Discord.IUser.html",
    "title": "Interface IUser | Discord.Net Documentation",
    "keywords": "Interface IUser Namespace Discord Assembly Discord.Net.Core.dll Represents a generic user. public interface IUser : ISnowflakeEntity, IEntity<ulong>, IMentionable, IPresence Inherited Members ISnowflakeEntity.CreatedAt IEntity<ulong>.Id IMentionable.Mention IPresence.Status IPresence.ActiveClients IPresence.Activities Extension Methods UserExtensions.SendFileAsync(IUser, FileAttachment, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, Stream, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFilesAsync(IUser, IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendMessageAsync(IUser, string, bool, Embed, RequestOptions, AllowedMentions, MessageComponent, Embed[]) Properties AvatarDecorationHash Gets the hash of the avatar decoration. string AvatarDecorationHash { get; } Property Value string Remarks null if the user has no avatar decoration set. AvatarDecorationSkuId Gets the id of the avatar decoration's SKU. ulong? AvatarDecorationSkuId { get; } Property Value ulong? Remarks null if the user has no avatar decoration set. AvatarId Gets the identifier of this user's avatar. string AvatarId { get; } Property Value string Discriminator Gets the per-username unique ID for this user. This will return \"0000\" for users who have migrated to new username system. string Discriminator { get; } Property Value string DiscriminatorValue Gets the per-username unique ID for this user. This will return 0 for users who have migrated to new username system. ushort DiscriminatorValue { get; } Property Value ushort GlobalName Gets the user's display name, if it is set. For bots, this will get the application name. string GlobalName { get; } Property Value string Remarks This property will be null if user has no display name set. IsBot Gets a value that indicates whether this user is identified as a bot. bool IsBot { get; } Property Value bool true if the user is a bot application; otherwise false. Remarks This property retrieves a value that indicates whether this user is a registered bot application (indicated by the blue BOT tag within the official chat client). IsWebhook Gets a value that indicates whether this user is a webhook user. bool IsWebhook { get; } Property Value bool true if the user is a webhook; otherwise false. PublicFlags Gets the public flags that are applied to this user's account. UserProperties? PublicFlags { get; } Property Value UserProperties? The value of public flags for this user. Remarks This value is determined by bitwise OR-ing UserProperties values together. Username Gets the username for this user. string Username { get; } Property Value string Methods CreateDMChannelAsync(RequestOptions) Creates the direct message channel of this user. Task<IDMChannel> CreateDMChannelAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IDMChannel> A task that represents the asynchronous operation for getting or creating a DM channel. The task result contains the DM channel associated with this user. Examples The following example attempts to send a direct message to the target user and logs the incident should it fail. public async Task MessageUserAsync(IUser user) { var channel = await user.CreateDMChannelAsync(); try { await channel.SendMessageAsync(\"Awesome stuff!\"); } catch (Discord.Net.HttpException ex) when (ex.HttpCode == HttpStatusCode.Forbidden) { Console.WriteLine($\"Boo, I cannot message {user}.\"); } } Remarks This method is used to obtain or create a channel used to send a direct message. warning In event that the current user cannot send a message to the target user, a channel can and will still be created by Discord. However, attempting to send a message will yield a HttpException with a 403 as its HttpCode. There are currently no official workarounds by Discord. GetAvatarDecorationUrl() Gets the URL for user's avatar decoration. string GetAvatarDecorationUrl() Returns string Remarks null if the user has no avatar decoration set. GetAvatarUrl(ImageFormat, ushort) Gets the avatar URL for this user, if it is set. string GetAvatarUrl(ImageFormat format = ImageFormat.Auto, ushort size = 128) Parameters format ImageFormat The format of the image. size ushort The size of the image that matches any power of two, ranging from 16 to 2048. Returns string A string representing the user's avatar URL; null if the user has no avatar set. Examples The following example attempts to retrieve the user's current avatar and send it to a channel; if one is not set, a default avatar for this user will be returned instead. Remarks tip If you wish to retrieve the display avatar for this user, consider using GetDisplayAvatarUrl(ImageFormat, ushort). GetDefaultAvatarUrl() Gets the default avatar URL for this user. string GetDefaultAvatarUrl() Returns string A string representing the user's default avatar URL. Remarks This avatar is auto-generated by Discord and consists of their logo combined with a random background color. note The calculation is always done by taking the remainder of this user's DiscriminatorValue divided by 5. GetDisplayAvatarUrl(ImageFormat, ushort) Gets the display avatar URL for this user. string GetDisplayAvatarUrl(ImageFormat format = ImageFormat.Auto, ushort size = 128) Parameters format ImageFormat The format of the image. size ushort The size of the image that matches any power of two, ranging from 16 to 2048. Returns string A string representing the user's display avatar URL. Remarks This method will return GetDefaultAvatarUrl() if the user has no avatar set."
  },
  "api/Discord.IUserCommandInteraction.html": {
    "href": "api/Discord.IUserCommandInteraction.html",
    "title": "Interface IUserCommandInteraction | Discord.Net Documentation",
    "keywords": "Interface IUserCommandInteraction Namespace Discord Assembly Discord.Net.Core.dll Represents a User Command interaction. public interface IUserCommandInteraction : IApplicationCommandInteraction, IDiscordInteraction, ISnowflakeEntity, IEntity<ulong> Inherited Members IDiscordInteraction.Id IDiscordInteraction.Type IDiscordInteraction.Token IDiscordInteraction.Version IDiscordInteraction.HasResponded IDiscordInteraction.User IDiscordInteraction.UserLocale IDiscordInteraction.GuildLocale IDiscordInteraction.IsDMInteraction IDiscordInteraction.ChannelId IDiscordInteraction.GuildId IDiscordInteraction.ApplicationId IDiscordInteraction.Entitlements IDiscordInteraction.RespondAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.RespondWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.RespondWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.RespondWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.RespondWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) IDiscordInteraction.GetOriginalResponseAsync(RequestOptions) IDiscordInteraction.ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) IDiscordInteraction.DeleteOriginalResponseAsync(RequestOptions) IDiscordInteraction.DeferAsync(bool, RequestOptions) IDiscordInteraction.RespondWithModalAsync(Modal, RequestOptions) IDiscordInteraction.RespondWithPremiumRequiredAsync(RequestOptions) ISnowflakeEntity.CreatedAt Extension Methods IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, InteractionService, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, T, RequestOptions, Action<ModalBuilder>) Properties Data Gets the data associated with this interaction. IUserCommandInteractionData Data { get; } Property Value IUserCommandInteractionData"
  },
  "api/Discord.IUserCommandInteractionData.html": {
    "href": "api/Discord.IUserCommandInteractionData.html",
    "title": "Interface IUserCommandInteractionData | Discord.Net Documentation",
    "keywords": "Interface IUserCommandInteractionData Namespace Discord Assembly Discord.Net.Core.dll Represents the data tied with the IUserCommandInteraction interaction. public interface IUserCommandInteractionData : IApplicationCommandInteractionData, IDiscordInteractionData Inherited Members IApplicationCommandInteractionData.Id IApplicationCommandInteractionData.Name IApplicationCommandInteractionData.Options Properties User Gets the user who this command targets. IUser User { get; } Property Value IUser"
  },
  "api/Discord.IUserGuild.html": {
    "href": "api/Discord.IUserGuild.html",
    "title": "Interface IUserGuild | Discord.Net Documentation",
    "keywords": "Interface IUserGuild Namespace Discord Assembly Discord.Net.Core.dll public interface IUserGuild : IDeletable, ISnowflakeEntity, IEntity<ulong> Inherited Members IDeletable.DeleteAsync(RequestOptions) ISnowflakeEntity.CreatedAt IEntity<ulong>.Id Properties ApproximateMemberCount Gets the approximate number of members in this guild. int? ApproximateMemberCount { get; } Property Value int? Remarks Only available when getting a guild via REST when with_counts is true. ApproximatePresenceCount Gets the approximate number of non-offline members in this guild. int? ApproximatePresenceCount { get; } Property Value int? Remarks Only available when getting a guild via REST when with_counts is true. Features Gets the features for this guild. GuildFeatures Features { get; } Property Value GuildFeatures A flags enum containing all the features for the guild. IconUrl Gets the icon URL associated with this guild, or null if one is not set. string IconUrl { get; } Property Value string IsOwner Returns true if the current user owns this guild. bool IsOwner { get; } Property Value bool Name Gets the name of this guild. string Name { get; } Property Value string Permissions Returns the current user's permissions for this guild. GuildPermissions Permissions { get; } Property Value GuildPermissions"
  },
  "api/Discord.IUserMessage.html": {
    "href": "api/Discord.IUserMessage.html",
    "title": "Interface IUserMessage | Discord.Net Documentation",
    "keywords": "Interface IUserMessage Namespace Discord Assembly Discord.Net.Core.dll Represents a generic message sent by a user. public interface IUserMessage : IMessage, ISnowflakeEntity, IEntity<ulong>, IDeletable Inherited Members IMessage.Type IMessage.Source IMessage.IsTTS IMessage.IsPinned IMessage.IsSuppressed IMessage.MentionedEveryone IMessage.Content IMessage.CleanContent IMessage.Timestamp IMessage.EditedTimestamp IMessage.Channel IMessage.Author IMessage.Thread IMessage.Attachments IMessage.Embeds IMessage.Tags IMessage.MentionedChannelIds IMessage.MentionedRoleIds IMessage.MentionedUserIds IMessage.Activity IMessage.Application IMessage.Reference IMessage.Reactions IMessage.Components IMessage.Stickers IMessage.Flags IMessage.Interaction IMessage.RoleSubscriptionData IMessage.AddReactionAsync(IEmote, RequestOptions) IMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions) IMessage.RemoveReactionAsync(IEmote, ulong, RequestOptions) IMessage.RemoveAllReactionsAsync(RequestOptions) IMessage.RemoveAllReactionsForEmoteAsync(IEmote, RequestOptions) IMessage.GetReactionUsersAsync(IEmote, int, RequestOptions, ReactionType) ISnowflakeEntity.CreatedAt IEntity<ulong>.Id IDeletable.DeleteAsync(RequestOptions) Extension Methods MessageExtensions.GetJumpUrl(IMessage) MessageExtensions.HasCharPrefix(IUserMessage, char, ref int) MessageExtensions.HasMentionPrefix(IUserMessage, IUser, ref int) MessageExtensions.HasStringPrefix(IUserMessage, string, ref int, StringComparison) MessageExtensions.AddReactionsAsync(IUserMessage, IEnumerable<IEmote>, RequestOptions) MessageExtensions.RemoveReactionsAsync(IUserMessage, IUser, IEnumerable<IEmote>, RequestOptions) MessageExtensions.ReplyAsync(IUserMessage, string, bool, Embed, AllowedMentions, RequestOptions, MessageComponent, ISticker[], Embed[], MessageFlags) Properties ReferencedMessage Gets the referenced message if it is a crosspost, channel follow add, pin, or reply message. IUserMessage ReferencedMessage { get; } Property Value IUserMessage The referenced message, if any is associated and still exists. ResolvedData Gets the resolved data if the message has components. null otherwise. MessageResolvedData ResolvedData { get; } Property Value MessageResolvedData Methods CrosspostAsync(RequestOptions) Publishes (crossposts) this message. Task CrosspostAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for publishing this message. Remarks warning This call will throw an InvalidOperationException if attempted in a non-news channel. This method will publish (crosspost) the message. Please note, publishing (crossposting), is only available in news channels. ModifyAsync(Action<MessageProperties>, RequestOptions) Modifies this message. Task ModifyAsync(Action<MessageProperties> func, RequestOptions options = null) Parameters func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Examples The following example replaces the content of the message with Hello World!. await msg.ModifyAsync(x => x.Content = \"Hello World!\"); Remarks This method modifies this message with the specified properties. To see an example of this method and what properties are available, please refer to MessageProperties. PinAsync(RequestOptions) Adds this message to its channel's pinned messages. Task PinAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for pinning this message. Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) Transforms this message's text into a human-readable form by resolving its tags. string Resolve(TagHandling userHandling = TagHandling.Name, TagHandling channelHandling = TagHandling.Name, TagHandling roleHandling = TagHandling.Name, TagHandling everyoneHandling = TagHandling.Ignore, TagHandling emojiHandling = TagHandling.Name) Parameters userHandling TagHandling Determines how the user tag should be handled. channelHandling TagHandling Determines how the channel tag should be handled. roleHandling TagHandling Determines how the role tag should be handled. everyoneHandling TagHandling Determines how the @everyone tag should be handled. emojiHandling TagHandling Determines how the emoji tag should be handled. Returns string UnpinAsync(RequestOptions) Removes this message from its channel's pinned messages. Task UnpinAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for unpinning this message."
  },
  "api/Discord.IVoiceChannel.html": {
    "href": "api/Discord.IVoiceChannel.html",
    "title": "Interface IVoiceChannel | Discord.Net Documentation",
    "keywords": "Interface IVoiceChannel Namespace Discord Assembly Discord.Net.Core.dll Represents a generic voice channel in a guild. public interface IVoiceChannel : ITextChannel, IMessageChannel, IMentionable, INestedChannel, IIntegrationChannel, IGuildChannel, IDeletable, IAudioChannel, IChannel, ISnowflakeEntity, IEntity<ulong> Inherited Members ITextChannel.IsNsfw ITextChannel.Topic ITextChannel.SlowModeInterval ITextChannel.DefaultSlowModeInterval ITextChannel.DefaultArchiveDuration ITextChannel.DeleteMessagesAsync(IEnumerable<IMessage>, RequestOptions) ITextChannel.DeleteMessagesAsync(IEnumerable<ulong>, RequestOptions) ITextChannel.ModifyAsync(Action<TextChannelProperties>, RequestOptions) ITextChannel.CreateThreadAsync(string, ThreadType, ThreadArchiveDuration, IMessage, bool?, int?, RequestOptions) ITextChannel.GetActiveThreadsAsync(RequestOptions) IMessageChannel.SendMessageAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.SendFileAsync(string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.SendFileAsync(Stream, string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.SendFileAsync(FileAttachment, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.SendFilesAsync(IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) IMessageChannel.GetMessageAsync(ulong, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(ulong, Direction, int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions) IMessageChannel.GetPinnedMessagesAsync(RequestOptions) IMessageChannel.DeleteMessageAsync(ulong, RequestOptions) IMessageChannel.DeleteMessageAsync(IMessage, RequestOptions) IMessageChannel.ModifyMessageAsync(ulong, Action<MessageProperties>, RequestOptions) IMessageChannel.TriggerTypingAsync(RequestOptions) IMessageChannel.EnterTypingState(RequestOptions) IMentionable.Mention INestedChannel.CategoryId INestedChannel.GetCategoryAsync(CacheMode, RequestOptions) INestedChannel.SyncPermissionsAsync(RequestOptions) INestedChannel.CreateInviteAsync(int?, int?, bool, bool, RequestOptions) INestedChannel.CreateInviteToApplicationAsync(ulong, int?, int?, bool, bool, RequestOptions) INestedChannel.CreateInviteToApplicationAsync(DefaultApplications, int?, int?, bool, bool, RequestOptions) INestedChannel.CreateInviteToStreamAsync(IUser, int?, int?, bool, bool, RequestOptions) INestedChannel.GetInvitesAsync(RequestOptions) IIntegrationChannel.CreateWebhookAsync(string, Stream, RequestOptions) IIntegrationChannel.GetWebhookAsync(ulong, RequestOptions) IIntegrationChannel.GetWebhooksAsync(RequestOptions) IGuildChannel.Position IGuildChannel.Flags IGuildChannel.Guild IGuildChannel.GuildId IGuildChannel.PermissionOverwrites IGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions) IGuildChannel.GetPermissionOverwrite(IRole) IGuildChannel.GetPermissionOverwrite(IUser) IGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) IGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions) IGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions) IGuildChannel.GetUsersAsync(CacheMode, RequestOptions) IGuildChannel.GetUserAsync(ulong, CacheMode, RequestOptions) IDeletable.DeleteAsync(RequestOptions) IAudioChannel.RTCRegion IAudioChannel.ConnectAsync(bool, bool, bool) IAudioChannel.DisconnectAsync() IAudioChannel.ModifyAsync(Action<AudioChannelProperties>, RequestOptions) IChannel.Name ISnowflakeEntity.CreatedAt IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties Bitrate Gets the bit-rate that the clients in this voice channel are requested to use. int Bitrate { get; } Property Value int An int representing the bit-rate (bps) that this voice channel defines and requests the client(s) to use. UserLimit Gets the max number of users allowed to be connected to this channel at once. int? UserLimit { get; } Property Value int? An int representing the maximum number of users that are allowed to be connected to this channel at once; null if a limit is not set. VideoQualityMode Gets the video quality mode for this channel. VideoQualityMode VideoQualityMode { get; } Property Value VideoQualityMode Methods ModifyAsync(Action<VoiceChannelProperties>, RequestOptions) Modifies this voice channel. Task ModifyAsync(Action<VoiceChannelProperties> func, RequestOptions options = null) Parameters func Action<VoiceChannelProperties> The properties to modify the channel with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. See Also VoiceChannelProperties SetStatusAsync(string, RequestOptions) Sets the voice channel status in the current channel. Task SetStatusAsync(string status, RequestOptions options = null) Parameters status string The string to set as status. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation."
  },
  "api/Discord.IVoiceRegion.html": {
    "href": "api/Discord.IVoiceRegion.html",
    "title": "Interface IVoiceRegion | Discord.Net Documentation",
    "keywords": "Interface IVoiceRegion Namespace Discord Assembly Discord.Net.Core.dll Represents a region of which the user connects to when using voice. public interface IVoiceRegion Properties Id Gets the unique identifier for this voice region. string Id { get; } Property Value string A string that represents the identifier for this voice region (e.g. eu-central). IsCustom Gets a value that indicates whether this voice region is custom-made for events. bool IsCustom { get; } Property Value bool true if this is a custom voice region (used for events/etc); otherwise false/ IsDeprecated Gets a value that indicates whether this voice region is no longer being maintained. bool IsDeprecated { get; } Property Value bool true if this is a deprecated voice region; otherwise false. IsOptimal Gets a value that indicates whether this voice region is optimal for your client in terms of latency. bool IsOptimal { get; } Property Value bool true if this voice region is the closest to your machine; otherwise false . IsVip Gets a value that indicates whether or not this voice region is exclusive to partnered servers. bool IsVip { get; } Property Value bool true if this voice region is exclusive to VIP accounts; otherwise false. Name Gets the name of this voice region. string Name { get; } Property Value string A string that represents the human-readable name of this voice region (e.g. Central Europe)."
  },
  "api/Discord.IVoiceState.html": {
    "href": "api/Discord.IVoiceState.html",
    "title": "Interface IVoiceState | Discord.Net Documentation",
    "keywords": "Interface IVoiceState Namespace Discord Assembly Discord.Net.Core.dll Represents a user's voice connection status. public interface IVoiceState Properties IsDeafened Gets a value that indicates whether this user is deafened by the guild. bool IsDeafened { get; } Property Value bool true if the user is deafened (i.e. not permitted to listen to or speak to others) by the guild; otherwise false. IsMuted Gets a value that indicates whether this user is muted (i.e. not permitted to speak via voice) by the guild. bool IsMuted { get; } Property Value bool true if this user is muted by the guild; otherwise false. IsSelfDeafened Gets a value that indicates whether this user has marked themselves as deafened. bool IsSelfDeafened { get; } Property Value bool true if this user has deafened themselves (i.e. not permitted to listen to or speak to others); otherwise false. IsSelfMuted Gets a value that indicates whether this user has marked themselves as muted (i.e. not permitted to speak via voice). bool IsSelfMuted { get; } Property Value bool true if this user has muted themselves; otherwise false. IsStreaming Gets a value that indicates if this user is streaming in a voice channel. bool IsStreaming { get; } Property Value bool true if the user is streaming; otherwise false. IsSuppressed Gets a value that indicates whether the user is muted by the current user. bool IsSuppressed { get; } Property Value bool true if the guild is temporarily blocking audio to/from this user; otherwise false. IsVideoing Gets a value that indicates if the user is videoing in a voice channel. bool IsVideoing { get; } Property Value bool true if the user has their camera turned on; otherwise false. RequestToSpeakTimestamp Gets the time on which the user requested to speak. DateTimeOffset? RequestToSpeakTimestamp { get; } Property Value DateTimeOffset? VoiceChannel Gets the voice channel this user is currently in. IVoiceChannel VoiceChannel { get; } Property Value IVoiceChannel A generic voice channel object representing the voice channel that the user is currently in; null if none. VoiceSessionId Gets the unique identifier for this user's voice session. string VoiceSessionId { get; } Property Value string"
  },
  "api/Discord.IWebhook.html": {
    "href": "api/Discord.IWebhook.html",
    "title": "Interface IWebhook | Discord.Net Documentation",
    "keywords": "Interface IWebhook Namespace Discord Assembly Discord.Net.Core.dll Represents a webhook object on Discord. public interface IWebhook : IDeletable, ISnowflakeEntity, IEntity<ulong> Inherited Members IDeletable.DeleteAsync(RequestOptions) ISnowflakeEntity.CreatedAt IEntity<ulong>.Id Properties ApplicationId Gets the ID of the application owning this webhook. ulong? ApplicationId { get; } Property Value ulong? AvatarId Gets the ID of this webhook's default avatar. string AvatarId { get; } Property Value string Channel Gets the channel for this webhook. IIntegrationChannel Channel { get; } Property Value IIntegrationChannel ChannelId Gets the ID of the channel for this webhook; null for Application webhooks. ulong? ChannelId { get; } Property Value ulong? Creator Gets the user that created this webhook. IUser Creator { get; } Property Value IUser Guild Gets the guild owning this webhook. IGuild Guild { get; } Property Value IGuild GuildId Gets the ID of the guild owning this webhook. ulong? GuildId { get; } Property Value ulong? Name Gets the default name of this webhook. string Name { get; } Property Value string Token Gets the token of this webhook; null if the Type is ChannelFollower. string Token { get; } Property Value string Type Gets the type of this webhook. WebhookType Type { get; } Property Value WebhookType Methods GetAvatarUrl(ImageFormat, ushort) Gets the URL to this webhook's default avatar. string GetAvatarUrl(ImageFormat format = ImageFormat.Auto, ushort size = 128) Parameters format ImageFormat size ushort Returns string ModifyAsync(Action<WebhookProperties>, RequestOptions) Modifies this webhook. Task ModifyAsync(Action<WebhookProperties> func, RequestOptions options = null) Parameters func Action<WebhookProperties> options RequestOptions Returns Task"
  },
  "api/Discord.IWebhookUser.html": {
    "href": "api/Discord.IWebhookUser.html",
    "title": "Interface IWebhookUser | Discord.Net Documentation",
    "keywords": "Interface IWebhookUser Namespace Discord Assembly Discord.Net.Core.dll Represents a Webhook Discord user. public interface IWebhookUser : IGuildUser, IUser, ISnowflakeEntity, IEntity<ulong>, IMentionable, IPresence, IVoiceState Inherited Members IGuildUser.JoinedAt IGuildUser.DisplayName IGuildUser.Nickname IGuildUser.DisplayAvatarId IGuildUser.GuildAvatarId IGuildUser.GuildPermissions IGuildUser.Guild IGuildUser.GuildId IGuildUser.PremiumSince IGuildUser.RoleIds IGuildUser.IsPending IGuildUser.Hierarchy IGuildUser.TimedOutUntil IGuildUser.Flags IGuildUser.GetPermissions(IGuildChannel) IGuildUser.GetGuildAvatarUrl(ImageFormat, ushort) IGuildUser.KickAsync(string, RequestOptions) IGuildUser.ModifyAsync(Action<GuildUserProperties>, RequestOptions) IGuildUser.AddRoleAsync(ulong, RequestOptions) IGuildUser.AddRoleAsync(IRole, RequestOptions) IGuildUser.AddRolesAsync(IEnumerable<ulong>, RequestOptions) IGuildUser.AddRolesAsync(IEnumerable<IRole>, RequestOptions) IGuildUser.RemoveRoleAsync(ulong, RequestOptions) IGuildUser.RemoveRoleAsync(IRole, RequestOptions) IGuildUser.RemoveRolesAsync(IEnumerable<ulong>, RequestOptions) IGuildUser.RemoveRolesAsync(IEnumerable<IRole>, RequestOptions) IGuildUser.SetTimeOutAsync(TimeSpan, RequestOptions) IGuildUser.RemoveTimeOutAsync(RequestOptions) IUser.AvatarId IUser.GetAvatarUrl(ImageFormat, ushort) IUser.GetDefaultAvatarUrl() IUser.GetDisplayAvatarUrl(ImageFormat, ushort) IUser.Discriminator IUser.DiscriminatorValue IUser.IsBot IUser.IsWebhook IUser.Username IUser.PublicFlags IUser.GlobalName IUser.AvatarDecorationHash IUser.AvatarDecorationSkuId IUser.CreateDMChannelAsync(RequestOptions) IUser.GetAvatarDecorationUrl() ISnowflakeEntity.CreatedAt IEntity<ulong>.Id IMentionable.Mention IPresence.Status IPresence.ActiveClients IPresence.Activities IVoiceState.IsDeafened IVoiceState.IsMuted IVoiceState.IsSelfDeafened IVoiceState.IsSelfMuted IVoiceState.IsSuppressed IVoiceState.VoiceChannel IVoiceState.VoiceSessionId IVoiceState.IsStreaming IVoiceState.IsVideoing IVoiceState.RequestToSpeakTimestamp Extension Methods UserExtensions.BanAsync(IGuildUser, int, string, RequestOptions) UserExtensions.SendFileAsync(IUser, FileAttachment, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, Stream, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFilesAsync(IUser, IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendMessageAsync(IUser, string, bool, Embed, RequestOptions, AllowedMentions, MessageComponent, Embed[]) Properties WebhookId Gets the ID of a webhook. ulong WebhookId { get; } Property Value ulong"
  },
  "api/Discord.Image.html": {
    "href": "api/Discord.Image.html",
    "title": "Struct Image | Discord.Net Documentation",
    "keywords": "Struct Image Namespace Discord Assembly Discord.Net.Core.dll An image that will be uploaded to Discord. public struct Image : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Image(Stream) Create the image with a Stream. public Image(Stream stream) Parameters stream Stream The Stream to create the image with. Note that this must be some type of stream with the contents of a file in it. Image(string) Create the image from a file path. public Image(string path) Parameters path string The path to the file. Remarks This file path is NOT validated and is passed directly into a OpenRead(string). Exceptions ArgumentException path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by GetInvalidPathChars(). ArgumentNullException path is null. PathTooLongException The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. NotSupportedException path is in an invalid format. DirectoryNotFoundException The specified path is invalid, (for example, it is on an unmapped drive). UnauthorizedAccessException path specified a directory.-or- The caller does not have the required permission. FileNotFoundException The file specified in path was not found. IOException An I/O error occurred while opening the file. Properties Stream Gets the stream to be uploaded to Discord. public readonly Stream Stream { get; } Property Value Stream Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "api/Discord.ImageFormat.html": {
    "href": "api/Discord.ImageFormat.html",
    "title": "Enum ImageFormat | Discord.Net Documentation",
    "keywords": "Enum ImageFormat Namespace Discord Assembly Discord.Net.Core.dll Specifies the type of format the image should return in. public enum ImageFormat Fields Auto = 0 Use automatically detected format. Gif = 4 Use GIF. Jpeg = 3 Use JPEG. Png = 2 Use PNG. WebP = 1 Use Google's WebP image format."
  },
  "api/Discord.IntegrationExpireBehavior.html": {
    "href": "api/Discord.IntegrationExpireBehavior.html",
    "title": "Enum IntegrationExpireBehavior | Discord.Net Documentation",
    "keywords": "Enum IntegrationExpireBehavior Namespace Discord Assembly Discord.Net.Core.dll The behavior of expiring subscribers for an IIntegration. public enum IntegrationExpireBehavior Fields Kick = 1 Kicks an expired subscriber from the guild. RemoveRole = 0 Removes a role from an expired subscriber."
  },
  "api/Discord.InteractionResponseType.html": {
    "href": "api/Discord.InteractionResponseType.html",
    "title": "Enum InteractionResponseType | Discord.Net Documentation",
    "keywords": "Enum InteractionResponseType Namespace Discord Assembly Discord.Net.Core.dll The response type for an IDiscordInteraction. public enum InteractionResponseType : byte Fields ApplicationCommandAutocompleteResult = 8 Respond with a set of choices to a autocomplete interaction. ChannelMessageWithSource = 4 Respond to an interaction with a message. DeferredChannelMessageWithSource = 5 ACK an interaction and edit a response later, the user sees a loading state. DeferredUpdateMessage = 6 For components: ACK an interaction and edit the original message later; the user does not see a loading state. Modal = 9 Respond by showing the user a modal. Pong = 1 ACK a Ping. PremiumRequired = 10 Respond to an interaction with an upgrade button, only available for apps with monetization enabled. UpdateMessage = 7 For components: edit the message the component was attached to. Remarks After receiving an interaction, you must respond to acknowledge it. You can choose to respond with a message immediately using ChannelMessageWithSource or you can choose to send a deferred response with DeferredChannelMessageWithSource. If choosing a deferred response, the user will see a loading state for the interaction, and you'll have up to 15 minutes to edit the original deferred response using Edit Original Interaction Response. You can read more about Response types Here."
  },
  "api/Discord.InteractionType.html": {
    "href": "api/Discord.InteractionType.html",
    "title": "Enum InteractionType | Discord.Net Documentation",
    "keywords": "Enum InteractionType Namespace Discord Assembly Discord.Net.Core.dll Represents a type of Interaction from discord. public enum InteractionType : byte Fields ApplicationCommand = 2 A IApplicationCommand sent from discord. ApplicationCommandAutocomplete = 4 An autocomplete request sent from discord. MessageComponent = 3 A IMessageComponent sent from discord. ModalSubmit = 5 A modal sent from discord. Ping = 1 A ping from discord."
  },
  "api/Discord.Interactions.AutocompleteAttribute.html": {
    "href": "api/Discord.Interactions.AutocompleteAttribute.html",
    "title": "Class AutocompleteAttribute | Discord.Net Documentation",
    "keywords": "Class AutocompleteAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Set the IsAutocomplete to true. [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false, Inherited = true)] public class AutocompleteAttribute : Attribute Inheritance object Attribute AutocompleteAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AutocompleteAttribute() Set the IsAutocomplete to true without specifying a AutocompleteHandler. public AutocompleteAttribute() AutocompleteAttribute(Type) Set the IsAutocomplete to true and define a AutocompleteHandler to handle Autocomplete interactions targeting the parameter this Attribute is applied to. public AutocompleteAttribute(Type autocompleteHandlerType) Parameters autocompleteHandlerType Type Remarks EnableAutocompleteHandlers must be set to true to use this constructor. Properties AutocompleteHandlerType Type of the AutocompleteHandler. public Type AutocompleteHandlerType { get; } Property Value Type"
  },
  "api/Discord.Interactions.AutocompleteCommandAttribute.html": {
    "href": "api/Discord.Interactions.AutocompleteCommandAttribute.html",
    "title": "Class AutocompleteCommandAttribute | Discord.Net Documentation",
    "keywords": "Class AutocompleteCommandAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Create an Autocomplete Command. [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = true)] public class AutocompleteCommandAttribute : Attribute Inheritance object Attribute AutocompleteCommandAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AutocompleteCommandAttribute(string, string, RunMode) Create a command for Autocomplete interaction handling. public AutocompleteCommandAttribute(string parameterName, string commandName, RunMode runMode = RunMode.Default) Parameters parameterName string Name of the target parameter. commandName string Name of the target command. runMode RunMode Set the run mode of the command. Properties CommandName Gets the name of the target command. public string CommandName { get; } Property Value string ParameterName Gets the name of the target parameter. public string ParameterName { get; } Property Value string RunMode Get the run mode this command gets executed with. public RunMode RunMode { get; } Property Value RunMode"
  },
  "api/Discord.Interactions.AutocompleteCommandInfo.html": {
    "href": "api/Discord.Interactions.AutocompleteCommandInfo.html",
    "title": "Class AutocompleteCommandInfo | Discord.Net Documentation",
    "keywords": "Class AutocompleteCommandInfo Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represents the info class of an attribute based method for handling Autocomplete Interaction events. public sealed class AutocompleteCommandInfo : CommandInfo<CommandParameterInfo>, ICommandInfo Inheritance object CommandInfo<CommandParameterInfo> AutocompleteCommandInfo Implements ICommandInfo Inherited Members CommandInfo<CommandParameterInfo>.Module CommandInfo<CommandParameterInfo>.CommandService CommandInfo<CommandParameterInfo>.Name CommandInfo<CommandParameterInfo>.MethodName CommandInfo<CommandParameterInfo>.IgnoreGroupNames CommandInfo<CommandParameterInfo>.IsTopLevelCommand CommandInfo<CommandParameterInfo>.RunMode CommandInfo<CommandParameterInfo>.Attributes CommandInfo<CommandParameterInfo>.Preconditions CommandInfo<CommandParameterInfo>.TreatNameAsRegex CommandInfo<CommandParameterInfo>.CheckPreconditionsAsync(IInteractionContext, IServiceProvider) CommandInfo<CommandParameterInfo>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Properties CommandName Gets the name of the target command. public string CommandName { get; } Property Value string ParameterName Gets the name of the target parameter. public string ParameterName { get; } Property Value string Parameters Gets a collection of the parameters of this command. public override IReadOnlyList<CommandParameterInfo> Parameters { get; } Property Value IReadOnlyList<CommandParameterInfo> SupportsWildCards Gets whether this command supports wild card patterns. public override bool SupportsWildCards { get; } Property Value bool Methods ExecuteAsync(IInteractionContext, IServiceProvider) Executes the command with the provided context. public override Task<IResult> ExecuteAsync(IInteractionContext context, IServiceProvider services) Parameters context IInteractionContext The execution context. services IServiceProvider Dependencies that will be used to create the module instance. Returns Task<IResult> A task representing the execution process. The task result contains the execution result. GetLogString(IInteractionContext) protected override string GetLogString(IInteractionContext context) Parameters context IInteractionContext Returns string InvokeModuleEvent(IInteractionContext, IResult) protected override Task InvokeModuleEvent(IInteractionContext context, IResult result) Parameters context IInteractionContext result IResult Returns Task ParseArgumentsAsync(IInteractionContext, IServiceProvider) protected override Task<IResult> ParseArgumentsAsync(IInteractionContext context, IServiceProvider services) Parameters context IInteractionContext services IServiceProvider Returns Task<IResult>"
  },
  "api/Discord.Interactions.AutocompleteHandler.html": {
    "href": "api/Discord.Interactions.AutocompleteHandler.html",
    "title": "Class AutocompleteHandler | Discord.Net Documentation",
    "keywords": "Class AutocompleteHandler Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Base class for creating Autocompleters. InteractionService uses Autocompleters to generate parameter suggestions. public abstract class AutocompleteHandler : IAutocompleteHandler Inheritance object AutocompleteHandler Implements IAutocompleteHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties InteractionService Gets the the underlying command service. public InteractionService InteractionService { get; set; } Property Value InteractionService Methods ExecuteAsync(IInteractionContext, IAutocompleteInteraction, IParameterInfo, IServiceProvider) Executes the IAutocompleteHandler with the provided context. public Task<IResult> ExecuteAsync(IInteractionContext context, IAutocompleteInteraction autocompleteInteraction, IParameterInfo parameter, IServiceProvider services) Parameters context IInteractionContext The execution context. autocompleteInteraction IAutocompleteInteraction AutocompleteInteraction payload. parameter IParameterInfo Parameter information of the target parameter. services IServiceProvider Dependencies that will be used to create the module instance. Returns Task<IResult> A task representing the execution process. The task result contains the execution result. GenerateSuggestionsAsync(IInteractionContext, IAutocompleteInteraction, IParameterInfo, IServiceProvider) Will be used to generate parameter suggestions. public abstract Task<AutocompletionResult> GenerateSuggestionsAsync(IInteractionContext context, IAutocompleteInteraction autocompleteInteraction, IParameterInfo parameter, IServiceProvider services) Parameters context IInteractionContext Command execution context. autocompleteInteraction IAutocompleteInteraction Autocomplete Interaction payload. parameter IParameterInfo Parameter information of the target parameter. services IServiceProvider Dependencies that will be used to create the module instance. Returns Task<AutocompletionResult> A task representing the execution process. The task result contains the Autocompletion result. GetLogString(IInteractionContext) protected virtual string GetLogString(IInteractionContext context) Parameters context IInteractionContext Returns string"
  },
  "api/Discord.Interactions.AutocompletionResult.html": {
    "href": "api/Discord.Interactions.AutocompletionResult.html",
    "title": "Struct AutocompletionResult | Discord.Net Documentation",
    "keywords": "Struct AutocompletionResult Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Contains the information of a Autocomplete Interaction result. public struct AutocompletionResult : IResult Implements IResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Error Gets the error type that may have occurred during the operation. public readonly InteractionCommandError? Error { get; } Property Value InteractionCommandError? A InteractionCommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. ErrorReason Gets the reason for the error. public readonly string ErrorReason { get; } Property Value string A string containing the error reason. IsSuccess Indicates whether the operation was successful or not. public bool IsSuccess { get; } Property Value bool true if the result is positive; otherwise false. Suggestions Get the collection of Autocomplete suggestions to be displayed to the user. public readonly IReadOnlyCollection<AutocompleteResult> Suggestions { get; } Property Value IReadOnlyCollection<AutocompleteResult> Methods FromError(IResult) Initializes a new AutocompletionResult with a specified result; this may or may not be an successful execution depending on the Error and ErrorReason specified. public static AutocompletionResult FromError(IResult result) Parameters result IResult The result to inherit from. Returns AutocompletionResult A AutocompletionResult that inherits the IResult error type and reason. FromError(InteractionCommandError, string) Initializes a new AutocompletionResult with a specified InteractionCommandError and its reason, indicating an unsuccessful execution. public static AutocompletionResult FromError(InteractionCommandError error, string reason) Parameters error InteractionCommandError The type of error. reason string The reason behind the error. Returns AutocompletionResult A AutocompletionResult that contains a InteractionCommandError and reason. FromError(Exception) Initializes a new AutocompletionResult with a specified exception, indicating an unsuccessful execution. public static AutocompletionResult FromError(Exception exception) Parameters exception Exception The exception that caused the autocomplete process to fail. Returns AutocompletionResult A AutocompletionResult that contains the exception that caused the unsuccessful execution, along with a InteractionCommandError of type Exception as well as the exception message as the reason. FromSuccess() Initializes a new AutocompletionResult with no error and without any AutocompleteResult indicating the command service shouldn't return any suggestions. public static AutocompletionResult FromSuccess() Returns AutocompletionResult A AutocompletionResult that does not contain any errors. FromSuccess(IEnumerable<AutocompleteResult>) Initializes a new AutocompletionResult with no error. public static AutocompletionResult FromSuccess(IEnumerable<AutocompleteResult> suggestions) Parameters suggestions IEnumerable<AutocompleteResult> Autocomplete suggestions to be displayed to the user Returns AutocompletionResult A AutocompletionResult that does not contain any errors. ToString() Gets a string that indicates the autocompletion result. public override string ToString() Returns string Success if IsSuccess is true; otherwise \"Error: ErrorReason\"."
  },
  "api/Discord.Interactions.Builders.AutocompleteCommandBuilder.html": {
    "href": "api/Discord.Interactions.Builders.AutocompleteCommandBuilder.html",
    "title": "Class AutocompleteCommandBuilder | Discord.Net Documentation",
    "keywords": "Class AutocompleteCommandBuilder Namespace Discord.Interactions.Builders Assembly Discord.Net.Interactions.dll Represents a builder for creating AutocompleteCommandInfo. public sealed class AutocompleteCommandBuilder : CommandBuilder<AutocompleteCommandInfo, AutocompleteCommandBuilder, CommandParameterBuilder>, ICommandBuilder Inheritance object CommandBuilder<AutocompleteCommandInfo, AutocompleteCommandBuilder, CommandParameterBuilder> AutocompleteCommandBuilder Implements ICommandBuilder Inherited Members CommandBuilder<AutocompleteCommandInfo, AutocompleteCommandBuilder, CommandParameterBuilder>.Module CommandBuilder<AutocompleteCommandInfo, AutocompleteCommandBuilder, CommandParameterBuilder>.Callback CommandBuilder<AutocompleteCommandInfo, AutocompleteCommandBuilder, CommandParameterBuilder>.Name CommandBuilder<AutocompleteCommandInfo, AutocompleteCommandBuilder, CommandParameterBuilder>.MethodName CommandBuilder<AutocompleteCommandInfo, AutocompleteCommandBuilder, CommandParameterBuilder>.IgnoreGroupNames CommandBuilder<AutocompleteCommandInfo, AutocompleteCommandBuilder, CommandParameterBuilder>.TreatNameAsRegex CommandBuilder<AutocompleteCommandInfo, AutocompleteCommandBuilder, CommandParameterBuilder>.RunMode CommandBuilder<AutocompleteCommandInfo, AutocompleteCommandBuilder, CommandParameterBuilder>.Attributes CommandBuilder<AutocompleteCommandInfo, AutocompleteCommandBuilder, CommandParameterBuilder>.Parameters CommandBuilder<AutocompleteCommandInfo, AutocompleteCommandBuilder, CommandParameterBuilder>.Preconditions CommandBuilder<AutocompleteCommandInfo, AutocompleteCommandBuilder, CommandParameterBuilder>.WithName(string) CommandBuilder<AutocompleteCommandInfo, AutocompleteCommandBuilder, CommandParameterBuilder>.WithMethodName(string) CommandBuilder<AutocompleteCommandInfo, AutocompleteCommandBuilder, CommandParameterBuilder>.WithAttributes(params Attribute[]) CommandBuilder<AutocompleteCommandInfo, AutocompleteCommandBuilder, CommandParameterBuilder>.SetRunMode(RunMode) CommandBuilder<AutocompleteCommandInfo, AutocompleteCommandBuilder, CommandParameterBuilder>.WithNameAsRegex(bool) CommandBuilder<AutocompleteCommandInfo, AutocompleteCommandBuilder, CommandParameterBuilder>.AddParameters(params CommandParameterBuilder[]) CommandBuilder<AutocompleteCommandInfo, AutocompleteCommandBuilder, CommandParameterBuilder>.WithPreconditions(params PreconditionAttribute[]) CommandBuilder<AutocompleteCommandInfo, AutocompleteCommandBuilder, CommandParameterBuilder>.AddParameter(Action<CommandParameterBuilder>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors AutocompleteCommandBuilder(ModuleBuilder, string, ExecuteCallback) Initializes a new AutocompleteCommandBuilder. public AutocompleteCommandBuilder(ModuleBuilder module, string name, ExecuteCallback callback) Parameters module ModuleBuilder Parent module of this command. name string Name of this command. callback ExecuteCallback Execution callback of this command. Properties CommandName Gets the name of the target command. public string CommandName { get; set; } Property Value string Instance protected override AutocompleteCommandBuilder Instance { get; } Property Value AutocompleteCommandBuilder ParameterName Gets the name of the target parameter. public string ParameterName { get; set; } Property Value string Methods AddParameter(Action<CommandParameterBuilder>) Adds a command parameter to the parameters collection. public override AutocompleteCommandBuilder AddParameter(Action<CommandParameterBuilder> configure) Parameters configure Action<CommandParameterBuilder> CommandParameterBuilder factory. Returns AutocompleteCommandBuilder The builder instance. WithCommandName(string) Sets CommandName. public AutocompleteCommandBuilder WithCommandName(string name) Parameters name string New value of the CommandName. Returns AutocompleteCommandBuilder The builder instance. WithParameterName(string) Sets ParameterName. public AutocompleteCommandBuilder WithParameterName(string name) Parameters name string New value of the ParameterName. Returns AutocompleteCommandBuilder The builder instance."
  },
  "api/Discord.Interactions.Builders.CommandBuilder-3.html": {
    "href": "api/Discord.Interactions.Builders.CommandBuilder-3.html",
    "title": "Class CommandBuilder<TInfo, TBuilder, TParamBuilder> | Discord.Net Documentation",
    "keywords": "Class CommandBuilder<TInfo, TBuilder, TParamBuilder> Namespace Discord.Interactions.Builders Assembly Discord.Net.Interactions.dll Represents the base builder class for creating CommandInfo<TParameter>. public abstract class CommandBuilder<TInfo, TBuilder, TParamBuilder> : ICommandBuilder where TInfo : class, ICommandInfo where TBuilder : CommandBuilder<TInfo, TBuilder, TParamBuilder> where TParamBuilder : class, IParameterBuilder Type Parameters TInfo The CommandInfo<TParameter> this builder yields when built. TBuilder Inherited CommandBuilder<TInfo, TBuilder, TParamBuilder> type. TParamBuilder Builder type for this commands parameters. Inheritance object CommandBuilder<TInfo, TBuilder, TParamBuilder> Implements ICommandBuilder Derived AutocompleteCommandBuilder ComponentCommandBuilder ContextCommandBuilder ModalCommandBuilder SlashCommandBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandBuilder(ModuleBuilder, string, ExecuteCallback) protected CommandBuilder(ModuleBuilder module, string name, ExecuteCallback callback) Parameters module ModuleBuilder name string callback ExecuteCallback Properties Attributes Gets a collection of the attributes of this command. public IReadOnlyList<Attribute> Attributes { get; } Property Value IReadOnlyList<Attribute> Callback Gets the execution delegate of this command. public ExecuteCallback Callback { get; } Property Value ExecuteCallback IgnoreGroupNames Gets or sets true if this command will be registered and executed as a standalone command, unaffected by the GroupAttributes of of the commands parents. public bool IgnoreGroupNames { get; set; } Property Value bool Instance protected abstract TBuilder Instance { get; } Property Value TBuilder MethodName Gets or sets the method name of this command. public string MethodName { get; set; } Property Value string Module Gets the parent module of this command. public ModuleBuilder Module { get; } Property Value ModuleBuilder Name Gets the name of this command. public string Name { get; } Property Value string Parameters public IReadOnlyList<TParamBuilder> Parameters { get; } Property Value IReadOnlyList<TParamBuilder> Preconditions Gets a collection of the preconditions of this command. public IReadOnlyList<PreconditionAttribute> Preconditions { get; } Property Value IReadOnlyList<PreconditionAttribute> RunMode Gets or sets the run mode this command gets executed with. public RunMode RunMode { get; set; } Property Value RunMode TreatNameAsRegex Gets or sets whether the Name should be directly used as a Regex pattern. public bool TreatNameAsRegex { get; set; } Property Value bool Methods AddParameter(Action<TParamBuilder>) public abstract TBuilder AddParameter(Action<TParamBuilder> configure) Parameters configure Action<TParamBuilder> Returns TBuilder AddParameters(params TParamBuilder[]) Adds parameter builders to Parameters. public TBuilder AddParameters(params TParamBuilder[] parameters) Parameters parameters TParamBuilder[] New parameter builders to be added to Parameters. Returns TBuilder The builder instance. SetRunMode(RunMode) Sets RunMode. public TBuilder SetRunMode(RunMode runMode) Parameters runMode RunMode New value of the RunMode. Returns TBuilder The builder instance. WithAttributes(params Attribute[]) Adds attributes to Attributes. public TBuilder WithAttributes(params Attribute[] attributes) Parameters attributes Attribute[] New attributes to be added to Attributes. Returns TBuilder The builder instance. WithMethodName(string) Sets MethodName. public TBuilder WithMethodName(string name) Parameters name string New value of the MethodName. Returns TBuilder The builder instance. WithName(string) Sets Name. public TBuilder WithName(string name) Parameters name string New value of the Name. Returns TBuilder The builder instance. WithNameAsRegex(bool) Sets TreatNameAsRegex. public TBuilder WithNameAsRegex(bool value) Parameters value bool New value of the TreatNameAsRegex. Returns TBuilder The builder instance. WithPreconditions(params PreconditionAttribute[]) Adds preconditions to Preconditions. public TBuilder WithPreconditions(params PreconditionAttribute[] preconditions) Parameters preconditions PreconditionAttribute[] New preconditions to be added to Preconditions. Returns TBuilder The builder instance."
  },
  "api/Discord.Interactions.Builders.CommandParameterBuilder.html": {
    "href": "api/Discord.Interactions.Builders.CommandParameterBuilder.html",
    "title": "Class CommandParameterBuilder | Discord.Net Documentation",
    "keywords": "Class CommandParameterBuilder Namespace Discord.Interactions.Builders Assembly Discord.Net.Interactions.dll Represents a builder for creating CommandParameterInfo. public sealed class CommandParameterBuilder : ParameterBuilder<CommandParameterInfo, CommandParameterBuilder>, IParameterBuilder Inheritance object ParameterBuilder<CommandParameterInfo, CommandParameterBuilder> CommandParameterBuilder Implements IParameterBuilder Inherited Members ParameterBuilder<CommandParameterInfo, CommandParameterBuilder>.Command ParameterBuilder<CommandParameterInfo, CommandParameterBuilder>.Name ParameterBuilder<CommandParameterInfo, CommandParameterBuilder>.ParameterType ParameterBuilder<CommandParameterInfo, CommandParameterBuilder>.IsRequired ParameterBuilder<CommandParameterInfo, CommandParameterBuilder>.IsParameterArray ParameterBuilder<CommandParameterInfo, CommandParameterBuilder>.DefaultValue ParameterBuilder<CommandParameterInfo, CommandParameterBuilder>.Attributes ParameterBuilder<CommandParameterInfo, CommandParameterBuilder>.Preconditions ParameterBuilder<CommandParameterInfo, CommandParameterBuilder>.WithName(string) ParameterBuilder<CommandParameterInfo, CommandParameterBuilder>.SetParameterType(Type) ParameterBuilder<CommandParameterInfo, CommandParameterBuilder>.SetRequired(bool) ParameterBuilder<CommandParameterInfo, CommandParameterBuilder>.SetDefaultValue(object) ParameterBuilder<CommandParameterInfo, CommandParameterBuilder>.AddAttributes(params Attribute[]) ParameterBuilder<CommandParameterInfo, CommandParameterBuilder>.AddPreconditions(params ParameterPreconditionAttribute[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CommandParameterBuilder(ICommandBuilder, string, Type) Initializes a new CommandParameterInfo. public CommandParameterBuilder(ICommandBuilder command, string name, Type type) Parameters command ICommandBuilder Parent command of this parameter. name string Name of this command. type Type Type of this parameter. Properties Instance protected override CommandParameterBuilder Instance { get; } Property Value CommandParameterBuilder"
  },
  "api/Discord.Interactions.Builders.ComponentCommandBuilder.html": {
    "href": "api/Discord.Interactions.Builders.ComponentCommandBuilder.html",
    "title": "Class ComponentCommandBuilder | Discord.Net Documentation",
    "keywords": "Class ComponentCommandBuilder Namespace Discord.Interactions.Builders Assembly Discord.Net.Interactions.dll Represents a builder for creating ComponentCommandInfo. public sealed class ComponentCommandBuilder : CommandBuilder<ComponentCommandInfo, ComponentCommandBuilder, ComponentCommandParameterBuilder>, ICommandBuilder Inheritance object CommandBuilder<ComponentCommandInfo, ComponentCommandBuilder, ComponentCommandParameterBuilder> ComponentCommandBuilder Implements ICommandBuilder Inherited Members CommandBuilder<ComponentCommandInfo, ComponentCommandBuilder, ComponentCommandParameterBuilder>.Module CommandBuilder<ComponentCommandInfo, ComponentCommandBuilder, ComponentCommandParameterBuilder>.Callback CommandBuilder<ComponentCommandInfo, ComponentCommandBuilder, ComponentCommandParameterBuilder>.Name CommandBuilder<ComponentCommandInfo, ComponentCommandBuilder, ComponentCommandParameterBuilder>.MethodName CommandBuilder<ComponentCommandInfo, ComponentCommandBuilder, ComponentCommandParameterBuilder>.IgnoreGroupNames CommandBuilder<ComponentCommandInfo, ComponentCommandBuilder, ComponentCommandParameterBuilder>.TreatNameAsRegex CommandBuilder<ComponentCommandInfo, ComponentCommandBuilder, ComponentCommandParameterBuilder>.RunMode CommandBuilder<ComponentCommandInfo, ComponentCommandBuilder, ComponentCommandParameterBuilder>.Attributes CommandBuilder<ComponentCommandInfo, ComponentCommandBuilder, ComponentCommandParameterBuilder>.Parameters CommandBuilder<ComponentCommandInfo, ComponentCommandBuilder, ComponentCommandParameterBuilder>.Preconditions CommandBuilder<ComponentCommandInfo, ComponentCommandBuilder, ComponentCommandParameterBuilder>.WithName(string) CommandBuilder<ComponentCommandInfo, ComponentCommandBuilder, ComponentCommandParameterBuilder>.WithMethodName(string) CommandBuilder<ComponentCommandInfo, ComponentCommandBuilder, ComponentCommandParameterBuilder>.WithAttributes(params Attribute[]) CommandBuilder<ComponentCommandInfo, ComponentCommandBuilder, ComponentCommandParameterBuilder>.SetRunMode(RunMode) CommandBuilder<ComponentCommandInfo, ComponentCommandBuilder, ComponentCommandParameterBuilder>.WithNameAsRegex(bool) CommandBuilder<ComponentCommandInfo, ComponentCommandBuilder, ComponentCommandParameterBuilder>.AddParameters(params ComponentCommandParameterBuilder[]) CommandBuilder<ComponentCommandInfo, ComponentCommandBuilder, ComponentCommandParameterBuilder>.WithPreconditions(params PreconditionAttribute[]) CommandBuilder<ComponentCommandInfo, ComponentCommandBuilder, ComponentCommandParameterBuilder>.AddParameter(Action<ComponentCommandParameterBuilder>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ComponentCommandBuilder(ModuleBuilder, string, ExecuteCallback) Initializes a new ComponentBuilder. public ComponentCommandBuilder(ModuleBuilder module, string name, ExecuteCallback callback) Parameters module ModuleBuilder Parent module of this command. name string Name of this command. callback ExecuteCallback Execution callback of this command. Properties Instance protected override ComponentCommandBuilder Instance { get; } Property Value ComponentCommandBuilder Methods AddParameter(Action<ComponentCommandParameterBuilder>) Adds a command parameter to the parameters collection. public override ComponentCommandBuilder AddParameter(Action<ComponentCommandParameterBuilder> configure) Parameters configure Action<ComponentCommandParameterBuilder> CommandParameterBuilder factory. Returns ComponentCommandBuilder The builder instance."
  },
  "api/Discord.Interactions.Builders.ComponentCommandParameterBuilder.html": {
    "href": "api/Discord.Interactions.Builders.ComponentCommandParameterBuilder.html",
    "title": "Class ComponentCommandParameterBuilder | Discord.Net Documentation",
    "keywords": "Class ComponentCommandParameterBuilder Namespace Discord.Interactions.Builders Assembly Discord.Net.Interactions.dll Represents a builder for creating ComponentCommandParameterInfo. public class ComponentCommandParameterBuilder : ParameterBuilder<ComponentCommandParameterInfo, ComponentCommandParameterBuilder>, IParameterBuilder Inheritance object ParameterBuilder<ComponentCommandParameterInfo, ComponentCommandParameterBuilder> ComponentCommandParameterBuilder Implements IParameterBuilder Inherited Members ParameterBuilder<ComponentCommandParameterInfo, ComponentCommandParameterBuilder>.Command ParameterBuilder<ComponentCommandParameterInfo, ComponentCommandParameterBuilder>.Name ParameterBuilder<ComponentCommandParameterInfo, ComponentCommandParameterBuilder>.ParameterType ParameterBuilder<ComponentCommandParameterInfo, ComponentCommandParameterBuilder>.IsRequired ParameterBuilder<ComponentCommandParameterInfo, ComponentCommandParameterBuilder>.IsParameterArray ParameterBuilder<ComponentCommandParameterInfo, ComponentCommandParameterBuilder>.DefaultValue ParameterBuilder<ComponentCommandParameterInfo, ComponentCommandParameterBuilder>.Attributes ParameterBuilder<ComponentCommandParameterInfo, ComponentCommandParameterBuilder>.Preconditions ParameterBuilder<ComponentCommandParameterInfo, ComponentCommandParameterBuilder>.Instance ParameterBuilder<ComponentCommandParameterInfo, ComponentCommandParameterBuilder>.WithName(string) ParameterBuilder<ComponentCommandParameterInfo, ComponentCommandParameterBuilder>.SetParameterType(Type) ParameterBuilder<ComponentCommandParameterInfo, ComponentCommandParameterBuilder>.SetRequired(bool) ParameterBuilder<ComponentCommandParameterInfo, ComponentCommandParameterBuilder>.SetDefaultValue(object) ParameterBuilder<ComponentCommandParameterInfo, ComponentCommandParameterBuilder>.AddAttributes(params Attribute[]) ParameterBuilder<ComponentCommandParameterInfo, ComponentCommandParameterBuilder>.AddPreconditions(params ParameterPreconditionAttribute[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ComponentCommandParameterBuilder(ICommandBuilder, string, Type) Initializes a new ComponentCommandParameterBuilder. public ComponentCommandParameterBuilder(ICommandBuilder command, string name, Type type) Parameters command ICommandBuilder Parent command of this parameter. name string Name of this command. type Type Type of this parameter. Properties Instance protected override ComponentCommandParameterBuilder Instance { get; } Property Value ComponentCommandParameterBuilder IsRouteSegmentParameter Gets whether this parameter is a CustomId segment or a Component value parameter. public bool IsRouteSegmentParameter { get; } Property Value bool TypeConverter Get the ComponentTypeConverter assigned to this parameter, if IsRouteSegmentParameter is false. public ComponentTypeConverter TypeConverter { get; } Property Value ComponentTypeConverter TypeReader Get the TypeReader assigned to this parameter, if IsRouteSegmentParameter is true. public TypeReader TypeReader { get; } Property Value TypeReader Methods SetIsRouteSegment(bool) Sets IsRouteSegmentParameter. public ComponentCommandParameterBuilder SetIsRouteSegment(bool isRouteSegment) Parameters isRouteSegment bool New value of the IsRouteSegmentParameter. Returns ComponentCommandParameterBuilder The builder instance. SetParameterType(Type) Sets ParameterType. public override ComponentCommandParameterBuilder SetParameterType(Type type) Parameters type Type New value of the ParameterType. Returns ComponentCommandParameterBuilder The builder instance. SetParameterType(Type, IServiceProvider) Sets ParameterType. public ComponentCommandParameterBuilder SetParameterType(Type type, IServiceProvider services) Parameters type Type New value of the ParameterType. services IServiceProvider Service container to be used to resolve the dependencies of this parameters TypeConverter. Returns ComponentCommandParameterBuilder The builder instance."
  },
  "api/Discord.Interactions.Builders.ContextCommandBuilder.html": {
    "href": "api/Discord.Interactions.Builders.ContextCommandBuilder.html",
    "title": "Class ContextCommandBuilder | Discord.Net Documentation",
    "keywords": "Class ContextCommandBuilder Namespace Discord.Interactions.Builders Assembly Discord.Net.Interactions.dll Represents a builder for creating ContextCommandInfo. public sealed class ContextCommandBuilder : CommandBuilder<ContextCommandInfo, ContextCommandBuilder, CommandParameterBuilder>, ICommandBuilder Inheritance object CommandBuilder<ContextCommandInfo, ContextCommandBuilder, CommandParameterBuilder> ContextCommandBuilder Implements ICommandBuilder Inherited Members CommandBuilder<ContextCommandInfo, ContextCommandBuilder, CommandParameterBuilder>.Module CommandBuilder<ContextCommandInfo, ContextCommandBuilder, CommandParameterBuilder>.Callback CommandBuilder<ContextCommandInfo, ContextCommandBuilder, CommandParameterBuilder>.Name CommandBuilder<ContextCommandInfo, ContextCommandBuilder, CommandParameterBuilder>.MethodName CommandBuilder<ContextCommandInfo, ContextCommandBuilder, CommandParameterBuilder>.IgnoreGroupNames CommandBuilder<ContextCommandInfo, ContextCommandBuilder, CommandParameterBuilder>.TreatNameAsRegex CommandBuilder<ContextCommandInfo, ContextCommandBuilder, CommandParameterBuilder>.RunMode CommandBuilder<ContextCommandInfo, ContextCommandBuilder, CommandParameterBuilder>.Attributes CommandBuilder<ContextCommandInfo, ContextCommandBuilder, CommandParameterBuilder>.Parameters CommandBuilder<ContextCommandInfo, ContextCommandBuilder, CommandParameterBuilder>.Preconditions CommandBuilder<ContextCommandInfo, ContextCommandBuilder, CommandParameterBuilder>.WithName(string) CommandBuilder<ContextCommandInfo, ContextCommandBuilder, CommandParameterBuilder>.WithMethodName(string) CommandBuilder<ContextCommandInfo, ContextCommandBuilder, CommandParameterBuilder>.WithAttributes(params Attribute[]) CommandBuilder<ContextCommandInfo, ContextCommandBuilder, CommandParameterBuilder>.SetRunMode(RunMode) CommandBuilder<ContextCommandInfo, ContextCommandBuilder, CommandParameterBuilder>.WithNameAsRegex(bool) CommandBuilder<ContextCommandInfo, ContextCommandBuilder, CommandParameterBuilder>.AddParameters(params CommandParameterBuilder[]) CommandBuilder<ContextCommandInfo, ContextCommandBuilder, CommandParameterBuilder>.WithPreconditions(params PreconditionAttribute[]) CommandBuilder<ContextCommandInfo, ContextCommandBuilder, CommandParameterBuilder>.AddParameter(Action<CommandParameterBuilder>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ContextCommandBuilder(ModuleBuilder, string, ExecuteCallback) Initializes a new ContextCommandBuilder. public ContextCommandBuilder(ModuleBuilder module, string name, ExecuteCallback callback) Parameters module ModuleBuilder Parent module of this command. name string Name of this command. callback ExecuteCallback Execution callback of this command. Properties CommandType Gets the type of this command. public ApplicationCommandType CommandType { get; set; } Property Value ApplicationCommandType DefaultMemberPermissions Gets the default permissions needed for executing this command. public GuildPermission? DefaultMemberPermissions { get; set; } Property Value GuildPermission? DefaultPermission Gets the default permission of this command. [Obsolete(\"To be deprecated soon, use IsEnabledInDm and DefaultMemberPermissions instead.\")] public bool DefaultPermission { get; set; } Property Value bool Instance protected override ContextCommandBuilder Instance { get; } Property Value ContextCommandBuilder IsEnabledInDm Gets whether this command can be used in DMs. public bool IsEnabledInDm { get; set; } Property Value bool IsNsfw Gets whether this command is age restricted. public bool IsNsfw { get; set; } Property Value bool Methods AddParameter(Action<CommandParameterBuilder>) Adds a command parameter to the parameters collection. public override ContextCommandBuilder AddParameter(Action<CommandParameterBuilder> configure) Parameters configure Action<CommandParameterBuilder> CommandParameterBuilder factory. Returns ContextCommandBuilder The builder instance. SetDefaultPermission(bool) Sets DefaultPermission. [Obsolete(\"To be deprecated soon, use SetEnabledInDm and WithDefaultMemberPermissions instead.\")] public ContextCommandBuilder SetDefaultPermission(bool defaultPermision) Parameters defaultPermision bool New value of the DefaultPermission. Returns ContextCommandBuilder The builder instance. SetEnabledInDm(bool) Sets IsEnabledInDm. public ContextCommandBuilder SetEnabledInDm(bool isEnabled) Parameters isEnabled bool New value of the IsEnabledInDm. Returns ContextCommandBuilder The builder instance. SetNsfw(bool) Sets IsNsfw. public ContextCommandBuilder SetNsfw(bool isNsfw) Parameters isNsfw bool New value of the IsNsfw. Returns ContextCommandBuilder The builder instance. SetType(ApplicationCommandType) Sets CommandType. public ContextCommandBuilder SetType(ApplicationCommandType commandType) Parameters commandType ApplicationCommandType New value of the CommandType. Returns ContextCommandBuilder The builder instance. WithDefaultMemberPermissions(GuildPermission) Sets DefaultMemberPermissions. public ContextCommandBuilder WithDefaultMemberPermissions(GuildPermission permissions) Parameters permissions GuildPermission New value of the DefaultMemberPermissions. Returns ContextCommandBuilder The builder instance."
  },
  "api/Discord.Interactions.Builders.ICommandBuilder.html": {
    "href": "api/Discord.Interactions.Builders.ICommandBuilder.html",
    "title": "Interface ICommandBuilder | Discord.Net Documentation",
    "keywords": "Interface ICommandBuilder Namespace Discord.Interactions.Builders Assembly Discord.Net.Interactions.dll Represent a command builder for creating ICommandInfo. public interface ICommandBuilder Properties Attributes Gets a collection of the attributes of this command. IReadOnlyList<Attribute> Attributes { get; } Property Value IReadOnlyList<Attribute> Callback Gets the execution delegate of this command. ExecuteCallback Callback { get; } Property Value ExecuteCallback IgnoreGroupNames Gets or sets true if this command will be registered and executed as a standalone command, unaffected by the GroupAttributes of of the commands parents. bool IgnoreGroupNames { get; set; } Property Value bool MethodName Gets or sets the method name of this command. string MethodName { get; set; } Property Value string Module Gets the parent module of this command. ModuleBuilder Module { get; } Property Value ModuleBuilder Name Gets the name of this command. string Name { get; } Property Value string Parameters Gets a collection of the parameters of this command. IReadOnlyList<IParameterBuilder> Parameters { get; } Property Value IReadOnlyList<IParameterBuilder> Preconditions Gets a collection of the preconditions of this command. IReadOnlyList<PreconditionAttribute> Preconditions { get; } Property Value IReadOnlyList<PreconditionAttribute> RunMode Gets or sets the run mode this command gets executed with. RunMode RunMode { get; set; } Property Value RunMode TreatNameAsRegex Gets or sets whether the Name should be directly used as a Regex pattern. bool TreatNameAsRegex { get; set; } Property Value bool Methods AddParameters(params IParameterBuilder[]) Adds parameter builders to Parameters. ICommandBuilder AddParameters(params IParameterBuilder[] parameters) Parameters parameters IParameterBuilder[] New parameter builders to be added to Parameters. Returns ICommandBuilder The builder instance. SetRunMode(RunMode) Sets RunMode. ICommandBuilder SetRunMode(RunMode runMode) Parameters runMode RunMode New value of the RunMode. Returns ICommandBuilder The builder instance. WithAttributes(params Attribute[]) Adds attributes to Attributes. ICommandBuilder WithAttributes(params Attribute[] attributes) Parameters attributes Attribute[] New attributes to be added to Attributes. Returns ICommandBuilder The builder instance. WithMethodName(string) Sets MethodName. ICommandBuilder WithMethodName(string name) Parameters name string New value of the MethodName. Returns ICommandBuilder The builder instance. WithName(string) Sets Name. ICommandBuilder WithName(string name) Parameters name string New value of the Name. Returns ICommandBuilder The builder instance. WithNameAsRegex(bool) Sets TreatNameAsRegex. ICommandBuilder WithNameAsRegex(bool value) Parameters value bool New value of the TreatNameAsRegex. Returns ICommandBuilder The builder instance. WithPreconditions(params PreconditionAttribute[]) Adds preconditions to Preconditions. ICommandBuilder WithPreconditions(params PreconditionAttribute[] preconditions) Parameters preconditions PreconditionAttribute[] New preconditions to be added to Preconditions. Returns ICommandBuilder The builder instance."
  },
  "api/Discord.Interactions.Builders.IInputComponentBuilder.html": {
    "href": "api/Discord.Interactions.Builders.IInputComponentBuilder.html",
    "title": "Interface IInputComponentBuilder | Discord.Net Documentation",
    "keywords": "Interface IInputComponentBuilder Namespace Discord.Interactions.Builders Assembly Discord.Net.Interactions.dll Represent a builder for creating InputComponentInfo. public interface IInputComponentBuilder Properties Attributes Gets a collection of the attributes of this component. IReadOnlyCollection<Attribute> Attributes { get; } Property Value IReadOnlyCollection<Attribute> ComponentType Gets the component type of this input component. ComponentType ComponentType { get; } Property Value ComponentType CustomId Gets the custom id of this input component. string CustomId { get; } Property Value string DefaultValue Gets the default value of this input component. object DefaultValue { get; } Property Value object IsRequired Gets whether this input component is required. bool IsRequired { get; } Property Value bool Label Gets the label of this input component. string Label { get; } Property Value string Modal Gets the parent modal of this input component. ModalBuilder Modal { get; } Property Value ModalBuilder PropertyInfo Get the PropertyInfo of this component's property. PropertyInfo PropertyInfo { get; } Property Value PropertyInfo Type Get the reference type of this input component. Type Type { get; } Property Value Type TypeConverter Get the ComponentTypeConverter assigned to this input. ComponentTypeConverter TypeConverter { get; } Property Value ComponentTypeConverter Methods SetDefaultValue(object) Sets DefaultValue. IInputComponentBuilder SetDefaultValue(object value) Parameters value object New value of the DefaultValue. Returns IInputComponentBuilder The builder instance. SetIsRequired(bool) Sets IsRequired. IInputComponentBuilder SetIsRequired(bool isRequired) Parameters isRequired bool New value of the IsRequired. Returns IInputComponentBuilder The builder instance. WithAttributes(params Attribute[]) Adds attributes to Attributes. IInputComponentBuilder WithAttributes(params Attribute[] attributes) Parameters attributes Attribute[] New attributes to be added to Attributes. Returns IInputComponentBuilder The builder instance. WithCustomId(string) Sets CustomId. IInputComponentBuilder WithCustomId(string customId) Parameters customId string New value of the CustomId. Returns IInputComponentBuilder The builder instance. WithLabel(string) Sets Label. IInputComponentBuilder WithLabel(string label) Parameters label string New value of the Label. Returns IInputComponentBuilder The builder instance. WithType(Type) Sets Type. IInputComponentBuilder WithType(Type type) Parameters type Type New value of the Type. Returns IInputComponentBuilder The builder instance."
  },
  "api/Discord.Interactions.Builders.IParameterBuilder.html": {
    "href": "api/Discord.Interactions.Builders.IParameterBuilder.html",
    "title": "Interface IParameterBuilder | Discord.Net Documentation",
    "keywords": "Interface IParameterBuilder Namespace Discord.Interactions.Builders Assembly Discord.Net.Interactions.dll Represent a command builder for creating IParameterInfo. public interface IParameterBuilder Properties Attributes Gets a collection of the attributes of this command. IReadOnlyCollection<Attribute> Attributes { get; } Property Value IReadOnlyCollection<Attribute> Command Gets the parent command of this parameter. ICommandBuilder Command { get; } Property Value ICommandBuilder DefaultValue Gets the default value of this parameter. object DefaultValue { get; } Property Value object IsParameterArray Gets whether this parameter is params. bool IsParameterArray { get; } Property Value bool IsRequired Gets whether this parameter is required. bool IsRequired { get; } Property Value bool Name Gets the name of this parameter. string Name { get; } Property Value string ParameterType Gets the type of this parameter. Type ParameterType { get; } Property Value Type Preconditions Gets a collection of the preconditions of this command. IReadOnlyCollection<ParameterPreconditionAttribute> Preconditions { get; } Property Value IReadOnlyCollection<ParameterPreconditionAttribute> Methods AddAttributes(params Attribute[]) Adds attributes to Attributes. IParameterBuilder AddAttributes(params Attribute[] attributes) Parameters attributes Attribute[] New attributes to be added to Attributes. Returns IParameterBuilder The builder instance. AddPreconditions(params ParameterPreconditionAttribute[]) Adds preconditions to Preconditions. IParameterBuilder AddPreconditions(params ParameterPreconditionAttribute[] preconditions) Parameters preconditions ParameterPreconditionAttribute[] New attributes to be added to Preconditions. Returns IParameterBuilder The builder instance. SetDefaultValue(object) Sets DefaultValue. IParameterBuilder SetDefaultValue(object defaultValue) Parameters defaultValue object New value of the DefaultValue. Returns IParameterBuilder The builder instance. SetParameterType(Type) Sets ParameterType. IParameterBuilder SetParameterType(Type type) Parameters type Type New value of the ParameterType. Returns IParameterBuilder The builder instance. SetRequired(bool) Sets IsRequired. IParameterBuilder SetRequired(bool isRequired) Parameters isRequired bool New value of the IsRequired. Returns IParameterBuilder The builder instance. WithName(string) Sets Name. IParameterBuilder WithName(string name) Parameters name string New value of the Name. Returns IParameterBuilder The builder instance."
  },
  "api/Discord.Interactions.Builders.InputComponentBuilder-2.html": {
    "href": "api/Discord.Interactions.Builders.InputComponentBuilder-2.html",
    "title": "Class InputComponentBuilder<TInfo, TBuilder> | Discord.Net Documentation",
    "keywords": "Class InputComponentBuilder<TInfo, TBuilder> Namespace Discord.Interactions.Builders Assembly Discord.Net.Interactions.dll Represents the base builder class for creating InputComponentInfo. public abstract class InputComponentBuilder<TInfo, TBuilder> : IInputComponentBuilder where TInfo : InputComponentInfo where TBuilder : InputComponentBuilder<TInfo, TBuilder> Type Parameters TInfo The InputComponentInfo this builder yields when built. TBuilder Inherited InputComponentBuilder<TInfo, TBuilder> type. Inheritance object InputComponentBuilder<TInfo, TBuilder> Implements IInputComponentBuilder Derived TextInputComponentBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InputComponentBuilder(ModalBuilder) Creates an instance of InputComponentBuilder<TInfo, TBuilder> public InputComponentBuilder(ModalBuilder modal) Parameters modal ModalBuilder Parent modal of this input component. Properties Attributes Gets a collection of the attributes of this component. public IReadOnlyCollection<Attribute> Attributes { get; } Property Value IReadOnlyCollection<Attribute> ComponentType Gets the component type of this input component. public ComponentType ComponentType { get; } Property Value ComponentType CustomId Gets the custom id of this input component. public string CustomId { get; set; } Property Value string DefaultValue Gets the default value of this input component. public object DefaultValue { get; set; } Property Value object Instance protected abstract TBuilder Instance { get; } Property Value TBuilder IsRequired Gets whether this input component is required. public bool IsRequired { get; set; } Property Value bool Label Gets the label of this input component. public string Label { get; set; } Property Value string Modal Gets the parent modal of this input component. public ModalBuilder Modal { get; } Property Value ModalBuilder PropertyInfo Get the PropertyInfo of this component's property. public PropertyInfo PropertyInfo { get; } Property Value PropertyInfo Type Get the reference type of this input component. public Type Type { get; } Property Value Type TypeConverter Get the ComponentTypeConverter assigned to this input. public ComponentTypeConverter TypeConverter { get; } Property Value ComponentTypeConverter Methods SetDefaultValue(object) Sets DefaultValue. public TBuilder SetDefaultValue(object value) Parameters value object New value of the DefaultValue. Returns TBuilder The builder instance. SetIsRequired(bool) Sets IsRequired. public TBuilder SetIsRequired(bool isRequired) Parameters isRequired bool New value of the IsRequired. Returns TBuilder The builder instance. WithAttributes(params Attribute[]) Adds attributes to Attributes. public TBuilder WithAttributes(params Attribute[] attributes) Parameters attributes Attribute[] New attributes to be added to Attributes. Returns TBuilder The builder instance. WithComponentType(ComponentType) Sets ComponentType. public TBuilder WithComponentType(ComponentType componentType) Parameters componentType ComponentType New value of the ComponentType. Returns TBuilder The builder instance. WithCustomId(string) Sets CustomId. public TBuilder WithCustomId(string customId) Parameters customId string New value of the CustomId. Returns TBuilder The builder instance. WithLabel(string) Sets Label. public TBuilder WithLabel(string label) Parameters label string New value of the Label. Returns TBuilder The builder instance. WithType(Type) Sets Type. public TBuilder WithType(Type type) Parameters type Type New value of the Type. Returns TBuilder The builder instance."
  },
  "api/Discord.Interactions.Builders.ModalBuilder.html": {
    "href": "api/Discord.Interactions.Builders.ModalBuilder.html",
    "title": "Class ModalBuilder | Discord.Net Documentation",
    "keywords": "Class ModalBuilder Namespace Discord.Interactions.Builders Assembly Discord.Net.Interactions.dll Represents a builder for creating ModalInfo. public class ModalBuilder Inheritance object ModalBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModalBuilder(Type, ModalInitializer, InteractionService) Initializes a new ModalBuilder public ModalBuilder(Type type, ModalInitializer modalInitializer, InteractionService interactionService) Parameters type Type modalInitializer ModalInitializer The initialization delegate for this modal. interactionService InteractionService Properties Components Gets a collection of the components of this modal. public IReadOnlyCollection<IInputComponentBuilder> Components { get; } Property Value IReadOnlyCollection<IInputComponentBuilder> ModalInitializer Gets the initialization delegate for this modal. public ModalInitializer ModalInitializer { get; } Property Value ModalInitializer Title Gets the title of this modal. public string Title { get; set; } Property Value string Type Gets the IModal implementation used to initialize this object. public Type Type { get; } Property Value Type Methods AddTextComponent(Action<TextInputComponentBuilder>) Adds text components to Components. public ModalBuilder AddTextComponent(Action<TextInputComponentBuilder> configure) Parameters configure Action<TextInputComponentBuilder> Text Component builder factory. Returns ModalBuilder The builder instance. WithTitle(string) Sets Title. public ModalBuilder WithTitle(string title) Parameters title string New value of the Title. Returns ModalBuilder The builder instance."
  },
  "api/Discord.Interactions.Builders.ModalCommandBuilder.html": {
    "href": "api/Discord.Interactions.Builders.ModalCommandBuilder.html",
    "title": "Class ModalCommandBuilder | Discord.Net Documentation",
    "keywords": "Class ModalCommandBuilder Namespace Discord.Interactions.Builders Assembly Discord.Net.Interactions.dll Represents a builder for creating a ModalCommandInfo. public class ModalCommandBuilder : CommandBuilder<ModalCommandInfo, ModalCommandBuilder, ModalCommandParameterBuilder>, ICommandBuilder Inheritance object CommandBuilder<ModalCommandInfo, ModalCommandBuilder, ModalCommandParameterBuilder> ModalCommandBuilder Implements ICommandBuilder Inherited Members CommandBuilder<ModalCommandInfo, ModalCommandBuilder, ModalCommandParameterBuilder>.Instance CommandBuilder<ModalCommandInfo, ModalCommandBuilder, ModalCommandParameterBuilder>.Module CommandBuilder<ModalCommandInfo, ModalCommandBuilder, ModalCommandParameterBuilder>.Callback CommandBuilder<ModalCommandInfo, ModalCommandBuilder, ModalCommandParameterBuilder>.Name CommandBuilder<ModalCommandInfo, ModalCommandBuilder, ModalCommandParameterBuilder>.MethodName CommandBuilder<ModalCommandInfo, ModalCommandBuilder, ModalCommandParameterBuilder>.IgnoreGroupNames CommandBuilder<ModalCommandInfo, ModalCommandBuilder, ModalCommandParameterBuilder>.TreatNameAsRegex CommandBuilder<ModalCommandInfo, ModalCommandBuilder, ModalCommandParameterBuilder>.RunMode CommandBuilder<ModalCommandInfo, ModalCommandBuilder, ModalCommandParameterBuilder>.Attributes CommandBuilder<ModalCommandInfo, ModalCommandBuilder, ModalCommandParameterBuilder>.Parameters CommandBuilder<ModalCommandInfo, ModalCommandBuilder, ModalCommandParameterBuilder>.Preconditions CommandBuilder<ModalCommandInfo, ModalCommandBuilder, ModalCommandParameterBuilder>.WithName(string) CommandBuilder<ModalCommandInfo, ModalCommandBuilder, ModalCommandParameterBuilder>.WithMethodName(string) CommandBuilder<ModalCommandInfo, ModalCommandBuilder, ModalCommandParameterBuilder>.WithAttributes(params Attribute[]) CommandBuilder<ModalCommandInfo, ModalCommandBuilder, ModalCommandParameterBuilder>.SetRunMode(RunMode) CommandBuilder<ModalCommandInfo, ModalCommandBuilder, ModalCommandParameterBuilder>.WithNameAsRegex(bool) CommandBuilder<ModalCommandInfo, ModalCommandBuilder, ModalCommandParameterBuilder>.AddParameters(params ModalCommandParameterBuilder[]) CommandBuilder<ModalCommandInfo, ModalCommandBuilder, ModalCommandParameterBuilder>.WithPreconditions(params PreconditionAttribute[]) CommandBuilder<ModalCommandInfo, ModalCommandBuilder, ModalCommandParameterBuilder>.AddParameter(Action<ModalCommandParameterBuilder>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModalCommandBuilder(ModuleBuilder) Initializes a new ModalCommandBuilder. public ModalCommandBuilder(ModuleBuilder module) Parameters module ModuleBuilder Parent module of this modal. ModalCommandBuilder(ModuleBuilder, string, ExecuteCallback) Initializes a new ModalCommandBuilder. public ModalCommandBuilder(ModuleBuilder module, string name, ExecuteCallback callback) Parameters module ModuleBuilder Parent module of this modal. name string Name of this modal. callback ExecuteCallback Execution callback of this modal. Properties Instance protected override ModalCommandBuilder Instance { get; } Property Value ModalCommandBuilder Methods AddParameter(Action<ModalCommandParameterBuilder>) Adds a modal parameter to the parameters collection. public override ModalCommandBuilder AddParameter(Action<ModalCommandParameterBuilder> configure) Parameters configure Action<ModalCommandParameterBuilder> ModalCommandParameterBuilder factory. Returns ModalCommandBuilder The builder instance."
  },
  "api/Discord.Interactions.Builders.ModalCommandParameterBuilder.html": {
    "href": "api/Discord.Interactions.Builders.ModalCommandParameterBuilder.html",
    "title": "Class ModalCommandParameterBuilder | Discord.Net Documentation",
    "keywords": "Class ModalCommandParameterBuilder Namespace Discord.Interactions.Builders Assembly Discord.Net.Interactions.dll Represents a builder for creating ModalCommandBuilder. public class ModalCommandParameterBuilder : ParameterBuilder<ModalCommandParameterInfo, ModalCommandParameterBuilder>, IParameterBuilder Inheritance object ParameterBuilder<ModalCommandParameterInfo, ModalCommandParameterBuilder> ModalCommandParameterBuilder Implements IParameterBuilder Inherited Members ParameterBuilder<ModalCommandParameterInfo, ModalCommandParameterBuilder>.Command ParameterBuilder<ModalCommandParameterInfo, ModalCommandParameterBuilder>.Name ParameterBuilder<ModalCommandParameterInfo, ModalCommandParameterBuilder>.ParameterType ParameterBuilder<ModalCommandParameterInfo, ModalCommandParameterBuilder>.IsRequired ParameterBuilder<ModalCommandParameterInfo, ModalCommandParameterBuilder>.IsParameterArray ParameterBuilder<ModalCommandParameterInfo, ModalCommandParameterBuilder>.DefaultValue ParameterBuilder<ModalCommandParameterInfo, ModalCommandParameterBuilder>.Attributes ParameterBuilder<ModalCommandParameterInfo, ModalCommandParameterBuilder>.Preconditions ParameterBuilder<ModalCommandParameterInfo, ModalCommandParameterBuilder>.Instance ParameterBuilder<ModalCommandParameterInfo, ModalCommandParameterBuilder>.WithName(string) ParameterBuilder<ModalCommandParameterInfo, ModalCommandParameterBuilder>.SetParameterType(Type) ParameterBuilder<ModalCommandParameterInfo, ModalCommandParameterBuilder>.SetRequired(bool) ParameterBuilder<ModalCommandParameterInfo, ModalCommandParameterBuilder>.SetDefaultValue(object) ParameterBuilder<ModalCommandParameterInfo, ModalCommandParameterBuilder>.AddAttributes(params Attribute[]) ParameterBuilder<ModalCommandParameterInfo, ModalCommandParameterBuilder>.AddPreconditions(params ParameterPreconditionAttribute[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModalCommandParameterBuilder(ICommandBuilder, string, Type) Initializes a new ModalCommandParameterBuilder. public ModalCommandParameterBuilder(ICommandBuilder command, string name, Type type) Parameters command ICommandBuilder Parent command of this parameter. name string Name of this command. type Type Type of this parameter. Properties Instance protected override ModalCommandParameterBuilder Instance { get; } Property Value ModalCommandParameterBuilder IsModalParameter Gets whether or not this parameter is an IModal. public bool IsModalParameter { get; } Property Value bool Modal Gets the built ModalInfo class for this parameter, if IsModalParameter is true. public ModalInfo Modal { get; } Property Value ModalInfo TypeReader Gets the TypeReader assigned to this parameter, if IsModalParameter is true. public TypeReader TypeReader { get; } Property Value TypeReader Methods SetParameterType(Type) Sets ParameterType. public override ModalCommandParameterBuilder SetParameterType(Type type) Parameters type Type New value of the ParameterType. Returns ModalCommandParameterBuilder The builder instance."
  },
  "api/Discord.Interactions.Builders.ModuleBuilder.html": {
    "href": "api/Discord.Interactions.Builders.ModuleBuilder.html",
    "title": "Class ModuleBuilder | Discord.Net Documentation",
    "keywords": "Class ModuleBuilder Namespace Discord.Interactions.Builders Assembly Discord.Net.Interactions.dll Represents a builder for creating ModuleInfo. public class ModuleBuilder Inheritance object ModuleBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModuleBuilder(InteractionService, string, ModuleBuilder) Initializes a new ModuleBuilder. public ModuleBuilder(InteractionService interactionService, string name, ModuleBuilder parent = null) Parameters interactionService InteractionService The underlying Interaction Service. name string Name of this module. parent ModuleBuilder Parent module of this sub-module. Properties Attributes Gets a collection of the attributes of this module. public IReadOnlyList<Attribute> Attributes { get; } Property Value IReadOnlyList<Attribute> AutocompleteCommands Gets a collection of the Autocomplete Commands of this module. public IReadOnlyList<AutocompleteCommandBuilder> AutocompleteCommands { get; } Property Value IReadOnlyList<AutocompleteCommandBuilder> ComponentCommands Gets a collection of the Component Commands of this module. public IReadOnlyList<ComponentCommandBuilder> ComponentCommands { get; } Property Value IReadOnlyList<ComponentCommandBuilder> ContextCommands Gets a collection of the Context Commands of this module. public IReadOnlyList<ContextCommandBuilder> ContextCommands { get; } Property Value IReadOnlyList<ContextCommandBuilder> DefaultMemberPermissions Gets the default permissions needed for executing this command. public GuildPermission? DefaultMemberPermissions { get; set; } Property Value GuildPermission? DefaultPermission Gets and sets the default permission of this module. [Obsolete(\"To be deprecated soon, use IsEnabledInDm and DefaultMemberPermissions instead.\")] public bool DefaultPermission { get; set; } Property Value bool Description Gets and sets the description of this module. public string Description { get; set; } Property Value string DontAutoRegister Gets and sets whether this has a DontAutoRegisterAttribute. public bool DontAutoRegister { get; set; } Property Value bool InteractionService Gets the underlying Interaction Service. public InteractionService InteractionService { get; } Property Value InteractionService IsEnabledInDm Gets whether this command can be used in DMs. public bool IsEnabledInDm { get; set; } Property Value bool IsNsfw Gets whether this command is age restricted. public bool IsNsfw { get; set; } Property Value bool IsSlashGroup Gets whether this has a GroupAttribute. public bool IsSlashGroup { get; } Property Value bool ModalCommands Gets a collection of the Modal Commands of this module. public IReadOnlyList<ModalCommandBuilder> ModalCommands { get; } Property Value IReadOnlyList<ModalCommandBuilder> Name Gets the name of this module. public string Name { get; } Property Value string Parent Gets the parent module if this module is a sub-module. public ModuleBuilder Parent { get; } Property Value ModuleBuilder Preconditions Gets a collection of the preconditions of this module. public IReadOnlyCollection<PreconditionAttribute> Preconditions { get; } Property Value IReadOnlyCollection<PreconditionAttribute> SlashCommands Gets a collection of the Slash Commands of this module. public IReadOnlyList<SlashCommandBuilder> SlashCommands { get; } Property Value IReadOnlyList<SlashCommandBuilder> SlashGroupName Gets and sets the group name of this module. public string SlashGroupName { get; set; } Property Value string SubModules Gets a collection of the sub-modules of this module. public IReadOnlyList<ModuleBuilder> SubModules { get; } Property Value IReadOnlyList<ModuleBuilder> Methods AddAttributes(params Attribute[]) Adds attributes to Attributes. public ModuleBuilder AddAttributes(params Attribute[] attributes) Parameters attributes Attribute[] New attributes to be added to Attributes. Returns ModuleBuilder The builder instance. AddAutocompleteCommand(Action<AutocompleteCommandBuilder>) Adds autocomplete command builder to AutocompleteCommands. public ModuleBuilder AddAutocompleteCommand(Action<AutocompleteCommandBuilder> configure) Parameters configure Action<AutocompleteCommandBuilder> AutocompleteCommands factory. Returns ModuleBuilder The builder instance. AddComponentCommand(Action<ComponentCommandBuilder>) Adds component command builder to ComponentCommands. public ModuleBuilder AddComponentCommand(Action<ComponentCommandBuilder> configure) Parameters configure Action<ComponentCommandBuilder> ComponentCommandBuilder factory. Returns ModuleBuilder The builder instance. AddComponentCommand(string, ExecuteCallback, Action<ComponentCommandBuilder>) Adds component command builder to ComponentCommands. public ModuleBuilder AddComponentCommand(string name, ExecuteCallback callback, Action<ComponentCommandBuilder> configure) Parameters name string Name of the command. callback ExecuteCallback Command callback to be executed. configure Action<ComponentCommandBuilder> ComponentCommandBuilder factory. Returns ModuleBuilder The builder instance. AddContextCommand(Action<ContextCommandBuilder>) Adds context command builder to ContextCommands. public ModuleBuilder AddContextCommand(Action<ContextCommandBuilder> configure) Parameters configure Action<ContextCommandBuilder> ContextCommandBuilder factory. Returns ModuleBuilder The builder instance. AddContextCommand(string, ExecuteCallback, Action<ContextCommandBuilder>) Adds context command builder to ContextCommands. public ModuleBuilder AddContextCommand(string name, ExecuteCallback callback, Action<ContextCommandBuilder> configure) Parameters name string Name of the command. callback ExecuteCallback Command callback to be executed. configure Action<ContextCommandBuilder> ContextCommandBuilder factory. Returns ModuleBuilder The builder instance. AddModalCommand(Action<ModalCommandBuilder>) Adds a modal command builder to ModalCommands. public ModuleBuilder AddModalCommand(Action<ModalCommandBuilder> configure) Parameters configure Action<ModalCommandBuilder> ModalCommands factory. Returns ModuleBuilder The builder instance. AddModalCommand(string, ExecuteCallback, Action<ModalCommandBuilder>) Adds a modal command builder to ModalCommands. public ModuleBuilder AddModalCommand(string name, ExecuteCallback callback, Action<ModalCommandBuilder> configure) Parameters name string Name of the command. callback ExecuteCallback Command callback to be executed. configure Action<ModalCommandBuilder> ModalCommands factory. Returns ModuleBuilder The builder instance. AddModule(Action<ModuleBuilder>) Adds sub-module builder to SubModules. public ModuleBuilder AddModule(Action<ModuleBuilder> configure) Parameters configure Action<ModuleBuilder> ModuleBuilder factory. Returns ModuleBuilder The builder instance. AddPreconditions(params PreconditionAttribute[]) Adds preconditions to Preconditions. public ModuleBuilder AddPreconditions(params PreconditionAttribute[] preconditions) Parameters preconditions PreconditionAttribute[] New preconditions to be added to Preconditions. Returns ModuleBuilder The builder instance. AddSlashCommand(Action<SlashCommandBuilder>) Adds slash command builder to SlashCommands. public ModuleBuilder AddSlashCommand(Action<SlashCommandBuilder> configure) Parameters configure Action<SlashCommandBuilder> SlashCommandBuilder factory. Returns ModuleBuilder The builder instance. AddSlashCommand(string, ExecuteCallback, Action<AutocompleteCommandBuilder>) Adds autocomplete command builder to AutocompleteCommands. public ModuleBuilder AddSlashCommand(string name, ExecuteCallback callback, Action<AutocompleteCommandBuilder> configure) Parameters name string Name of the command. callback ExecuteCallback Command callback to be executed. configure Action<AutocompleteCommandBuilder> AutocompleteCommandBuilder factory. Returns ModuleBuilder The builder instance. AddSlashCommand(string, ExecuteCallback, Action<SlashCommandBuilder>) Adds slash command builder to SlashCommands. public ModuleBuilder AddSlashCommand(string name, ExecuteCallback callback, Action<SlashCommandBuilder> configure) Parameters name string Name of the command. callback ExecuteCallback Command callback to be executed. configure Action<SlashCommandBuilder> SlashCommandBuilder factory. Returns ModuleBuilder The builder instance. SetEnabledInDm(bool) Sets IsEnabledInDm. public ModuleBuilder SetEnabledInDm(bool isEnabled) Parameters isEnabled bool New value of the IsEnabledInDm. Returns ModuleBuilder The builder instance. SetNsfw(bool) Sets IsNsfw. public ModuleBuilder SetNsfw(bool isNsfw) Parameters isNsfw bool New value of the IsNsfw. Returns ModuleBuilder The builder instance. WithDefaultMemberPermissions(GuildPermission) Sets DefaultMemberPermissions. public ModuleBuilder WithDefaultMemberPermissions(GuildPermission permissions) Parameters permissions GuildPermission New value of the DefaultMemberPermissions. Returns ModuleBuilder The builder instance. WithDefaultPermission(bool) Sets DefaultPermission. [Obsolete(\"To be deprecated soon, use SetEnabledInDm and WithDefaultMemberPermissions instead.\")] public ModuleBuilder WithDefaultPermission(bool permission) Parameters permission bool New value of the DefaultPermission. Returns ModuleBuilder The builder instance. WithDescription(string) Sets Description. public ModuleBuilder WithDescription(string description) Parameters description string New value of the Description. Returns ModuleBuilder The builder instance. WithGroupName(string) Sets SlashGroupName. public ModuleBuilder WithGroupName(string name) Parameters name string New value of the SlashGroupName. Returns ModuleBuilder The builder instance."
  },
  "api/Discord.Interactions.Builders.ParameterBuilder-2.html": {
    "href": "api/Discord.Interactions.Builders.ParameterBuilder-2.html",
    "title": "Class ParameterBuilder<TInfo, TBuilder> | Discord.Net Documentation",
    "keywords": "Class ParameterBuilder<TInfo, TBuilder> Namespace Discord.Interactions.Builders Assembly Discord.Net.Interactions.dll Represents the base builder class for creating IParameterInfo. public abstract class ParameterBuilder<TInfo, TBuilder> : IParameterBuilder where TInfo : class, IParameterInfo where TBuilder : ParameterBuilder<TInfo, TBuilder> Type Parameters TInfo The IParameterInfo this builder yields when built. TBuilder Inherited ParameterBuilder<TInfo, TBuilder> type. Inheritance object ParameterBuilder<TInfo, TBuilder> Implements IParameterBuilder Derived CommandParameterBuilder ComponentCommandParameterBuilder ModalCommandParameterBuilder SlashCommandParameterBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ParameterBuilder(ICommandBuilder, string, Type) protected ParameterBuilder(ICommandBuilder command, string name, Type type) Parameters command ICommandBuilder name string type Type Properties Attributes Gets a collection of the attributes of this command. public IReadOnlyCollection<Attribute> Attributes { get; } Property Value IReadOnlyCollection<Attribute> Command Gets the parent command of this parameter. public ICommandBuilder Command { get; } Property Value ICommandBuilder DefaultValue Gets the default value of this parameter. public object DefaultValue { get; set; } Property Value object Instance protected abstract TBuilder Instance { get; } Property Value TBuilder IsParameterArray Gets whether this parameter is params. public bool IsParameterArray { get; set; } Property Value bool IsRequired Gets whether this parameter is required. public bool IsRequired { get; set; } Property Value bool Name Gets the name of this parameter. public string Name { get; } Property Value string ParameterType Gets the type of this parameter. public Type ParameterType { get; } Property Value Type Preconditions Gets a collection of the preconditions of this command. public IReadOnlyCollection<ParameterPreconditionAttribute> Preconditions { get; } Property Value IReadOnlyCollection<ParameterPreconditionAttribute> Methods AddAttributes(params Attribute[]) Adds attributes to Attributes public virtual TBuilder AddAttributes(params Attribute[] attributes) Parameters attributes Attribute[] New attributes to be added to Attributes. Returns TBuilder The builder instance. AddPreconditions(params ParameterPreconditionAttribute[]) Adds preconditions to Preconditions public virtual TBuilder AddPreconditions(params ParameterPreconditionAttribute[] attributes) Parameters attributes ParameterPreconditionAttribute[] New attributes to be added to Preconditions. Returns TBuilder The builder instance. SetDefaultValue(object) Sets DefaultValue. public virtual TBuilder SetDefaultValue(object defaultValue) Parameters defaultValue object New value of the DefaultValue. Returns TBuilder The builder instance. SetParameterType(Type) Sets ParameterType. public virtual TBuilder SetParameterType(Type type) Parameters type Type New value of the ParameterType. Returns TBuilder The builder instance. SetRequired(bool) Sets IsRequired. public virtual TBuilder SetRequired(bool isRequired) Parameters isRequired bool New value of the IsRequired. Returns TBuilder The builder instance. WithName(string) Sets Name. public virtual TBuilder WithName(string name) Parameters name string New value of the Name. Returns TBuilder The builder instance."
  },
  "api/Discord.Interactions.Builders.SlashCommandBuilder.html": {
    "href": "api/Discord.Interactions.Builders.SlashCommandBuilder.html",
    "title": "Class SlashCommandBuilder | Discord.Net Documentation",
    "keywords": "Class SlashCommandBuilder Namespace Discord.Interactions.Builders Assembly Discord.Net.Interactions.dll Represents a builder for creating SlashCommandInfo. public sealed class SlashCommandBuilder : CommandBuilder<SlashCommandInfo, SlashCommandBuilder, SlashCommandParameterBuilder>, ICommandBuilder Inheritance object CommandBuilder<SlashCommandInfo, SlashCommandBuilder, SlashCommandParameterBuilder> SlashCommandBuilder Implements ICommandBuilder Inherited Members CommandBuilder<SlashCommandInfo, SlashCommandBuilder, SlashCommandParameterBuilder>.Module CommandBuilder<SlashCommandInfo, SlashCommandBuilder, SlashCommandParameterBuilder>.Callback CommandBuilder<SlashCommandInfo, SlashCommandBuilder, SlashCommandParameterBuilder>.Name CommandBuilder<SlashCommandInfo, SlashCommandBuilder, SlashCommandParameterBuilder>.MethodName CommandBuilder<SlashCommandInfo, SlashCommandBuilder, SlashCommandParameterBuilder>.IgnoreGroupNames CommandBuilder<SlashCommandInfo, SlashCommandBuilder, SlashCommandParameterBuilder>.TreatNameAsRegex CommandBuilder<SlashCommandInfo, SlashCommandBuilder, SlashCommandParameterBuilder>.RunMode CommandBuilder<SlashCommandInfo, SlashCommandBuilder, SlashCommandParameterBuilder>.Attributes CommandBuilder<SlashCommandInfo, SlashCommandBuilder, SlashCommandParameterBuilder>.Parameters CommandBuilder<SlashCommandInfo, SlashCommandBuilder, SlashCommandParameterBuilder>.Preconditions CommandBuilder<SlashCommandInfo, SlashCommandBuilder, SlashCommandParameterBuilder>.WithName(string) CommandBuilder<SlashCommandInfo, SlashCommandBuilder, SlashCommandParameterBuilder>.WithMethodName(string) CommandBuilder<SlashCommandInfo, SlashCommandBuilder, SlashCommandParameterBuilder>.WithAttributes(params Attribute[]) CommandBuilder<SlashCommandInfo, SlashCommandBuilder, SlashCommandParameterBuilder>.SetRunMode(RunMode) CommandBuilder<SlashCommandInfo, SlashCommandBuilder, SlashCommandParameterBuilder>.WithNameAsRegex(bool) CommandBuilder<SlashCommandInfo, SlashCommandBuilder, SlashCommandParameterBuilder>.AddParameters(params SlashCommandParameterBuilder[]) CommandBuilder<SlashCommandInfo, SlashCommandBuilder, SlashCommandParameterBuilder>.WithPreconditions(params PreconditionAttribute[]) CommandBuilder<SlashCommandInfo, SlashCommandBuilder, SlashCommandParameterBuilder>.AddParameter(Action<SlashCommandParameterBuilder>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SlashCommandBuilder(ModuleBuilder, string, ExecuteCallback) Initializes a new SlashCommandBuilder. public SlashCommandBuilder(ModuleBuilder module, string name, ExecuteCallback callback) Parameters module ModuleBuilder Parent module of this command. name string Name of this command. callback ExecuteCallback Execution callback of this command. Properties DefaultMemberPermissions Gets the default permissions needed for executing this command. public GuildPermission? DefaultMemberPermissions { get; set; } Property Value GuildPermission? DefaultPermission Gets and sets the default permission of this command. [Obsolete(\"To be deprecated soon, use IsEnabledInDm and DefaultMemberPermissions instead.\")] public bool DefaultPermission { get; set; } Property Value bool Description Gets and sets the description of this command. public string Description { get; set; } Property Value string Instance protected override SlashCommandBuilder Instance { get; } Property Value SlashCommandBuilder IsEnabledInDm Gets whether this command can be used in DMs. public bool IsEnabledInDm { get; set; } Property Value bool IsNsfw Gets whether this command is age restricted. public bool IsNsfw { get; set; } Property Value bool Methods AddParameter(Action<SlashCommandParameterBuilder>) Adds a command parameter to the parameters collection. public override SlashCommandBuilder AddParameter(Action<SlashCommandParameterBuilder> configure) Parameters configure Action<SlashCommandParameterBuilder> SlashCommandParameterBuilder factory. Returns SlashCommandBuilder The builder instance. SetEnabledInDm(bool) Sets IsEnabledInDm. public SlashCommandBuilder SetEnabledInDm(bool isEnabled) Parameters isEnabled bool New value of the IsEnabledInDm. Returns SlashCommandBuilder The builder instance. SetNsfw(bool) Sets IsNsfw. public SlashCommandBuilder SetNsfw(bool isNsfw) Parameters isNsfw bool New value of the IsNsfw. Returns SlashCommandBuilder The builder instance. WithDefaultMemberPermissions(GuildPermission) Sets DefaultMemberPermissions. public SlashCommandBuilder WithDefaultMemberPermissions(GuildPermission permissions) Parameters permissions GuildPermission New value of the DefaultMemberPermissions. Returns SlashCommandBuilder The builder instance. WithDefaultPermission(bool) Sets DefaultPermission. [Obsolete(\"To be deprecated soon, use SetEnabledInDm and WithDefaultMemberPermissions instead.\")] public SlashCommandBuilder WithDefaultPermission(bool permission) Parameters permission bool New value of the DefaultPermission. Returns SlashCommandBuilder The builder instance. WithDescription(string) Sets Description. public SlashCommandBuilder WithDescription(string description) Parameters description string New value of the Description. Returns SlashCommandBuilder The builder instance."
  },
  "api/Discord.Interactions.Builders.SlashCommandParameterBuilder.html": {
    "href": "api/Discord.Interactions.Builders.SlashCommandParameterBuilder.html",
    "title": "Class SlashCommandParameterBuilder | Discord.Net Documentation",
    "keywords": "Class SlashCommandParameterBuilder Namespace Discord.Interactions.Builders Assembly Discord.Net.Interactions.dll Represents a builder for creating SlashCommandParameterInfo. public sealed class SlashCommandParameterBuilder : ParameterBuilder<SlashCommandParameterInfo, SlashCommandParameterBuilder>, IParameterBuilder Inheritance object ParameterBuilder<SlashCommandParameterInfo, SlashCommandParameterBuilder> SlashCommandParameterBuilder Implements IParameterBuilder Inherited Members ParameterBuilder<SlashCommandParameterInfo, SlashCommandParameterBuilder>.Command ParameterBuilder<SlashCommandParameterInfo, SlashCommandParameterBuilder>.Name ParameterBuilder<SlashCommandParameterInfo, SlashCommandParameterBuilder>.ParameterType ParameterBuilder<SlashCommandParameterInfo, SlashCommandParameterBuilder>.IsRequired ParameterBuilder<SlashCommandParameterInfo, SlashCommandParameterBuilder>.IsParameterArray ParameterBuilder<SlashCommandParameterInfo, SlashCommandParameterBuilder>.DefaultValue ParameterBuilder<SlashCommandParameterInfo, SlashCommandParameterBuilder>.Attributes ParameterBuilder<SlashCommandParameterInfo, SlashCommandParameterBuilder>.Preconditions ParameterBuilder<SlashCommandParameterInfo, SlashCommandParameterBuilder>.WithName(string) ParameterBuilder<SlashCommandParameterInfo, SlashCommandParameterBuilder>.SetParameterType(Type) ParameterBuilder<SlashCommandParameterInfo, SlashCommandParameterBuilder>.SetRequired(bool) ParameterBuilder<SlashCommandParameterInfo, SlashCommandParameterBuilder>.SetDefaultValue(object) ParameterBuilder<SlashCommandParameterInfo, SlashCommandParameterBuilder>.AddAttributes(params Attribute[]) ParameterBuilder<SlashCommandParameterInfo, SlashCommandParameterBuilder>.AddPreconditions(params ParameterPreconditionAttribute[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SlashCommandParameterBuilder(ICommandBuilder, string, Type, ComplexParameterInitializer) Initializes a new SlashCommandParameterBuilder. public SlashCommandParameterBuilder(ICommandBuilder command, string name, Type type, ComplexParameterInitializer complexParameterInitializer = null) Parameters command ICommandBuilder Parent command of this parameter. name string Name of this command. type Type Type of this parameter. complexParameterInitializer ComplexParameterInitializer Properties Autocomplete Gets or sets whether this parameter should be configured for Autocomplete Interactions. public bool Autocomplete { get; set; } Property Value bool AutocompleteHandler Gets or sets the IAutocompleteHandler of this parameter. public IAutocompleteHandler AutocompleteHandler { get; set; } Property Value IAutocompleteHandler ChannelTypes Gets a collection of the channel types of this command. public IReadOnlyCollection<ChannelType> ChannelTypes { get; } Property Value IReadOnlyCollection<ChannelType> Choices Gets a collection of the choices of this command. public IReadOnlyCollection<ParameterChoice> Choices { get; } Property Value IReadOnlyCollection<ParameterChoice> ComplexParameterFields Gets the constructor parameters of this parameter, if IsComplexParameter is true. public IReadOnlyCollection<SlashCommandParameterBuilder> ComplexParameterFields { get; } Property Value IReadOnlyCollection<SlashCommandParameterBuilder> ComplexParameterInitializer Gets the initializer delegate for this parameter, if IsComplexParameter is true. public ComplexParameterInitializer ComplexParameterInitializer { get; } Property Value ComplexParameterInitializer Description Gets or sets the description of this parameter. public string Description { get; set; } Property Value string Instance protected override SlashCommandParameterBuilder Instance { get; } Property Value SlashCommandParameterBuilder IsComplexParameter Gets whether this type should be treated as a complex parameter. public bool IsComplexParameter { get; } Property Value bool MaxLength Gets or sets the maximum length allowed for a string type parameter. public int? MaxLength { get; set; } Property Value int? MaxValue Gets or sets the max value of this parameter. public double? MaxValue { get; set; } Property Value double? MinLength Gets or sets the minimum length allowed for a string type parameter. public int? MinLength { get; set; } Property Value int? MinValue Gets or sets the min value of this parameter. public double? MinValue { get; set; } Property Value double? TypeConverter Gets or sets the TypeConverter of this parameter. public TypeConverter TypeConverter { get; } Property Value TypeConverter Methods AddComplexParameterField(Action<SlashCommandParameterBuilder>) Adds a parameter builders to ComplexParameterFields. public SlashCommandParameterBuilder AddComplexParameterField(Action<SlashCommandParameterBuilder> configure) Parameters configure Action<SlashCommandParameterBuilder> SlashCommandParameterBuilder factory. Returns SlashCommandParameterBuilder The builder instance. Exceptions InvalidOperationException Thrown if the added field has a ComplexParameterAttribute. AddComplexParameterFields(params SlashCommandParameterBuilder[]) Adds parameter builders to ComplexParameterFields. public SlashCommandParameterBuilder AddComplexParameterFields(params SlashCommandParameterBuilder[] fields) Parameters fields SlashCommandParameterBuilder[] New parameter builders to be added to ComplexParameterFields. Returns SlashCommandParameterBuilder The builder instance. Exceptions InvalidOperationException Thrown if the added field has a ComplexParameterAttribute. SetParameterType(Type) Sets ParameterType. public override SlashCommandParameterBuilder SetParameterType(Type type) Parameters type Type New value of the ParameterType. Returns SlashCommandParameterBuilder The builder instance. SetParameterType(Type, IServiceProvider) Sets ParameterType. public SlashCommandParameterBuilder SetParameterType(Type type, IServiceProvider services = null) Parameters type Type New value of the ParameterType. services IServiceProvider Service container to be used to resolve the dependencies of this parameters TypeConverter. Returns SlashCommandParameterBuilder The builder instance. WithAutocompleteHandler(Type, IServiceProvider) Sets AutocompleteHandler. public SlashCommandParameterBuilder WithAutocompleteHandler(Type autocompleteHandlerType, IServiceProvider services = null) Parameters autocompleteHandlerType Type Type of the IAutocompleteHandler. services IServiceProvider Service container to be used to resolve the dependencies of this parameters TypeConverter. Returns SlashCommandParameterBuilder The builder instance. WithChannelTypes(params ChannelType[]) Adds channel types to ChannelTypes. public SlashCommandParameterBuilder WithChannelTypes(params ChannelType[] channelTypes) Parameters channelTypes ChannelType[] New channel types to be added to ChannelTypes. Returns SlashCommandParameterBuilder The builder instance. WithChannelTypes(IEnumerable<ChannelType>) Adds channel types to ChannelTypes. public SlashCommandParameterBuilder WithChannelTypes(IEnumerable<ChannelType> channelTypes) Parameters channelTypes IEnumerable<ChannelType> New channel types to be added to ChannelTypes. Returns SlashCommandParameterBuilder The builder instance. WithChoices(params ParameterChoice[]) Adds parameter choices to Choices. public SlashCommandParameterBuilder WithChoices(params ParameterChoice[] options) Parameters options ParameterChoice[] New choices to be added to Choices. Returns SlashCommandParameterBuilder The builder instance. WithDescription(string) Sets Description. public SlashCommandParameterBuilder WithDescription(string description) Parameters description string New value of the Description. Returns SlashCommandParameterBuilder The builder instance. WithMaxLength(int) Sets MaxLength. public SlashCommandParameterBuilder WithMaxLength(int length) Parameters length int New value of the MaxLength. Returns SlashCommandParameterBuilder The builder instance. WithMaxValue(double) Sets MaxValue. public SlashCommandParameterBuilder WithMaxValue(double value) Parameters value double New value of the MaxValue. Returns SlashCommandParameterBuilder The builder instance. WithMinLength(int) Sets MinLength. public SlashCommandParameterBuilder WithMinLength(int length) Parameters length int New value of the MinLength. Returns SlashCommandParameterBuilder The builder instance. WithMinValue(double) Sets MinValue. public SlashCommandParameterBuilder WithMinValue(double value) Parameters value double New value of the MinValue. Returns SlashCommandParameterBuilder The builder instance."
  },
  "api/Discord.Interactions.Builders.TextInputComponentBuilder.html": {
    "href": "api/Discord.Interactions.Builders.TextInputComponentBuilder.html",
    "title": "Class TextInputComponentBuilder | Discord.Net Documentation",
    "keywords": "Class TextInputComponentBuilder Namespace Discord.Interactions.Builders Assembly Discord.Net.Interactions.dll Represents a builder for creating TextInputComponentInfo. public class TextInputComponentBuilder : InputComponentBuilder<TextInputComponentInfo, TextInputComponentBuilder>, IInputComponentBuilder Inheritance object InputComponentBuilder<TextInputComponentInfo, TextInputComponentBuilder> TextInputComponentBuilder Implements IInputComponentBuilder Inherited Members InputComponentBuilder<TextInputComponentInfo, TextInputComponentBuilder>.Instance InputComponentBuilder<TextInputComponentInfo, TextInputComponentBuilder>.Modal InputComponentBuilder<TextInputComponentInfo, TextInputComponentBuilder>.CustomId InputComponentBuilder<TextInputComponentInfo, TextInputComponentBuilder>.Label InputComponentBuilder<TextInputComponentInfo, TextInputComponentBuilder>.IsRequired InputComponentBuilder<TextInputComponentInfo, TextInputComponentBuilder>.ComponentType InputComponentBuilder<TextInputComponentInfo, TextInputComponentBuilder>.Type InputComponentBuilder<TextInputComponentInfo, TextInputComponentBuilder>.PropertyInfo InputComponentBuilder<TextInputComponentInfo, TextInputComponentBuilder>.TypeConverter InputComponentBuilder<TextInputComponentInfo, TextInputComponentBuilder>.DefaultValue InputComponentBuilder<TextInputComponentInfo, TextInputComponentBuilder>.Attributes InputComponentBuilder<TextInputComponentInfo, TextInputComponentBuilder>.WithCustomId(string) InputComponentBuilder<TextInputComponentInfo, TextInputComponentBuilder>.WithLabel(string) InputComponentBuilder<TextInputComponentInfo, TextInputComponentBuilder>.SetIsRequired(bool) InputComponentBuilder<TextInputComponentInfo, TextInputComponentBuilder>.WithComponentType(ComponentType) InputComponentBuilder<TextInputComponentInfo, TextInputComponentBuilder>.WithType(Type) InputComponentBuilder<TextInputComponentInfo, TextInputComponentBuilder>.SetDefaultValue(object) InputComponentBuilder<TextInputComponentInfo, TextInputComponentBuilder>.WithAttributes(params Attribute[]) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TextInputComponentBuilder(ModalBuilder) Initializes a new TextInputComponentBuilder. public TextInputComponentBuilder(ModalBuilder modal) Parameters modal ModalBuilder Parent modal of this component. Properties InitialValue Gets and sets the initial value to be displayed by this input. public string InitialValue { get; set; } Property Value string Instance protected override TextInputComponentBuilder Instance { get; } Property Value TextInputComponentBuilder MaxLength Gets and sets the maximum length of the text input. public int MaxLength { get; set; } Property Value int MinLength Gets and sets the minimum length of the text input. public int MinLength { get; set; } Property Value int Placeholder Gets and sets the placeholder of the text input. public string Placeholder { get; set; } Property Value string Style Gets and sets the style of the text input. public TextInputStyle Style { get; set; } Property Value TextInputStyle Methods WithInitialValue(string) Sets InitialValue. public TextInputComponentBuilder WithInitialValue(string value) Parameters value string New value of the InitialValue. Returns TextInputComponentBuilder The builder instance. WithMaxLength(int) Sets MaxLength. public TextInputComponentBuilder WithMaxLength(int maxLength) Parameters maxLength int New value of the MaxLength. Returns TextInputComponentBuilder The builder instance. WithMinLength(int) Sets MinLength. public TextInputComponentBuilder WithMinLength(int minLength) Parameters minLength int New value of the MinLength. Returns TextInputComponentBuilder The builder instance. WithPlaceholder(string) Sets Placeholder. public TextInputComponentBuilder WithPlaceholder(string placeholder) Parameters placeholder string New value of the Placeholder. Returns TextInputComponentBuilder The builder instance. WithStyle(TextInputStyle) Sets Style. public TextInputComponentBuilder WithStyle(TextInputStyle style) Parameters style TextInputStyle New value of the Style. Returns TextInputComponentBuilder The builder instance."
  },
  "api/Discord.Interactions.Builders.html": {
    "href": "api/Discord.Interactions.Builders.html",
    "title": "Namespace Discord.Interactions.Builders | Discord.Net Documentation",
    "keywords": "Namespace Discord.Interactions.Builders Classes AutocompleteCommandBuilder Represents a builder for creating AutocompleteCommandInfo. CommandBuilder<TInfo, TBuilder, TParamBuilder> Represents the base builder class for creating CommandInfo<TParameter>. CommandParameterBuilder Represents a builder for creating CommandParameterInfo. ComponentCommandBuilder Represents a builder for creating ComponentCommandInfo. ComponentCommandParameterBuilder Represents a builder for creating ComponentCommandParameterInfo. ContextCommandBuilder Represents a builder for creating ContextCommandInfo. InputComponentBuilder<TInfo, TBuilder> Represents the base builder class for creating InputComponentInfo. ModalBuilder Represents a builder for creating ModalInfo. ModalCommandBuilder Represents a builder for creating a ModalCommandInfo. ModalCommandParameterBuilder Represents a builder for creating ModalCommandBuilder. ModuleBuilder Represents a builder for creating ModuleInfo. ParameterBuilder<TInfo, TBuilder> Represents the base builder class for creating IParameterInfo. SlashCommandBuilder Represents a builder for creating SlashCommandInfo. SlashCommandParameterBuilder Represents a builder for creating SlashCommandParameterInfo. TextInputComponentBuilder Represents a builder for creating TextInputComponentInfo. Interfaces ICommandBuilder Represent a command builder for creating ICommandInfo. IInputComponentBuilder Represent a builder for creating InputComponentInfo. IParameterBuilder Represent a command builder for creating IParameterInfo."
  },
  "api/Discord.Interactions.ChannelTypesAttribute.html": {
    "href": "api/Discord.Interactions.ChannelTypesAttribute.html",
    "title": "Class ChannelTypesAttribute | Discord.Net Documentation",
    "keywords": "Class ChannelTypesAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Specify the target channel types for a Channel option. [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false, Inherited = true)] public sealed class ChannelTypesAttribute : Attribute Inheritance object Attribute ChannelTypesAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ChannelTypesAttribute(params ChannelType[]) Specify the target channel types for a Channel option. public ChannelTypesAttribute(params ChannelType[] channelTypes) Parameters channelTypes ChannelType[] The allowed channel types for this option. Properties ChannelTypes Gets the allowed channel types for this option. public IReadOnlyCollection<ChannelType> ChannelTypes { get; } Property Value IReadOnlyCollection<ChannelType>"
  },
  "api/Discord.Interactions.ChoiceAttribute.html": {
    "href": "api/Discord.Interactions.ChoiceAttribute.html",
    "title": "Class ChoiceAttribute | Discord.Net Documentation",
    "keywords": "Class ChoiceAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Add a pre-determined argument value to a command parameter. [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = true, Inherited = true)] public class ChoiceAttribute : Attribute Inheritance object Attribute ChoiceAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChoiceAttribute(string, double) Create a parameter choice with type Number. public ChoiceAttribute(string name, double value) Parameters name string Name of the choice. value double Predefined value of the choice. ChoiceAttribute(string, int) Create a parameter choice with type Integer. public ChoiceAttribute(string name, int value) Parameters name string Name of the choice. value int Predefined value of the choice. ChoiceAttribute(string, string) Create a parameter choice with type String. public ChoiceAttribute(string name, string value) Parameters name string Name of the choice. value string Predefined value of the choice. Properties Name Gets the name of the choice. public string Name { get; } Property Value string Type Gets the type of this choice. public SlashCommandChoiceType Type { get; } Property Value SlashCommandChoiceType Value Gets the value that will be used whenever this choice is selected. public object Value { get; } Property Value object"
  },
  "api/Discord.Interactions.ChoiceDisplayAttribute.html": {
    "href": "api/Discord.Interactions.ChoiceDisplayAttribute.html",
    "title": "Class ChoiceDisplayAttribute | Discord.Net Documentation",
    "keywords": "Class ChoiceDisplayAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Customize the displayed value of a slash command choice enum. Only works with the default enum type converter. [AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)] public class ChoiceDisplayAttribute : Attribute Inheritance object Attribute ChoiceDisplayAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChoiceDisplayAttribute(string) Modify the default name and description values of a Slash Command parameter. public ChoiceDisplayAttribute(string name) Parameters name string Name of the parameter. Properties Name Gets the name of the parameter. public string Name { get; } Property Value string"
  },
  "api/Discord.Interactions.CommandInfo-1.html": {
    "href": "api/Discord.Interactions.CommandInfo-1.html",
    "title": "Class CommandInfo<TParameter> | Discord.Net Documentation",
    "keywords": "Class CommandInfo<TParameter> Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll The base information class for InteractionService commands. public abstract class CommandInfo<TParameter> : ICommandInfo where TParameter : class, IParameterInfo Type Parameters TParameter The type of IParameterInfo that is used by this command type. Inheritance object CommandInfo<TParameter> Implements ICommandInfo Derived AutocompleteCommandInfo ComponentCommandInfo ContextCommandInfo ModalCommandInfo SlashCommandInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Attributes Gets a collection of the attributes of this command. public IReadOnlyCollection<Attribute> Attributes { get; } Property Value IReadOnlyCollection<Attribute> CommandService Gets the the underlying command service. public InteractionService CommandService { get; } Property Value InteractionService IgnoreGroupNames Gets true if this command will be registered and executed as a standalone command, unaffected by the GroupAttributes of of the commands parents. public virtual bool IgnoreGroupNames { get; } Property Value bool IsTopLevelCommand Gets true if this command is a top level command and none of its parents have a GroupAttribute. public bool IsTopLevelCommand { get; } Property Value bool MethodName Gets the name of the command handler method. public string MethodName { get; } Property Value string Module Gets the module that the method belongs to. public ModuleInfo Module { get; } Property Value ModuleInfo Name Gets the name of the command. public string Name { get; } Property Value string Parameters Gets a collection of the parameters of this command. public abstract IReadOnlyList<TParameter> Parameters { get; } Property Value IReadOnlyList<TParameter> Preconditions Gets a collection of the preconditions of this command. public IReadOnlyCollection<PreconditionAttribute> Preconditions { get; } Property Value IReadOnlyCollection<PreconditionAttribute> RunMode Get the run mode this command gets executed with. public RunMode RunMode { get; } Property Value RunMode SupportsWildCards Gets whether this command supports wild card patterns. public abstract bool SupportsWildCards { get; } Property Value bool TreatNameAsRegex public bool TreatNameAsRegex { get; } Property Value bool Methods CheckPreconditionsAsync(IInteractionContext, IServiceProvider) Check if an execution context meets the command precondition requirements. public Task<PreconditionResult> CheckPreconditionsAsync(IInteractionContext context, IServiceProvider services) Parameters context IInteractionContext services IServiceProvider Returns Task<PreconditionResult> ExecuteAsync(IInteractionContext, IServiceProvider) Executes the command with the provided context. public virtual Task<IResult> ExecuteAsync(IInteractionContext context, IServiceProvider services) Parameters context IInteractionContext The execution context. services IServiceProvider Dependencies that will be used to create the module instance. Returns Task<IResult> A task representing the execution process. The task result contains the execution result. GetLogString(IInteractionContext) protected abstract string GetLogString(IInteractionContext context) Parameters context IInteractionContext Returns string InvokeEventAndReturn<T>(IInteractionContext, T) protected Task<T> InvokeEventAndReturn<T>(IInteractionContext context, T result) where T : IResult Parameters context IInteractionContext result T Returns Task<T> Type Parameters T InvokeModuleEvent(IInteractionContext, IResult) protected abstract Task InvokeModuleEvent(IInteractionContext context, IResult result) Parameters context IInteractionContext result IResult Returns Task ParseArgumentsAsync(IInteractionContext, IServiceProvider) protected abstract Task<IResult> ParseArgumentsAsync(IInteractionContext context, IServiceProvider services) Parameters context IInteractionContext services IServiceProvider Returns Task<IResult> ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Discord.Interactions.CommandParameterInfo.html": {
    "href": "api/Discord.Interactions.CommandParameterInfo.html",
    "title": "Class CommandParameterInfo | Discord.Net Documentation",
    "keywords": "Class CommandParameterInfo Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represents the base parameter info class for InteractionService commands. public class CommandParameterInfo : IParameterInfo Inheritance object CommandParameterInfo Implements IParameterInfo Derived ComponentCommandParameterInfo ModalCommandParameterInfo SlashCommandParameterInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Attributes Gets a list of the attributes this parameter has. public IReadOnlyCollection<Attribute> Attributes { get; } Property Value IReadOnlyCollection<Attribute> Command Gets the command that this parameter belongs to. public ICommandInfo Command { get; } Property Value ICommandInfo DefaultValue Gets the default value of this parameter if the parameter is optional. public object DefaultValue { get; } Property Value object IsParameterArray Gets whether this parameter is marked with a params keyword. public bool IsParameterArray { get; } Property Value bool IsRequired Gets whether this parameter is required. public bool IsRequired { get; } Property Value bool Name Gets the name of this parameter. public string Name { get; } Property Value string ParameterType Gets the type of this parameter. public Type ParameterType { get; } Property Value Type Preconditions Gets a list of the preconditions this parameter has. public IReadOnlyCollection<ParameterPreconditionAttribute> Preconditions { get; } Property Value IReadOnlyCollection<ParameterPreconditionAttribute> Methods CheckPreconditionsAsync(IInteractionContext, object, IServiceProvider) Check if an execution context meets the parameter precondition requirements. public Task<PreconditionResult> CheckPreconditionsAsync(IInteractionContext context, object value, IServiceProvider services) Parameters context IInteractionContext value object services IServiceProvider Returns Task<PreconditionResult>"
  },
  "api/Discord.Interactions.ComplexParameterAttribute.html": {
    "href": "api/Discord.Interactions.ComplexParameterAttribute.html",
    "title": "Class ComplexParameterAttribute | Discord.Net Documentation",
    "keywords": "Class ComplexParameterAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Registers a parameter as a complex parameter. [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false, Inherited = true)] public class ComplexParameterAttribute : Attribute Inheritance object Attribute ComplexParameterAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ComplexParameterAttribute() Registers a slash command parameter as a complex parameter. public ComplexParameterAttribute() ComplexParameterAttribute(Type[]) Registers a slash command parameter as a complex parameter with a specified constructor signature. public ComplexParameterAttribute(Type[] types) Parameters types Type[] Type array of the preferred constructor parameters. Properties PrioritizedCtorSignature Gets the parameter array of the constructor method that should be prioritized. public Type[] PrioritizedCtorSignature { get; } Property Value Type[]"
  },
  "api/Discord.Interactions.ComplexParameterCtorAttribute.html": {
    "href": "api/Discord.Interactions.ComplexParameterCtorAttribute.html",
    "title": "Class ComplexParameterCtorAttribute | Discord.Net Documentation",
    "keywords": "Class ComplexParameterCtorAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Tag a type constructor as the preferred Complex command constructor. [AttributeUsage(AttributeTargets.Constructor, AllowMultiple = false, Inherited = true)] public class ComplexParameterCtorAttribute : Attribute Inheritance object Attribute ComplexParameterCtorAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Discord.Interactions.ComplexParameterInitializer.html": {
    "href": "api/Discord.Interactions.ComplexParameterInitializer.html",
    "title": "Delegate ComplexParameterInitializer | Discord.Net Documentation",
    "keywords": "Delegate ComplexParameterInitializer Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represents a cached argument constructor delegate. public delegate object ComplexParameterInitializer(object[] args) Parameters args object[] Method arguments array. Returns object Returns the constructed object."
  },
  "api/Discord.Interactions.ComponentCommandInfo.html": {
    "href": "api/Discord.Interactions.ComponentCommandInfo.html",
    "title": "Class ComponentCommandInfo | Discord.Net Documentation",
    "keywords": "Class ComponentCommandInfo Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represents the info class of an attribute based method for handling Component Interaction events. public class ComponentCommandInfo : CommandInfo<ComponentCommandParameterInfo>, ICommandInfo Inheritance object CommandInfo<ComponentCommandParameterInfo> ComponentCommandInfo Implements ICommandInfo Inherited Members CommandInfo<ComponentCommandParameterInfo>.Module CommandInfo<ComponentCommandParameterInfo>.CommandService CommandInfo<ComponentCommandParameterInfo>.Name CommandInfo<ComponentCommandParameterInfo>.MethodName CommandInfo<ComponentCommandParameterInfo>.IgnoreGroupNames CommandInfo<ComponentCommandParameterInfo>.IsTopLevelCommand CommandInfo<ComponentCommandParameterInfo>.RunMode CommandInfo<ComponentCommandParameterInfo>.Attributes CommandInfo<ComponentCommandParameterInfo>.Preconditions CommandInfo<ComponentCommandParameterInfo>.TreatNameAsRegex CommandInfo<ComponentCommandParameterInfo>.CheckPreconditionsAsync(IInteractionContext, IServiceProvider) CommandInfo<ComponentCommandParameterInfo>.InvokeEventAndReturn<T>(IInteractionContext, T) CommandInfo<ComponentCommandParameterInfo>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Parameters Gets a collection of the parameters of this command. public override IReadOnlyList<ComponentCommandParameterInfo> Parameters { get; } Property Value IReadOnlyList<ComponentCommandParameterInfo> SupportsWildCards Gets whether this command supports wild card patterns. public override bool SupportsWildCards { get; } Property Value bool Methods ExecuteAsync(IInteractionContext, IServiceProvider) Executes the command with the provided context. public override Task<IResult> ExecuteAsync(IInteractionContext context, IServiceProvider services) Parameters context IInteractionContext The execution context. services IServiceProvider Dependencies that will be used to create the module instance. Returns Task<IResult> A task representing the execution process. The task result contains the execution result. GetLogString(IInteractionContext) protected override string GetLogString(IInteractionContext context) Parameters context IInteractionContext Returns string InvokeModuleEvent(IInteractionContext, IResult) protected override Task InvokeModuleEvent(IInteractionContext context, IResult result) Parameters context IInteractionContext result IResult Returns Task ParseArgumentsAsync(IInteractionContext, IServiceProvider) protected override Task<IResult> ParseArgumentsAsync(IInteractionContext context, IServiceProvider services) Parameters context IInteractionContext services IServiceProvider Returns Task<IResult>"
  },
  "api/Discord.Interactions.ComponentCommandParameterInfo.html": {
    "href": "api/Discord.Interactions.ComponentCommandParameterInfo.html",
    "title": "Class ComponentCommandParameterInfo | Discord.Net Documentation",
    "keywords": "Class ComponentCommandParameterInfo Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represents the parameter info class for ComponentCommandInfo commands. public class ComponentCommandParameterInfo : CommandParameterInfo, IParameterInfo Inheritance object CommandParameterInfo ComponentCommandParameterInfo Implements IParameterInfo Inherited Members CommandParameterInfo.Command CommandParameterInfo.Name CommandParameterInfo.ParameterType CommandParameterInfo.IsRequired CommandParameterInfo.IsParameterArray CommandParameterInfo.DefaultValue CommandParameterInfo.Attributes CommandParameterInfo.Preconditions CommandParameterInfo.CheckPreconditionsAsync(IInteractionContext, object, IServiceProvider) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsRouteSegmentParameter Gets whether this parameter is a CustomId segment or a component value parameter. public bool IsRouteSegmentParameter { get; } Property Value bool TypeConverter Gets the ComponentTypeConverter that will be used to convert a message component value into ParameterType, if IsRouteSegmentParameter is false. public ComponentTypeConverter TypeConverter { get; } Property Value ComponentTypeConverter TypeReader Gets the TypeReader that will be used to convert a CustomId segment value into ParameterType, if IsRouteSegmentParameter is true. public TypeReader TypeReader { get; } Property Value TypeReader"
  },
  "api/Discord.Interactions.ComponentInteractionAttribute.html": {
    "href": "api/Discord.Interactions.ComponentInteractionAttribute.html",
    "title": "Class ComponentInteractionAttribute | Discord.Net Documentation",
    "keywords": "Class ComponentInteractionAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Create a Message Component interaction handler, CustomId represents the CustomId of the Message Component that will be handled. [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = true)] public class ComponentInteractionAttribute : Attribute Inheritance object Attribute ComponentInteractionAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks GroupAttributes will add prefixes to this command if IgnoreGroupNames is set to false CustomID supports a Wild Card pattern where you can use the WildCardExpression to match a set of CustomIDs. Constructors ComponentInteractionAttribute(string, bool, RunMode) Create a command for component interaction handling. public ComponentInteractionAttribute(string customId, bool ignoreGroupNames = false, RunMode runMode = RunMode.Default) Parameters customId string String to compare the Message Component CustomIDs with. ignoreGroupNames bool If true GroupAttributes will be ignored while creating this command and this method will be treated as a top level command. runMode RunMode Set the run mode of the command. Properties CustomId Gets the string to compare the Message Component CustomIDs with. public string CustomId { get; } Property Value string IgnoreGroupNames Gets true if GroupAttributes will be ignored while creating this command and this method will be treated as a top level command. public bool IgnoreGroupNames { get; } Property Value bool RunMode Gets the run mode this command gets executed with. public RunMode RunMode { get; } Property Value RunMode TreatAsRegex Gets or sets whether the CustomId should be treated as a raw Regex pattern. public bool TreatAsRegex { get; set; } Property Value bool Remarks false defaults to the pattern used before 3.9.0."
  },
  "api/Discord.Interactions.ComponentTypeConverter-1.html": {
    "href": "api/Discord.Interactions.ComponentTypeConverter-1.html",
    "title": "Class ComponentTypeConverter<T> | Discord.Net Documentation",
    "keywords": "Class ComponentTypeConverter<T> Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Base class for creating Component TypeConverters. InteractionService uses TypeConverters to interface with Slash Command parameters. public abstract class ComponentTypeConverter<T> : ComponentTypeConverter Type Parameters T Inheritance object ComponentTypeConverter ComponentTypeConverter<T> Inherited Members ComponentTypeConverter.ReadAsync(IInteractionContext, IComponentInteractionData, IServiceProvider) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvertTo(Type) Will be used to search for alternative TypeConverters whenever the Command Service encounters an unknown parameter type. public override sealed bool CanConvertTo(Type type) Parameters type Type An object type. Returns bool The boolean result."
  },
  "api/Discord.Interactions.ComponentTypeConverter.html": {
    "href": "api/Discord.Interactions.ComponentTypeConverter.html",
    "title": "Class ComponentTypeConverter | Discord.Net Documentation",
    "keywords": "Class ComponentTypeConverter Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Base class for creating Component TypeConverters. InteractionService uses TypeConverters to interface with Slash Command parameters. public abstract class ComponentTypeConverter Inheritance object ComponentTypeConverter Derived ComponentTypeConverter<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvertTo(Type) Will be used to search for alternative TypeConverters whenever the Command Service encounters an unknown parameter type. public abstract bool CanConvertTo(Type type) Parameters type Type An object type. Returns bool The boolean result. ReadAsync(IInteractionContext, IComponentInteractionData, IServiceProvider) Will be used to read the incoming payload before executing the method body. public abstract Task<TypeConverterResult> ReadAsync(IInteractionContext context, IComponentInteractionData option, IServiceProvider services) Parameters context IInteractionContext Command execution context. option IComponentInteractionData Received option payload. services IServiceProvider Service provider that will be used to initialize the command module. Returns Task<TypeConverterResult> The result of the read process."
  },
  "api/Discord.Interactions.ContextCommandAttribute.html": {
    "href": "api/Discord.Interactions.ContextCommandAttribute.html",
    "title": "Class ContextCommandAttribute | Discord.Net Documentation",
    "keywords": "Class ContextCommandAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Base attribute for creating a Context Commands. [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = true)] public abstract class ContextCommandAttribute : Attribute Inheritance object Attribute ContextCommandAttribute Derived MessageCommandAttribute UserCommandAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CommandType Gets the type of this Context Command. public ApplicationCommandType CommandType { get; } Property Value ApplicationCommandType Name Gets the name of this Context Command. public string Name { get; } Property Value string RunMode Gets the run mode this command gets executed with. public RunMode RunMode { get; } Property Value RunMode"
  },
  "api/Discord.Interactions.ContextCommandInfo.html": {
    "href": "api/Discord.Interactions.ContextCommandInfo.html",
    "title": "Class ContextCommandInfo | Discord.Net Documentation",
    "keywords": "Class ContextCommandInfo Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Base information class for attribute based context command handlers. public abstract class ContextCommandInfo : CommandInfo<CommandParameterInfo>, ICommandInfo, IApplicationCommandInfo Inheritance object CommandInfo<CommandParameterInfo> ContextCommandInfo Implements ICommandInfo IApplicationCommandInfo Derived MessageCommandInfo UserCommandInfo Inherited Members CommandInfo<CommandParameterInfo>.Module CommandInfo<CommandParameterInfo>.CommandService CommandInfo<CommandParameterInfo>.Name CommandInfo<CommandParameterInfo>.MethodName CommandInfo<CommandParameterInfo>.IsTopLevelCommand CommandInfo<CommandParameterInfo>.RunMode CommandInfo<CommandParameterInfo>.Attributes CommandInfo<CommandParameterInfo>.Preconditions CommandInfo<CommandParameterInfo>.TreatNameAsRegex CommandInfo<CommandParameterInfo>.ExecuteAsync(IInteractionContext, IServiceProvider) CommandInfo<CommandParameterInfo>.ParseArgumentsAsync(IInteractionContext, IServiceProvider) CommandInfo<CommandParameterInfo>.GetLogString(IInteractionContext) CommandInfo<CommandParameterInfo>.CheckPreconditionsAsync(IInteractionContext, IServiceProvider) CommandInfo<CommandParameterInfo>.InvokeEventAndReturn<T>(IInteractionContext, T) CommandInfo<CommandParameterInfo>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties CommandType Gets the type of this command. public ApplicationCommandType CommandType { get; } Property Value ApplicationCommandType DefaultMemberPermissions Gets the default permissions needed for executing this command. public GuildPermission? DefaultMemberPermissions { get; } Property Value GuildPermission? DefaultPermission Gets the DefaultPermission of this command. public bool DefaultPermission { get; } Property Value bool IgnoreGroupNames Gets true if this command will be registered and executed as a standalone command, unaffected by the GroupAttributes of of the commands parents. public override bool IgnoreGroupNames { get; } Property Value bool IsEnabledInDm Gets whether this command can be used in DMs. public bool IsEnabledInDm { get; } Property Value bool IsNsfw Gets whether this command can is age restricted. public bool IsNsfw { get; } Property Value bool Parameters Gets a collection of the parameters of this command. public override IReadOnlyList<CommandParameterInfo> Parameters { get; } Property Value IReadOnlyList<CommandParameterInfo> SupportsWildCards Gets whether this command supports wild card patterns. public override bool SupportsWildCards { get; } Property Value bool Methods InvokeModuleEvent(IInteractionContext, IResult) protected override Task InvokeModuleEvent(IInteractionContext context, IResult result) Parameters context IInteractionContext result IResult Returns Task"
  },
  "api/Discord.Interactions.ContextType.html": {
    "href": "api/Discord.Interactions.ContextType.html",
    "title": "Enum ContextType | Discord.Net Documentation",
    "keywords": "Enum ContextType Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Defines the type of command context (i.e. where the command is being executed). [Flags] public enum ContextType Fields DM = 2 Specifies the command to be executed within a DM. Group = 4 Specifies the command to be executed within a group. Guild = 1 Specifies the command to be executed within a guild."
  },
  "api/Discord.Interactions.DefaultMemberPermissionsAttribute.html": {
    "href": "api/Discord.Interactions.DefaultMemberPermissionsAttribute.html",
    "title": "Class DefaultMemberPermissionsAttribute | Discord.Net Documentation",
    "keywords": "Class DefaultMemberPermissionsAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Sets the DefaultMemberPermissions of an application command or module. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = false, Inherited = true)] public class DefaultMemberPermissionsAttribute : Attribute Inheritance object Attribute DefaultMemberPermissionsAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DefaultMemberPermissionsAttribute(GuildPermission) Sets the DefaultMemberPermissions of an application command or module. public DefaultMemberPermissionsAttribute(GuildPermission permissions) Parameters permissions GuildPermission The default permission required to use this command. Properties Permissions Gets the default permission required to use this command. public GuildPermission Permissions { get; } Property Value GuildPermission"
  },
  "api/Discord.Interactions.DefaultPermissionAttribute.html": {
    "href": "api/Discord.Interactions.DefaultPermissionAttribute.html",
    "title": "Class DefaultPermissionAttribute | Discord.Net Documentation",
    "keywords": "Class DefaultPermissionAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Set the \"Default Permission\" property of an Application Command. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = false, Inherited = true)] [Obsolete(\"Soon to be deprecated, use Permissions-v2 attributes like EnabledInDmAttribute and DefaultMemberPermissionsAttribute\")] public class DefaultPermissionAttribute : Attribute Inheritance object Attribute DefaultPermissionAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DefaultPermissionAttribute(bool) Set the default permission of a Slash Command. public DefaultPermissionAttribute(bool isDefaultPermission) Parameters isDefaultPermission bool true if the users are allowed to use this command. Properties IsDefaultPermission Gets whether the users are allowed to use a Slash Command by default or not. public bool IsDefaultPermission { get; } Property Value bool"
  },
  "api/Discord.Interactions.DontAutoRegisterAttribute.html": {
    "href": "api/Discord.Interactions.DontAutoRegisterAttribute.html",
    "title": "Class DontAutoRegisterAttribute | Discord.Net Documentation",
    "keywords": "Class DontAutoRegisterAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll InteractionModuleBase<T>s with this attribute will not be registered by the RegisterCommandsGloballyAsync(bool) or RegisterCommandsToGuildAsync(ulong, bool) methods. [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)] public class DontAutoRegisterAttribute : Attribute Inheritance object Attribute DontAutoRegisterAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Discord.Interactions.EnabledInDmAttribute.html": {
    "href": "api/Discord.Interactions.EnabledInDmAttribute.html",
    "title": "Class EnabledInDmAttribute | Discord.Net Documentation",
    "keywords": "Class EnabledInDmAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Sets the IsEnabledInDm property of an application command or module. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = false, Inherited = true)] public class EnabledInDmAttribute : Attribute Inheritance object Attribute EnabledInDmAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EnabledInDmAttribute(bool) Sets the IsEnabledInDm property of an application command or module. public EnabledInDmAttribute(bool isEnabled) Parameters isEnabled bool Whether or not this command can be used in DMs. Properties IsEnabled Gets whether or not this command can be used in DMs. public bool IsEnabled { get; } Property Value bool"
  },
  "api/Discord.Interactions.ExecuteCallback.html": {
    "href": "api/Discord.Interactions.ExecuteCallback.html",
    "title": "Delegate ExecuteCallback | Discord.Net Documentation",
    "keywords": "Delegate ExecuteCallback Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represents a cached method execution delegate. public delegate Task ExecuteCallback(IInteractionContext context, object[] args, IServiceProvider serviceProvider, ICommandInfo commandInfo) Parameters context IInteractionContext Execution context that will be injected into the module class. args object[] Method arguments array. serviceProvider IServiceProvider Service collection for initializing the module. commandInfo ICommandInfo Command info class of the executed method. Returns Task A task representing the execution operation."
  },
  "api/Discord.Interactions.ExecuteResult.html": {
    "href": "api/Discord.Interactions.ExecuteResult.html",
    "title": "Struct ExecuteResult | Discord.Net Documentation",
    "keywords": "Struct ExecuteResult Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Contains information of the command's overall execution result. public struct ExecuteResult : IResult Implements IResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Error Gets the error type that may have occurred during the operation. public readonly InteractionCommandError? Error { get; } Property Value InteractionCommandError? A InteractionCommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. ErrorReason Gets the reason for the error. public readonly string ErrorReason { get; } Property Value string A string containing the error reason. Exception Gets the exception that may have occurred during the command execution. public readonly Exception Exception { get; } Property Value Exception IsSuccess Indicates whether the operation was successful or not. public bool IsSuccess { get; } Property Value bool true if the result is positive; otherwise false. Methods FromError(IResult) Initializes a new ExecuteResult with a specified result; this may or may not be an successful execution depending on the Error and ErrorReason specified. public static ExecuteResult FromError(IResult result) Parameters result IResult The result to inherit from. Returns ExecuteResult A ExecuteResult that inherits the IResult error type and reason. FromError(InteractionCommandError, string) Initializes a new ExecuteResult with a specified InteractionCommandError and its reason, indicating an unsuccessful execution. public static ExecuteResult FromError(InteractionCommandError commandError, string reason) Parameters commandError InteractionCommandError The type of error. reason string The reason behind the error. Returns ExecuteResult A ExecuteResult that contains a InteractionCommandError and reason. FromError(Exception) Initializes a new ExecuteResult with a specified exception, indicating an unsuccessful execution. public static ExecuteResult FromError(Exception exception) Parameters exception Exception The exception that caused the command execution to fail. Returns ExecuteResult A ExecuteResult that contains the exception that caused the unsuccessful execution, along with a InteractionCommandError of type Exception as well as the exception message as the reason. FromSuccess() Initializes a new ExecuteResult with no error, indicating a successful execution. public static ExecuteResult FromSuccess() Returns ExecuteResult A ExecuteResult that does not contain any errors. ToString() Gets a string that indicates the execution result. public override string ToString() Returns string Success if IsSuccess is true; otherwise \"Error: ErrorReason\"."
  },
  "api/Discord.Interactions.GroupAttribute.html": {
    "href": "api/Discord.Interactions.GroupAttribute.html",
    "title": "Class GroupAttribute | Discord.Net Documentation",
    "keywords": "Class GroupAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Create nested Slash Commands by marking a module as a command group. [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)] public class GroupAttribute : Attribute Inheritance object Attribute GroupAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks ContextCommandAttribute commands wil not be affected by this. Constructors GroupAttribute(string, string) Create a command group. public GroupAttribute(string name, string description) Parameters name string Name of the group. description string Description of the group. Properties Description Gets the description of the group. public string Description { get; } Property Value string Name Gets the name of the group. public string Name { get; } Property Value string"
  },
  "api/Discord.Interactions.HideAttribute.html": {
    "href": "api/Discord.Interactions.HideAttribute.html",
    "title": "Class HideAttribute | Discord.Net Documentation",
    "keywords": "Class HideAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Enum values tagged with this attribute will not be displayed as a parameter choice [AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = true)] public sealed class HideAttribute : Attribute Inheritance object Attribute HideAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks This attribute must be used along with the default EnumConverter<T>"
  },
  "api/Discord.Interactions.IApplicationCommandInfo.html": {
    "href": "api/Discord.Interactions.IApplicationCommandInfo.html",
    "title": "Interface IApplicationCommandInfo | Discord.Net Documentation",
    "keywords": "Interface IApplicationCommandInfo Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represents a InteractionService command that can be registered to Discord. public interface IApplicationCommandInfo Properties CommandType Gets the type of this command. ApplicationCommandType CommandType { get; } Property Value ApplicationCommandType DefaultMemberPermissions Gets the default permissions needed for executing this command. GuildPermission? DefaultMemberPermissions { get; } Property Value GuildPermission? DefaultPermission Gets the DefaultPermission of this command. [Obsolete(\"To be deprecated soon, use IsEnabledInDm and DefaultMemberPermissions instead.\")] bool DefaultPermission { get; } Property Value bool IsEnabledInDm Gets whether this command can be used in DMs. bool IsEnabledInDm { get; } Property Value bool IsNsfw Gets whether this command can is age restricted. bool IsNsfw { get; } Property Value bool Name Gets the name of this command. string Name { get; } Property Value string"
  },
  "api/Discord.Interactions.IAutocompleteHandler.html": {
    "href": "api/Discord.Interactions.IAutocompleteHandler.html",
    "title": "Interface IAutocompleteHandler | Discord.Net Documentation",
    "keywords": "Interface IAutocompleteHandler Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represent a Autocomplete handler object that can be executed to generate parameter suggestions. public interface IAutocompleteHandler Properties InteractionService Gets the the underlying command service. InteractionService InteractionService { get; } Property Value InteractionService Methods ExecuteAsync(IInteractionContext, IAutocompleteInteraction, IParameterInfo, IServiceProvider) Executes the IAutocompleteHandler with the provided context. Task<IResult> ExecuteAsync(IInteractionContext context, IAutocompleteInteraction autocompleteInteraction, IParameterInfo parameter, IServiceProvider services) Parameters context IInteractionContext The execution context. autocompleteInteraction IAutocompleteInteraction AutocompleteInteraction payload. parameter IParameterInfo Parameter information of the target parameter. services IServiceProvider Dependencies that will be used to create the module instance. Returns Task<IResult> A task representing the execution process. The task result contains the execution result. GenerateSuggestionsAsync(IInteractionContext, IAutocompleteInteraction, IParameterInfo, IServiceProvider) Will be used to generate parameter suggestions. Task<AutocompletionResult> GenerateSuggestionsAsync(IInteractionContext context, IAutocompleteInteraction autocompleteInteraction, IParameterInfo parameter, IServiceProvider services) Parameters context IInteractionContext Command execution context. autocompleteInteraction IAutocompleteInteraction Autocomplete Interaction payload. parameter IParameterInfo Parameter information of the target parameter. services IServiceProvider Dependencies that will be used to create the module instance. Returns Task<AutocompletionResult> A task representing the execution process. The task result contains the Autocompletion result."
  },
  "api/Discord.Interactions.ICommandInfo.html": {
    "href": "api/Discord.Interactions.ICommandInfo.html",
    "title": "Interface ICommandInfo | Discord.Net Documentation",
    "keywords": "Interface ICommandInfo Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represent a command information object that can be executed. public interface ICommandInfo Properties Attributes Gets a collection of the attributes of this command. IReadOnlyCollection<Attribute> Attributes { get; } Property Value IReadOnlyCollection<Attribute> CommandService Gets the the underlying command service. InteractionService CommandService { get; } Property Value InteractionService IgnoreGroupNames Gets true if this command will be registered and executed as a standalone command, unaffected by the GroupAttributes of of the commands parents. bool IgnoreGroupNames { get; } Property Value bool IsTopLevelCommand Gets true if this command is a top level command and none of its parents have a GroupAttribute. bool IsTopLevelCommand { get; } Property Value bool MethodName Gets the name of the command handler method. string MethodName { get; } Property Value string Module Gets the module that the method belongs to. ModuleInfo Module { get; } Property Value ModuleInfo Name Gets the name of the command. string Name { get; } Property Value string Parameters Gets a collection of the parameters of this command. IReadOnlyCollection<IParameterInfo> Parameters { get; } Property Value IReadOnlyCollection<IParameterInfo> Preconditions Gets a collection of the preconditions of this command. IReadOnlyCollection<PreconditionAttribute> Preconditions { get; } Property Value IReadOnlyCollection<PreconditionAttribute> RunMode Get the run mode this command gets executed with. RunMode RunMode { get; } Property Value RunMode SupportsWildCards Gets whether this command supports wild card patterns. bool SupportsWildCards { get; } Property Value bool TreatNameAsRegex bool TreatNameAsRegex { get; } Property Value bool Methods CheckPreconditionsAsync(IInteractionContext, IServiceProvider) Check if an execution context meets the command precondition requirements. Task<PreconditionResult> CheckPreconditionsAsync(IInteractionContext context, IServiceProvider services) Parameters context IInteractionContext services IServiceProvider Returns Task<PreconditionResult> ExecuteAsync(IInteractionContext, IServiceProvider) Executes the command with the provided context. Task<IResult> ExecuteAsync(IInteractionContext context, IServiceProvider services) Parameters context IInteractionContext The execution context. services IServiceProvider Dependencies that will be used to create the module instance. Returns Task<IResult> A task representing the execution process. The task result contains the execution result."
  },
  "api/Discord.Interactions.IDiscordInteractionExtentions.html": {
    "href": "api/Discord.Interactions.IDiscordInteractionExtentions.html",
    "title": "Class IDiscordInteractionExtentions | Discord.Net Documentation",
    "keywords": "Class IDiscordInteractionExtentions Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll public static class IDiscordInteractionExtentions Inheritance object IDiscordInteractionExtentions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RespondWithModalAsync<T>(IDiscordInteraction, string, InteractionService, RequestOptions, Action<ModalBuilder>) Respond to an interaction with a IModal. public static Task RespondWithModalAsync<T>(this IDiscordInteraction interaction, string customId, InteractionService interactionService, RequestOptions options = null, Action<ModalBuilder> modifyModal = null) where T : class, IModal Parameters interaction IDiscordInteraction The interaction to respond to. customId string interactionService InteractionService Interaction service instance that should be used to build ModalInfos. options RequestOptions The request options for this async request. modifyModal Action<ModalBuilder> Delegate that can be used to modify the modal. Returns Task Type Parameters T Type of the IModal implementation. Remarks This method overload uses the interactionService parameter to create a new ModalInfo if there isn't a built one already in cache. RespondWithModalAsync<T>(IDiscordInteraction, string, RequestOptions, Action<ModalBuilder>) Respond to an interaction with a IModal. public static Task RespondWithModalAsync<T>(this IDiscordInteraction interaction, string customId, RequestOptions options = null, Action<ModalBuilder> modifyModal = null) where T : class, IModal Parameters interaction IDiscordInteraction The interaction to respond to. customId string options RequestOptions The request options for this async request. modifyModal Action<ModalBuilder> Delegate that can be used to modify the modal. Returns Task A task that represents the asynchronous operation of responding to the interaction. Type Parameters T Type of the IModal implementation. RespondWithModalAsync<T>(IDiscordInteraction, string, T, RequestOptions, Action<ModalBuilder>) Respond to an interaction with an IModal and fills the value fields of the modal using the property values of the provided instance. public static Task RespondWithModalAsync<T>(this IDiscordInteraction interaction, string customId, T modal, RequestOptions options = null, Action<ModalBuilder> modifyModal = null) where T : class, IModal Parameters interaction IDiscordInteraction The interaction to respond to. customId string modal T The IModal instance to get field values from. options RequestOptions The request options for this async request. modifyModal Action<ModalBuilder> Delegate that can be used to modify the modal. Returns Task Type Parameters T Type of the IModal implementation."
  },
  "api/Discord.Interactions.IInteractionModuleBase.html": {
    "href": "api/Discord.Interactions.IInteractionModuleBase.html",
    "title": "Interface IInteractionModuleBase | Discord.Net Documentation",
    "keywords": "Interface IInteractionModuleBase Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represents a generic interaction module base. public interface IInteractionModuleBase Methods AfterExecute(ICommandInfo) Method body to be executed after an application command execution. void AfterExecute(ICommandInfo command) Parameters command ICommandInfo Command information related to the Discord Application Command. AfterExecuteAsync(ICommandInfo) Method body to be executed asynchronously after an application command execution. Task AfterExecuteAsync(ICommandInfo command) Parameters command ICommandInfo Command information related to the Discord Application Command. Returns Task BeforeExecute(ICommandInfo) Method body to be executed before executing an application command. void BeforeExecute(ICommandInfo command) Parameters command ICommandInfo Command information related to the Discord Application Command. BeforeExecuteAsync(ICommandInfo) Method body to be executed asynchronously before executing an application command. Task BeforeExecuteAsync(ICommandInfo command) Parameters command ICommandInfo Command information related to the Discord Application Command. Returns Task Construct(ModuleBuilder, InteractionService) Method body to be executed after the automated module creation is completed and before Build(InteractionService, IServiceProvider, ModuleInfo) is called. void Construct(ModuleBuilder builder, InteractionService commandService) Parameters builder ModuleBuilder Builder class of this module. commandService InteractionService Command Service instance that is building this method. OnModuleBuilding(InteractionService, ModuleInfo) Method body to be executed when Build(InteractionService, IServiceProvider, ModuleInfo) is called. void OnModuleBuilding(InteractionService commandService, ModuleInfo module) Parameters commandService InteractionService Command Service instance that built this module. module ModuleInfo Info class of this module. SetContext(IInteractionContext) Sets the context of this module. void SetContext(IInteractionContext context) Parameters context IInteractionContext"
  },
  "api/Discord.Interactions.ILocalizationManager.html": {
    "href": "api/Discord.Interactions.ILocalizationManager.html",
    "title": "Interface ILocalizationManager | Discord.Net Documentation",
    "keywords": "Interface ILocalizationManager Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represents a localization provider for Discord Application Commands. public interface ILocalizationManager Methods GetAllDescriptions(IList<string>, LocalizationTarget) Get every the resource description for every available locale. IDictionary<string, string> GetAllDescriptions(IList<string> key, LocalizationTarget destinationType) Parameters key IList<string> Location of the resource. destinationType LocalizationTarget Type of the resource. Returns IDictionary<string, string> A dictionary containing every available locale and the resource name. GetAllNames(IList<string>, LocalizationTarget) Get every the resource name for every available locale. IDictionary<string, string> GetAllNames(IList<string> key, LocalizationTarget destinationType) Parameters key IList<string> Location of the resource. destinationType LocalizationTarget Type of the resource. Returns IDictionary<string, string> A dictionary containing every available locale and the resource name."
  },
  "api/Discord.Interactions.IModal.html": {
    "href": "api/Discord.Interactions.IModal.html",
    "title": "Interface IModal | Discord.Net Documentation",
    "keywords": "Interface IModal Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represents a generic Modal for use with the interaction service. public interface IModal Properties Title Gets the modal's title. string Title { get; } Property Value string"
  },
  "api/Discord.Interactions.IParameterInfo.html": {
    "href": "api/Discord.Interactions.IParameterInfo.html",
    "title": "Interface IParameterInfo | Discord.Net Documentation",
    "keywords": "Interface IParameterInfo Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represents a ICommandInfo parameter. public interface IParameterInfo Properties Attributes Gets a list of the attributes this parameter has. IReadOnlyCollection<Attribute> Attributes { get; } Property Value IReadOnlyCollection<Attribute> Command Gets the command that this parameter belongs to. ICommandInfo Command { get; } Property Value ICommandInfo DefaultValue Gets the default value of this parameter if the parameter is optional. object DefaultValue { get; } Property Value object IsParameterArray Gets whether this parameter is marked with a params keyword. bool IsParameterArray { get; } Property Value bool IsRequired Gets whether this parameter is required. bool IsRequired { get; } Property Value bool Name Gets the name of this parameter. string Name { get; } Property Value string ParameterType Gets the type of this parameter. Type ParameterType { get; } Property Value Type Preconditions Gets a list of the preconditions this parameter has. IReadOnlyCollection<ParameterPreconditionAttribute> Preconditions { get; } Property Value IReadOnlyCollection<ParameterPreconditionAttribute> Methods CheckPreconditionsAsync(IInteractionContext, object, IServiceProvider) Check if an execution context meets the parameter precondition requirements. Task<PreconditionResult> CheckPreconditionsAsync(IInteractionContext context, object value, IServiceProvider services) Parameters context IInteractionContext value object services IServiceProvider Returns Task<PreconditionResult>"
  },
  "api/Discord.Interactions.IResult.html": {
    "href": "api/Discord.Interactions.IResult.html",
    "title": "Interface IResult | Discord.Net Documentation",
    "keywords": "Interface IResult Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Contains information of the result related to a command. public interface IResult Properties Error Gets the error type that may have occurred during the operation. InteractionCommandError? Error { get; } Property Value InteractionCommandError? A InteractionCommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. ErrorReason Gets the reason for the error. string ErrorReason { get; } Property Value string A string containing the error reason. IsSuccess Indicates whether the operation was successful or not. bool IsSuccess { get; } Property Value bool true if the result is positive; otherwise false."
  },
  "api/Discord.Interactions.InputComponentInfo.html": {
    "href": "api/Discord.Interactions.InputComponentInfo.html",
    "title": "Class InputComponentInfo | Discord.Net Documentation",
    "keywords": "Class InputComponentInfo Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represents the base info class for IModal input components. public abstract class InputComponentInfo Inheritance object InputComponentInfo Derived TextInputComponentInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InputComponentInfo(IInputComponentBuilder, ModalInfo) protected InputComponentInfo(IInputComponentBuilder builder, ModalInfo modal) Parameters builder IInputComponentBuilder modal ModalInfo Properties Attributes Gets a collection of the attributes of this command. public IReadOnlyCollection<Attribute> Attributes { get; } Property Value IReadOnlyCollection<Attribute> ComponentType Gets the type of this component. public ComponentType ComponentType { get; } Property Value ComponentType CustomId Gets the custom id of this component. public string CustomId { get; } Property Value string DefaultValue Gets the default value of this component. public object DefaultValue { get; } Property Value object IsRequired Gets whether or not this component requires a user input. public bool IsRequired { get; } Property Value bool Label Gets the label of this component. public string Label { get; } Property Value string Modal Gets the parent modal of this component. public ModalInfo Modal { get; } Property Value ModalInfo PropertyInfo Gets the property linked to this component. public PropertyInfo PropertyInfo { get; } Property Value PropertyInfo Type Gets the reference type of this component. public Type Type { get; } Property Value Type TypeConverter Gets the ComponentTypeConverter assigned to this component. public ComponentTypeConverter TypeConverter { get; } Property Value ComponentTypeConverter"
  },
  "api/Discord.Interactions.InputLabelAttribute.html": {
    "href": "api/Discord.Interactions.InputLabelAttribute.html",
    "title": "Class InputLabelAttribute | Discord.Net Documentation",
    "keywords": "Class InputLabelAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Creates a custom label for an modal input. [AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)] public class InputLabelAttribute : Attribute Inheritance object Attribute InputLabelAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InputLabelAttribute(string) Creates a custom label for an modal input. public InputLabelAttribute(string label) Parameters label string The label of the input. Properties Label Gets the label of the input. public string Label { get; } Property Value string"
  },
  "api/Discord.Interactions.InteractionCommandError.html": {
    "href": "api/Discord.Interactions.InteractionCommandError.html",
    "title": "Enum InteractionCommandError | Discord.Net Documentation",
    "keywords": "Enum InteractionCommandError Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Defines the type of error a command can throw. public enum InteractionCommandError Fields BadArgs = 2 Thrown when the input text has too few or too many arguments. ConvertFailed = 1 Thrown when the Slash Command parameter fails to be converted by a TypeReader. Exception = 3 Thrown when an exception occurs mid-command execution. ParseFailed = 6 Thrown when the command context cannot be parsed by the ICommandInfo. UnknownCommand = 0 Thrown when the command is unknown. UnmetPrecondition = 5 Thrown when the command fails to meet a PreconditionAttribute's conditions. Unsuccessful = 4 Thrown when the command is not successfully executed on runtime."
  },
  "api/Discord.Interactions.InteractionContext.html": {
    "href": "api/Discord.Interactions.InteractionContext.html",
    "title": "Class InteractionContext | Discord.Net Documentation",
    "keywords": "Class InteractionContext Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represents the context of an Interaction. public class InteractionContext : IInteractionContext, IRouteMatchContainer Inheritance object InteractionContext Implements IInteractionContext IRouteMatchContainer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InteractionContext(IDiscordClient, IDiscordInteraction, IMessageChannel) Initializes a new SocketInteractionContext<TInteraction>. public InteractionContext(IDiscordClient client, IDiscordInteraction interaction, IMessageChannel channel = null) Parameters client IDiscordClient The underlying client. interaction IDiscordInteraction The underlying interaction. channel IMessageChannel IMessageChannel the command originated from. Properties Channel Gets the channel the interaction originated from. public IMessageChannel Channel { get; } Property Value IMessageChannel Client Gets the client that will be used to handle this interaction. public IDiscordClient Client { get; } Property Value IDiscordClient Guild Gets the guild the interaction originated from. public IGuild Guild { get; } Property Value IGuild Remarks Will be null if the interaction originated from a DM channel or the interaction was a Context Command interaction. Interaction Gets the underlying interaction. public IDiscordInteraction Interaction { get; } Property Value IDiscordInteraction SegmentMatches Gets the collection of captured route segments in this container. public IReadOnlyCollection<IRouteSegmentMatch> SegmentMatches { get; } Property Value IReadOnlyCollection<IRouteSegmentMatch> A collection of captured route segments. User Gets the user who invoked the interaction event. public IUser User { get; } Property Value IUser Methods SetSegmentMatches(IEnumerable<IRouteSegmentMatch>) Sets the SegmentMatches property of this container. public void SetSegmentMatches(IEnumerable<IRouteSegmentMatch> segmentMatches) Parameters segmentMatches IEnumerable<IRouteSegmentMatch> The collection of captured route segments."
  },
  "api/Discord.Interactions.InteractionException.html": {
    "href": "api/Discord.Interactions.InteractionException.html",
    "title": "Class InteractionException | Discord.Net Documentation",
    "keywords": "Class InteractionException Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll public class InteractionException : Exception, ISerializable Inheritance object Exception InteractionException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors InteractionException(ICommandInfo, IInteractionContext, Exception) public InteractionException(ICommandInfo commandInfo, IInteractionContext context, Exception exception) Parameters commandInfo ICommandInfo context IInteractionContext exception Exception Properties CommandInfo public ICommandInfo CommandInfo { get; } Property Value ICommandInfo InteractionContext public IInteractionContext InteractionContext { get; } Property Value IInteractionContext"
  },
  "api/Discord.Interactions.InteractionModuleBase-1.html": {
    "href": "api/Discord.Interactions.InteractionModuleBase-1.html",
    "title": "Class InteractionModuleBase<T> | Discord.Net Documentation",
    "keywords": "Class InteractionModuleBase<T> Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Provides a base class for a command module to inherit from. public abstract class InteractionModuleBase<T> : IInteractionModuleBase where T : class, IInteractionContext Type Parameters T Type of interaction context to be injected into the module. Inheritance object InteractionModuleBase<T> Implements IInteractionModuleBase Derived InteractionModuleBase RestInteractionModuleBase<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Context Gets the underlying context of the command. public T Context { get; } Property Value T Methods AfterExecute(ICommandInfo) Method body to be executed after an application command execution. public virtual void AfterExecute(ICommandInfo command) Parameters command ICommandInfo Command information related to the Discord Application Command. AfterExecuteAsync(ICommandInfo) Method body to be executed asynchronously after an application command execution. public virtual Task AfterExecuteAsync(ICommandInfo command) Parameters command ICommandInfo Command information related to the Discord Application Command. Returns Task BeforeExecute(ICommandInfo) Method body to be executed before executing an application command. public virtual void BeforeExecute(ICommandInfo command) Parameters command ICommandInfo Command information related to the Discord Application Command. BeforeExecuteAsync(ICommandInfo) Method body to be executed asynchronously before executing an application command. public virtual Task BeforeExecuteAsync(ICommandInfo command) Parameters command ICommandInfo Command information related to the Discord Application Command. Returns Task Construct(ModuleBuilder, InteractionService) Method body to be executed after the automated module creation is completed and before Build(InteractionService, IServiceProvider, ModuleInfo) is called. public virtual void Construct(ModuleBuilder builder, InteractionService commandService) Parameters builder ModuleBuilder Builder class of this module. commandService InteractionService Command Service instance that is building this method. DeferAsync(bool, RequestOptions) Acknowledges this interaction. protected virtual Task DeferAsync(bool ephemeral = false, RequestOptions options = null) Parameters ephemeral bool options RequestOptions Returns Task A task that represents the asynchronous operation of deferring the interaction. DeleteOriginalResponseAsync() Deletes this object and all its children. protected virtual Task DeleteOriginalResponseAsync() Returns Task FollowupAsync(string, Embed[], bool, bool, AllowedMentions, RequestOptions, MessageComponent, Embed) Sends a followup message for this interaction. protected virtual Task<IUserMessage> FollowupAsync(string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, RequestOptions options = null, MessageComponent components = null, Embed embed = null) Parameters text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. options RequestOptions The request options for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. Returns Task<IUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. protected virtual Task<IUserMessage> FollowupWithFileAsync(FileAttachment attachment, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachment FileAttachment The attachment containing the file and description. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<IUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. protected virtual Task<IUserMessage> FollowupWithFileAsync(Stream fileStream, string fileName, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters fileStream Stream The file to upload. fileName string The file name of the attachment. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<IUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. protected virtual Task<IUserMessage> FollowupWithFileAsync(string filePath, string fileName = null, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters filePath string The file to upload. fileName string The file name of the attachment. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<IUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. protected virtual Task<IUserMessage> FollowupWithFilesAsync(IEnumerable<FileAttachment> attachments, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<IUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. GetOriginalResponseAsync(RequestOptions) Gets the original response for this interaction. protected virtual Task<IUserMessage> GetOriginalResponseAsync(RequestOptions options = null) Parameters options RequestOptions The request options for this async request. Returns Task<IUserMessage> A IUserMessage that represents the initial response. ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) Edits original response for this interaction. protected virtual Task<IUserMessage> ModifyOriginalResponseAsync(Action<MessageProperties> func, RequestOptions options = null) Parameters func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The request options for this async request. Returns Task<IUserMessage> A task that represents an asynchronous modification operation. The task result contains the updated message. OnModuleBuilding(InteractionService, ModuleInfo) Method body to be executed when Build(InteractionService, IServiceProvider, ModuleInfo) is called. public virtual void OnModuleBuilding(InteractionService commandService, ModuleInfo module) Parameters commandService InteractionService Command Service instance that built this module. module ModuleInfo Info class of this module. ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a message to this message channel. protected virtual Task<IUserMessage> ReplyAsync(string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters text string The message to be sent. isTTS bool Determines whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the message. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<IUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example sends a message with the current system time in RFC 1123 format to the channel and deletes itself after 5 seconds. RespondAsync(string, Embed[], bool, bool, AllowedMentions, RequestOptions, MessageComponent, Embed) Responds to an Interaction with type ChannelMessageWithSource. protected virtual Task RespondAsync(string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, RequestOptions options = null, MessageComponent components = null, Embed embed = null) Parameters text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. options RequestOptions The request options for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. Returns Task A task that represents an asynchronous send operation for delivering the message. RespondWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Responds to this interaction with a file attachment. protected virtual Task RespondWithFileAsync(FileAttachment attachment, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachment FileAttachment The attachment containing the file and description. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. RespondWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Responds to this interaction with a file attachment. protected virtual Task RespondWithFileAsync(Stream fileStream, string fileName, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters fileStream Stream The file to upload. fileName string The file name of the attachment. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. RespondWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Responds to this interaction with a file attachment. protected virtual Task RespondWithFileAsync(string filePath, string fileName = null, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters filePath string The file to upload. fileName string The file name of the attachment. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. RespondWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Responds to this interaction with a collection of file attachments. protected virtual Task RespondWithFilesAsync(IEnumerable<FileAttachment> attachments, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. RespondWithModalAsync(Modal, RequestOptions) Responds to the interaction with a modal. protected virtual Task RespondWithModalAsync(Modal modal, RequestOptions options = null) Parameters modal Modal The modal to respond with. options RequestOptions The request options for this async request. Returns Task A task that represents the asynchronous operation of responding to the interaction. RespondWithModalAsync<TModal>(string, RequestOptions, Action<ModalBuilder>) Respond to an interaction with a IModal. protected virtual Task RespondWithModalAsync<TModal>(string customId, RequestOptions options = null, Action<ModalBuilder> modifyModal = null) where TModal : class, IModal Parameters customId string options RequestOptions The request options for this async request. modifyModal Action<ModalBuilder> Delegate that can be used to modify the modal. Returns Task A task that represents the asynchronous operation of responding to the interaction. Type Parameters TModal RespondWithModalAsync<TModal>(string, TModal, RequestOptions, Action<ModalBuilder>) Respond to an interaction with an IModal and fills the value fields of the modal using the property values of the provided instance. protected virtual Task RespondWithModalAsync<TModal>(string customId, TModal modal, RequestOptions options = null, Action<ModalBuilder> modifyModal = null) where TModal : class, IModal Parameters customId string modal TModal The IModal instance to get field values from. options RequestOptions The request options for this async request. modifyModal Action<ModalBuilder> Delegate that can be used to modify the modal. Returns Task Type Parameters TModal RespondWithPremiumRequiredAsync(RequestOptions) Responds to the interaction with an ephemeral message the invoking user, instructing them that whatever they tried to do requires the premium benefits of your app. protected virtual Task RespondWithPremiumRequiredAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task A task that represents the asynchronous operation of responding to the interaction."
  },
  "api/Discord.Interactions.InteractionModuleBase.html": {
    "href": "api/Discord.Interactions.InteractionModuleBase.html",
    "title": "Class InteractionModuleBase | Discord.Net Documentation",
    "keywords": "Class InteractionModuleBase Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Provides a base class for a command module to inherit from. public abstract class InteractionModuleBase : InteractionModuleBase<IInteractionContext>, IInteractionModuleBase Inheritance object InteractionModuleBase<IInteractionContext> InteractionModuleBase Implements IInteractionModuleBase Inherited Members InteractionModuleBase<IInteractionContext>.Context InteractionModuleBase<IInteractionContext>.AfterExecute(ICommandInfo) InteractionModuleBase<IInteractionContext>.BeforeExecute(ICommandInfo) InteractionModuleBase<IInteractionContext>.BeforeExecuteAsync(ICommandInfo) InteractionModuleBase<IInteractionContext>.AfterExecuteAsync(ICommandInfo) InteractionModuleBase<IInteractionContext>.OnModuleBuilding(InteractionService, ModuleInfo) InteractionModuleBase<IInteractionContext>.Construct(ModuleBuilder, InteractionService) InteractionModuleBase<IInteractionContext>.DeferAsync(bool, RequestOptions) InteractionModuleBase<IInteractionContext>.RespondAsync(string, Embed[], bool, bool, AllowedMentions, RequestOptions, MessageComponent, Embed) InteractionModuleBase<IInteractionContext>.RespondWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) InteractionModuleBase<IInteractionContext>.RespondWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) InteractionModuleBase<IInteractionContext>.RespondWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) InteractionModuleBase<IInteractionContext>.RespondWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) InteractionModuleBase<IInteractionContext>.FollowupAsync(string, Embed[], bool, bool, AllowedMentions, RequestOptions, MessageComponent, Embed) InteractionModuleBase<IInteractionContext>.FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) InteractionModuleBase<IInteractionContext>.FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) InteractionModuleBase<IInteractionContext>.FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) InteractionModuleBase<IInteractionContext>.FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) InteractionModuleBase<IInteractionContext>.ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) InteractionModuleBase<IInteractionContext>.GetOriginalResponseAsync(RequestOptions) InteractionModuleBase<IInteractionContext>.ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) InteractionModuleBase<IInteractionContext>.DeleteOriginalResponseAsync() InteractionModuleBase<IInteractionContext>.RespondWithModalAsync(Modal, RequestOptions) InteractionModuleBase<IInteractionContext>.RespondWithModalAsync<TModal>(string, TModal, RequestOptions, Action<ModalBuilder>) InteractionModuleBase<IInteractionContext>.RespondWithModalAsync<TModal>(string, RequestOptions, Action<ModalBuilder>) InteractionModuleBase<IInteractionContext>.RespondWithPremiumRequiredAsync(RequestOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Discord.Interactions.InteractionService.html": {
    "href": "api/Discord.Interactions.InteractionService.html",
    "title": "Class InteractionService | Discord.Net Documentation",
    "keywords": "Class InteractionService Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Provides the framework for building and registering Discord Application Commands. public class InteractionService : IDisposable Inheritance object InteractionService Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InteractionService(DiscordRestClient, InteractionServiceConfig) Initialize a InteractionService with provided configurations. public InteractionService(DiscordRestClient discord, InteractionServiceConfig config = null) Parameters discord DiscordRestClient The discord client. config InteractionServiceConfig The configuration class. InteractionService(BaseSocketClient, InteractionServiceConfig) Initialize a InteractionService with provided configurations. public InteractionService(BaseSocketClient discord, InteractionServiceConfig config = null) Parameters discord BaseSocketClient The discord client. config InteractionServiceConfig The configuration class. InteractionService(DiscordShardedClient, InteractionServiceConfig) Initialize a InteractionService with provided configurations. public InteractionService(DiscordShardedClient discord, InteractionServiceConfig config = null) Parameters discord DiscordShardedClient The discord client. config InteractionServiceConfig The configuration class. InteractionService(DiscordSocketClient, InteractionServiceConfig) Initialize a InteractionService with provided configurations. public InteractionService(DiscordSocketClient discord, InteractionServiceConfig config = null) Parameters discord DiscordSocketClient The discord client. config InteractionServiceConfig The configuration class. Properties ComponentCommands Represents all Component Commands loaded within InteractionService. public IReadOnlyCollection<ComponentCommandInfo> ComponentCommands { get; } Property Value IReadOnlyCollection<ComponentCommandInfo> ContextCommands Represents all Context Commands loaded within InteractionService. public IReadOnlyList<ContextCommandInfo> ContextCommands { get; } Property Value IReadOnlyList<ContextCommandInfo> LocalizationManager Get the ILocalizationManager used by this Interaction Service instance to localize strings. public ILocalizationManager LocalizationManager { get; set; } Property Value ILocalizationManager ModalCommands Represents all Modal Commands loaded within InteractionService. public IReadOnlyCollection<ModalCommandInfo> ModalCommands { get; } Property Value IReadOnlyCollection<ModalCommandInfo> Modals Gets a collection of the cached ModalInfo classes that are referenced in registered ModalCommandInfos. public IReadOnlyCollection<ModalInfo> Modals { get; } Property Value IReadOnlyCollection<ModalInfo> Modules Represents all modules loaded within InteractionService. public IReadOnlyList<ModuleInfo> Modules { get; } Property Value IReadOnlyList<ModuleInfo> RestClient Rest client to be used to register application commands. public DiscordRestClient RestClient { get; } Property Value DiscordRestClient SlashCommands Represents all Slash Commands loaded within InteractionService. public IReadOnlyList<SlashCommandInfo> SlashCommands { get; } Property Value IReadOnlyList<SlashCommandInfo> Methods AddCommandsGloballyAsync(bool, params IApplicationCommandInfo[]) Register Application Commands from commands as global commands. public Task<IReadOnlyCollection<RestGlobalCommand>> AddCommandsGloballyAsync(bool deleteMissing = false, params IApplicationCommandInfo[] commands) Parameters deleteMissing bool If false, this operation will not delete the commands that are missing from InteractionService. commands IApplicationCommandInfo[] Commands to be registered to Discord. Returns Task<IReadOnlyCollection<RestGlobalCommand>> A task representing the command registration process. The task result contains the active application commands of the target guild. Remarks Commands will be registered as standalone commands, if you want the GroupAttribute to take effect, use AddModulesToGuildAsync(IGuild, bool, params ModuleInfo[]). Registering a commands without group names might cause the command traversal to fail. AddCommandsToGuildAsync(IGuild, bool, params ICommandInfo[]) Register Application Commands from commands to a guild. public Task<IReadOnlyCollection<RestGuildCommand>> AddCommandsToGuildAsync(IGuild guild, bool deleteMissing = false, params ICommandInfo[] commands) Parameters guild IGuild The target guild. deleteMissing bool If false, this operation will not delete the commands that are missing from InteractionService. commands ICommandInfo[] Commands to be registered to Discord. Returns Task<IReadOnlyCollection<RestGuildCommand>> A task representing the command registration process. The task result contains the active application commands of the target guild. Remarks Commands will be registered as standalone commands, if you want the GroupAttribute to take effect, use AddModulesToGuildAsync(IGuild, bool, params ModuleInfo[]). Registering a commands without group names might cause the command traversal to fail. AddCommandsToGuildAsync(ulong, bool, params ICommandInfo[]) Register Application Commands from commands to a guild. public Task<IReadOnlyCollection<RestGuildCommand>> AddCommandsToGuildAsync(ulong guildId, bool deleteMissing = false, params ICommandInfo[] commands) Parameters guildId ulong The target guild ID. deleteMissing bool If false, this operation will not delete the commands that are missing from InteractionService. commands ICommandInfo[] Commands to be registered to Discord. Returns Task<IReadOnlyCollection<RestGuildCommand>> A task representing the command registration process. The task result contains the active application commands of the target guild. Remarks Commands will be registered as standalone commands, if you want the GroupAttribute to take effect, use AddModulesToGuildAsync(ulong, bool, params ModuleInfo[]). Registering a commands without group names might cause the command traversal to fail. AddComponentTypeConverter(Type, ComponentTypeConverter) Add a concrete type ComponentTypeConverter. public void AddComponentTypeConverter(Type type, ComponentTypeConverter converter) Parameters type Type Primary target Type of the ComponentTypeConverter. converter ComponentTypeConverter The ComponentTypeConverter instance. AddComponentTypeConverter<T>(ComponentTypeConverter) Add a concrete type ComponentTypeConverter. public void AddComponentTypeConverter<T>(ComponentTypeConverter converter) Parameters converter ComponentTypeConverter The ComponentTypeConverter instance. Type Parameters T Primary target Type of the ComponentTypeConverter. AddGenericComponentTypeConverter(Type, Type) Add a generic type ComponentTypeConverter<T>. public void AddGenericComponentTypeConverter(Type targetType, Type converterType) Parameters targetType Type Generic Type constraint of the Type of the ComponentTypeConverter<T>. converterType Type Type of the ComponentTypeConverter<T>. AddGenericComponentTypeConverter<T>(Type) Add a generic type ComponentTypeConverter<T>. public void AddGenericComponentTypeConverter<T>(Type converterType) Parameters converterType Type Type of the ComponentTypeConverter<T>. Type Parameters T Generic Type constraint of the Type of the ComponentTypeConverter<T>. AddGenericTypeConverter(Type, Type) Add a generic type TypeConverter<T>. public void AddGenericTypeConverter(Type targetType, Type converterType) Parameters targetType Type Generic Type constraint of the Type of the TypeConverter<T>. converterType Type Type of the TypeConverter<T>. AddGenericTypeConverter<T>(Type) Add a generic type TypeConverter<T>. public void AddGenericTypeConverter<T>(Type converterType) Parameters converterType Type Type of the TypeConverter<T>. Type Parameters T Generic Type constraint of the Type of the TypeConverter<T>. AddGenericTypeReader(Type, Type) Add a generic type TypeReader<T>. public void AddGenericTypeReader(Type targetType, Type readerType) Parameters targetType Type Generic Type constraint of the Type of the TypeReader<T>. readerType Type Type of the TypeReader<T>. AddGenericTypeReader<T>(Type) Add a generic type TypeReader<T>. public void AddGenericTypeReader<T>(Type readerType) Parameters readerType Type Type of the TypeReader<T>. Type Parameters T Generic Type constraint of the Type of the TypeReader<T>. AddModalInfo<T>() Loads and caches an ModalInfo for the provided IModal. public ModalInfo AddModalInfo<T>() where T : class, IModal Returns ModalInfo The built ModalInfo instance. Type Parameters T Type of IModal to be loaded. Exceptions InvalidOperationException AddModuleAsync(Type, IServiceProvider) Add a command module from a Type. public Task<ModuleInfo> AddModuleAsync(Type type, IServiceProvider services) Parameters type Type Type of the module. services IServiceProvider The IServiceProvider for your dependency injection solution if using one; otherwise, pass null . Returns Task<ModuleInfo> A task representing the operation for adding the module. The task result contains the built module. Exceptions ArgumentException Thrown if this module has already been added. InvalidOperationException Thrown when the type is not a valid module definition. AddModuleAsync<T>(IServiceProvider) Add a command module from a Type. public Task<ModuleInfo> AddModuleAsync<T>(IServiceProvider services) where T : class Parameters services IServiceProvider The IServiceProvider for your dependency injection solution if using one; otherwise, pass null . Returns Task<ModuleInfo> A task representing the operation for adding the module. The task result contains the built module. Type Parameters T Type of the module. Exceptions ArgumentException Thrown if this module has already been added. InvalidOperationException Thrown when the T is not a valid module definition. AddModulesAsync(Assembly, IServiceProvider) Discover and load command modules from an Assembly. public Task<IEnumerable<ModuleInfo>> AddModulesAsync(Assembly assembly, IServiceProvider services) Parameters assembly Assembly Assembly the command modules are defined in. services IServiceProvider The IServiceProvider for your dependency injection solution if using one; otherwise, pass null. Returns Task<IEnumerable<ModuleInfo>> A task representing the operation for adding modules. The task result contains a collection of the modules added. AddModulesGloballyAsync(bool, params ModuleInfo[]) Register Application Commands from modules provided in modules as global commands. public Task<IReadOnlyCollection<RestGlobalCommand>> AddModulesGloballyAsync(bool deleteMissing = false, params ModuleInfo[] modules) Parameters deleteMissing bool If false, this operation will not delete the commands that are missing from InteractionService. modules ModuleInfo[] Modules to be registered to Discord. Returns Task<IReadOnlyCollection<RestGlobalCommand>> A task representing the command registration process. The task result contains the active application commands of the target guild. AddModulesToGuildAsync(IGuild, bool, params ModuleInfo[]) Register Application Commands from modules provided in modules to a guild. public Task<IReadOnlyCollection<RestGuildCommand>> AddModulesToGuildAsync(IGuild guild, bool deleteMissing = false, params ModuleInfo[] modules) Parameters guild IGuild The target guild. deleteMissing bool If false, this operation will not delete the commands that are missing from InteractionService. modules ModuleInfo[] Modules to be registered to Discord. Returns Task<IReadOnlyCollection<RestGuildCommand>> A task representing the command registration process. The task result contains the active application commands of the target guild. AddModulesToGuildAsync(ulong, bool, params ModuleInfo[]) Register Application Commands from modules provided in modules to a guild. public Task<IReadOnlyCollection<RestGuildCommand>> AddModulesToGuildAsync(ulong guildId, bool deleteMissing = false, params ModuleInfo[] modules) Parameters guildId ulong The target guild ID. deleteMissing bool If false, this operation will not delete the commands that are missing from InteractionService. modules ModuleInfo[] Modules to be registered to Discord. Returns Task<IReadOnlyCollection<RestGuildCommand>> A task representing the command registration process. The task result contains the active application commands of the target guild. AddTypeConverter(Type, TypeConverter) Add a concrete type TypeConverter. public void AddTypeConverter(Type type, TypeConverter converter) Parameters type Type Primary target Type of the TypeConverter. converter TypeConverter The TypeConverter instance. AddTypeConverter<T>(TypeConverter) Add a concrete type TypeConverter. public void AddTypeConverter<T>(TypeConverter converter) Parameters converter TypeConverter The TypeConverter instance. Type Parameters T Primary target Type of the TypeConverter. AddTypeReader(Type, TypeReader) Add a concrete type TypeReader. public void AddTypeReader(Type type, TypeReader reader) Parameters type Type Primary target Type of the TypeReader. reader TypeReader The TypeReader instance. AddTypeReader<T>(TypeReader) Add a concrete type TypeReader. public void AddTypeReader<T>(TypeReader reader) Parameters reader TypeReader The TypeReader instance. Type Parameters T Primary target Type of the TypeReader. CreateModuleAsync(string, IServiceProvider, Action<ModuleBuilder>) Create and loads a ModuleInfo using a builder factory. public Task<ModuleInfo> CreateModuleAsync(string name, IServiceProvider services, Action<ModuleBuilder> buildFunc) Parameters name string Name of the module. services IServiceProvider The IServiceProvider for your dependency injection solution if using one; otherwise, pass null. buildFunc Action<ModuleBuilder> Module builder factory. Returns Task<ModuleInfo> A task representing the operation for adding modules. The task result contains the built module instance. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() ExecuteCommandAsync(IInteractionContext, IServiceProvider) Execute a Command from a given IInteractionContext. public Task<IResult> ExecuteCommandAsync(IInteractionContext context, IServiceProvider services) Parameters context IInteractionContext Name context of the command. services IServiceProvider The service to be used in the command's dependency injection. Returns Task<IResult> A task representing the command execution process. The task result contains the result of the execution. GenerateCustomIdStringAsync(string, IServiceProvider, params object[]) Serialize and format multiple objects into a Custom Id string. public Task<string> GenerateCustomIdStringAsync(string format, IServiceProvider services, params object[] args) Parameters format string A composite format string. services IServiceProvider Services that will be passed on to the TypeReaders. args object[] Objects to be serialized. Returns Task<string> A task representing the conversion process. The task result contains the result of the conversion. GetComponentCommandInfo<TModule>(string) Gets a ComponentCommandInfo. public ComponentCommandInfo GetComponentCommandInfo<TModule>(string methodName) where TModule : class Parameters methodName string Method name of the handler, use of nameof is recommended. Returns ComponentCommandInfo ComponentCommandInfo instance for this command. Type Parameters TModule Declaring module type of this command, must be a type of InteractionModuleBase<T>. Exceptions InvalidOperationException Module or Component Command couldn't be found. GetContextCommandInfo<TModule>(string) Gets a ContextCommandInfo. public ContextCommandInfo GetContextCommandInfo<TModule>(string methodName) where TModule : class Parameters methodName string Method name of the handler, use of nameof is recommended. Returns ContextCommandInfo ContextCommandInfo instance for this command. Type Parameters TModule Declaring module type of this command, must be a type of InteractionModuleBase<T>. Exceptions InvalidOperationException Module or Context Command couldn't be found. GetModuleInfo<TModule>() Gets a built ModuleInfo. public ModuleInfo GetModuleInfo<TModule>() where TModule : class Returns ModuleInfo ModuleInfo instance for this module. Type Parameters TModule Type of the module, must be a type of InteractionModuleBase<T>. GetSlashCommandInfo<TModule>(string) Gets a SlashCommandInfo. public SlashCommandInfo GetSlashCommandInfo<TModule>(string methodName) where TModule : class Parameters methodName string Method name of the handler, use of nameof is recommended. Returns SlashCommandInfo SlashCommandInfo instance for this command. Type Parameters TModule Declaring module type of this command, must be a type of InteractionModuleBase<T>. Exceptions InvalidOperationException Module or Slash Command couldn't be found. ModifyContextCommandPermissionsAsync(ContextCommandInfo, IGuild, params ApplicationCommandPermission[]) Modify the command permissions of the matching Discord Slash Command. public Task<GuildApplicationCommandPermission> ModifyContextCommandPermissionsAsync(ContextCommandInfo command, IGuild guild, params ApplicationCommandPermission[] permissions) Parameters command ContextCommandInfo The Context Command. guild IGuild Target guild. permissions ApplicationCommandPermission[] New permission values. Returns Task<GuildApplicationCommandPermission> The active command permissions after the modification. ModifyContextCommandPermissionsAsync(ContextCommandInfo, ulong, params ApplicationCommandPermission[]) Modify the command permissions of the matching Discord Slash Command. public Task<GuildApplicationCommandPermission> ModifyContextCommandPermissionsAsync(ContextCommandInfo command, ulong guildId, params ApplicationCommandPermission[] permissions) Parameters command ContextCommandInfo The Context Command. guildId ulong Target guild ID. permissions ApplicationCommandPermission[] New permission values. Returns Task<GuildApplicationCommandPermission> The active command permissions after the modification. ModifySlashCommandPermissionsAsync(ModuleInfo, IGuild, params ApplicationCommandPermission[]) Modify the command permissions of the matching Discord Slash Command. public Task<GuildApplicationCommandPermission> ModifySlashCommandPermissionsAsync(ModuleInfo module, IGuild guild, params ApplicationCommandPermission[] permissions) Parameters module ModuleInfo Module representing the top level Slash Command. guild IGuild Target guild. permissions ApplicationCommandPermission[] New permission values. Returns Task<GuildApplicationCommandPermission> The active command permissions after the modification. ModifySlashCommandPermissionsAsync(ModuleInfo, ulong, params ApplicationCommandPermission[]) Modify the command permissions of the matching Discord Slash Command. public Task<GuildApplicationCommandPermission> ModifySlashCommandPermissionsAsync(ModuleInfo module, ulong guildId, params ApplicationCommandPermission[] permissions) Parameters module ModuleInfo Module representing the top level Slash Command. guildId ulong Target guild ID. permissions ApplicationCommandPermission[] New permission values. Returns Task<GuildApplicationCommandPermission> The active command permissions after the modification. ModifySlashCommandPermissionsAsync(SlashCommandInfo, IGuild, params ApplicationCommandPermission[]) Modify the command permissions of the matching Discord Slash Command. public Task<GuildApplicationCommandPermission> ModifySlashCommandPermissionsAsync(SlashCommandInfo command, IGuild guild, params ApplicationCommandPermission[] permissions) Parameters command SlashCommandInfo The Slash Command. guild IGuild Target guild. permissions ApplicationCommandPermission[] New permission values. Returns Task<GuildApplicationCommandPermission> The active command permissions after the modification. ModifySlashCommandPermissionsAsync(SlashCommandInfo, ulong, params ApplicationCommandPermission[]) Modify the command permissions of the matching Discord Slash Command. public Task<GuildApplicationCommandPermission> ModifySlashCommandPermissionsAsync(SlashCommandInfo command, ulong guildId, params ApplicationCommandPermission[] permissions) Parameters command SlashCommandInfo The Slash Command. guildId ulong Target guild ID. permissions ApplicationCommandPermission[] New permission values. Returns Task<GuildApplicationCommandPermission> The active command permissions after the modification. RegisterCommandsGloballyAsync(bool) Register Application Commands from ContextCommands and SlashCommands to Discord on in global scope. public Task<IReadOnlyCollection<RestGlobalCommand>> RegisterCommandsGloballyAsync(bool deleteMissing = true) Parameters deleteMissing bool If false, this operation will not delete the commands that are missing from InteractionService. Returns Task<IReadOnlyCollection<RestGlobalCommand>> A task representing the command registration process. The task result contains the active global application commands of bot. RegisterCommandsToGuildAsync(ulong, bool) Register Application Commands from ContextCommands and SlashCommands to a guild. public Task<IReadOnlyCollection<RestGuildCommand>> RegisterCommandsToGuildAsync(ulong guildId, bool deleteMissing = true) Parameters guildId ulong Id of the target guild. deleteMissing bool If false, this operation will not delete the commands that are missing from InteractionService. Returns Task<IReadOnlyCollection<RestGuildCommand>> A task representing the command registration process. The task result contains the active application commands of the target guild. RemoveModuleAsync(ModuleInfo) Remove a command module. public Task<bool> RemoveModuleAsync(ModuleInfo module) Parameters module ModuleInfo The ModuleInfo to be removed from the service. Returns Task<bool> A task that represents the asynchronous removal operation. The task result contains a value that indicates whether the module is successfully removed. RemoveModuleAsync(Type) Remove a command module. public Task<bool> RemoveModuleAsync(Type type) Parameters type Type The Type of the module. Returns Task<bool> A task that represents the asynchronous removal operation. The task result contains a value that indicates whether the module is successfully removed. RemoveModuleAsync<T>() Remove a command module. public Task<bool> RemoveModuleAsync<T>() Returns Task<bool> A task that represents the asynchronous removal operation. The task result contains a value that indicates whether the module is successfully removed. Type Parameters T The Type of the module. RemoveModulesFromGuildAsync(IGuild, params ModuleInfo[]) Unregister Application Commands from modules provided in modules from a guild. public Task<IReadOnlyCollection<RestGuildCommand>> RemoveModulesFromGuildAsync(IGuild guild, params ModuleInfo[] modules) Parameters guild IGuild The target guild. modules ModuleInfo[] Modules to be deregistered from Discord. Returns Task<IReadOnlyCollection<RestGuildCommand>> A task representing the command de-registration process. The task result contains the active application commands of the target guild. RemoveModulesFromGuildAsync(ulong, params ModuleInfo[]) Unregister Application Commands from modules provided in modules from a guild. public Task<IReadOnlyCollection<RestGuildCommand>> RemoveModulesFromGuildAsync(ulong guildId, params ModuleInfo[] modules) Parameters guildId ulong The target guild ID. modules ModuleInfo[] Modules to be deregistered from Discord. Returns Task<IReadOnlyCollection<RestGuildCommand>> A task representing the command de-registration process. The task result contains the active application commands of the target guild. SearchAutocompleteCommand(IAutocompleteInteraction) Search the registered slash commands using a IAutocompleteInteraction. public SearchResult<AutocompleteCommandInfo> SearchAutocompleteCommand(IAutocompleteInteraction autocompleteInteraction) Parameters autocompleteInteraction IAutocompleteInteraction Interaction entity to perform the search with. Returns SearchResult<AutocompleteCommandInfo> The search result. When successful, result contains the found AutocompleteCommandInfo. SearchComponentCommand(IComponentInteraction) Search the registered slash commands using a IComponentInteraction. public SearchResult<ComponentCommandInfo> SearchComponentCommand(IComponentInteraction componentInteraction) Parameters componentInteraction IComponentInteraction Interaction entity to perform the search with. Returns SearchResult<ComponentCommandInfo> The search result. When successful, result contains the found ComponentCommandInfo. SearchMessageCommand(IMessageCommandInteraction) Search the registered slash commands using a IMessageCommandInteraction. public SearchResult<ContextCommandInfo> SearchMessageCommand(IMessageCommandInteraction messageCommandInteraction) Parameters messageCommandInteraction IMessageCommandInteraction Interaction entity to perform the search with. Returns SearchResult<ContextCommandInfo> The search result. When successful, result contains the found ContextCommandInfo. SearchSlashCommand(ISlashCommandInteraction) Search the registered slash commands using a ISlashCommandInteraction. public SearchResult<SlashCommandInfo> SearchSlashCommand(ISlashCommandInteraction slashCommandInteraction) Parameters slashCommandInteraction ISlashCommandInteraction Interaction entity to perform the search with. Returns SearchResult<SlashCommandInfo> The search result. When successful, result contains the found SlashCommandInfo. SearchUserCommand(IUserCommandInteraction) Search the registered slash commands using a IUserCommandInteraction. public SearchResult<ContextCommandInfo> SearchUserCommand(IUserCommandInteraction userCommandInteraction) Parameters userCommandInteraction IUserCommandInteraction Interaction entity to perform the search with. Returns SearchResult<ContextCommandInfo> The search result. When successful, result contains the found ContextCommandInfo. SerializeValueAsync<T>(T, IServiceProvider) Serialize an object using a TypeReader into a string to be placed in a Component CustomId. public Task<string> SerializeValueAsync<T>(T obj, IServiceProvider services) Parameters obj T Object to be serialized. services IServiceProvider Services that will be passed on to the TypeReader. Returns Task<string> A task representing the conversion process. The task result contains the result of the conversion. Type Parameters T Type of the object to be serialized. Remarks Removing a TypeReader from the InteractionService will not dereference the TypeReader from the loaded module/command instances. You need to reload the modules for the changes to take effect. TryRemoveGenericTypeReader(Type, out Type) Removes a generic type reader from the given type. public bool TryRemoveGenericTypeReader(Type type, out Type readerType) Parameters type Type The type to remove the reader from. readerType Type The readers type if the remove operation was successful. Returns bool true if the remove operation was successful; otherwise false. Remarks Removing a TypeReader from the InteractionService will not dereference the TypeReader from the loaded module/command instances. You need to reload the modules for the changes to take effect. TryRemoveGenericTypeReader<T>(out Type) Removes a generic type reader from the type T. public bool TryRemoveGenericTypeReader<T>(out Type readerType) Parameters readerType Type The removed readers type. Returns bool true if the remove operation was successful; otherwise false. Type Parameters T The type to remove the readers from. Remarks Removing a TypeReader from the InteractionService will not dereference the TypeReader from the loaded module/command instances. You need to reload the modules for the changes to take effect. TryRemoveTypeReader(Type, out TypeReader) Removes a type reader for the given type. public bool TryRemoveTypeReader(Type type, out TypeReader reader) Parameters type Type The type to remove the reader from. reader TypeReader The reader if the resulting remove operation was successful. Returns bool true if the remove operation was successful; otherwise false. Remarks Removing a TypeReader from the InteractionService will not dereference the TypeReader from the loaded module/command instances. You need to reload the modules for the changes to take effect. TryRemoveTypeReader<T>(out TypeReader) Removes a type reader for the type T. public bool TryRemoveTypeReader<T>(out TypeReader reader) Parameters reader TypeReader The reader if the resulting remove operation was successful. Returns bool true if the remove operation was successful; otherwise false. Type Parameters T The type to remove the readers from. Events AutocompleteCommandExecuted Occurs when a Autocomplete command is executed. public event Func<AutocompleteCommandInfo, IInteractionContext, IResult, Task> AutocompleteCommandExecuted Event Type Func<AutocompleteCommandInfo, IInteractionContext, IResult, Task> AutocompleteHandlerExecuted Occurs when a AutocompleteHandler is executed. public event Func<IAutocompleteHandler, IInteractionContext, IResult, Task> AutocompleteHandlerExecuted Event Type Func<IAutocompleteHandler, IInteractionContext, IResult, Task> ComponentCommandExecuted Occurs when a Message Component command is executed. public event Func<ComponentCommandInfo, IInteractionContext, IResult, Task> ComponentCommandExecuted Event Type Func<ComponentCommandInfo, IInteractionContext, IResult, Task> ContextCommandExecuted Occurs when a Context Command is executed. public event Func<ContextCommandInfo, IInteractionContext, IResult, Task> ContextCommandExecuted Event Type Func<ContextCommandInfo, IInteractionContext, IResult, Task> InteractionExecuted Occurs when any type of interaction is executed. public event Func<ICommandInfo, IInteractionContext, IResult, Task> InteractionExecuted Event Type Func<ICommandInfo, IInteractionContext, IResult, Task> Log Occurs when a Slash Command related information is received. public event Func<LogMessage, Task> Log Event Type Func<LogMessage, Task> ModalCommandExecuted Occurs when a Modal command is executed. public event Func<ModalCommandInfo, IInteractionContext, IResult, Task> ModalCommandExecuted Event Type Func<ModalCommandInfo, IInteractionContext, IResult, Task> SlashCommandExecuted Occurs when a Slash Command is executed. public event Func<SlashCommandInfo, IInteractionContext, IResult, Task> SlashCommandExecuted Event Type Func<SlashCommandInfo, IInteractionContext, IResult, Task>"
  },
  "api/Discord.Interactions.InteractionServiceConfig.html": {
    "href": "api/Discord.Interactions.InteractionServiceConfig.html",
    "title": "Class InteractionServiceConfig | Discord.Net Documentation",
    "keywords": "Class InteractionServiceConfig Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represents a configuration class for InteractionService. public class InteractionServiceConfig Inheritance object InteractionServiceConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AutoServiceScopes Gets or sets whether new service scopes should be automatically created when resolving module dependencies on every command execution. public bool AutoServiceScopes { get; set; } Property Value bool DefaultRunMode Gets or sets the default RunMode commands should have, if one is not specified on the Command attribute or builder. public RunMode DefaultRunMode { get; set; } Property Value RunMode EnableAutocompleteHandlers Gets or sets the option allowing you to use AutocompleteHandlers. public bool EnableAutocompleteHandlers { get; set; } Property Value bool Remarks Since AutocompleteHandlers are prioritized over AutocompleteCommandInfos, if AutocompleteHandlers are not used, this should be disabled to decrease the lookup time. ExitOnMissingModalField Gets or sets whether a command execution should exit when a modal command encounters a missing modal component value. public bool ExitOnMissingModalField { get; set; } Property Value bool InteractionCustomIdDelimiters Gets or sets the delimiters that will be used to separate group names and the method name when a Message Component Interaction is received. public char[] InteractionCustomIdDelimiters { get; set; } Property Value char[] LocalizationManager Localization provider to be used when registering application commands. public ILocalizationManager LocalizationManager { get; set; } Property Value ILocalizationManager LogLevel Gets or sets the minimum log level severity that will be sent to the Log event. public LogSeverity LogLevel { get; set; } Property Value LogSeverity RestResponseCallback Gets or sets delegate to be used by the InteractionService when responding to a Rest based interaction. public RestResponseCallback RestResponseCallback { get; set; } Property Value RestResponseCallback ThrowOnError Gets or sets whether Sync commands should push exceptions up to the caller. public bool ThrowOnError { get; set; } Property Value bool UseCompiledLambda Gets or sets the option to use compiled lambda expressions to create module instances and execute commands. This method improves performance at the cost of memory. public bool UseCompiledLambda { get; set; } Property Value bool Remarks For performance reasons, if you frequently use Modals with the service, it is highly recommended that you enable compiled lambdas. WildCardExpression Gets or sets the string expression that will be treated as a wild card. public string WildCardExpression { get; set; } Property Value string"
  },
  "api/Discord.Interactions.InteractionUtility.html": {
    "href": "api/Discord.Interactions.InteractionUtility.html",
    "title": "Class InteractionUtility | Discord.Net Documentation",
    "keywords": "Class InteractionUtility Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Utility class containing helper methods for interacting with Discord Interactions. public static class InteractionUtility Inheritance object InteractionUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConfirmAsync(BaseSocketClient, IMessageChannel, TimeSpan, string, CancellationToken) Create a confirmation dialog and wait for user input asynchronously. public static Task<bool> ConfirmAsync(BaseSocketClient client, IMessageChannel channel, TimeSpan timeout, string message = null, CancellationToken cancellationToken = default) Parameters client BaseSocketClient Client that should be listened to for the InteractionCreated event. channel IMessageChannel Send the confirmation prompt to this channel. timeout TimeSpan Timeout duration of this operation. message string Optional custom prompt message. cancellationToken CancellationToken Token for canceling the wait operation. Returns Task<bool> A Task representing the asynchronous waiting operation with a bool result, the result is false if the user declined the prompt or didnt answer in time, true if the user confirmed the prompt. WaitForInteractionAsync(BaseSocketClient, TimeSpan, Predicate<SocketInteraction>, CancellationToken) Wait for an Interaction event for a given amount of time as an asynchronous operation. public static Task<SocketInteraction> WaitForInteractionAsync(BaseSocketClient client, TimeSpan timeout, Predicate<SocketInteraction> predicate, CancellationToken cancellationToken = default) Parameters client BaseSocketClient Client that should be listened to for the InteractionCreated event. timeout TimeSpan Timeout duration for this operation. predicate Predicate<SocketInteraction> Delegate for checking whether an Interaction meets the requirements. cancellationToken CancellationToken Token for canceling the wait operation. Returns Task<SocketInteraction> A Task representing the asynchronous waiting operation. If the user responded in the given amount of time, Task result contains the user response, otherwise the Task result is null. WaitForMessageComponentAsync(BaseSocketClient, IUserMessage, TimeSpan, CancellationToken) Wait for an Message Component Interaction event for a given amount of time as an asynchronous operation . public static Task<SocketInteraction> WaitForMessageComponentAsync(BaseSocketClient client, IUserMessage fromMessage, TimeSpan timeout, CancellationToken cancellationToken = default) Parameters client BaseSocketClient Client that should be listened to for the InteractionCreated event. fromMessage IUserMessage The message that ButtonExecuted or SelectMenuExecuted should originate from. timeout TimeSpan Timeout duration for this operation. cancellationToken CancellationToken Token for canceling the wait operation. Returns Task<SocketInteraction> A Task representing the asynchronous waiting operation with a IDiscordInteraction result, the result is null if the process timed out before receiving a valid Interaction."
  },
  "api/Discord.Interactions.JsonLocalizationManager.html": {
    "href": "api/Discord.Interactions.JsonLocalizationManager.html",
    "title": "Class JsonLocalizationManager | Discord.Net Documentation",
    "keywords": "Class JsonLocalizationManager Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll The default localization provider for Json resource files. public sealed class JsonLocalizationManager : ILocalizationManager Inheritance object JsonLocalizationManager Implements ILocalizationManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors JsonLocalizationManager(string, string) Initializes a new instance of the JsonLocalizationManager class. public JsonLocalizationManager(string basePath, string fileName) Parameters basePath string Base path of the Json file. fileName string Name of the Json file. Methods GetAllDescriptions(IList<string>, LocalizationTarget) Get every the resource description for every available locale. public IDictionary<string, string> GetAllDescriptions(IList<string> key, LocalizationTarget destinationType) Parameters key IList<string> Location of the resource. destinationType LocalizationTarget Type of the resource. Returns IDictionary<string, string> A dictionary containing every available locale and the resource name. GetAllNames(IList<string>, LocalizationTarget) Get every the resource name for every available locale. public IDictionary<string, string> GetAllNames(IList<string> key, LocalizationTarget destinationType) Parameters key IList<string> Location of the resource. destinationType LocalizationTarget Type of the resource. Returns IDictionary<string, string> A dictionary containing every available locale and the resource name."
  },
  "api/Discord.Interactions.LocalizationTarget.html": {
    "href": "api/Discord.Interactions.LocalizationTarget.html",
    "title": "Enum LocalizationTarget | Discord.Net Documentation",
    "keywords": "Enum LocalizationTarget Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Resource targets for localization. public enum LocalizationTarget Fields Choice = 3 Target is a Slash Command parameter choice. Command = 1 Target is an application command method. Group = 0 Target is a IInteractionModuleBase tagged with a GroupAttribute. Parameter = 2 Target is a Slash Command parameter."
  },
  "api/Discord.Interactions.MaxLengthAttribute.html": {
    "href": "api/Discord.Interactions.MaxLengthAttribute.html",
    "title": "Class MaxLengthAttribute | Discord.Net Documentation",
    "keywords": "Class MaxLengthAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Sets the maximum length allowed for a string type parameter. [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false, Inherited = true)] public class MaxLengthAttribute : Attribute Inheritance object Attribute MaxLengthAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MaxLengthAttribute(int) Sets the maximum length allowed for a string type parameter. public MaxLengthAttribute(int length) Parameters length int Maximum string length allowed. Properties Length Gets the maximum length allowed for a string type parameter. public int Length { get; } Property Value int"
  },
  "api/Discord.Interactions.MaxValueAttribute.html": {
    "href": "api/Discord.Interactions.MaxValueAttribute.html",
    "title": "Class MaxValueAttribute | Discord.Net Documentation",
    "keywords": "Class MaxValueAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Set the maximum value permitted for a number type parameter. [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false, Inherited = true)] public sealed class MaxValueAttribute : Attribute Inheritance object Attribute MaxValueAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors MaxValueAttribute(double) Set the maximum value permitted for a number type parameter. public MaxValueAttribute(double value) Parameters value double The maximum value permitted. Properties Value Gets the maximum value permitted. public double Value { get; } Property Value double"
  },
  "api/Discord.Interactions.MessageCommandAttribute.html": {
    "href": "api/Discord.Interactions.MessageCommandAttribute.html",
    "title": "Class MessageCommandAttribute | Discord.Net Documentation",
    "keywords": "Class MessageCommandAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Create a Message Context Command. [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = true)] public class MessageCommandAttribute : ContextCommandAttribute Inheritance object Attribute ContextCommandAttribute MessageCommandAttribute Inherited Members ContextCommandAttribute.Name ContextCommandAttribute.CommandType ContextCommandAttribute.RunMode Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks GroupAttributes won't add prefixes to this command. Constructors MessageCommandAttribute(string) Register a method as a Message Context Command. public MessageCommandAttribute(string name) Parameters name string Name of the context command."
  },
  "api/Discord.Interactions.MessageCommandInfo.html": {
    "href": "api/Discord.Interactions.MessageCommandInfo.html",
    "title": "Class MessageCommandInfo | Discord.Net Documentation",
    "keywords": "Class MessageCommandInfo Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represents the info class of an attribute based method for command type Message. public class MessageCommandInfo : ContextCommandInfo, ICommandInfo, IApplicationCommandInfo Inheritance object CommandInfo<CommandParameterInfo> ContextCommandInfo MessageCommandInfo Implements ICommandInfo IApplicationCommandInfo Inherited Members ContextCommandInfo.CommandType ContextCommandInfo.DefaultPermission ContextCommandInfo.IsEnabledInDm ContextCommandInfo.IsNsfw ContextCommandInfo.DefaultMemberPermissions ContextCommandInfo.Parameters ContextCommandInfo.SupportsWildCards ContextCommandInfo.IgnoreGroupNames ContextCommandInfo.InvokeModuleEvent(IInteractionContext, IResult) CommandInfo<CommandParameterInfo>.Module CommandInfo<CommandParameterInfo>.CommandService CommandInfo<CommandParameterInfo>.Name CommandInfo<CommandParameterInfo>.MethodName CommandInfo<CommandParameterInfo>.IsTopLevelCommand CommandInfo<CommandParameterInfo>.RunMode CommandInfo<CommandParameterInfo>.Attributes CommandInfo<CommandParameterInfo>.Preconditions CommandInfo<CommandParameterInfo>.TreatNameAsRegex CommandInfo<CommandParameterInfo>.CheckPreconditionsAsync(IInteractionContext, IServiceProvider) CommandInfo<CommandParameterInfo>.InvokeEventAndReturn<T>(IInteractionContext, T) CommandInfo<CommandParameterInfo>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods ExecuteAsync(IInteractionContext, IServiceProvider) Executes the command with the provided context. public override Task<IResult> ExecuteAsync(IInteractionContext context, IServiceProvider services) Parameters context IInteractionContext The execution context. services IServiceProvider Dependencies that will be used to create the module instance. Returns Task<IResult> A task representing the execution process. The task result contains the execution result. GetLogString(IInteractionContext) protected override string GetLogString(IInteractionContext context) Parameters context IInteractionContext Returns string ParseArgumentsAsync(IInteractionContext, IServiceProvider) protected override Task<IResult> ParseArgumentsAsync(IInteractionContext context, IServiceProvider services) Parameters context IInteractionContext services IServiceProvider Returns Task<IResult>"
  },
  "api/Discord.Interactions.MinLengthAttribute.html": {
    "href": "api/Discord.Interactions.MinLengthAttribute.html",
    "title": "Class MinLengthAttribute | Discord.Net Documentation",
    "keywords": "Class MinLengthAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Sets the minimum length allowed for a string type parameter. [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false, Inherited = true)] public class MinLengthAttribute : Attribute Inheritance object Attribute MinLengthAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MinLengthAttribute(int) Sets the minimum length allowed for a string type parameter. public MinLengthAttribute(int length) Parameters length int Minimum string length allowed. Properties Length Gets the minimum length allowed for a string type parameter. public int Length { get; } Property Value int"
  },
  "api/Discord.Interactions.MinValueAttribute.html": {
    "href": "api/Discord.Interactions.MinValueAttribute.html",
    "title": "Class MinValueAttribute | Discord.Net Documentation",
    "keywords": "Class MinValueAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Set the minimum value permitted for a number type parameter. [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false, Inherited = true)] public sealed class MinValueAttribute : Attribute Inheritance object Attribute MinValueAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors MinValueAttribute(double) Set the minimum value permitted for a number type parameter. public MinValueAttribute(double value) Parameters value double The minimum value permitted. Properties Value Gets the minimum value permitted. public double Value { get; } Property Value double"
  },
  "api/Discord.Interactions.ModalCommandInfo.html": {
    "href": "api/Discord.Interactions.ModalCommandInfo.html",
    "title": "Class ModalCommandInfo | Discord.Net Documentation",
    "keywords": "Class ModalCommandInfo Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represents the info class of an attribute based method for handling Modal Interaction events. public class ModalCommandInfo : CommandInfo<ModalCommandParameterInfo>, ICommandInfo Inheritance object CommandInfo<ModalCommandParameterInfo> ModalCommandInfo Implements ICommandInfo Inherited Members CommandInfo<ModalCommandParameterInfo>.Module CommandInfo<ModalCommandParameterInfo>.CommandService CommandInfo<ModalCommandParameterInfo>.Name CommandInfo<ModalCommandParameterInfo>.MethodName CommandInfo<ModalCommandParameterInfo>.IgnoreGroupNames CommandInfo<ModalCommandParameterInfo>.IsTopLevelCommand CommandInfo<ModalCommandParameterInfo>.RunMode CommandInfo<ModalCommandParameterInfo>.Attributes CommandInfo<ModalCommandParameterInfo>.Preconditions CommandInfo<ModalCommandParameterInfo>.TreatNameAsRegex CommandInfo<ModalCommandParameterInfo>.CheckPreconditionsAsync(IInteractionContext, IServiceProvider) CommandInfo<ModalCommandParameterInfo>.InvokeEventAndReturn<T>(IInteractionContext, T) CommandInfo<ModalCommandParameterInfo>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Modal Gets the ModalInfo class for this commands IModal parameter. public ModalInfo Modal { get; } Property Value ModalInfo Parameters Gets a collection of the parameters of this command. public override IReadOnlyList<ModalCommandParameterInfo> Parameters { get; } Property Value IReadOnlyList<ModalCommandParameterInfo> SupportsWildCards Gets whether this command supports wild card patterns. public override bool SupportsWildCards { get; } Property Value bool Methods ExecuteAsync(IInteractionContext, IServiceProvider) Executes the command with the provided context. public override Task<IResult> ExecuteAsync(IInteractionContext context, IServiceProvider services) Parameters context IInteractionContext The execution context. services IServiceProvider Dependencies that will be used to create the module instance. Returns Task<IResult> A task representing the execution process. The task result contains the execution result. GetLogString(IInteractionContext) protected override string GetLogString(IInteractionContext context) Parameters context IInteractionContext Returns string InvokeModuleEvent(IInteractionContext, IResult) protected override Task InvokeModuleEvent(IInteractionContext context, IResult result) Parameters context IInteractionContext result IResult Returns Task ParseArgumentsAsync(IInteractionContext, IServiceProvider) protected override Task<IResult> ParseArgumentsAsync(IInteractionContext context, IServiceProvider services) Parameters context IInteractionContext services IServiceProvider Returns Task<IResult>"
  },
  "api/Discord.Interactions.ModalCommandParameterInfo.html": {
    "href": "api/Discord.Interactions.ModalCommandParameterInfo.html",
    "title": "Class ModalCommandParameterInfo | Discord.Net Documentation",
    "keywords": "Class ModalCommandParameterInfo Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represents the base parameter info class for InteractionService modals. public class ModalCommandParameterInfo : CommandParameterInfo, IParameterInfo Inheritance object CommandParameterInfo ModalCommandParameterInfo Implements IParameterInfo Inherited Members CommandParameterInfo.Name CommandParameterInfo.ParameterType CommandParameterInfo.IsRequired CommandParameterInfo.IsParameterArray CommandParameterInfo.DefaultValue CommandParameterInfo.Attributes CommandParameterInfo.Preconditions CommandParameterInfo.CheckPreconditionsAsync(IInteractionContext, object, IServiceProvider) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Command public ModalCommandInfo Command { get; } Property Value ModalCommandInfo IsModalParameter Gets whether this parameter is an IModal public bool IsModalParameter { get; } Property Value bool Modal Gets the ModalInfo class for this parameter if IsModalParameter is true. public ModalInfo Modal { get; } Property Value ModalInfo TypeReader Gets the TypeReader assigned to this parameter, if IsModalParameter is true. public TypeReader TypeReader { get; } Property Value TypeReader"
  },
  "api/Discord.Interactions.ModalInfo.html": {
    "href": "api/Discord.Interactions.ModalInfo.html",
    "title": "Class ModalInfo | Discord.Net Documentation",
    "keywords": "Class ModalInfo Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represents the info class of an IModal form. public class ModalInfo Inheritance object ModalInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Components Gets a collection of the components of this modal. public IReadOnlyCollection<InputComponentInfo> Components { get; } Property Value IReadOnlyCollection<InputComponentInfo> TextComponents Gets a collection of the text components of this modal. public IReadOnlyCollection<TextInputComponentInfo> TextComponents { get; } Property Value IReadOnlyCollection<TextInputComponentInfo> Title Gets the title of this modal. public string Title { get; } Property Value string Type Gets the IModal implementation used to initialize this object. public Type Type { get; } Property Value Type Methods CreateModal(IModalInteraction, bool) Creates an IModal and fills it with provided message components. [Obsolete(\"This method is no longer supported with the introduction of Component TypeConverters, please use the CreateModalAsync method.\")] public IModal CreateModal(IModalInteraction modalInteraction, bool throwOnMissingField = false) Parameters modalInteraction IModalInteraction IModalInteraction that will be injected into the modal. throwOnMissingField bool Returns IModal A IModal filled with the provided components. CreateModalAsync(IInteractionContext, IServiceProvider, bool) Creates an IModal and fills it with provided message components. public Task<IResult> CreateModalAsync(IInteractionContext context, IServiceProvider services = null, bool throwOnMissingField = false) Parameters context IInteractionContext Context of the IModalInteraction that will be injected into the modal. services IServiceProvider Services to be passed onto the ComponentTypeConverters of the modal fields. throwOnMissingField bool Whether or not this method should exit on encountering a missing modal field. Returns Task<IResult> A TypeConverterResult if a type conversion has failed, else a ParseResult."
  },
  "api/Discord.Interactions.ModalInitializer.html": {
    "href": "api/Discord.Interactions.ModalInitializer.html",
    "title": "Delegate ModalInitializer | Discord.Net Documentation",
    "keywords": "Delegate ModalInitializer Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represents a cached object initialization delegate. public delegate IModal ModalInitializer(object[] args) Parameters args object[] Property arguments array. Returns IModal Returns the constructed object."
  },
  "api/Discord.Interactions.ModalInputAttribute.html": {
    "href": "api/Discord.Interactions.ModalInputAttribute.html",
    "title": "Class ModalInputAttribute | Discord.Net Documentation",
    "keywords": "Class ModalInputAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Mark an IModal property as a modal input field. [AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = false)] public abstract class ModalInputAttribute : Attribute Inheritance object Attribute ModalInputAttribute Derived ModalTextInputAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModalInputAttribute(string) Create a new ModalInputAttribute. protected ModalInputAttribute(string customId) Parameters customId string The custom id of the input. Properties ComponentType Gets the type of the component. public abstract ComponentType ComponentType { get; } Property Value ComponentType CustomId Gets the custom id of the text input. public string CustomId { get; } Property Value string"
  },
  "api/Discord.Interactions.ModalInteractionAttribute.html": {
    "href": "api/Discord.Interactions.ModalInteractionAttribute.html",
    "title": "Class ModalInteractionAttribute | Discord.Net Documentation",
    "keywords": "Class ModalInteractionAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Create a Modal interaction handler. CustomId represents the CustomId of the Modal that will be handled. [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = true)] public sealed class ModalInteractionAttribute : Attribute Inheritance object Attribute ModalInteractionAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks GroupAttributes will add prefixes to this command if IgnoreGroupNames is set to false CustomID supports a Wild Card pattern where you can use the WildCardExpression to match a set of CustomIDs. Constructors ModalInteractionAttribute(string, bool, RunMode) Create a command for modal interaction handling. public ModalInteractionAttribute(string customId, bool ignoreGroupNames = false, RunMode runMode = RunMode.Default) Parameters customId string String to compare the modal CustomIDs with. ignoreGroupNames bool If true GroupAttributes will be ignored while creating this command and this method will be treated as a top level command. runMode RunMode Set the run mode of the command. Properties CustomId Gets the string to compare the Modal CustomIDs with. public string CustomId { get; } Property Value string IgnoreGroupNames Gets true if GroupAttributes will be ignored while creating this command and this method will be treated as a top level command. public bool IgnoreGroupNames { get; } Property Value bool RunMode Gets the run mode this command gets executed with. public RunMode RunMode { get; } Property Value RunMode TreatAsRegex Gets or sets whether the CustomId should be treated as a raw Regex pattern. public bool TreatAsRegex { get; set; } Property Value bool Remarks false defaults to the pattern used before 3.9.0."
  },
  "api/Discord.Interactions.ModalTextInputAttribute.html": {
    "href": "api/Discord.Interactions.ModalTextInputAttribute.html",
    "title": "Class ModalTextInputAttribute | Discord.Net Documentation",
    "keywords": "Class ModalTextInputAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Marks a IModal property as a text input. public sealed class ModalTextInputAttribute : ModalInputAttribute Inheritance object Attribute ModalInputAttribute ModalTextInputAttribute Inherited Members ModalInputAttribute.CustomId Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ModalTextInputAttribute(string, TextInputStyle, string, int, int, string) Create a new ModalTextInputAttribute. public ModalTextInputAttribute(string customId, TextInputStyle style = TextInputStyle.Short, string placeholder = null, int minLength = 1, int maxLength = 4000, string initValue = null) Parameters customId string The custom id of the text input.> style TextInputStyle The style of the text input. placeholder string The placeholder of the text input. minLength int The minimum length of the text input's content. maxLength int The maximum length of the text input's content. initValue string The initial value to be displayed by this input. Properties ComponentType Gets the type of the component. public override ComponentType ComponentType { get; } Property Value ComponentType InitialValue Gets the initial value to be displayed by this input. public string InitialValue { get; } Property Value string MaxLength Gets the maximum length of the text input. public int MaxLength { get; } Property Value int MinLength Gets the minimum length of the text input. public int MinLength { get; } Property Value int Placeholder Gets the placeholder of the text input. public string Placeholder { get; } Property Value string Style Gets the style of the text input. public TextInputStyle Style { get; } Property Value TextInputStyle"
  },
  "api/Discord.Interactions.ModuleInfo.html": {
    "href": "api/Discord.Interactions.ModuleInfo.html",
    "title": "Class ModuleInfo | Discord.Net Documentation",
    "keywords": "Class ModuleInfo Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Contains the information of a Interactions Module. public class ModuleInfo Inheritance object ModuleInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Attributes Gets a collection of the attributes of this module. public IReadOnlyCollection<Attribute> Attributes { get; } Property Value IReadOnlyCollection<Attribute> AutocompleteCommands Gets the Autocomplete Commands that are declared in this module. public IReadOnlyCollection<AutocompleteCommandInfo> AutocompleteCommands { get; } Property Value IReadOnlyCollection<AutocompleteCommandInfo> CommandService Gets the underlying command service. public InteractionService CommandService { get; } Property Value InteractionService ComponentCommands Gets the Component Commands that are declared in this module. public IReadOnlyCollection<ComponentCommandInfo> ComponentCommands { get; } Property Value IReadOnlyCollection<ComponentCommandInfo> ContextCommands Gets the Context Commands that are declared in this module. public IReadOnlyList<ContextCommandInfo> ContextCommands { get; } Property Value IReadOnlyList<ContextCommandInfo> DefaultMemberPermissions Gets the default permissions needed for executing this command. public GuildPermission? DefaultMemberPermissions { get; } Property Value GuildPermission? DefaultPermission Gets the default Permission of this module. [Obsolete(\"To be deprecated soon, use IsEnabledInDm and DefaultMemberPermissions instead.\")] public bool DefaultPermission { get; } Property Value bool Description Gets the description of this module if IsSlashGroup is true. public string Description { get; } Property Value string DontAutoRegister Gets true if this module will not be registered by RegisterCommandsGloballyAsync(bool) or RegisterCommandsToGuildAsync(ulong, bool) methods. public bool DontAutoRegister { get; } Property Value bool IsEnabledInDm Gets whether this command can be used in DMs. public bool IsEnabledInDm { get; } Property Value bool IsNsfw Gets whether this command is age restricted. public bool IsNsfw { get; } Property Value bool IsSlashGroup Gets true if this module is marked with a GroupAttribute. public bool IsSlashGroup { get; } Property Value bool IsSubModule Gets true if this module is declared by another InteractionModuleBase<T>. public bool IsSubModule { get; } Property Value bool IsTopLevelGroup Gets true if this module has a valid GroupAttribute and has no parent with a GroupAttribute. public bool IsTopLevelGroup { get; } Property Value bool ModalCommands public IReadOnlyCollection<ModalCommandInfo> ModalCommands { get; } Property Value IReadOnlyCollection<ModalCommandInfo> Name Gets the name of this module class. public string Name { get; } Property Value string Parent Gets the declaring type of this module, if IsSubModule is true. public ModuleInfo Parent { get; } Property Value ModuleInfo Preconditions Gets a collection of the preconditions of this module. public IReadOnlyCollection<PreconditionAttribute> Preconditions { get; } Property Value IReadOnlyCollection<PreconditionAttribute> SlashCommands Gets the Slash Commands that are declared in this module. public IReadOnlyList<SlashCommandInfo> SlashCommands { get; } Property Value IReadOnlyList<SlashCommandInfo> SlashGroupName Gets the group name of this module, if the module is marked with a GroupAttribute. public string SlashGroupName { get; } Property Value string SubModules Gets the collection of Sub Modules of this module. public IReadOnlyList<ModuleInfo> SubModules { get; } Property Value IReadOnlyList<ModuleInfo>"
  },
  "api/Discord.Interactions.NsfwCommandAttribute.html": {
    "href": "api/Discord.Interactions.NsfwCommandAttribute.html",
    "title": "Class NsfwCommandAttribute | Discord.Net Documentation",
    "keywords": "Class NsfwCommandAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Sets the IsNsfw property of an application command or module. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = false, Inherited = true)] public class NsfwCommandAttribute : Attribute Inheritance object Attribute NsfwCommandAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NsfwCommandAttribute(bool) Sets the IsNsfw property of an application command or module. public NsfwCommandAttribute(bool isNsfw) Parameters isNsfw bool Whether or not this command is age restricted. Properties IsNsfw Gets whether or not this command is age restricted. public bool IsNsfw { get; } Property Value bool"
  },
  "api/Discord.Interactions.ParameterChoice.html": {
    "href": "api/Discord.Interactions.ParameterChoice.html",
    "title": "Class ParameterChoice | Discord.Net Documentation",
    "keywords": "Class ParameterChoice Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represents a Slash Command parameter choice. public class ParameterChoice Inheritance object ParameterChoice Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets the name of the choice. public string Name { get; } Property Value string Value Gets the value of the choice. public object Value { get; } Property Value object"
  },
  "api/Discord.Interactions.ParameterPreconditionAttribute.html": {
    "href": "api/Discord.Interactions.ParameterPreconditionAttribute.html",
    "title": "Class ParameterPreconditionAttribute | Discord.Net Documentation",
    "keywords": "Class ParameterPreconditionAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Requires the parameter to pass the specified precondition before execution can begin. [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = true, Inherited = true)] public abstract class ParameterPreconditionAttribute : Attribute Inheritance object Attribute ParameterPreconditionAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ErrorMessage Gets the error message to be returned if execution context doesn't pass the precondition check. public virtual string ErrorMessage { get; } Property Value string Remarks When overridden in a derived class, uses the supplied string as the error message if the precondition doesn't pass. Setting this for a class that doesn't override this property is a no-op. See Also PreconditionAttribute Methods CheckRequirementsAsync(IInteractionContext, IParameterInfo, object, IServiceProvider) Checks whether the condition is met before execution of the command. public abstract Task<PreconditionResult> CheckRequirementsAsync(IInteractionContext context, IParameterInfo parameterInfo, object value, IServiceProvider services) Parameters context IInteractionContext The context of the command. parameterInfo IParameterInfo The parameter of the command being checked against. value object The raw value of the parameter. services IServiceProvider The service collection used for dependency injection. Returns Task<PreconditionResult> See Also PreconditionAttribute See Also PreconditionAttribute"
  },
  "api/Discord.Interactions.ParseResult.html": {
    "href": "api/Discord.Interactions.ParseResult.html",
    "title": "Struct ParseResult | Discord.Net Documentation",
    "keywords": "Struct ParseResult Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll public struct ParseResult : IResult Implements IResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Args public readonly object[] Args { get; } Property Value object[] Error Gets the error type that may have occurred during the operation. public readonly InteractionCommandError? Error { get; } Property Value InteractionCommandError? A InteractionCommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. ErrorReason Gets the reason for the error. public readonly string ErrorReason { get; } Property Value string A string containing the error reason. IsSuccess Indicates whether the operation was successful or not. public bool IsSuccess { get; } Property Value bool true if the result is positive; otherwise false. Methods FromError(IResult) public static ParseResult FromError(IResult result) Parameters result IResult Returns ParseResult FromError(InteractionCommandError, string) public static ParseResult FromError(InteractionCommandError error, string reason) Parameters error InteractionCommandError reason string Returns ParseResult FromError(Exception) public static ParseResult FromError(Exception exception) Parameters exception Exception Returns ParseResult FromSuccess(object[]) public static ParseResult FromSuccess(object[] args) Parameters args object[] Returns ParseResult ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name."
  },
  "api/Discord.Interactions.PreconditionAttribute.html": {
    "href": "api/Discord.Interactions.PreconditionAttribute.html",
    "title": "Class PreconditionAttribute | Discord.Net Documentation",
    "keywords": "Class PreconditionAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Requires the module or class to pass the specified precondition before execution can begin. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = true, Inherited = true)] public abstract class PreconditionAttribute : Attribute Inheritance object Attribute PreconditionAttribute Derived RequireBotPermissionAttribute RequireContextAttribute RequireNsfwAttribute RequireOwnerAttribute RequireRoleAttribute RequireUserPermissionAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ErrorMessage Gets the error message to be returned if execution context doesn't pass the precondition check. public virtual string ErrorMessage { get; } Property Value string Remarks When overridden in a derived class, uses the supplied string as the error message if the precondition doesn't pass. Setting this for a class that doesn't override this property is a no-op. See Also ParameterPreconditionAttribute Group Gets the group that this precondition belongs to. public string Group { get; set; } Property Value string Remarks Preconditions of the same group require only one of the preconditions to pass in order to be successful (A || B). Specifying Group = null or not at all will require all preconditions to pass, just like normal (A && B). See Also ParameterPreconditionAttribute Methods CheckRequirementsAsync(IInteractionContext, ICommandInfo, IServiceProvider) Checks if the commandInfo command to be executed meets the precondition requirements. public abstract Task<PreconditionResult> CheckRequirementsAsync(IInteractionContext context, ICommandInfo commandInfo, IServiceProvider services) Parameters context IInteractionContext The context of the command. commandInfo ICommandInfo The command being executed. services IServiceProvider The service collection used for dependency injection. Returns Task<PreconditionResult> See Also ParameterPreconditionAttribute See Also ParameterPreconditionAttribute"
  },
  "api/Discord.Interactions.PreconditionGroupResult.html": {
    "href": "api/Discord.Interactions.PreconditionGroupResult.html",
    "title": "Class PreconditionGroupResult | Discord.Net Documentation",
    "keywords": "Class PreconditionGroupResult Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represents a result type for grouped command preconditions. public class PreconditionGroupResult : PreconditionResult, IResult Inheritance object PreconditionResult PreconditionGroupResult Implements IResult Inherited Members PreconditionResult.Error PreconditionResult.ErrorReason PreconditionResult.IsSuccess PreconditionResult.FromError(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Results Gets the results of the preconditions of this group. public IReadOnlyCollection<PreconditionResult> Results { get; } Property Value IReadOnlyCollection<PreconditionResult> Methods FromError(IResult) Returns a PreconditionGroupResult with the specified result type. public static PreconditionGroupResult FromError(IResult result) Parameters result IResult The result of failure. Returns PreconditionGroupResult FromError(Exception) Returns a PreconditionGroupResult with Exception and the Message. public static PreconditionGroupResult FromError(Exception exception) Parameters exception Exception The exception that caused the precondition check to fail. Returns PreconditionGroupResult FromError(string, IEnumerable<PreconditionResult>) Returns a PreconditionGroupResult with UnmetPrecondition and the specified reason. public static PreconditionGroupResult FromError(string reason, IEnumerable<PreconditionResult> results) Parameters reason string The reason of failure. results IEnumerable<PreconditionResult> Precondition results of this group Returns PreconditionGroupResult FromSuccess() Returns a PreconditionGroupResult with no errors. public static PreconditionGroupResult FromSuccess() Returns PreconditionGroupResult"
  },
  "api/Discord.Interactions.PreconditionResult.html": {
    "href": "api/Discord.Interactions.PreconditionResult.html",
    "title": "Class PreconditionResult | Discord.Net Documentation",
    "keywords": "Class PreconditionResult Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represents a result type for command preconditions. public class PreconditionResult : IResult Inheritance object PreconditionResult Implements IResult Derived PreconditionGroupResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PreconditionResult(InteractionCommandError?, string) Initializes a new PreconditionResult class with the command error type and reason. protected PreconditionResult(InteractionCommandError? error, string reason) Parameters error InteractionCommandError? The type of failure. reason string The reason of failure. Properties Error Gets the error type that may have occurred during the operation. public InteractionCommandError? Error { get; } Property Value InteractionCommandError? A InteractionCommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. ErrorReason Gets the reason for the error. public string ErrorReason { get; } Property Value string A string containing the error reason. IsSuccess Indicates whether the operation was successful or not. public bool IsSuccess { get; } Property Value bool true if the result is positive; otherwise false. Methods FromError(IResult) Returns a PreconditionResult with the specified result type. public static PreconditionResult FromError(IResult result) Parameters result IResult The result of failure. Returns PreconditionResult FromError(Exception) Returns a PreconditionResult with Exception and the Message. public static PreconditionResult FromError(Exception exception) Parameters exception Exception The exception that caused the precondition check to fail. Returns PreconditionResult FromError(string) Returns a PreconditionResult with UnmetPrecondition and the specified reason. public static PreconditionResult FromError(string reason) Parameters reason string The reason of failure. Returns PreconditionResult FromSuccess() Returns a PreconditionResult with no errors. public static PreconditionResult FromSuccess() Returns PreconditionResult"
  },
  "api/Discord.Interactions.RequireBotPermissionAttribute.html": {
    "href": "api/Discord.Interactions.RequireBotPermissionAttribute.html",
    "title": "Class RequireBotPermissionAttribute | Discord.Net Documentation",
    "keywords": "Class RequireBotPermissionAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Requires the bot to have a specific permission in the channel a command is invoked in. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = true, Inherited = true)] public class RequireBotPermissionAttribute : PreconditionAttribute Inheritance object Attribute PreconditionAttribute RequireBotPermissionAttribute Inherited Members PreconditionAttribute.Group PreconditionAttribute.ErrorMessage Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RequireBotPermissionAttribute(ChannelPermission) Requires that the bot account to have a specific ChannelPermission. public RequireBotPermissionAttribute(ChannelPermission permission) Parameters permission ChannelPermission The ChannelPermission that the bot must have. Multiple permissions can be specified by ORing the permissions together. RequireBotPermissionAttribute(GuildPermission) Requires the bot account to have a specific GuildPermission. public RequireBotPermissionAttribute(GuildPermission permission) Parameters permission GuildPermission The GuildPermission that the bot must have. Multiple permissions can be specified by ORing the permissions together. Remarks This precondition will always fail if the command is being invoked in a IPrivateChannel. Properties ChannelPermission Gets the specified ChannelPermission of the precondition. public ChannelPermission? ChannelPermission { get; } Property Value ChannelPermission? GuildPermission Gets the specified GuildPermission of the precondition. public GuildPermission? GuildPermission { get; } Property Value GuildPermission? NotAGuildErrorMessage Gets or sets the error message if the precondition fails due to being run outside of a Guild channel. public string NotAGuildErrorMessage { get; set; } Property Value string Methods CheckRequirementsAsync(IInteractionContext, ICommandInfo, IServiceProvider) Checks if the commandInfo command to be executed meets the precondition requirements. public override Task<PreconditionResult> CheckRequirementsAsync(IInteractionContext context, ICommandInfo command, IServiceProvider services) Parameters context IInteractionContext The context of the command. command ICommandInfo services IServiceProvider The service collection used for dependency injection. Returns Task<PreconditionResult>"
  },
  "api/Discord.Interactions.RequireContextAttribute.html": {
    "href": "api/Discord.Interactions.RequireContextAttribute.html",
    "title": "Class RequireContextAttribute | Discord.Net Documentation",
    "keywords": "Class RequireContextAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Requires the command to be invoked in a specified context (e.g. in guild, DM). [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = true, Inherited = true)] public class RequireContextAttribute : PreconditionAttribute Inheritance object Attribute PreconditionAttribute RequireContextAttribute Inherited Members PreconditionAttribute.Group PreconditionAttribute.ErrorMessage Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RequireContextAttribute(ContextType) Requires the command to be invoked in the specified context. public RequireContextAttribute(ContextType contexts) Parameters contexts ContextType The type of context the command can be invoked in. Multiple contexts can be specified by ORing the contexts together. Examples [Command(\"secret\")] [RequireContext(ContextType.DM | ContextType.Group)] public Task PrivateOnlyAsync() { return ReplyAsync(\"shh, this command is a secret\"); } Properties Contexts Gets the context required to execute the command. public ContextType Contexts { get; } Property Value ContextType Methods CheckRequirementsAsync(IInteractionContext, ICommandInfo, IServiceProvider) Checks if the commandInfo command to be executed meets the precondition requirements. public override Task<PreconditionResult> CheckRequirementsAsync(IInteractionContext context, ICommandInfo command, IServiceProvider services) Parameters context IInteractionContext The context of the command. command ICommandInfo services IServiceProvider The service collection used for dependency injection. Returns Task<PreconditionResult>"
  },
  "api/Discord.Interactions.RequireNsfwAttribute.html": {
    "href": "api/Discord.Interactions.RequireNsfwAttribute.html",
    "title": "Class RequireNsfwAttribute | Discord.Net Documentation",
    "keywords": "Class RequireNsfwAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Requires the command to be invoked in a channel marked NSFW. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = true, Inherited = true)] public class RequireNsfwAttribute : PreconditionAttribute Inheritance object Attribute PreconditionAttribute RequireNsfwAttribute Inherited Members PreconditionAttribute.Group PreconditionAttribute.ErrorMessage Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples The following example restricts the command too-cool to an NSFW-enabled channel only. public class DankModule : ModuleBase { [Command(\"cool\")] public Task CoolAsync() => ReplyAsync(\"I'm cool for everyone.\"); [RequireNsfw] [Command(\"too-cool\")] public Task TooCoolAsync() => ReplyAsync(\"You can only see this if you're cool enough.\"); } Remarks The precondition will restrict the access of the command or module to be accessed within a guild channel that has been marked as mature or NSFW. If the channel is not of type ITextChannel or the channel is not marked as NSFW, the precondition will fail with an erroneous PreconditionResult. Methods CheckRequirementsAsync(IInteractionContext, ICommandInfo, IServiceProvider) Checks if the commandInfo command to be executed meets the precondition requirements. public override Task<PreconditionResult> CheckRequirementsAsync(IInteractionContext context, ICommandInfo command, IServiceProvider services) Parameters context IInteractionContext The context of the command. command ICommandInfo services IServiceProvider The service collection used for dependency injection. Returns Task<PreconditionResult>"
  },
  "api/Discord.Interactions.RequireOwnerAttribute.html": {
    "href": "api/Discord.Interactions.RequireOwnerAttribute.html",
    "title": "Class RequireOwnerAttribute | Discord.Net Documentation",
    "keywords": "Class RequireOwnerAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Requires the command to be invoked by the owner of the bot. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = true, Inherited = true)] public class RequireOwnerAttribute : PreconditionAttribute Inheritance object Attribute PreconditionAttribute RequireOwnerAttribute Inherited Members PreconditionAttribute.Group PreconditionAttribute.ErrorMessage Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This precondition will restrict the access of the command or module to the owner of the Discord application. If the precondition fails to be met, an erroneous PreconditionResult will be returned with the message \"Command can only be run by the owner of the bot.\" note This precondition will only work if the account has a TokenType of Bot ;otherwise, this precondition will always fail. Methods CheckRequirementsAsync(IInteractionContext, ICommandInfo, IServiceProvider) Checks if the commandInfo command to be executed meets the precondition requirements. public override Task<PreconditionResult> CheckRequirementsAsync(IInteractionContext context, ICommandInfo command, IServiceProvider services) Parameters context IInteractionContext The context of the command. command ICommandInfo services IServiceProvider The service collection used for dependency injection. Returns Task<PreconditionResult>"
  },
  "api/Discord.Interactions.RequireRoleAttribute.html": {
    "href": "api/Discord.Interactions.RequireRoleAttribute.html",
    "title": "Class RequireRoleAttribute | Discord.Net Documentation",
    "keywords": "Class RequireRoleAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Requires the user invoking the command to have a specified role. public class RequireRoleAttribute : PreconditionAttribute Inheritance object Attribute PreconditionAttribute RequireRoleAttribute Inherited Members PreconditionAttribute.Group PreconditionAttribute.ErrorMessage Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RequireRoleAttribute(string) Requires that the user invoking the command to have a specific Role. public RequireRoleAttribute(string roleName) Parameters roleName string Name of the role that the user must have. RequireRoleAttribute(ulong) Requires that the user invoking the command to have a specific Role. public RequireRoleAttribute(ulong roleId) Parameters roleId ulong Id of the role that the user must have. Properties NotAGuildErrorMessage Gets or sets the error message if the precondition fails due to being run outside of a Guild channel. public string NotAGuildErrorMessage { get; set; } Property Value string RoleId Gets the specified Role ID of the precondition. public ulong? RoleId { get; } Property Value ulong? RoleName Gets the specified Role name of the precondition. public string RoleName { get; } Property Value string Methods CheckRequirementsAsync(IInteractionContext, ICommandInfo, IServiceProvider) Checks if the commandInfo command to be executed meets the precondition requirements. public override Task<PreconditionResult> CheckRequirementsAsync(IInteractionContext context, ICommandInfo commandInfo, IServiceProvider services) Parameters context IInteractionContext The context of the command. commandInfo ICommandInfo The command being executed. services IServiceProvider The service collection used for dependency injection. Returns Task<PreconditionResult>"
  },
  "api/Discord.Interactions.RequireUserPermissionAttribute.html": {
    "href": "api/Discord.Interactions.RequireUserPermissionAttribute.html",
    "title": "Class RequireUserPermissionAttribute | Discord.Net Documentation",
    "keywords": "Class RequireUserPermissionAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Requires the user invoking the command to have a specified permission. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method, AllowMultiple = true, Inherited = true)] public class RequireUserPermissionAttribute : PreconditionAttribute Inheritance object Attribute PreconditionAttribute RequireUserPermissionAttribute Inherited Members PreconditionAttribute.Group PreconditionAttribute.ErrorMessage Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RequireUserPermissionAttribute(ChannelPermission) Requires that the user invoking the command to have a specific ChannelPermission. public RequireUserPermissionAttribute(ChannelPermission channelPermission) Parameters channelPermission ChannelPermission The ChannelPermission that the user must have. Multiple permissions can be specified by ORing the permissions together. RequireUserPermissionAttribute(GuildPermission) Requires that the user invoking the command to have a specific GuildPermission. public RequireUserPermissionAttribute(GuildPermission guildPermission) Parameters guildPermission GuildPermission The GuildPermission that the user must have. Multiple permissions can be specified by ORing the permissions together. Remarks This precondition will always fail if the command is being invoked in a IPrivateChannel. Properties ChannelPermission Gets the specified ChannelPermission of the precondition. public ChannelPermission? ChannelPermission { get; } Property Value ChannelPermission? GuildPermission Gets the specified GuildPermission of the precondition. public GuildPermission? GuildPermission { get; } Property Value GuildPermission? NotAGuildErrorMessage Gets or sets the error message if the precondition fails due to being run outside of a Guild channel. public string NotAGuildErrorMessage { get; set; } Property Value string Methods CheckRequirementsAsync(IInteractionContext, ICommandInfo, IServiceProvider) Checks if the commandInfo command to be executed meets the precondition requirements. public override Task<PreconditionResult> CheckRequirementsAsync(IInteractionContext context, ICommandInfo commandInfo, IServiceProvider services) Parameters context IInteractionContext The context of the command. commandInfo ICommandInfo The command being executed. services IServiceProvider The service collection used for dependency injection. Returns Task<PreconditionResult>"
  },
  "api/Discord.Interactions.RequiredInputAttribute.html": {
    "href": "api/Discord.Interactions.RequiredInputAttribute.html",
    "title": "Class RequiredInputAttribute | Discord.Net Documentation",
    "keywords": "Class RequiredInputAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Sets the input as required or optional. [AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)] public class RequiredInputAttribute : Attribute Inheritance object Attribute RequiredInputAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RequiredInputAttribute(bool) Sets the input as required or optional. public RequiredInputAttribute(bool isRequired = true) Parameters isRequired bool Whether or not user input is required for this input. Properties IsRequired Gets whether or not user input is required for this input. public bool IsRequired { get; } Property Value bool"
  },
  "api/Discord.Interactions.RestInteractionModuleBase-1.html": {
    "href": "api/Discord.Interactions.RestInteractionModuleBase-1.html",
    "title": "Class RestInteractionModuleBase<T> | Discord.Net Documentation",
    "keywords": "Class RestInteractionModuleBase<T> Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Provides a base class for a Rest based command module to inherit from. public abstract class RestInteractionModuleBase<T> : InteractionModuleBase<T>, IInteractionModuleBase where T : class, IInteractionContext Type Parameters T Type of interaction context to be injected into the module. Inheritance object InteractionModuleBase<T> RestInteractionModuleBase<T> Implements IInteractionModuleBase Inherited Members InteractionModuleBase<T>.Context InteractionModuleBase<T>.AfterExecute(ICommandInfo) InteractionModuleBase<T>.BeforeExecute(ICommandInfo) InteractionModuleBase<T>.BeforeExecuteAsync(ICommandInfo) InteractionModuleBase<T>.AfterExecuteAsync(ICommandInfo) InteractionModuleBase<T>.OnModuleBuilding(InteractionService, ModuleInfo) InteractionModuleBase<T>.Construct(ModuleBuilder, InteractionService) InteractionModuleBase<T>.RespondWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) InteractionModuleBase<T>.RespondWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) InteractionModuleBase<T>.RespondWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) InteractionModuleBase<T>.RespondWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) InteractionModuleBase<T>.FollowupAsync(string, Embed[], bool, bool, AllowedMentions, RequestOptions, MessageComponent, Embed) InteractionModuleBase<T>.FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) InteractionModuleBase<T>.FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) InteractionModuleBase<T>.FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) InteractionModuleBase<T>.FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) InteractionModuleBase<T>.ReplyAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) InteractionModuleBase<T>.GetOriginalResponseAsync(RequestOptions) InteractionModuleBase<T>.ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) InteractionModuleBase<T>.DeleteOriginalResponseAsync() InteractionModuleBase<T>.RespondWithPremiumRequiredAsync(RequestOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties InteractionService Gets or sets the underlying Interaction Service. public InteractionService InteractionService { get; set; } Property Value InteractionService Methods DeferAsync(bool, RequestOptions) Defer a Rest based Discord Interaction using the RestResponseCallback delegate. protected override Task DeferAsync(bool ephemeral = false, RequestOptions options = null) Parameters ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. options RequestOptions The request options for this response. Returns Task A Task representing the operation of creating the interaction response. Exceptions InvalidOperationException Thrown if the interaction isn't a type of RestInteraction. RespondAsync(string, Embed[], bool, bool, AllowedMentions, RequestOptions, MessageComponent, Embed) Respond to a Rest based Discord Interaction using the RestResponseCallback delegate. protected override Task RespondAsync(string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, RequestOptions options = null, MessageComponent components = null, Embed embed = null) Parameters text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. options RequestOptions The request options for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. Returns Task A Task representing the operation of creating the interaction response. Exceptions InvalidOperationException Thrown if the interaction isn't a type of RestInteraction. RespondWithModalAsync(Modal, RequestOptions) Responds to the interaction with a modal. protected override Task RespondWithModalAsync(Modal modal, RequestOptions options = null) Parameters modal Modal The modal to respond with. options RequestOptions The request options for this async request. Returns Task A Task representing the operation of creating the interaction response. Exceptions InvalidOperationException Thrown if the interaction isn't a type of RestInteraction. RespondWithModalAsync<TModal>(string, RequestOptions, Action<ModalBuilder>) Responds to the interaction with a modal. protected override Task RespondWithModalAsync<TModal>(string customId, RequestOptions options = null, Action<ModalBuilder> modifyModal = null) where TModal : class, IModal Parameters customId string The custom ID of the modal. options RequestOptions The request options for this async request. modifyModal Action<ModalBuilder> Delegate that can be used to modify the modal. Returns Task A Task representing the operation of creating the interaction response. Type Parameters TModal Exceptions InvalidOperationException Thrown if the interaction isn't a type of RestInteraction. RespondWithModalAsync<TModal>(string, TModal, RequestOptions, Action<ModalBuilder>) Responds to the interaction with a modal. protected override Task RespondWithModalAsync<TModal>(string customId, TModal modal, RequestOptions options = null, Action<ModalBuilder> modifyModal = null) where TModal : class, IModal Parameters customId string The custom ID of the modal. modal TModal The modal to respond with. options RequestOptions The request options for this async request. modifyModal Action<ModalBuilder> Delegate that can be used to modify the modal. Returns Task A Task representing the operation of creating the interaction response. Type Parameters TModal The type of the modal. Exceptions InvalidOperationException Thrown if the interaction isn't a type of RestInteraction."
  },
  "api/Discord.Interactions.RestResponseCallback.html": {
    "href": "api/Discord.Interactions.RestResponseCallback.html",
    "title": "Delegate RestResponseCallback | Discord.Net Documentation",
    "keywords": "Delegate RestResponseCallback Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represents a cached delegate for creating interaction responses to webhook based Discord Interactions. public delegate Task RestResponseCallback(IInteractionContext context, string responseBody) Parameters context IInteractionContext Execution context that will be injected into the module class. responseBody string Body of the interaction response. Returns Task A task representing the response operation."
  },
  "api/Discord.Interactions.ResxLocalizationManager.html": {
    "href": "api/Discord.Interactions.ResxLocalizationManager.html",
    "title": "Class ResxLocalizationManager | Discord.Net Documentation",
    "keywords": "Class ResxLocalizationManager Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll The default localization provider for Resx files. public sealed class ResxLocalizationManager : ILocalizationManager Inheritance object ResxLocalizationManager Implements ILocalizationManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ResxLocalizationManager(string, Assembly, params CultureInfo[]) Initializes a new instance of the ResxLocalizationManager class. public ResxLocalizationManager(string baseResource, Assembly assembly, params CultureInfo[] supportedLocales) Parameters baseResource string Name of the base resource. assembly Assembly The main assembly for the resources. supportedLocales CultureInfo[] Cultures the ResxLocalizationManager should search for. Methods GetAllDescriptions(IList<string>, LocalizationTarget) Get every the resource description for every available locale. public IDictionary<string, string> GetAllDescriptions(IList<string> key, LocalizationTarget destinationType) Parameters key IList<string> Location of the resource. destinationType LocalizationTarget Type of the resource. Returns IDictionary<string, string> A dictionary containing every available locale and the resource name. GetAllNames(IList<string>, LocalizationTarget) Get every the resource name for every available locale. public IDictionary<string, string> GetAllNames(IList<string> key, LocalizationTarget destinationType) Parameters key IList<string> Location of the resource. destinationType LocalizationTarget Type of the resource. Returns IDictionary<string, string> A dictionary containing every available locale and the resource name."
  },
  "api/Discord.Interactions.RunMode.html": {
    "href": "api/Discord.Interactions.RunMode.html",
    "title": "Enum RunMode | Discord.Net Documentation",
    "keywords": "Enum RunMode Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Specifies the behavior of the command execution workflow. public enum RunMode Fields Async = 1 Executes the command on a different thread from the gateway one. Default = 2 The default behaviour set in InteractionServiceConfig. Sync = 0 Executes the command on the same thread as gateway one. See Also InteractionServiceConfig"
  },
  "api/Discord.Interactions.RuntimeResult.html": {
    "href": "api/Discord.Interactions.RuntimeResult.html",
    "title": "Class RuntimeResult | Discord.Net Documentation",
    "keywords": "Class RuntimeResult Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represents the base class for creating command result containers. public abstract class RuntimeResult : IResult Inheritance object RuntimeResult Implements IResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RuntimeResult(InteractionCommandError?, string) Initializes a new RuntimeResult class with the type of error and reason. protected RuntimeResult(InteractionCommandError? error, string reason) Parameters error InteractionCommandError? The type of failure, or null if none. reason string The reason of failure. Properties Error Gets the error type that may have occurred during the operation. public InteractionCommandError? Error { get; } Property Value InteractionCommandError? A InteractionCommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. ErrorReason Gets the reason for the error. public string ErrorReason { get; } Property Value string A string containing the error reason. IsSuccess Indicates whether the operation was successful or not. public bool IsSuccess { get; } Property Value bool true if the result is positive; otherwise false. Methods ToString() Gets a string that indicates the runtime result. public override string ToString() Returns string Success if IsSuccess is true; otherwise \"Error: ErrorReason\"."
  },
  "api/Discord.Interactions.SearchResult-1.html": {
    "href": "api/Discord.Interactions.SearchResult-1.html",
    "title": "Struct SearchResult<T> | Discord.Net Documentation",
    "keywords": "Struct SearchResult<T> Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Contains information of a command search. public struct SearchResult<T> : IResult where T : class, ICommandInfo Type Parameters T Type of the target command type. Implements IResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Command Gets the found command, if the search was successful. public readonly T Command { get; } Property Value T Error Gets the error type that may have occurred during the operation. public readonly InteractionCommandError? Error { get; } Property Value InteractionCommandError? A InteractionCommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. ErrorReason Gets the reason for the error. public readonly string ErrorReason { get; } Property Value string A string containing the error reason. IsSuccess Indicates whether the operation was successful or not. public bool IsSuccess { get; } Property Value bool true if the result is positive; otherwise false. RegexCaptureGroups Gets the Regex groups captured by the wild card pattern. public readonly string[] RegexCaptureGroups { get; } Property Value string[] Text Gets the input text of the command search. public readonly string Text { get; } Property Value string Methods FromError(IResult) Initializes a new SearchResult<T> with a specified result; this may or may not be an successful depending on the Error and ErrorReason specified. public static SearchResult<T> FromError(IResult result) Parameters result IResult The result to inherit from. Returns SearchResult<T> A SearchResult<T> that inherits the IResult error type and reason. FromError(Exception) Initializes a new SearchResult<T> with a specified exception, indicating an unsuccessful execution. public static SearchResult<T> FromError(Exception ex) Parameters ex Exception The exception that caused the command execution to fail. Returns SearchResult<T> A SearchResult<T> that contains the exception that caused the unsuccessful execution, along with a InteractionCommandError of type Exception as well as the exception message as the reason. FromError(string, InteractionCommandError, string) Initializes a new SearchResult<T> with a specified InteractionCommandError and its reason, indicating an unsuccessful execution. public static SearchResult<T> FromError(string text, InteractionCommandError error, string reason) Parameters text string error InteractionCommandError The type of error. reason string The reason behind the error. Returns SearchResult<T> A SearchResult<T> that contains a InteractionCommandError and reason. FromSuccess(string, T, string[]) Initializes a new SearchResult<T> with no error, indicating a successful execution. public static SearchResult<T> FromSuccess(string text, T commandInfo, string[] wildCardMatch = null) Parameters text string commandInfo T wildCardMatch string[] Returns SearchResult<T> A SearchResult<T> that does not contain any errors. ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name."
  },
  "api/Discord.Interactions.ShardedInteractionContext-1.html": {
    "href": "api/Discord.Interactions.ShardedInteractionContext-1.html",
    "title": "Class ShardedInteractionContext<TInteraction> | Discord.Net Documentation",
    "keywords": "Class ShardedInteractionContext<TInteraction> Namespace Discord.Interactions Assembly Discord.Net.WebSocket.dll The sharded variant of SocketInteractionContext<TInteraction>. public class ShardedInteractionContext<TInteraction> : SocketInteractionContext<TInteraction>, IRouteMatchContainer, IInteractionContext where TInteraction : SocketInteraction Type Parameters TInteraction Inheritance object SocketInteractionContext<TInteraction> ShardedInteractionContext<TInteraction> Implements IRouteMatchContainer IInteractionContext Derived ShardedInteractionContext Inherited Members SocketInteractionContext<TInteraction>.Guild SocketInteractionContext<TInteraction>.Channel SocketInteractionContext<TInteraction>.User SocketInteractionContext<TInteraction>.Interaction SocketInteractionContext<TInteraction>.SegmentMatches SocketInteractionContext<TInteraction>.SetSegmentMatches(IEnumerable<IRouteSegmentMatch>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ShardedInteractionContext(DiscordShardedClient, TInteraction) Initializes a SocketInteractionContext<TInteraction>. public ShardedInteractionContext(DiscordShardedClient client, TInteraction interaction) Parameters client DiscordShardedClient The underlying client. interaction TInteraction The underlying interaction. Properties Client Gets the DiscordSocketClient that the command will be executed with. public DiscordShardedClient Client { get; } Property Value DiscordShardedClient"
  },
  "api/Discord.Interactions.ShardedInteractionContext.html": {
    "href": "api/Discord.Interactions.ShardedInteractionContext.html",
    "title": "Class ShardedInteractionContext | Discord.Net Documentation",
    "keywords": "Class ShardedInteractionContext Namespace Discord.Interactions Assembly Discord.Net.WebSocket.dll The sharded variant of SocketInteractionContext. public class ShardedInteractionContext : ShardedInteractionContext<SocketInteraction>, IRouteMatchContainer, IInteractionContext Inheritance object SocketInteractionContext<SocketInteraction> ShardedInteractionContext<SocketInteraction> ShardedInteractionContext Implements IRouteMatchContainer IInteractionContext Inherited Members ShardedInteractionContext<SocketInteraction>.Client SocketInteractionContext<SocketInteraction>.Guild SocketInteractionContext<SocketInteraction>.Channel SocketInteractionContext<SocketInteraction>.User SocketInteractionContext<SocketInteraction>.Interaction SocketInteractionContext<SocketInteraction>.SegmentMatches SocketInteractionContext<SocketInteraction>.SetSegmentMatches(IEnumerable<IRouteSegmentMatch>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ShardedInteractionContext(DiscordShardedClient, SocketInteraction) Initializes a ShardedInteractionContext. public ShardedInteractionContext(DiscordShardedClient client, SocketInteraction interaction) Parameters client DiscordShardedClient The underlying client. interaction SocketInteraction The underlying interaction."
  },
  "api/Discord.Interactions.SlashCommandAttribute.html": {
    "href": "api/Discord.Interactions.SlashCommandAttribute.html",
    "title": "Class SlashCommandAttribute | Discord.Net Documentation",
    "keywords": "Class SlashCommandAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Create an Slash Application Command. [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)] public class SlashCommandAttribute : Attribute Inheritance object Attribute SlashCommandAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks GroupAttribute prefix will be used to created nested Slash Application Commands. Constructors SlashCommandAttribute(string, string, bool, RunMode) Register a method as a Slash Command. public SlashCommandAttribute(string name, string description, bool ignoreGroupNames = false, RunMode runMode = RunMode.Default) Parameters name string Name of the command. description string Description of the command. ignoreGroupNames bool If true, GroupAttributes will be ignored while creating this command and this method will be treated as a top level command. runMode RunMode Set the run mode of the command. Properties Description Gets the description of the Slash Command. public string Description { get; } Property Value string IgnoreGroupNames Gets true if GroupAttributes will be ignored while creating this command and this method will be treated as a top level command. public bool IgnoreGroupNames { get; } Property Value bool Name Gets the name of the Slash Command. public string Name { get; } Property Value string RunMode Gets the run mode this command gets executed with. public RunMode RunMode { get; } Property Value RunMode"
  },
  "api/Discord.Interactions.SlashCommandChoiceType.html": {
    "href": "api/Discord.Interactions.SlashCommandChoiceType.html",
    "title": "Enum SlashCommandChoiceType | Discord.Net Documentation",
    "keywords": "Enum SlashCommandChoiceType Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Supported types of pre-defined parameter choices. public enum SlashCommandChoiceType Fields Integer = 1 Discord type for int. Number = 2 Discord type for double. String = 0 Discord type for string."
  },
  "api/Discord.Interactions.SlashCommandInfo.html": {
    "href": "api/Discord.Interactions.SlashCommandInfo.html",
    "title": "Class SlashCommandInfo | Discord.Net Documentation",
    "keywords": "Class SlashCommandInfo Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represents the info class of an attribute based method for command type Slash. public class SlashCommandInfo : CommandInfo<SlashCommandParameterInfo>, ICommandInfo, IApplicationCommandInfo Inheritance object CommandInfo<SlashCommandParameterInfo> SlashCommandInfo Implements ICommandInfo IApplicationCommandInfo Inherited Members CommandInfo<SlashCommandParameterInfo>.Module CommandInfo<SlashCommandParameterInfo>.CommandService CommandInfo<SlashCommandParameterInfo>.Name CommandInfo<SlashCommandParameterInfo>.MethodName CommandInfo<SlashCommandParameterInfo>.IgnoreGroupNames CommandInfo<SlashCommandParameterInfo>.IsTopLevelCommand CommandInfo<SlashCommandParameterInfo>.RunMode CommandInfo<SlashCommandParameterInfo>.Attributes CommandInfo<SlashCommandParameterInfo>.Preconditions CommandInfo<SlashCommandParameterInfo>.TreatNameAsRegex CommandInfo<SlashCommandParameterInfo>.CheckPreconditionsAsync(IInteractionContext, IServiceProvider) CommandInfo<SlashCommandParameterInfo>.InvokeEventAndReturn<T>(IInteractionContext, T) CommandInfo<SlashCommandParameterInfo>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties CommandType Gets the type of this command. public ApplicationCommandType CommandType { get; } Property Value ApplicationCommandType DefaultMemberPermissions Gets the default permissions needed for executing this command. public GuildPermission? DefaultMemberPermissions { get; } Property Value GuildPermission? DefaultPermission Gets the DefaultPermission of this command. public bool DefaultPermission { get; } Property Value bool Description Gets the command description that will be displayed on Discord. public string Description { get; } Property Value string FlattenedParameters Gets the flattened collection of command parameters and complex parameter fields. public IReadOnlyList<SlashCommandParameterInfo> FlattenedParameters { get; } Property Value IReadOnlyList<SlashCommandParameterInfo> IsEnabledInDm Gets whether this command can be used in DMs. public bool IsEnabledInDm { get; } Property Value bool IsNsfw Gets whether this command can is age restricted. public bool IsNsfw { get; } Property Value bool Parameters Gets a collection of the parameters of this command. public override IReadOnlyList<SlashCommandParameterInfo> Parameters { get; } Property Value IReadOnlyList<SlashCommandParameterInfo> SupportsWildCards Gets whether this command supports wild card patterns. public override bool SupportsWildCards { get; } Property Value bool Methods ExecuteAsync(IInteractionContext, IServiceProvider) Executes the command with the provided context. public override Task<IResult> ExecuteAsync(IInteractionContext context, IServiceProvider services) Parameters context IInteractionContext The execution context. services IServiceProvider Dependencies that will be used to create the module instance. Returns Task<IResult> A task representing the execution process. The task result contains the execution result. GetLogString(IInteractionContext) protected override string GetLogString(IInteractionContext context) Parameters context IInteractionContext Returns string InvokeModuleEvent(IInteractionContext, IResult) protected override Task InvokeModuleEvent(IInteractionContext context, IResult result) Parameters context IInteractionContext result IResult Returns Task ParseArgumentsAsync(IInteractionContext, IServiceProvider) protected override Task<IResult> ParseArgumentsAsync(IInteractionContext context, IServiceProvider services) Parameters context IInteractionContext services IServiceProvider Returns Task<IResult>"
  },
  "api/Discord.Interactions.SlashCommandParameterInfo.html": {
    "href": "api/Discord.Interactions.SlashCommandParameterInfo.html",
    "title": "Class SlashCommandParameterInfo | Discord.Net Documentation",
    "keywords": "Class SlashCommandParameterInfo Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represents the parameter info class for SlashCommandInfo commands. public class SlashCommandParameterInfo : CommandParameterInfo, IParameterInfo Inheritance object CommandParameterInfo SlashCommandParameterInfo Implements IParameterInfo Inherited Members CommandParameterInfo.Name CommandParameterInfo.ParameterType CommandParameterInfo.IsRequired CommandParameterInfo.IsParameterArray CommandParameterInfo.DefaultValue CommandParameterInfo.Attributes CommandParameterInfo.Preconditions CommandParameterInfo.CheckPreconditionsAsync(IInteractionContext, object, IServiceProvider) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AutocompleteHandler Gets the IAutocompleteHandler that's linked to this parameter. public IAutocompleteHandler AutocompleteHandler { get; } Property Value IAutocompleteHandler ChannelTypes Gets the allowed channel types for this option. public IReadOnlyCollection<ChannelType> ChannelTypes { get; } Property Value IReadOnlyCollection<ChannelType> Choices Gets the parameter choices of this Slash Application Command parameter. public IReadOnlyCollection<ParameterChoice> Choices { get; } Property Value IReadOnlyCollection<ParameterChoice> Command public SlashCommandInfo Command { get; } Property Value SlashCommandInfo ComplexParameterFields Gets the constructor parameters of this parameter, if IsComplexParameter is true. public IReadOnlyCollection<SlashCommandParameterInfo> ComplexParameterFields { get; } Property Value IReadOnlyCollection<SlashCommandParameterInfo> Description Gets the description of the Slash Command Parameter. public string Description { get; } Property Value string DiscordOptionType Gets the Discord option type this parameter represents. If the parameter is not a complex parameter. public ApplicationCommandOptionType? DiscordOptionType { get; } Property Value ApplicationCommandOptionType? IsAutocomplete Gets whether this parameter is configured for Autocomplete Interactions. public bool IsAutocomplete { get; } Property Value bool IsComplexParameter Gets whether this type should be treated as a complex parameter. public bool IsComplexParameter { get; } Property Value bool MaxLength Gets the maximum length allowed for a string type parameter. public int? MaxLength { get; } Property Value int? MaxValue Gets the maximum value permitted for a number type parameter. public double? MaxValue { get; } Property Value double? MinLength Gets the minimum length allowed for a string type parameter. public int? MinLength { get; } Property Value int? MinValue Gets the minimum value permitted for a number type parameter. public double? MinValue { get; } Property Value double? TypeConverter Gets the TypeConverter<T> that will be used to convert the incoming SocketSlashCommandDataOption into ParameterType. public TypeConverter TypeConverter { get; } Property Value TypeConverter"
  },
  "api/Discord.Interactions.SocketInteractionContext-1.html": {
    "href": "api/Discord.Interactions.SocketInteractionContext-1.html",
    "title": "Class SocketInteractionContext<TInteraction> | Discord.Net Documentation",
    "keywords": "Class SocketInteractionContext<TInteraction> Namespace Discord.Interactions Assembly Discord.Net.WebSocket.dll Represents a Web-Socket based context of an IDiscordInteraction. public class SocketInteractionContext<TInteraction> : IInteractionContext, IRouteMatchContainer where TInteraction : SocketInteraction Type Parameters TInteraction Inheritance object SocketInteractionContext<TInteraction> Implements IInteractionContext IRouteMatchContainer Derived ShardedInteractionContext<TInteraction> SocketInteractionContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SocketInteractionContext(DiscordSocketClient, TInteraction) Initializes a new SocketInteractionContext<TInteraction>. public SocketInteractionContext(DiscordSocketClient client, TInteraction interaction) Parameters client DiscordSocketClient The underlying client. interaction TInteraction The underlying interaction. Properties Channel Gets the ISocketMessageChannel the command originated from. public ISocketMessageChannel Channel { get; } Property Value ISocketMessageChannel Client Gets the DiscordSocketClient that the command will be executed with. public DiscordSocketClient Client { get; } Property Value DiscordSocketClient Guild Gets the SocketGuild the command originated from. public SocketGuild Guild { get; } Property Value SocketGuild Remarks Will be null if the command is from a DM Channel. Interaction Gets the SocketInteraction the command was received with. public TInteraction Interaction { get; } Property Value TInteraction SegmentMatches Gets the collection of captured route segments in this container. public IReadOnlyCollection<IRouteSegmentMatch> SegmentMatches { get; } Property Value IReadOnlyCollection<IRouteSegmentMatch> A collection of captured route segments. User Gets the SocketUser who executed the command. public SocketUser User { get; } Property Value SocketUser Methods SetSegmentMatches(IEnumerable<IRouteSegmentMatch>) Sets the SegmentMatches property of this container. public void SetSegmentMatches(IEnumerable<IRouteSegmentMatch> segmentMatches) Parameters segmentMatches IEnumerable<IRouteSegmentMatch> The collection of captured route segments."
  },
  "api/Discord.Interactions.SocketInteractionContext.html": {
    "href": "api/Discord.Interactions.SocketInteractionContext.html",
    "title": "Class SocketInteractionContext | Discord.Net Documentation",
    "keywords": "Class SocketInteractionContext Namespace Discord.Interactions Assembly Discord.Net.WebSocket.dll Represents a Web-Socket based context of an IDiscordInteraction public class SocketInteractionContext : SocketInteractionContext<SocketInteraction>, IInteractionContext, IRouteMatchContainer Inheritance object SocketInteractionContext<SocketInteraction> SocketInteractionContext Implements IInteractionContext IRouteMatchContainer Inherited Members SocketInteractionContext<SocketInteraction>.Client SocketInteractionContext<SocketInteraction>.Guild SocketInteractionContext<SocketInteraction>.Channel SocketInteractionContext<SocketInteraction>.User SocketInteractionContext<SocketInteraction>.Interaction SocketInteractionContext<SocketInteraction>.SegmentMatches SocketInteractionContext<SocketInteraction>.SetSegmentMatches(IEnumerable<IRouteSegmentMatch>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SocketInteractionContext(DiscordSocketClient, SocketInteraction) Initializes a new SocketInteractionContext public SocketInteractionContext(DiscordSocketClient client, SocketInteraction interaction) Parameters client DiscordSocketClient The underlying client interaction SocketInteraction The underlying interaction"
  },
  "api/Discord.Interactions.SummaryAttribute.html": {
    "href": "api/Discord.Interactions.SummaryAttribute.html",
    "title": "Class SummaryAttribute | Discord.Net Documentation",
    "keywords": "Class SummaryAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Customize the name and description of an Slash Application Command parameter. [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false, Inherited = true)] public class SummaryAttribute : Attribute Inheritance object Attribute SummaryAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SummaryAttribute(string, string) Modify the default name and description values of a Slash Command parameter. public SummaryAttribute(string name = null, string description = null) Parameters name string Name of the parameter. description string Description of the parameter. Properties Description Gets the description of the parameter. public string Description { get; } Property Value string Name Gets the name of the parameter. public string Name { get; } Property Value string"
  },
  "api/Discord.Interactions.TextInputComponentInfo.html": {
    "href": "api/Discord.Interactions.TextInputComponentInfo.html",
    "title": "Class TextInputComponentInfo | Discord.Net Documentation",
    "keywords": "Class TextInputComponentInfo Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represents the InputComponentInfo class for TextInput type. public class TextInputComponentInfo : InputComponentInfo Inheritance object InputComponentInfo TextInputComponentInfo Inherited Members InputComponentInfo.Modal InputComponentInfo.CustomId InputComponentInfo.Label InputComponentInfo.IsRequired InputComponentInfo.ComponentType InputComponentInfo.Type InputComponentInfo.PropertyInfo InputComponentInfo.TypeConverter InputComponentInfo.DefaultValue InputComponentInfo.Attributes object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties InitialValue Gets the initial value to be displayed by this input. public string InitialValue { get; } Property Value string MaxLength Gets the maximum length of the text input. public int MaxLength { get; } Property Value int MinLength Gets the minimum length of the text input. public int MinLength { get; } Property Value int Placeholder Gets the placeholder of the text input. public string Placeholder { get; } Property Value string Style Gets the style of the text input. public TextInputStyle Style { get; } Property Value TextInputStyle"
  },
  "api/Discord.Interactions.TypeConverter-1.html": {
    "href": "api/Discord.Interactions.TypeConverter-1.html",
    "title": "Class TypeConverter<T> | Discord.Net Documentation",
    "keywords": "Class TypeConverter<T> Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Base class for creating TypeConverters. InteractionService uses TypeConverters to interface with Slash Command parameters. public abstract class TypeConverter<T> : TypeConverter Type Parameters T Inheritance object TypeConverter TypeConverter<T> Inherited Members TypeConverter.GetDiscordType() TypeConverter.ReadAsync(IInteractionContext, IApplicationCommandInteractionDataOption, IServiceProvider) TypeConverter.Write(ApplicationCommandOptionProperties, IParameterInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvertTo(Type) Will be used to search for alternative TypeConverters whenever the Command Service encounters an unknown parameter type. public override sealed bool CanConvertTo(Type type) Parameters type Type Returns bool"
  },
  "api/Discord.Interactions.TypeConverter.html": {
    "href": "api/Discord.Interactions.TypeConverter.html",
    "title": "Class TypeConverter | Discord.Net Documentation",
    "keywords": "Class TypeConverter Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Base class for creating TypeConverters. InteractionService uses TypeConverters to interface with Slash Command parameters. public abstract class TypeConverter Inheritance object TypeConverter Derived TypeConverter<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvertTo(Type) Will be used to search for alternative TypeConverters whenever the Command Service encounters an unknown parameter type. public abstract bool CanConvertTo(Type type) Parameters type Type Returns bool GetDiscordType() Will be used to get the Application Command Option type. public abstract ApplicationCommandOptionType GetDiscordType() Returns ApplicationCommandOptionType The option type. ReadAsync(IInteractionContext, IApplicationCommandInteractionDataOption, IServiceProvider) Will be used to read the incoming payload before executing the method body. public abstract Task<TypeConverterResult> ReadAsync(IInteractionContext context, IApplicationCommandInteractionDataOption option, IServiceProvider services) Parameters context IInteractionContext Command execution context. option IApplicationCommandInteractionDataOption Received option payload. services IServiceProvider Service provider that will be used to initialize the command module. Returns Task<TypeConverterResult> The result of the read process. Write(ApplicationCommandOptionProperties, IParameterInfo) Will be used to manipulate the outgoing command option, before the command gets registered to Discord. public virtual void Write(ApplicationCommandOptionProperties properties, IParameterInfo parameter) Parameters properties ApplicationCommandOptionProperties parameter IParameterInfo"
  },
  "api/Discord.Interactions.TypeConverterResult.html": {
    "href": "api/Discord.Interactions.TypeConverterResult.html",
    "title": "Struct TypeConverterResult | Discord.Net Documentation",
    "keywords": "Struct TypeConverterResult Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represents a result type for ReadAsync(IInteractionContext, IApplicationCommandInteractionDataOption, IServiceProvider). public struct TypeConverterResult : IResult Implements IResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Error Gets the error type that may have occurred during the operation. public readonly InteractionCommandError? Error { get; } Property Value InteractionCommandError? A InteractionCommandError indicating the type of error that may have occurred during the operation; null if the operation was successful. ErrorReason Gets the reason for the error. public readonly string ErrorReason { get; } Property Value string A string containing the error reason. IsSuccess Indicates whether the operation was successful or not. public bool IsSuccess { get; } Property Value bool true if the result is positive; otherwise false. Value Gets the result of the conversion if the operation was successful. public readonly object Value { get; } Property Value object Methods FromError(IResult) Returns a PreconditionResult with the specified result type. public static TypeConverterResult FromError(IResult result) Parameters result IResult The result of failure. Returns TypeConverterResult FromError(InteractionCommandError, string) Returns a PreconditionResult with the specified error and the reason. public static TypeConverterResult FromError(InteractionCommandError error, string reason) Parameters error InteractionCommandError The type of error. reason string The reason of failure. Returns TypeConverterResult FromError(Exception) Returns a TypeConverterResult with Exception and the Message. public static TypeConverterResult FromError(Exception exception) Parameters exception Exception The exception that caused the type conversion to fail. Returns TypeConverterResult FromSuccess(object) Returns a TypeConverterResult with no errors. public static TypeConverterResult FromSuccess(object value) Parameters value object Returns TypeConverterResult ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name."
  },
  "api/Discord.Interactions.TypeReader-1.html": {
    "href": "api/Discord.Interactions.TypeReader-1.html",
    "title": "Class TypeReader<T> | Discord.Net Documentation",
    "keywords": "Class TypeReader<T> Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Base class for creating TypeConverters. InteractionService uses TypeConverters to interface with Slash Command parameters. public abstract class TypeReader<T> : TypeReader Type Parameters T Inheritance object TypeReader TypeReader<T> Inherited Members TypeReader.ReadAsync(IInteractionContext, string, IServiceProvider) TypeReader.SerializeAsync(object, IServiceProvider) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvertTo(Type) Will be used to search for alternative TypeReaders whenever the Command Service encounters an unknown parameter type. public override sealed bool CanConvertTo(Type type) Parameters type Type An object type. Returns bool The boolean result."
  },
  "api/Discord.Interactions.TypeReader.html": {
    "href": "api/Discord.Interactions.TypeReader.html",
    "title": "Class TypeReader | Discord.Net Documentation",
    "keywords": "Class TypeReader Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Base class for creating TypeConverters. InteractionService uses TypeConverters to interface with Slash Command parameters. public abstract class TypeReader Inheritance object TypeReader Derived TypeReader<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvertTo(Type) Will be used to search for alternative TypeReaders whenever the Command Service encounters an unknown parameter type. public abstract bool CanConvertTo(Type type) Parameters type Type An object type. Returns bool The boolean result. ReadAsync(IInteractionContext, string, IServiceProvider) Will be used to read the incoming payload before executing the method body. public abstract Task<TypeConverterResult> ReadAsync(IInteractionContext context, string option, IServiceProvider services) Parameters context IInteractionContext Command execution context. option string Received option payload. services IServiceProvider Service provider that will be used to initialize the command module. Returns Task<TypeConverterResult> The result of the read process. SerializeAsync(object, IServiceProvider) Will be used to serialize objects into strings. public virtual Task<string> SerializeAsync(object obj, IServiceProvider services) Parameters obj object Object to be serialized. services IServiceProvider Returns Task<string> A task representing the conversion process. The result of the task contains the conversion result."
  },
  "api/Discord.Interactions.UserCommandAttribute.html": {
    "href": "api/Discord.Interactions.UserCommandAttribute.html",
    "title": "Class UserCommandAttribute | Discord.Net Documentation",
    "keywords": "Class UserCommandAttribute Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Create an User Context Command. [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = true)] public class UserCommandAttribute : ContextCommandAttribute Inheritance object Attribute ContextCommandAttribute UserCommandAttribute Inherited Members ContextCommandAttribute.Name ContextCommandAttribute.CommandType ContextCommandAttribute.RunMode Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks GroupAttributes won't add prefixes to this command. Constructors UserCommandAttribute(string) Register a command as a User Context Command. public UserCommandAttribute(string name) Parameters name string Name of this User Context Command."
  },
  "api/Discord.Interactions.UserCommandInfo.html": {
    "href": "api/Discord.Interactions.UserCommandInfo.html",
    "title": "Class UserCommandInfo | Discord.Net Documentation",
    "keywords": "Class UserCommandInfo Namespace Discord.Interactions Assembly Discord.Net.Interactions.dll Represents the info class of an attribute based method for command type User. public class UserCommandInfo : ContextCommandInfo, ICommandInfo, IApplicationCommandInfo Inheritance object CommandInfo<CommandParameterInfo> ContextCommandInfo UserCommandInfo Implements ICommandInfo IApplicationCommandInfo Inherited Members ContextCommandInfo.CommandType ContextCommandInfo.DefaultPermission ContextCommandInfo.IsEnabledInDm ContextCommandInfo.IsNsfw ContextCommandInfo.DefaultMemberPermissions ContextCommandInfo.Parameters ContextCommandInfo.SupportsWildCards ContextCommandInfo.IgnoreGroupNames ContextCommandInfo.InvokeModuleEvent(IInteractionContext, IResult) CommandInfo<CommandParameterInfo>.Module CommandInfo<CommandParameterInfo>.CommandService CommandInfo<CommandParameterInfo>.Name CommandInfo<CommandParameterInfo>.MethodName CommandInfo<CommandParameterInfo>.IsTopLevelCommand CommandInfo<CommandParameterInfo>.RunMode CommandInfo<CommandParameterInfo>.Attributes CommandInfo<CommandParameterInfo>.Preconditions CommandInfo<CommandParameterInfo>.TreatNameAsRegex CommandInfo<CommandParameterInfo>.CheckPreconditionsAsync(IInteractionContext, IServiceProvider) CommandInfo<CommandParameterInfo>.InvokeEventAndReturn<T>(IInteractionContext, T) CommandInfo<CommandParameterInfo>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods ExecuteAsync(IInteractionContext, IServiceProvider) Executes the command with the provided context. public override Task<IResult> ExecuteAsync(IInteractionContext context, IServiceProvider services) Parameters context IInteractionContext The execution context. services IServiceProvider Dependencies that will be used to create the module instance. Returns Task<IResult> A task representing the execution process. The task result contains the execution result. GetLogString(IInteractionContext) protected override string GetLogString(IInteractionContext context) Parameters context IInteractionContext Returns string ParseArgumentsAsync(IInteractionContext, IServiceProvider) protected override Task<IResult> ParseArgumentsAsync(IInteractionContext context, IServiceProvider services) Parameters context IInteractionContext services IServiceProvider Returns Task<IResult>"
  },
  "api/Discord.Interactions.html": {
    "href": "api/Discord.Interactions.html",
    "title": "Namespace Discord.Interactions | Discord.Net Documentation",
    "keywords": "Namespace Discord.Interactions Classes AutocompleteAttribute Set the IsAutocomplete to true. AutocompleteCommandAttribute Create an Autocomplete Command. AutocompleteCommandInfo Represents the info class of an attribute based method for handling Autocomplete Interaction events. AutocompleteHandler Base class for creating Autocompleters. InteractionService uses Autocompleters to generate parameter suggestions. ChannelTypesAttribute Specify the target channel types for a Channel option. ChoiceAttribute Add a pre-determined argument value to a command parameter. ChoiceDisplayAttribute Customize the displayed value of a slash command choice enum. Only works with the default enum type converter. CommandInfo<TParameter> The base information class for InteractionService commands. CommandParameterInfo Represents the base parameter info class for InteractionService commands. ComplexParameterAttribute Registers a parameter as a complex parameter. ComplexParameterCtorAttribute Tag a type constructor as the preferred Complex command constructor. ComponentCommandInfo Represents the info class of an attribute based method for handling Component Interaction events. ComponentCommandParameterInfo Represents the parameter info class for ComponentCommandInfo commands. ComponentInteractionAttribute Create a Message Component interaction handler, CustomId represents the CustomId of the Message Component that will be handled. ComponentTypeConverter Base class for creating Component TypeConverters. InteractionService uses TypeConverters to interface with Slash Command parameters. ComponentTypeConverter<T> Base class for creating Component TypeConverters. InteractionService uses TypeConverters to interface with Slash Command parameters. ContextCommandAttribute Base attribute for creating a Context Commands. ContextCommandInfo Base information class for attribute based context command handlers. DefaultMemberPermissionsAttribute Sets the DefaultMemberPermissions of an application command or module. DefaultPermissionAttribute Set the \"Default Permission\" property of an Application Command. DontAutoRegisterAttribute InteractionModuleBase<T>s with this attribute will not be registered by the RegisterCommandsGloballyAsync(bool) or RegisterCommandsToGuildAsync(ulong, bool) methods. EnabledInDmAttribute Sets the IsEnabledInDm property of an application command or module. GroupAttribute Create nested Slash Commands by marking a module as a command group. HideAttribute Enum values tagged with this attribute will not be displayed as a parameter choice IDiscordInteractionExtentions InputComponentInfo Represents the base info class for IModal input components. InputLabelAttribute Creates a custom label for an modal input. InteractionContext Represents the context of an Interaction. InteractionException InteractionModuleBase Provides a base class for a command module to inherit from. InteractionModuleBase<T> Provides a base class for a command module to inherit from. InteractionService Provides the framework for building and registering Discord Application Commands. InteractionServiceConfig Represents a configuration class for InteractionService. InteractionUtility Utility class containing helper methods for interacting with Discord Interactions. JsonLocalizationManager The default localization provider for Json resource files. MaxLengthAttribute Sets the maximum length allowed for a string type parameter. MaxValueAttribute Set the maximum value permitted for a number type parameter. MessageCommandAttribute Create a Message Context Command. MessageCommandInfo Represents the info class of an attribute based method for command type Message. MinLengthAttribute Sets the minimum length allowed for a string type parameter. MinValueAttribute Set the minimum value permitted for a number type parameter. ModalCommandInfo Represents the info class of an attribute based method for handling Modal Interaction events. ModalCommandParameterInfo Represents the base parameter info class for InteractionService modals. ModalInfo Represents the info class of an IModal form. ModalInputAttribute Mark an IModal property as a modal input field. ModalInteractionAttribute Create a Modal interaction handler. CustomId represents the CustomId of the Modal that will be handled. ModalTextInputAttribute Marks a IModal property as a text input. ModuleInfo Contains the information of a Interactions Module. NsfwCommandAttribute Sets the IsNsfw property of an application command or module. ParameterChoice Represents a Slash Command parameter choice. ParameterPreconditionAttribute Requires the parameter to pass the specified precondition before execution can begin. PreconditionAttribute Requires the module or class to pass the specified precondition before execution can begin. PreconditionGroupResult Represents a result type for grouped command preconditions. PreconditionResult Represents a result type for command preconditions. RequireBotPermissionAttribute Requires the bot to have a specific permission in the channel a command is invoked in. RequireContextAttribute Requires the command to be invoked in a specified context (e.g. in guild, DM). RequireNsfwAttribute Requires the command to be invoked in a channel marked NSFW. RequireOwnerAttribute Requires the command to be invoked by the owner of the bot. RequireRoleAttribute Requires the user invoking the command to have a specified role. RequireUserPermissionAttribute Requires the user invoking the command to have a specified permission. RequiredInputAttribute Sets the input as required or optional. RestInteractionModuleBase<T> Provides a base class for a Rest based command module to inherit from. ResxLocalizationManager The default localization provider for Resx files. RuntimeResult Represents the base class for creating command result containers. ShardedInteractionContext The sharded variant of SocketInteractionContext. ShardedInteractionContext<TInteraction> The sharded variant of SocketInteractionContext<TInteraction>. SlashCommandAttribute Create an Slash Application Command. SlashCommandInfo Represents the info class of an attribute based method for command type Slash. SlashCommandParameterInfo Represents the parameter info class for SlashCommandInfo commands. SocketInteractionContext Represents a Web-Socket based context of an IDiscordInteraction SocketInteractionContext<TInteraction> Represents a Web-Socket based context of an IDiscordInteraction. SummaryAttribute Customize the name and description of an Slash Application Command parameter. TextInputComponentInfo Represents the InputComponentInfo class for TextInput type. TypeConverter Base class for creating TypeConverters. InteractionService uses TypeConverters to interface with Slash Command parameters. TypeConverter<T> Base class for creating TypeConverters. InteractionService uses TypeConverters to interface with Slash Command parameters. TypeReader Base class for creating TypeConverters. InteractionService uses TypeConverters to interface with Slash Command parameters. TypeReader<T> Base class for creating TypeConverters. InteractionService uses TypeConverters to interface with Slash Command parameters. UserCommandAttribute Create an User Context Command. UserCommandInfo Represents the info class of an attribute based method for command type User. Structs AutocompletionResult Contains the information of a Autocomplete Interaction result. ExecuteResult Contains information of the command's overall execution result. ParseResult SearchResult<T> Contains information of a command search. TypeConverterResult Represents a result type for ReadAsync(IInteractionContext, IApplicationCommandInteractionDataOption, IServiceProvider). Interfaces IApplicationCommandInfo Represents a InteractionService command that can be registered to Discord. IAutocompleteHandler Represent a Autocomplete handler object that can be executed to generate parameter suggestions. ICommandInfo Represent a command information object that can be executed. IInteractionModuleBase Represents a generic interaction module base. ILocalizationManager Represents a localization provider for Discord Application Commands. IModal Represents a generic Modal for use with the interaction service. IParameterInfo Represents a ICommandInfo parameter. IResult Contains information of the result related to a command. Enums ContextType Defines the type of command context (i.e. where the command is being executed). InteractionCommandError Defines the type of error a command can throw. LocalizationTarget Resource targets for localization. RunMode Specifies the behavior of the command execution workflow. SlashCommandChoiceType Supported types of pre-defined parameter choices. Delegates ComplexParameterInitializer Represents a cached argument constructor delegate. ExecuteCallback Represents a cached method execution delegate. ModalInitializer Represents a cached object initialization delegate. RestResponseCallback Represents a cached delegate for creating interaction responses to webhook based Discord Interactions."
  },
  "api/Discord.KeywordPresetTypes.html": {
    "href": "api/Discord.KeywordPresetTypes.html",
    "title": "Enum KeywordPresetTypes | Discord.Net Documentation",
    "keywords": "Enum KeywordPresetTypes Namespace Discord Assembly Discord.Net.Core.dll An enum representing preset filter types. public enum KeywordPresetTypes Fields Profanity = 1 Words that may be considered forms of swearing or cursing. SexualContent = 2 Words that refer to sexually explicit behavior or activity. Slurs = 3 Personal insults or words that may be considered hate speech."
  },
  "api/Discord.LogMessage.html": {
    "href": "api/Discord.LogMessage.html",
    "title": "Struct LogMessage | Discord.Net Documentation",
    "keywords": "Struct LogMessage Namespace Discord Assembly Discord.Net.Core.dll Provides a message object used for logging purposes. public struct LogMessage Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors LogMessage(LogSeverity, string, string, Exception) Initializes a new LogMessage struct with the severity, source, message of the event, and optionally, an exception. public LogMessage(LogSeverity severity, string source, string message, Exception exception = null) Parameters severity LogSeverity The severity of the event. source string The source of the event. message string The message of the event. exception Exception The exception of the event. Properties Exception Gets the exception of this log entry. public readonly Exception Exception { get; } Property Value Exception An Exception object associated with an incident; otherwise null. Message Gets the message of this log entry. public readonly string Message { get; } Property Value string A string containing the message of this log entry. Severity Gets the severity of the log entry. public readonly LogSeverity Severity { get; } Property Value LogSeverity A LogSeverity enum to indicate the severeness of the incident or event. Source Gets the source of the log entry. public readonly string Source { get; } Property Value string A string representing the source of the log entry. Methods ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. ToString(StringBuilder, bool, bool, DateTimeKind, int?) public string ToString(StringBuilder builder = null, bool fullException = true, bool prependTimestamp = true, DateTimeKind timestampKind = DateTimeKind.Local, int? padSource = 11) Parameters builder StringBuilder fullException bool prependTimestamp bool timestampKind DateTimeKind padSource int? Returns string"
  },
  "api/Discord.LogSeverity.html": {
    "href": "api/Discord.LogSeverity.html",
    "title": "Enum LogSeverity | Discord.Net Documentation",
    "keywords": "Enum LogSeverity Namespace Discord Assembly Discord.Net.Core.dll Specifies the severity of the log message. public enum LogSeverity Fields Critical = 0 Logs that contain the most severe level of error. This type of error indicate that immediate attention may be required. Debug = 5 Logs that contain the most detailed messages. Error = 1 Logs that highlight when the flow of execution is stopped due to a failure. Info = 3 Logs that track the general flow of the application. Verbose = 4 Logs that are used for interactive investigation during development. Warning = 2 Logs that highlight an abnormal activity in the flow of execution."
  },
  "api/Discord.LoginState.html": {
    "href": "api/Discord.LoginState.html",
    "title": "Enum LoginState | Discord.Net Documentation",
    "keywords": "Enum LoginState Namespace Discord Assembly Discord.Net.Core.dll Specifies the state of the client's login status. public enum LoginState : byte Fields LoggedIn = 2 The client is currently logged in. LoggedOut = 0 The client is currently logged out. LoggingIn = 1 The client is currently logging in. LoggingOut = 3 The client is currently logging out."
  },
  "api/Discord.MembershipState.html": {
    "href": "api/Discord.MembershipState.html",
    "title": "Enum MembershipState | Discord.Net Documentation",
    "keywords": "Enum MembershipState Namespace Discord Assembly Discord.Net.Core.dll Represents the membership state of a team member. public enum MembershipState Fields Accepted = 1 Invited = 0"
  },
  "api/Discord.MentionUtils.html": {
    "href": "api/Discord.MentionUtils.html",
    "title": "Class MentionUtils | Discord.Net Documentation",
    "keywords": "Class MentionUtils Namespace Discord Assembly Discord.Net.Core.dll Provides a series of helper methods for parsing mentions. public static class MentionUtils Inheritance object MentionUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods MentionChannel(ulong) Returns a mention string based on the channel ID. public static string MentionChannel(ulong id) Parameters id ulong Returns string A channel mention string (e.g. <#103735883630395392>). MentionRole(ulong) Returns a mention string based on the role ID. public static string MentionRole(ulong id) Parameters id ulong Returns string A role mention string (e.g. <@&165511591545143296>). MentionUser(ulong) Returns a mention string based on the user ID. public static string MentionUser(ulong id) Parameters id ulong Returns string A user mention string (e.g. <@80351110224678912>). ParseChannel(string) Parses a provided channel mention string. public static ulong ParseChannel(string text) Parameters text string Returns ulong Exceptions ArgumentException Invalid mention format. ParseRole(string) Parses a provided role mention string. public static ulong ParseRole(string text) Parameters text string Returns ulong Exceptions ArgumentException Invalid mention format. ParseUser(string) Parses a provided user mention string. public static ulong ParseUser(string text) Parameters text string The user mention. Returns ulong Exceptions ArgumentException Invalid mention format. TryParseChannel(string, out ulong) Tries to parse a provided channel mention string. public static bool TryParseChannel(string text, out ulong channelId) Parameters text string channelId ulong Returns bool TryParseRole(string, out ulong) Tries to parse a provided role mention string. public static bool TryParseRole(string text, out ulong roleId) Parameters text string roleId ulong Returns bool TryParseUser(string, out ulong) Tries to parse a provided user mention string. public static bool TryParseUser(string text, out ulong userId) Parameters text string The user mention. userId ulong The UserId of the user. Returns bool"
  },
  "api/Discord.MessageActivity.html": {
    "href": "api/Discord.MessageActivity.html",
    "title": "Class MessageActivity | Discord.Net Documentation",
    "keywords": "Class MessageActivity Namespace Discord Assembly Discord.Net.Core.dll An activity object found in a sent message. public class MessageActivity Inheritance object MessageActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks This class refers to an activity object, visually similar to an embed within a message. However, a message activity is interactive as opposed to a standard static embed. For example, a Spotify party invitation counts as a message activity. Properties PartyId Gets the party ID of this activity, if any. public string PartyId { get; } Property Value string Type Gets the type of activity of this message. public MessageActivityType Type { get; } Property Value MessageActivityType Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Discord.MessageActivityType.html": {
    "href": "api/Discord.MessageActivityType.html",
    "title": "Enum MessageActivityType | Discord.Net Documentation",
    "keywords": "Enum MessageActivityType Namespace Discord Assembly Discord.Net.Core.dll public enum MessageActivityType Fields Join = 1 JoinRequest = 5 Listen = 3 Spectate = 2"
  },
  "api/Discord.MessageApplication.html": {
    "href": "api/Discord.MessageApplication.html",
    "title": "Class MessageApplication | Discord.Net Documentation",
    "keywords": "Class MessageApplication Namespace Discord Assembly Discord.Net.Core.dll public class MessageApplication Inheritance object MessageApplication Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties CoverImage Gets the ID of the embed's image asset. public string CoverImage { get; } Property Value string Description Gets the application's description. public string Description { get; } Property Value string Icon Gets the ID of the application's icon. public string Icon { get; } Property Value string IconUrl Gets the Url of the application's icon. public string IconUrl { get; } Property Value string Id Gets the snowflake ID of the application. public ulong Id { get; } Property Value ulong Name Gets the name of the application. public string Name { get; } Property Value string Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Discord.MessageCommandBuilder.html": {
    "href": "api/Discord.MessageCommandBuilder.html",
    "title": "Class MessageCommandBuilder | Discord.Net Documentation",
    "keywords": "Class MessageCommandBuilder Namespace Discord Assembly Discord.Net.Core.dll A class used to build Message commands. public class MessageCommandBuilder Inheritance object MessageCommandBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields MaxNameLength Returns the maximum length a commands name allowed by Discord public const int MaxNameLength = 32 Field Value int Properties DefaultMemberPermissions Gets or sets the default permission required to use this slash command. public GuildPermission? DefaultMemberPermissions { get; set; } Property Value GuildPermission? IsDMEnabled Gets or sets whether or not this command can be used in DMs. public bool IsDMEnabled { get; set; } Property Value bool IsDefaultPermission Gets or sets whether the command is enabled by default when the app is added to a guild public bool IsDefaultPermission { get; set; } Property Value bool IsNsfw Gets or sets whether or not this command is age restricted. public bool IsNsfw { get; set; } Property Value bool Name Gets or sets the name of this Message command. public string Name { get; set; } Property Value string NameLocalizations Gets the localization dictionary for the name field of this command. public IReadOnlyDictionary<string, string> NameLocalizations { get; } Property Value IReadOnlyDictionary<string, string> Methods AddNameLocalization(string, string) Adds a new entry to the NameLocalizations collection. public MessageCommandBuilder AddNameLocalization(string locale, string name) Parameters locale string Locale of the entry. name string Localized string for the name field. Returns MessageCommandBuilder The current builder. Exceptions ArgumentException Thrown if locale is an invalid locale string. Build() Build the current builder into a MessageCommandProperties class. public MessageCommandProperties Build() Returns MessageCommandProperties A MessageCommandProperties that can be used to create message commands. WithDMPermission(bool) Sets whether or not this command can be used in dms. public MessageCommandBuilder WithDMPermission(bool permission) Parameters permission bool true if the command is available in dms, otherwise false. Returns MessageCommandBuilder The current builder. WithDefaultMemberPermissions(GuildPermission?) Sets the default member permissions required to use this application command. public MessageCommandBuilder WithDefaultMemberPermissions(GuildPermission? permissions) Parameters permissions GuildPermission? The permissions required to use this command. Returns MessageCommandBuilder The current builder. WithDefaultPermission(bool) Sets the default permission of the current command. public MessageCommandBuilder WithDefaultPermission(bool isDefaultPermission) Parameters isDefaultPermission bool The default permission value to set. Returns MessageCommandBuilder The current builder. WithName(string) Sets the field name. public MessageCommandBuilder WithName(string name) Parameters name string The value to set the field name to. Returns MessageCommandBuilder The current builder. WithNameLocalizations(IDictionary<string, string>) Sets the NameLocalizations collection. public MessageCommandBuilder WithNameLocalizations(IDictionary<string, string> nameLocalizations) Parameters nameLocalizations IDictionary<string, string> The localization dictionary to use for the name field of this command. Returns MessageCommandBuilder Exceptions ArgumentNullException Thrown if nameLocalizations is null. ArgumentException Thrown if any dictionary key is an invalid locale string. WithNsfw(bool) Sets whether or not this command is age restricted. public MessageCommandBuilder WithNsfw(bool permission) Parameters permission bool true if the command is age restricted, otherwise false. Returns MessageCommandBuilder The current builder."
  },
  "api/Discord.MessageCommandProperties.html": {
    "href": "api/Discord.MessageCommandProperties.html",
    "title": "Class MessageCommandProperties | Discord.Net Documentation",
    "keywords": "Class MessageCommandProperties Namespace Discord Assembly Discord.Net.Core.dll A class used to create message commands. public class MessageCommandProperties : ApplicationCommandProperties Inheritance object ApplicationCommandProperties MessageCommandProperties Inherited Members ApplicationCommandProperties.Name ApplicationCommandProperties.IsDefaultPermission ApplicationCommandProperties.NameLocalizations ApplicationCommandProperties.DescriptionLocalizations ApplicationCommandProperties.IsDMEnabled ApplicationCommandProperties.IsNsfw ApplicationCommandProperties.DefaultMemberPermissions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Discord.MessageComponent.html": {
    "href": "api/Discord.MessageComponent.html",
    "title": "Class MessageComponent | Discord.Net Documentation",
    "keywords": "Class MessageComponent Namespace Discord Assembly Discord.Net.Core.dll Represents a component object used to send components with messages. public class MessageComponent Inheritance object MessageComponent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Components Gets the components to be used in a message. public IReadOnlyCollection<ActionRowComponent> Components { get; } Property Value IReadOnlyCollection<ActionRowComponent>"
  },
  "api/Discord.MessageExtensions.html": {
    "href": "api/Discord.MessageExtensions.html",
    "title": "Class MessageExtensions | Discord.Net Documentation",
    "keywords": "Class MessageExtensions Namespace Discord Assembly Discord.Net.Core.dll Provides extension methods for IMessage. public static class MessageExtensions Inheritance object MessageExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddReactionsAsync(IUserMessage, IEnumerable<IEmote>, RequestOptions) Add multiple reactions to a message. public static Task AddReactionsAsync(this IUserMessage msg, IEnumerable<IEmote> reactions, RequestOptions options = null) Parameters msg IUserMessage The message to add reactions to. reactions IEnumerable<IEmote> An array of reactions to add to the message. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for adding a reaction to this message. Examples IEmote A = new Emoji(\"🅰\"); IEmote B = new Emoji(\"🅱\"); await msg.AddReactionsAsync(new[] { A, B }); Remarks This method does not bulk add reactions! It will send a request for each reaction included. See Also AddReactionAsync(IEmote, RequestOptions) IEmote GetJumpUrl(IMessage) Gets a URL that jumps to the message. public static string GetJumpUrl(this IMessage msg) Parameters msg IMessage The message to jump to. Returns string A string that contains a URL for jumping to the message in chat. RemoveReactionsAsync(IUserMessage, IUser, IEnumerable<IEmote>, RequestOptions) Remove multiple reactions from a message. public static Task RemoveReactionsAsync(this IUserMessage msg, IUser user, IEnumerable<IEmote> reactions, RequestOptions options = null) Parameters msg IUserMessage The message to remove reactions from. user IUser The user who removed the reaction. reactions IEnumerable<IEmote> An array of reactions to remove from the message. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for removing a reaction to this message. Examples await msg.RemoveReactionsAsync(currentUser, new[] { A, B }); Remarks This method does not bulk remove reactions! If you want to clear reactions from a message, RemoveAllReactionsAsync(RequestOptions) See Also RemoveReactionAsync(IEmote, IUser, RequestOptions) IEmote ReplyAsync(IUserMessage, string, bool, Embed, AllowedMentions, RequestOptions, MessageComponent, ISticker[], Embed[], MessageFlags) Sends an inline reply that references a message. public static Task<IUserMessage> ReplyAsync(this IUserMessage msg, string text = null, bool isTTS = false, Embed embed = null, AllowedMentions allowedMentions = null, RequestOptions options = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters msg IUserMessage The message that is being replied on. text string The message to be sent. isTTS bool Determines whether the message should be read aloud by Discord or not. embed Embed The Rich Embed to be sent. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. options RequestOptions The options to be used when sending the request. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the message. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags Message flags combined as a bitfield. Returns Task<IUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message."
  },
  "api/Discord.MessageFlags.html": {
    "href": "api/Discord.MessageFlags.html",
    "title": "Enum MessageFlags | Discord.Net Documentation",
    "keywords": "Enum MessageFlags Namespace Discord Assembly Discord.Net.Core.dll [Flags] public enum MessageFlags Fields Crossposted = 1 Flag given to messages that have been published to subscribed channels (via Channel Following). Ephemeral = 64 Flag given to messages that is only visible to the user who invoked the Interaction. FailedToMentionRolesInThread = 256 Flag given to messages that failed to mention some roles and add their members to the thread. HasThread = 32 Flag given to messages has an associated thread, with the same id as the message IsCrosspost = 2 Flag given to messages that originated from a message in another channel (via Channel Following). Loading = 128 Flag given to messages that is an Interaction Response and the bot is \"thinking\" None = 0 Default value for flags, when none are given to a message. SourceMessageDeleted = 8 Flag given to messages that the source message for this crosspost has been deleted (via Channel Following). SuppressEmbeds = 4 Flag given to messages that do not display any embeds. SuppressNotification = 4096 Flag give to messages that will not trigger push and desktop notifications. Urgent = 16 Flag given to messages that came from the urgent message system. VoiceMessage = 8192 This message is a voice message."
  },
  "api/Discord.MessageInteraction-1.html": {
    "href": "api/Discord.MessageInteraction-1.html",
    "title": "Class MessageInteraction<TUser> | Discord.Net Documentation",
    "keywords": "Class MessageInteraction<TUser> Namespace Discord Assembly Discord.Net.Core.dll Represents a partial IDiscordInteraction within a message. public class MessageInteraction<TUser> : IMessageInteraction where TUser : IUser Type Parameters TUser The type of the user. Inheritance object MessageInteraction<TUser> Implements IMessageInteraction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id Gets the snowflake id of the interaction. public ulong Id { get; } Property Value ulong Name Gets the name of the application command used. public string Name { get; } Property Value string Type Gets the type of the interaction. public InteractionType Type { get; } Property Value InteractionType User Gets the TUser who invoked the interaction. public TUser User { get; } Property Value TUser"
  },
  "api/Discord.MessageProperties.html": {
    "href": "api/Discord.MessageProperties.html",
    "title": "Class MessageProperties | Discord.Net Documentation",
    "keywords": "Class MessageProperties Namespace Discord Assembly Discord.Net.Core.dll Properties that are used to modify an IUserMessage with the specified changes. public class MessageProperties Inheritance object MessageProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples The following example uses ModifyAsync to apply changes specified in the properties, var message = await channel.SendMessageAsync(\"boo\"); await Task.Delay(TimeSpan.FromSeconds(1)); await message.ModifyAsync(x => x.Content = \"boi\"); Remarks The content of a message can be cleared with Empty if and only if an Embed is present. Properties AllowedMentions Gets or sets the allowed mentions of the message. public Optional<AllowedMentions> AllowedMentions { get; set; } Property Value Optional<AllowedMentions> See Also ModifyAsync(Action<MessageProperties>, RequestOptions) Attachments Gets or sets the attachments for the message. public Optional<IEnumerable<FileAttachment>> Attachments { get; set; } Property Value Optional<IEnumerable<FileAttachment>> See Also ModifyAsync(Action<MessageProperties>, RequestOptions) Components Gets or sets the components for this message. public Optional<MessageComponent> Components { get; set; } Property Value Optional<MessageComponent> See Also ModifyAsync(Action<MessageProperties>, RequestOptions) Content Gets or sets the content of the message. public Optional<string> Content { get; set; } Property Value Optional<string> Remarks This must be less than the constant defined by MaxMessageSize. See Also ModifyAsync(Action<MessageProperties>, RequestOptions) Embed Gets or sets a single embed for this message. public Optional<Embed> Embed { get; set; } Property Value Optional<Embed> Remarks This property will be added to the Embeds array, in the future please use the array rather than this property. See Also ModifyAsync(Action<MessageProperties>, RequestOptions) Embeds Gets or sets the embeds of the message. public Optional<Embed[]> Embeds { get; set; } Property Value Optional<Embed[]> See Also ModifyAsync(Action<MessageProperties>, RequestOptions) Flags Gets or sets the flags of the message. public Optional<MessageFlags?> Flags { get; set; } Property Value Optional<MessageFlags?> Remarks Only SuppressEmbeds can be set/unset and you need to be the author of the message. See Also ModifyAsync(Action<MessageProperties>, RequestOptions) See Also ModifyAsync(Action<MessageProperties>, RequestOptions)"
  },
  "api/Discord.MessageReference.html": {
    "href": "api/Discord.MessageReference.html",
    "title": "Class MessageReference | Discord.Net Documentation",
    "keywords": "Class MessageReference Namespace Discord Assembly Discord.Net.Core.dll Contains the IDs sent from a crossposted message or inline reply. public class MessageReference Inheritance object MessageReference Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MessageReference(ulong?, ulong?, ulong?, bool?) Initializes a new instance of the MessageReference class. public MessageReference(ulong? messageId = null, ulong? channelId = null, ulong? guildId = null, bool? failIfNotExists = null) Parameters messageId ulong? The ID of the message that will be referenced. Used to reply to specific messages and the only parameter required for it. channelId ulong? The ID of the channel that will be referenced. It will be validated if sent. guildId ulong? The ID of the guild that will be referenced. It will be validated if sent. failIfNotExists bool? Whether to error if the referenced message doesn't exist instead of sending as a normal (non-reply) message. Defaults to true. Properties ChannelId Gets the Channel ID of the original message. public ulong ChannelId { get; } Property Value ulong Remarks It only will be the default value (zero) if it was instantiated with a null in the constructor. FailIfNotExists Gets whether to error if the referenced message doesn't exist instead of sending as a normal (non-reply) message Defaults to true. public Optional<bool> FailIfNotExists { get; } Property Value Optional<bool> GuildId Gets the Guild ID of the original message. public Optional<ulong> GuildId { get; } Property Value Optional<ulong> MessageId Gets the Message ID of the original message. public Optional<ulong> MessageId { get; } Property Value Optional<ulong> Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Discord.MessageResolvedData.html": {
    "href": "api/Discord.MessageResolvedData.html",
    "title": "Class MessageResolvedData | Discord.Net Documentation",
    "keywords": "Class MessageResolvedData Namespace Discord Assembly Discord.Net.Core.dll public class MessageResolvedData Inheritance object MessageResolvedData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Channels Gets a collection of IChannel resolved in the message. public IReadOnlyCollection<IChannel> Channels { get; } Property Value IReadOnlyCollection<IChannel> Members Gets a collection of IGuildUser resolved in the message. public IReadOnlyCollection<IGuildUser> Members { get; } Property Value IReadOnlyCollection<IGuildUser> Roles Gets a collection of IRole resolved in the message. public IReadOnlyCollection<IRole> Roles { get; } Property Value IReadOnlyCollection<IRole> Users Gets a collection of IUser resolved in the message. public IReadOnlyCollection<IUser> Users { get; } Property Value IReadOnlyCollection<IUser>"
  },
  "api/Discord.MessageRoleSubscriptionData.html": {
    "href": "api/Discord.MessageRoleSubscriptionData.html",
    "title": "Class MessageRoleSubscriptionData | Discord.Net Documentation",
    "keywords": "Class MessageRoleSubscriptionData Namespace Discord Assembly Discord.Net.Core.dll Represents a role subscription data in IMessage. public class MessageRoleSubscriptionData Inheritance object MessageRoleSubscriptionData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id Gets the id of the sku and listing that the user is subscribed to. public ulong Id { get; } Property Value ulong IsRenewal Gets whether this notification is for a renewal rather than a new purchase. public bool IsRenewal { get; } Property Value bool MonthsSubscribed Gets the cumulative number of months that the user has been subscribed for. public int MonthsSubscribed { get; } Property Value int TierName Gets the name of the tier that the user is subscribed to. public string TierName { get; } Property Value string"
  },
  "api/Discord.MessageSource.html": {
    "href": "api/Discord.MessageSource.html",
    "title": "Enum MessageSource | Discord.Net Documentation",
    "keywords": "Enum MessageSource Namespace Discord Assembly Discord.Net.Core.dll Specifies the source of the Discord message. public enum MessageSource Fields Bot = 2 The message is sent by a bot. System = 0 The message is sent by the system. User = 1 The message is sent by a user. Webhook = 3 The message is sent by a webhook."
  },
  "api/Discord.MessageType.html": {
    "href": "api/Discord.MessageType.html",
    "title": "Enum MessageType | Discord.Net Documentation",
    "keywords": "Enum MessageType Namespace Discord Assembly Discord.Net.Core.dll Specifies the type of message. public enum MessageType Fields ApplicationCommand = 20 The message is an Application Command. AutoModerationAction = 24 The message for an automod action. Call = 3 The message when a user is called. ChannelFollowAdd = 12 The message for when a news channel subscription is added to a text channel. ChannelIconChange = 5 The message when a channel icon is changed. ChannelNameChange = 4 The message when a channel name is changed. ChannelPinnedMessage = 6 The message when another message is pinned. ContextMenuCommand = 23 The message for a context menu command. Default = 0 The default message type. GuildApplicationPremiumSubscription = 32 The message for a guild application premium subscription. GuildDiscoveryDisqualified = 14 The message for when a guild is disqualified from discovery. GuildDiscoveryGracePeriodFinalWarning = 17 The message for when the final warning is sent for the initial grace period discovery. GuildDiscoveryGracePeriodInitialWarning = 16 The message for when the initial warning is sent for the initial grace period discovery. GuildDiscoveryRequalified = 15 The message for when a guild is requalified for discovery. GuildInviteReminder = 22 The message for an invite reminder. GuildMemberJoin = 7 The message when a new member joined. IncidentAlertModeDisabled = 37 The message for incident alert mode disabled. IncidentAlertModeEnabled = 36 The message for incident alert mode enabled. IncidentReportFalseAlarm = 39 The message for incident report false alarm. IncidentReportRaid = 38 The message for incident report raid. InteractionPremiumUpsell = 26 The message for an interaction premium upsell. PurchaseNotification = 44 The message is a purchase notification. RecipientAdd = 1 The message when a recipient is added. RecipientRemove = 2 The message when a recipient is removed. Reply = 19 The message is an inline reply. RoleSubscriptionPurchase = 25 The message for a role subscription purchase. StageEnd = 28 The message for a stage end. StageRaiseHand = 30 The message for a stage raise hand. StageSpeaker = 29 The message for a stage speaker. StageStart = 27 The message for a stage start. StageTopic = 31 The message for a stage raise hand. ThreadCreated = 18 The message for when a thread is created. ThreadStarterMessage = 21 The message that starts a thread. UserPremiumGuildSubscription = 8 The message for when a user boosts a guild. UserPremiumGuildSubscriptionTier1 = 9 The message for when a guild reaches Tier 1 of Nitro boosts. UserPremiumGuildSubscriptionTier2 = 10 The message for when a guild reaches Tier 2 of Nitro boosts. UserPremiumGuildSubscriptionTier3 = 11 The message for when a guild reaches Tier 3 of Nitro boosts."
  },
  "api/Discord.MfaLevel.html": {
    "href": "api/Discord.MfaLevel.html",
    "title": "Enum MfaLevel | Discord.Net Documentation",
    "keywords": "Enum MfaLevel Namespace Discord Assembly Discord.Net.Core.dll Specifies the guild's Multi-Factor Authentication (MFA) level requirement. public enum MfaLevel Fields Disabled = 0 Users have no additional MFA restriction on this guild. Enabled = 1 Users must have MFA enabled on their account to perform administrative actions."
  },
  "api/Discord.Modal.html": {
    "href": "api/Discord.Modal.html",
    "title": "Class Modal | Discord.Net Documentation",
    "keywords": "Class Modal Namespace Discord Assembly Discord.Net.Core.dll Represents a modal interaction. public class Modal : IMessageComponent Inheritance object Modal Implements IMessageComponent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Component Gets the components in the modal. public ModalComponent Component { get; set; } Property Value ModalComponent CustomId Gets the custom id of the component if possible; otherwise null. public string CustomId { get; set; } Property Value string Title Gets the title of the modal. public string Title { get; set; } Property Value string Type Gets the ComponentType of this Message Component. public ComponentType Type { get; } Property Value ComponentType"
  },
  "api/Discord.ModalBuilder.html": {
    "href": "api/Discord.ModalBuilder.html",
    "title": "Class ModalBuilder | Discord.Net Documentation",
    "keywords": "Class ModalBuilder Namespace Discord Assembly Discord.Net.Core.dll Represents a builder for creating a Modal. public class ModalBuilder Inheritance object ModalBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModalBuilder() public ModalBuilder() ModalBuilder(string, string, ModalComponentBuilder) Creates a new instance of the ModalBuilder. public ModalBuilder(string title, string customId, ModalComponentBuilder components = null) Parameters title string The modal's title. customId string The modal's customId. components ModalComponentBuilder The modal's components. Exceptions ArgumentException Only TextInputComponents are allowed. Properties Components Gets or sets the components of the current modal. public ModalComponentBuilder Components { get; set; } Property Value ModalComponentBuilder CustomId Gets or sets the custom ID of the current modal. public string CustomId { get; set; } Property Value string Title Gets or sets the title of the current modal. public string Title { get; set; } Property Value string Methods AddComponents(List<IMessageComponent>, int) Adds multiple components to the current builder. public ModalBuilder AddComponents(List<IMessageComponent> components, int row) Parameters components List<IMessageComponent> The components to add. row int Returns ModalBuilder The current builder AddTextInput(TextInputBuilder, int) Adds a component to the current builder. public ModalBuilder AddTextInput(TextInputBuilder component, int row = 0) Parameters component TextInputBuilder The component to add. row int The row to add the text input. Returns ModalBuilder The current builder. AddTextInput(string, string, TextInputStyle, string, int?, int?, bool?, string) Adds a TextInputBuilder to the current builder. public ModalBuilder AddTextInput(string label, string customId, TextInputStyle style = TextInputStyle.Short, string placeholder = \"\", int? minLength = null, int? maxLength = null, bool? required = null, string value = null) Parameters label string The input's label. customId string The input's custom id. style TextInputStyle The input's style. placeholder string The input's placeholder text. minLength int? The input's minimum length. maxLength int? The input's maximum length. required bool? value string Returns ModalBuilder The current builder. Build() Builds this builder into a Modal. public Modal Build() Returns Modal A Modal with the same values as this builder. Exceptions ArgumentException Modals must have a custom ID. ArgumentException Modals must have a title. ArgumentException Only components of type TextInputComponent are allowed. GetComponent<TMessageComponent>(string) Gets a TMessageComponent by the specified customId. public TMessageComponent GetComponent<TMessageComponent>(string customId) where TMessageComponent : class, IMessageComponent Parameters customId string The CustomId of the component to get. Returns TMessageComponent The component of type TMessageComponent that was found, null otherwise. Type Parameters TMessageComponent The type of the component to get. RemoveComponent(string) Removes a component from this builder by the specified customId. public ModalBuilder RemoveComponent(string customId) Parameters customId string The CustomId of the component to remove. Returns ModalBuilder The current builder. RemoveComponentsOfType(ComponentType) Removes all components of the given type from this builder. public ModalBuilder RemoveComponentsOfType(ComponentType type) Parameters type ComponentType The ComponentType to remove. Returns ModalBuilder The current builder. UpdateTextInput(string, Action<TextInputBuilder>) Updates a TextInputComponent by the specified customId. public ModalBuilder UpdateTextInput(string customId, Action<TextInputBuilder> updateTextInput) Parameters customId string The CustomId of the input to update. updateTextInput Action<TextInputBuilder> An action that configures the updated text input. Returns ModalBuilder The current builder. Exceptions ArgumentException Thrown when the TextInputComponent to be updated was not found. UpdateTextInput(string, object) Updates the value of a TextInputComponent by the specified customId. public ModalBuilder UpdateTextInput(string customId, object value) Parameters customId string The CustomId of the input to update. value object The new value to put. Returns ModalBuilder The current builder. WithCustomId(string) Sets the custom id of the current modal. public ModalBuilder WithCustomId(string customId) Parameters customId string The value to set the custom id to. Returns ModalBuilder The current builder. WithTitle(string) Sets the title of the current modal. public ModalBuilder WithTitle(string title) Parameters title string The value to set the title to. Returns ModalBuilder The current builder."
  },
  "api/Discord.ModalComponent.html": {
    "href": "api/Discord.ModalComponent.html",
    "title": "Class ModalComponent | Discord.Net Documentation",
    "keywords": "Class ModalComponent Namespace Discord Assembly Discord.Net.Core.dll Represents a component object used in Modals. public class ModalComponent Inheritance object ModalComponent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Components Gets the components to be used in a modal. public IReadOnlyCollection<ActionRowComponent> Components { get; } Property Value IReadOnlyCollection<ActionRowComponent>"
  },
  "api/Discord.ModalComponentBuilder.html": {
    "href": "api/Discord.ModalComponentBuilder.html",
    "title": "Class ModalComponentBuilder | Discord.Net Documentation",
    "keywords": "Class ModalComponentBuilder Namespace Discord Assembly Discord.Net.Core.dll Represents a builder for creating a ModalComponent. public class ModalComponentBuilder Inheritance object ModalComponentBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields MaxActionRowCount The max amount of rows a ModalComponent can have. public const int MaxActionRowCount = 5 Field Value int MaxCustomIdLength The max length of a CustomId. public const int MaxCustomIdLength = 100 Field Value int Properties ActionRows Gets or sets the Action Rows for this Component Builder. public List<ActionRowBuilder> ActionRows { get; set; } Property Value List<ActionRowBuilder> Exceptions ArgumentNullException ActionRows cannot be null. ArgumentException ActionRows count exceeds MaxActionRowCount. Methods Build() Get a ModalComponent representing the builder. public ModalComponent Build() Returns ModalComponent A ModalComponent representing the builder. FromComponents(IReadOnlyCollection<IMessageComponent>) Creates a new builder from the provided list of components. public static ComponentBuilder FromComponents(IReadOnlyCollection<IMessageComponent> components) Parameters components IReadOnlyCollection<IMessageComponent> The components to create the builder from. Returns ComponentBuilder The newly created builder. WithTextInput(TextInputBuilder, int) Adds a TextInputBuilder to the ModalComponentBuilder at the specific row. If the row cannot accept the component then it will add it to a row that can. public ModalComponentBuilder WithTextInput(TextInputBuilder text, int row = 0) Parameters text TextInputBuilder The TextInputBuilder to add. row int The row to add the text input. Returns ModalComponentBuilder The current builder. Exceptions InvalidOperationException There are no more rows to add a text input to. ArgumentException row must be less than MaxActionRowCount. WithTextInput(string, string, TextInputStyle, string, int?, int?, int, bool?, string) Adds a TextInputBuilder to the ComponentBuilder at the specific row. If the row cannot accept the component then it will add it to a row that can. public ModalComponentBuilder WithTextInput(string label, string customId, TextInputStyle style = TextInputStyle.Short, string placeholder = null, int? minLength = null, int? maxLength = null, int row = 0, bool? required = null, string value = null) Parameters label string The input's label. customId string The input's custom id. style TextInputStyle The input's style. placeholder string The input's placeholder text. minLength int? The input's minimum length. maxLength int? The input's maximum length. row int required bool? value string Returns ModalComponentBuilder The current builder."
  },
  "api/Discord.ModifyApplicationProperties.html": {
    "href": "api/Discord.ModifyApplicationProperties.html",
    "title": "Class ModifyApplicationProperties | Discord.Net Documentation",
    "keywords": "Class ModifyApplicationProperties Namespace Discord Assembly Discord.Net.Core.dll Represents properties used to modify current application's bot. public class ModifyApplicationProperties Inheritance object ModifyApplicationProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CoverImage Gets or sets the default rich presence invite cover image of the application. public Optional<Image?> CoverImage { get; set; } Property Value Optional<Image?> CustomInstallUrl Gets or set the default custom authorization URL for the app, if enabled. public Optional<string> CustomInstallUrl { get; set; } Property Value Optional<string> Description Gets or sets the description of the application. public Optional<string> Description { get; set; } Property Value Optional<string> Flags Gets or sets app's public flags. public Optional<ApplicationFlags> Flags { get; set; } Property Value Optional<ApplicationFlags> Remarks Only GatewayGuildMembersLimited, GatewayMessageContentLimited and GatewayPresenceLimited flags can be updated. Icon Gets or sets the icon of the application. public Optional<Image?> Icon { get; set; } Property Value Optional<Image?> InstallParams Gets or sets settings for the app's default in-app authorization link, if enabled. public Optional<ApplicationInstallParams> InstallParams { get; set; } Property Value Optional<ApplicationInstallParams> InteractionsEndpointUrl Gets or sets the http interactions endpoint configured for the application. public Optional<string> InteractionsEndpointUrl { get; set; } Property Value Optional<string> RoleConnectionsEndpointUrl Gets or sets the role connections verification endpoint configured for the application. public Optional<string> RoleConnectionsEndpointUrl { get; set; } Property Value Optional<string> Tags Gets or sets application's tags public Optional<string[]> Tags { get; set; } Property Value Optional<string[]>"
  },
  "api/Discord.Net.ApplicationCommandException.html": {
    "href": "api/Discord.Net.ApplicationCommandException.html",
    "title": "Class ApplicationCommandException | Discord.Net Documentation",
    "keywords": "Class ApplicationCommandException Namespace Discord.Net Assembly Discord.Net.Core.dll [Obsolete(\"Please use HttpException instead of this. Will be removed in next major version.\", false)] public class ApplicationCommandException : HttpException, ISerializable Inheritance object Exception HttpException ApplicationCommandException Implements ISerializable Inherited Members HttpException.HttpCode HttpException.DiscordCode HttpException.Reason HttpException.Request HttpException.Errors Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationCommandException(HttpException) public ApplicationCommandException(HttpException httpError) Parameters httpError HttpException"
  },
  "api/Discord.Net.BucketId.html": {
    "href": "api/Discord.Net.BucketId.html",
    "title": "Class BucketId | Discord.Net Documentation",
    "keywords": "Class BucketId Namespace Discord.Net Assembly Discord.Net.Core.dll Represents a ratelimit bucket. public class BucketId : IEquatable<BucketId> Inheritance object BucketId Implements IEquatable<BucketId> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties BucketHash Gets the hash of this bucket. public string BucketHash { get; } Property Value string Remarks The hash is provided by Discord to group ratelimits. Endpoint Gets the endpoint that is going to be requested if available. public string Endpoint { get; } Property Value string HttpMethod Gets the http method used to make the request if available. public string HttpMethod { get; } Property Value string IsHashBucket Gets if this bucket is a hash type. public bool IsHashBucket { get; } Property Value bool MajorParameters Gets the major parameters of the route. public IOrderedEnumerable<KeyValuePair<string, string>> MajorParameters { get; } Property Value IOrderedEnumerable<KeyValuePair<string, string>> Methods Create(string, BucketId) Creates a new BucketId based on a BucketHash and a previous BucketId. public static BucketId Create(string hash, BucketId oldBucket) Parameters hash string Bucket hash provided by Discord. oldBucket BucketId BucketId that is going to be upgraded to a hash type. Returns BucketId A BucketId based on the BucketHash and MajorParameters. Create(string, string, Dictionary<string, string>) Creates a new BucketId based on the HttpMethod and Endpoint. public static BucketId Create(string httpMethod, string endpoint, Dictionary<string, string> majorParams) Parameters httpMethod string Http method used to make the request. endpoint string Endpoint that is going to receive requests. majorParams Dictionary<string, string> Major parameters of the route of this endpoint. Returns BucketId A BucketId based on the HttpMethod and the Endpoint with the provided data. Equals(BucketId) Indicates whether the current object is equal to another object of the same type. public bool Equals(BucketId other) Parameters other BucketId An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetBucketHash() Gets the string that will define this bucket as a hash based one. public string GetBucketHash() Returns string A string that defines this bucket as a hash based one. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetUniqueEndpoint() Gets the string that will define this bucket as an endpoint based one. public string GetUniqueEndpoint() Returns string A string that defines this bucket as an endpoint based one. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Discord.Net.HttpException.html": {
    "href": "api/Discord.Net.HttpException.html",
    "title": "Class HttpException | Discord.Net Documentation",
    "keywords": "Class HttpException Namespace Discord.Net Assembly Discord.Net.Core.dll The exception that is thrown if an error occurs while processing an Discord HTTP request. public class HttpException : Exception, ISerializable Inheritance object Exception HttpException Implements ISerializable Derived ApplicationCommandException Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors HttpException(HttpStatusCode, IRequest, DiscordErrorCode?, string, DiscordJsonError[]) Initializes a new instance of the HttpException class. public HttpException(HttpStatusCode httpCode, IRequest request, DiscordErrorCode? discordCode = null, string reason = null, DiscordJsonError[] errors = null) Parameters httpCode HttpStatusCode The HTTP status code returned. request IRequest The request that was sent prior to the exception. discordCode DiscordErrorCode? The Discord status code returned. reason string The reason behind the exception. errors DiscordJsonError[] Properties DiscordCode Gets the JSON error code returned by Discord. public DiscordErrorCode? DiscordCode { get; } Property Value DiscordErrorCode? A JSON error code from Discord, or null if none. Errors Gets a collection of json errors describing what went wrong with the request. public IReadOnlyCollection<DiscordJsonError> Errors { get; } Property Value IReadOnlyCollection<DiscordJsonError> HttpCode Gets the HTTP status code returned by Discord. public HttpStatusCode HttpCode { get; } Property Value HttpStatusCode An HTTP status code from Discord. Reason Gets the reason of the exception. public string Reason { get; } Property Value string Request Gets the request object used to send the request. public IRequest Request { get; } Property Value IRequest"
  },
  "api/Discord.Net.IRequest.html": {
    "href": "api/Discord.Net.IRequest.html",
    "title": "Interface IRequest | Discord.Net Documentation",
    "keywords": "Interface IRequest Namespace Discord.Net Assembly Discord.Net.Core.dll Represents a generic request to be sent to Discord. public interface IRequest Properties Options RequestOptions Options { get; } Property Value RequestOptions TimeoutAt DateTimeOffset? TimeoutAt { get; } Property Value DateTimeOffset?"
  },
  "api/Discord.Net.RateLimitInfo.html": {
    "href": "api/Discord.Net.RateLimitInfo.html",
    "title": "Struct RateLimitInfo | Discord.Net Documentation",
    "keywords": "Struct RateLimitInfo Namespace Discord.Net Assembly Discord.Net.Rest.dll Represents a REST-Based ratelimit info. public struct RateLimitInfo : IRateLimitInfo Implements IRateLimitInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Bucket Gets a unique string denoting the rate limit being encountered (non-inclusive of major parameters in the route path). public readonly string Bucket { get; } Property Value string Endpoint Gets the endpoint that this ratelimit info came from. public readonly string Endpoint { get; } Property Value string IsGlobal Gets whether or not this ratelimit info is global. public readonly bool IsGlobal { get; } Property Value bool Lag Gets the amount of lag for the request. This is used to denote the precise time of when the ratelimit expires. public readonly TimeSpan? Lag { get; } Property Value TimeSpan? Limit Gets the number of requests that can be made. public readonly int? Limit { get; } Property Value int? Remaining Gets the number of remaining requests that can be made. public readonly int? Remaining { get; } Property Value int? Reset Gets the DateTimeOffset at which the rate limit resets. public readonly DateTimeOffset? Reset { get; } Property Value DateTimeOffset? ResetAfter Gets the absolute time when this ratelimit resets. public readonly TimeSpan? ResetAfter { get; } Property Value TimeSpan? RetryAfter Gets the total time (in seconds) of when the current rate limit bucket will reset. Can have decimals to match previous millisecond ratelimit precision. public readonly int? RetryAfter { get; } Property Value int?"
  },
  "api/Discord.Net.RateLimitedException.html": {
    "href": "api/Discord.Net.RateLimitedException.html",
    "title": "Class RateLimitedException | Discord.Net Documentation",
    "keywords": "Class RateLimitedException Namespace Discord.Net Assembly Discord.Net.Core.dll The exception that is thrown when the user is being rate limited by Discord. public class RateLimitedException : TimeoutException, ISerializable Inheritance object Exception SystemException TimeoutException RateLimitedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RateLimitedException(IRequest) Initializes a new instance of the RateLimitedException class using the request sent. public RateLimitedException(IRequest request) Parameters request IRequest Properties Request Gets the request object used to send the request. public IRequest Request { get; } Property Value IRequest"
  },
  "api/Discord.Net.WebSocketClosedException.html": {
    "href": "api/Discord.Net.WebSocketClosedException.html",
    "title": "Class WebSocketClosedException | Discord.Net Documentation",
    "keywords": "Class WebSocketClosedException Namespace Discord.Net Assembly Discord.Net.Core.dll The exception that is thrown when the WebSocket session is closed by Discord. public class WebSocketClosedException : Exception, ISerializable Inheritance object Exception WebSocketClosedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors WebSocketClosedException(int, string) Initializes a new instance of the WebSocketClosedException using a Discord close code and an optional reason. public WebSocketClosedException(int closeCode, string reason = null) Parameters closeCode int reason string Properties CloseCode Gets the close code sent by Discord. public int CloseCode { get; } Property Value int A close code from Discord. Reason Gets the reason of the interruption. public string Reason { get; } Property Value string"
  },
  "api/Discord.Net.html": {
    "href": "api/Discord.Net.html",
    "title": "Namespace Discord.Net | Discord.Net Documentation",
    "keywords": "Namespace Discord.Net Classes ApplicationCommandException BucketId Represents a ratelimit bucket. HttpException The exception that is thrown if an error occurs while processing an Discord HTTP request. RateLimitedException The exception that is thrown when the user is being rate limited by Discord. WebSocketClosedException The exception that is thrown when the WebSocket session is closed by Discord. Structs RateLimitInfo Represents a REST-Based ratelimit info. Interfaces IRequest Represents a generic request to be sent to Discord."
  },
  "api/Discord.NsfwLevel.html": {
    "href": "api/Discord.NsfwLevel.html",
    "title": "Enum NsfwLevel | Discord.Net Documentation",
    "keywords": "Enum NsfwLevel Namespace Discord Assembly Discord.Net.Core.dll public enum NsfwLevel Fields AgeRestricted = 3 Guild has mildly NSFW content that may not be suitable for users under 18. Default = 0 Default or unset. Explicit = 1 Guild has extremely suggestive or mature content that would only be suitable for users 18 or over. Safe = 2 Guild has no content that could be deemed NSFW; in other words, SFW."
  },
  "api/Discord.Optional-1.html": {
    "href": "api/Discord.Optional-1.html",
    "title": "Struct Optional<T> | Discord.Net Documentation",
    "keywords": "Struct Optional<T> Namespace Discord Assembly Discord.Net.Core.dll public struct Optional<T> Type Parameters T Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Optional(T) Creates a new Parameter with the provided value. public Optional(T value) Parameters value T Properties IsSpecified Returns true if this value has been specified. public readonly bool IsSpecified { get; } Property Value bool Unspecified public static Optional<T> Unspecified { get; } Property Value Optional<T> Value Gets the value for this parameter. public T Value { get; } Property Value T Exceptions InvalidOperationException This property has no value set. Methods Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object other) Parameters other object Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. GetValueOrDefault() public T GetValueOrDefault() Returns T GetValueOrDefault(T) public T GetValueOrDefault(T defaultValue) Parameters defaultValue T Returns T ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Operators explicit operator T(Optional<T>) public static explicit operator T(Optional<T> value) Parameters value Optional<T> Returns T implicit operator Optional<T>(T) public static implicit operator Optional<T>(T value) Parameters value T Returns Optional<T>"
  },
  "api/Discord.Optional.html": {
    "href": "api/Discord.Optional.html",
    "title": "Class Optional | Discord.Net Documentation",
    "keywords": "Class Optional Namespace Discord Assembly Discord.Net.Core.dll public static class Optional Inheritance object Optional Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create<T>() public static Optional<T> Create<T>() Returns Optional<T> Type Parameters T Create<T>(T) public static Optional<T> Create<T>(T value) Parameters value T Returns Optional<T> Type Parameters T ToNullable<T>(Optional<T>) public static T? ToNullable<T>(this Optional<T> val) where T : struct Parameters val Optional<T> Returns T? Type Parameters T"
  },
  "api/Discord.Overwrite.html": {
    "href": "api/Discord.Overwrite.html",
    "title": "Struct Overwrite | Discord.Net Documentation",
    "keywords": "Struct Overwrite Namespace Discord Assembly Discord.Net.Core.dll Represent a permission object. public struct Overwrite Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Overwrite(ulong, PermissionTarget, OverwritePermissions) Initializes a new Overwrite with provided target information and modified permissions. public Overwrite(ulong targetId, PermissionTarget targetType, OverwritePermissions permissions) Parameters targetId ulong targetType PermissionTarget permissions OverwritePermissions Properties Permissions Gets the permissions associated with this overwrite entry. public readonly OverwritePermissions Permissions { get; } Property Value OverwritePermissions TargetId Gets the unique identifier for the object this overwrite is targeting. public readonly ulong TargetId { get; } Property Value ulong TargetType Gets the type of object this overwrite is targeting. public readonly PermissionTarget TargetType { get; } Property Value PermissionTarget"
  },
  "api/Discord.OverwritePermissions.html": {
    "href": "api/Discord.OverwritePermissions.html",
    "title": "Struct OverwritePermissions | Discord.Net Documentation",
    "keywords": "Struct OverwritePermissions Namespace Discord Assembly Discord.Net.Core.dll Represents a container for a series of overwrite permissions. public struct OverwritePermissions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors OverwritePermissions(PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue, PermValue) Initializes a new ChannelPermissions struct with the provided permissions. public OverwritePermissions(PermValue createInstantInvite = PermValue.Inherit, PermValue manageChannel = PermValue.Inherit, PermValue addReactions = PermValue.Inherit, PermValue viewChannel = PermValue.Inherit, PermValue sendMessages = PermValue.Inherit, PermValue sendTTSMessages = PermValue.Inherit, PermValue manageMessages = PermValue.Inherit, PermValue embedLinks = PermValue.Inherit, PermValue attachFiles = PermValue.Inherit, PermValue readMessageHistory = PermValue.Inherit, PermValue mentionEveryone = PermValue.Inherit, PermValue useExternalEmojis = PermValue.Inherit, PermValue connect = PermValue.Inherit, PermValue speak = PermValue.Inherit, PermValue muteMembers = PermValue.Inherit, PermValue deafenMembers = PermValue.Inherit, PermValue moveMembers = PermValue.Inherit, PermValue useVoiceActivation = PermValue.Inherit, PermValue manageRoles = PermValue.Inherit, PermValue manageWebhooks = PermValue.Inherit, PermValue prioritySpeaker = PermValue.Inherit, PermValue stream = PermValue.Inherit, PermValue useSlashCommands = PermValue.Inherit, PermValue useApplicationCommands = PermValue.Inherit, PermValue requestToSpeak = PermValue.Inherit, PermValue manageThreads = PermValue.Inherit, PermValue createPublicThreads = PermValue.Inherit, PermValue createPrivateThreads = PermValue.Inherit, PermValue usePublicThreads = PermValue.Inherit, PermValue usePrivateThreads = PermValue.Inherit, PermValue useExternalStickers = PermValue.Inherit, PermValue sendMessagesInThreads = PermValue.Inherit, PermValue startEmbeddedActivities = PermValue.Inherit) Parameters createInstantInvite PermValue manageChannel PermValue addReactions PermValue viewChannel PermValue sendMessages PermValue sendTTSMessages PermValue manageMessages PermValue embedLinks PermValue attachFiles PermValue readMessageHistory PermValue mentionEveryone PermValue useExternalEmojis PermValue connect PermValue speak PermValue muteMembers PermValue deafenMembers PermValue moveMembers PermValue useVoiceActivation PermValue manageRoles PermValue manageWebhooks PermValue prioritySpeaker PermValue stream PermValue useSlashCommands PermValue useApplicationCommands PermValue requestToSpeak PermValue manageThreads PermValue createPublicThreads PermValue createPrivateThreads PermValue usePublicThreads PermValue usePrivateThreads PermValue useExternalStickers PermValue sendMessagesInThreads PermValue startEmbeddedActivities PermValue OverwritePermissions(string, string) Creates a new OverwritePermissions with the provided allow and deny packed values after converting to ulong. public OverwritePermissions(string allowValue, string denyValue) Parameters allowValue string denyValue string OverwritePermissions(ulong, ulong) Creates a new OverwritePermissions with the provided allow and deny packed values. public OverwritePermissions(ulong allowValue, ulong denyValue) Parameters allowValue ulong denyValue ulong Properties AddReactions If Allowed, a user may add reactions. public PermValue AddReactions { get; } Property Value PermValue AllowValue Gets a packed value representing all the allowed permissions in this OverwritePermissions. public readonly ulong AllowValue { get; } Property Value ulong AttachFiles If Allowed, a user may send files. public PermValue AttachFiles { get; } Property Value PermValue Connect If Allowed, a user may connect to a voice channel. public PermValue Connect { get; } Property Value PermValue CreateInstantInvite If Allowed, a user may create invites. public PermValue CreateInstantInvite { get; } Property Value PermValue CreatePrivateThreads If true, a user may create private threads in this guild. public PermValue CreatePrivateThreads { get; } Property Value PermValue CreatePublicThreads If true, a user may create public threads in this guild. public PermValue CreatePublicThreads { get; } Property Value PermValue DeafenMembers If Allowed, a user may deafen users. public PermValue DeafenMembers { get; } Property Value PermValue DenyValue Gets a packed value representing all the denied permissions in this OverwritePermissions. public readonly ulong DenyValue { get; } Property Value ulong EmbedLinks If Allowed, Discord will auto-embed links sent by this user. public PermValue EmbedLinks { get; } Property Value PermValue InheritAll Gets a blank OverwritePermissions that inherits all permissions. public static OverwritePermissions InheritAll { get; } Property Value OverwritePermissions ManageChannel If Allowed, a user may create, delete and modify this channel. public PermValue ManageChannel { get; } Property Value PermValue ManageMessages If Allowed, a user may delete messages. public PermValue ManageMessages { get; } Property Value PermValue ManageRoles If Allowed, a user may adjust role permissions. This also implicitly grants all other permissions. public PermValue ManageRoles { get; } Property Value PermValue ManageThreads If true, a user may manage threads in this guild. public PermValue ManageThreads { get; } Property Value PermValue ManageWebhooks If True, a user may edit the webhooks for this channel. public PermValue ManageWebhooks { get; } Property Value PermValue MentionEveryone If Allowed, a user may mention @everyone. public PermValue MentionEveryone { get; } Property Value PermValue MoveMembers If Allowed, a user may move other users between voice channels. public PermValue MoveMembers { get; } Property Value PermValue MuteMembers If Allowed, a user may mute users. public PermValue MuteMembers { get; } Property Value PermValue PrioritySpeaker If Allowed, a user may use priority speaker in a voice channel. public PermValue PrioritySpeaker { get; } Property Value PermValue ReadMessageHistory If Allowed, a user may read previous messages. public PermValue ReadMessageHistory { get; } Property Value PermValue RequestToSpeak If true, a user may request to speak in stage channels. public PermValue RequestToSpeak { get; } Property Value PermValue SendMessages If Allowed, a user may send messages. public PermValue SendMessages { get; } Property Value PermValue SendMessagesInThreads If true, a user may send messages in threads in this guild. public PermValue SendMessagesInThreads { get; } Property Value PermValue SendTTSMessages If Allowed, a user may send text-to-speech messages. public PermValue SendTTSMessages { get; } Property Value PermValue Speak If Allowed, a user may speak in a voice channel. public PermValue Speak { get; } Property Value PermValue StartEmbeddedActivities If true, a user launch application activities in voice channels in this guild. public PermValue StartEmbeddedActivities { get; } Property Value PermValue Stream If Allowed, a user may go live in a voice channel. public PermValue Stream { get; } Property Value PermValue UseApplicationCommands If true, a user may use slash commands in this guild. public PermValue UseApplicationCommands { get; } Property Value PermValue UseExternalEmojis If Allowed, a user may use custom emoji from other guilds. public PermValue UseExternalEmojis { get; } Property Value PermValue UseExternalStickers If true, a user may use external stickers in this guild. public PermValue UseExternalStickers { get; } Property Value PermValue UseVAD If Allowed, a user may use voice-activity-detection rather than push-to-talk. public PermValue UseVAD { get; } Property Value PermValue ViewChannel If Allowed, a user may join channels. public PermValue ViewChannel { get; } Property Value PermValue Methods AllowAll(IChannel) Gets a OverwritePermissions that grants all permissions for the given channel. public static OverwritePermissions AllowAll(IChannel channel) Parameters channel IChannel Returns OverwritePermissions Exceptions ArgumentException Unknown channel type. DenyAll(IChannel) Gets a OverwritePermissions that denies all permissions for the given channel. public static OverwritePermissions DenyAll(IChannel channel) Parameters channel IChannel Returns OverwritePermissions Exceptions ArgumentException Unknown channel type. Modify(PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?, PermValue?) Initializes a new OverwritePermissions from the current one, changing the provided non-null permissions. public OverwritePermissions Modify(PermValue? createInstantInvite = null, PermValue? manageChannel = null, PermValue? addReactions = null, PermValue? viewChannel = null, PermValue? sendMessages = null, PermValue? sendTTSMessages = null, PermValue? manageMessages = null, PermValue? embedLinks = null, PermValue? attachFiles = null, PermValue? readMessageHistory = null, PermValue? mentionEveryone = null, PermValue? useExternalEmojis = null, PermValue? connect = null, PermValue? speak = null, PermValue? muteMembers = null, PermValue? deafenMembers = null, PermValue? moveMembers = null, PermValue? useVoiceActivation = null, PermValue? manageRoles = null, PermValue? manageWebhooks = null, PermValue? prioritySpeaker = null, PermValue? stream = null, PermValue? useSlashCommands = null, PermValue? useApplicationCommands = null, PermValue? requestToSpeak = null, PermValue? manageThreads = null, PermValue? createPublicThreads = null, PermValue? createPrivateThreads = null, PermValue? usePublicThreads = null, PermValue? usePrivateThreads = null, PermValue? useExternalStickers = null, PermValue? sendMessagesInThreads = null, PermValue? startEmbeddedActivities = null) Parameters createInstantInvite PermValue? manageChannel PermValue? addReactions PermValue? viewChannel PermValue? sendMessages PermValue? sendTTSMessages PermValue? manageMessages PermValue? embedLinks PermValue? attachFiles PermValue? readMessageHistory PermValue? mentionEveryone PermValue? useExternalEmojis PermValue? connect PermValue? speak PermValue? muteMembers PermValue? deafenMembers PermValue? moveMembers PermValue? useVoiceActivation PermValue? manageRoles PermValue? manageWebhooks PermValue? prioritySpeaker PermValue? stream PermValue? useSlashCommands PermValue? useApplicationCommands PermValue? requestToSpeak PermValue? manageThreads PermValue? createPublicThreads PermValue? createPrivateThreads PermValue? usePublicThreads PermValue? usePrivateThreads PermValue? useExternalStickers PermValue? sendMessagesInThreads PermValue? startEmbeddedActivities PermValue? Returns OverwritePermissions ToAllowList() Creates a List<T> of all the ChannelPermission values that are allowed. public List<ChannelPermission> ToAllowList() Returns List<ChannelPermission> A List<T> of all allowed ChannelPermission flags. If none, the list will be empty. ToDenyList() Creates a List<T> of all the ChannelPermission values that are denied. public List<ChannelPermission> ToDenyList() Returns List<ChannelPermission> A List<T> of all denied ChannelPermission flags. If none, the list will be empty. ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name."
  },
  "api/Discord.PartialGuild.html": {
    "href": "api/Discord.PartialGuild.html",
    "title": "Class PartialGuild | Discord.Net Documentation",
    "keywords": "Class PartialGuild Namespace Discord Assembly Discord.Net.Core.dll Represents a partial guild object. public class PartialGuild : ISnowflakeEntity, IEntity<ulong> Inheritance object PartialGuild Implements ISnowflakeEntity IEntity<ulong> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Most of the fields can have null value. Properties ApproximateMemberCount Gets the approximate member count in the guild. null if none was returned. public int? ApproximateMemberCount { get; } Property Value int? ApproximatePresenceCount Gets the approximate presence count in the guild.null if none was returned. public int? ApproximatePresenceCount { get; } Property Value int? BannerId Gets the identifier for this guilds banner image. public string BannerId { get; } Property Value string An identifier for the banner image; null if none is set. BannerUrl Gets the URL of this guild's banner image. public string BannerUrl { get; } Property Value string A URL pointing to the guild's banner image; null if none is set. CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. Description Gets the description for the guild. public string Description { get; } Property Value string The description for the guild; null if none is set. Features Gets the features for this guild. public GuildFeatures Features { get; } Property Value GuildFeatures A flags enum containing all the features for the guild. IconId Gets the ID of this guild's icon. public string IconId { get; } Property Value string An identifier for the splash image; null if none is set. IconUrl Gets the URL of this guild's icon. public string IconUrl { get; } Property Value string A URL pointing to the guild's icon; null if none is set. Id Gets the unique identifier for this object. public ulong Id { get; } Property Value ulong Name Gets the name of this guild. public string Name { get; } Property Value string A string containing the name of this guild. NsfwLevel Gets the NSFW level of this guild. public NsfwLevel? NsfwLevel { get; } Property Value NsfwLevel? The NSFW level of this guild. null if none was returned. PremiumSubscriptionCount Gets the number of premium subscribers of this guild. public int? PremiumSubscriptionCount { get; } Property Value int? The number of premium subscribers of this guild; null if none was returned. Remarks This is the number of users who have boosted this guild. SplashId Gets the ID of this guild's splash image. public string SplashId { get; } Property Value string An identifier for the splash image; null if none is set. SplashUrl Gets the URL of this guild's splash image. public string SplashUrl { get; } Property Value string A URL pointing to the guild's splash image; null if none is set. VanityURLCode Gets the code for this guild's vanity invite URL. public string VanityURLCode { get; } Property Value string A string containing the vanity invite code for this guild; null if none is set. VerificationLevel Gets the level of requirements a user must fulfill before being allowed to post messages in this guild. public VerificationLevel? VerificationLevel { get; } Property Value VerificationLevel? The level of requirements. null if none is was returned. WelcomeScreen Gets the Welcome Screen of this guild public WelcomeScreen WelcomeScreen { get; } Property Value WelcomeScreen The welcome screen of this guild. null if none is set."
  },
  "api/Discord.PermValue.html": {
    "href": "api/Discord.PermValue.html",
    "title": "Enum PermValue | Discord.Net Documentation",
    "keywords": "Enum PermValue Namespace Discord Assembly Discord.Net.Core.dll Specifies the permission value. public enum PermValue Fields Allow = 0 Allows this permission. Deny = 1 Denies this permission. Inherit = 2 Inherits the permission settings."
  },
  "api/Discord.PermissionTarget.html": {
    "href": "api/Discord.PermissionTarget.html",
    "title": "Enum PermissionTarget | Discord.Net Documentation",
    "keywords": "Enum PermissionTarget Namespace Discord Assembly Discord.Net.Core.dll Specifies the target of the permission. public enum PermissionTarget Fields Role = 0 The target of the permission is a role. User = 1 The target of the permission is a user."
  },
  "api/Discord.PremiumTier.html": {
    "href": "api/Discord.PremiumTier.html",
    "title": "Enum PremiumTier | Discord.Net Documentation",
    "keywords": "Enum PremiumTier Namespace Discord Assembly Discord.Net.Core.dll public enum PremiumTier Fields None = 0 Used for guilds that have no guild boosts. Tier1 = 1 Used for guilds that have Tier 1 guild boosts. Tier2 = 2 Used for guilds that have Tier 2 guild boosts. Tier3 = 3 Used for guilds that have Tier 3 guild boosts."
  },
  "api/Discord.PremiumType.html": {
    "href": "api/Discord.PremiumType.html",
    "title": "Enum PremiumType | Discord.Net Documentation",
    "keywords": "Enum PremiumType Namespace Discord Assembly Discord.Net.Core.dll Specifies the type of subscription a user is subscribed to. public enum PremiumType Fields Nitro = 2 Nitro subscription. Includes app perks as well as the games subscription service. NitroBasic = 3 Nitro Basic subscription. Includes app perks like video backgrounds, sending bigger files. NitroClassic = 1 Nitro Classic subscription. Includes app perks like animated emojis and avatars, but not games. None = 0 No subscription."
  },
  "api/Discord.ReactionMetadata.html": {
    "href": "api/Discord.ReactionMetadata.html",
    "title": "Struct ReactionMetadata | Discord.Net Documentation",
    "keywords": "Struct ReactionMetadata Namespace Discord Assembly Discord.Net.Core.dll A metadata containing reaction information. public struct ReactionMetadata Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties BurstColors Gets colors used for super reaction. public readonly IReadOnlyCollection<Color> BurstColors { get; } Property Value IReadOnlyCollection<Color> BurstCount Gets the number of burst reactions added to this message. public readonly int BurstCount { get; } Property Value int IsMe Gets a value that indicates whether the current user has reacted to this. public readonly bool IsMe { get; } Property Value bool true if the user has reacted to the message; otherwise false. NormalCount Gets the number of normal reactions added to this message. public readonly int NormalCount { get; } Property Value int ReactionCount Gets the number of reactions. public readonly int ReactionCount { get; } Property Value int An int representing the number of this reactions that has been added to this message."
  },
  "api/Discord.ReactionType.html": {
    "href": "api/Discord.ReactionType.html",
    "title": "Enum ReactionType | Discord.Net Documentation",
    "keywords": "Enum ReactionType Namespace Discord Assembly Discord.Net.Core.dll public enum ReactionType Fields Burst = 1 The reaction is a super reaction. Normal = 0 The reaction is a normal reaction."
  },
  "api/Discord.ReorderChannelProperties.html": {
    "href": "api/Discord.ReorderChannelProperties.html",
    "title": "Class ReorderChannelProperties | Discord.Net Documentation",
    "keywords": "Class ReorderChannelProperties Namespace Discord Assembly Discord.Net.Core.dll Provides properties that are used to reorder an IGuildChannel. public class ReorderChannelProperties Inheritance object ReorderChannelProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReorderChannelProperties(ulong, int) Initializes a new instance of the ReorderChannelProperties class used to reorder a channel. public ReorderChannelProperties(ulong id, int position) Parameters id ulong Sets the ID of the channel to apply this position to. position int Sets the new zero-based position of this channel. Properties Id Gets the ID of the channel to apply this position to. public ulong Id { get; } Property Value ulong A ulong representing the snowflake identifier of this channel. Position Gets the new zero-based position of this channel. public int Position { get; } Property Value int An int representing the new position of this channel."
  },
  "api/Discord.ReorderRoleProperties.html": {
    "href": "api/Discord.ReorderRoleProperties.html",
    "title": "Class ReorderRoleProperties | Discord.Net Documentation",
    "keywords": "Class ReorderRoleProperties Namespace Discord Assembly Discord.Net.Core.dll Properties that are used to reorder an IRole. public class ReorderRoleProperties Inheritance object ReorderRoleProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReorderRoleProperties(ulong, int) Initializes a ReorderRoleProperties with the given role ID and position. public ReorderRoleProperties(ulong id, int pos) Parameters id ulong The ID of the role to be edited. pos int The new zero-based position of the role. Properties Id Gets the identifier of the role to be edited. public ulong Id { get; } Property Value ulong A ulong representing the snowflake identifier of the role to be modified. Position Gets the new zero-based position of the role. public int Position { get; } Property Value int An int representing the new zero-based position of the role."
  },
  "api/Discord.RequestOptions.html": {
    "href": "api/Discord.RequestOptions.html",
    "title": "Class RequestOptions | Discord.Net Documentation",
    "keywords": "Class RequestOptions Namespace Discord Assembly Discord.Net.Core.dll Represents options that should be used when sending a request. public class RequestOptions Inheritance object RequestOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RequestOptions() Initializes a new RequestOptions class with the default request timeout set in DiscordConfig. public RequestOptions() Properties AuditLogReason Gets or sets the reason for this action in the guild's audit log. public string AuditLogReason { get; set; } Property Value string Remarks Gets or sets the reason that will be written to the guild's audit log if applicable. This may not apply to all actions. CancelToken Gets or sets the cancellation token for this request. public CancellationToken CancelToken { get; set; } Property Value CancellationToken A CancellationToken for this request. Default Creates a new RequestOptions class with its default settings. public static RequestOptions Default { get; } Property Value RequestOptions HeaderOnly public bool HeaderOnly { get; } Property Value bool RatelimitCallback Gets or sets the callback to execute regarding ratelimits for this request. public Func<IRateLimitInfo, Task> RatelimitCallback { get; set; } Property Value Func<IRateLimitInfo, Task> RetryMode Gets or sets the retry behavior when the request fails. public RetryMode? RetryMode { get; set; } Property Value RetryMode? Timeout Gets or sets the maximum time to wait for this request to complete. public int? Timeout { get; set; } Property Value int? A int in milliseconds for when the request times out. Remarks Gets or set the max time, in milliseconds, to wait for this request to complete. If null, a request will not time out. If a rate limit has been triggered for this request's bucket and will not be unpaused in time, this request will fail immediately. UseSystemClock Gets or sets whether or not this request should use the system clock for rate-limiting. Defaults to true. public bool? UseSystemClock { get; set; } Property Value bool? Remarks This property can also be set in DiscordConfig. On a per-request basis, the system clock should only be disabled when millisecond precision is especially important, and the hosting system is known to have a desynced clock. Methods Clone() public RequestOptions Clone() Returns RequestOptions"
  },
  "api/Discord.Rest.AutoModBlockedMessageAuditLogData.html": {
    "href": "api/Discord.Rest.AutoModBlockedMessageAuditLogData.html",
    "title": "Class AutoModBlockedMessageAuditLogData | Discord.Net Documentation",
    "keywords": "Class AutoModBlockedMessageAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to message getting blocked by automod. public class AutoModBlockedMessageAuditLogData : IAuditLogData Inheritance object AutoModBlockedMessageAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AutoModRuleName Gets the name of the auto moderation rule that got triggered. public string AutoModRuleName { get; set; } Property Value string AutoModRuleTriggerType Gets the trigger type of the auto moderation rule that got triggered. public AutoModTriggerType AutoModRuleTriggerType { get; set; } Property Value AutoModTriggerType ChannelId Gets the channel the message was sent in. public ulong ChannelId { get; set; } Property Value ulong"
  },
  "api/Discord.Rest.AutoModFlaggedMessageAuditLogData.html": {
    "href": "api/Discord.Rest.AutoModFlaggedMessageAuditLogData.html",
    "title": "Class AutoModFlaggedMessageAuditLogData | Discord.Net Documentation",
    "keywords": "Class AutoModFlaggedMessageAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to message getting flagged by automod. public class AutoModFlaggedMessageAuditLogData : IAuditLogData Inheritance object AutoModFlaggedMessageAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AutoModRuleName Gets the name of the auto moderation rule that got triggered. public string AutoModRuleName { get; set; } Property Value string AutoModRuleTriggerType Gets the trigger type of the auto moderation rule that got triggered. public AutoModTriggerType AutoModRuleTriggerType { get; set; } Property Value AutoModTriggerType ChannelId Gets the channel the message was sent in. public ulong ChannelId { get; set; } Property Value ulong"
  },
  "api/Discord.Rest.AutoModRuleCreatedAuditLogData.html": {
    "href": "api/Discord.Rest.AutoModRuleCreatedAuditLogData.html",
    "title": "Class AutoModRuleCreatedAuditLogData | Discord.Net Documentation",
    "keywords": "Class AutoModRuleCreatedAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to an auto moderation rule creation. public class AutoModRuleCreatedAuditLogData : IAuditLogData Inheritance object AutoModRuleCreatedAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data Gets the auto moderation rule information after the changes. public AutoModRuleInfo Data { get; } Property Value AutoModRuleInfo"
  },
  "api/Discord.Rest.AutoModRuleDeletedAuditLogData.html": {
    "href": "api/Discord.Rest.AutoModRuleDeletedAuditLogData.html",
    "title": "Class AutoModRuleDeletedAuditLogData | Discord.Net Documentation",
    "keywords": "Class AutoModRuleDeletedAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to an auto moderation rule removal. public class AutoModRuleDeletedAuditLogData : IAuditLogData Inheritance object AutoModRuleDeletedAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data Gets the auto moderation rule information before the changes. public AutoModRuleInfo Data { get; } Property Value AutoModRuleInfo"
  },
  "api/Discord.Rest.AutoModRuleInfo.html": {
    "href": "api/Discord.Rest.AutoModRuleInfo.html",
    "title": "Class AutoModRuleInfo | Discord.Net Documentation",
    "keywords": "Class AutoModRuleInfo Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents information for an auto moderation rule. public class AutoModRuleInfo Inheritance object AutoModRuleInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Actions Gets a collection of actions that will be preformed if a user breaks this rule. public IReadOnlyCollection<AutoModRuleAction> Actions { get; } Property Value IReadOnlyCollection<AutoModRuleAction> Remarks null if this property is not mentioned in this entry. AllowList Gets the allow list patterns for this rule. Empty if the rule has no allowed terms. public IReadOnlyCollection<string> AllowList { get; } Property Value IReadOnlyCollection<string> Remarks This collection will be empty if TriggerType is not Keyword. Enabled Gets whether or not this rule is enabled. public bool? Enabled { get; set; } Property Value bool? Remarks null if this property is not mentioned in this entry. EventType Gets the event type on which this rule is triggered. public AutoModEventType? EventType { get; set; } Property Value AutoModEventType? Remarks null if this property is not mentioned in this entry. ExemptChannels Gets a collection of channel ids that are exempt from this rule. Empty if the rule has no exempt channels. public IReadOnlyCollection<ulong> ExemptChannels { get; set; } Property Value IReadOnlyCollection<ulong> Remarks null if this property is not mentioned in this entry. ExemptRoles Gets a collection of role ids that are exempt from this rule. Empty if the rule has no exempt roles. public IReadOnlyCollection<ulong> ExemptRoles { get; set; } Property Value IReadOnlyCollection<ulong> Remarks null if this property is not mentioned in this entry. KeywordFilter Gets the keyword filter for this rule. public IReadOnlyCollection<string> KeywordFilter { get; } Property Value IReadOnlyCollection<string> Remarks This collection will be empty if TriggerType is not Keyword. MentionTotalLimit Gets the total mention limit for this rule. public int? MentionTotalLimit { get; } Property Value int? Remarks This property will be null if TriggerType is not MentionSpam. Name Get the name of this rule. public string Name { get; set; } Property Value string Remarks null if this property is not mentioned in this entry. Presets Gets the preset keyword types for this rule. Empty if the rule has no presets. public IReadOnlyCollection<KeywordPresetTypes> Presets { get; } Property Value IReadOnlyCollection<KeywordPresetTypes> Remarks This collection will be empty if TriggerType is not KeywordPreset. RegexPatterns Gets regex patterns for this rule. Empty if the rule has no regexes. public IReadOnlyCollection<string> RegexPatterns { get; } Property Value IReadOnlyCollection<string> Remarks This collection will be empty if TriggerType is not Keyword. TriggerType Gets the trigger type on which this rule executes. public AutoModTriggerType? TriggerType { get; set; } Property Value AutoModTriggerType? Remarks null if this property is not mentioned in this entry."
  },
  "api/Discord.Rest.AutoModRuleUpdatedAuditLogData.html": {
    "href": "api/Discord.Rest.AutoModRuleUpdatedAuditLogData.html",
    "title": "Class AutoModRuleUpdatedAuditLogData | Discord.Net Documentation",
    "keywords": "Class AutoModRuleUpdatedAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to an auto moderation rule update. public class AutoModRuleUpdatedAuditLogData : IAuditLogData Inheritance object AutoModRuleUpdatedAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After Gets the auto moderation rule information after the changes. public AutoModRuleInfo After { get; } Property Value AutoModRuleInfo Before Gets the auto moderation rule information before the changes. public AutoModRuleInfo Before { get; } Property Value AutoModRuleInfo Rule Gets the auto moderation rule the changes correspond to. public IAutoModRule Rule { get; } Property Value IAutoModRule"
  },
  "api/Discord.Rest.AutoModTimeoutUserAuditLogData.html": {
    "href": "api/Discord.Rest.AutoModTimeoutUserAuditLogData.html",
    "title": "Class AutoModTimeoutUserAuditLogData | Discord.Net Documentation",
    "keywords": "Class AutoModTimeoutUserAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to user getting in timeout by automod. public class AutoModTimeoutUserAuditLogData : IAuditLogData Inheritance object AutoModTimeoutUserAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AutoModRuleName Gets the name of the auto moderation rule that got triggered. public string AutoModRuleName { get; set; } Property Value string AutoModRuleTriggerType Gets the trigger type of the auto moderation rule that got triggered. public AutoModTriggerType AutoModRuleTriggerType { get; set; } Property Value AutoModTriggerType ChannelId Gets the channel the message was sent in. public ulong ChannelId { get; set; } Property Value ulong"
  },
  "api/Discord.Rest.BadSignatureException.html": {
    "href": "api/Discord.Rest.BadSignatureException.html",
    "title": "Class BadSignatureException | Discord.Net Documentation",
    "keywords": "Class BadSignatureException Namespace Discord.Rest Assembly Discord.Net.Rest.dll public class BadSignatureException : Exception, ISerializable Inheritance object Exception BadSignatureException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object)"
  },
  "api/Discord.Rest.BanAuditLogData.html": {
    "href": "api/Discord.Rest.BanAuditLogData.html",
    "title": "Class BanAuditLogData | Discord.Net Documentation",
    "keywords": "Class BanAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a ban. public class BanAuditLogData : IAuditLogData Inheritance object BanAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Target Gets the user that was banned. public IUser Target { get; } Property Value IUser A user object representing the banned user. Remarks Will be null if the user is a 'Deleted User#....' because Discord does send user data for deleted users."
  },
  "api/Discord.Rest.BaseDiscordClient.html": {
    "href": "api/Discord.Rest.BaseDiscordClient.html",
    "title": "Class BaseDiscordClient | Discord.Net Documentation",
    "keywords": "Class BaseDiscordClient Namespace Discord.Rest Assembly Discord.Net.Rest.dll public abstract class BaseDiscordClient : IDiscordClient, IDisposable, IAsyncDisposable Inheritance object BaseDiscordClient Implements IDiscordClient IDisposable IAsyncDisposable Derived DiscordRestClient BaseSocketClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DiscordClientExtensions.GetDMChannelAsync(IDiscordClient, ulong) DiscordClientExtensions.GetDMChannelsAsync(IDiscordClient) DiscordClientExtensions.GetGroupChannelAsync(IDiscordClient, ulong) DiscordClientExtensions.GetGroupChannelsAsync(IDiscordClient) DiscordClientExtensions.GetOptimalVoiceRegionAsync(IDiscordClient) DiscordClientExtensions.GetPrivateChannelAsync(IDiscordClient, ulong) ClientExtensions.AddGuildUserAsync(BaseDiscordClient, ulong, ulong, string, Action<AddGuildUserProperties>, RequestOptions) Properties CurrentUser Gets the logged-in user. public ISelfUser CurrentUser { get; protected set; } Property Value ISelfUser LoginState Gets the login state of the client. public LoginState LoginState { get; } Property Value LoginState TokenType Gets the token type of the logged-in user. public TokenType TokenType { get; } Property Value TokenType Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. public ValueTask DisposeAsync() Returns ValueTask A task that represents the asynchronous dispose operation. GetBotGatewayAsync(RequestOptions) Gets the gateway information related to the bot. public Task<BotGateway> GetBotGatewayAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<BotGateway> A task that represents the asynchronous get operation. The task result contains a BotGateway that represents the gateway information related to the bot. GetRecommendedShardCountAsync(RequestOptions) Gets the recommended shard count as suggested by Discord. public Task<int> GetRecommendedShardCountAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<int> A task that represents the asynchronous get operation. The task result contains an int that represents the number of shards that should be used with this account. LoginAsync(TokenType, string, bool) public Task LoginAsync(TokenType tokenType, string token, bool validateToken = true) Parameters tokenType TokenType token string validateToken bool Returns Task LogoutAsync() public Task LogoutAsync() Returns Task Events Log public event Func<LogMessage, Task> Log Event Type Func<LogMessage, Task> LoggedIn public event Func<Task> LoggedIn Event Type Func<Task> LoggedOut public event Func<Task> LoggedOut Event Type Func<Task>"
  },
  "api/Discord.Rest.BotAddAuditLogData.html": {
    "href": "api/Discord.Rest.BotAddAuditLogData.html",
    "title": "Class BotAddAuditLogData | Discord.Net Documentation",
    "keywords": "Class BotAddAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a adding a bot to a guild. public class BotAddAuditLogData : IAuditLogData Inheritance object BotAddAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Target Gets the bot that was added. public IUser Target { get; } Property Value IUser A user object representing the bot. Remarks Will be null if the bot is a 'Deleted User#....' because Discord does send user data for deleted users."
  },
  "api/Discord.Rest.ChannelCreateAuditLogData.html": {
    "href": "api/Discord.Rest.ChannelCreateAuditLogData.html",
    "title": "Class ChannelCreateAuditLogData | Discord.Net Documentation",
    "keywords": "Class ChannelCreateAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a channel creation. public class ChannelCreateAuditLogData : IAuditLogData Inheritance object ChannelCreateAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AutoArchiveDuration Gets the thread archive duration that was set in the created channel. public ThreadArchiveDuration? AutoArchiveDuration { get; } Property Value ThreadArchiveDuration? AvailableTags Gets tags available in the created forum channel. public IReadOnlyCollection<ForumTag> AvailableTags { get; } Property Value IReadOnlyCollection<ForumTag> Bitrate Gets the bit-rate that the clients in the created voice channel are requested to use. public int? Bitrate { get; } Property Value int? An int representing the bit-rate (bps) that the created voice channel defines and requests the client(s) to use. null if this is not mentioned in this entry. ChannelId Gets the snowflake ID of the created channel. public ulong ChannelId { get; } Property Value ulong A ulong representing the snowflake identifier for the created channel. ChannelName Gets the name of the created channel. public string ChannelName { get; } Property Value string A string containing the name of the created channel. ChannelType Gets the type of the created channel. public ChannelType ChannelType { get; } Property Value ChannelType The type of channel that was created. DefaultAutoArchiveDuration Gets the default thread archive duration that was set in the created channel. public ThreadArchiveDuration? DefaultAutoArchiveDuration { get; } Property Value ThreadArchiveDuration? DefaultReactionEmoji Gets the default reaction added to posts in the created forum channel. public IEmote DefaultReactionEmoji { get; } Property Value IEmote DefaultSlowModeInterval Gets the default slow mode interval that will be set in child threads in the channel. public int? DefaultSlowModeInterval { get; } Property Value int? Flags Gets channel flags configured for the created channel. public ChannelFlags? Flags { get; } Property Value ChannelFlags? IsNsfw Gets the value that indicates whether the created channel is NSFW. public bool? IsNsfw { get; } Property Value bool? true if the created channel has the NSFW flag enabled; otherwise false. null if this is not mentioned in this entry. Overwrites Gets a collection of permission overwrites that was assigned to the created channel. public IReadOnlyCollection<Overwrite> Overwrites { get; } Property Value IReadOnlyCollection<Overwrite> A collection of permission Overwrite, containing the permission overwrites that were assigned to the created channel. RtcRegion Gets the region configured in the created voice channel. public string RtcRegion { get; } Property Value string SlowModeInterval Gets the current slow-mode delay of the created channel. public int? SlowModeInterval { get; } Property Value int? An int representing the time in seconds required before the user can send another message; 0 if disabled. null if this is not mentioned in this entry. Topic Gets the topic that was set in the created channel. public string Topic { get; } Property Value string UserLimit Gets the user limit configured in the created voice channel. public int? UserLimit { get; } Property Value int? VideoQualityMode Gets the video quality mode configured in the created voice channel. public VideoQualityMode? VideoQualityMode { get; } Property Value VideoQualityMode?"
  },
  "api/Discord.Rest.ChannelDeleteAuditLogData.html": {
    "href": "api/Discord.Rest.ChannelDeleteAuditLogData.html",
    "title": "Class ChannelDeleteAuditLogData | Discord.Net Documentation",
    "keywords": "Class ChannelDeleteAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a channel deletion. public class ChannelDeleteAuditLogData : IAuditLogData Inheritance object ChannelDeleteAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AutoArchiveDuration Gets the thread archive duration that was configured for the created channel. public ThreadArchiveDuration? AutoArchiveDuration { get; } Property Value ThreadArchiveDuration? Bitrate Gets the bit-rate of this channel if applicable. public int? Bitrate { get; } Property Value int? An int representing the bit-rate set of the voice channel. null if this is not mentioned in this entry. ChannelId Gets the snowflake ID of the deleted channel. public ulong ChannelId { get; } Property Value ulong A ulong representing the snowflake identifier for the deleted channel. ChannelName Gets the name of the deleted channel. public string ChannelName { get; } Property Value string A string containing the name of the deleted channel. ChannelType Gets the type of the deleted channel. public ChannelType ChannelType { get; } Property Value ChannelType The type of channel that was deleted. DefaultArchiveDuration Gets the default auto-archive duration for client-created threads in this channel. public ThreadArchiveDuration? DefaultArchiveDuration { get; } Property Value ThreadArchiveDuration? The default auto-archive duration for thread creation in this channel. Remarks The value of this property does not affect API thread creation, it will not respect this value. DefaultReactionEmoji Gets the emoji to show in the add reaction button on a thread in a forum channel public IEmote DefaultReactionEmoji { get; } Property Value IEmote Remarks If the emoji is Emote only the Id will be populated. Use GetEmoteAsync(ulong, RequestOptions) to get the emoji. DefaultSlowModeInterval Gets the default slow mode interval that was configured for the channel. public int? DefaultSlowModeInterval { get; } Property Value int? Flags Gets channel flags configured for the created channel. public ChannelFlags? Flags { get; } Property Value ChannelFlags? ForumTags Gets a collection of tags inside of this forum channel. public IReadOnlyCollection<ForumTag> ForumTags { get; } Property Value IReadOnlyCollection<ForumTag> Remarks null if the value was not specified in this entry.. IsNsfw Gets the value that indicates whether the deleted channel was NSFW. public bool? IsNsfw { get; } Property Value bool? true if this channel had the NSFW flag enabled; otherwise false. null if this is not mentioned in this entry. Overwrites Gets a collection of permission overwrites that was assigned to the deleted channel. public IReadOnlyCollection<Overwrite> Overwrites { get; } Property Value IReadOnlyCollection<Overwrite> A collection of permission Overwrite. RtcRegion Gets the region configured in the created voice channel. public string RtcRegion { get; } Property Value string SlowModeInterval Gets the slow-mode delay of the deleted channel. public int? SlowModeInterval { get; } Property Value int? An int representing the time in seconds required before the user can send another message; 0 if disabled. null if this is not mentioned in this entry. Topic Gets the current topic for this text channel. public string Topic { get; } Property Value string A string representing the topic set in the channel; null if none is set. Remarks null if the value was not specified in this entry.. UserLimit Gets the user limit configured in the created voice channel. public int? UserLimit { get; } Property Value int? VideoQualityMode Gets the video quality mode configured in the created voice channel. public VideoQualityMode? VideoQualityMode { get; } Property Value VideoQualityMode?"
  },
  "api/Discord.Rest.ChannelInfo.html": {
    "href": "api/Discord.Rest.ChannelInfo.html",
    "title": "Struct ChannelInfo | Discord.Net Documentation",
    "keywords": "Struct ChannelInfo Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents information for a channel. public struct ChannelInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties AutoArchiveDuration Gets the thread archive duration that was set in the created channel. public readonly ThreadArchiveDuration? AutoArchiveDuration { get; } Property Value ThreadArchiveDuration? Bitrate Gets the bit-rate of this channel if applicable. public readonly int? Bitrate { get; } Property Value int? An int representing the bit-rate set for the voice channel; null if this is not mentioned in this entry. ChannelType Gets the type of this channel. public readonly ChannelType? ChannelType { get; } Property Value ChannelType? The channel type of this channel; null if not applicable. DefaultArchiveDuration Gets the default auto-archive duration for client-created threads in this channel. public readonly ThreadArchiveDuration? DefaultArchiveDuration { get; } Property Value ThreadArchiveDuration? The default auto-archive duration for thread creation in this channel. Remarks The value of this property does not affect API thread creation, it will not respect this value. DefaultReactionEmoji Gets the emoji to show in the add reaction button on a thread in a forum channel public readonly IEmote DefaultReactionEmoji { get; } Property Value IEmote Remarks If the emoji is Emote only the Id will be populated. Use GetEmoteAsync(ulong, RequestOptions) to get the emoji. DefaultSlowModeInterval Gets the default slow mode interval that will be set in child threads in the channel. public readonly int? DefaultSlowModeInterval { get; } Property Value int? Flags Gets channel flags configured for the created channel. public readonly ChannelFlags? Flags { get; } Property Value ChannelFlags? ForumTags Gets a collection of tags inside of this forum channel. public readonly IReadOnlyCollection<ForumTag> ForumTags { get; } Property Value IReadOnlyCollection<ForumTag> Remarks null if the value was not updated in this entry. IsNsfw Gets the value that indicates whether this channel is NSFW. public readonly bool? IsNsfw { get; } Property Value bool? true if this channel has the NSFW flag enabled; otherwise false. null if this is not mentioned in this entry. Name Gets the name of this channel. public readonly string Name { get; } Property Value string A string containing the name of this channel. RtcRegion Gets the region configured in the created voice channel. public readonly string RtcRegion { get; } Property Value string SlowModeInterval Gets the current slow-mode delay of this channel. public readonly int? SlowModeInterval { get; } Property Value int? An int representing the time in seconds required before the user can send another message; 0 if disabled. null if this is not mentioned in this entry. Topic Gets the topic of this channel. public readonly string Topic { get; } Property Value string A string containing the topic of this channel, if any. UserLimit Gets the user limit configured in the created voice channel. public readonly int? UserLimit { get; } Property Value int? VideoQualityMode Gets the video quality mode configured in the created voice channel. public readonly VideoQualityMode? VideoQualityMode { get; } Property Value VideoQualityMode?"
  },
  "api/Discord.Rest.ChannelUpdateAuditLogData.html": {
    "href": "api/Discord.Rest.ChannelUpdateAuditLogData.html",
    "title": "Class ChannelUpdateAuditLogData | Discord.Net Documentation",
    "keywords": "Class ChannelUpdateAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a channel update. public class ChannelUpdateAuditLogData : IAuditLogData Inheritance object ChannelUpdateAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After Gets the channel information after the changes. public ChannelInfo After { get; } Property Value ChannelInfo An information object containing the channel information after the changes were made. Before Gets the channel information before the changes. public ChannelInfo Before { get; } Property Value ChannelInfo An information object containing the original channel information before the changes were made. ChannelId Gets the snowflake ID of the updated channel. public ulong ChannelId { get; } Property Value ulong A ulong representing the snowflake identifier for the updated channel."
  },
  "api/Discord.Rest.ClientExtensions.html": {
    "href": "api/Discord.Rest.ClientExtensions.html",
    "title": "Class ClientExtensions | Discord.Net Documentation",
    "keywords": "Class ClientExtensions Namespace Discord.Rest Assembly Discord.Net.Rest.dll public static class ClientExtensions Inheritance object ClientExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddGuildUserAsync(BaseDiscordClient, ulong, ulong, string, Action<AddGuildUserProperties>, RequestOptions) Adds a user to the specified guild. public static Task AddGuildUserAsync(this BaseDiscordClient client, ulong guildId, ulong userId, string accessToken, Action<AddGuildUserProperties> func = null, RequestOptions options = null) Parameters client BaseDiscordClient The Discord client object. guildId ulong The snowflake identifier of the guild. userId ulong The snowflake identifier of the user. accessToken string The OAuth2 access token for the user, requested with the guilds.join scope. func Action<AddGuildUserProperties> The delegate containing the properties to be applied to the user upon being added to the guild. options RequestOptions The options to be used when sending the request. Returns Task Remarks This method requires you have an OAuth2 access token for the user, requested with the guilds.join scope, and that the bot have the MANAGE_INVITES permission in the guild."
  },
  "api/Discord.Rest.CommandPermissionUpdateAuditLogData.html": {
    "href": "api/Discord.Rest.CommandPermissionUpdateAuditLogData.html",
    "title": "Class CommandPermissionUpdateAuditLogData | Discord.Net Documentation",
    "keywords": "Class CommandPermissionUpdateAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to an application command permission update. public class CommandPermissionUpdateAuditLogData : IAuditLogData Inheritance object CommandPermissionUpdateAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After Gets values of the permissions after the change if available. public IReadOnlyCollection<ApplicationCommandPermission> After { get; } Property Value IReadOnlyCollection<ApplicationCommandPermission> ApplicationCommand Gets the application command which permissions were updated. public IApplicationCommand ApplicationCommand { get; } Property Value IApplicationCommand ApplicationId Gets the ID of the app whose permissions were targeted. public ulong ApplicationId { get; set; } Property Value ulong Before Gets values of the permissions before the change if available. public IReadOnlyCollection<ApplicationCommandPermission> Before { get; } Property Value IReadOnlyCollection<ApplicationCommandPermission>"
  },
  "api/Discord.Rest.CustomSticker.html": {
    "href": "api/Discord.Rest.CustomSticker.html",
    "title": "Class CustomSticker | Discord.Net Documentation",
    "keywords": "Class CustomSticker Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a Rest-based custom sticker within a guild. public class CustomSticker : Sticker, IEntity<ulong>, ICustomSticker, ISticker, IStickerItem Inheritance object RestEntity<ulong> Sticker CustomSticker Implements IEntity<ulong> ICustomSticker ISticker IStickerItem Inherited Members Sticker.PackId Sticker.Name Sticker.Description Sticker.Tags Sticker.Type Sticker.IsAvailable Sticker.SortOrder Sticker.Format Sticker.GetStickerUrl() RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AuthorId Gets the users id who uploaded the sticker. public ulong? AuthorId { get; } Property Value ulong? Remarks In order to get the author id, the bot needs the MANAGE_EMOJIS_AND_STICKERS permission. Guild Gets the guild that this custom sticker is in. public RestGuild Guild { get; } Property Value RestGuild Remarks Note: This property can be null if the sticker wasn't fetched from a guild. Methods DeleteAsync(RequestOptions) Deletes the current sticker. public Task DeleteAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous deletion operation. ModifyAsync(Action<StickerProperties>, RequestOptions) Modifies this sticker. public Task ModifyAsync(Action<StickerProperties> func, RequestOptions options = null) Parameters func Action<StickerProperties> A delegate containing the properties to modify the sticker with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Examples The following example replaces the name of the sticker with kekw. await sticker.ModifyAsync(x => x.Name = \"kekw\"); Remarks This method modifies this sticker with the specified properties. To see an example of this method and what properties are available, please refer to StickerProperties. The bot needs the MANAGE_EMOJIS_AND_STICKERS permission within the guild in order to modify stickers."
  },
  "api/Discord.Rest.DiscordRestClient.html": {
    "href": "api/Discord.Rest.DiscordRestClient.html",
    "title": "Class DiscordRestClient | Discord.Net Documentation",
    "keywords": "Class DiscordRestClient Namespace Discord.Rest Assembly Discord.Net.Rest.dll Provides a client to send REST-based requests to Discord. public class DiscordRestClient : BaseDiscordClient, IDiscordClient, IDisposable, IAsyncDisposable Inheritance object BaseDiscordClient DiscordRestClient Implements IDiscordClient IDisposable IAsyncDisposable Derived DiscordSocketRestClient Inherited Members BaseDiscordClient.Log BaseDiscordClient.LoggedIn BaseDiscordClient.LoggedOut BaseDiscordClient.LoginState BaseDiscordClient.TokenType BaseDiscordClient.LoginAsync(TokenType, string, bool) BaseDiscordClient.LogoutAsync() BaseDiscordClient.Dispose() BaseDiscordClient.DisposeAsync() BaseDiscordClient.GetRecommendedShardCountAsync(RequestOptions) BaseDiscordClient.GetBotGatewayAsync(RequestOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DiscordClientExtensions.GetDMChannelAsync(IDiscordClient, ulong) DiscordClientExtensions.GetDMChannelsAsync(IDiscordClient) DiscordClientExtensions.GetGroupChannelAsync(IDiscordClient, ulong) DiscordClientExtensions.GetGroupChannelsAsync(IDiscordClient) DiscordClientExtensions.GetOptimalVoiceRegionAsync(IDiscordClient) DiscordClientExtensions.GetPrivateChannelAsync(IDiscordClient, ulong) ClientExtensions.AddGuildUserAsync(BaseDiscordClient, ulong, ulong, string, Action<AddGuildUserProperties>, RequestOptions) Constructors DiscordRestClient() public DiscordRestClient() DiscordRestClient(DiscordRestConfig) Initializes a new DiscordRestClient with the provided configuration. public DiscordRestClient(DiscordRestConfig config) Parameters config DiscordRestConfig The configuration to be used with the client. Properties CurrentUser Gets the logged-in user. public RestSelfUser CurrentUser { get; } Property Value RestSelfUser Methods AddReactionAsync(ulong, ulong, IEmote, RequestOptions) public Task AddReactionAsync(ulong channelId, ulong messageId, IEmote emote, RequestOptions options = null) Parameters channelId ulong messageId ulong emote IEmote options RequestOptions Returns Task AddRoleAsync(ulong, ulong, ulong) public Task AddRoleAsync(ulong guildId, ulong userId, ulong roleId) Parameters guildId ulong userId ulong roleId ulong Returns Task BatchEditGuildCommandPermissions(ulong, IDictionary<ulong, ApplicationCommandPermission[]>, RequestOptions) public Task<IReadOnlyCollection<GuildApplicationCommandPermission>> BatchEditGuildCommandPermissions(ulong guildId, IDictionary<ulong, ApplicationCommandPermission[]> permissions, RequestOptions options = null) Parameters guildId ulong permissions IDictionary<ulong, ApplicationCommandPermission[]> options RequestOptions Returns Task<IReadOnlyCollection<GuildApplicationCommandPermission>> BulkOverwriteGlobalCommands(ApplicationCommandProperties[], RequestOptions) public Task<IReadOnlyCollection<RestGlobalCommand>> BulkOverwriteGlobalCommands(ApplicationCommandProperties[] commandProperties, RequestOptions options = null) Parameters commandProperties ApplicationCommandProperties[] options RequestOptions Returns Task<IReadOnlyCollection<RestGlobalCommand>> BulkOverwriteGuildCommands(ApplicationCommandProperties[], ulong, RequestOptions) public Task<IReadOnlyCollection<RestGuildCommand>> BulkOverwriteGuildCommands(ApplicationCommandProperties[] commandProperties, ulong guildId, RequestOptions options = null) Parameters commandProperties ApplicationCommandProperties[] guildId ulong options RequestOptions Returns Task<IReadOnlyCollection<RestGuildCommand>> CreateGlobalCommand(ApplicationCommandProperties, RequestOptions) public Task<RestGlobalCommand> CreateGlobalCommand(ApplicationCommandProperties properties, RequestOptions options = null) Parameters properties ApplicationCommandProperties options RequestOptions Returns Task<RestGlobalCommand> CreateGuildAsync(string, IVoiceRegion, Stream, RequestOptions) public Task<RestGuild> CreateGuildAsync(string name, IVoiceRegion region, Stream jpegIcon = null, RequestOptions options = null) Parameters name string region IVoiceRegion jpegIcon Stream options RequestOptions Returns Task<RestGuild> CreateGuildCommand(ApplicationCommandProperties, ulong, RequestOptions) public Task<RestGuildCommand> CreateGuildCommand(ApplicationCommandProperties properties, ulong guildId, RequestOptions options = null) Parameters properties ApplicationCommandProperties guildId ulong options RequestOptions Returns Task<RestGuildCommand> CreateTestEntitlementAsync(ulong, ulong, SubscriptionOwnerType, RequestOptions) Creates a test entitlement to a given SKU for a given guild or user. public Task<RestEntitlement> CreateTestEntitlementAsync(ulong skuId, ulong ownerId, SubscriptionOwnerType ownerType, RequestOptions options = null) Parameters skuId ulong ownerId ulong ownerType SubscriptionOwnerType options RequestOptions Returns Task<RestEntitlement> DeleteAllGlobalCommandsAsync(RequestOptions) public Task DeleteAllGlobalCommandsAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task DeleteTestEntitlementAsync(ulong, RequestOptions) Deletes a currently-active test entitlement. public Task DeleteTestEntitlementAsync(ulong entitlementId, RequestOptions options = null) Parameters entitlementId ulong options RequestOptions Returns Task GetApplicationInfoAsync(RequestOptions) public Task<RestApplication> GetApplicationInfoAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task<RestApplication> GetChannelAsync(ulong, RequestOptions) public Task<RestChannel> GetChannelAsync(ulong id, RequestOptions options = null) Parameters id ulong options RequestOptions Returns Task<RestChannel> GetConnectionsAsync(RequestOptions) public Task<IReadOnlyCollection<RestConnection>> GetConnectionsAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task<IReadOnlyCollection<RestConnection>> GetCurrentBotInfoAsync(RequestOptions) public Task<RestApplication> GetCurrentBotInfoAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task<RestApplication> GetCurrentUserAsync(RequestOptions) public Task<RestSelfUser> GetCurrentUserAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task<RestSelfUser> GetCurrentUserGuildMemberAsync(ulong, RequestOptions) public Task<RestGuildUser> GetCurrentUserGuildMemberAsync(ulong guildId, RequestOptions options = null) Parameters guildId ulong options RequestOptions Returns Task<RestGuildUser> GetDMChannelsAsync(RequestOptions) public Task<IReadOnlyCollection<RestDMChannel>> GetDMChannelsAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task<IReadOnlyCollection<RestDMChannel>> GetEntitlementsAsync(int?, ulong?, ulong?, bool, ulong?, ulong?, ulong[], RequestOptions) Returns all entitlements for a given app, active and expired. public IAsyncEnumerable<IReadOnlyCollection<IEntitlement>> GetEntitlementsAsync(int? limit = 100, ulong? afterId = null, ulong? beforeId = null, bool excludeEnded = false, ulong? guildId = null, ulong? userId = null, ulong[] skuIds = null, RequestOptions options = null) Parameters limit int? afterId ulong? beforeId ulong? excludeEnded bool guildId ulong? userId ulong? skuIds ulong[] options RequestOptions Returns IAsyncEnumerable<IReadOnlyCollection<IEntitlement>> GetGlobalApplicationCommands(bool, string, RequestOptions) public Task<IReadOnlyCollection<RestGlobalCommand>> GetGlobalApplicationCommands(bool withLocalizations = false, string locale = null, RequestOptions options = null) Parameters withLocalizations bool locale string options RequestOptions Returns Task<IReadOnlyCollection<RestGlobalCommand>> GetGroupChannelsAsync(RequestOptions) public Task<IReadOnlyCollection<RestGroupChannel>> GetGroupChannelsAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task<IReadOnlyCollection<RestGroupChannel>> GetGuildApplicationCommands(ulong, bool, string, RequestOptions) public Task<IReadOnlyCollection<RestGuildCommand>> GetGuildApplicationCommands(ulong guildId, bool withLocalizations = false, string locale = null, RequestOptions options = null) Parameters guildId ulong withLocalizations bool locale string options RequestOptions Returns Task<IReadOnlyCollection<RestGuildCommand>> GetGuildAsync(ulong, RequestOptions) public Task<RestGuild> GetGuildAsync(ulong id, RequestOptions options = null) Parameters id ulong options RequestOptions Returns Task<RestGuild> GetGuildAsync(ulong, bool, RequestOptions) public Task<RestGuild> GetGuildAsync(ulong id, bool withCounts, RequestOptions options = null) Parameters id ulong withCounts bool options RequestOptions Returns Task<RestGuild> GetGuildSummariesAsync(RequestOptions) public IAsyncEnumerable<IReadOnlyCollection<RestUserGuild>> GetGuildSummariesAsync(RequestOptions options = null) Parameters options RequestOptions Returns IAsyncEnumerable<IReadOnlyCollection<RestUserGuild>> GetGuildSummariesAsync(ulong, int, RequestOptions) public IAsyncEnumerable<IReadOnlyCollection<RestUserGuild>> GetGuildSummariesAsync(ulong fromGuildId, int limit, RequestOptions options = null) Parameters fromGuildId ulong limit int options RequestOptions Returns IAsyncEnumerable<IReadOnlyCollection<RestUserGuild>> GetGuildUserAsync(ulong, ulong, RequestOptions) public Task<RestGuildUser> GetGuildUserAsync(ulong guildId, ulong id, RequestOptions options = null) Parameters guildId ulong id ulong options RequestOptions Returns Task<RestGuildUser> GetGuildWidgetAsync(ulong, RequestOptions) public Task<RestGuildWidget?> GetGuildWidgetAsync(ulong id, RequestOptions options = null) Parameters id ulong options RequestOptions Returns Task<RestGuildWidget?> GetGuildsAsync(RequestOptions) public Task<IReadOnlyCollection<RestGuild>> GetGuildsAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task<IReadOnlyCollection<RestGuild>> GetGuildsAsync(bool, RequestOptions) public Task<IReadOnlyCollection<RestGuild>> GetGuildsAsync(bool withCounts, RequestOptions options = null) Parameters withCounts bool options RequestOptions Returns Task<IReadOnlyCollection<RestGuild>> GetInviteAsync(string, RequestOptions, ulong?) public Task<RestInviteMetadata> GetInviteAsync(string inviteId, RequestOptions options = null, ulong? scheduledEventId = null) Parameters inviteId string options RequestOptions scheduledEventId ulong? Returns Task<RestInviteMetadata> GetPrivateChannelsAsync(RequestOptions) public Task<IReadOnlyCollection<IRestPrivateChannel>> GetPrivateChannelsAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task<IReadOnlyCollection<IRestPrivateChannel>> GetRoleConnectionMetadataRecordsAsync(RequestOptions) public Task<IReadOnlyCollection<RoleConnectionMetadata>> GetRoleConnectionMetadataRecordsAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task<IReadOnlyCollection<RoleConnectionMetadata>> GetSKUsAsync(RequestOptions) Returns all SKUs for a given application. public Task<IReadOnlyCollection<SKU>> GetSKUsAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task<IReadOnlyCollection<SKU>> GetUserApplicationRoleConnectionAsync(ulong, RequestOptions) public Task<RoleConnection> GetUserApplicationRoleConnectionAsync(ulong applicationId, RequestOptions options = null) Parameters applicationId ulong options RequestOptions Returns Task<RoleConnection> GetUserAsync(ulong, RequestOptions) public Task<RestUser> GetUserAsync(ulong id, RequestOptions options = null) Parameters id ulong options RequestOptions Returns Task<RestUser> GetVoiceRegionAsync(string, RequestOptions) public Task<RestVoiceRegion> GetVoiceRegionAsync(string id, RequestOptions options = null) Parameters id string options RequestOptions Returns Task<RestVoiceRegion> GetVoiceRegionsAsync(RequestOptions) public Task<IReadOnlyCollection<RestVoiceRegion>> GetVoiceRegionsAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task<IReadOnlyCollection<RestVoiceRegion>> GetWebhookAsync(ulong, RequestOptions) public Task<RestWebhook> GetWebhookAsync(ulong id, RequestOptions options = null) Parameters id ulong options RequestOptions Returns Task<RestWebhook> IsValidHttpInteraction(string, string, string, byte[]) public bool IsValidHttpInteraction(string publicKey, string signature, string timestamp, byte[] body) Parameters publicKey string signature string timestamp string body byte[] Returns bool IsValidHttpInteraction(string, string, string, string) public bool IsValidHttpInteraction(string publicKey, string signature, string timestamp, string body) Parameters publicKey string signature string timestamp string body string Returns bool ModifyCurrentBotApplicationAsync(Action<ModifyApplicationProperties>, RequestOptions) public Task<RestApplication> ModifyCurrentBotApplicationAsync(Action<ModifyApplicationProperties> args, RequestOptions options = null) Parameters args Action<ModifyApplicationProperties> options RequestOptions Returns Task<RestApplication> ModifyRoleConnectionMetadataRecordsAsync(ICollection<RoleConnectionMetadataProperties>, RequestOptions) public Task<IReadOnlyCollection<RoleConnectionMetadata>> ModifyRoleConnectionMetadataRecordsAsync(ICollection<RoleConnectionMetadataProperties> metadata, RequestOptions options = null) Parameters metadata ICollection<RoleConnectionMetadataProperties> options RequestOptions Returns Task<IReadOnlyCollection<RoleConnectionMetadata>> ModifyUserApplicationRoleConnectionAsync(ulong, RoleConnectionProperties, RequestOptions) public Task<RoleConnection> ModifyUserApplicationRoleConnectionAsync(ulong applicationId, RoleConnectionProperties roleConnection, RequestOptions options = null) Parameters applicationId ulong roleConnection RoleConnectionProperties options RequestOptions Returns Task<RoleConnection> ParseHttpInteractionAsync(string, string, string, byte[], Func<InteractionProperties, bool>) Creates a RestInteraction from a http message. public Task<RestInteraction> ParseHttpInteractionAsync(string publicKey, string signature, string timestamp, byte[] body, Func<InteractionProperties, bool> doApiCallOnCreation = null) Parameters publicKey string The public key of your application signature string The signature sent with the interaction. timestamp string The timestamp sent with the interaction. body byte[] The body of the http message. doApiCallOnCreation Func<InteractionProperties, bool> Returns Task<RestInteraction> A RestInteraction that represents the incoming http interaction. Exceptions BadSignatureException Thrown when the signature doesn't match the public key. ParseHttpInteractionAsync(string, string, string, string, Func<InteractionProperties, bool>) Creates a RestInteraction from a http message. public Task<RestInteraction> ParseHttpInteractionAsync(string publicKey, string signature, string timestamp, string body, Func<InteractionProperties, bool> doApiCallOnCreation = null) Parameters publicKey string The public key of your application signature string The signature sent with the interaction. timestamp string The timestamp sent with the interaction. body string The body of the http message. doApiCallOnCreation Func<InteractionProperties, bool> Returns Task<RestInteraction> A RestInteraction that represents the incoming http interaction. Exceptions BadSignatureException Thrown when the signature doesn't match the public key. RemoveAllReactionsAsync(ulong, ulong, RequestOptions) public Task RemoveAllReactionsAsync(ulong channelId, ulong messageId, RequestOptions options = null) Parameters channelId ulong messageId ulong options RequestOptions Returns Task RemoveAllReactionsForEmoteAsync(ulong, ulong, IEmote, RequestOptions) public Task RemoveAllReactionsForEmoteAsync(ulong channelId, ulong messageId, IEmote emote, RequestOptions options = null) Parameters channelId ulong messageId ulong emote IEmote options RequestOptions Returns Task RemoveReactionAsync(ulong, ulong, ulong, IEmote, RequestOptions) public Task RemoveReactionAsync(ulong channelId, ulong messageId, ulong userId, IEmote emote, RequestOptions options = null) Parameters channelId ulong messageId ulong userId ulong emote IEmote options RequestOptions Returns Task RemoveRoleAsync(ulong, ulong, ulong) public Task RemoveRoleAsync(ulong guildId, ulong userId, ulong roleId) Parameters guildId ulong userId ulong roleId ulong Returns Task"
  },
  "api/Discord.Rest.DiscordRestConfig.html": {
    "href": "api/Discord.Rest.DiscordRestConfig.html",
    "title": "Class DiscordRestConfig | Discord.Net Documentation",
    "keywords": "Class DiscordRestConfig Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a configuration class for DiscordRestClient. public class DiscordRestConfig : DiscordConfig Inheritance object DiscordConfig DiscordRestConfig Derived DiscordSocketConfig Inherited Members DiscordConfig.APIVersion DiscordConfig.VoiceAPIVersion DiscordConfig.Version DiscordConfig.UserAgent DiscordConfig.APIUrl DiscordConfig.CDNUrl DiscordConfig.InviteUrl DiscordConfig.DefaultRequestTimeout DiscordConfig.MaxMessageSize DiscordConfig.MaxMessagesPerBatch DiscordConfig.MaxUsersPerBatch DiscordConfig.MaxBansPerBatch DiscordConfig.MaxGuildEventUsersPerBatch DiscordConfig.MaxGuildsPerBatch DiscordConfig.MaxUserReactionsPerBatch DiscordConfig.MaxAuditLogEntriesPerBatch DiscordConfig.MaxStickersPerMessage DiscordConfig.MaxEmbedsPerMessage DiscordConfig.DefaultRetryMode DiscordConfig.DefaultRatelimitCallback DiscordConfig.LogLevel DiscordConfig.UseSystemClock DiscordConfig.UseInteractionSnowflakeDate DiscordConfig.FormatUsersInBidirectionalUnicode DiscordConfig.MaxThreadMembersPerBatch DiscordConfig.MaxApplicationTagLength DiscordConfig.MaxApplicationDescriptionLength DiscordConfig.MaxApplicationTagCount DiscordConfig.MaxVoiceChannelStatusLength DiscordConfig.MaxEntitlementsPerBatch object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties APIOnRestInteractionCreation public bool APIOnRestInteractionCreation { get; set; } Property Value bool RestClientProvider Gets or sets the provider used to generate new REST connections. public RestClientProvider RestClientProvider { get; set; } Property Value RestClientProvider"
  },
  "api/Discord.Rest.EmbedBuilderUtils.html": {
    "href": "api/Discord.Rest.EmbedBuilderUtils.html",
    "title": "Class EmbedBuilderUtils | Discord.Net Documentation",
    "keywords": "Class EmbedBuilderUtils Namespace Discord.Rest Assembly Discord.Net.Rest.dll public static class EmbedBuilderUtils Inheritance object EmbedBuilderUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Parse(string) Parses a string into an EmbedBuilder. public static EmbedBuilder Parse(string json) Parameters json string The json string to parse. Returns EmbedBuilder An EmbedBuilder with populated values from the passed json. Exceptions InvalidOperationException Thrown if the string passed is not valid json. TryParse(string, out EmbedBuilder) Tries to parse a string into an EmbedBuilder. public static bool TryParse(string json, out EmbedBuilder builder) Parameters json string The json string to parse. builder EmbedBuilder The EmbedBuilder with populated values. An empty instance if method returns false. Returns bool true if json was successfully parsed. false if not."
  },
  "api/Discord.Rest.EmoteCreateAuditLogData.html": {
    "href": "api/Discord.Rest.EmoteCreateAuditLogData.html",
    "title": "Class EmoteCreateAuditLogData | Discord.Net Documentation",
    "keywords": "Class EmoteCreateAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to an emoji creation. public class EmoteCreateAuditLogData : IAuditLogData Inheritance object EmoteCreateAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties EmoteId Gets the snowflake ID of the created emoji. public ulong EmoteId { get; } Property Value ulong A ulong representing the snowflake identifier for the created emoji. Name Gets the name of the created emoji. public string Name { get; } Property Value string A string containing the name of the created emoji."
  },
  "api/Discord.Rest.EmoteDeleteAuditLogData.html": {
    "href": "api/Discord.Rest.EmoteDeleteAuditLogData.html",
    "title": "Class EmoteDeleteAuditLogData | Discord.Net Documentation",
    "keywords": "Class EmoteDeleteAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to an emoji deletion. public class EmoteDeleteAuditLogData : IAuditLogData Inheritance object EmoteDeleteAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties EmoteId Gets the snowflake ID of the deleted emoji. public ulong EmoteId { get; } Property Value ulong A ulong representing the snowflake identifier for the deleted emoji. Name Gets the name of the deleted emoji. public string Name { get; } Property Value string A string containing the name of the deleted emoji."
  },
  "api/Discord.Rest.EmoteUpdateAuditLogData.html": {
    "href": "api/Discord.Rest.EmoteUpdateAuditLogData.html",
    "title": "Class EmoteUpdateAuditLogData | Discord.Net Documentation",
    "keywords": "Class EmoteUpdateAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to an emoji update. public class EmoteUpdateAuditLogData : IAuditLogData Inheritance object EmoteUpdateAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties EmoteId Gets the snowflake ID of the updated emoji. public ulong EmoteId { get; } Property Value ulong A ulong representing the snowflake identifier of the updated emoji. NewName Gets the new name of the updated emoji. public string NewName { get; } Property Value string A string containing the new name of the updated emoji. OldName Gets the old name of the updated emoji. public string OldName { get; } Property Value string A string containing the old name of the updated emoji."
  },
  "api/Discord.Rest.GuildInfo.html": {
    "href": "api/Discord.Rest.GuildInfo.html",
    "title": "Struct GuildInfo | Discord.Net Documentation",
    "keywords": "Struct GuildInfo Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents information for a guild. public struct GuildInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties AfkChannelId Gets the ID of the AFK voice channel for this guild. public readonly ulong? AfkChannelId { get; } Property Value ulong? A ulong representing the snowflake identifier of the AFK voice channel; null if none is set. AfkTimeout Gets the amount of time (in seconds) a user must be inactive in a voice channel for until they are automatically moved to the AFK voice channel. public readonly int? AfkTimeout { get; } Property Value int? An int representing the amount of time in seconds for a user to be marked as inactive and moved into the AFK voice channel. null if this is not mentioned in this entry. ApplicationId Gets the application ID of the guild creator if it is bot-created. public readonly ulong? ApplicationId { get; } Property Value ulong? A ulong representing the snowflake identifier of the application ID that created this guild, or null if it was not bot-created. Remarks null if the value was not updated in this entry. BannerId Gets the identifier for this guilds banner image. public readonly string BannerId { get; } Property Value string An identifier for the banner image; null if none is set. Remarks null if the value was not updated in this entry. DefaultMessageNotifications Gets the default message notifications for users who haven't explicitly set their notification settings. public readonly DefaultMessageNotifications? DefaultMessageNotifications { get; } Property Value DefaultMessageNotifications? The default message notifications setting of this guild. null if this is not mentioned in this entry. Description Gets the description for the guild. public readonly string Description { get; } Property Value string The description for the guild; null if none is set. Remarks null if the value was not updated in this entry. DiscoverySplashId Gets the ID of this guild's discovery splash image. public readonly string DiscoverySplashId { get; } Property Value string An identifier for the discovery splash image; null if none is set. Remarks null if the value was not updated in this entry. EmbedChannelId Gets the ID of the widget embed channel of this guild. public readonly ulong? EmbedChannelId { get; } Property Value ulong? A ulong representing the snowflake identifier of the embedded channel found within the widget settings of this guild; null if none is set. ExplicitContentFilter Gets the level of content filtering applied to user's content in a Guild. public readonly ExplicitContentFilterLevel? ExplicitContentFilter { get; } Property Value ExplicitContentFilterLevel? The level of explicit content filtering. IconHash Gets the ID of this guild's icon. public readonly string IconHash { get; } Property Value string A string containing the identifier for the splash image; null if none is set. IsBoostProgressBarEnabled Gets whether the guild has the boost progress bar enabled. public readonly bool? IsBoostProgressBarEnabled { get; } Property Value bool? true if the boost progress bar is enabled; otherwise false. Remarks null if the value was not updated in this entry. IsEmbeddable Gets a value that indicates whether this guild is embeddable (i.e. can use widget). public readonly bool? IsEmbeddable { get; } Property Value bool? true if this guild can be embedded via widgets; otherwise false. null if this is not mentioned in this entry. MfaLevel Gets the level of Multi-Factor Authentication requirements a user must fulfill before being allowed to perform administrative actions in this guild. public readonly MfaLevel? MfaLevel { get; } Property Value MfaLevel? The level of MFA requirement. null if this is not mentioned in this entry. Name Gets the name of this guild. public readonly string Name { get; } Property Value string A string containing the name of this guild. NsfwLevel Gets the NSFW level of this guild. public readonly NsfwLevel? NsfwLevel { get; } Property Value NsfwLevel? The NSFW level of this guild. Remarks null if the value was not updated in this entry. Owner Gets the owner of this guild. public readonly IUser Owner { get; } Property Value IUser A user object representing the owner of this guild. OwnerId Gets the ID of the user that owns this guild. public readonly ulong? OwnerId { get; } Property Value ulong? A ulong representing the snowflake identifier of the user that owns this guild. Remarks null if the value was not updated in this entry. PreferredLocale Gets the preferred locale of this guild in IETF BCP 47 language tag format. public readonly string PreferredLocale { get; } Property Value string The preferred locale of the guild in IETF BCP 47 language tag format. Remarks null if the value was not updated in this entry. PublicUpdatesChannelId Gets the ID of the channel where admins and moderators of Community guilds receive notices from Discord. public readonly ulong? PublicUpdatesChannelId { get; } Property Value ulong? A ulong representing the snowflake identifier of the channel where admins and moderators of Community guilds receive notices from Discord; null if none is set. Remarks null if the value was not updated in this entry. RegionId Gets the ID of the region hosting this guild's voice channels. public readonly string RegionId { get; } Property Value string RulesChannelId Gets the ID of the channel with the rules. public readonly ulong? RulesChannelId { get; } Property Value ulong? A ulong representing the snowflake identifier of the channel that contains the rules; null if none is set. Remarks null if the value was not updated in this entry. SplashId Gets the ID of this guild's splash image. public readonly string SplashId { get; } Property Value string An identifier for the splash image; null if none is set. Remarks null if the value was not updated in this entry. SystemChannelFlags Gets the flags for the types of system channel messages that are disabled. public readonly SystemChannelMessageDeny? SystemChannelFlags { get; } Property Value SystemChannelMessageDeny? The flags for the types of system channel messages that are disabled. Remarks null if the value was not updated in this entry. SystemChannelId Gets the ID of the channel where system messages are sent. public readonly ulong? SystemChannelId { get; } Property Value ulong? A ulong representing the snowflake identifier of the channel where system messages are sent; null if none is set. VanityURLCode Gets the code for this guild's vanity invite URL. public readonly string VanityURLCode { get; } Property Value string A string containing the vanity invite code for this guild; null if none is set. Remarks null if the value was not updated in this entry. VerificationLevel Gets the level of requirements a user must fulfill before being allowed to post messages in this guild. public readonly VerificationLevel? VerificationLevel { get; } Property Value VerificationLevel? The level of requirements. null if this is not mentioned in this entry."
  },
  "api/Discord.Rest.GuildUpdateAuditLogData.html": {
    "href": "api/Discord.Rest.GuildUpdateAuditLogData.html",
    "title": "Class GuildUpdateAuditLogData | Discord.Net Documentation",
    "keywords": "Class GuildUpdateAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a guild update. public class GuildUpdateAuditLogData : IAuditLogData Inheritance object GuildUpdateAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After Gets the guild information after the changes. public GuildInfo After { get; } Property Value GuildInfo An information object containing the guild information after the changes were made. Before Gets the guild information before the changes. public GuildInfo Before { get; } Property Value GuildInfo An information object containing the original guild information before the changes were made."
  },
  "api/Discord.Rest.IRestAudioChannel.html": {
    "href": "api/Discord.Rest.IRestAudioChannel.html",
    "title": "Interface IRestAudioChannel | Discord.Net Documentation",
    "keywords": "Interface IRestAudioChannel Namespace Discord.Rest Assembly Discord.Net.Rest.dll public interface IRestAudioChannel : IAudioChannel, IChannel, ISnowflakeEntity, IEntity<ulong> Inherited Members IAudioChannel.RTCRegion IAudioChannel.ConnectAsync(bool, bool, bool) IAudioChannel.DisconnectAsync() IAudioChannel.ModifyAsync(Action<AudioChannelProperties>, RequestOptions) IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) ISnowflakeEntity.CreatedAt IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel)"
  },
  "api/Discord.Rest.IRestMessageChannel.html": {
    "href": "api/Discord.Rest.IRestMessageChannel.html",
    "title": "Interface IRestMessageChannel | Discord.Net Documentation",
    "keywords": "Interface IRestMessageChannel Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based channel that can send and receive messages. public interface IRestMessageChannel : IMessageChannel, IChannel, ISnowflakeEntity, IEntity<ulong> Inherited Members IMessageChannel.GetMessageAsync(ulong, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(ulong, Direction, int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions) IMessageChannel.DeleteMessageAsync(ulong, RequestOptions) IMessageChannel.DeleteMessageAsync(IMessage, RequestOptions) IMessageChannel.ModifyMessageAsync(ulong, Action<MessageProperties>, RequestOptions) IMessageChannel.TriggerTypingAsync(RequestOptions) IMessageChannel.EnterTypingState(RequestOptions) IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) ISnowflakeEntity.CreatedAt IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) Methods GetMessageAsync(ulong, RequestOptions) Gets a message from this message channel. Task<RestMessage> GetMessageAsync(ulong id, RequestOptions options = null) Parameters id ulong The snowflake identifier of the message. options RequestOptions The options to be used when sending the request. Returns Task<RestMessage> A task that represents an asynchronous get operation for retrieving the message. The task result contains the retrieved message; null if no message is found with the specified identifier. Remarks This method follows the same behavior as described in GetMessageAsync(ulong, CacheMode, RequestOptions). Please visit its documentation for more details on this method. GetMessagesAsync(IMessage, Direction, int, RequestOptions) Gets a collection of messages in this channel. IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(IMessage fromMessage, Direction dir, int limit = 100, RequestOptions options = null) Parameters fromMessage IMessage The starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions). Please visit its documentation for more details on this method. GetMessagesAsync(int, RequestOptions) Gets the last N messages from this message channel. IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(int limit = 100, RequestOptions options = null) Parameters limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(int, CacheMode, RequestOptions). Please visit its documentation for more details on this method. GetMessagesAsync(ulong, Direction, int, RequestOptions) Gets a collection of messages in this channel. IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(ulong fromMessageId, Direction dir, int limit = 100, RequestOptions options = null) Parameters fromMessageId ulong The ID of the starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(ulong, Direction, int, CacheMode, RequestOptions). Please visit its documentation for more details on this method. GetPinnedMessagesAsync(RequestOptions) Gets a collection of pinned messages in this channel. Task<IReadOnlyCollection<RestMessage>> GetPinnedMessagesAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestMessage>> A task that represents the asynchronous get operation for retrieving pinned messages in this channel. The task result contains a collection of messages found in the pinned messages. Remarks This method follows the same behavior as described in GetPinnedMessagesAsync(RequestOptions). Please visit its documentation for more details on this method. SendFileAsync(FileAttachment, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a file to this message channel with an optional caption. Task<RestUserMessage> SendFileAsync(FileAttachment attachment, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters attachment FileAttachment The attachment containing the file and description. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Remarks This method sends a file as if you are uploading an attachment directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. SendFileAsync(Stream, string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a file to this message channel with an optional caption. Task<RestUserMessage> SendFileAsync(Stream stream, string filename, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters stream Stream The Stream of the file to be sent. filename string The name of the attachment. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. isSpoiler bool Whether the message attachment should be hidden as a spoiler. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example uploads a streamed image that will be called b1nzy.jpg embedded inside a rich embed to the channel. using (var b1nzyStream = await httpClient.GetStreamAsync(\"https://example.com/b1nzy\")) await channel.SendFileAsync(b1nzyStream, \"b1nzy.jpg\", embed: new EmbedBuilder { ImageUrl = \"attachment://b1nzy.jpg\" }.Build()); Remarks This method sends a file as if you are uploading an attachment directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. SendFileAsync(string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a file to this message channel with an optional caption. Task<RestUserMessage> SendFileAsync(string filePath, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters filePath string The file path of the file. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. isSpoiler bool Whether the message attachment should be hidden as a spoiler. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example uploads a local file called wumpus.txt along with the text good discord boi to the channel. await channel.SendFileAsync(\"wumpus.txt\", \"good discord boi\"); The following example uploads a local image called b1nzy.jpg embedded inside a rich embed to the channel. await channel.SendFileAsync(\"b1nzy.jpg\", embed: new EmbedBuilder { ImageUrl = \"attachment://b1nzy.jpg\" }.Build()); Remarks This method sends a file as if you are uploading an attachment directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. SendFilesAsync(IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a collection of files to this message channel. Task<RestUserMessage> SendFilesAsync(IEnumerable<FileAttachment> attachments, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Remarks This method sends files as if you are uploading attachments directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. SendMessageAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a message to this message channel. Task<RestUserMessage> SendMessageAsync(string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters text string The message to be sent. isTTS bool Determines whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the message. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example sends a message with the current system time in RFC 1123 format to the channel and deletes itself after 5 seconds. var message = await channel.SendMessageAsync(DateTimeOffset.UtcNow.ToString(\"R\")); await Task.Delay(TimeSpan.FromSeconds(5)) .ContinueWith(x => message.DeleteAsync());"
  },
  "api/Discord.Rest.IRestPrivateChannel.html": {
    "href": "api/Discord.Rest.IRestPrivateChannel.html",
    "title": "Interface IRestPrivateChannel | Discord.Net Documentation",
    "keywords": "Interface IRestPrivateChannel Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based channel that is private to select recipients. public interface IRestPrivateChannel : IPrivateChannel, IChannel, ISnowflakeEntity, IEntity<ulong> Inherited Members IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) ISnowflakeEntity.CreatedAt IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties Recipients Users that can access this channel. IReadOnlyCollection<RestUser> Recipients { get; } Property Value IReadOnlyCollection<RestUser>"
  },
  "api/Discord.Rest.IntegrationCreatedAuditLogData.html": {
    "href": "api/Discord.Rest.IntegrationCreatedAuditLogData.html",
    "title": "Class IntegrationCreatedAuditLogData | Discord.Net Documentation",
    "keywords": "Class IntegrationCreatedAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to an integration authorization. public class IntegrationCreatedAuditLogData : IAuditLogData Inheritance object IntegrationCreatedAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data Gets the integration information after the changes. public IntegrationInfo Data { get; } Property Value IntegrationInfo Integration Gets the partial integration the changes correspond to. public IIntegration Integration { get; } Property Value IIntegration"
  },
  "api/Discord.Rest.IntegrationDeletedAuditLogData.html": {
    "href": "api/Discord.Rest.IntegrationDeletedAuditLogData.html",
    "title": "Class IntegrationDeletedAuditLogData | Discord.Net Documentation",
    "keywords": "Class IntegrationDeletedAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to an integration removal. public class IntegrationDeletedAuditLogData : IAuditLogData Inheritance object IntegrationDeletedAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data Gets the integration information before the changes. public IntegrationInfo Data { get; } Property Value IntegrationInfo"
  },
  "api/Discord.Rest.IntegrationInfo.html": {
    "href": "api/Discord.Rest.IntegrationInfo.html",
    "title": "Class IntegrationInfo | Discord.Net Documentation",
    "keywords": "Class IntegrationInfo Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents information for an integration. public class IntegrationInfo Inheritance object IntegrationInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties EnableEmojis Gets whether emoticons should be synced for this integration. if the property was not mentioned in this audit log. public bool? EnableEmojis { get; set; } Property Value bool? Enabled Gets if the integration is enabled. if the property was not mentioned in this audit log. public bool? Enabled { get; set; } Property Value bool? ExpireBehavior Gets the behavior of expiring subscribers. if the property was not mentioned in this audit log. public IntegrationExpireBehavior? ExpireBehavior { get; set; } Property Value IntegrationExpireBehavior? ExpireGracePeriod Gets the grace period (in days) before expiring subscribers. if the property was not mentioned in this audit log. public int? ExpireGracePeriod { get; set; } Property Value int? Name Gets the name of the integration. if the property was not mentioned in this audit log. public string Name { get; set; } Property Value string RoleId Gets the id of the role that this integration uses for subscribers. if the property was not mentioned in this audit log. public ulong? RoleId { get; set; } Property Value ulong? Scopes Gets the scopes the application has been authorized for. if the property was not mentioned in this audit log. public IReadOnlyCollection<string> Scopes { get; set; } Property Value IReadOnlyCollection<string> Syncing Gets if syncing is enabled for this integration. if the property was not mentioned in this audit log. public bool? Syncing { get; set; } Property Value bool? Type Gets the type of the integration. if the property was not mentioned in this audit log. public string Type { get; set; } Property Value string"
  },
  "api/Discord.Rest.IntegrationUpdatedAuditLogData.html": {
    "href": "api/Discord.Rest.IntegrationUpdatedAuditLogData.html",
    "title": "Class IntegrationUpdatedAuditLogData | Discord.Net Documentation",
    "keywords": "Class IntegrationUpdatedAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to an integration update. public class IntegrationUpdatedAuditLogData : IAuditLogData Inheritance object IntegrationUpdatedAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After Gets the integration information after the changes. public IntegrationInfo After { get; } Property Value IntegrationInfo Before Gets the integration information before the changes. public IntegrationInfo Before { get; } Property Value IntegrationInfo Integration Gets the partial integration the changes correspond to. public IIntegration Integration { get; } Property Value IIntegration"
  },
  "api/Discord.Rest.InteractionProperties.html": {
    "href": "api/Discord.Rest.InteractionProperties.html",
    "title": "Struct InteractionProperties | Discord.Net Documentation",
    "keywords": "Struct InteractionProperties Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a class that contains data present in all interactions to evaluate against at rest-interaction creation. public readonly struct InteractionProperties Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties ChannelId Gets the channel ID of the interaction. public ulong? ChannelId { get; } Property Value ulong? Remarks This will be null if this interaction is Ping. CommandType Gets the type of application command this interaction represents. public ApplicationCommandType? CommandType { get; } Property Value ApplicationCommandType? Remarks This will be null if the Type is not ApplicationCommand. CustomId Gets the custom ID of the interaction. public string CustomId { get; } Property Value string Remarks This will be Empty if the Type is not MessageComponent or ModalSubmit. GuildId Gets the guild ID of the interaction. public ulong? GuildId { get; } Property Value ulong? Remarks This will be null if this interaction was not executed in a guild. Name Gets the name of the interaction. public string Name { get; } Property Value string Remarks This will be Empty if the Type is not ApplicationCommand. Type The type of this interaction. public InteractionType Type { get; } Property Value InteractionType"
  },
  "api/Discord.Rest.InviteCreateAuditLogData.html": {
    "href": "api/Discord.Rest.InviteCreateAuditLogData.html",
    "title": "Class InviteCreateAuditLogData | Discord.Net Documentation",
    "keywords": "Class InviteCreateAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to an invite creation. public class InviteCreateAuditLogData : IAuditLogData Inheritance object InviteCreateAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Gets the ID of the channel this invite is linked to. public ulong ChannelId { get; } Property Value ulong A ulong representing the channel snowflake identifier that the invite points to. Code Gets the unique identifier for this invite. public string Code { get; } Property Value string A string containing the invite code (e.g. FTqNnyS). Creator Gets the user that created this invite if available. public IUser Creator { get; } Property Value IUser A user that created this invite or null. Remarks Will be null if the user is a 'Deleted User#....' because Discord does send user data for deleted users. MaxAge Gets the time (in seconds) until the invite expires. public int MaxAge { get; } Property Value int An int representing the time in seconds until this invite expires. MaxUses Gets the max number of uses this invite may have. public int MaxUses { get; } Property Value int An int representing the number of uses this invite may be accepted until it is removed from the guild; null if none is set. Temporary Gets a value that determines whether the invite is a temporary one. public bool Temporary { get; } Property Value bool true if users accepting this invite will be removed from the guild when they log off; otherwise false. Uses Gets the number of times this invite has been used. public int Uses { get; } Property Value int An int representing the number of times this invite was used."
  },
  "api/Discord.Rest.InviteDeleteAuditLogData.html": {
    "href": "api/Discord.Rest.InviteDeleteAuditLogData.html",
    "title": "Class InviteDeleteAuditLogData | Discord.Net Documentation",
    "keywords": "Class InviteDeleteAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to an invite removal. public class InviteDeleteAuditLogData : IAuditLogData Inheritance object InviteDeleteAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Gets the ID of the channel this invite is linked to. public ulong ChannelId { get; } Property Value ulong A ulong representing the channel snowflake identifier that the invite points to. Code Gets the unique identifier for this invite. public string Code { get; } Property Value string A string containing the invite code (e.g. FTqNnyS). Creator Gets the user that created this invite if available. public IUser Creator { get; } Property Value IUser A user that created this invite or null. Remarks Will be null if the user is a 'Deleted User#....' because Discord does send user data for deleted users. MaxAge Gets the time (in seconds) until the invite expires. public int MaxAge { get; } Property Value int An int representing the time in seconds until this invite expires. MaxUses Gets the max number of uses this invite may have. public int MaxUses { get; } Property Value int An int representing the number of uses this invite may be accepted until it is removed from the guild; null if none is set. Temporary Gets a value that indicates whether the invite is a temporary one. public bool Temporary { get; } Property Value bool true if users accepting this invite will be removed from the guild when they log off; otherwise false. Uses Gets the number of times this invite has been used. public int Uses { get; } Property Value int An int representing the number of times this invite has been used."
  },
  "api/Discord.Rest.InviteInfo.html": {
    "href": "api/Discord.Rest.InviteInfo.html",
    "title": "Struct InviteInfo | Discord.Net Documentation",
    "keywords": "Struct InviteInfo Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents information for an invite. public struct InviteInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties ChannelId Gets the ID of the channel this invite is linked to. public readonly ulong? ChannelId { get; } Property Value ulong? A ulong representing the channel snowflake identifier that the invite points to; null if not specified. Code Gets the unique identifier for this invite. public readonly string Code { get; } Property Value string A string containing the invite code (e.g. FTqNnyS). CreatorId Gets the id of the user created this invite. public readonly ulong? CreatorId { get; } Property Value ulong? MaxAge Gets the time (in seconds) until the invite expires. public readonly int? MaxAge { get; } Property Value int? An int representing the time in seconds until this invite expires; null if this invite never expires or not specified. MaxUses Gets the max number of uses this invite may have. public readonly int? MaxUses { get; } Property Value int? An int representing the number of uses this invite may be accepted until it is removed from the guild; null if none is specified. Temporary Gets a value that indicates whether the invite is a temporary one. public readonly bool? Temporary { get; } Property Value bool? true if users accepting this invite will be removed from the guild when they log off, false if not; null if not specified."
  },
  "api/Discord.Rest.InviteUpdateAuditLogData.html": {
    "href": "api/Discord.Rest.InviteUpdateAuditLogData.html",
    "title": "Class InviteUpdateAuditLogData | Discord.Net Documentation",
    "keywords": "Class InviteUpdateAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data relating to an invite update. public class InviteUpdateAuditLogData : IAuditLogData Inheritance object InviteUpdateAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After Gets the invite information after the changes. public InviteInfo After { get; } Property Value InviteInfo An information object containing the invite information after the changes were made. Before Gets the invite information before the changes. public InviteInfo Before { get; } Property Value InviteInfo An information object containing the original invite information before the changes were made."
  },
  "api/Discord.Rest.KickAuditLogData.html": {
    "href": "api/Discord.Rest.KickAuditLogData.html",
    "title": "Class KickAuditLogData | Discord.Net Documentation",
    "keywords": "Class KickAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a kick. public class KickAuditLogData : IAuditLogData Inheritance object KickAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IntegrationType Gets the type of integration which performed the action. null if the action was performed by a user. public string IntegrationType { get; } Property Value string Target Gets the user that was kicked. public IUser Target { get; } Property Value IUser A user object representing the kicked user. Remarks Will be null if the user is a 'Deleted User#....' because Discord does send user data for deleted users."
  },
  "api/Discord.Rest.MemberDisconnectAuditLogData.html": {
    "href": "api/Discord.Rest.MemberDisconnectAuditLogData.html",
    "title": "Class MemberDisconnectAuditLogData | Discord.Net Documentation",
    "keywords": "Class MemberDisconnectAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to disconnecting members from voice channels. public class MemberDisconnectAuditLogData : IAuditLogData Inheritance object MemberDisconnectAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties MemberCount Gets the number of members that were disconnected. public int MemberCount { get; } Property Value int An int representing the number of members that were disconnected from a voice channel."
  },
  "api/Discord.Rest.MemberInfo.html": {
    "href": "api/Discord.Rest.MemberInfo.html",
    "title": "Struct MemberInfo | Discord.Net Documentation",
    "keywords": "Struct MemberInfo Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents information for a member. public struct MemberInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Deaf Gets a value that indicates whether the updated member is deafened by the guild. public readonly bool? Deaf { get; } Property Value bool? true if the updated member is deafened (i.e. not permitted to listen to or speak to others) by the guild; otherwise false. null if this is not mentioned in this entry. Mute Gets a value that indicates whether the updated member is muted (i.e. not permitted to speak via voice) by the guild. public readonly bool? Mute { get; } Property Value bool? true if the updated member is muted by the guild; otherwise false. null if this is not mentioned in this entry. Nickname Gets the nickname of the updated member. public readonly string Nickname { get; } Property Value string A string representing the nickname of the updated member; null if none is set. TimedOutUntil Gets the date and time that indicates if and for how long the updated user has been timed out. public readonly DateTimeOffset? TimedOutUntil { get; } Property Value DateTimeOffset? A DateTimeOffset indicating how long the user will be timed out for. Remarks null or a timestamp in the past if the user is not timed out."
  },
  "api/Discord.Rest.MemberMoveAuditLogData.html": {
    "href": "api/Discord.Rest.MemberMoveAuditLogData.html",
    "title": "Class MemberMoveAuditLogData | Discord.Net Documentation",
    "keywords": "Class MemberMoveAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to moving members between voice channels. public class MemberMoveAuditLogData : IAuditLogData Inheritance object MemberMoveAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Gets the ID of the channel that the members were moved to. public ulong ChannelId { get; } Property Value ulong A ulong representing the snowflake identifier for the channel that the members were moved to. MemberCount Gets the number of members that were moved. public int MemberCount { get; } Property Value int An int representing the number of members that were moved to another voice channel."
  },
  "api/Discord.Rest.MemberRoleAuditLogData.html": {
    "href": "api/Discord.Rest.MemberRoleAuditLogData.html",
    "title": "Class MemberRoleAuditLogData | Discord.Net Documentation",
    "keywords": "Class MemberRoleAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a change in a guild member's roles. public class MemberRoleAuditLogData : IAuditLogData Inheritance object MemberRoleAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IntegrationType Gets the type of integration which performed the action. null if the action was performed by a user. public string IntegrationType { get; } Property Value string Roles Gets a collection of role changes that were performed on the member. public IReadOnlyCollection<MemberRoleEditInfo> Roles { get; } Property Value IReadOnlyCollection<MemberRoleEditInfo> A read-only collection of MemberRoleEditInfo, containing the roles that were changed on the member. Target Gets the user that the roles changes were performed on. public IUser Target { get; } Property Value IUser A user object representing the user that the role changes were performed on."
  },
  "api/Discord.Rest.MemberRoleEditInfo.html": {
    "href": "api/Discord.Rest.MemberRoleEditInfo.html",
    "title": "Struct MemberRoleEditInfo | Discord.Net Documentation",
    "keywords": "Struct MemberRoleEditInfo Namespace Discord.Rest Assembly Discord.Net.Rest.dll An information object representing a change in one of a guild member's roles. public struct MemberRoleEditInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Added Gets a value that indicates whether the role was added to the user. public readonly bool Added { get; } Property Value bool true if the role was added to the user; otherwise false. Name Gets the name of the role that was changed. public readonly string Name { get; } Property Value string A string containing the name of the role that was changed. Removed Gets a value indicating that the user role has been removed. public readonly bool Removed { get; } Property Value bool true if the role has been removed from the user; otherwise false. RoleId Gets the ID of the role that was changed. public readonly ulong RoleId { get; } Property Value ulong A ulong representing the snowflake identifier of the role that was changed."
  },
  "api/Discord.Rest.MemberUpdateAuditLogData.html": {
    "href": "api/Discord.Rest.MemberUpdateAuditLogData.html",
    "title": "Class MemberUpdateAuditLogData | Discord.Net Documentation",
    "keywords": "Class MemberUpdateAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a change in a guild member. public class MemberUpdateAuditLogData : IAuditLogData Inheritance object MemberUpdateAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After Gets the member information after the changes. public MemberInfo After { get; } Property Value MemberInfo An information object containing the member information after the changes were made. Before Gets the member information before the changes. public MemberInfo Before { get; } Property Value MemberInfo An information object containing the original member information before the changes were made. Target Gets the user that the changes were performed on. public IUser Target { get; } Property Value IUser A user object representing the user who the changes were performed on. Remarks Will be null if the user is a 'Deleted User#....' because Discord does send user data for deleted users."
  },
  "api/Discord.Rest.MessageBulkDeleteAuditLogData.html": {
    "href": "api/Discord.Rest.MessageBulkDeleteAuditLogData.html",
    "title": "Class MessageBulkDeleteAuditLogData | Discord.Net Documentation",
    "keywords": "Class MessageBulkDeleteAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to message deletion(s). public class MessageBulkDeleteAuditLogData : IAuditLogData Inheritance object MessageBulkDeleteAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Gets the ID of the channel that the messages were deleted from. public ulong ChannelId { get; } Property Value ulong A ulong representing the snowflake identifier for the channel that the messages were deleted from. MessageCount Gets the number of messages that were deleted. public int MessageCount { get; } Property Value int An int representing the number of messages that were deleted from the channel."
  },
  "api/Discord.Rest.MessageDeleteAuditLogData.html": {
    "href": "api/Discord.Rest.MessageDeleteAuditLogData.html",
    "title": "Class MessageDeleteAuditLogData | Discord.Net Documentation",
    "keywords": "Class MessageDeleteAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to message deletion(s). public class MessageDeleteAuditLogData : IAuditLogData Inheritance object MessageDeleteAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Gets the ID of the channel that the messages were deleted from. public ulong ChannelId { get; } Property Value ulong A ulong representing the snowflake identifier for the channel that the messages were deleted from. MessageCount Gets the number of messages that were deleted. public int MessageCount { get; } Property Value int An int representing the number of messages that were deleted from the channel. Target Gets the user of the messages that were deleted. public IUser Target { get; } Property Value IUser A user object representing the user that created the deleted messages. Remarks Will be null if the user is a 'Deleted User#....' because Discord does send user data for deleted users."
  },
  "api/Discord.Rest.MessagePinAuditLogData.html": {
    "href": "api/Discord.Rest.MessagePinAuditLogData.html",
    "title": "Class MessagePinAuditLogData | Discord.Net Documentation",
    "keywords": "Class MessagePinAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a pinned message. public class MessagePinAuditLogData : IAuditLogData Inheritance object MessagePinAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Gets the ID of the channel that the message was pinned from. public ulong ChannelId { get; } Property Value ulong A ulong representing the snowflake identifier for the channel that the message was pinned from. MessageId Gets the ID of the messages that was pinned. public ulong MessageId { get; } Property Value ulong A ulong representing the snowflake identifier for the messages that was pinned. Target Gets the user of the message that was pinned if available. public IUser Target { get; } Property Value IUser A user object representing the user that created the pinned message or null. Remarks Will be null if the user is a 'Deleted User#....' because Discord does send user data for deleted users."
  },
  "api/Discord.Rest.MessageUnpinAuditLogData.html": {
    "href": "api/Discord.Rest.MessageUnpinAuditLogData.html",
    "title": "Class MessageUnpinAuditLogData | Discord.Net Documentation",
    "keywords": "Class MessageUnpinAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to an unpinned message. public class MessageUnpinAuditLogData : IAuditLogData Inheritance object MessageUnpinAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Gets the ID of the channel that the message was unpinned from. public ulong ChannelId { get; } Property Value ulong A ulong representing the snowflake identifier for the channel that the message was unpinned from. MessageId Gets the ID of the messages that was unpinned. public ulong MessageId { get; } Property Value ulong A ulong representing the snowflake identifier for the messages that was unpinned. Target Gets the user of the message that was unpinned if available. public IUser Target { get; } Property Value IUser A user object representing the user that created the unpinned message or null. Remarks Will be null if the user is a 'Deleted User#....' because Discord does send user data for deleted users."
  },
  "api/Discord.Rest.OnboardingInfo.html": {
    "href": "api/Discord.Rest.OnboardingInfo.html",
    "title": "Class OnboardingInfo | Discord.Net Documentation",
    "keywords": "Class OnboardingInfo Namespace Discord.Rest Assembly Discord.Net.Rest.dll public class OnboardingInfo Inheritance object OnboardingInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Discord.Rest.OnboardingPromptCreatedAuditLogData.html": {
    "href": "api/Discord.Rest.OnboardingPromptCreatedAuditLogData.html",
    "title": "Class OnboardingPromptCreatedAuditLogData | Discord.Net Documentation",
    "keywords": "Class OnboardingPromptCreatedAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to an onboarding prompt creation. public class OnboardingPromptCreatedAuditLogData : IAuditLogData Inheritance object OnboardingPromptCreatedAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Discord.Rest.OnboardingPromptInfo.html": {
    "href": "api/Discord.Rest.OnboardingPromptInfo.html",
    "title": "Class OnboardingPromptInfo | Discord.Net Documentation",
    "keywords": "Class OnboardingPromptInfo Namespace Discord.Rest Assembly Discord.Net.Rest.dll public class OnboardingPromptInfo Inheritance object OnboardingPromptInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Discord.Rest.OnboardingPromptUpdatedAuditLogData.html": {
    "href": "api/Discord.Rest.OnboardingPromptUpdatedAuditLogData.html",
    "title": "Class OnboardingPromptUpdatedAuditLogData | Discord.Net Documentation",
    "keywords": "Class OnboardingPromptUpdatedAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to an onboarding prompt update. public class OnboardingPromptUpdatedAuditLogData : IAuditLogData Inheritance object OnboardingPromptUpdatedAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Discord.Rest.OnboardingUpdatedAuditLogData.html": {
    "href": "api/Discord.Rest.OnboardingUpdatedAuditLogData.html",
    "title": "Class OnboardingUpdatedAuditLogData | Discord.Net Documentation",
    "keywords": "Class OnboardingUpdatedAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a guild update. public class OnboardingUpdatedAuditLogData : IAuditLogData Inheritance object OnboardingUpdatedAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Discord.Rest.OverwriteCreateAuditLogData.html": {
    "href": "api/Discord.Rest.OverwriteCreateAuditLogData.html",
    "title": "Class OverwriteCreateAuditLogData | Discord.Net Documentation",
    "keywords": "Class OverwriteCreateAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data for a permissions overwrite creation. public class OverwriteCreateAuditLogData : IAuditLogData Inheritance object OverwriteCreateAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Gets the ID of the channel that the overwrite was created from. public ulong ChannelId { get; } Property Value ulong A ulong representing the snowflake identifier for the channel that the overwrite was created from. Overwrite Gets the permission overwrite object that was created. public Overwrite Overwrite { get; } Property Value Overwrite An Overwrite object representing the overwrite that was created."
  },
  "api/Discord.Rest.OverwriteDeleteAuditLogData.html": {
    "href": "api/Discord.Rest.OverwriteDeleteAuditLogData.html",
    "title": "Class OverwriteDeleteAuditLogData | Discord.Net Documentation",
    "keywords": "Class OverwriteDeleteAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to the deletion of a permission overwrite. public class OverwriteDeleteAuditLogData : IAuditLogData Inheritance object OverwriteDeleteAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Gets the ID of the channel that the overwrite was deleted from. public ulong ChannelId { get; } Property Value ulong A ulong representing the snowflake identifier for the channel that the overwrite was deleted from. Overwrite Gets the permission overwrite object that was deleted. public Overwrite Overwrite { get; } Property Value Overwrite An Overwrite object representing the overwrite that was deleted."
  },
  "api/Discord.Rest.OverwriteUpdateAuditLogData.html": {
    "href": "api/Discord.Rest.OverwriteUpdateAuditLogData.html",
    "title": "Class OverwriteUpdateAuditLogData | Discord.Net Documentation",
    "keywords": "Class OverwriteUpdateAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to the update of a permission overwrite. public class OverwriteUpdateAuditLogData : IAuditLogData Inheritance object OverwriteUpdateAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Gets the ID of the channel that the overwrite was updated from. public ulong ChannelId { get; } Property Value ulong A ulong representing the snowflake identifier for the channel that the overwrite was updated from. NewPermissions Gets the overwrite permissions after the changes. public OverwritePermissions NewPermissions { get; } Property Value OverwritePermissions An overwrite permissions object representing the overwrite permissions that the overwrite had after the changes. OldPermissions Gets the overwrite permissions before the changes. public OverwritePermissions OldPermissions { get; } Property Value OverwritePermissions An overwrite permissions object representing the overwrite permissions that the overwrite had before the changes were made. OverwriteTargetId Gets the ID of the overwrite that was updated. public ulong OverwriteTargetId { get; } Property Value ulong A ulong representing the snowflake identifier of the overwrite that was updated. OverwriteType Gets the target of the updated permission overwrite. public PermissionTarget OverwriteType { get; } Property Value PermissionTarget The target of the updated permission overwrite."
  },
  "api/Discord.Rest.PruneAuditLogData.html": {
    "href": "api/Discord.Rest.PruneAuditLogData.html",
    "title": "Class PruneAuditLogData | Discord.Net Documentation",
    "keywords": "Class PruneAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a guild prune. public class PruneAuditLogData : IAuditLogData Inheritance object PruneAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties MembersRemoved Gets the number of members that were kicked during the purge. public int MembersRemoved { get; } Property Value int An int representing the number of members that were removed from this guild for having not been seen within . PruneDays Gets the threshold for a guild member to not be kicked. public int PruneDays { get; } Property Value int An int representing the amount of days that a member must have been seen in the server, to avoid being kicked. (i.e. If a user has not been seen for more than , they will be kicked from the server)"
  },
  "api/Discord.Rest.RestApplication.html": {
    "href": "api/Discord.Rest.RestApplication.html",
    "title": "Class RestApplication | Discord.Net Documentation",
    "keywords": "Class RestApplication Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based entity that contains information about a Discord application created via the developer portal. public class RestApplication : RestEntity<ulong>, IApplication, ISnowflakeEntity, IEntity<ulong> Inheritance object RestEntity<ulong> RestApplication Implements IApplication ISnowflakeEntity IEntity<ulong> Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields _iconId protected string _iconId Field Value string Properties ApproximateGuildCount Gets the approximate count of the guild the application was added to. null if not returned. public int? ApproximateGuildCount { get; } Property Value int? BotRequiresCodeGrant Gets if the bot requires code grant. null if not set. public bool? BotRequiresCodeGrant { get; } Property Value bool? CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. CustomInstallUrl Gets application's default custom authorization url. null if disabled. public string CustomInstallUrl { get; } Property Value string Description Gets the description of the application. public string Description { get; } Property Value string DiscoverabilityState Gets the application's discoverability state. public ApplicationDiscoverabilityState DiscoverabilityState { get; } Property Value ApplicationDiscoverabilityState DiscoveryEligibilityFlags Gets the application's discovery eligibility flags. public DiscoveryEligibilityFlags DiscoveryEligibilityFlags { get; } Property Value DiscoveryEligibilityFlags ExplicitContentFilterLevel Gets the application's explicit content filter level for uploaded media content used in application commands. public ApplicationExplicitContentFilterLevel ExplicitContentFilterLevel { get; } Property Value ApplicationExplicitContentFilterLevel Flags Gets the application's public flags. public ApplicationFlags Flags { get; } Property Value ApplicationFlags Guild Gets the partial guild object of the application's developer's support server. null if not set. public PartialGuild Guild { get; } Property Value PartialGuild IconUrl Gets the icon URL of the application. public string IconUrl { get; } Property Value string InstallParams Gets a collection of install parameters for this application; null if disabled. public ApplicationInstallParams InstallParams { get; } Property Value ApplicationInstallParams InteractionEventTypes Gets event types to be sent to the interaction endpoint. public IReadOnlyCollection<string> InteractionEventTypes { get; } Property Value IReadOnlyCollection<string> InteractionsEndpointUrl Gets application's interactions endpoint url. null if not set. public string InteractionsEndpointUrl { get; } Property Value string InteractionsVersion Gets the interactions version application uses. public ApplicationInteractionsVersion InteractionsVersion { get; } Property Value ApplicationInteractionsVersion IsBotPublic Gets if the bot is public. null if not set. public bool? IsBotPublic { get; } Property Value bool? IsHook Gets whether the bot is allowed to hook into the application's game directly. public bool IsHook { get; } Property Value bool IsMonetized Whether the application has premium subscriptions. public bool IsMonetized { get; } Property Value bool MonetizationEligibilityFlags Gets the application's monetization eligibility flags. public ApplicationMonetizationEligibilityFlags MonetizationEligibilityFlags { get; } Property Value ApplicationMonetizationEligibilityFlags MonetizationState Gets the application's monetization state. public ApplicationMonetizationState MonetizationState { get; } Property Value ApplicationMonetizationState Name Gets the name of the application. public string Name { get; } Property Value string Owner Gets the partial user object containing info on the owner of the application. public IUser Owner { get; } Property Value IUser PrivacyPolicy Gets the the url of the app's privacy policy. public string PrivacyPolicy { get; } Property Value string RPCOrigins Gets the RPC origins of the application. public IReadOnlyCollection<string> RPCOrigins { get; } Property Value IReadOnlyCollection<string> RedirectUris Gets the redirect uris configured for the application. public IReadOnlyCollection<string> RedirectUris { get; } Property Value IReadOnlyCollection<string> RoleConnectionsVerificationUrl Gets the application's role connection verification entry point. null if not set. public string RoleConnectionsVerificationUrl { get; } Property Value string RpcState Gets the application's rpc state. public ApplicationRpcState RpcState { get; } Property Value ApplicationRpcState StoreState Gets the application's store state. public ApplicationStoreState StoreState { get; } Property Value ApplicationStoreState Tags Gets a collection of tags related to the application. public IReadOnlyCollection<string> Tags { get; } Property Value IReadOnlyCollection<string> Team Gets the team associated with this application if there is one. public ITeam Team { get; } Property Value ITeam TermsOfService Gets the url of the app's terms of service. public string TermsOfService { get; } Property Value string VerificationState Gets the application's verification state. public ApplicationVerificationState VerificationState { get; } Property Value ApplicationVerificationState VerifyKey Gets the hex encoded key for verification in interactions. public string VerifyKey { get; } Property Value string Methods ToString() Gets the name of the application. public override string ToString() Returns string Name of the application. UpdateAsync() public Task UpdateAsync() Returns Task Exceptions InvalidOperationException Unable to update this object from a different application token."
  },
  "api/Discord.Rest.RestApplicationCommand.html": {
    "href": "api/Discord.Rest.RestApplicationCommand.html",
    "title": "Class RestApplicationCommand | Discord.Net Documentation",
    "keywords": "Class RestApplicationCommand Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a Rest-based implementation of the IApplicationCommand. public abstract class RestApplicationCommand : RestEntity<ulong>, IApplicationCommand, ISnowflakeEntity, IEntity<ulong>, IDeletable Inheritance object RestEntity<ulong> RestApplicationCommand Implements IApplicationCommand ISnowflakeEntity IEntity<ulong> IDeletable Derived RestGlobalCommand RestGuildCommand Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ApplicationId Gets the unique id of the parent application. public ulong ApplicationId { get; } Property Value ulong CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. DefaultMemberPermissions Set of default GuildPermission required to invoke the command. public GuildPermissions DefaultMemberPermissions { get; } Property Value GuildPermissions Description Gets the description of the command. public string Description { get; } Property Value string DescriptionLocalizations Gets the localization dictionary for the description field of this command. public IReadOnlyDictionary<string, string> DescriptionLocalizations { get; } Property Value IReadOnlyDictionary<string, string> DescriptionLocalized Gets the localized description of this command. public string DescriptionLocalized { get; } Property Value string Remarks Only returned when the withLocalizations query parameter is set to false when requesting the command. IsDefaultPermission Gets whether the command is enabled by default when the app is added to a guild. public bool IsDefaultPermission { get; } Property Value bool IsEnabledInDm Indicates whether the command is available in DMs with the app. public bool IsEnabledInDm { get; } Property Value bool Remarks Only for globally-scoped commands. IsNsfw Indicates whether the command is age restricted. public bool IsNsfw { get; } Property Value bool Name Gets the name of the command. public string Name { get; } Property Value string NameLocalizations Gets the localization dictionary for the name field of this command. public IReadOnlyDictionary<string, string> NameLocalizations { get; } Property Value IReadOnlyDictionary<string, string> NameLocalized Gets the localized name of this command. public string NameLocalized { get; } Property Value string Remarks Only returned when the withLocalizations query parameter is set to false when requesting the command. Options Gets a collection of options for this command. public IReadOnlyCollection<RestApplicationCommandOption> Options { get; } Property Value IReadOnlyCollection<RestApplicationCommandOption> Type Gets the type of the command. public ApplicationCommandType Type { get; } Property Value ApplicationCommandType Methods DeleteAsync(RequestOptions) Deletes this object and all its children. public abstract Task DeleteAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task ModifyAsync(Action<ApplicationCommandProperties>, RequestOptions) Modifies the current application command. public Task ModifyAsync(Action<ApplicationCommandProperties> func, RequestOptions options = null) Parameters func Action<ApplicationCommandProperties> The new properties to use when modifying the command. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. ModifyAsync<TArg>(Action<TArg>, RequestOptions) Modifies the current application command. public abstract Task ModifyAsync<TArg>(Action<TArg> func, RequestOptions options = null) where TArg : ApplicationCommandProperties Parameters func Action<TArg> The new properties to use when modifying the command. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Type Parameters TArg Exceptions InvalidOperationException Thrown when you pass in an invalid ApplicationCommandProperties type."
  },
  "api/Discord.Rest.RestApplicationCommandChoice.html": {
    "href": "api/Discord.Rest.RestApplicationCommandChoice.html",
    "title": "Class RestApplicationCommandChoice | Discord.Net Documentation",
    "keywords": "Class RestApplicationCommandChoice Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a Rest-based implementation of IApplicationCommandOptionChoice. public class RestApplicationCommandChoice : IApplicationCommandOptionChoice Inheritance object RestApplicationCommandChoice Implements IApplicationCommandOptionChoice Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets the choice name. public string Name { get; } Property Value string NameLocalizations Gets the localization dictionary for the name field of this command option choice. public IReadOnlyDictionary<string, string> NameLocalizations { get; } Property Value IReadOnlyDictionary<string, string> NameLocalized Gets the localized name of this command option choice. public string NameLocalized { get; } Property Value string Remarks Only returned when the withLocalizations query parameter is set to false when requesting the command. Value Gets the value of the choice. public object Value { get; } Property Value object"
  },
  "api/Discord.Rest.RestApplicationCommandOption.html": {
    "href": "api/Discord.Rest.RestApplicationCommandOption.html",
    "title": "Class RestApplicationCommandOption | Discord.Net Documentation",
    "keywords": "Class RestApplicationCommandOption Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a Rest-based implementation of IApplicationCommandOption. public class RestApplicationCommandOption : IApplicationCommandOption Inheritance object RestApplicationCommandOption Implements IApplicationCommandOption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelTypes Gets the allowed channel types for this option. public IReadOnlyCollection<ChannelType> ChannelTypes { get; } Property Value IReadOnlyCollection<ChannelType> Choices Gets a collection of RestApplicationCommandChoices for this command. public IReadOnlyCollection<RestApplicationCommandChoice> Choices { get; } Property Value IReadOnlyCollection<RestApplicationCommandChoice> Description Gets the description of this command option. public string Description { get; } Property Value string DescriptionLocalizations Gets the localization dictionary for the description field of this command option. public IReadOnlyDictionary<string, string> DescriptionLocalizations { get; } Property Value IReadOnlyDictionary<string, string> DescriptionLocalized Gets the localized description of this command option. public string DescriptionLocalized { get; } Property Value string Remarks Only returned when the withLocalizations query parameter is set to false when requesting the command. IsAutocomplete Gets whether or not the option has autocomplete enabled. public bool? IsAutocomplete { get; } Property Value bool? IsDefault Gets whether or not this is the first required option for the user to complete. public bool? IsDefault { get; } Property Value bool? IsRequired Gets whether or not the parameter is required or optional. public bool? IsRequired { get; } Property Value bool? MaxLength Gets the maximum allowed length for a string input. public int? MaxLength { get; } Property Value int? MaxValue Gets the largest number value the user can input. public double? MaxValue { get; } Property Value double? MinLength Gets the minimum allowed length for a string input. public int? MinLength { get; } Property Value int? MinValue Gets the smallest number value the user can input. public double? MinValue { get; } Property Value double? Name Gets the name of this command option. public string Name { get; } Property Value string NameLocalizations Gets the localization dictionary for the name field of this command option. public IReadOnlyDictionary<string, string> NameLocalizations { get; } Property Value IReadOnlyDictionary<string, string> NameLocalized Gets the localized name of this command option. public string NameLocalized { get; } Property Value string Remarks Only returned when the withLocalizations query parameter is set to false when requesting the command. Options Gets a collection of RestApplicationCommandOptions for this command. public IReadOnlyCollection<RestApplicationCommandOption> Options { get; } Property Value IReadOnlyCollection<RestApplicationCommandOption> Type Gets the type of this IApplicationCommandOption. public ApplicationCommandOptionType Type { get; } Property Value ApplicationCommandOptionType"
  },
  "api/Discord.Rest.RestAuditLogEntry.html": {
    "href": "api/Discord.Rest.RestAuditLogEntry.html",
    "title": "Class RestAuditLogEntry | Discord.Net Documentation",
    "keywords": "Class RestAuditLogEntry Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based audit log entry. public class RestAuditLogEntry : RestEntity<ulong>, IAuditLogEntry, ISnowflakeEntity, IEntity<ulong> Inheritance object RestEntity<ulong> RestAuditLogEntry Implements IAuditLogEntry ISnowflakeEntity IEntity<ulong> Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Action Gets the action which occurred to create this entry. public ActionType Action { get; } Property Value ActionType The type of action for this audit log entry. CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. Data Gets the data for this entry. public IAuditLogData Data { get; } Property Value IAuditLogData An IAuditLogData for this audit log entry; null if no data is available. Reason Gets the reason behind the change. public string Reason { get; } Property Value string A string containing the reason for the change; null if none is provided. User Gets the user responsible for causing the changes. public IUser User { get; } Property Value IUser A user object."
  },
  "api/Discord.Rest.RestAutoModRule.html": {
    "href": "api/Discord.Rest.RestAutoModRule.html",
    "title": "Class RestAutoModRule | Discord.Net Documentation",
    "keywords": "Class RestAutoModRule Namespace Discord.Rest Assembly Discord.Net.Rest.dll public class RestAutoModRule : RestEntity<ulong>, IAutoModRule, ISnowflakeEntity, IEntity<ulong>, IDeletable Inheritance object RestEntity<ulong> RestAutoModRule Implements IAutoModRule ISnowflakeEntity IEntity<ulong> IDeletable Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Actions Gets a collection of actions that will be preformed if a user breaks this rule. public IReadOnlyCollection<AutoModRuleAction> Actions { get; } Property Value IReadOnlyCollection<AutoModRuleAction> AllowList Gets the allow list patterns for this rule. Empty if the rule has no allowed terms. public IReadOnlyCollection<string> AllowList { get; } Property Value IReadOnlyCollection<string> Remarks This collection will be empty if TriggerType is not Keyword. CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. CreatorId Gets the id of the user who created this use. public ulong CreatorId { get; } Property Value ulong Enabled Gets whether or not this rule is enabled. public bool Enabled { get; } Property Value bool EventType Gets the event type on which this rule is triggered. public AutoModEventType EventType { get; } Property Value AutoModEventType ExemptChannels Gets a collection of channel ids that are exempt from this rule. Empty if the rule has no exempt channels. public IReadOnlyCollection<ulong> ExemptChannels { get; } Property Value IReadOnlyCollection<ulong> ExemptRoles Gets a collection of role ids that are exempt from this rule. Empty if the rule has no exempt roles. public IReadOnlyCollection<ulong> ExemptRoles { get; } Property Value IReadOnlyCollection<ulong> GuildId Gets the guild id on which this rule exists. public ulong GuildId { get; } Property Value ulong KeywordFilter Gets the keyword filter for this rule. public IReadOnlyCollection<string> KeywordFilter { get; } Property Value IReadOnlyCollection<string> Remarks This collection will be empty if TriggerType is not Keyword. MentionTotalLimit Gets the total mention limit for this rule. public int? MentionTotalLimit { get; } Property Value int? Remarks This property will be null if TriggerType is not MentionSpam. Name Get the name of this rule. public string Name { get; } Property Value string Presets Gets the preset keyword types for this rule. Empty if the rule has no presets. public IReadOnlyCollection<KeywordPresetTypes> Presets { get; } Property Value IReadOnlyCollection<KeywordPresetTypes> Remarks This collection will be empty if TriggerType is not KeywordPreset. RegexPatterns Gets regex patterns for this rule. Empty if the rule has no regexes. public IReadOnlyCollection<string> RegexPatterns { get; } Property Value IReadOnlyCollection<string> Remarks This collection will be empty if TriggerType is not Keyword. TriggerType Gets the trigger type on which this rule executes. public AutoModTriggerType TriggerType { get; } Property Value AutoModTriggerType Methods DeleteAsync(RequestOptions) Deletes this object and all its children. public Task DeleteAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task ModifyAsync(Action<AutoModRuleProperties>, RequestOptions) Modifies this rule. public Task ModifyAsync(Action<AutoModRuleProperties> func, RequestOptions options = null) Parameters func Action<AutoModRuleProperties> The delegate containing the properties to modify the rule with. options RequestOptions The options to be used when sending the request. Returns Task"
  },
  "api/Discord.Rest.RestAutocompleteInteraction.html": {
    "href": "api/Discord.Rest.RestAutocompleteInteraction.html",
    "title": "Class RestAutocompleteInteraction | Discord.Net Documentation",
    "keywords": "Class RestAutocompleteInteraction Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based autocomplete interaction. public class RestAutocompleteInteraction : RestInteraction, IAutocompleteInteraction, IDiscordInteraction, ISnowflakeEntity, IEntity<ulong> Inheritance object RestEntity<ulong> RestInteraction RestAutocompleteInteraction Implements IAutocompleteInteraction IDiscordInteraction ISnowflakeEntity IEntity<ulong> Inherited Members RestInteraction.Type RestInteraction.Token RestInteraction.Version RestInteraction.User RestInteraction.UserLocale RestInteraction.GuildLocale RestInteraction.CreatedAt RestInteraction.IsValidToken RestInteraction.Channel RestInteraction.ChannelId RestInteraction.Guild RestInteraction.GuildId RestInteraction.HasResponded RestInteraction.IsDMInteraction RestInteraction.ApplicationId RestInteraction.Entitlements RestInteraction.GetChannelAsync(RequestOptions) RestInteraction.GetGuildAsync(RequestOptions) RestInteraction.GetOriginalResponseAsync(RequestOptions) RestInteraction.ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) RestInteraction.DeleteOriginalResponseAsync(RequestOptions) RestInteraction.RespondWithPremiumRequiredAsync(RequestOptions) RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, InteractionService, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, T, RequestOptions, Action<ModalBuilder>) RestExtensions.RespondWithModal<T>(RestInteraction, string, RequestOptions, Action<ModalBuilder>) RestExtensions.RespondWithModal<T>(RestInteraction, string, T, RequestOptions, Action<ModalBuilder>) Properties Data Gets the autocomplete data of this interaction. public RestAutocompleteInteractionData Data { get; } Property Value RestAutocompleteInteractionData Methods Defer(bool, RequestOptions) public override string Defer(bool ephemeral = false, RequestOptions options = null) Parameters ephemeral bool options RequestOptions Returns string FollowupAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupAsync(string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupWithFileAsync(FileAttachment attachment, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachment FileAttachment The attachment containing the file and description. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupWithFileAsync(Stream fileStream, string fileName, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters fileStream Stream The file to upload. fileName string The file name of the attachment. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupWithFileAsync(string filePath, string fileName = null, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters filePath string The file to upload. fileName string The file name of the attachment. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupWithFilesAsync(IEnumerable<FileAttachment> attachments, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Respond(RequestOptions, params AutocompleteResult[]) Responds to this interaction with a set of choices. public string Respond(RequestOptions options = null, params AutocompleteResult[] result) Parameters options RequestOptions The request options for this response. result AutocompleteResult[] The set of choices for the user to pick from. A max of 25 choices are allowed. Passing null for this argument will show the executing user that there is no choices for their autocompleted input. Returns string A string that contains json to write back to the incoming http request. Respond(IEnumerable<AutocompleteResult>, RequestOptions) Responds to this interaction with a set of choices. public string Respond(IEnumerable<AutocompleteResult> result, RequestOptions options = null) Parameters result IEnumerable<AutocompleteResult> The set of choices for the user to pick from. A max of 25 choices are allowed. Passing null for this argument will show the executing user that there is no choices for their autocompleted input. options RequestOptions The request options for this response. Returns string A string that contains json to write back to the incoming http request. Respond(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) public override string Respond(string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters text string embeds Embed[] isTTS bool ephemeral bool allowedMentions AllowedMentions components MessageComponent embed Embed options RequestOptions Returns string RespondWithModal(Modal, RequestOptions) public override string RespondWithModal(Modal modal, RequestOptions options = null) Parameters modal Modal options RequestOptions Returns string"
  },
  "api/Discord.Rest.RestAutocompleteInteractionData.html": {
    "href": "api/Discord.Rest.RestAutocompleteInteractionData.html",
    "title": "Class RestAutocompleteInteractionData | Discord.Net Documentation",
    "keywords": "Class RestAutocompleteInteractionData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents the data for a RestAutocompleteInteraction. public class RestAutocompleteInteractionData : IAutocompleteInteractionData, IDiscordInteractionData Inheritance object RestAutocompleteInteractionData Implements IAutocompleteInteractionData IDiscordInteractionData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CommandId Gets the id of the invoked command. public ulong CommandId { get; } Property Value ulong CommandName Gets the name of the invoked command. public string CommandName { get; } Property Value string Current Gets the current autocomplete option that is actively being filled out. public AutocompleteOption Current { get; } Property Value AutocompleteOption Options Gets a collection of all the other options the executing users has filled out. public IReadOnlyCollection<AutocompleteOption> Options { get; } Property Value IReadOnlyCollection<AutocompleteOption> Type Gets the type of the invoked command. public ApplicationCommandType Type { get; } Property Value ApplicationCommandType Version Gets the version of the invoked command. public ulong Version { get; } Property Value ulong"
  },
  "api/Discord.Rest.RestBan.html": {
    "href": "api/Discord.Rest.RestBan.html",
    "title": "Class RestBan | Discord.Net Documentation",
    "keywords": "Class RestBan Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based ban object. public class RestBan : IBan Inheritance object RestBan Implements IBan Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Reason Gets the reason why the user is banned if specified. public string Reason { get; } Property Value string A string containing the reason behind the ban; null if none is specified. User Gets the banned user. public RestUser User { get; } Property Value RestUser A generic RestUser object that was banned. Methods ToString() Gets the name of the banned user. public override string ToString() Returns string A string containing the name of the user that was banned."
  },
  "api/Discord.Rest.RestCategoryChannel.html": {
    "href": "api/Discord.Rest.RestCategoryChannel.html",
    "title": "Class RestCategoryChannel | Discord.Net Documentation",
    "keywords": "Class RestCategoryChannel Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based category channel. public class RestCategoryChannel : RestGuildChannel, IUpdateable, ICategoryChannel, IGuildChannel, IChannel, ISnowflakeEntity, IEntity<ulong>, IDeletable Inheritance object RestEntity<ulong> RestChannel RestGuildChannel RestCategoryChannel Implements IUpdateable ICategoryChannel IGuildChannel IChannel ISnowflakeEntity IEntity<ulong> IDeletable Inherited Members RestGuildChannel.PermissionOverwrites RestGuildChannel.Name RestGuildChannel.Position RestGuildChannel.GuildId RestGuildChannel.Flags RestGuildChannel.UpdateAsync(RequestOptions) RestGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions) RestGuildChannel.DeleteAsync(RequestOptions) RestGuildChannel.GetPermissionOverwrite(IUser) RestGuildChannel.GetPermissionOverwrite(IRole) RestGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions) RestGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) RestGuildChannel.ToString() RestChannel.CreatedAt RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel)"
  },
  "api/Discord.Rest.RestChannel.html": {
    "href": "api/Discord.Rest.RestChannel.html",
    "title": "Class RestChannel | Discord.Net Documentation",
    "keywords": "Class RestChannel Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a generic REST-based channel. public class RestChannel : RestEntity<ulong>, IChannel, ISnowflakeEntity, IEntity<ulong>, IUpdateable Inheritance object RestEntity<ulong> RestChannel Implements IChannel ISnowflakeEntity IEntity<ulong> IUpdateable Derived RestDMChannel RestGroupChannel RestGuildChannel Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties CreatedAt Gets when the snowflake was created. public virtual DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. Methods UpdateAsync(RequestOptions) Updates this object's properties with its current state. public virtual Task UpdateAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task"
  },
  "api/Discord.Rest.RestCommandBase.html": {
    "href": "api/Discord.Rest.RestCommandBase.html",
    "title": "Class RestCommandBase | Discord.Net Documentation",
    "keywords": "Class RestCommandBase Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based base command interaction. public class RestCommandBase : RestInteraction, IDiscordInteraction, ISnowflakeEntity, IEntity<ulong> Inheritance object RestEntity<ulong> RestInteraction RestCommandBase Implements IDiscordInteraction ISnowflakeEntity IEntity<ulong> Derived RestMessageCommand RestSlashCommand RestUserCommand Inherited Members RestInteraction.Type RestInteraction.Data RestInteraction.Token RestInteraction.Version RestInteraction.User RestInteraction.UserLocale RestInteraction.GuildLocale RestInteraction.CreatedAt RestInteraction.IsValidToken RestInteraction.Channel RestInteraction.ChannelId RestInteraction.Guild RestInteraction.GuildId RestInteraction.HasResponded RestInteraction.IsDMInteraction RestInteraction.ApplicationId RestInteraction.Entitlements RestInteraction.GetChannelAsync(RequestOptions) RestInteraction.GetGuildAsync(RequestOptions) RestInteraction.GetOriginalResponseAsync(RequestOptions) RestInteraction.ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) RestInteraction.DeleteOriginalResponseAsync(RequestOptions) RestInteraction.RespondWithPremiumRequiredAsync(RequestOptions) RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, InteractionService, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, T, RequestOptions, Action<ModalBuilder>) RestExtensions.RespondWithModal<T>(RestInteraction, string, RequestOptions, Action<ModalBuilder>) RestExtensions.RespondWithModal<T>(RestInteraction, string, T, RequestOptions, Action<ModalBuilder>) Properties CommandId Gets the id of the invoked command. public ulong CommandId { get; } Property Value ulong CommandName Gets the name of the invoked command. public string CommandName { get; } Property Value string Methods Defer(bool, RequestOptions) Acknowledges this interaction with the DeferredChannelMessageWithSource. public override string Defer(bool ephemeral = false, RequestOptions options = null) Parameters ephemeral bool options RequestOptions Returns string A string that contains json to write back to the incoming http request. FollowupAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupAsync(string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupWithFileAsync(FileAttachment attachment, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachment FileAttachment The attachment containing the file and description. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupWithFileAsync(Stream fileStream, string fileName, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters fileStream Stream The file to upload. fileName string The file name of the attachment. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupWithFileAsync(string filePath, string fileName = null, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters filePath string The file to upload. fileName string The file name of the attachment. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupWithFilesAsync(IEnumerable<FileAttachment> attachments, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Respond(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Responds to an Interaction with type ChannelMessageWithSource. public override string Respond(string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns string A string that contains json to write back to the incoming http request. Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. InvalidOperationException The parameters provided were invalid or the token was invalid. RespondWithModal(Modal, RequestOptions) Responds to the interaction with a modal. public override string RespondWithModal(Modal modal, RequestOptions options = null) Parameters modal Modal The modal to respond with. options RequestOptions The request options for this async request. Returns string A string that contains json to write back to the incoming http request. Exceptions TimeoutException InvalidOperationException"
  },
  "api/Discord.Rest.RestCommandBaseData-1.html": {
    "href": "api/Discord.Rest.RestCommandBaseData-1.html",
    "title": "Class RestCommandBaseData<TOption> | Discord.Net Documentation",
    "keywords": "Class RestCommandBaseData<TOption> Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents the base data tied with the RestCommandBase interaction. public class RestCommandBaseData<TOption> : RestEntity<ulong>, IEntity<ulong>, IApplicationCommandInteractionData, IDiscordInteractionData where TOption : IApplicationCommandInteractionDataOption Type Parameters TOption Inheritance object RestEntity<ulong> RestCommandBaseData<TOption> Implements IEntity<ulong> IApplicationCommandInteractionData IDiscordInteractionData Derived RestCommandBaseData RestSlashCommandData Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets the name of this command. public string Name { get; } Property Value string Options Gets a collection of TOption received with this interaction. public virtual IReadOnlyCollection<TOption> Options { get; } Property Value IReadOnlyCollection<TOption>"
  },
  "api/Discord.Rest.RestCommandBaseData.html": {
    "href": "api/Discord.Rest.RestCommandBaseData.html",
    "title": "Class RestCommandBaseData | Discord.Net Documentation",
    "keywords": "Class RestCommandBaseData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents the base data tied with the RestCommandBase interaction. public class RestCommandBaseData : RestCommandBaseData<IApplicationCommandInteractionDataOption>, IEntity<ulong>, IApplicationCommandInteractionData, IDiscordInteractionData Inheritance object RestEntity<ulong> RestCommandBaseData<IApplicationCommandInteractionDataOption> RestCommandBaseData Implements IEntity<ulong> IApplicationCommandInteractionData IDiscordInteractionData Derived RestMessageCommandData RestUserCommandData Inherited Members RestCommandBaseData<IApplicationCommandInteractionDataOption>.Name RestCommandBaseData<IApplicationCommandInteractionDataOption>.Options RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Discord.Rest.RestConnection.html": {
    "href": "api/Discord.Rest.RestConnection.html",
    "title": "Class RestConnection | Discord.Net Documentation",
    "keywords": "Class RestConnection Namespace Discord.Rest Assembly Discord.Net.Rest.dll public class RestConnection : IConnection Inheritance object RestConnection Implements IConnection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties FriendSync Gets whether friend sync is enabled for this connection. public bool FriendSync { get; } Property Value bool Id Gets the ID of the connection account. public string Id { get; } Property Value string A string representing the unique identifier value of this connection. Integrations Gets a IReadOnlyCollection<T> of integration partials. public IReadOnlyCollection<IIntegration> Integrations { get; } Property Value IReadOnlyCollection<IIntegration> IsRevoked Gets whether the connection is revoked. public bool? IsRevoked { get; } Property Value bool? A value which if true indicates that this connection has been revoked, otherwise false. Name Gets the username of the connection account. public string Name { get; } Property Value string A string containing the name of this connection. ShowActivity Gets whether activities related to this connection will be shown in presence updates. public bool ShowActivity { get; } Property Value bool Type Gets the service of the connection (twitch, youtube). public string Type { get; } Property Value string A string containing the name of this type of connection. Verified Gets whether the connection is verified. public bool Verified { get; } Property Value bool Visibility Visibility of this connection. public ConnectionVisibility Visibility { get; } Property Value ConnectionVisibility Methods ToString() Gets the name of the connection. public override string ToString() Returns string Name of the connection."
  },
  "api/Discord.Rest.RestDMChannel.html": {
    "href": "api/Discord.Rest.RestDMChannel.html",
    "title": "Class RestDMChannel | Discord.Net Documentation",
    "keywords": "Class RestDMChannel Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based direct-message channel. public class RestDMChannel : RestChannel, IUpdateable, IDMChannel, IRestPrivateChannel, IPrivateChannel, IRestMessageChannel, IMessageChannel, IChannel, ISnowflakeEntity, IEntity<ulong> Inheritance object RestEntity<ulong> RestChannel RestDMChannel Implements IUpdateable IDMChannel IRestPrivateChannel IPrivateChannel IRestMessageChannel IMessageChannel IChannel ISnowflakeEntity IEntity<ulong> Inherited Members RestChannel.CreatedAt RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties CurrentUser Gets the current logged-in user. public RestUser CurrentUser { get; } Property Value RestUser Recipient Gets the recipient of the channel. public RestUser Recipient { get; } Property Value RestUser Users Gets a collection that is the current logged-in user and the recipient. public IReadOnlyCollection<RestUser> Users { get; } Property Value IReadOnlyCollection<RestUser> Methods CloseAsync(RequestOptions) Closes this private channel, removing it from your channel list. public Task CloseAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous close operation. DeleteMessageAsync(IMessage, RequestOptions) Deletes a message based on the provided message in this channel. public Task DeleteMessageAsync(IMessage message, RequestOptions options = null) Parameters message IMessage The message that would be removed. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. DeleteMessageAsync(ulong, RequestOptions) Deletes a message. public Task DeleteMessageAsync(ulong messageId, RequestOptions options = null) Parameters messageId ulong The snowflake identifier of the message that would be removed. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. EnterTypingState(RequestOptions) Continuously broadcasts the \"user is typing\" message to all users in this channel until the returned object is disposed. public IDisposable EnterTypingState(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns IDisposable A disposable object that, upon its disposal, will stop the client from broadcasting its typing state in this channel. Examples The following example keeps the client in the typing state until LongRunningAsync has finished. using (channel.EnterTypingState()) await LongRunningAsync(); GetMessageAsync(ulong, RequestOptions) Gets a message from this message channel. public Task<RestMessage> GetMessageAsync(ulong id, RequestOptions options = null) Parameters id ulong The snowflake identifier of the message. options RequestOptions The options to be used when sending the request. Returns Task<RestMessage> A task that represents an asynchronous get operation for retrieving the message. The task result contains the retrieved message; null if no message is found with the specified identifier. Remarks This method follows the same behavior as described in GetMessageAsync(ulong, CacheMode, RequestOptions). Please visit its documentation for more details on this method. GetMessagesAsync(IMessage, Direction, int, RequestOptions) Gets a collection of messages in this channel. public IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(IMessage fromMessage, Direction dir, int limit = 100, RequestOptions options = null) Parameters fromMessage IMessage The starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions). Please visit its documentation for more details on this method. GetMessagesAsync(int, RequestOptions) Gets the last N messages from this message channel. public IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(int limit = 100, RequestOptions options = null) Parameters limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(int, CacheMode, RequestOptions). Please visit its documentation for more details on this method. GetMessagesAsync(ulong, Direction, int, RequestOptions) Gets a collection of messages in this channel. public IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(ulong fromMessageId, Direction dir, int limit = 100, RequestOptions options = null) Parameters fromMessageId ulong The ID of the starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(ulong, Direction, int, CacheMode, RequestOptions). Please visit its documentation for more details on this method. GetPinnedMessagesAsync(RequestOptions) Gets a collection of pinned messages in this channel. public Task<IReadOnlyCollection<RestMessage>> GetPinnedMessagesAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestMessage>> A task that represents the asynchronous get operation for retrieving pinned messages in this channel. The task result contains a collection of messages found in the pinned messages. Remarks This method follows the same behavior as described in GetPinnedMessagesAsync(RequestOptions). Please visit its documentation for more details on this method. GetUser(ulong) Gets a user in this channel from the provided id. public RestUser GetUser(ulong id) Parameters id ulong The snowflake identifier of the user. Returns RestUser A RestUser object that is a recipient of this channel; otherwise null. ModifyMessageAsync(ulong, Action<MessageProperties>, RequestOptions) Modifies a message. public Task<IUserMessage> ModifyMessageAsync(ulong messageId, Action<MessageProperties> func, RequestOptions options = null) Parameters messageId ulong The snowflake identifier of the message that would be changed. func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The options to be used when sending the request. Returns Task<IUserMessage> A task that represents the asynchronous modification operation. Remarks This method modifies this message with the specified properties. To see an example of this method and what properties are available, please refer to MessageProperties. SendFileAsync(FileAttachment, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a file to this message channel with an optional caption. public Task<RestUserMessage> SendFileAsync(FileAttachment attachment, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters attachment FileAttachment The attachment containing the file and description. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Remarks This method sends a file as if you are uploading an attachment directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. SendFileAsync(Stream, string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a file to this message channel with an optional caption. public Task<RestUserMessage> SendFileAsync(Stream stream, string filename, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters stream Stream The Stream of the file to be sent. filename string The name of the attachment. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. isSpoiler bool Whether the message attachment should be hidden as a spoiler. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example uploads a streamed image that will be called b1nzy.jpg embedded inside a rich embed to the channel. using (var b1nzyStream = await httpClient.GetStreamAsync(\"https://example.com/b1nzy\")) await channel.SendFileAsync(b1nzyStream, \"b1nzy.jpg\", embed: new EmbedBuilder { ImageUrl = \"attachment://b1nzy.jpg\" }.Build()); Remarks This method sends a file as if you are uploading an attachment directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. SendFileAsync(string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a file to this message channel with an optional caption. public Task<RestUserMessage> SendFileAsync(string filePath, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters filePath string The file path of the file. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. isSpoiler bool Whether the message attachment should be hidden as a spoiler. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example uploads a local file called wumpus.txt along with the text good discord boi to the channel. await channel.SendFileAsync(\"wumpus.txt\", \"good discord boi\"); The following example uploads a local image called b1nzy.jpg embedded inside a rich embed to the channel. await channel.SendFileAsync(\"b1nzy.jpg\", embed: new EmbedBuilder { ImageUrl = \"attachment://b1nzy.jpg\" }.Build()); Remarks This method sends a file as if you are uploading an attachment directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. Exceptions ArgumentException filePath is a zero-length string, contains only white space, or contains one or more invalid characters as defined by GetInvalidPathChars(). ArgumentNullException filePath is null. PathTooLongException The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. DirectoryNotFoundException The specified path is invalid, (for example, it is on an unmapped drive). UnauthorizedAccessException filePath specified a directory.-or- The caller does not have the required permission. FileNotFoundException The file specified in filePath was not found. NotSupportedException filePath is in an invalid format. IOException An I/O error occurred while opening the file. ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. ArgumentException The only valid MessageFlags are SuppressEmbeds and None. SendFilesAsync(IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a collection of files to this message channel. public Task<RestUserMessage> SendFilesAsync(IEnumerable<FileAttachment> attachments, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Remarks This method sends files as if you are uploading attachments directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. SendMessageAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a message to this message channel. public Task<RestUserMessage> SendMessageAsync(string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters text string The message to be sent. isTTS bool Determines whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the message. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example sends a message with the current system time in RFC 1123 format to the channel and deletes itself after 5 seconds. var message = await channel.SendMessageAsync(DateTimeOffset.UtcNow.ToString(\"R\")); await Task.Delay(TimeSpan.FromSeconds(5)) .ContinueWith(x => message.DeleteAsync()); Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. ArgumentException The only valid MessageFlags are SuppressEmbeds and None. ToString() Gets a string that represents the Username#Discriminator of the recipient. public override string ToString() Returns string A string that resolves to the Recipient of this channel. TriggerTypingAsync(RequestOptions) Broadcasts the \"user is typing\" message to all users in this channel, lasting 10 seconds. public Task TriggerTypingAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation that triggers the broadcast. UpdateAsync(RequestOptions) Updates this object's properties with its current state. public override Task UpdateAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task"
  },
  "api/Discord.Rest.RestEntitlement.html": {
    "href": "api/Discord.Rest.RestEntitlement.html",
    "title": "Class RestEntitlement | Discord.Net Documentation",
    "keywords": "Class RestEntitlement Namespace Discord.Rest Assembly Discord.Net.Rest.dll public class RestEntitlement : RestEntity<ulong>, IEntitlement, ISnowflakeEntity, IEntity<ulong> Inheritance object RestEntity<ulong> RestEntitlement Implements IEntitlement ISnowflakeEntity IEntity<ulong> Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ApplicationId Gets the ID of the parent application. public ulong ApplicationId { get; } Property Value ulong CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. EndsAt Gets the end date at which the entitlement is no longer valid. public DateTimeOffset? EndsAt { get; } Property Value DateTimeOffset? Remarks null when using test entitlements. GuildId Gets the ID of the guild that is granted access to the entitlement's SKU. public ulong? GuildId { get; } Property Value ulong? Remarks null if the entitlement is for a user. IsConsumed Gets whether this entitlement has been consumed. public bool IsConsumed { get; } Property Value bool Remarks Not applicable for App Subscriptions. SkuId Gets the ID of the SKU this entitlement is for. public ulong SkuId { get; } Property Value ulong StartsAt Gets the start date at which the entitlement is valid. public DateTimeOffset? StartsAt { get; } Property Value DateTimeOffset? Remarks null when using test entitlements. Type Gets the type of the entitlement. public EntitlementType Type { get; } Property Value EntitlementType UserId Gets the ID of the user that is granted access to the entitlement's SKU. public ulong? UserId { get; } Property Value ulong? Remarks null if the entitlement is for a guild."
  },
  "api/Discord.Rest.RestEntity-1.html": {
    "href": "api/Discord.Rest.RestEntity-1.html",
    "title": "Class RestEntity<T> | Discord.Net Documentation",
    "keywords": "Class RestEntity<T> Namespace Discord.Rest Assembly Discord.Net.Rest.dll public abstract class RestEntity<T> : IEntity<T> where T : IEquatable<T> Type Parameters T Inheritance object RestEntity<T> Implements IEntity<T> Derived RestApplication RestApplicationCommand RestAuditLogEntry RestAutoModRule RestChannel RestCommandBaseData<TOption> RestEntitlement RestGuild RestGuildEvent RestGuildOnboardingPrompt RestGuildOnboardingPromptOption RestIntegration RestIntegrationApplication RestInteraction RestInvite RestMessage RestRole RestTeam RestThreadUser RestUser RestUserGuild RestVoiceRegion RestWebhook Sticker StickerItem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id Gets the unique identifier for this object. public T Id { get; } Property Value T"
  },
  "api/Discord.Rest.RestExtensions.html": {
    "href": "api/Discord.Rest.RestExtensions.html",
    "title": "Class RestExtensions | Discord.Net Documentation",
    "keywords": "Class RestExtensions Namespace Discord.Rest Assembly Discord.Net.Interactions.dll public static class RestExtensions Inheritance object RestExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RespondWithModal<T>(RestInteraction, string, RequestOptions, Action<ModalBuilder>) Respond to an interaction with a IModal. public static string RespondWithModal<T>(this RestInteraction interaction, string customId, RequestOptions options = null, Action<ModalBuilder> modifyModal = null) where T : class, IModal Parameters interaction RestInteraction The interaction to respond to. customId string options RequestOptions The request options for this async request. modifyModal Action<ModalBuilder> Returns string Serialized payload to be used to create a HTTP response. Type Parameters T Type of the IModal implementation. RespondWithModal<T>(RestInteraction, string, T, RequestOptions, Action<ModalBuilder>) Respond to an interaction with an IModal. public static string RespondWithModal<T>(this RestInteraction interaction, string customId, T modal, RequestOptions options = null, Action<ModalBuilder> modifyModal = null) where T : class, IModal Parameters interaction RestInteraction The interaction to respond to. customId string modal T The IModal instance to get field values from. options RequestOptions The request options for this async request. modifyModal Action<ModalBuilder> Delegate that can be used to modify the modal. Returns string Serialized payload to be used to create a HTTP response. Type Parameters T Type of the IModal implementation."
  },
  "api/Discord.Rest.RestFollowupMessage.html": {
    "href": "api/Discord.Rest.RestFollowupMessage.html",
    "title": "Class RestFollowupMessage | Discord.Net Documentation",
    "keywords": "Class RestFollowupMessage Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based follow up message sent by a bot responding to an interaction. public class RestFollowupMessage : RestUserMessage, IUpdateable, IUserMessage, IMessage, ISnowflakeEntity, IEntity<ulong>, IDeletable Inheritance object RestEntity<ulong> RestMessage RestUserMessage RestFollowupMessage Implements IUpdateable IUserMessage IMessage ISnowflakeEntity IEntity<ulong> IDeletable Inherited Members RestUserMessage.IsTTS RestUserMessage.IsPinned RestUserMessage.IsSuppressed RestUserMessage.EditedTimestamp RestUserMessage.MentionedEveryone RestUserMessage.Attachments RestUserMessage.Embeds RestUserMessage.MentionedChannelIds RestUserMessage.MentionedRoleIds RestUserMessage.Tags RestUserMessage.Stickers RestUserMessage.ReferencedMessage RestUserMessage.ResolvedData RestUserMessage.PinAsync(RequestOptions) RestUserMessage.UnpinAsync(RequestOptions) RestUserMessage.Resolve(int, TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) RestUserMessage.Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) RestUserMessage.CrosspostAsync(RequestOptions) RestMessage.Channel RestMessage.Author RestMessage.Source RestMessage.Content RestMessage.CleanContent RestMessage.CreatedAt RestMessage.Thread RestMessage.Timestamp RestMessage.Activity RestMessage.Application RestMessage.Reference RestMessage.Interaction RestMessage.Flags RestMessage.Type RestMessage.RoleSubscriptionData RestMessage.Components RestMessage.MentionedUsers RestMessage.UpdateAsync(RequestOptions) RestMessage.DeleteAsync(RequestOptions) RestMessage.ToString() RestMessage.Reactions RestMessage.AddReactionAsync(IEmote, RequestOptions) RestMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions) RestMessage.RemoveReactionAsync(IEmote, ulong, RequestOptions) RestMessage.RemoveAllReactionsAsync(RequestOptions) RestMessage.RemoveAllReactionsForEmoteAsync(IEmote, RequestOptions) RestMessage.GetReactionUsersAsync(IEmote, int, RequestOptions, ReactionType) RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods MessageExtensions.GetJumpUrl(IMessage) MessageExtensions.HasCharPrefix(IUserMessage, char, ref int) MessageExtensions.HasMentionPrefix(IUserMessage, IUser, ref int) MessageExtensions.HasStringPrefix(IUserMessage, string, ref int, StringComparison) MessageExtensions.AddReactionsAsync(IUserMessage, IEnumerable<IEmote>, RequestOptions) MessageExtensions.RemoveReactionsAsync(IUserMessage, IUser, IEnumerable<IEmote>, RequestOptions) MessageExtensions.ReplyAsync(IUserMessage, string, bool, Embed, AllowedMentions, RequestOptions, MessageComponent, ISticker[], Embed[], MessageFlags) Methods DeleteAsync() Deletes this object and all of it's children. public Task DeleteAsync() Returns Task A task that represents the asynchronous delete operation. ModifyAsync(Action<MessageProperties>, RequestOptions) Modifies this interaction followup message. public Task ModifyAsync(Action<MessageProperties> func, RequestOptions options = null) Parameters func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Examples The following example replaces the content of the message with Hello World!. await msg.ModifyAsync(x => x.Content = \"Hello World!\"); Remarks This method modifies this message with the specified properties. To see an example of this method and what properties are available, please refer to MessageProperties. Exceptions InvalidOperationException The token used to modify/delete this message expired. HttpException Something went wrong during the request."
  },
  "api/Discord.Rest.RestForumChannel.html": {
    "href": "api/Discord.Rest.RestForumChannel.html",
    "title": "Class RestForumChannel | Discord.Net Documentation",
    "keywords": "Class RestForumChannel Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based forum channel in a guild. public class RestForumChannel : RestGuildChannel, IUpdateable, IForumChannel, IMentionable, INestedChannel, IIntegrationChannel, IGuildChannel, IChannel, ISnowflakeEntity, IEntity<ulong>, IDeletable Inheritance object RestEntity<ulong> RestChannel RestGuildChannel RestForumChannel Implements IUpdateable IForumChannel IMentionable INestedChannel IIntegrationChannel IGuildChannel IChannel ISnowflakeEntity IEntity<ulong> IDeletable Derived RestMediaChannel Inherited Members RestGuildChannel.PermissionOverwrites RestGuildChannel.Name RestGuildChannel.Position RestGuildChannel.GuildId RestGuildChannel.Flags RestGuildChannel.UpdateAsync(RequestOptions) RestGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions) RestGuildChannel.DeleteAsync(RequestOptions) RestGuildChannel.GetPermissionOverwrite(IUser) RestGuildChannel.GetPermissionOverwrite(IRole) RestGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions) RestGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) RestGuildChannel.ToString() RestChannel.CreatedAt RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties CategoryId Gets the parent (category) ID of this channel in the guild's channel list. public ulong? CategoryId { get; } Property Value ulong? A ulong representing the snowflake identifier of the parent of this channel; null if none is set. DefaultAutoArchiveDuration Gets the default archive duration for a newly created post. public ThreadArchiveDuration DefaultAutoArchiveDuration { get; } Property Value ThreadArchiveDuration DefaultLayout Gets the rule used to display posts in a forum channel. public ForumLayout DefaultLayout { get; } Property Value ForumLayout DefaultReactionEmoji Gets the emoji to show in the add reaction button on a thread in a forum channel public IEmote DefaultReactionEmoji { get; } Property Value IEmote Remarks If the emoji is Emote only the Id will be populated. Use GetEmoteAsync(ulong, RequestOptions) to get the emoji. DefaultSlowModeInterval Gets the current default slow-mode delay for threads in this forum channel. public int DefaultSlowModeInterval { get; } Property Value int An int representing the time in seconds required before the user can send another message; 0 if disabled. DefaultSortOrder Gets the rule used to order posts in forum channels. public ForumSortOrder? DefaultSortOrder { get; } Property Value ForumSortOrder? Remarks Defaults to null, which indicates a preferred sort order hasn't been set IsNsfw Gets a value that indicates whether the channel is NSFW. public bool IsNsfw { get; } Property Value bool true if the channel has the NSFW flag enabled; otherwise false. Mention Returns a special string used to mention this object. public string Mention { get; } Property Value string A string that is recognized by Discord as a mention (e.g. <@168693960628371456>). Tags Gets a collection of tags inside of this forum channel. public IReadOnlyCollection<ForumTag> Tags { get; } Property Value IReadOnlyCollection<ForumTag> ThreadCreationInterval Gets the current rate limit on creating posts in this forum channel. public int ThreadCreationInterval { get; } Property Value int An int representing the time in seconds required before the user can send another message; 0 if disabled. Topic Gets the current topic for this text channel. public string Topic { get; } Property Value string A string representing the topic set in the channel; null if none is set. Methods CreateInviteAsync(int?, int?, bool, bool, RequestOptions) Creates a new invite to this channel. public virtual Task<IInviteMetadata> CreateInviteAsync(int? maxAge = 86400, int? maxUses = null, bool isTemporary = false, bool isUnique = false, RequestOptions options = null) Parameters maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. isTemporary bool If true, the user accepting this invite will be kicked from the guild after closing their client. isUnique bool If true, don't try to reuse a similar invite (useful for creating many unique one time use invites). options RequestOptions The options to be used when sending the request. Returns Task<IInviteMetadata> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. Examples The following example creates a new invite to this channel; the invite lasts for 12 hours and can only be used 3 times throughout its lifespan. await guildChannel.CreateInviteAsync(maxAge: 43200, maxUses: 3); CreateInviteToApplicationAsync(DefaultApplications, int?, int?, bool, bool, RequestOptions) Creates a new invite to this channel. public virtual Task<IInviteMetadata> CreateInviteToApplicationAsync(DefaultApplications application, int? maxAge = 86400, int? maxUses = null, bool isTemporary = false, bool isUnique = false, RequestOptions options = null) Parameters application DefaultApplications The application to open for this invite. maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. isTemporary bool If true, the user accepting this invite will be kicked from the guild after closing their client. isUnique bool If true, don't try to reuse a similar invite (useful for creating many unique one time use invites). options RequestOptions The options to be used when sending the request. Returns Task<IInviteMetadata> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. CreateInviteToApplicationAsync(ulong, int?, int?, bool, bool, RequestOptions) Creates a new invite to this channel. public virtual Task<IInviteMetadata> CreateInviteToApplicationAsync(ulong applicationId, int? maxAge = 86400, int? maxUses = null, bool isTemporary = false, bool isUnique = false, RequestOptions options = null) Parameters applicationId ulong The id of the embedded application to open for this invite. maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. isTemporary bool If true, the user accepting this invite will be kicked from the guild after closing their client. isUnique bool If true, don't try to reuse a similar invite (useful for creating many unique one time use invites). options RequestOptions The options to be used when sending the request. Returns Task<IInviteMetadata> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. CreateInviteToStreamAsync(IUser, int?, int?, bool, bool, RequestOptions) Creates a new invite to this channel. public virtual Task<IInviteMetadata> CreateInviteToStreamAsync(IUser user, int? maxAge, int? maxUses = null, bool isTemporary = false, bool isUnique = false, RequestOptions options = null) Parameters user IUser The id of the user whose stream to display for this invite. maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. isTemporary bool If true, the user accepting this invite will be kicked from the guild after closing their client. isUnique bool If true, don't try to reuse a similar invite (useful for creating many unique one time use invites). options RequestOptions The options to be used when sending the request. Returns Task<IInviteMetadata> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. Examples The following example creates a new invite to this channel; the invite lasts for 12 hours and can only be used 3 times throughout its lifespan. await guildChannel.CreateInviteAsync(maxAge: 43200, maxUses: 3); CreatePostAsync(string, ThreadArchiveDuration, int?, string, Embed, RequestOptions, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) Creates a new post (thread) within the forum. public Task<RestThreadChannel> CreatePostAsync(string title, ThreadArchiveDuration archiveDuration = ThreadArchiveDuration.OneDay, int? slowmode = null, string text = null, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None, ForumTag[] tags = null) Parameters title string The title of the post. archiveDuration ThreadArchiveDuration The archive duration of the post. slowmode int? The slowmode for the posts thread. text string The message to be sent. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the message. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds is permitted. tags ForumTag[] An array of ForumTag to be applied to the post. Returns Task<RestThreadChannel> A task that represents the asynchronous creation operation. CreatePostWithFileAsync(string, FileAttachment, ThreadArchiveDuration, int?, string, Embed, RequestOptions, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) Creates a new post (thread) within the forum. public Task<RestThreadChannel> CreatePostWithFileAsync(string title, FileAttachment attachment, ThreadArchiveDuration archiveDuration = ThreadArchiveDuration.OneDay, int? slowmode = null, string text = null, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None, ForumTag[] tags = null) Parameters title string The title of the post. attachment FileAttachment The attachment containing the file and description. archiveDuration ThreadArchiveDuration The archive duration of the post. slowmode int? The slowmode for the posts thread. text string The message to be sent. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds is permitted. tags ForumTag[] An array of ForumTag to be applied to the post. Returns Task<RestThreadChannel> A task that represents the asynchronous creation operation. CreatePostWithFileAsync(string, Stream, string, ThreadArchiveDuration, int?, string, Embed, RequestOptions, bool, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) Creates a new post (thread) within the forum. public Task<RestThreadChannel> CreatePostWithFileAsync(string title, Stream stream, string filename, ThreadArchiveDuration archiveDuration = ThreadArchiveDuration.OneDay, int? slowmode = null, string text = null, Embed embed = null, RequestOptions options = null, bool isSpoiler = false, AllowedMentions allowedMentions = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None, ForumTag[] tags = null) Parameters title string The title of the post. stream Stream The Stream of the file to be sent. filename string The name of the attachment. archiveDuration ThreadArchiveDuration The archive duration of the post. slowmode int? The slowmode for the posts thread. text string The message to be sent. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. isSpoiler bool Whether the message attachment should be hidden as a spoiler. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds is permitted. tags ForumTag[] An array of ForumTag to be applied to the post. Returns Task<RestThreadChannel> A task that represents the asynchronous creation operation. CreatePostWithFileAsync(string, string, ThreadArchiveDuration, int?, string, Embed, RequestOptions, bool, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) Creates a new post (thread) within the forum. public Task<RestThreadChannel> CreatePostWithFileAsync(string title, string filePath, ThreadArchiveDuration archiveDuration = ThreadArchiveDuration.OneDay, int? slowmode = null, string text = null, Embed embed = null, RequestOptions options = null, bool isSpoiler = false, AllowedMentions allowedMentions = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None, ForumTag[] tags = null) Parameters title string The title of the post. filePath string The file path of the file. archiveDuration ThreadArchiveDuration The archive duration of the post. slowmode int? The slowmode for the posts thread. text string The message to be sent. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. isSpoiler bool Whether the message attachment should be hidden as a spoiler. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds is permitted. tags ForumTag[] An array of ForumTag to be applied to the post. Returns Task<RestThreadChannel> A task that represents the asynchronous creation operation. CreatePostWithFilesAsync(string, IEnumerable<FileAttachment>, ThreadArchiveDuration, int?, string, Embed, RequestOptions, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) Creates a new post (thread) within the forum. public Task<RestThreadChannel> CreatePostWithFilesAsync(string title, IEnumerable<FileAttachment> attachments, ThreadArchiveDuration archiveDuration = ThreadArchiveDuration.OneDay, int? slowmode = null, string text = null, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None, ForumTag[] tags = null) Parameters title string The title of the post. attachments IEnumerable<FileAttachment> A collection of attachments to upload. archiveDuration ThreadArchiveDuration The archive duration of the post. slowmode int? The slowmode for the posts thread. text string The message to be sent. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] An array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds is permitted. tags ForumTag[] An array of ForumTag to be applied to the post. Returns Task<RestThreadChannel> A task that represents the asynchronous creation operation. CreateWebhookAsync(string, Stream, RequestOptions) Creates a webhook in this channel. public Task<RestWebhook> CreateWebhookAsync(string name, Stream avatar = null, RequestOptions options = null) Parameters name string The name of the webhook. avatar Stream The avatar of the webhook. options RequestOptions The options to be used when sending the request. Returns Task<RestWebhook> A task that represents the asynchronous creation operation. The task result contains the newly created webhook. GetActiveThreadsAsync(RequestOptions) Gets a collection of active threads within this channel. public Task<IReadOnlyCollection<RestThreadChannel>> GetActiveThreadsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestThreadChannel>> A task that represents an asynchronous get operation for retrieving the threads. The task result contains a collection of active threads. GetInvitesAsync(RequestOptions) Gets a collection of all invites to this channel. public virtual Task<IReadOnlyCollection<IInviteMetadata>> GetInvitesAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IInviteMetadata>> A task that represents the asynchronous get operation. The task result contains a read-only collection of invite metadata that are created for this channel. Examples The following example gets all of the invites that have been created in this channel and selects the most used invite. var invites = await channel.GetInvitesAsync(); if (invites.Count == 0) return; var invite = invites.OrderByDescending(x => x.Uses).FirstOrDefault(); GetJoinedPrivateArchivedThreadsAsync(int?, DateTimeOffset?, RequestOptions) Gets a collection of privately archived threads that the current bot has joined within this forum channel. public Task<IReadOnlyCollection<RestThreadChannel>> GetJoinedPrivateArchivedThreadsAsync(int? limit = null, DateTimeOffset? before = null, RequestOptions options = null) Parameters limit int? The optional limit of how many to get. before DateTimeOffset? The optional date to return threads created before this timestamp. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestThreadChannel>> A task that represents an asynchronous get operation for retrieving the threads. The task result contains a collection of privately archived threads. GetPrivateArchivedThreadsAsync(int?, DateTimeOffset?, RequestOptions) Gets a collection of privately archived threads within this forum channel. public Task<IReadOnlyCollection<RestThreadChannel>> GetPrivateArchivedThreadsAsync(int? limit = null, DateTimeOffset? before = null, RequestOptions options = null) Parameters limit int? The optional limit of how many to get. before DateTimeOffset? The optional date to return threads created before this timestamp. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestThreadChannel>> A task that represents an asynchronous get operation for retrieving the threads. The task result contains a collection of privately archived threads. Remarks The bot requires the ManageThreads permission in order to execute this request. GetPublicArchivedThreadsAsync(int?, DateTimeOffset?, RequestOptions) Gets a collection of publicly archived threads within this forum channel. public Task<IReadOnlyCollection<RestThreadChannel>> GetPublicArchivedThreadsAsync(int? limit = null, DateTimeOffset? before = null, RequestOptions options = null) Parameters limit int? The optional limit of how many to get. before DateTimeOffset? The optional date to return threads created before this timestamp. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestThreadChannel>> A task that represents an asynchronous get operation for retrieving the threads. The task result contains a collection of publicly archived threads. GetWebhookAsync(ulong, RequestOptions) Gets a webhook available in this channel. public Task<RestWebhook> GetWebhookAsync(ulong id, RequestOptions options = null) Parameters id ulong The identifier of the webhook. options RequestOptions The options to be used when sending the request. Returns Task<RestWebhook> A task that represents the asynchronous get operation. The task result contains a webhook associated with the identifier; null if the webhook is not found. GetWebhooksAsync(RequestOptions) Gets the webhooks available in this channel. public Task<IReadOnlyCollection<RestWebhook>> GetWebhooksAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestWebhook>> A task that represents the asynchronous get operation. The task result contains a read-only collection of webhooks that is available in this channel. ModifyAsync(Action<ForumChannelProperties>, RequestOptions) Modifies this forum channel. public Task ModifyAsync(Action<ForumChannelProperties> func, RequestOptions options = null) Parameters func Action<ForumChannelProperties> The delegate containing the properties to modify the channel with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies the current forum channel with the specified properties. To see an example of this method and what properties are available, please refer to ForumChannelProperties. SyncPermissionsAsync(RequestOptions) Syncs the permissions of this nested channel with its parent's. public Task SyncPermissionsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for syncing channel permissions with its parent's."
  },
  "api/Discord.Rest.RestGlobalCommand.html": {
    "href": "api/Discord.Rest.RestGlobalCommand.html",
    "title": "Class RestGlobalCommand | Discord.Net Documentation",
    "keywords": "Class RestGlobalCommand Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a Rest-based global application command. public class RestGlobalCommand : RestApplicationCommand, IApplicationCommand, ISnowflakeEntity, IEntity<ulong>, IDeletable Inheritance object RestEntity<ulong> RestApplicationCommand RestGlobalCommand Implements IApplicationCommand ISnowflakeEntity IEntity<ulong> IDeletable Inherited Members RestApplicationCommand.ApplicationId RestApplicationCommand.Type RestApplicationCommand.Name RestApplicationCommand.Description RestApplicationCommand.IsDefaultPermission RestApplicationCommand.IsEnabledInDm RestApplicationCommand.IsNsfw RestApplicationCommand.DefaultMemberPermissions RestApplicationCommand.Options RestApplicationCommand.NameLocalizations RestApplicationCommand.DescriptionLocalizations RestApplicationCommand.NameLocalized RestApplicationCommand.DescriptionLocalized RestApplicationCommand.CreatedAt RestApplicationCommand.ModifyAsync(Action<ApplicationCommandProperties>, RequestOptions) RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DeleteAsync(RequestOptions) Deletes this object and all its children. public override Task DeleteAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task ModifyAsync<TArg>(Action<TArg>, RequestOptions) Modifies this RestApplicationCommand. public override Task ModifyAsync<TArg>(Action<TArg> func, RequestOptions options = null) where TArg : ApplicationCommandProperties Parameters func Action<TArg> The delegate containing the properties to modify the command with. options RequestOptions The options to be used when sending the request. Returns Task The modified command. Type Parameters TArg"
  },
  "api/Discord.Rest.RestGroupChannel.html": {
    "href": "api/Discord.Rest.RestGroupChannel.html",
    "title": "Class RestGroupChannel | Discord.Net Documentation",
    "keywords": "Class RestGroupChannel Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based group-message channel. public class RestGroupChannel : RestChannel, IUpdateable, IGroupChannel, IRestPrivateChannel, IPrivateChannel, IRestMessageChannel, IMessageChannel, IRestAudioChannel, IAudioChannel, IChannel, ISnowflakeEntity, IEntity<ulong> Inheritance object RestEntity<ulong> RestChannel RestGroupChannel Implements IUpdateable IGroupChannel IRestPrivateChannel IPrivateChannel IRestMessageChannel IMessageChannel IRestAudioChannel IAudioChannel IChannel ISnowflakeEntity IEntity<ulong> Inherited Members RestChannel.CreatedAt RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties Name Gets the name of this channel. public string Name { get; } Property Value string A string containing the name of this channel. RTCRegion Gets the RTC region for this audio channel. public string RTCRegion { get; } Property Value string Remarks This property can be null. Recipients public IReadOnlyCollection<RestGroupUser> Recipients { get; } Property Value IReadOnlyCollection<RestGroupUser> Users public IReadOnlyCollection<RestGroupUser> Users { get; } Property Value IReadOnlyCollection<RestGroupUser> Methods DeleteMessageAsync(IMessage, RequestOptions) Deletes a message based on the provided message in this channel. public Task DeleteMessageAsync(IMessage message, RequestOptions options = null) Parameters message IMessage The message that would be removed. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. DeleteMessageAsync(ulong, RequestOptions) Deletes a message. public Task DeleteMessageAsync(ulong messageId, RequestOptions options = null) Parameters messageId ulong The snowflake identifier of the message that would be removed. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. EnterTypingState(RequestOptions) Continuously broadcasts the \"user is typing\" message to all users in this channel until the returned object is disposed. public IDisposable EnterTypingState(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns IDisposable A disposable object that, upon its disposal, will stop the client from broadcasting its typing state in this channel. Examples The following example keeps the client in the typing state until LongRunningAsync has finished. using (channel.EnterTypingState()) await LongRunningAsync(); GetMessageAsync(ulong, RequestOptions) Gets a message from this message channel. public Task<RestMessage> GetMessageAsync(ulong id, RequestOptions options = null) Parameters id ulong The snowflake identifier of the message. options RequestOptions The options to be used when sending the request. Returns Task<RestMessage> A task that represents an asynchronous get operation for retrieving the message. The task result contains the retrieved message; null if no message is found with the specified identifier. Remarks This method follows the same behavior as described in GetMessageAsync(ulong, CacheMode, RequestOptions). Please visit its documentation for more details on this method. GetMessagesAsync(IMessage, Direction, int, RequestOptions) Gets a collection of messages in this channel. public IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(IMessage fromMessage, Direction dir, int limit = 100, RequestOptions options = null) Parameters fromMessage IMessage The starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions). Please visit its documentation for more details on this method. GetMessagesAsync(int, RequestOptions) Gets the last N messages from this message channel. public IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(int limit = 100, RequestOptions options = null) Parameters limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(int, CacheMode, RequestOptions). Please visit its documentation for more details on this method. GetMessagesAsync(ulong, Direction, int, RequestOptions) Gets a collection of messages in this channel. public IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(ulong fromMessageId, Direction dir, int limit = 100, RequestOptions options = null) Parameters fromMessageId ulong The ID of the starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(ulong, Direction, int, CacheMode, RequestOptions). Please visit its documentation for more details on this method. GetPinnedMessagesAsync(RequestOptions) Gets a collection of pinned messages in this channel. public Task<IReadOnlyCollection<RestMessage>> GetPinnedMessagesAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestMessage>> A task that represents the asynchronous get operation for retrieving pinned messages in this channel. The task result contains a collection of messages found in the pinned messages. Remarks This method follows the same behavior as described in GetPinnedMessagesAsync(RequestOptions). Please visit its documentation for more details on this method. GetUser(ulong) public RestUser GetUser(ulong id) Parameters id ulong Returns RestUser LeaveAsync(RequestOptions) Leaves this group. public Task LeaveAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous leave operation. ModifyMessageAsync(ulong, Action<MessageProperties>, RequestOptions) Modifies a message. public Task<IUserMessage> ModifyMessageAsync(ulong messageId, Action<MessageProperties> func, RequestOptions options = null) Parameters messageId ulong The snowflake identifier of the message that would be changed. func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The options to be used when sending the request. Returns Task<IUserMessage> A task that represents the asynchronous modification operation. Remarks This method modifies this message with the specified properties. To see an example of this method and what properties are available, please refer to MessageProperties. SendFileAsync(FileAttachment, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a file to this message channel with an optional caption. public Task<RestUserMessage> SendFileAsync(FileAttachment attachment, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters attachment FileAttachment The attachment containing the file and description. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Remarks This method sends a file as if you are uploading an attachment directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. ArgumentException The only valid MessageFlags are SuppressEmbeds and None. SendFileAsync(Stream, string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a file to this message channel with an optional caption. public Task<RestUserMessage> SendFileAsync(Stream stream, string filename, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters stream Stream The Stream of the file to be sent. filename string The name of the attachment. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. isSpoiler bool Whether the message attachment should be hidden as a spoiler. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example uploads a streamed image that will be called b1nzy.jpg embedded inside a rich embed to the channel. using (var b1nzyStream = await httpClient.GetStreamAsync(\"https://example.com/b1nzy\")) await channel.SendFileAsync(b1nzyStream, \"b1nzy.jpg\", embed: new EmbedBuilder { ImageUrl = \"attachment://b1nzy.jpg\" }.Build()); Remarks This method sends a file as if you are uploading an attachment directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. ArgumentException The only valid MessageFlags are SuppressEmbeds and None. SendFileAsync(string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a file to this message channel with an optional caption. public Task<RestUserMessage> SendFileAsync(string filePath, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters filePath string The file path of the file. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. isSpoiler bool Whether the message attachment should be hidden as a spoiler. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example uploads a local file called wumpus.txt along with the text good discord boi to the channel. await channel.SendFileAsync(\"wumpus.txt\", \"good discord boi\"); The following example uploads a local image called b1nzy.jpg embedded inside a rich embed to the channel. await channel.SendFileAsync(\"b1nzy.jpg\", embed: new EmbedBuilder { ImageUrl = \"attachment://b1nzy.jpg\" }.Build()); Remarks This method sends a file as if you are uploading an attachment directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. Exceptions ArgumentException filePath is a zero-length string, contains only white space, or contains one or more invalid characters as defined by GetInvalidPathChars(). ArgumentNullException filePath is null. PathTooLongException The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. DirectoryNotFoundException The specified path is invalid, (for example, it is on an unmapped drive). UnauthorizedAccessException filePath specified a directory.-or- The caller does not have the required permission. FileNotFoundException The file specified in filePath was not found. NotSupportedException filePath is in an invalid format. IOException An I/O error occurred while opening the file. ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. ArgumentException The only valid MessageFlags are SuppressEmbeds and None. SendFilesAsync(IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a collection of files to this message channel. public Task<RestUserMessage> SendFilesAsync(IEnumerable<FileAttachment> attachments, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Remarks This method sends files as if you are uploading attachments directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. ArgumentException The only valid MessageFlags are SuppressEmbeds and None. SendMessageAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a message to this message channel. public Task<RestUserMessage> SendMessageAsync(string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters text string The message to be sent. isTTS bool Determines whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the message. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example sends a message with the current system time in RFC 1123 format to the channel and deletes itself after 5 seconds. var message = await channel.SendMessageAsync(DateTimeOffset.UtcNow.ToString(\"R\")); await Task.Delay(TimeSpan.FromSeconds(5)) .ContinueWith(x => message.DeleteAsync()); Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. ArgumentException The only valid MessageFlags are SuppressEmbeds and None. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. TriggerTypingAsync(RequestOptions) Broadcasts the \"user is typing\" message to all users in this channel, lasting 10 seconds. public Task TriggerTypingAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation that triggers the broadcast. UpdateAsync(RequestOptions) Updates this object's properties with its current state. public override Task UpdateAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task"
  },
  "api/Discord.Rest.RestGroupUser.html": {
    "href": "api/Discord.Rest.RestGroupUser.html",
    "title": "Class RestGroupUser | Discord.Net Documentation",
    "keywords": "Class RestGroupUser Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based group user. public class RestGroupUser : RestUser, IUpdateable, IGroupUser, IUser, ISnowflakeEntity, IEntity<ulong>, IMentionable, IPresence, IVoiceState Inheritance object RestEntity<ulong> RestUser RestGroupUser Implements IUpdateable IGroupUser IUser ISnowflakeEntity IEntity<ulong> IMentionable IPresence IVoiceState Inherited Members RestUser.IsBot RestUser.Username RestUser.DiscriminatorValue RestUser.AvatarId RestUser.BannerId RestUser.AccentColor RestUser.PublicFlags RestUser.GlobalName RestUser.CreatedAt RestUser.Discriminator RestUser.Mention RestUser.Activity RestUser.Status RestUser.ActiveClients RestUser.Activities RestUser.IsWebhook RestUser.AvatarDecorationHash RestUser.AvatarDecorationSkuId RestUser.UpdateAsync(RequestOptions) RestUser.CreateDMChannelAsync(RequestOptions) RestUser.GetAvatarUrl(ImageFormat, ushort) RestUser.GetBannerUrl(ImageFormat, ushort) RestUser.GetDefaultAvatarUrl() RestUser.GetDisplayAvatarUrl(ImageFormat, ushort) RestUser.GetAvatarDecorationUrl() RestUser.ToString() RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods UserExtensions.SendFileAsync(IUser, FileAttachment, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, Stream, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFilesAsync(IUser, IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendMessageAsync(IUser, string, bool, Embed, RequestOptions, AllowedMentions, MessageComponent, Embed[])"
  },
  "api/Discord.Rest.RestGuild.html": {
    "href": "api/Discord.Rest.RestGuild.html",
    "title": "Class RestGuild | Discord.Net Documentation",
    "keywords": "Class RestGuild Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based guild/server. public class RestGuild : RestEntity<ulong>, IGuild, IDeletable, ISnowflakeEntity, IEntity<ulong>, IUpdateable Inheritance object RestEntity<ulong> RestGuild Implements IGuild IDeletable ISnowflakeEntity IEntity<ulong> IUpdateable Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods GuildExtensions.GetGuildBoostMessagesEnabled(IGuild) GuildExtensions.GetGuildSetupTipMessagesEnabled(IGuild) GuildExtensions.GetGuildWelcomeMessageReplyEnabled(IGuild) GuildExtensions.GetWelcomeMessagesEnabled(IGuild) Properties AFKChannelId Gets the ID of the AFK voice channel for this guild. public ulong? AFKChannelId { get; } Property Value ulong? A ulong representing the snowflake identifier of the AFK voice channel; null if none is set. AFKTimeout Gets the amount of time (in seconds) a user must be inactive in a voice channel for until they are automatically moved to the AFK voice channel. public int AFKTimeout { get; } Property Value int An int representing the amount of time in seconds for a user to be marked as inactive and moved into the AFK voice channel. ApplicationId Gets the application ID of the guild creator if it is bot-created. public ulong? ApplicationId { get; } Property Value ulong? A ulong representing the snowflake identifier of the application ID that created this guild, or null if it was not bot-created. ApproximateMemberCount Gets the approximate number of members in this guild. public int? ApproximateMemberCount { get; } Property Value int? The approximate number of members in this guild. Remarks Only available when getting a guild via REST when with_counts is true. ApproximatePresenceCount Gets the approximate number of non-offline members in this guild. public int? ApproximatePresenceCount { get; } Property Value int? The approximate number of non-offline members in this guild. Remarks Only available when getting a guild via REST when with_counts is true. BannerId Gets the identifier for this guilds banner image. public string BannerId { get; } Property Value string An identifier for the banner image; null if none is set. BannerUrl Gets the URL of this guild's banner image. public string BannerUrl { get; } Property Value string A URL pointing to the guild's banner image; null if none is set. CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. DefaultMessageNotifications Gets the default message notifications for users who haven't explicitly set their notification settings. public DefaultMessageNotifications DefaultMessageNotifications { get; } Property Value DefaultMessageNotifications Description Gets the description for the guild. public string Description { get; } Property Value string The description for the guild; null if none is set. DiscoverySplashId Gets the ID of this guild's discovery splash image. public string DiscoverySplashId { get; } Property Value string An identifier for the discovery splash image; null if none is set. DiscoverySplashUrl Gets the URL of this guild's discovery splash image. public string DiscoverySplashUrl { get; } Property Value string A URL pointing to the guild's discovery splash image; null if none is set. Emotes Gets a collection of all custom emotes for this guild. public IReadOnlyCollection<GuildEmote> Emotes { get; } Property Value IReadOnlyCollection<GuildEmote> A read-only collection of all custom emotes for this guild. EveryoneRole Gets the built-in role containing all users in this guild. public RestRole EveryoneRole { get; } Property Value RestRole ExplicitContentFilter Gets the level of content filtering applied to user's content in a Guild. public ExplicitContentFilterLevel ExplicitContentFilter { get; } Property Value ExplicitContentFilterLevel The level of explicit content filtering. Features Gets the features for this guild. public GuildFeatures Features { get; } Property Value GuildFeatures A flags enum containing all the features for the guild. IconId Gets the ID of this guild's icon. public string IconId { get; } Property Value string An identifier for the splash image; null if none is set. IconUrl Gets the URL of this guild's icon. public string IconUrl { get; } Property Value string A URL pointing to the guild's icon; null if none is set. IncidentsData Gets the incidents data for this guild. public GuildIncidentsData IncidentsData { get; } Property Value GuildIncidentsData InventorySettings Get the inventory settings on the guild. null if not available in the guild. public GuildInventorySettings? InventorySettings { get; } Property Value GuildInventorySettings? IsBoostProgressBarEnabled Gets whether the guild has the boost progress bar enabled. public bool IsBoostProgressBarEnabled { get; } Property Value bool true if the boost progress bar is enabled; otherwise false. IsWidgetEnabled Gets a value that indicates whether this guild has the widget enabled. public bool IsWidgetEnabled { get; } Property Value bool true if this guild has a widget enabled; otherwise false. MaxBitrate Gets the max bitrate for voice channels in this guild. public int MaxBitrate { get; } Property Value int A int representing the maximum bitrate value allowed by Discord in this guild. MaxMembers Gets the maximum number of members for the guild. public int? MaxMembers { get; } Property Value int? The maximum number of members for the guild. MaxPresences Gets the maximum number of presences for the guild. public int? MaxPresences { get; } Property Value int? The maximum number of presences for the guild. MaxStageVideoChannelUsers Gets the maximum amount of users in a stage video channel. public int? MaxStageVideoChannelUsers { get; } Property Value int? The maximum amount of users in a stage video channel. MaxUploadLimit Gets the upload limit in bytes for this guild. This number is dependent on the guild's boost status. public ulong MaxUploadLimit { get; } Property Value ulong MaxVideoChannelUsers Gets the maximum amount of users in a video channel. public int? MaxVideoChannelUsers { get; } Property Value int? The maximum amount of users in a video channel. MfaLevel Gets the level of Multi-Factor Authentication requirements a user must fulfill before being allowed to perform administrative actions in this guild. public MfaLevel MfaLevel { get; } Property Value MfaLevel The level of MFA requirement. Name Gets the name of this guild. public string Name { get; } Property Value string A string containing the name of this guild. NsfwLevel Gets the NSFW level of this guild. public NsfwLevel NsfwLevel { get; } Property Value NsfwLevel The NSFW level of this guild. OwnerId Gets the ID of the user that owns this guild. public ulong OwnerId { get; } Property Value ulong A ulong representing the snowflake identifier of the user that owns this guild. PreferredCulture Gets the preferred culture of this guild. public CultureInfo PreferredCulture { get; } Property Value CultureInfo The preferred culture information of this guild. PreferredLocale Gets the preferred locale of this guild in IETF BCP 47 language tag format. public string PreferredLocale { get; } Property Value string The preferred locale of the guild in IETF BCP 47 language tag format. PremiumSubscriptionCount Gets the number of premium subscribers of this guild. public int PremiumSubscriptionCount { get; } Property Value int The number of premium subscribers of this guild. Remarks This is the number of users who have boosted this guild. PremiumTier Gets the tier of guild boosting in this guild. public PremiumTier PremiumTier { get; } Property Value PremiumTier The tier of guild boosting in this guild. PublicUpdatesChannelId Gets the ID of the channel where admins and moderators of Community guilds receive notices from Discord. public ulong? PublicUpdatesChannelId { get; } Property Value ulong? A ulong representing the snowflake identifier of the channel where admins and moderators of Community guilds receive notices from Discord; null if none is set. Roles Gets a collection of all roles in this guild. public IReadOnlyCollection<RestRole> Roles { get; } Property Value IReadOnlyCollection<RestRole> RulesChannelId Gets the ID of the channel with the rules. public ulong? RulesChannelId { get; } Property Value ulong? A ulong representing the snowflake identifier of the channel that contains the rules; null if none is set. SafetyAlertsChannelId Gets the ID of the channel assigned to the safety alerts channel of this guild. public ulong? SafetyAlertsChannelId { get; } Property Value ulong? A ulong representing the snowflake identifier of the safety alerts channel; null if none is set. SplashId Gets the ID of this guild's splash image. public string SplashId { get; } Property Value string An identifier for the splash image; null if none is set. SplashUrl Gets the URL of this guild's splash image. public string SplashUrl { get; } Property Value string A URL pointing to the guild's splash image; null if none is set. Stickers public IReadOnlyCollection<CustomSticker> Stickers { get; } Property Value IReadOnlyCollection<CustomSticker> SystemChannelFlags Gets the flags for the types of system channel messages that are disabled. public SystemChannelMessageDeny SystemChannelFlags { get; } Property Value SystemChannelMessageDeny The flags for the types of system channel messages that are disabled. SystemChannelId Gets the ID of the channel where randomized welcome messages are sent. public ulong? SystemChannelId { get; } Property Value ulong? A ulong representing the snowflake identifier of the system channel where randomized welcome messages are sent; null if none is set. VanityURLCode Gets the code for this guild's vanity invite URL. public string VanityURLCode { get; } Property Value string A string containing the vanity invite code for this guild; null if none is set. VerificationLevel Gets the level of requirements a user must fulfill before being allowed to post messages in this guild. public VerificationLevel VerificationLevel { get; } Property Value VerificationLevel The level of requirements. VoiceRegionId Gets the ID of the region hosting this guild's voice channels. public string VoiceRegionId { get; } Property Value string A string containing the identifier for the voice region that this guild uses (e.g. eu-central). WidgetChannelId Gets the ID of the channel assigned to the widget of this guild. public ulong? WidgetChannelId { get; } Property Value ulong? A ulong representing the snowflake identifier of the channel assigned to the widget found within the widget settings of this guild; null if none is set. Methods AddBanAsync(IUser, int, string, RequestOptions) Bans the user from this guild and optionally prunes their recent messages. public Task AddBanAsync(IUser user, int pruneDays = 0, string reason = null, RequestOptions options = null) Parameters user IUser The user to ban. pruneDays int The number of days to remove messages from this user for, and this number must be between [0, 7]. reason string The reason of the ban to be written in the audit log. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous add operation for the ban. Exceptions ArgumentException pruneDays is not between 0 to 7. AddBanAsync(ulong, int, string, RequestOptions) Bans the user from this guild and optionally prunes their recent messages. public Task AddBanAsync(ulong userId, int pruneDays = 0, string reason = null, RequestOptions options = null) Parameters userId ulong The snowflake ID of the user to ban. pruneDays int The number of days to remove messages from this user for, and this number must be between [0, 7]. reason string The reason of the ban to be written in the audit log. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous add operation for the ban. Exceptions ArgumentException pruneDays is not between 0 to 7. AddGuildUserAsync(ulong, string, Action<AddGuildUserProperties>, RequestOptions) public Task<RestGuildUser> AddGuildUserAsync(ulong id, string accessToken, Action<AddGuildUserProperties> func = null, RequestOptions options = null) Parameters id ulong accessToken string func Action<AddGuildUserProperties> options RequestOptions Returns Task<RestGuildUser> BulkOverwriteApplicationCommandsAsync(ApplicationCommandProperties[], RequestOptions) Overwrites the application commands within this guild. public Task<IReadOnlyCollection<RestGuildCommand>> BulkOverwriteApplicationCommandsAsync(ApplicationCommandProperties[] properties, RequestOptions options = null) Parameters properties ApplicationCommandProperties[] A collection of properties to use when creating the commands. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestGuildCommand>> A task that represents the asynchronous creation operation. The task result contains a collection of commands that was created. CreateApplicationCommandAsync(ApplicationCommandProperties, RequestOptions) Creates an application command within this guild. public Task<RestGuildCommand> CreateApplicationCommandAsync(ApplicationCommandProperties properties, RequestOptions options = null) Parameters properties ApplicationCommandProperties The properties to use when creating the command. options RequestOptions The options to be used when sending the request. Returns Task<RestGuildCommand> A task that represents the asynchronous creation operation. The task result contains the command that was created. CreateAutoModRuleAsync(Action<AutoModRuleProperties>, RequestOptions) Creates a new auto moderation rule. public Task<RestAutoModRule> CreateAutoModRuleAsync(Action<AutoModRuleProperties> props, RequestOptions options = null) Parameters props Action<AutoModRuleProperties> options RequestOptions Returns Task<RestAutoModRule> A task that represents the asynchronous creation operation. The task result contains the created IAutoModRule. CreateCategoryChannelAsync(string, Action<GuildChannelProperties>, RequestOptions) Creates a category channel with the provided name. public Task<RestCategoryChannel> CreateCategoryChannelAsync(string name, Action<GuildChannelProperties> func = null, RequestOptions options = null) Parameters name string The name of the new channel. func Action<GuildChannelProperties> The delegate containing the properties to be applied to the channel upon its creation. options RequestOptions The options to be used when sending the request. Returns Task<RestCategoryChannel> The created category channel. Exceptions ArgumentNullException name is null. CreateEmoteAsync(string, Image, Optional<IEnumerable<IRole>>, RequestOptions) Creates a new GuildEmote in this guild. public Task<GuildEmote> CreateEmoteAsync(string name, Image image, Optional<IEnumerable<IRole>> roles = default, RequestOptions options = null) Parameters name string The name of the guild emote. image Image The image of the new emote. roles Optional<IEnumerable<IRole>> The roles to limit the emote usage to. options RequestOptions The options to be used when sending the request. Returns Task<GuildEmote> A task that represents the asynchronous creation operation. The task result contains the created emote. CreateEventAsync(string, DateTimeOffset, GuildScheduledEventType, GuildScheduledEventPrivacyLevel, string, DateTimeOffset?, ulong?, string, Image?, RequestOptions) Creates an event within this guild. public Task<RestGuildEvent> CreateEventAsync(string name, DateTimeOffset startTime, GuildScheduledEventType type, GuildScheduledEventPrivacyLevel privacyLevel = GuildScheduledEventPrivacyLevel.Private, string description = null, DateTimeOffset? endTime = null, ulong? channelId = null, string location = null, Image? coverImage = null, RequestOptions options = null) Parameters name string The name of the event. startTime DateTimeOffset The start time of the event. type GuildScheduledEventType The type of the event. privacyLevel GuildScheduledEventPrivacyLevel The privacy level of the event. description string The description of the event. endTime DateTimeOffset? The end time of the event. channelId ulong? The channel id of the event. The event must have a type of Stage or Voice in order to use this property. location string The location of the event; links are supported coverImage Image? The optional banner image for the event. options RequestOptions The options to be used when sending the request. Returns Task<RestGuildEvent> A task that represents the asynchronous create operation. CreateForumChannelAsync(string, Action<ForumChannelProperties>, RequestOptions) Creates a new forum channel with the provided name. public Task<RestForumChannel> CreateForumChannelAsync(string name, Action<ForumChannelProperties> func = null, RequestOptions options = null) Parameters name string The name of the new channel. func Action<ForumChannelProperties> The delegate containing the properties to be applied to the channel upon its creation. options RequestOptions The options to be used when sending the request. Returns Task<RestForumChannel> The created forum channel. Exceptions ArgumentNullException name is null. CreateMediaChannelAsync(string, Action<ForumChannelProperties>, RequestOptions) Creates a new media channel in this guild. public Task<RestMediaChannel> CreateMediaChannelAsync(string name, Action<ForumChannelProperties> func = null, RequestOptions options = null) Parameters name string The new name for the media channel. func Action<ForumChannelProperties> The delegate containing the properties to be applied to the channel upon its creation. options RequestOptions The options to be used when sending the request. Returns Task<RestMediaChannel> A task that represents the asynchronous creation operation. The task result contains the newly created media channel. CreateRoleAsync(string, GuildPermissions?, Color?, bool, bool, RequestOptions, Image?, Emoji) Creates a new role with the provided name. public Task<RestRole> CreateRoleAsync(string name, GuildPermissions? permissions = null, Color? color = null, bool isHoisted = false, bool isMentionable = false, RequestOptions options = null, Image? icon = null, Emoji emoji = null) Parameters name string The new name for the role. permissions GuildPermissions? The guild permission that the role should possess. color Color? The color of the role. isHoisted bool Whether the role is separated from others on the sidebar. isMentionable bool Whether the role can be mentioned. options RequestOptions The options to be used when sending the request. icon Image? The icon for the role. emoji Emoji The unicode emoji to be used as an icon for the role. Returns Task<RestRole> A task that represents the asynchronous creation operation. The task result contains the newly created role. CreateStageChannelAsync(string, Action<VoiceChannelProperties>, RequestOptions) Creates a new stage channel in this guild. public Task<RestStageChannel> CreateStageChannelAsync(string name, Action<VoiceChannelProperties> func = null, RequestOptions options = null) Parameters name string The new name for the stage channel. func Action<VoiceChannelProperties> The delegate containing the properties to be applied to the channel upon its creation. options RequestOptions The options to be used when sending the request. Returns Task<RestStageChannel> A task that represents the asynchronous creation operation. The task result contains the newly created stage channel. CreateStickerAsync(string, Image, IEnumerable<string>, string, RequestOptions) Creates a new sticker in this guild. public Task<CustomSticker> CreateStickerAsync(string name, Image image, IEnumerable<string> tags, string description = null, RequestOptions options = null) Parameters name string The name of the sticker. image Image The image of the new emote. tags IEnumerable<string> The tags of the sticker. description string The description of the sticker. options RequestOptions The options to be used when sending the request. Returns Task<CustomSticker> A task that represents the asynchronous creation operation. The task result contains the created sticker. CreateStickerAsync(string, Stream, string, IEnumerable<string>, string, RequestOptions) Creates a new sticker in this guild public Task<CustomSticker> CreateStickerAsync(string name, Stream stream, string filename, IEnumerable<string> tags, string description = null, RequestOptions options = null) Parameters name string The name of the sticker. stream Stream The stream containing the file data. filename string The name of the file with the extension, ex: image.png. tags IEnumerable<string> The tags of the sticker. description string The description of the sticker. options RequestOptions The options to be used when sending the request. Returns Task<CustomSticker> A task that represents the asynchronous creation operation. The task result contains the created sticker. CreateStickerAsync(string, string, IEnumerable<string>, string, RequestOptions) Creates a new sticker in this guild public Task<CustomSticker> CreateStickerAsync(string name, string path, IEnumerable<string> tags, string description = null, RequestOptions options = null) Parameters name string The name of the sticker. path string The path of the file to upload. tags IEnumerable<string> The tags of the sticker. description string The description of the sticker. options RequestOptions The options to be used when sending the request. Returns Task<CustomSticker> A task that represents the asynchronous creation operation. The task result contains the created sticker. CreateTextChannelAsync(string, Action<TextChannelProperties>, RequestOptions) Creates a new text channel in this guild. public Task<RestTextChannel> CreateTextChannelAsync(string name, Action<TextChannelProperties> func = null, RequestOptions options = null) Parameters name string The new name for the text channel. func Action<TextChannelProperties> The delegate containing the properties to be applied to the channel upon its creation. options RequestOptions The options to be used when sending the request. Returns Task<RestTextChannel> A task that represents the asynchronous creation operation. The task result contains the newly created text channel. Examples The following example creates a new text channel under an existing category named Wumpus with a set topic. var categories = await guild.GetCategoriesAsync(); var targetCategory = categories.FirstOrDefault(x => x.Name == \"wumpus\"); if (targetCategory == null) return; await Context.Guild.CreateTextChannelAsync(name, x => { x.CategoryId = targetCategory.Id; x.Topic = $\"This channel was created at {DateTimeOffset.UtcNow} by {user}.\"; }); CreateVoiceChannelAsync(string, Action<VoiceChannelProperties>, RequestOptions) Creates a voice channel with the provided name. public Task<RestVoiceChannel> CreateVoiceChannelAsync(string name, Action<VoiceChannelProperties> func = null, RequestOptions options = null) Parameters name string The name of the new channel. func Action<VoiceChannelProperties> The delegate containing the properties to be applied to the channel upon its creation. options RequestOptions The options to be used when sending the request. Returns Task<RestVoiceChannel> The created voice channel. Exceptions ArgumentNullException name is null. DeleteAsync(RequestOptions) Deletes this object and all its children. public Task DeleteAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task DeleteEmoteAsync(GuildEmote, RequestOptions) Deletes an existing GuildEmote from this guild. public Task DeleteEmoteAsync(GuildEmote emote, RequestOptions options = null) Parameters emote GuildEmote The emote to delete. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. DeleteIntegrationAsync(ulong, RequestOptions) public Task DeleteIntegrationAsync(ulong id, RequestOptions options = null) Parameters id ulong options RequestOptions Returns Task DeleteSlashCommandsAsync(RequestOptions) Deletes all slash commands in the current guild. public Task DeleteSlashCommandsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous delete operation. DeleteStickerAsync(CustomSticker, RequestOptions) Deletes a sticker within this guild. public Task DeleteStickerAsync(CustomSticker sticker, RequestOptions options = null) Parameters sticker CustomSticker The sticker to delete. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. GetAFKChannelAsync(RequestOptions) Gets the AFK voice channel in this guild. public Task<RestVoiceChannel> GetAFKChannelAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<RestVoiceChannel> A task that represents the asynchronous get operation. The task result contains the voice channel that the AFK users will be moved to after they have idled for too long; null if none is set. GetApplicationCommandAsync(ulong, RequestOptions) Gets an application command within this guild with the specified id. public Task<RestGuildCommand> GetApplicationCommandAsync(ulong id, RequestOptions options = null) Parameters id ulong The id of the application command to get. options RequestOptions The options to be used when sending the request. Returns Task<RestGuildCommand> A ValueTask that represents the asynchronous get operation. The task result contains a IApplicationCommand if found, otherwise null. GetApplicationCommandsAsync(bool, string, RequestOptions) Gets this guilds slash commands public Task<IReadOnlyCollection<RestGuildCommand>> GetApplicationCommandsAsync(bool withLocalizations = false, string locale = null, RequestOptions options = null) Parameters withLocalizations bool Whether to include full localization dictionaries in the returned objects, instead of the name localized and description localized fields. locale string The target locale of the localized name and description fields. Sets X-Discord-Locale header, which takes precedence over Accept-Language. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestGuildCommand>> A task that represents the asynchronous get operation. The task result contains a read-only collection of application commands found within the guild. GetAuditLogsAsync(int, RequestOptions, ulong?, ulong?, ActionType?, ulong?) Gets the specified number of audit log entries for this guild. public IAsyncEnumerable<IReadOnlyCollection<RestAuditLogEntry>> GetAuditLogsAsync(int limit, RequestOptions options = null, ulong? beforeId = null, ulong? userId = null, ActionType? actionType = null, ulong? afterId = null) Parameters limit int The number of audit log entries to fetch. options RequestOptions The options to be used when sending the request. beforeId ulong? The audit log entry ID to get entries before. userId ulong? The user ID to filter entries for. actionType ActionType? The type of actions to filter. afterId ulong? The audit log entry ID to get entries after. Returns IAsyncEnumerable<IReadOnlyCollection<RestAuditLogEntry>> A task that represents the asynchronous get operation. The task result contains a read-only collection of the requested audit log entries. GetAutoModRuleAsync(ulong, RequestOptions) Gets a single rule configured in a guild. Returns null if the rule was not found. public Task<RestAutoModRule> GetAutoModRuleAsync(ulong ruleId, RequestOptions options = null) Parameters ruleId ulong options RequestOptions Returns Task<RestAutoModRule> A task that represents the asynchronous creation operation. The task result contains a IAutoModRule. GetAutoModRulesAsync(RequestOptions) Get a list of all rules currently configured for the guild. public Task<RestAutoModRule[]> GetAutoModRulesAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task<RestAutoModRule[]> A task that represents the asynchronous creation operation. The task result contains a collection of IAutoModRule. GetBanAsync(IUser, RequestOptions) Gets a ban object for a banned user. public Task<RestBan> GetBanAsync(IUser user, RequestOptions options = null) Parameters user IUser The banned user. options RequestOptions The options to be used when sending the request. Returns Task<RestBan> A task that represents the asynchronous get operation. The task result contains a ban object, which contains the user information and the reason for the ban; null if the ban entry cannot be found. GetBanAsync(ulong, RequestOptions) Gets a ban object for a banned user. public Task<RestBan> GetBanAsync(ulong userId, RequestOptions options = null) Parameters userId ulong The snowflake identifier for the banned user. options RequestOptions The options to be used when sending the request. Returns Task<RestBan> A task that represents the asynchronous get operation. The task result contains a ban object, which contains the user information and the reason for the ban; null if the ban entry cannot be found. GetBansAsync(IUser, Direction, int, RequestOptions) Gets limit amount of bans from the guild starting at the provided fromUser ordered by user ID. public IAsyncEnumerable<IReadOnlyCollection<RestBan>> GetBansAsync(IUser fromUser, Direction dir, int limit = 1000, RequestOptions options = null) Parameters fromUser IUser The user to start to get bans from. dir Direction The direction of the bans to be gotten. limit int The number of bans to get. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestBan>> A paged collection of bans. Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the individual messages as a collection. warning Do not fetch too many bans at once! This may cause unwanted preemptive rate limit or even actual rate limit, causing your bot to freeze! GetBansAsync(int, RequestOptions) Gets limit amount of bans from the guild ordered by user ID. public IAsyncEnumerable<IReadOnlyCollection<RestBan>> GetBansAsync(int limit = 1000, RequestOptions options = null) Parameters limit int The amount of bans to get from the guild. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestBan>> A paged collection of bans. Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the individual messages as a collection. warning Do not fetch too many bans at once! This may cause unwanted preemptive rate limit or even actual rate limit, causing your bot to freeze! GetBansAsync(ulong, Direction, int, RequestOptions) Gets limit amount of bans from the guild starting at the provided fromUserId ordered by user ID. public IAsyncEnumerable<IReadOnlyCollection<RestBan>> GetBansAsync(ulong fromUserId, Direction dir, int limit = 1000, RequestOptions options = null) Parameters fromUserId ulong The ID of the user to start to get bans from. dir Direction The direction of the bans to be gotten. limit int The number of bans to get. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestBan>> A paged collection of bans. Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the individual messages as a collection. warning Do not fetch too many bans at once! This may cause unwanted preemptive rate limit or even actual rate limit, causing your bot to freeze! GetCategoryChannelsAsync(RequestOptions) Gets a collection of all category channels in this guild. public Task<IReadOnlyCollection<RestCategoryChannel>> GetCategoryChannelsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestCategoryChannel>> A task that represents the asynchronous get operation. The task result contains a read-only collection of category channels found within this guild. GetChannelAsync(ulong, RequestOptions) Gets a channel in this guild. public Task<RestGuildChannel> GetChannelAsync(ulong id, RequestOptions options = null) Parameters id ulong The snowflake identifier for the channel. options RequestOptions The options to be used when sending the request. Returns Task<RestGuildChannel> A task that represents the asynchronous get operation. The task result contains the generic channel associated with the specified id; null if none is found. GetChannelsAsync(RequestOptions) Gets a collection of all channels in this guild. public Task<IReadOnlyCollection<RestGuildChannel>> GetChannelsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestGuildChannel>> A task that represents the asynchronous get operation. The task result contains a read-only collection of generic channels found within this guild. GetCurrentUserAsync(RequestOptions) Gets the current user for this guild. public Task<RestGuildUser> GetCurrentUserAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<RestGuildUser> A task that represents the asynchronous get operation. The task result contains the currently logged-in user within this guild. GetDefaultChannelAsync(RequestOptions) Gets the first viewable text channel in this guild. public Task<RestTextChannel> GetDefaultChannelAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<RestTextChannel> A task that represents the asynchronous get operation. The task result contains the first viewable text channel in this guild; null if none is found. GetEmoteAsync(ulong, RequestOptions) Gets a specific emote from this guild. public Task<GuildEmote> GetEmoteAsync(ulong id, RequestOptions options = null) Parameters id ulong The snowflake identifier for the guild emote. options RequestOptions The options to be used when sending the request. Returns Task<GuildEmote> A task that represents the asynchronous get operation. The task result contains the emote found with the specified id; null if none is found. GetEmotesAsync(RequestOptions) Gets a collection of emotes from this guild. public Task<IReadOnlyCollection<GuildEmote>> GetEmotesAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<GuildEmote>> A task that represents the asynchronous get operation. The task result contains a read-only collection of emotes found within the guild. GetEventAsync(ulong, RequestOptions) Gets an event within this guild. public Task<RestGuildEvent> GetEventAsync(ulong id, RequestOptions options = null) Parameters id ulong The snowflake identifier for the event. options RequestOptions The options to be used when sending the request. Returns Task<RestGuildEvent> A task that represents the asynchronous get operation. GetEventsAsync(RequestOptions) Gets all active events within this guild. public Task<IReadOnlyCollection<RestGuildEvent>> GetEventsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestGuildEvent>> A task that represents the asynchronous get operation. GetForumChannelAsync(ulong, RequestOptions) Gets a forum channel in this guild. public Task<RestForumChannel> GetForumChannelAsync(ulong id, RequestOptions options = null) Parameters id ulong The snowflake identifier for the forum channel. options RequestOptions The options to be used when sending the request. Returns Task<RestForumChannel> A task that represents the asynchronous get operation. The task result contains the text channel associated with the specified id; null if none is found. GetForumChannelsAsync(RequestOptions) Gets a collection of all forum channels in this guild. public Task<IReadOnlyCollection<RestForumChannel>> GetForumChannelsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestForumChannel>> A task that represents the asynchronous get operation. The task result contains a read-only collection of forum channels found within this guild. GetIntegrationsAsync(RequestOptions) public Task<IReadOnlyCollection<RestIntegration>> GetIntegrationsAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task<IReadOnlyCollection<RestIntegration>> GetInvitesAsync(RequestOptions) Gets a collection of all invites in this guild. public Task<IReadOnlyCollection<RestInviteMetadata>> GetInvitesAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestInviteMetadata>> A task that represents the asynchronous get operation. The task result contains a read-only collection of invite metadata, each representing information for an invite found within this guild. GetMediaChannelAsync(ulong, RequestOptions) Gets a media channel in this guild. public Task<RestMediaChannel> GetMediaChannelAsync(ulong id, RequestOptions options = null) Parameters id ulong The snowflake identifier for the text channel. options RequestOptions The options to be used when sending the request. Returns Task<RestMediaChannel> A task that represents the asynchronous get operation. The task result contains the media channel associated with the specified id; null if none is found. GetMediaChannelsAsync(RequestOptions) Gets a collection of all media channels in this guild. public Task<IReadOnlyCollection<RestMediaChannel>> GetMediaChannelsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestMediaChannel>> A task that represents the asynchronous get operation. The task result contains a read-only collection of media channels found within this guild. GetOnboardingAsync(RequestOptions) Gets the onboarding object configured for the guild. public Task<RestGuildOnboarding> GetOnboardingAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task<RestGuildOnboarding> A task that represents the asynchronous creation operation. The task result contains the created IGuildOnboarding. GetOwnerAsync(RequestOptions) Gets the owner of this guild. public Task<RestGuildUser> GetOwnerAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<RestGuildUser> A task that represents the asynchronous get operation. The task result contains the owner of this guild. GetPublicUpdatesChannelAsync(RequestOptions) Gets the text channel where admins and moderators of Community guilds receive notices from Discord. public Task<RestTextChannel> GetPublicUpdatesChannelAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<RestTextChannel> A task that represents the asynchronous get operation. The task result contains the text channel where admins and moderators of Community guilds receive notices from Discord; null if none is set. GetRole(ulong) Gets a role in this guild. public RestRole GetRole(ulong id) Parameters id ulong The snowflake identifier for the role. Returns RestRole A role that is associated with the specified id; null if none is found. GetRulesChannelAsync(RequestOptions) Gets the text channel where Community guilds can display rules and/or guidelines. public Task<RestTextChannel> GetRulesChannelAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<RestTextChannel> A task that represents the asynchronous get operation. The task result contains the text channel where Community guilds can display rules and/or guidelines; null if none is set. GetSlashCommandAsync(ulong, RequestOptions) Gets a slash command in the current guild. public Task<RestGuildCommand> GetSlashCommandAsync(ulong id, RequestOptions options = null) Parameters id ulong The unique identifier of the slash command. options RequestOptions The options to be used when sending the request. Returns Task<RestGuildCommand> A task that represents the asynchronous get operation. The task result contains a slash command created by the current user. GetSlashCommandsAsync(bool, string, RequestOptions) Gets a collection of slash commands created by the current user in this guild. public Task<IReadOnlyCollection<RestGuildCommand>> GetSlashCommandsAsync(bool withLocalizations = false, string locale = null, RequestOptions options = null) Parameters withLocalizations bool Whether to include full localization dictionaries in the returned objects, instead of the name localized and description localized fields. locale string The target locale of the localized name and description fields. Sets X-Discord-Locale header, which takes precedence over Accept-Language. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestGuildCommand>> A task that represents the asynchronous get operation. The task result contains a read-only collection of slash commands created by the current user. GetStageChannelAsync(ulong, RequestOptions) Gets a stage channel in this guild public Task<RestStageChannel> GetStageChannelAsync(ulong id, RequestOptions options = null) Parameters id ulong The snowflake identifier for the stage channel. options RequestOptions The options to be used when sending the request. Returns Task<RestStageChannel> A task that represents the asynchronous get operation. The task result contains the stage channel associated with the specified id; null if none is found. GetStageChannelsAsync(RequestOptions) Gets a collection of all stage channels in this guild. public Task<IReadOnlyCollection<RestStageChannel>> GetStageChannelsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestStageChannel>> A task that represents the asynchronous get operation. The task result contains a read-only collection of stage channels found within this guild. GetStickerAsync(ulong, RequestOptions) Gets a specific sticker within this guild. public Task<CustomSticker> GetStickerAsync(ulong id, RequestOptions options = null) Parameters id ulong The id of the sticker to get. options RequestOptions The options to be used when sending the request. Returns Task<CustomSticker> A task that represents the asynchronous get operation. The task result contains the sticker found with the specified id; null if none is found. GetStickersAsync(RequestOptions) Gets a collection of all stickers within this guild. public Task<IReadOnlyCollection<CustomSticker>> GetStickersAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<CustomSticker>> A task that represents the asynchronous get operation. The task result contains a read-only collection of stickers found within the guild. GetSystemChannelAsync(RequestOptions) Gets the text channel where guild notices such as welcome messages and boost events are posted. public Task<RestTextChannel> GetSystemChannelAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<RestTextChannel> A task that represents the asynchronous get operation. The task result contains the text channel where guild notices such as welcome messages and boost events are post; null if none is found. GetTextChannelAsync(ulong, RequestOptions) Gets a text channel in this guild. public Task<RestTextChannel> GetTextChannelAsync(ulong id, RequestOptions options = null) Parameters id ulong The snowflake identifier for the text channel. options RequestOptions The options to be used when sending the request. Returns Task<RestTextChannel> A task that represents the asynchronous get operation. The task result contains the text channel associated with the specified id; null if none is found. GetTextChannelsAsync(RequestOptions) Gets a collection of all text channels in this guild. public Task<IReadOnlyCollection<RestTextChannel>> GetTextChannelsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestTextChannel>> A task that represents the asynchronous get operation. The task result contains a read-only collection of message channels found within this guild. GetThreadChannelAsync(ulong, RequestOptions) Gets a thread channel in this guild. public Task<RestThreadChannel> GetThreadChannelAsync(ulong id, RequestOptions options = null) Parameters id ulong The snowflake identifier for the thread channel. options RequestOptions The options to be used when sending the request. Returns Task<RestThreadChannel> A task that represents the asynchronous get operation. The task result contains the thread channel associated with the specified id; null if none is found. GetThreadChannelsAsync(RequestOptions) Gets a collection of all thread in this guild. public Task<IReadOnlyCollection<RestThreadChannel>> GetThreadChannelsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestThreadChannel>> A task that represents the asynchronous get operation. The task result contains a read-only collection of threads found within this guild. GetUserAsync(ulong, RequestOptions) Gets a user from this guild. public Task<RestGuildUser> GetUserAsync(ulong id, RequestOptions options = null) Parameters id ulong The snowflake identifier of the user. options RequestOptions The options to be used when sending the request. Returns Task<RestGuildUser> A task that represents the asynchronous get operation. The task result contains the guild user associated with the specified id; null if none is found. Remarks This method retrieves a user found within this guild. GetUsersAsync(RequestOptions) Gets a collection of all users in this guild. public IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> GetUsersAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> A task that represents the asynchronous get operation. The task result contains a collection of guild users found within this guild. Remarks This method retrieves all users found within this guild. GetVanityInviteAsync(RequestOptions) Gets the vanity invite URL of this guild. public Task<RestInviteMetadata> GetVanityInviteAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<RestInviteMetadata> A partial metadata of the vanity invite found within this guild. GetVoiceChannelAsync(ulong, RequestOptions) Gets a voice channel in this guild. public Task<RestVoiceChannel> GetVoiceChannelAsync(ulong id, RequestOptions options = null) Parameters id ulong The snowflake identifier for the voice channel. options RequestOptions The options to be used when sending the request. Returns Task<RestVoiceChannel> A task that represents the asynchronous get operation. The task result contains the voice channel associated with the specified id; null if none is found. GetVoiceChannelsAsync(RequestOptions) Gets a collection of all voice channels in this guild. public Task<IReadOnlyCollection<RestVoiceChannel>> GetVoiceChannelsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestVoiceChannel>> A task that represents the asynchronous get operation. The task result contains a read-only collection of voice channels found within this guild. GetVoiceRegionsAsync(RequestOptions) Gets a collection of all the voice regions this guild can access. public Task<IReadOnlyCollection<RestVoiceRegion>> GetVoiceRegionsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestVoiceRegion>> A task that represents the asynchronous get operation. The task result contains a read-only collection of voice regions the guild can access. GetWebhookAsync(ulong, RequestOptions) Gets a webhook found within this guild. public Task<RestWebhook> GetWebhookAsync(ulong id, RequestOptions options = null) Parameters id ulong The identifier for the webhook. options RequestOptions The options to be used when sending the request. Returns Task<RestWebhook> A task that represents the asynchronous get operation. The task result contains the webhook with the specified id; null if none is found. GetWebhooksAsync(RequestOptions) Gets a collection of all webhook from this guild. public Task<IReadOnlyCollection<RestWebhook>> GetWebhooksAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestWebhook>> A task that represents the asynchronous get operation. The task result contains a read-only collection of webhooks found within the guild. GetWelcomeScreenAsync(RequestOptions) Gets the welcome screen of the guild. Returns null if the welcome channel is not set. public Task<WelcomeScreen> GetWelcomeScreenAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task<WelcomeScreen> A task that represents the asynchronous creation operation. The task result contains a WelcomeScreen. GetWidgetChannelAsync(RequestOptions) Gets the widget channel (i.e. the channel set in the guild's widget settings) in this guild. public Task<RestGuildChannel> GetWidgetChannelAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<RestGuildChannel> A task that represents the asynchronous get operation. The task result contains the widget channel set within the server's widget settings; null if none is set. LeaveAsync(RequestOptions) Leaves this guild. public Task LeaveAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous leave operation. Remarks This method will make the currently logged-in user leave the guild. note If the user is the owner of this guild, use DeleteAsync(RequestOptions) instead. ModifyAsync(Action<GuildProperties>, RequestOptions) Modifies this guild. public Task ModifyAsync(Action<GuildProperties> func, RequestOptions options = null) Parameters func Action<GuildProperties> The delegate containing the properties to modify the guild with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Exceptions ArgumentNullException func is null. ModifyEmoteAsync(GuildEmote, Action<EmoteProperties>, RequestOptions) Modifies an existing GuildEmote in this guild. public Task<GuildEmote> ModifyEmoteAsync(GuildEmote emote, Action<EmoteProperties> func, RequestOptions options = null) Parameters emote GuildEmote The emote to be modified. func Action<EmoteProperties> The delegate containing the properties to modify the emote with. options RequestOptions The options to be used when sending the request. Returns Task<GuildEmote> A task that represents the asynchronous modification operation. The task result contains the modified emote. Exceptions ArgumentNullException func is null. ModifyIncidentActionsAsync(Action<GuildIncidentsDataProperties>, RequestOptions) Modifies the incident actions of the guild. public Task<GuildIncidentsData> ModifyIncidentActionsAsync(Action<GuildIncidentsDataProperties> props, RequestOptions options = null) Parameters props Action<GuildIncidentsDataProperties> options RequestOptions Returns Task<GuildIncidentsData> A task that represents the asynchronous creation operation. The task result contains the modified IncidentsData. ModifyOnboardingAsync(Action<GuildOnboardingProperties>, RequestOptions) Modifies the onboarding object configured for the guild. public Task<RestGuildOnboarding> ModifyOnboardingAsync(Action<GuildOnboardingProperties> props, RequestOptions options = null) Parameters props Action<GuildOnboardingProperties> options RequestOptions Returns Task<RestGuildOnboarding> A task that represents the asynchronous creation operation. The task result contains the modified IGuildOnboarding. ModifyWelcomeScreenAsync(bool, WelcomeScreenChannelProperties[], string, RequestOptions) Modifies the welcome screen of the guild. Returns null if welcome screen is removed. public Task<WelcomeScreen> ModifyWelcomeScreenAsync(bool enabled, WelcomeScreenChannelProperties[] channels, string description = null, RequestOptions options = null) Parameters enabled bool channels WelcomeScreenChannelProperties[] description string options RequestOptions Returns Task<WelcomeScreen> A task that represents the asynchronous creation operation. The task result contains a WelcomeScreen. ModifyWidgetAsync(Action<GuildWidgetProperties>, RequestOptions) Modifies this guild's widget. public Task ModifyWidgetAsync(Action<GuildWidgetProperties> func, RequestOptions options = null) Parameters func Action<GuildWidgetProperties> The delegate containing the properties to modify the guild widget with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Exceptions ArgumentNullException func is null. MoveAsync(IGuildUser, IVoiceChannel) Moves the user to the voice channel. public Task MoveAsync(IGuildUser user, IVoiceChannel targetChannel) Parameters user IGuildUser The user to move. targetChannel IVoiceChannel the channel where the user gets moved to. Returns Task A task that represents the asynchronous operation for moving a user. PruneUsersAsync(int, bool, RequestOptions, IEnumerable<ulong>) Prunes inactive users. public Task<int> PruneUsersAsync(int days = 30, bool simulate = false, RequestOptions options = null, IEnumerable<ulong> includeRoleIds = null) Parameters days int The number of days required for the users to be kicked. simulate bool Whether this prune action is a simulation. options RequestOptions The options to be used when sending the request. includeRoleIds IEnumerable<ulong> An array of role IDs to be included in the prune of users who do not have any additional roles. Returns Task<int> A task that represents the asynchronous prune operation. The task result contains the number of users to be or has been removed from this guild. Remarks This method removes all users that have not logged on in the provided number of days. If simulate is true, this method will only return the number of users that would be removed without kicking the users. RemoveBanAsync(IUser, RequestOptions) Unbans the user if they are currently banned. public Task RemoveBanAsync(IUser user, RequestOptions options = null) Parameters user IUser The user to be unbanned. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation for the ban. RemoveBanAsync(ulong, RequestOptions) Unbans the user if they are currently banned. public Task RemoveBanAsync(ulong userId, RequestOptions options = null) Parameters userId ulong The snowflake identifier of the user to be unbanned. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation for the ban. ReorderChannelsAsync(IEnumerable<ReorderChannelProperties>, RequestOptions) Bulk-modifies the order of channels in this guild. public Task ReorderChannelsAsync(IEnumerable<ReorderChannelProperties> args, RequestOptions options = null) Parameters args IEnumerable<ReorderChannelProperties> The properties used to modify the channel positions with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous reorder operation. Exceptions ArgumentNullException args is null. ReorderRolesAsync(IEnumerable<ReorderRoleProperties>, RequestOptions) Bulk-modifies the order of roles in this guild. public Task ReorderRolesAsync(IEnumerable<ReorderRoleProperties> args, RequestOptions options = null) Parameters args IEnumerable<ReorderRoleProperties> The properties used to modify the role positions with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous reorder operation. SearchUsersAsync(string, int, RequestOptions) Gets a collection of users in this guild that the name or nickname starts with the provided string at query. public Task<IReadOnlyCollection<RestGuildUser>> SearchUsersAsync(string query, int limit = 1000, RequestOptions options = null) Parameters query string The partial name or nickname to search. limit int The maximum number of users to be gotten. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestGuildUser>> A task that represents the asynchronous get operation. The task result contains a collection of guild users that the name or nickname starts with the provided string at query. Remarks The limit can not be higher than MaxUsersPerBatch. ToString() Returns the name of the guild. public override string ToString() Returns string The name of the guild. UpdateAsync(RequestOptions) Updates this object's properties with its current state. public Task UpdateAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task UpdateAsync(bool, RequestOptions) Updates this object's properties with its current state. public Task UpdateAsync(bool withCounts, RequestOptions options = null) Parameters withCounts bool If true, ApproximateMemberCount and ApproximatePresenceCount will be updated as well. options RequestOptions The options to be used when sending the request. Returns Task Remarks If withCounts is true, ApproximateMemberCount and ApproximatePresenceCount will be updated as well."
  },
  "api/Discord.Rest.RestGuildChannel.html": {
    "href": "api/Discord.Rest.RestGuildChannel.html",
    "title": "Class RestGuildChannel | Discord.Net Documentation",
    "keywords": "Class RestGuildChannel Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a private REST-based group channel. public class RestGuildChannel : RestChannel, IUpdateable, IGuildChannel, IChannel, ISnowflakeEntity, IEntity<ulong>, IDeletable Inheritance object RestEntity<ulong> RestChannel RestGuildChannel Implements IUpdateable IGuildChannel IChannel ISnowflakeEntity IEntity<ulong> IDeletable Derived RestCategoryChannel RestForumChannel RestTextChannel Inherited Members RestChannel.CreatedAt RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties Flags Gets the flags related to this channel. public ChannelFlags Flags { get; } Property Value ChannelFlags A channel's flags, if any is associated. Remarks This value is determined by bitwise OR-ing ChannelFlags values together. GuildId Gets the guild ID associated with this channel. public ulong GuildId { get; } Property Value ulong An ulong representing the guild snowflake identifier for the guild that this channel belongs to. Name Gets the name of this channel. public string Name { get; } Property Value string A string containing the name of this channel. PermissionOverwrites Gets a collection of permission overwrites for this channel. public virtual IReadOnlyCollection<Overwrite> PermissionOverwrites { get; } Property Value IReadOnlyCollection<Overwrite> A collection of overwrites associated with this channel. Position Gets the position of this channel. public int Position { get; } Property Value int An int representing the position of this channel in the guild's channel list relative to others of the same type. Methods AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions) Adds or updates the permission overwrite for the given role. public virtual Task AddPermissionOverwriteAsync(IRole role, OverwritePermissions permissions, RequestOptions options = null) Parameters role IRole The role to add the overwrite to. permissions OverwritePermissions The overwrite to add to the role. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous permission operation for adding the specified permissions to the channel. AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions) Adds or updates the permission overwrite for the given user. public virtual Task AddPermissionOverwriteAsync(IUser user, OverwritePermissions permissions, RequestOptions options = null) Parameters user IUser The user to add the overwrite to. permissions OverwritePermissions The overwrite to add to the user. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous permission operation for adding the specified permissions to the channel. DeleteAsync(RequestOptions) Deletes this object and all its children. public Task DeleteAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task GetPermissionOverwrite(IRole) Gets the permission overwrite for a specific role. public virtual OverwritePermissions? GetPermissionOverwrite(IRole role) Parameters role IRole The role to get the overwrite from. Returns OverwritePermissions? An overwrite object for the targeted role; null if none is set. GetPermissionOverwrite(IUser) Gets the permission overwrite for a specific user. public virtual OverwritePermissions? GetPermissionOverwrite(IUser user) Parameters user IUser The user to get the overwrite from. Returns OverwritePermissions? An overwrite object for the targeted user; null if none is set. ModifyAsync(Action<GuildChannelProperties>, RequestOptions) Modifies this guild channel. public Task ModifyAsync(Action<GuildChannelProperties> func, RequestOptions options = null) Parameters func Action<GuildChannelProperties> The delegate containing the properties to modify the channel with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies the current guild channel with the specified properties. To see an example of this method and what properties are available, please refer to GuildChannelProperties. RemovePermissionOverwriteAsync(IRole, RequestOptions) Removes the permission overwrite for the given role, if one exists. public virtual Task RemovePermissionOverwriteAsync(IRole role, RequestOptions options = null) Parameters role IRole The role to remove the overwrite from. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel. RemovePermissionOverwriteAsync(IUser, RequestOptions) Removes the permission overwrite for the given user, if one exists. public virtual Task RemovePermissionOverwriteAsync(IUser user, RequestOptions options = null) Parameters user IUser The user to remove the overwrite from. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel. ToString() Gets the name of this channel. public override string ToString() Returns string A string that is the name of this channel. UpdateAsync(RequestOptions) Updates this object's properties with its current state. public override Task UpdateAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task"
  },
  "api/Discord.Rest.RestGuildCommand.html": {
    "href": "api/Discord.Rest.RestGuildCommand.html",
    "title": "Class RestGuildCommand | Discord.Net Documentation",
    "keywords": "Class RestGuildCommand Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a Rest-based guild application command. public class RestGuildCommand : RestApplicationCommand, IApplicationCommand, ISnowflakeEntity, IEntity<ulong>, IDeletable Inheritance object RestEntity<ulong> RestApplicationCommand RestGuildCommand Implements IApplicationCommand ISnowflakeEntity IEntity<ulong> IDeletable Inherited Members RestApplicationCommand.ApplicationId RestApplicationCommand.Type RestApplicationCommand.Name RestApplicationCommand.Description RestApplicationCommand.IsDefaultPermission RestApplicationCommand.IsEnabledInDm RestApplicationCommand.IsNsfw RestApplicationCommand.DefaultMemberPermissions RestApplicationCommand.Options RestApplicationCommand.NameLocalizations RestApplicationCommand.DescriptionLocalizations RestApplicationCommand.NameLocalized RestApplicationCommand.DescriptionLocalized RestApplicationCommand.CreatedAt RestApplicationCommand.ModifyAsync(Action<ApplicationCommandProperties>, RequestOptions) RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties GuildId Gets the guild Id where this command originates. public ulong GuildId { get; } Property Value ulong Methods DeleteAsync(RequestOptions) Deletes this object and all its children. public override Task DeleteAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task GetCommandPermission(RequestOptions) Gets this commands permissions inside of the current guild. public Task<GuildApplicationCommandPermission> GetCommandPermission(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<GuildApplicationCommandPermission> A task that represents the asynchronous get operation. The task result contains a GuildApplicationCommandPermission object defining the permissions of the current slash command. GetGuild(bool, RequestOptions) Gets the guild that this slash command resides in. public Task<RestGuild> GetGuild(bool withCounts = false, RequestOptions options = null) Parameters withCounts bool true if you want the approximate member and presence counts for the guild, otherwise false. options RequestOptions The options to be used when sending the request. Returns Task<RestGuild> A task that represents the asynchronous get operation. The task result contains a RestGuild. ModifyAsync<TArg>(Action<TArg>, RequestOptions) Modifies this RestApplicationCommand. public override Task ModifyAsync<TArg>(Action<TArg> func, RequestOptions options = null) where TArg : ApplicationCommandProperties Parameters func Action<TArg> The delegate containing the properties to modify the command with. options RequestOptions The options to be used when sending the request. Returns Task The modified command Type Parameters TArg ModifyCommandPermissions(ApplicationCommandPermission[], RequestOptions) Modifies the current command permissions for this guild command. public Task<GuildApplicationCommandPermission> ModifyCommandPermissions(ApplicationCommandPermission[] permissions, RequestOptions options = null) Parameters permissions ApplicationCommandPermission[] The permissions to overwrite. options RequestOptions The options to be used when sending the request. Returns Task<GuildApplicationCommandPermission> A task that represents the asynchronous modification operation. The task result contains a GuildApplicationCommandPermission object containing the modified permissions."
  },
  "api/Discord.Rest.RestGuildEvent.html": {
    "href": "api/Discord.Rest.RestGuildEvent.html",
    "title": "Class RestGuildEvent | Discord.Net Documentation",
    "keywords": "Class RestGuildEvent Namespace Discord.Rest Assembly Discord.Net.Rest.dll public class RestGuildEvent : RestEntity<ulong>, IGuildScheduledEvent, IEntity<ulong> Inheritance object RestEntity<ulong> RestGuildEvent Implements IGuildScheduledEvent IEntity<ulong> Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Gets the optional channel id where this event will be hosted. public ulong? ChannelId { get; } Property Value ulong? CoverImageId Gets the banner asset id of the event. public string CoverImageId { get; } Property Value string Creator Gets the user who created the event. public IUser Creator { get; } Property Value IUser CreatorId public ulong CreatorId { get; } Property Value ulong Description Gets the description of the event. public string Description { get; } Property Value string Remarks This field is null when the event doesn't have a description. EndTime Gets the optional end time of the event. public DateTimeOffset? EndTime { get; } Property Value DateTimeOffset? EntityId Gets the optional entity id of the event. The \"entity\" of the event can be a stage instance event as is separate from ChannelId. public ulong? EntityId { get; } Property Value ulong? Guild Gets the guild this event is scheduled in. public IGuild Guild { get; } Property Value IGuild GuildId Gets the id of the guild this event is scheduled in. public ulong GuildId { get; } Property Value ulong Location Gets the location of the event if the Type is external. public string Location { get; } Property Value string Name Gets the name of the event. public string Name { get; } Property Value string PrivacyLevel Gets the privacy level of the event. public GuildScheduledEventPrivacyLevel PrivacyLevel { get; } Property Value GuildScheduledEventPrivacyLevel StartTime Gets the start time of the event. public DateTimeOffset StartTime { get; } Property Value DateTimeOffset Status Gets the status of the event. public GuildScheduledEventStatus Status { get; } Property Value GuildScheduledEventStatus Type Gets the type of the event. public GuildScheduledEventType Type { get; } Property Value GuildScheduledEventType UserCount Gets the user count of the event. public int? UserCount { get; } Property Value int? Methods DeleteAsync(RequestOptions) Deletes the current event. public Task DeleteAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous delete operation. EndAsync(RequestOptions) Ends or cancels the event. public Task EndAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous end operation. GetCoverImageUrl(ImageFormat, ushort) Gets this events banner image url. public string GetCoverImageUrl(ImageFormat format = ImageFormat.Auto, ushort size = 1024) Parameters format ImageFormat The format to return. size ushort The size of the image to return in. This can be any power of two between 16 and 2048. Returns string The cover images url. GetUsersAsync(RequestOptions) Gets a collection of N users interested in the event. public IAsyncEnumerable<IReadOnlyCollection<RestUser>> GetUsersAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestUser>> Paged collection of users. Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the individual messages as a collection. This method will attempt to fetch all users that are interested in the event. The library will attempt to split up the requests according to and MaxGuildEventUsersPerBatch. In other words, if there are 300 users, and the MaxGuildEventUsersPerBatch constant is 100, the request will be split into 3 individual requests; thus returning 3 individual asynchronous responses, hence the need of flattening. GetUsersAsync(ulong, Direction, int, RequestOptions) Gets a collection of N users interested in the event. public IAsyncEnumerable<IReadOnlyCollection<RestUser>> GetUsersAsync(ulong fromUserId, Direction dir, int limit = 100, RequestOptions options = null) Parameters fromUserId ulong The ID of the starting user to get the users from. dir Direction The direction of the users to be gotten from. limit int The numbers of users to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestUser>> Paged collection of users. Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the individual users as a collection. warning Do not fetch too many users at once! This may cause unwanted preemptive rate limit or even actual rate limit, causing your bot to freeze! This method will attempt to fetch the number of users specified under limit around the user fromUserId depending on the dir. The library will attempt to split up the requests according to your limit and MaxGuildEventUsersPerBatch. In other words, should the user request 500 users, and the MaxGuildEventUsersPerBatch constant is 100, the request will be split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need of flattening. ModifyAsync(Action<GuildScheduledEventsProperties>, RequestOptions) Modifies the guild event. public Task ModifyAsync(Action<GuildScheduledEventsProperties> func, RequestOptions options = null) Parameters func Action<GuildScheduledEventsProperties> The delegate containing the properties to modify the event with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. StartAsync(RequestOptions) Starts the event. public Task StartAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous start operation."
  },
  "api/Discord.Rest.RestGuildOnboarding.html": {
    "href": "api/Discord.Rest.RestGuildOnboarding.html",
    "title": "Class RestGuildOnboarding | Discord.Net Documentation",
    "keywords": "Class RestGuildOnboarding Namespace Discord.Rest Assembly Discord.Net.Rest.dll Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. public class RestGuildOnboarding : IGuildOnboarding Inheritance object RestGuildOnboarding Implements IGuildOnboarding Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods GuildOnboardingExtensions.ToProperties(IGuildOnboarding) Properties DefaultChannelIds Gets IDs of channels that members get opted into automatically. public IReadOnlyCollection<ulong> DefaultChannelIds { get; } Property Value IReadOnlyCollection<ulong> Guild Gets the guild this onboarding is part of. public RestGuild Guild { get; } Property Value RestGuild GuildId Gets the ID of the guild this onboarding is part of. public ulong GuildId { get; } Property Value ulong IsBelowRequirements Gets whether the server does not meet requirements to enable guild onboarding. public bool IsBelowRequirements { get; } Property Value bool IsEnabled Gets whether onboarding is enabled in the guild. public bool IsEnabled { get; } Property Value bool Mode Gets the current mode of onboarding. public GuildOnboardingMode Mode { get; } Property Value GuildOnboardingMode Prompts Gets prompts shown during onboarding and in customize community. public IReadOnlyCollection<RestGuildOnboardingPrompt> Prompts { get; } Property Value IReadOnlyCollection<RestGuildOnboardingPrompt> Methods ModifyAsync(Action<GuildOnboardingProperties>, RequestOptions) Modifies the onboarding object. public Task ModifyAsync(Action<GuildOnboardingProperties> props, RequestOptions options = null) Parameters props Action<GuildOnboardingProperties> options RequestOptions Returns Task"
  },
  "api/Discord.Rest.RestGuildOnboardingPrompt.html": {
    "href": "api/Discord.Rest.RestGuildOnboardingPrompt.html",
    "title": "Class RestGuildOnboardingPrompt | Discord.Net Documentation",
    "keywords": "Class RestGuildOnboardingPrompt Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents the guild onboarding prompt. public class RestGuildOnboardingPrompt : RestEntity<ulong>, IGuildOnboardingPrompt, ISnowflakeEntity, IEntity<ulong> Inheritance object RestEntity<ulong> RestGuildOnboardingPrompt Implements IGuildOnboardingPrompt ISnowflakeEntity IEntity<ulong> Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods GuildOnboardingExtensions.ToProperties(IGuildOnboardingPrompt) Properties CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. IsInOnboarding Indicates whether the prompt is present in the onboarding flow. If false, the prompt will only appear in the Channels and Roles tab. public bool IsInOnboarding { get; } Property Value bool IsRequired Indicates whether the prompt is required before a user completes the onboarding flow. public bool IsRequired { get; } Property Value bool IsSingleSelect Indicates whether users are limited to selecting one option for the prompt. public bool IsSingleSelect { get; } Property Value bool Options Gets options available within the prompt. public IReadOnlyCollection<RestGuildOnboardingPromptOption> Options { get; } Property Value IReadOnlyCollection<RestGuildOnboardingPromptOption> Title Gets the title of the prompt. public string Title { get; } Property Value string Type Gets the type of the prompt. public GuildOnboardingPromptType Type { get; } Property Value GuildOnboardingPromptType"
  },
  "api/Discord.Rest.RestGuildOnboardingPromptOption.html": {
    "href": "api/Discord.Rest.RestGuildOnboardingPromptOption.html",
    "title": "Class RestGuildOnboardingPromptOption | Discord.Net Documentation",
    "keywords": "Class RestGuildOnboardingPromptOption Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents the guild onboarding prompt option. public class RestGuildOnboardingPromptOption : RestEntity<ulong>, IGuildOnboardingPromptOption, ISnowflakeEntity, IEntity<ulong> Inheritance object RestEntity<ulong> RestGuildOnboardingPromptOption Implements IGuildOnboardingPromptOption ISnowflakeEntity IEntity<ulong> Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods GuildOnboardingExtensions.ToProperties(IGuildOnboardingPromptOption) Properties ChannelIds Gets IDs of channels a member is added to when the option is selected. public IReadOnlyCollection<ulong> ChannelIds { get; } Property Value IReadOnlyCollection<ulong> CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. Description Gets the description of the option. null if none is set. public string Description { get; } Property Value string Emoji Gets the emoji of the option. null if none is set. public IEmote Emoji { get; } Property Value IEmote RoleIds Gets IDs of roles assigned to a member when the option is selected. public IReadOnlyCollection<ulong> RoleIds { get; } Property Value IReadOnlyCollection<ulong> Title Gets the title of the option. public string Title { get; } Property Value string"
  },
  "api/Discord.Rest.RestGuildUser.html": {
    "href": "api/Discord.Rest.RestGuildUser.html",
    "title": "Class RestGuildUser | Discord.Net Documentation",
    "keywords": "Class RestGuildUser Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based guild user. public class RestGuildUser : RestUser, IUpdateable, IGuildUser, IUser, ISnowflakeEntity, IEntity<ulong>, IMentionable, IPresence, IVoiceState Inheritance object RestEntity<ulong> RestUser RestGuildUser Implements IUpdateable IGuildUser IUser ISnowflakeEntity IEntity<ulong> IMentionable IPresence IVoiceState Inherited Members RestUser.IsBot RestUser.Username RestUser.DiscriminatorValue RestUser.AvatarId RestUser.BannerId RestUser.AccentColor RestUser.PublicFlags RestUser.GlobalName RestUser.CreatedAt RestUser.Discriminator RestUser.Mention RestUser.Activity RestUser.Status RestUser.ActiveClients RestUser.Activities RestUser.IsWebhook RestUser.AvatarDecorationHash RestUser.AvatarDecorationSkuId RestUser.CreateDMChannelAsync(RequestOptions) RestUser.GetAvatarUrl(ImageFormat, ushort) RestUser.GetBannerUrl(ImageFormat, ushort) RestUser.GetDefaultAvatarUrl() RestUser.GetAvatarDecorationUrl() RestUser.ToString() RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods UserExtensions.BanAsync(IGuildUser, int, string, RequestOptions) UserExtensions.SendFileAsync(IUser, FileAttachment, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, Stream, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFilesAsync(IUser, IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendMessageAsync(IUser, string, bool, Embed, RequestOptions, AllowedMentions, MessageComponent, Embed[]) Properties DisplayAvatarId Gets the displayed avatar for this user. public string DisplayAvatarId { get; } Property Value string The users displayed avatar hash. If the user does not have a guild avatar, this will be the regular avatar. If the user also does not have a regular avatar, this will be null. DisplayName Gets the displayed name for this user. public string DisplayName { get; } Property Value string A string representing the display name of the user; If the nickname is null, this will be the username. Flags Gets the public flags for this guild member. public GuildUserFlags Flags { get; } Property Value GuildUserFlags GuildAvatarId Gets the guild specific avatar for this user. public string GuildAvatarId { get; } Property Value string The users guild avatar hash if they have one; otherwise null. GuildId Gets the ID of the guild for this user. public ulong GuildId { get; } Property Value ulong An ulong representing the snowflake identifier of the guild that this user belongs to. GuildPermissions Gets the guild-level permissions for this user. public GuildPermissions GuildPermissions { get; } Property Value GuildPermissions A GuildPermissions structure for this user, representing what permissions this user has in the guild. Exceptions InvalidOperationException Resolving permissions requires the parent guild to be downloaded. Hierarchy Gets the users position within the role hierarchy. public int Hierarchy { get; } Property Value int IsDeafened Gets a value that indicates whether this user is deafened by the guild. public bool IsDeafened { get; } Property Value bool true if the user is deafened (i.e. not permitted to listen to or speak to others) by the guild; otherwise false. IsMuted Gets a value that indicates whether this user is muted (i.e. not permitted to speak via voice) by the guild. public bool IsMuted { get; } Property Value bool true if this user is muted by the guild; otherwise false. IsPending Whether the user has passed the guild's Membership Screening requirements. public bool? IsPending { get; } Property Value bool? JoinedAt Gets when this user joined the guild. public DateTimeOffset? JoinedAt { get; } Property Value DateTimeOffset? A DateTimeOffset representing the time of which the user has joined the guild; null when it cannot be obtained. Nickname Gets the nickname for this user. public string Nickname { get; } Property Value string A string representing the nickname of the user; null if none is set. PremiumSince Gets the date and time for when this user's guild boost began. public DateTimeOffset? PremiumSince { get; } Property Value DateTimeOffset? A DateTimeOffset for when the user began boosting this guild; null if they are not boosting the guild. RoleIds Gets a collection of IDs for the roles that this user currently possesses in the guild. public IReadOnlyCollection<ulong> RoleIds { get; } Property Value IReadOnlyCollection<ulong> A read-only collection of ulong, each representing a snowflake identifier for a role that this user possesses. Remarks This property returns a read-only collection of the identifiers of the roles that this user possesses. For WebSocket users, a Roles property can be found in place of this property. Due to the REST implementation, only a collection of identifiers can be retrieved instead of the full role objects. TimedOutUntil Gets the date and time that indicates if and for how long a user has been timed out. public DateTimeOffset? TimedOutUntil { get; } Property Value DateTimeOffset? A DateTimeOffset indicating how long the user will be timed out for. Remarks null or a timestamp in the past if the user is not timed out. Methods AddRoleAsync(IRole, RequestOptions) Adds the specified role to this user in the guild. public Task AddRoleAsync(IRole role, RequestOptions options = null) Parameters role IRole The role to be added to the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. AddRoleAsync(ulong, RequestOptions) Adds the specified role to this user in the guild. public Task AddRoleAsync(ulong roleId, RequestOptions options = null) Parameters roleId ulong The role to be added to the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. AddRolesAsync(IEnumerable<IRole>, RequestOptions) Adds the specified roles to this user in the guild. public Task AddRolesAsync(IEnumerable<IRole> roles, RequestOptions options = null) Parameters roles IEnumerable<IRole> The roles to be added to the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. AddRolesAsync(IEnumerable<ulong>, RequestOptions) Adds the specified roleIds to this user in the guild. public Task AddRolesAsync(IEnumerable<ulong> roleIds, RequestOptions options = null) Parameters roleIds IEnumerable<ulong> The roles to be added to the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. GetDisplayAvatarUrl(ImageFormat, ushort) Gets the display avatar URL for this user. public override string GetDisplayAvatarUrl(ImageFormat format = ImageFormat.Auto, ushort size = 128) Parameters format ImageFormat The format of the image. size ushort The size of the image that matches any power of two, ranging from 16 to 2048. Returns string A string representing the user's display avatar URL. Remarks This method will return GetDefaultAvatarUrl() if the user has no avatar set. GetGuildAvatarUrl(ImageFormat, ushort) Gets the guild-specific avatar URL for this user, if it is set. public string GetGuildAvatarUrl(ImageFormat format = ImageFormat.Auto, ushort size = 128) Parameters format ImageFormat The format of the image. size ushort The size of the image that matches any power of two, ranging from 16 to 2048. Returns string A string representing the user's guild-specific avatar URL; null if the user has no guild avatar set. Remarks tip If you wish to retrieve the display avatar for this user, consider using GetDisplayAvatarUrl(ImageFormat, ushort). GetPermissions(IGuildChannel) Gets the level permissions granted to this user to a given channel. public ChannelPermissions GetPermissions(IGuildChannel channel) Parameters channel IGuildChannel The channel to get the permission from. Returns ChannelPermissions A ChannelPermissions structure representing the permissions that a user has in the specified channel. Examples The following example checks if the current user has the ability to send a message with attachment in this channel; if so, uploads a file via SendFileAsync(string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags). if (currentUser?.GetPermissions(targetChannel)?.AttachFiles) await targetChannel.SendFileAsync(\"fortnite.png\"); Exceptions InvalidOperationException Resolving permissions requires the parent guild to be downloaded. KickAsync(string, RequestOptions) Kicks this user from this guild. public Task KickAsync(string reason = null, RequestOptions options = null) Parameters reason string The reason for the kick which will be recorded in the audit log. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous kick operation. ModifyAsync(Action<GuildUserProperties>, RequestOptions) Modifies this user's properties in this guild. public Task ModifyAsync(Action<GuildUserProperties> func, RequestOptions options = null) Parameters func Action<GuildUserProperties> The delegate containing the properties to modify the user with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies the current guild user with the specified properties. To see an example of this method and what properties are available, please refer to GuildUserProperties. RemoveRoleAsync(IRole, RequestOptions) Removes the specified role from this user in the guild. public Task RemoveRoleAsync(IRole role, RequestOptions options = null) Parameters role IRole The role to be removed from the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. RemoveRoleAsync(ulong, RequestOptions) Removes the specified roleId from this user in the guild. public Task RemoveRoleAsync(ulong roleId, RequestOptions options = null) Parameters roleId ulong The role to be removed from the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. RemoveRolesAsync(IEnumerable<IRole>, RequestOptions) Removes the specified roles from this user in the guild. public Task RemoveRolesAsync(IEnumerable<IRole> roles, RequestOptions options = null) Parameters roles IEnumerable<IRole> The roles to be removed from the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. RemoveRolesAsync(IEnumerable<ulong>, RequestOptions) Removes the specified roleIds from this user in the guild. public Task RemoveRolesAsync(IEnumerable<ulong> roleIds, RequestOptions options = null) Parameters roleIds IEnumerable<ulong> The roles to be removed from the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. RemoveTimeOutAsync(RequestOptions) Removes the current timeout from the user in this guild if one exists. public Task RemoveTimeOutAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous timeout removal operation. SetTimeOutAsync(TimeSpan, RequestOptions) Sets a timeout based on provided TimeSpan to this user in the guild. public Task SetTimeOutAsync(TimeSpan span, RequestOptions options = null) Parameters span TimeSpan The TimeSpan indicating how long a user should be timed out for. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous timeout creation operation. UpdateAsync(RequestOptions) Updates this object's properties with its current state. public override Task UpdateAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task"
  },
  "api/Discord.Rest.RestGuildWidget.html": {
    "href": "api/Discord.Rest.RestGuildWidget.html",
    "title": "Struct RestGuildWidget | Discord.Net Documentation",
    "keywords": "Struct RestGuildWidget Namespace Discord.Rest Assembly Discord.Net.Rest.dll public struct RestGuildWidget Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties ChannelId public readonly ulong? ChannelId { get; } Property Value ulong? IsEnabled public readonly bool IsEnabled { get; } Property Value bool Methods ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name."
  },
  "api/Discord.Rest.RestIntegration.html": {
    "href": "api/Discord.Rest.RestIntegration.html",
    "title": "Class RestIntegration | Discord.Net Documentation",
    "keywords": "Class RestIntegration Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a Rest-based implementation of IIntegration. public class RestIntegration : RestEntity<ulong>, IEntity<ulong>, IIntegration Inheritance object RestEntity<ulong> RestIntegration Implements IEntity<ulong> IIntegration Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Account Gets integration account information. public IIntegrationAccount Account { get; } Property Value IIntegrationAccount Application Gets the bot/OAuth2 application for a discord integration. public IIntegrationApplication Application { get; } Property Value IIntegrationApplication ExpireBehavior Gets the behavior of expiring subscribers. public IntegrationExpireBehavior? ExpireBehavior { get; } Property Value IntegrationExpireBehavior? ExpireGracePeriod Gets the grace period before expiring \"subscribers\". public int? ExpireGracePeriod { get; } Property Value int? GuildId public ulong GuildId { get; } Property Value ulong HasEnabledEmoticons Gets whether emoticons should be synced for this integration (twitch only currently). public bool? HasEnabledEmoticons { get; } Property Value bool? IsEnabled Gets a value that indicates whether this integration is enabled or not. public bool IsEnabled { get; } Property Value bool true if this integration is enabled; otherwise false. IsRevoked Gets whether this integration been revoked. public bool? IsRevoked { get; } Property Value bool? IsSyncing Gets a value that indicates whether this integration is syncing or not. public bool? IsSyncing { get; } Property Value bool? true if this integration is syncing; otherwise false. Remarks An integration with syncing enabled will update its \"subscribers\" on an interval, while one with syncing disabled will not. A user must manually choose when sync the integration if syncing is disabled. Name Gets the integration name. public string Name { get; } Property Value string A string containing the name of this integration. RoleId Gets the ID that this integration uses for \"subscribers\". public ulong? RoleId { get; } Property Value ulong? SubscriberCount Gets how many subscribers this integration has. public int? SubscriberCount { get; } Property Value int? SyncedAt Gets when this integration was last synced. public DateTimeOffset? SyncedAt { get; } Property Value DateTimeOffset? A DateTimeOffset containing a date and time of day when the integration was last synced. Type Gets the integration type (Twitch, YouTube, etc). public string Type { get; } Property Value string A string containing the name of the type of integration. User public RestUser User { get; } Property Value RestUser Methods DeleteAsync() public Task DeleteAsync() Returns Task ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Discord.Rest.RestIntegrationAccount.html": {
    "href": "api/Discord.Rest.RestIntegrationAccount.html",
    "title": "Class RestIntegrationAccount | Discord.Net Documentation",
    "keywords": "Class RestIntegrationAccount Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a Rest-based implementation of IIntegrationAccount. public class RestIntegrationAccount : IIntegrationAccount Inheritance object RestIntegrationAccount Implements IIntegrationAccount Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id Gets the ID of the account. public string Id { get; } Property Value string A string unique identifier of this integration account. Name Gets the name of the account. public string Name { get; } Property Value string A string containing the name of this integration account."
  },
  "api/Discord.Rest.RestIntegrationApplication.html": {
    "href": "api/Discord.Rest.RestIntegrationApplication.html",
    "title": "Class RestIntegrationApplication | Discord.Net Documentation",
    "keywords": "Class RestIntegrationApplication Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a Rest-based implementation of IIntegrationApplication. public class RestIntegrationApplication : RestEntity<ulong>, IEntity<ulong>, IIntegrationApplication Inheritance object RestEntity<ulong> RestIntegrationApplication Implements IEntity<ulong> IIntegrationApplication Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Bot Gets the bot associated with this application. public IUser Bot { get; } Property Value IUser Description Gets the description of the app. public string Description { get; } Property Value string Icon Gets the icon hash of the app. public string Icon { get; } Property Value string Name Gets the name of the app. public string Name { get; } Property Value string Summary Gets the summary of the app. public string Summary { get; } Property Value string"
  },
  "api/Discord.Rest.RestInteraction.html": {
    "href": "api/Discord.Rest.RestInteraction.html",
    "title": "Class RestInteraction | Discord.Net Documentation",
    "keywords": "Class RestInteraction Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based interaction. public abstract class RestInteraction : RestEntity<ulong>, IDiscordInteraction, ISnowflakeEntity, IEntity<ulong> Inheritance object RestEntity<ulong> RestInteraction Implements IDiscordInteraction ISnowflakeEntity IEntity<ulong> Derived RestAutocompleteInteraction RestCommandBase RestMessageComponent RestModal RestPingInteraction Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, InteractionService, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, T, RequestOptions, Action<ModalBuilder>) RestExtensions.RespondWithModal<T>(RestInteraction, string, RequestOptions, Action<ModalBuilder>) RestExtensions.RespondWithModal<T>(RestInteraction, string, T, RequestOptions, Action<ModalBuilder>) Properties ApplicationId Gets the ID of the application this interaction is for. public ulong ApplicationId { get; } Property Value ulong Channel Gets the channel that this interaction was executed in. public IRestMessageChannel Channel { get; } Property Value IRestMessageChannel Remarks This property will be null if APIOnRestInteractionCreation is set to false. Call GetChannelAsync(RequestOptions) to set this property and get the interaction channel. ChannelId Gets the ID of the channel this interaction was executed in. public ulong? ChannelId { get; } Property Value ulong? Remarks This property returns null if the interaction is a REST ping interaction. CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. Data Gets the data sent within this interaction. public IDiscordInteractionData Data { get; } Property Value IDiscordInteractionData Entitlements Gets entitlements for the invoking user. public IReadOnlyCollection<RestEntitlement> Entitlements { get; } Property Value IReadOnlyCollection<RestEntitlement> Guild Gets the guild this interaction was executed in if applicable. public RestGuild Guild { get; } Property Value RestGuild Remarks This property will be null if APIOnRestInteractionCreation is set to false or if the interaction was not executed in a guild. GuildId Gets the ID of the guild this interaction was executed in. public ulong? GuildId { get; } Property Value ulong? Remarks This property returns null if the interaction was not executed in a guild. GuildLocale Gets the preferred locale of the guild this interaction was executed in. null if not executed in a guild. public string GuildLocale { get; } Property Value string Remarks Non-community guilds (With no locale setting available) will have en-US as the default value sent by Discord. HasResponded Gets whether or not this interaction has been responded to. public bool HasResponded { get; protected set; } Property Value bool Remarks This property is locally set -- if you're running multiple bots off the same token then this property won't be in sync with them. IsDMInteraction Gets whether or not this interaction was executed in a dm channel. public bool IsDMInteraction { get; } Property Value bool IsValidToken Gets whether or not the token used to respond to this interaction is valid. public bool IsValidToken { get; } Property Value bool Token Gets the continuation token for responding to the interaction. public string Token { get; } Property Value string Type Gets the type of this IDiscordInteraction. public InteractionType Type { get; } Property Value InteractionType User Gets the user who invoked the interaction. public RestUser User { get; } Property Value RestUser Remarks If this user is an RestGuildUser and APIOnRestInteractionCreation is set to false, Guild will return null UserLocale Gets the preferred locale of the invoking User. public string UserLocale { get; } Property Value string Remarks This property returns null if the interaction is a REST ping interaction. Version Gets the version of the interaction, always 1. public int Version { get; } Property Value int Methods Defer(bool, RequestOptions) public abstract string Defer(bool ephemeral = false, RequestOptions options = null) Parameters ephemeral bool options RequestOptions Returns string DeleteOriginalResponseAsync(RequestOptions) Deletes the original response to this interaction. public Task DeleteOriginalResponseAsync(RequestOptions options = null) Parameters options RequestOptions The request options for this async request. Returns Task A task that represents an asynchronous deletion operation. FollowupAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public abstract Task<RestFollowupMessage> FollowupAsync(string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public abstract Task<RestFollowupMessage> FollowupWithFileAsync(FileAttachment attachment, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachment FileAttachment The attachment containing the file and description. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public abstract Task<RestFollowupMessage> FollowupWithFileAsync(Stream fileStream, string fileName, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters fileStream Stream The file to upload. fileName string The file name of the attachment. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public abstract Task<RestFollowupMessage> FollowupWithFileAsync(string filePath, string fileName = null, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters filePath string The file to upload. fileName string The file name of the attachment. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public abstract Task<RestFollowupMessage> FollowupWithFilesAsync(IEnumerable<FileAttachment> attachments, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. GetChannelAsync(RequestOptions) Gets the channel this interaction was executed in. Will be a DM channel if the interaction was executed in DM. public Task<IRestMessageChannel> GetChannelAsync(RequestOptions options = null) Parameters options RequestOptions The request options for this async request. Returns Task<IRestMessageChannel> A Rest channel to send messages to. Remarks Calling this method successfully will populate the Channel property. After this, further calls to this method will no longer call the API, and depend on the value set in Channel. Exceptions InvalidOperationException Thrown if no channel can be received. GetGuildAsync(RequestOptions) Gets the guild this interaction was executed in if applicable. public Task<RestGuild> GetGuildAsync(RequestOptions options) Parameters options RequestOptions The request options for this async request. Returns Task<RestGuild> The guild this interaction was executed in. null if the interaction was executed inside DM. Remarks Calling this method successfully will populate the Guild property. After this, further calls to this method will no longer call the API, and depend on the value set in Guild. GetOriginalResponseAsync(RequestOptions) Gets the original response for this interaction. public Task<RestInteractionMessage> GetOriginalResponseAsync(RequestOptions options = null) Parameters options RequestOptions The request options for this async request. Returns Task<RestInteractionMessage> A RestInteractionMessage that represents the initial response. ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) Edits original response for this interaction. public Task<RestInteractionMessage> ModifyOriginalResponseAsync(Action<MessageProperties> func, RequestOptions options = null) Parameters func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The request options for this async request. Returns Task<RestInteractionMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Respond(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) public abstract string Respond(string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters text string embeds Embed[] isTTS bool ephemeral bool allowedMentions AllowedMentions components MessageComponent embed Embed options RequestOptions Returns string RespondWithModal(Modal, RequestOptions) public abstract string RespondWithModal(Modal modal, RequestOptions options = null) Parameters modal Modal options RequestOptions Returns string RespondWithPremiumRequiredAsync(RequestOptions) Responds to the interaction with an ephemeral message the invoking user, instructing them that whatever they tried to do requires the premium benefits of your app. public Task RespondWithPremiumRequiredAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task A task that represents the asynchronous operation of responding to the interaction."
  },
  "api/Discord.Rest.RestInteractionContext-1.html": {
    "href": "api/Discord.Rest.RestInteractionContext-1.html",
    "title": "Class RestInteractionContext<TInteraction> | Discord.Net Documentation",
    "keywords": "Class RestInteractionContext<TInteraction> Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a Rest based context of an IDiscordInteraction. public class RestInteractionContext<TInteraction> : IRestInteractionContext, IInteractionContext, IRouteMatchContainer where TInteraction : RestInteraction Type Parameters TInteraction Inheritance object RestInteractionContext<TInteraction> Implements IRestInteractionContext IInteractionContext IRouteMatchContainer Derived RestInteractionContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RestInteractionContext(DiscordRestClient, TInteraction) Initializes a new RestInteractionContext<TInteraction>. public RestInteractionContext(DiscordRestClient client, TInteraction interaction) Parameters client DiscordRestClient The underlying client. interaction TInteraction The underlying interaction. RestInteractionContext(DiscordRestClient, TInteraction, Func<string, Task>) Initializes a new RestInteractionContext<TInteraction>. public RestInteractionContext(DiscordRestClient client, TInteraction interaction, Func<string, Task> interactionResponseCallback) Parameters client DiscordRestClient The underlying client. interaction TInteraction The underlying interaction. interactionResponseCallback Func<string, Task> The callback for outgoing json. Properties Channel Gets the IRestMessageChannel the command originated from. public IRestMessageChannel Channel { get; } Property Value IRestMessageChannel Client Gets the DiscordRestClient that the command will be executed with. public DiscordRestClient Client { get; } Property Value DiscordRestClient Guild Gets the RestGuild the command originated from. public RestGuild Guild { get; } Property Value RestGuild Remarks Will be null if the command is from a DM Channel. Interaction Gets the RestInteraction the command was received with. public TInteraction Interaction { get; } Property Value TInteraction InteractionResponseCallback Gets or sets the callback to use when the service has outgoing json for the rest webhook. public Func<string, Task> InteractionResponseCallback { get; set; } Property Value Func<string, Task> Remarks If this property is null the default callback will be used. SegmentMatches Gets the collection of captured route segments in this container. public IReadOnlyCollection<IRouteSegmentMatch> SegmentMatches { get; } Property Value IReadOnlyCollection<IRouteSegmentMatch> A collection of captured route segments. User Gets the RestUser who executed the command. public RestUser User { get; } Property Value RestUser Methods SetSegmentMatches(IEnumerable<IRouteSegmentMatch>) Sets the SegmentMatches property of this container. public void SetSegmentMatches(IEnumerable<IRouteSegmentMatch> segmentMatches) Parameters segmentMatches IEnumerable<IRouteSegmentMatch> The collection of captured route segments."
  },
  "api/Discord.Rest.RestInteractionContext.html": {
    "href": "api/Discord.Rest.RestInteractionContext.html",
    "title": "Class RestInteractionContext | Discord.Net Documentation",
    "keywords": "Class RestInteractionContext Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a Rest based context of an IDiscordInteraction. public class RestInteractionContext : RestInteractionContext<RestInteraction>, IRestInteractionContext, IInteractionContext, IRouteMatchContainer Inheritance object RestInteractionContext<RestInteraction> RestInteractionContext Implements IRestInteractionContext IInteractionContext IRouteMatchContainer Inherited Members RestInteractionContext<RestInteraction>.Client RestInteractionContext<RestInteraction>.Guild RestInteractionContext<RestInteraction>.Channel RestInteractionContext<RestInteraction>.User RestInteractionContext<RestInteraction>.Interaction RestInteractionContext<RestInteraction>.InteractionResponseCallback RestInteractionContext<RestInteraction>.SegmentMatches RestInteractionContext<RestInteraction>.SetSegmentMatches(IEnumerable<IRouteSegmentMatch>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RestInteractionContext(DiscordRestClient, RestInteraction) Initializes a new RestInteractionContext. public RestInteractionContext(DiscordRestClient client, RestInteraction interaction) Parameters client DiscordRestClient The underlying client. interaction RestInteraction The underlying interaction. RestInteractionContext(DiscordRestClient, RestInteraction, Func<string, Task>) Initializes a new RestInteractionContext. public RestInteractionContext(DiscordRestClient client, RestInteraction interaction, Func<string, Task> interactionResponseCallback) Parameters client DiscordRestClient The underlying client. interaction RestInteraction The underlying interaction. interactionResponseCallback Func<string, Task> The callback for outgoing json."
  },
  "api/Discord.Rest.RestInteractionMessage.html": {
    "href": "api/Discord.Rest.RestInteractionMessage.html",
    "title": "Class RestInteractionMessage | Discord.Net Documentation",
    "keywords": "Class RestInteractionMessage Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents the initial REST-based response to an interaction. public class RestInteractionMessage : RestUserMessage, IUpdateable, IUserMessage, IMessage, ISnowflakeEntity, IEntity<ulong>, IDeletable Inheritance object RestEntity<ulong> RestMessage RestUserMessage RestInteractionMessage Implements IUpdateable IUserMessage IMessage ISnowflakeEntity IEntity<ulong> IDeletable Inherited Members RestUserMessage.IsTTS RestUserMessage.IsPinned RestUserMessage.IsSuppressed RestUserMessage.EditedTimestamp RestUserMessage.MentionedEveryone RestUserMessage.Attachments RestUserMessage.Embeds RestUserMessage.MentionedChannelIds RestUserMessage.MentionedRoleIds RestUserMessage.Tags RestUserMessage.Stickers RestUserMessage.ReferencedMessage RestUserMessage.ResolvedData RestUserMessage.PinAsync(RequestOptions) RestUserMessage.UnpinAsync(RequestOptions) RestUserMessage.Resolve(int, TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) RestUserMessage.Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) RestUserMessage.CrosspostAsync(RequestOptions) RestMessage.Channel RestMessage.Author RestMessage.Source RestMessage.Content RestMessage.CleanContent RestMessage.CreatedAt RestMessage.Thread RestMessage.Timestamp RestMessage.Activity RestMessage.Application RestMessage.Reference RestMessage.Interaction RestMessage.Flags RestMessage.Type RestMessage.RoleSubscriptionData RestMessage.Components RestMessage.MentionedUsers RestMessage.UpdateAsync(RequestOptions) RestMessage.DeleteAsync(RequestOptions) RestMessage.ToString() RestMessage.Reactions RestMessage.AddReactionAsync(IEmote, RequestOptions) RestMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions) RestMessage.RemoveReactionAsync(IEmote, ulong, RequestOptions) RestMessage.RemoveAllReactionsAsync(RequestOptions) RestMessage.RemoveAllReactionsForEmoteAsync(IEmote, RequestOptions) RestMessage.GetReactionUsersAsync(IEmote, int, RequestOptions, ReactionType) RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods MessageExtensions.GetJumpUrl(IMessage) MessageExtensions.HasCharPrefix(IUserMessage, char, ref int) MessageExtensions.HasMentionPrefix(IUserMessage, IUser, ref int) MessageExtensions.HasStringPrefix(IUserMessage, string, ref int, StringComparison) MessageExtensions.AddReactionsAsync(IUserMessage, IEnumerable<IEmote>, RequestOptions) MessageExtensions.RemoveReactionsAsync(IUserMessage, IUser, IEnumerable<IEmote>, RequestOptions) MessageExtensions.ReplyAsync(IUserMessage, string, bool, Embed, AllowedMentions, RequestOptions, MessageComponent, ISticker[], Embed[], MessageFlags) Properties ResponseType public InteractionResponseType ResponseType { get; } Property Value InteractionResponseType Methods DeleteAsync() Deletes this object and all of its children. public Task DeleteAsync() Returns Task A task that represents the asynchronous delete operation. ModifyAsync(Action<MessageProperties>, RequestOptions) Modifies this interaction response public Task ModifyAsync(Action<MessageProperties> func, RequestOptions options = null) Parameters func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Examples The following example replaces the content of the message with Hello World!. await msg.ModifyAsync(x => x.Content = \"Hello World!\"); Remarks This method modifies this message with the specified properties. To see an example of this method and what properties are available, please refer to MessageProperties. Exceptions InvalidOperationException The token used to modify/delete this message expired. HttpException Something went wrong during the request."
  },
  "api/Discord.Rest.RestInvite.html": {
    "href": "api/Discord.Rest.RestInvite.html",
    "title": "Class RestInvite | Discord.Net Documentation",
    "keywords": "Class RestInvite Namespace Discord.Rest Assembly Discord.Net.Rest.dll public class RestInvite : RestEntity<string>, IInvite, IEntity<string>, IDeletable, IUpdateable Inheritance object RestEntity<string> RestInvite Implements IInvite IEntity<string> IDeletable IUpdateable Derived RestInviteMetadata Inherited Members RestEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Application Gets the embedded application to open for this voice channel embedded application invite. public RestApplication Application { get; } Property Value RestApplication A partial IApplication object. null if TargetUserType is not EmbeddedApplication. ChannelId Gets the ID of the channel this invite is linked to. public ulong ChannelId { get; } Property Value ulong An ulong representing the channel snowflake identifier that the invite points to. ChannelName Gets the name of the channel this invite is linked to. public string ChannelName { get; } Property Value string A string containing the name of the channel that the invite points to. ChannelType Gets the type of the channel this invite is linked to. public ChannelType ChannelType { get; } Property Value ChannelType Code Gets the unique identifier for this invite. public string Code { get; } Property Value string A string containing the invite code (e.g. FTqNnyS). ExpiresAt Gets the expiration date of this invite. null if the invite never expires. public DateTimeOffset? ExpiresAt { get; } Property Value DateTimeOffset? GuildId Gets the ID of the guild this invite is linked to. public ulong? GuildId { get; } Property Value ulong? An ulong representing the guild snowflake identifier that the invite points to. GuildName Gets the name of the guild this invite is linked to. public string GuildName { get; } Property Value string A string containing the name of the guild that the invite points to. Inviter Gets the user that created this invite. public IUser Inviter { get; } Property Value IUser A user that created this invite. MemberCount Gets the approximated count of total members in the guild. public int? MemberCount { get; } Property Value int? An int representing the approximated total member count of the guild that the invite points to; null if one cannot be obtained. PartialGuild Gets the guild this invite is linked to. public PartialGuild PartialGuild { get; } Property Value PartialGuild A partial guild object representing the guild that the invite points to. PresenceCount Gets the approximated count of online members in the guild. public int? PresenceCount { get; } Property Value int? An int representing the approximated online member count of the guild that the invite points to; null if one cannot be obtained. ScheduledEvent Gets guild scheduled event data. null if event id was invalid. public RestGuildEvent ScheduledEvent { get; } Property Value RestGuildEvent TargetUser Gets the user this invite is linked to via TargetUserType. public IUser TargetUser { get; } Property Value IUser A user that is linked to this invite. TargetUserType Gets the type of the linked TargetUser for this invite. public TargetUserType TargetUserType { get; } Property Value TargetUserType The type of the linked user that is linked to this invite. Url Gets the URL used to accept this invite using Code. public string Url { get; } Property Value string A string containing the full invite URL (e.g. https://discord.gg/FTqNnyS). Methods DeleteAsync(RequestOptions) Deletes this object and all its children. public Task DeleteAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task ToString() Gets the URL of the invite. public override string ToString() Returns string A string that resolves to the Url of the invite. UpdateAsync(RequestOptions) Updates this object's properties with its current state. public Task UpdateAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task"
  },
  "api/Discord.Rest.RestInviteMetadata.html": {
    "href": "api/Discord.Rest.RestInviteMetadata.html",
    "title": "Class RestInviteMetadata | Discord.Net Documentation",
    "keywords": "Class RestInviteMetadata Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents additional information regarding the REST-based invite object. public class RestInviteMetadata : RestInvite, IUpdateable, IInviteMetadata, IInvite, IEntity<string>, IDeletable Inheritance object RestEntity<string> RestInvite RestInviteMetadata Implements IUpdateable IInviteMetadata IInvite IEntity<string> IDeletable Inherited Members RestInvite.ChannelType RestInvite.ChannelName RestInvite.GuildName RestInvite.PresenceCount RestInvite.MemberCount RestInvite.ChannelId RestInvite.GuildId RestInvite.Inviter RestInvite.TargetUser RestInvite.TargetUserType RestInvite.PartialGuild RestInvite.Application RestInvite.ExpiresAt RestInvite.ScheduledEvent RestInvite.Code RestInvite.Url RestInvite.UpdateAsync(RequestOptions) RestInvite.DeleteAsync(RequestOptions) RestInvite.ToString() RestEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties CreatedAt Gets when this invite was created. public DateTimeOffset? CreatedAt { get; } Property Value DateTimeOffset? A DateTimeOffset representing the time of which the invite was first created. IsTemporary Gets a value that indicates whether the invite is a temporary one. public bool IsTemporary { get; } Property Value bool true if users accepting this invite will be removed from the guild when they log off; otherwise false. MaxAge Gets the time (in seconds) until the invite expires. public int? MaxAge { get; } Property Value int? An int representing the time in seconds until this invite expires; null if this invite never expires. MaxUses Gets the max number of uses this invite may have. public int? MaxUses { get; } Property Value int? An int representing the number of uses this invite may be accepted until it is removed from the guild; null if none is set. Uses Gets the number of times this invite has been used. public int? Uses { get; } Property Value int? An int representing the number of times this invite has been used."
  },
  "api/Discord.Rest.RestMediaChannel.html": {
    "href": "api/Discord.Rest.RestMediaChannel.html",
    "title": "Class RestMediaChannel | Discord.Net Documentation",
    "keywords": "Class RestMediaChannel Namespace Discord.Rest Assembly Discord.Net.Rest.dll public class RestMediaChannel : RestForumChannel, IUpdateable, IMediaChannel, IForumChannel, IMentionable, INestedChannel, IIntegrationChannel, IGuildChannel, IChannel, ISnowflakeEntity, IEntity<ulong>, IDeletable Inheritance object RestEntity<ulong> RestChannel RestGuildChannel RestForumChannel RestMediaChannel Implements IUpdateable IMediaChannel IForumChannel IMentionable INestedChannel IIntegrationChannel IGuildChannel IChannel ISnowflakeEntity IEntity<ulong> IDeletable Inherited Members RestForumChannel.IsNsfw RestForumChannel.Topic RestForumChannel.DefaultAutoArchiveDuration RestForumChannel.Tags RestForumChannel.ThreadCreationInterval RestForumChannel.DefaultSlowModeInterval RestForumChannel.CategoryId RestForumChannel.DefaultReactionEmoji RestForumChannel.DefaultSortOrder RestForumChannel.DefaultLayout RestForumChannel.Mention RestForumChannel.ModifyAsync(Action<ForumChannelProperties>, RequestOptions) RestForumChannel.CreatePostAsync(string, ThreadArchiveDuration, int?, string, Embed, RequestOptions, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) RestForumChannel.CreatePostWithFileAsync(string, string, ThreadArchiveDuration, int?, string, Embed, RequestOptions, bool, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) RestForumChannel.CreatePostWithFileAsync(string, Stream, string, ThreadArchiveDuration, int?, string, Embed, RequestOptions, bool, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) RestForumChannel.CreatePostWithFileAsync(string, FileAttachment, ThreadArchiveDuration, int?, string, Embed, RequestOptions, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) RestForumChannel.CreatePostWithFilesAsync(string, IEnumerable<FileAttachment>, ThreadArchiveDuration, int?, string, Embed, RequestOptions, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) RestForumChannel.GetActiveThreadsAsync(RequestOptions) RestForumChannel.GetJoinedPrivateArchivedThreadsAsync(int?, DateTimeOffset?, RequestOptions) RestForumChannel.GetPrivateArchivedThreadsAsync(int?, DateTimeOffset?, RequestOptions) RestForumChannel.GetPublicArchivedThreadsAsync(int?, DateTimeOffset?, RequestOptions) RestForumChannel.CreateWebhookAsync(string, Stream, RequestOptions) RestForumChannel.GetWebhookAsync(ulong, RequestOptions) RestForumChannel.GetWebhooksAsync(RequestOptions) RestForumChannel.CreateInviteAsync(int?, int?, bool, bool, RequestOptions) RestForumChannel.CreateInviteToApplicationAsync(ulong, int?, int?, bool, bool, RequestOptions) RestForumChannel.CreateInviteToApplicationAsync(DefaultApplications, int?, int?, bool, bool, RequestOptions) RestForumChannel.CreateInviteToStreamAsync(IUser, int?, int?, bool, bool, RequestOptions) RestForumChannel.GetInvitesAsync(RequestOptions) RestForumChannel.SyncPermissionsAsync(RequestOptions) RestGuildChannel.PermissionOverwrites RestGuildChannel.Name RestGuildChannel.Position RestGuildChannel.GuildId RestGuildChannel.Flags RestGuildChannel.UpdateAsync(RequestOptions) RestGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions) RestGuildChannel.DeleteAsync(RequestOptions) RestGuildChannel.GetPermissionOverwrite(IUser) RestGuildChannel.GetPermissionOverwrite(IRole) RestGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions) RestGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) RestGuildChannel.ToString() RestChannel.CreatedAt RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel)"
  },
  "api/Discord.Rest.RestMessage.html": {
    "href": "api/Discord.Rest.RestMessage.html",
    "title": "Class RestMessage | Discord.Net Documentation",
    "keywords": "Class RestMessage Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based message. public abstract class RestMessage : RestEntity<ulong>, IMessage, ISnowflakeEntity, IEntity<ulong>, IDeletable, IUpdateable Inheritance object RestEntity<ulong> RestMessage Implements IMessage ISnowflakeEntity IEntity<ulong> IDeletable IUpdateable Derived RestSystemMessage RestUserMessage Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods MessageExtensions.GetJumpUrl(IMessage) Properties Activity Gets the activity associated with a message. public MessageActivity Activity { get; } Property Value MessageActivity A message's activity, if any is associated. Remarks Sent with Rich Presence-related chat embeds. This often refers to activity that requires end-user's interaction, such as a Spotify Invite activity. Application Gets the application associated with a message. public MessageApplication Application { get; } Property Value MessageApplication A message's application, if any is associated. Remarks Sent with Rich-Presence-related chat embeds. Attachments Gets a collection of the Attachment's on the message. public virtual IReadOnlyCollection<Attachment> Attachments { get; } Property Value IReadOnlyCollection<Attachment> Author Gets the Author of the message. public IUser Author { get; } Property Value IUser Channel Gets the source channel of the message. public IMessageChannel Channel { get; } Property Value IMessageChannel CleanContent Gets the clean content for this message. public string CleanContent { get; } Property Value string A string that contains the body of the message stripped of mentions, markdown, emojis and pings; note that this field may be empty if there is an embed. Remarks This will be empty if the privileged MessageContent is disabled. Components The IMessageComponent's attached to this message public IReadOnlyCollection<ActionRowComponent> Components { get; } Property Value IReadOnlyCollection<ActionRowComponent> Content Gets the content for this message. public string Content { get; } Property Value string A string that contains the body of the message; note that this field may be empty if there is an embed. Remarks This will be empty if the privileged MessageContent is disabled. CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. EditedTimestamp Gets the time of this message's last edit. public virtual DateTimeOffset? EditedTimestamp { get; } Property Value DateTimeOffset? Time of when the message was last edited; null if the message is never edited. Embeds Gets a collection of the Embed's on the message. public virtual IReadOnlyCollection<Embed> Embeds { get; } Property Value IReadOnlyCollection<Embed> Flags Gets the flags related to this message. public MessageFlags? Flags { get; } Property Value MessageFlags? A message's flags, if any is associated. Remarks This value is determined by bitwise OR-ing MessageFlags values together. Interaction Gets the interaction this message is a response to. public MessageInteraction<RestUser> Interaction { get; } Property Value MessageInteraction<RestUser> IsPinned Gets the value that indicates whether this message is pinned. public virtual bool IsPinned { get; } Property Value bool true if this message was added to its channel's pinned messages; otherwise false. IsSuppressed Gets the value that indicates whether or not this message's embeds are suppressed. public virtual bool IsSuppressed { get; } Property Value bool true if the embeds in this message have been suppressed (made invisible); otherwise false. IsTTS Gets the value that indicates whether this message was meant to be read-aloud by Discord. public virtual bool IsTTS { get; } Property Value bool true if this message was sent as a text-to-speech message; otherwise false. MentionedChannelIds Gets the IDs of channels mentioned in this message. public virtual IReadOnlyCollection<ulong> MentionedChannelIds { get; } Property Value IReadOnlyCollection<ulong> A read-only collection of channel IDs. MentionedEveryone Gets the value that indicates whether this message mentioned everyone. public virtual bool MentionedEveryone { get; } Property Value bool true if this message mentioned everyone; otherwise false. MentionedRoleIds Gets the IDs of roles mentioned in this message. public virtual IReadOnlyCollection<ulong> MentionedRoleIds { get; } Property Value IReadOnlyCollection<ulong> A read-only collection of role IDs. MentionedUsers Gets a collection of the mentioned users in the message. public IReadOnlyCollection<RestUser> MentionedUsers { get; } Property Value IReadOnlyCollection<RestUser> Reactions Gets all reactions included in this message. public IReadOnlyDictionary<IEmote, ReactionMetadata> Reactions { get; } Property Value IReadOnlyDictionary<IEmote, ReactionMetadata> Reference Gets the reference to the original message if it is a crosspost, channel follow add, pin, or reply message. public MessageReference Reference { get; } Property Value MessageReference A message's reference, if any is associated. Remarks Sent with cross-posted messages, meaning they were published from news channels and received by subscriber channels, channel follow adds, pins, and message replies. RoleSubscriptionData Gets the data of the role subscription purchase or renewal that prompted this RoleSubscriptionPurchase message. public MessageRoleSubscriptionData RoleSubscriptionData { get; } Property Value MessageRoleSubscriptionData A MessageRoleSubscriptionData if the message is a role subscription purchase message; otherwise null. Source Gets the source type of this message. public MessageSource Source { get; } Property Value MessageSource Stickers public virtual IReadOnlyCollection<StickerItem> Stickers { get; } Property Value IReadOnlyCollection<StickerItem> Tags Gets all tags included in this message's content. public virtual IReadOnlyCollection<ITag> Tags { get; } Property Value IReadOnlyCollection<ITag> Thread Gets the thread that was started from this message. public RestThreadChannel Thread { get; } Property Value RestThreadChannel An IThreadChannel object if this message has thread attached; otherwise null. Timestamp Gets the time this message was sent. public DateTimeOffset Timestamp { get; } Property Value DateTimeOffset Time of when the message was sent. Type Gets the type of this message. public MessageType Type { get; } Property Value MessageType Methods AddReactionAsync(IEmote, RequestOptions) Adds a reaction to this message. public Task AddReactionAsync(IEmote emote, RequestOptions options = null) Parameters emote IEmote The emoji used to react to this message. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for adding a reaction to this message. Examples The following example adds the reaction, 💕, to the message. await msg.AddReactionAsync(new Emoji(\"\\U0001f495\")); See Also IEmote DeleteAsync(RequestOptions) Deletes this object and all its children. public Task DeleteAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task GetReactionUsersAsync(IEmote, int, RequestOptions, ReactionType) Gets all users that reacted to a message with a given emote. public IAsyncEnumerable<IReadOnlyCollection<IUser>> GetReactionUsersAsync(IEmote emote, int limit, RequestOptions options = null, ReactionType type = ReactionType.Normal) Parameters emote IEmote limit int The number of users to request. options RequestOptions The options to be used when sending the request. type ReactionType The type of the reaction you wish to get users for. Returns IAsyncEnumerable<IReadOnlyCollection<IUser>> Paged collection of users. Examples The following example gets the users that have reacted with the emoji 💕 to the message. var emoji = new Emoji(\"\\U0001f495\"); var reactedUsers = await message.GetReactionUsersAsync(emoji, 100).FlattenAsync(); Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the users as a collection. warning Do not fetch too many users at once! This may cause unwanted preemptive rate limit or even actual rate limit, causing your bot to freeze! This method will attempt to fetch the number of reactions specified under limit. The library will attempt to split up the requests according to your limit and MaxUserReactionsPerBatch. In other words, should the user request 500 reactions, and the MaxUserReactionsPerBatch constant is 100, the request will be split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need of flattening. RemoveAllReactionsAsync(RequestOptions) Removes all reactions from this message. public Task RemoveAllReactionsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. RemoveAllReactionsForEmoteAsync(IEmote, RequestOptions) Removes all reactions with a specific emoji from this message. public Task RemoveAllReactionsForEmoteAsync(IEmote emote, RequestOptions options = null) Parameters emote IEmote The emoji used to react to this message. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. RemoveReactionAsync(IEmote, IUser, RequestOptions) Removes a reaction from message. public Task RemoveReactionAsync(IEmote emote, IUser user, RequestOptions options = null) Parameters emote IEmote The emoji used to react to this message. user IUser The user that added the emoji. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for removing a reaction to this message. Examples The following example removes the reaction, 💕, added by the message author from the message. await msg.RemoveReactionAsync(new Emoji(\"\\U0001f495\"), msg.Author); See Also IEmote RemoveReactionAsync(IEmote, ulong, RequestOptions) Removes a reaction from message. public Task RemoveReactionAsync(IEmote emote, ulong userId, RequestOptions options = null) Parameters emote IEmote The emoji used to react to this message. userId ulong The ID of the user that added the emoji. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for removing a reaction to this message. Examples The following example removes the reaction, 💕, added by the user with ID 84291986575613952 from the message. await msg.RemoveReactionAsync(new Emoji(\"\\U0001f495\"), 84291986575613952); See Also IEmote ToString() Gets the Content of the message. public override string ToString() Returns string A string that is the Content of the message. UpdateAsync(RequestOptions) Updates this object's properties with its current state. public Task UpdateAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task"
  },
  "api/Discord.Rest.RestMessageCommand.html": {
    "href": "api/Discord.Rest.RestMessageCommand.html",
    "title": "Class RestMessageCommand | Discord.Net Documentation",
    "keywords": "Class RestMessageCommand Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based message command interaction. public class RestMessageCommand : RestCommandBase, IMessageCommandInteraction, IApplicationCommandInteraction, IDiscordInteraction, ISnowflakeEntity, IEntity<ulong> Inheritance object RestEntity<ulong> RestInteraction RestCommandBase RestMessageCommand Implements IMessageCommandInteraction IApplicationCommandInteraction IDiscordInteraction ISnowflakeEntity IEntity<ulong> Inherited Members RestCommandBase.CommandName RestCommandBase.CommandId RestCommandBase.Respond(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) RestCommandBase.FollowupAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) RestCommandBase.FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) RestCommandBase.FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) RestCommandBase.FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) RestCommandBase.FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) RestCommandBase.Defer(bool, RequestOptions) RestCommandBase.RespondWithModal(Modal, RequestOptions) RestInteraction.Type RestInteraction.Token RestInteraction.Version RestInteraction.User RestInteraction.UserLocale RestInteraction.GuildLocale RestInteraction.CreatedAt RestInteraction.IsValidToken RestInteraction.Channel RestInteraction.ChannelId RestInteraction.Guild RestInteraction.GuildId RestInteraction.HasResponded RestInteraction.IsDMInteraction RestInteraction.ApplicationId RestInteraction.Entitlements RestInteraction.GetChannelAsync(RequestOptions) RestInteraction.GetGuildAsync(RequestOptions) RestInteraction.GetOriginalResponseAsync(RequestOptions) RestInteraction.ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) RestInteraction.DeleteOriginalResponseAsync(RequestOptions) RestInteraction.RespondWithPremiumRequiredAsync(RequestOptions) RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, InteractionService, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, T, RequestOptions, Action<ModalBuilder>) RestExtensions.RespondWithModal<T>(RestInteraction, string, RequestOptions, Action<ModalBuilder>) RestExtensions.RespondWithModal<T>(RestInteraction, string, T, RequestOptions, Action<ModalBuilder>) Properties Data Gets the data associated with this interaction. public RestMessageCommandData Data { get; } Property Value RestMessageCommandData"
  },
  "api/Discord.Rest.RestMessageCommandData.html": {
    "href": "api/Discord.Rest.RestMessageCommandData.html",
    "title": "Class RestMessageCommandData | Discord.Net Documentation",
    "keywords": "Class RestMessageCommandData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents the data for a RestMessageCommand. public class RestMessageCommandData : RestCommandBaseData, IEntity<ulong>, IMessageCommandInteractionData, IApplicationCommandInteractionData, IDiscordInteractionData Inheritance object RestEntity<ulong> RestCommandBaseData<IApplicationCommandInteractionDataOption> RestCommandBaseData RestMessageCommandData Implements IEntity<ulong> IMessageCommandInteractionData IApplicationCommandInteractionData IDiscordInteractionData Inherited Members RestCommandBaseData<IApplicationCommandInteractionDataOption>.Name RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Message Gets the message associated with this message command. public RestMessage Message { get; } Property Value RestMessage Options Gets a collection of IApplicationCommandInteractionDataOption received with this interaction. public override IReadOnlyCollection<IApplicationCommandInteractionDataOption> Options { get; } Property Value IReadOnlyCollection<IApplicationCommandInteractionDataOption> Remarks Note Not implemented for RestMessageCommandData"
  },
  "api/Discord.Rest.RestMessageComponent.html": {
    "href": "api/Discord.Rest.RestMessageComponent.html",
    "title": "Class RestMessageComponent | Discord.Net Documentation",
    "keywords": "Class RestMessageComponent Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based message component. public class RestMessageComponent : RestInteraction, IComponentInteraction, IDiscordInteraction, ISnowflakeEntity, IEntity<ulong> Inheritance object RestEntity<ulong> RestInteraction RestMessageComponent Implements IComponentInteraction IDiscordInteraction ISnowflakeEntity IEntity<ulong> Inherited Members RestInteraction.Type RestInteraction.Token RestInteraction.Version RestInteraction.User RestInteraction.UserLocale RestInteraction.GuildLocale RestInteraction.CreatedAt RestInteraction.IsValidToken RestInteraction.Channel RestInteraction.ChannelId RestInteraction.Guild RestInteraction.GuildId RestInteraction.HasResponded RestInteraction.IsDMInteraction RestInteraction.ApplicationId RestInteraction.Entitlements RestInteraction.GetChannelAsync(RequestOptions) RestInteraction.GetGuildAsync(RequestOptions) RestInteraction.GetOriginalResponseAsync(RequestOptions) RestInteraction.ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) RestInteraction.DeleteOriginalResponseAsync(RequestOptions) RestInteraction.RespondWithPremiumRequiredAsync(RequestOptions) RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, InteractionService, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, T, RequestOptions, Action<ModalBuilder>) RestExtensions.RespondWithModal<T>(RestInteraction, string, RequestOptions, Action<ModalBuilder>) RestExtensions.RespondWithModal<T>(RestInteraction, string, T, RequestOptions, Action<ModalBuilder>) Properties Data Gets the data received with this interaction, contains the button that was clicked. public RestMessageComponentData Data { get; } Property Value RestMessageComponentData Message Gets the message that contained the trigger for this interaction. public RestUserMessage Message { get; } Property Value RestUserMessage Methods Defer(bool, RequestOptions) public override string Defer(bool ephemeral = false, RequestOptions options = null) Parameters ephemeral bool options RequestOptions Returns string A string that contains json to write back to the incoming http request. Exceptions TimeoutException InvalidOperationException DeferLoading(bool, RequestOptions) Defers an interaction and responds with type 5 (DeferredChannelMessageWithSource) public string DeferLoading(bool ephemeral = false, RequestOptions options = null) Parameters ephemeral bool true to send this message ephemerally, otherwise false. options RequestOptions The request options for this async request. Returns string A string that contains json to write back to the incoming http request. FollowupAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupAsync(string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupWithFileAsync(FileAttachment attachment, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachment FileAttachment The attachment containing the file and description. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupWithFileAsync(Stream fileStream, string fileName, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters fileStream Stream The file to upload. fileName string The file name of the attachment. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupWithFileAsync(string filePath, string fileName = null, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters filePath string The file to upload. fileName string The file name of the attachment. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupWithFilesAsync(IEnumerable<FileAttachment> attachments, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Respond(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Responds to an Interaction with type ChannelMessageWithSource. public override string Respond(string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns string A string that contains json to write back to the incoming http request. RespondWithModal(Modal, RequestOptions) Responds to the interaction with a modal. public override string RespondWithModal(Modal modal, RequestOptions options = null) Parameters modal Modal The modal to respond with. options RequestOptions The request options for this async request. Returns string A string that contains json to write back to the incoming http request. Exceptions TimeoutException InvalidOperationException UpdateAsync(Action<MessageProperties>, RequestOptions) Updates the message which this component resides in with the type UpdateMessage public Task UpdateAsync(Action<MessageProperties> func, RequestOptions options = null) Parameters func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The request options for this async request. Returns Task"
  },
  "api/Discord.Rest.RestMessageComponentData.html": {
    "href": "api/Discord.Rest.RestMessageComponentData.html",
    "title": "Class RestMessageComponentData | Discord.Net Documentation",
    "keywords": "Class RestMessageComponentData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents data for a RestMessageComponent. public class RestMessageComponentData : IComponentInteractionData, IDiscordInteractionData Inheritance object RestMessageComponentData Implements IComponentInteractionData IDiscordInteractionData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Channels Gets the channels(s) of a ChannelSelect interaction response. null if select type is different. public IReadOnlyCollection<RestChannel> Channels { get; } Property Value IReadOnlyCollection<RestChannel> CustomId Gets the component's Custom Id that was clicked. public string CustomId { get; } Property Value string Members Gets the guild member(s) of a UserSelect or MentionableSelect interaction response. null if type select is different. public IReadOnlyCollection<RestGuildUser> Members { get; } Property Value IReadOnlyCollection<RestGuildUser> Roles Gets the roles(s) of a RoleSelect or MentionableSelect interaction response. null if select type is different. public IReadOnlyCollection<RestRole> Roles { get; } Property Value IReadOnlyCollection<RestRole> Type Gets the type of the component clicked. public ComponentType Type { get; } Property Value ComponentType Users Gets the user(s) of a UserSelect or MentionableSelect interaction response. null if select type is different. public IReadOnlyCollection<RestUser> Users { get; } Property Value IReadOnlyCollection<RestUser> Value Gets the value of a TextInput interaction response. public string Value { get; } Property Value string Values Gets the value(s) of a SelectMenu interaction response. null if select type is different. public IReadOnlyCollection<string> Values { get; } Property Value IReadOnlyCollection<string>"
  },
  "api/Discord.Rest.RestModal.html": {
    "href": "api/Discord.Rest.RestModal.html",
    "title": "Class RestModal | Discord.Net Documentation",
    "keywords": "Class RestModal Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a user submitted Modal. public class RestModal : RestInteraction, IModalInteraction, IDiscordInteraction, ISnowflakeEntity, IEntity<ulong> Inheritance object RestEntity<ulong> RestInteraction RestModal Implements IModalInteraction IDiscordInteraction ISnowflakeEntity IEntity<ulong> Inherited Members RestInteraction.Type RestInteraction.Token RestInteraction.Version RestInteraction.User RestInteraction.UserLocale RestInteraction.GuildLocale RestInteraction.CreatedAt RestInteraction.IsValidToken RestInteraction.Channel RestInteraction.ChannelId RestInteraction.Guild RestInteraction.GuildId RestInteraction.HasResponded RestInteraction.IsDMInteraction RestInteraction.ApplicationId RestInteraction.Entitlements RestInteraction.GetChannelAsync(RequestOptions) RestInteraction.GetGuildAsync(RequestOptions) RestInteraction.GetOriginalResponseAsync(RequestOptions) RestInteraction.ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) RestInteraction.DeleteOriginalResponseAsync(RequestOptions) RestInteraction.RespondWithPremiumRequiredAsync(RequestOptions) RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, InteractionService, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, T, RequestOptions, Action<ModalBuilder>) RestExtensions.RespondWithModal<T>(RestInteraction, string, RequestOptions, Action<ModalBuilder>) RestExtensions.RespondWithModal<T>(RestInteraction, string, T, RequestOptions, Action<ModalBuilder>) Properties Data Gets the data received with this interaction; contains the clicked button. public RestModalData Data { get; set; } Property Value RestModalData Message Gets the message the modal originates from. public RestUserMessage Message { get; } Property Value RestUserMessage Remarks This property is only populated if the modal was created from a message component. Methods Defer(bool, RequestOptions) Acknowledges this interaction with the DeferredUpdateMessage if the modal was created in a response to a message component interaction, DeferredChannelMessageWithSource otherwise. public override string Defer(bool ephemeral = false, RequestOptions options = null) Parameters ephemeral bool options RequestOptions Returns string A string that contains json to write back to the incoming http request. DeferLoading(bool, RequestOptions) Defers an interaction and responds with type 5 (DeferredChannelMessageWithSource) public string DeferLoading(bool ephemeral = false, RequestOptions options = null) Parameters ephemeral bool true to send this message ephemerally, otherwise false. options RequestOptions The request options for this async request. Returns string A string that contains json to write back to the incoming http request. FollowupAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupAsync(string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent component = null, Embed embed = null, RequestOptions options = null) Parameters text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. component MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> The sent message. FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupWithFileAsync(FileAttachment attachment, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachment FileAttachment The attachment containing the file and description. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupWithFileAsync(Stream fileStream, string fileName, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent component = null, Embed embed = null, RequestOptions options = null) Parameters fileStream Stream The file to upload. fileName string The file name of the attachment. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. component MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> The sent message. FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupWithFileAsync(string filePath, string text = null, string fileName = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent component = null, Embed embed = null, RequestOptions options = null) Parameters filePath string The file to upload. text string The text of the message to be sent. fileName string The file name of the attachment. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. component MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> The sent message. FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupWithFilesAsync(IEnumerable<FileAttachment> attachments, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Respond(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Responds to an Interaction with type ChannelMessageWithSource. public override string Respond(string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent component = null, Embed embed = null, RequestOptions options = null) Parameters text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. component MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns string A string that contains json to write back to the incoming http request. Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. InvalidOperationException The parameters provided were invalid or the token was invalid. RespondWithModal(Modal, RequestOptions) public override string RespondWithModal(Modal modal, RequestOptions requestOptions = null) Parameters modal Modal requestOptions RequestOptions Returns string UpdateAsync(Action<MessageProperties>, RequestOptions) Updates the message which this modal originates from with the type UpdateMessage public Task UpdateAsync(Action<MessageProperties> func, RequestOptions options = null) Parameters func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation of updating the message. Remarks This method can be used only if the modal was created from a message component."
  },
  "api/Discord.Rest.RestModalData.html": {
    "href": "api/Discord.Rest.RestModalData.html",
    "title": "Class RestModalData | Discord.Net Documentation",
    "keywords": "Class RestModalData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents data sent from a ModalSubmit Interaction. public class RestModalData : IModalInteractionData, IDiscordInteractionData Inheritance object RestModalData Implements IModalInteractionData IDiscordInteractionData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Components Represents the Modals components submitted by the user. public IReadOnlyCollection<RestMessageComponentData> Components { get; } Property Value IReadOnlyCollection<RestMessageComponentData> CustomId Gets the Modal's Custom Id. public string CustomId { get; } Property Value string"
  },
  "api/Discord.Rest.RestNewsChannel.html": {
    "href": "api/Discord.Rest.RestNewsChannel.html",
    "title": "Class RestNewsChannel | Discord.Net Documentation",
    "keywords": "Class RestNewsChannel Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based news channel in a guild that has the same properties as a RestTextChannel. public class RestNewsChannel : RestTextChannel, IUpdateable, IRestMessageChannel, INewsChannel, ITextChannel, IMessageChannel, IMentionable, INestedChannel, IIntegrationChannel, IGuildChannel, IChannel, ISnowflakeEntity, IEntity<ulong>, IDeletable Inheritance object RestEntity<ulong> RestChannel RestGuildChannel RestTextChannel RestNewsChannel Implements IUpdateable IRestMessageChannel INewsChannel ITextChannel IMessageChannel IMentionable INestedChannel IIntegrationChannel IGuildChannel IChannel ISnowflakeEntity IEntity<ulong> IDeletable Inherited Members RestTextChannel.Topic RestTextChannel.CategoryId RestTextChannel.Mention RestTextChannel.IsNsfw RestTextChannel.DefaultArchiveDuration RestTextChannel.DefaultSlowModeInterval RestTextChannel.ModifyAsync(Action<TextChannelProperties>, RequestOptions) RestTextChannel.GetUserAsync(ulong, RequestOptions) RestTextChannel.GetUsersAsync(RequestOptions) RestTextChannel.GetMessageAsync(ulong, RequestOptions) RestTextChannel.GetMessagesAsync(int, RequestOptions) RestTextChannel.GetMessagesAsync(ulong, Direction, int, RequestOptions) RestTextChannel.GetMessagesAsync(IMessage, Direction, int, RequestOptions) RestTextChannel.GetPinnedMessagesAsync(RequestOptions) RestTextChannel.SendMessageAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) RestTextChannel.SendFileAsync(string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) RestTextChannel.SendFileAsync(Stream, string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) RestTextChannel.SendFileAsync(FileAttachment, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) RestTextChannel.SendFilesAsync(IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) RestTextChannel.DeleteMessageAsync(ulong, RequestOptions) RestTextChannel.DeleteMessageAsync(IMessage, RequestOptions) RestTextChannel.DeleteMessagesAsync(IEnumerable<IMessage>, RequestOptions) RestTextChannel.DeleteMessagesAsync(IEnumerable<ulong>, RequestOptions) RestTextChannel.ModifyMessageAsync(ulong, Action<MessageProperties>, RequestOptions) RestTextChannel.TriggerTypingAsync(RequestOptions) RestTextChannel.EnterTypingState(RequestOptions) RestTextChannel.CreateWebhookAsync(string, Stream, RequestOptions) RestTextChannel.GetWebhookAsync(ulong, RequestOptions) RestTextChannel.GetWebhooksAsync(RequestOptions) RestTextChannel.CreateThreadAsync(string, ThreadType, ThreadArchiveDuration, IMessage, bool?, int?, RequestOptions) RestTextChannel.GetCategoryAsync(RequestOptions) RestTextChannel.SyncPermissionsAsync(RequestOptions) RestTextChannel.GetActiveThreadsAsync(RequestOptions) RestTextChannel.CreateInviteAsync(int?, int?, bool, bool, RequestOptions) RestTextChannel.CreateInviteToApplicationAsync(ulong, int?, int?, bool, bool, RequestOptions) RestTextChannel.CreateInviteToApplicationAsync(DefaultApplications, int?, int?, bool, bool, RequestOptions) RestTextChannel.CreateInviteToStreamAsync(IUser, int?, int?, bool, bool, RequestOptions) RestTextChannel.GetInvitesAsync(RequestOptions) RestGuildChannel.PermissionOverwrites RestGuildChannel.Name RestGuildChannel.Position RestGuildChannel.GuildId RestGuildChannel.Flags RestGuildChannel.UpdateAsync(RequestOptions) RestGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions) RestGuildChannel.DeleteAsync(RequestOptions) RestGuildChannel.GetPermissionOverwrite(IUser) RestGuildChannel.GetPermissionOverwrite(IRole) RestGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions) RestGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) RestGuildChannel.ToString() RestChannel.CreatedAt RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties SlowModeInterval Gets the current slow-mode delay for this channel. public override int SlowModeInterval { get; } Property Value int An int representing the time in seconds required before the user can send another message; 0 if disabled. Methods FollowAnnouncementChannelAsync(ulong, RequestOptions) Follow this channel to send messages to a target channel. public Task<ulong> FollowAnnouncementChannelAsync(ulong channelId, RequestOptions options = null) Parameters channelId ulong options RequestOptions Returns Task<ulong> The Id of the created webhook."
  },
  "api/Discord.Rest.RestPingInteraction.html": {
    "href": "api/Discord.Rest.RestPingInteraction.html",
    "title": "Class RestPingInteraction | Discord.Net Documentation",
    "keywords": "Class RestPingInteraction Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based ping interaction. public class RestPingInteraction : RestInteraction, IDiscordInteraction, ISnowflakeEntity, IEntity<ulong> Inheritance object RestEntity<ulong> RestInteraction RestPingInteraction Implements IDiscordInteraction ISnowflakeEntity IEntity<ulong> Inherited Members RestInteraction.Type RestInteraction.Data RestInteraction.Token RestInteraction.Version RestInteraction.User RestInteraction.UserLocale RestInteraction.GuildLocale RestInteraction.CreatedAt RestInteraction.IsValidToken RestInteraction.Channel RestInteraction.ChannelId RestInteraction.Guild RestInteraction.GuildId RestInteraction.HasResponded RestInteraction.IsDMInteraction RestInteraction.ApplicationId RestInteraction.Entitlements RestInteraction.GetChannelAsync(RequestOptions) RestInteraction.GetGuildAsync(RequestOptions) RestInteraction.GetOriginalResponseAsync(RequestOptions) RestInteraction.ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) RestInteraction.DeleteOriginalResponseAsync(RequestOptions) RestInteraction.RespondWithPremiumRequiredAsync(RequestOptions) RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, InteractionService, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, T, RequestOptions, Action<ModalBuilder>) RestExtensions.RespondWithModal<T>(RestInteraction, string, RequestOptions, Action<ModalBuilder>) RestExtensions.RespondWithModal<T>(RestInteraction, string, T, RequestOptions, Action<ModalBuilder>) Methods AcknowledgePing() public string AcknowledgePing() Returns string Defer(bool, RequestOptions) public override string Defer(bool ephemeral = false, RequestOptions options = null) Parameters ephemeral bool options RequestOptions Returns string FollowupAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupAsync(string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupWithFileAsync(FileAttachment attachment, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachment FileAttachment The attachment containing the file and description. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupWithFileAsync(Stream fileStream, string fileName, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters fileStream Stream The file to upload. fileName string The file name of the attachment. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupWithFileAsync(string filePath, string fileName = null, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters filePath string The file to upload. fileName string The file name of the attachment. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupWithFilesAsync(IEnumerable<FileAttachment> attachments, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Respond(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) public override string Respond(string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters text string embeds Embed[] isTTS bool ephemeral bool allowedMentions AllowedMentions components MessageComponent embed Embed options RequestOptions Returns string RespondWithModal(Modal, RequestOptions) public override string RespondWithModal(Modal modal, RequestOptions options = null) Parameters modal Modal options RequestOptions Returns string"
  },
  "api/Discord.Rest.RestReaction.html": {
    "href": "api/Discord.Rest.RestReaction.html",
    "title": "Class RestReaction | Discord.Net Documentation",
    "keywords": "Class RestReaction Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST reaction object. public class RestReaction : IReaction Inheritance object RestReaction Implements IReaction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BurstColors Gets colors used for the super reaction. public IReadOnlyCollection<Color> BurstColors { get; } Property Value IReadOnlyCollection<Color> Remarks The collection will be empty if the reaction is a normal reaction. BurstCount Gets the number of burst reactions added. public int BurstCount { get; } Property Value int Count Gets the number of reactions added. public int Count { get; } Property Value int Emote The IEmote used in the reaction. public IEmote Emote { get; } Property Value IEmote Me Gets whether the reaction is added by the user. public bool Me { get; } Property Value bool MeBurst Gets whether the super-reaction is added by the user. public bool MeBurst { get; } Property Value bool NormalCount Gets the number of normal reactions added. public int NormalCount { get; } Property Value int"
  },
  "api/Discord.Rest.RestRole.html": {
    "href": "api/Discord.Rest.RestRole.html",
    "title": "Class RestRole | Discord.Net Documentation",
    "keywords": "Class RestRole Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based role. public class RestRole : RestEntity<ulong>, IRole, ISnowflakeEntity, IEntity<ulong>, IDeletable, IMentionable, IComparable<IRole> Inheritance object RestEntity<ulong> RestRole Implements IRole ISnowflakeEntity IEntity<ulong> IDeletable IMentionable IComparable<IRole> Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Color Gets the color given to users of this role. public Color Color { get; } Property Value Color A Color struct representing the color of this role. CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. Emoji Gets the unicode emoji of this role. public Emoji Emoji { get; } Property Value Emoji Remarks This field is mutually exclusive with Icon, either icon is set or emoji is set. Flags Gets flags related to this role. public RoleFlags Flags { get; } Property Value RoleFlags Icon Gets the icon of this role. public string Icon { get; } Property Value string A string containing the hash of this role's icon. IsEveryone Gets if this role is the @everyone role of the guild or not. public bool IsEveryone { get; } Property Value bool IsHoisted Gets a value that indicates whether the role can be separated in the user list. public bool IsHoisted { get; } Property Value bool true if users of this role are separated in the user list; otherwise false. IsManaged Gets a value that indicates whether the role is managed by Discord. public bool IsManaged { get; } Property Value bool true if this role is automatically managed by Discord; otherwise false. IsMentionable Gets a value that indicates whether the role is mentionable. public bool IsMentionable { get; } Property Value bool true if this role may be mentioned in messages; otherwise false. Mention Returns a special string used to mention this object. public string Mention { get; } Property Value string A string that is recognized by Discord as a mention (e.g. <@168693960628371456>). Name Gets the name of this role. public string Name { get; } Property Value string A string containing the name of this role. Permissions Gets the permissions granted to members of this role. public GuildPermissions Permissions { get; } Property Value GuildPermissions A GuildPermissions struct that this role possesses. Position Gets this role's position relative to other roles in the same guild. public int Position { get; } Property Value int An int representing the position of the role in the role list of the guild. Tags Gets the tags related to this role. public RoleTags Tags { get; } Property Value RoleTags A RoleTags object containing all tags related to this role. Methods CompareTo(IRole) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(IRole role) Parameters role IRole Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. DeleteAsync(RequestOptions) Deletes this object and all its children. public Task DeleteAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task GetIconUrl() Gets the image url of the icon role. public string GetIconUrl() Returns string An image url of the icon role. ModifyAsync(Action<RoleProperties>, RequestOptions) Modifies this role. public Task ModifyAsync(Action<RoleProperties> func, RequestOptions options = null) Parameters func Action<RoleProperties> A delegate containing the properties to modify the role with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies this role with the specified properties. To see an example of this method and what properties are available, please refer to RoleProperties. ToString() Gets the name of the role. public override string ToString() Returns string A string that is the name of the role."
  },
  "api/Discord.Rest.RestSelfUser.html": {
    "href": "api/Discord.Rest.RestSelfUser.html",
    "title": "Class RestSelfUser | Discord.Net Documentation",
    "keywords": "Class RestSelfUser Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents the logged-in REST-based user. public class RestSelfUser : RestUser, IUpdateable, ISelfUser, IUser, ISnowflakeEntity, IEntity<ulong>, IMentionable, IPresence Inheritance object RestEntity<ulong> RestUser RestSelfUser Implements IUpdateable ISelfUser IUser ISnowflakeEntity IEntity<ulong> IMentionable IPresence Inherited Members RestUser.IsBot RestUser.Username RestUser.DiscriminatorValue RestUser.AvatarId RestUser.BannerId RestUser.AccentColor RestUser.PublicFlags RestUser.GlobalName RestUser.CreatedAt RestUser.Discriminator RestUser.Mention RestUser.Activity RestUser.Status RestUser.ActiveClients RestUser.Activities RestUser.IsWebhook RestUser.AvatarDecorationHash RestUser.AvatarDecorationSkuId RestUser.CreateDMChannelAsync(RequestOptions) RestUser.GetAvatarUrl(ImageFormat, ushort) RestUser.GetBannerUrl(ImageFormat, ushort) RestUser.GetDefaultAvatarUrl() RestUser.GetDisplayAvatarUrl(ImageFormat, ushort) RestUser.GetAvatarDecorationUrl() RestUser.ToString() RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods UserExtensions.SendFileAsync(IUser, FileAttachment, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, Stream, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFilesAsync(IUser, IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendMessageAsync(IUser, string, bool, Embed, RequestOptions, AllowedMentions, MessageComponent, Embed[]) Properties Email Gets the email associated with this user. public string Email { get; } Property Value string Flags Gets the flags that are applied to a user's account. public UserProperties Flags { get; } Property Value UserProperties The value of flags for this user. Remarks This value is determined by bitwise OR-ing UserProperties values together. IsMfaEnabled Indicates whether or not this user has MFA enabled on their account. public bool IsMfaEnabled { get; } Property Value bool true if this user has enabled multi-factor authentication on their account; false if not. IsVerified Indicates whether or not this user has their email verified. public bool IsVerified { get; } Property Value bool true if this user's email has been verified; false if not. Locale Gets the user's chosen language option. public string Locale { get; } Property Value string The IETF language tag of the user's chosen region, if provided. For example, a locale of \"English, US\" is \"en-US\", \"Chinese (Taiwan)\" is \"zh-TW\", etc. PremiumType Gets the type of Nitro subscription that is active on this user's account. public PremiumType PremiumType { get; } Property Value PremiumType The type of Nitro subscription the user subscribes to, if any. Remarks This information may only be available with the identify OAuth scope. Methods ModifyAsync(Action<SelfUserProperties>, RequestOptions) Modifies the user's properties. public Task ModifyAsync(Action<SelfUserProperties> func, RequestOptions options = null) Parameters func Action<SelfUserProperties> options RequestOptions Returns Task Exceptions InvalidOperationException Unable to modify this object using a different token. UpdateAsync(RequestOptions) Updates this object's properties with its current state. public override Task UpdateAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task Exceptions InvalidOperationException Unable to update this object using a different token."
  },
  "api/Discord.Rest.RestSlashCommand.html": {
    "href": "api/Discord.Rest.RestSlashCommand.html",
    "title": "Class RestSlashCommand | Discord.Net Documentation",
    "keywords": "Class RestSlashCommand Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based slash command. public class RestSlashCommand : RestCommandBase, ISlashCommandInteraction, IApplicationCommandInteraction, IDiscordInteraction, ISnowflakeEntity, IEntity<ulong> Inheritance object RestEntity<ulong> RestInteraction RestCommandBase RestSlashCommand Implements ISlashCommandInteraction IApplicationCommandInteraction IDiscordInteraction ISnowflakeEntity IEntity<ulong> Inherited Members RestCommandBase.CommandName RestCommandBase.CommandId RestCommandBase.Respond(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) RestCommandBase.FollowupAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) RestCommandBase.FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) RestCommandBase.FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) RestCommandBase.FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) RestCommandBase.FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) RestCommandBase.Defer(bool, RequestOptions) RestCommandBase.RespondWithModal(Modal, RequestOptions) RestInteraction.Type RestInteraction.Token RestInteraction.Version RestInteraction.User RestInteraction.UserLocale RestInteraction.GuildLocale RestInteraction.CreatedAt RestInteraction.IsValidToken RestInteraction.Channel RestInteraction.ChannelId RestInteraction.Guild RestInteraction.GuildId RestInteraction.HasResponded RestInteraction.IsDMInteraction RestInteraction.ApplicationId RestInteraction.Entitlements RestInteraction.GetChannelAsync(RequestOptions) RestInteraction.GetGuildAsync(RequestOptions) RestInteraction.GetOriginalResponseAsync(RequestOptions) RestInteraction.ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) RestInteraction.DeleteOriginalResponseAsync(RequestOptions) RestInteraction.RespondWithPremiumRequiredAsync(RequestOptions) RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, InteractionService, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, T, RequestOptions, Action<ModalBuilder>) RestExtensions.RespondWithModal<T>(RestInteraction, string, RequestOptions, Action<ModalBuilder>) RestExtensions.RespondWithModal<T>(RestInteraction, string, T, RequestOptions, Action<ModalBuilder>) Properties Data Gets the data associated with this interaction. public RestSlashCommandData Data { get; } Property Value RestSlashCommandData"
  },
  "api/Discord.Rest.RestSlashCommandData.html": {
    "href": "api/Discord.Rest.RestSlashCommandData.html",
    "title": "Class RestSlashCommandData | Discord.Net Documentation",
    "keywords": "Class RestSlashCommandData Namespace Discord.Rest Assembly Discord.Net.Rest.dll public class RestSlashCommandData : RestCommandBaseData<RestSlashCommandDataOption>, IEntity<ulong>, IApplicationCommandInteractionData, IDiscordInteractionData Inheritance object RestEntity<ulong> RestCommandBaseData<RestSlashCommandDataOption> RestSlashCommandData Implements IEntity<ulong> IApplicationCommandInteractionData IDiscordInteractionData Inherited Members RestCommandBaseData<RestSlashCommandDataOption>.Name RestCommandBaseData<RestSlashCommandDataOption>.Options RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Discord.Rest.RestSlashCommandDataOption.html": {
    "href": "api/Discord.Rest.RestSlashCommandDataOption.html",
    "title": "Class RestSlashCommandDataOption | Discord.Net Documentation",
    "keywords": "Class RestSlashCommandDataOption Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based option for a slash command. public class RestSlashCommandDataOption : IApplicationCommandInteractionDataOption Inheritance object RestSlashCommandDataOption Implements IApplicationCommandInteractionDataOption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets the name of the parameter. public string Name { get; } Property Value string Options Gets a collection of sub command options received for this sub command group. public IReadOnlyCollection<RestSlashCommandDataOption> Options { get; } Property Value IReadOnlyCollection<RestSlashCommandDataOption> Type Gets the type of this data's option. public ApplicationCommandOptionType Type { get; } Property Value ApplicationCommandOptionType Value Gets the value of the pair. note This objects type can be any one of the option types in ApplicationCommandOptionType. public object Value { get; } Property Value object Operators explicit operator bool(RestSlashCommandDataOption) public static explicit operator bool(RestSlashCommandDataOption option) Parameters option RestSlashCommandDataOption Returns bool explicit operator int(RestSlashCommandDataOption) public static explicit operator int(RestSlashCommandDataOption option) Parameters option RestSlashCommandDataOption Returns int explicit operator string(RestSlashCommandDataOption) public static explicit operator string(RestSlashCommandDataOption option) Parameters option RestSlashCommandDataOption Returns string"
  },
  "api/Discord.Rest.RestStageChannel.html": {
    "href": "api/Discord.Rest.RestStageChannel.html",
    "title": "Class RestStageChannel | Discord.Net Documentation",
    "keywords": "Class RestStageChannel Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based stage channel in a guild. public class RestStageChannel : RestVoiceChannel, IUpdateable, IRestMessageChannel, IRestAudioChannel, IStageChannel, IVoiceChannel, ITextChannel, IMessageChannel, IMentionable, INestedChannel, IIntegrationChannel, IGuildChannel, IDeletable, IAudioChannel, IChannel, ISnowflakeEntity, IEntity<ulong> Inheritance object RestEntity<ulong> RestChannel RestGuildChannel RestTextChannel RestVoiceChannel RestStageChannel Implements IUpdateable IRestMessageChannel IRestAudioChannel IStageChannel IVoiceChannel ITextChannel IMessageChannel IMentionable INestedChannel IIntegrationChannel IGuildChannel IDeletable IAudioChannel IChannel ISnowflakeEntity IEntity<ulong> Inherited Members RestVoiceChannel.Bitrate RestVoiceChannel.UserLimit RestVoiceChannel.RTCRegion RestVoiceChannel.VideoQualityMode RestVoiceChannel.ModifyAsync(Action<VoiceChannelProperties>, RequestOptions) RestVoiceChannel.CreateThreadAsync(string, ThreadType, ThreadArchiveDuration, IMessage, bool?, int?, RequestOptions) RestVoiceChannel.GetActiveThreadsAsync(RequestOptions) RestTextChannel.Topic RestTextChannel.SlowModeInterval RestTextChannel.CategoryId RestTextChannel.Mention RestTextChannel.IsNsfw RestTextChannel.DefaultArchiveDuration RestTextChannel.DefaultSlowModeInterval RestTextChannel.ModifyAsync(Action<TextChannelProperties>, RequestOptions) RestTextChannel.GetUserAsync(ulong, RequestOptions) RestTextChannel.GetUsersAsync(RequestOptions) RestTextChannel.GetMessageAsync(ulong, RequestOptions) RestTextChannel.GetMessagesAsync(int, RequestOptions) RestTextChannel.GetMessagesAsync(ulong, Direction, int, RequestOptions) RestTextChannel.GetMessagesAsync(IMessage, Direction, int, RequestOptions) RestTextChannel.GetPinnedMessagesAsync(RequestOptions) RestTextChannel.SendMessageAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) RestTextChannel.SendFileAsync(string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) RestTextChannel.SendFileAsync(Stream, string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) RestTextChannel.SendFileAsync(FileAttachment, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) RestTextChannel.SendFilesAsync(IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) RestTextChannel.DeleteMessageAsync(ulong, RequestOptions) RestTextChannel.DeleteMessageAsync(IMessage, RequestOptions) RestTextChannel.DeleteMessagesAsync(IEnumerable<IMessage>, RequestOptions) RestTextChannel.DeleteMessagesAsync(IEnumerable<ulong>, RequestOptions) RestTextChannel.ModifyMessageAsync(ulong, Action<MessageProperties>, RequestOptions) RestTextChannel.TriggerTypingAsync(RequestOptions) RestTextChannel.EnterTypingState(RequestOptions) RestTextChannel.CreateWebhookAsync(string, Stream, RequestOptions) RestTextChannel.GetWebhookAsync(ulong, RequestOptions) RestTextChannel.GetWebhooksAsync(RequestOptions) RestTextChannel.GetCategoryAsync(RequestOptions) RestTextChannel.SyncPermissionsAsync(RequestOptions) RestTextChannel.CreateInviteAsync(int?, int?, bool, bool, RequestOptions) RestTextChannel.CreateInviteToApplicationAsync(ulong, int?, int?, bool, bool, RequestOptions) RestTextChannel.CreateInviteToApplicationAsync(DefaultApplications, int?, int?, bool, bool, RequestOptions) RestTextChannel.CreateInviteToStreamAsync(IUser, int?, int?, bool, bool, RequestOptions) RestTextChannel.GetInvitesAsync(RequestOptions) RestGuildChannel.PermissionOverwrites RestGuildChannel.Name RestGuildChannel.Position RestGuildChannel.GuildId RestGuildChannel.Flags RestGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions) RestGuildChannel.DeleteAsync(RequestOptions) RestGuildChannel.GetPermissionOverwrite(IUser) RestGuildChannel.GetPermissionOverwrite(IRole) RestGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions) RestGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) RestGuildChannel.ToString() RestChannel.CreatedAt RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties IsDiscoverableDisabled Gets whether or not stage discovery is disabled. public bool? IsDiscoverableDisabled { get; } Property Value bool? IsLive Gets whether or not the stage is live. public bool IsLive { get; } Property Value bool IsTextInVoice Gets whether or not the guild has Text-In-Voice enabled and the voice channel is a TiV channel. [Obsolete(\"This property is no longer used because Discord enabled text-in-voice and text-in-stage for all channels.\")] public override bool IsTextInVoice { get; } Property Value bool Remarks This field is always true for stage channels. PrivacyLevel Gets the StagePrivacyLevel of the current stage. public StagePrivacyLevel? PrivacyLevel { get; } Property Value StagePrivacyLevel? Remarks If the stage isn't live then this property will be set to null. Methods BecomeSpeakerAsync(RequestOptions) Makes the current user become a speaker within a stage. public Task BecomeSpeakerAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous speaker modify operation. ModifyInstanceAsync(Action<StageInstanceProperties>, RequestOptions) Modifies the current stage instance. public Task ModifyInstanceAsync(Action<StageInstanceProperties> func, RequestOptions options = null) Parameters func Action<StageInstanceProperties> The properties to modify the stage instance with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modify operation. MoveToSpeakerAsync(IGuildUser, RequestOptions) Makes a user a speaker within a stage. public Task MoveToSpeakerAsync(IGuildUser user, RequestOptions options = null) Parameters user IGuildUser The user to make the speaker. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous move operation. RemoveFromSpeakerAsync(IGuildUser, RequestOptions) Removes a user from speaking. public Task RemoveFromSpeakerAsync(IGuildUser user, RequestOptions options = null) Parameters user IGuildUser The user to remove from speaking. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous remove operation. RequestToSpeakAsync(RequestOptions) Indicates that the bot would like to speak within a stage channel. public Task RequestToSpeakAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous request to speak operation. SetStatusAsync(string, RequestOptions) Sets the voice channel status in the current channel. public override Task SetStatusAsync(string status, RequestOptions options = null) Parameters status string The string to set as status. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks Setting voice channel status is not supported in stage channels. Exceptions NotSupportedException Setting voice channel status is not supported in stage channels. StartStageAsync(string, StagePrivacyLevel, RequestOptions) Starts the stage, creating a stage instance. public Task StartStageAsync(string topic, StagePrivacyLevel privacyLevel = StagePrivacyLevel.GuildOnly, RequestOptions options = null) Parameters topic string The topic for the stage/ privacyLevel StagePrivacyLevel The privacy level of the stage. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous start operation. StopSpeakingAsync(RequestOptions) Makes the current user a listener. public Task StopSpeakingAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous stop operation. StopStageAsync(RequestOptions) Stops the stage, deleting the stage instance. public Task StopStageAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous stop operation. UpdateAsync(RequestOptions) Updates this object's properties with its current state. public override Task UpdateAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task"
  },
  "api/Discord.Rest.RestSystemMessage.html": {
    "href": "api/Discord.Rest.RestSystemMessage.html",
    "title": "Class RestSystemMessage | Discord.Net Documentation",
    "keywords": "Class RestSystemMessage Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based system message. public class RestSystemMessage : RestMessage, IUpdateable, ISystemMessage, IMessage, ISnowflakeEntity, IEntity<ulong>, IDeletable Inheritance object RestEntity<ulong> RestMessage RestSystemMessage Implements IUpdateable ISystemMessage IMessage ISnowflakeEntity IEntity<ulong> IDeletable Inherited Members RestMessage.Channel RestMessage.Author RestMessage.Source RestMessage.Content RestMessage.CleanContent RestMessage.CreatedAt RestMessage.IsTTS RestMessage.IsPinned RestMessage.IsSuppressed RestMessage.EditedTimestamp RestMessage.MentionedEveryone RestMessage.Thread RestMessage.Attachments RestMessage.Embeds RestMessage.MentionedChannelIds RestMessage.MentionedRoleIds RestMessage.Tags RestMessage.Stickers RestMessage.Timestamp RestMessage.Activity RestMessage.Application RestMessage.Reference RestMessage.Interaction RestMessage.Flags RestMessage.Type RestMessage.RoleSubscriptionData RestMessage.Components RestMessage.MentionedUsers RestMessage.UpdateAsync(RequestOptions) RestMessage.DeleteAsync(RequestOptions) RestMessage.ToString() RestMessage.Reactions RestMessage.AddReactionAsync(IEmote, RequestOptions) RestMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions) RestMessage.RemoveReactionAsync(IEmote, ulong, RequestOptions) RestMessage.RemoveAllReactionsAsync(RequestOptions) RestMessage.RemoveAllReactionsForEmoteAsync(IEmote, RequestOptions) RestMessage.GetReactionUsersAsync(IEmote, int, RequestOptions, ReactionType) RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods MessageExtensions.GetJumpUrl(IMessage)"
  },
  "api/Discord.Rest.RestTeam.html": {
    "href": "api/Discord.Rest.RestTeam.html",
    "title": "Class RestTeam | Discord.Net Documentation",
    "keywords": "Class RestTeam Namespace Discord.Rest Assembly Discord.Net.Rest.dll public class RestTeam : RestEntity<ulong>, IEntity<ulong>, ITeam Inheritance object RestEntity<ulong> RestTeam Implements IEntity<ulong> ITeam Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IconUrl Gets the team icon url. public string IconUrl { get; } Property Value string Name Gets the name of this team. public string Name { get; } Property Value string OwnerUserId Gets the user identifier that owns this team. public ulong OwnerUserId { get; } Property Value ulong TeamMembers Gets the members of this team. public IReadOnlyList<ITeamMember> TeamMembers { get; } Property Value IReadOnlyList<ITeamMember>"
  },
  "api/Discord.Rest.RestTeamMember.html": {
    "href": "api/Discord.Rest.RestTeamMember.html",
    "title": "Class RestTeamMember | Discord.Net Documentation",
    "keywords": "Class RestTeamMember Namespace Discord.Rest Assembly Discord.Net.Rest.dll public class RestTeamMember : ITeamMember Inheritance object RestTeamMember Implements ITeamMember Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties MembershipState Gets the membership state of this team member. public MembershipState MembershipState { get; } Property Value MembershipState Permissions Gets the permissions of this team member. public string[] Permissions { get; } Property Value string[] TeamId Gets the team unique identifier for this team member. public ulong TeamId { get; } Property Value ulong User Gets the Discord user of this team member. public IUser User { get; } Property Value IUser"
  },
  "api/Discord.Rest.RestTextChannel.html": {
    "href": "api/Discord.Rest.RestTextChannel.html",
    "title": "Class RestTextChannel | Discord.Net Documentation",
    "keywords": "Class RestTextChannel Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based channel in a guild that can send and receive messages. public class RestTextChannel : RestGuildChannel, IUpdateable, IRestMessageChannel, ITextChannel, IMessageChannel, IMentionable, INestedChannel, IIntegrationChannel, IGuildChannel, IChannel, ISnowflakeEntity, IEntity<ulong>, IDeletable Inheritance object RestEntity<ulong> RestChannel RestGuildChannel RestTextChannel Implements IUpdateable IRestMessageChannel ITextChannel IMessageChannel IMentionable INestedChannel IIntegrationChannel IGuildChannel IChannel ISnowflakeEntity IEntity<ulong> IDeletable Derived RestNewsChannel RestThreadChannel RestVoiceChannel Inherited Members RestGuildChannel.PermissionOverwrites RestGuildChannel.Name RestGuildChannel.Position RestGuildChannel.GuildId RestGuildChannel.Flags RestGuildChannel.UpdateAsync(RequestOptions) RestGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions) RestGuildChannel.DeleteAsync(RequestOptions) RestGuildChannel.GetPermissionOverwrite(IUser) RestGuildChannel.GetPermissionOverwrite(IRole) RestGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions) RestGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) RestGuildChannel.ToString() RestChannel.CreatedAt RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties CategoryId Gets the parent (category) ID of this channel in the guild's channel list. public ulong? CategoryId { get; } Property Value ulong? A ulong representing the snowflake identifier of the parent of this channel; null if none is set. DefaultArchiveDuration Gets the default auto-archive duration for client-created threads in this channel. public ThreadArchiveDuration DefaultArchiveDuration { get; } Property Value ThreadArchiveDuration The default auto-archive duration for thread creation in this channel. Remarks The value of this property does not affect API thread creation, it will not respect this value. DefaultSlowModeInterval Gets the current default slow-mode delay for threads in this channel. public int DefaultSlowModeInterval { get; } Property Value int An int representing the time in seconds required before the user can send another message; 0 if disabled. IsNsfw Gets a value that indicates whether the channel is NSFW. public bool IsNsfw { get; } Property Value bool true if the channel has the NSFW flag enabled; otherwise false. Mention Returns a special string used to mention this object. public string Mention { get; } Property Value string A string that is recognized by Discord as a mention (e.g. <@168693960628371456>). SlowModeInterval Gets the current slow-mode delay for this channel. public virtual int SlowModeInterval { get; } Property Value int An int representing the time in seconds required before the user can send another message; 0 if disabled. Topic Gets the current topic for this text channel. public string Topic { get; } Property Value string A string representing the topic set in the channel; null if none is set. Methods CreateInviteAsync(int?, int?, bool, bool, RequestOptions) Creates a new invite to this channel. public virtual Task<IInviteMetadata> CreateInviteAsync(int? maxAge = 86400, int? maxUses = null, bool isTemporary = false, bool isUnique = false, RequestOptions options = null) Parameters maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. isTemporary bool If true, the user accepting this invite will be kicked from the guild after closing their client. isUnique bool If true, don't try to reuse a similar invite (useful for creating many unique one time use invites). options RequestOptions The options to be used when sending the request. Returns Task<IInviteMetadata> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. Examples The following example creates a new invite to this channel; the invite lasts for 12 hours and can only be used 3 times throughout its lifespan. await guildChannel.CreateInviteAsync(maxAge: 43200, maxUses: 3); CreateInviteToApplicationAsync(DefaultApplications, int?, int?, bool, bool, RequestOptions) Creates a new invite to this channel. public virtual Task<IInviteMetadata> CreateInviteToApplicationAsync(DefaultApplications application, int? maxAge = 86400, int? maxUses = null, bool isTemporary = false, bool isUnique = false, RequestOptions options = null) Parameters application DefaultApplications The application to open for this invite. maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. isTemporary bool If true, the user accepting this invite will be kicked from the guild after closing their client. isUnique bool If true, don't try to reuse a similar invite (useful for creating many unique one time use invites). options RequestOptions The options to be used when sending the request. Returns Task<IInviteMetadata> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. CreateInviteToApplicationAsync(ulong, int?, int?, bool, bool, RequestOptions) Creates a new invite to this channel. public virtual Task<IInviteMetadata> CreateInviteToApplicationAsync(ulong applicationId, int? maxAge = 86400, int? maxUses = null, bool isTemporary = false, bool isUnique = false, RequestOptions options = null) Parameters applicationId ulong The id of the embedded application to open for this invite. maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. isTemporary bool If true, the user accepting this invite will be kicked from the guild after closing their client. isUnique bool If true, don't try to reuse a similar invite (useful for creating many unique one time use invites). options RequestOptions The options to be used when sending the request. Returns Task<IInviteMetadata> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. CreateInviteToStreamAsync(IUser, int?, int?, bool, bool, RequestOptions) Creates a new invite to this channel. public virtual Task<IInviteMetadata> CreateInviteToStreamAsync(IUser user, int? maxAge, int? maxUses = null, bool isTemporary = false, bool isUnique = false, RequestOptions options = null) Parameters user IUser The id of the user whose stream to display for this invite. maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. isTemporary bool If true, the user accepting this invite will be kicked from the guild after closing their client. isUnique bool If true, don't try to reuse a similar invite (useful for creating many unique one time use invites). options RequestOptions The options to be used when sending the request. Returns Task<IInviteMetadata> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. Examples The following example creates a new invite to this channel; the invite lasts for 12 hours and can only be used 3 times throughout its lifespan. await guildChannel.CreateInviteAsync(maxAge: 43200, maxUses: 3); CreateThreadAsync(string, ThreadType, ThreadArchiveDuration, IMessage, bool?, int?, RequestOptions) Creates a thread within this ITextChannel. public virtual Task<RestThreadChannel> CreateThreadAsync(string name, ThreadType type = ThreadType.PublicThread, ThreadArchiveDuration autoArchiveDuration = ThreadArchiveDuration.OneDay, IMessage message = null, bool? invitable = null, int? slowmode = null, RequestOptions options = null) Parameters name string The name of the thread. type ThreadType The type of the thread. Note: This parameter is not used if the message parameter is not specified. autoArchiveDuration ThreadArchiveDuration The duration on which this thread archives after. message IMessage The message which to start the thread from. invitable bool? slowmode int? options RequestOptions The options to be used when sending the request. Returns Task<RestThreadChannel> A task that represents the asynchronous create operation. The task result contains a IThreadChannel Remarks When message is null the thread type will be based off of the channel its created in. When called on a ITextChannel, it creates a PublicThread. When called on a INewsChannel, it creates a NewsThread. The id of the created thread will be the same as the id of the message, and as such a message can only have a single thread created from it. CreateWebhookAsync(string, Stream, RequestOptions) Creates a webhook in this text channel. public virtual Task<RestWebhook> CreateWebhookAsync(string name, Stream avatar = null, RequestOptions options = null) Parameters name string The name of the webhook. avatar Stream The avatar of the webhook. options RequestOptions The options to be used when sending the request. Returns Task<RestWebhook> A task that represents the asynchronous creation operation. The task result contains the newly created webhook. DeleteMessageAsync(IMessage, RequestOptions) Deletes a message based on the provided message in this channel. public virtual Task DeleteMessageAsync(IMessage message, RequestOptions options = null) Parameters message IMessage The message that would be removed. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. DeleteMessageAsync(ulong, RequestOptions) Deletes a message. public virtual Task DeleteMessageAsync(ulong messageId, RequestOptions options = null) Parameters messageId ulong The snowflake identifier of the message that would be removed. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. DeleteMessagesAsync(IEnumerable<IMessage>, RequestOptions) Bulk-deletes multiple messages. public virtual Task DeleteMessagesAsync(IEnumerable<IMessage> messages, RequestOptions options = null) Parameters messages IEnumerable<IMessage> The messages to be bulk-deleted. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous bulk-removal operation. Examples The following example gets 250 messages from the channel and deletes them. var messages = await textChannel.GetMessagesAsync(250).FlattenAsync(); await textChannel.DeleteMessagesAsync(messages); Remarks This method attempts to remove the messages specified in bulk. important Due to the limitation set by Discord, this method can only remove messages that are posted within 14 days! DeleteMessagesAsync(IEnumerable<ulong>, RequestOptions) Bulk-deletes multiple messages. public virtual Task DeleteMessagesAsync(IEnumerable<ulong> messageIds, RequestOptions options = null) Parameters messageIds IEnumerable<ulong> The snowflake identifier of the messages to be bulk-deleted. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous bulk-removal operation. Remarks This method attempts to remove the messages specified in bulk. important Due to the limitation set by Discord, this method can only remove messages that are posted within 14 days! EnterTypingState(RequestOptions) Continuously broadcasts the \"user is typing\" message to all users in this channel until the returned object is disposed. public virtual IDisposable EnterTypingState(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns IDisposable A disposable object that, upon its disposal, will stop the client from broadcasting its typing state in this channel. Examples The following example keeps the client in the typing state until LongRunningAsync has finished. using (channel.EnterTypingState()) await LongRunningAsync(); GetActiveThreadsAsync(RequestOptions) Gets a collection of active threads within this channel. public virtual Task<IReadOnlyCollection<RestThreadChannel>> GetActiveThreadsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestThreadChannel>> A task that represents an asynchronous get operation for retrieving the threads. The task result contains a collection of active threads. GetCategoryAsync(RequestOptions) Gets the parent (category) channel of this channel. public virtual Task<ICategoryChannel> GetCategoryAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<ICategoryChannel> A task that represents the asynchronous get operation. The task result contains the category channel representing the parent of this channel; null if none is set. GetInvitesAsync(RequestOptions) Gets a collection of all invites to this channel. public virtual Task<IReadOnlyCollection<IInviteMetadata>> GetInvitesAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IInviteMetadata>> A task that represents the asynchronous get operation. The task result contains a read-only collection of invite metadata that are created for this channel. Examples The following example gets all of the invites that have been created in this channel and selects the most used invite. var invites = await channel.GetInvitesAsync(); if (invites.Count == 0) return; var invite = invites.OrderByDescending(x => x.Uses).FirstOrDefault(); GetMessageAsync(ulong, RequestOptions) Gets a message from this message channel. public virtual Task<RestMessage> GetMessageAsync(ulong id, RequestOptions options = null) Parameters id ulong The snowflake identifier of the message. options RequestOptions The options to be used when sending the request. Returns Task<RestMessage> A task that represents an asynchronous get operation for retrieving the message. The task result contains the retrieved message; null if no message is found with the specified identifier. Remarks This method follows the same behavior as described in GetMessageAsync(ulong, CacheMode, RequestOptions). Please visit its documentation for more details on this method. GetMessagesAsync(IMessage, Direction, int, RequestOptions) Gets a collection of messages in this channel. public virtual IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(IMessage fromMessage, Direction dir, int limit = 100, RequestOptions options = null) Parameters fromMessage IMessage The starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions). Please visit its documentation for more details on this method. GetMessagesAsync(int, RequestOptions) Gets the last N messages from this message channel. public virtual IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(int limit = 100, RequestOptions options = null) Parameters limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(int, CacheMode, RequestOptions). Please visit its documentation for more details on this method. GetMessagesAsync(ulong, Direction, int, RequestOptions) Gets a collection of messages in this channel. public virtual IAsyncEnumerable<IReadOnlyCollection<RestMessage>> GetMessagesAsync(ulong fromMessageId, Direction dir, int limit = 100, RequestOptions options = null) Parameters fromMessageId ulong The ID of the starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(ulong, Direction, int, CacheMode, RequestOptions). Please visit its documentation for more details on this method. GetPinnedMessagesAsync(RequestOptions) Gets a collection of pinned messages in this channel. public virtual Task<IReadOnlyCollection<RestMessage>> GetPinnedMessagesAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestMessage>> A task that represents the asynchronous get operation for retrieving pinned messages in this channel. The task result contains a collection of messages found in the pinned messages. Remarks This method follows the same behavior as described in GetPinnedMessagesAsync(RequestOptions). Please visit its documentation for more details on this method. GetUserAsync(ulong, RequestOptions) Gets a user in this channel. public Task<RestGuildUser> GetUserAsync(ulong id, RequestOptions options = null) Parameters id ulong The snowflake identifier of the user. options RequestOptions The options to be used when sending the request. Returns Task<RestGuildUser> A task representing the asynchronous get operation. The task result contains a guild user object that represents the user; null if none is found. Exceptions InvalidOperationException Resolving permissions requires the parent guild to be downloaded. GetUsersAsync(RequestOptions) Gets a collection of users that are able to view the channel. public IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> GetUsersAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestGuildUser>> A paged collection containing a collection of guild users that can access this channel. Flattening the paginated response into a collection of users with FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) is required if you wish to access the users. Exceptions InvalidOperationException Resolving permissions requires the parent guild to be downloaded. GetWebhookAsync(ulong, RequestOptions) Gets a webhook available in this text channel. public virtual Task<RestWebhook> GetWebhookAsync(ulong id, RequestOptions options = null) Parameters id ulong The identifier of the webhook. options RequestOptions The options to be used when sending the request. Returns Task<RestWebhook> A task that represents the asynchronous get operation. The task result contains a webhook associated with the identifier; null if the webhook is not found. GetWebhooksAsync(RequestOptions) Gets the webhooks available in this text channel. public virtual Task<IReadOnlyCollection<RestWebhook>> GetWebhooksAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestWebhook>> A task that represents the asynchronous get operation. The task result contains a read-only collection of webhooks that is available in this channel. ModifyAsync(Action<TextChannelProperties>, RequestOptions) Modifies this text channel. public virtual Task ModifyAsync(Action<TextChannelProperties> func, RequestOptions options = null) Parameters func Action<TextChannelProperties> The delegate containing the properties to modify the channel with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. See Also TextChannelProperties ModifyMessageAsync(ulong, Action<MessageProperties>, RequestOptions) Modifies a message. public virtual Task<IUserMessage> ModifyMessageAsync(ulong messageId, Action<MessageProperties> func, RequestOptions options = null) Parameters messageId ulong The snowflake identifier of the message that would be changed. func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The options to be used when sending the request. Returns Task<IUserMessage> A task that represents the asynchronous modification operation. Remarks This method modifies this message with the specified properties. To see an example of this method and what properties are available, please refer to MessageProperties. SendFileAsync(FileAttachment, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a file to this message channel with an optional caption. public virtual Task<RestUserMessage> SendFileAsync(FileAttachment attachment, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters attachment FileAttachment The attachment containing the file and description. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Remarks This method sends a file as if you are uploading an attachment directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. ArgumentException The only valid MessageFlags are SuppressEmbeds, SuppressNotification and None. SendFileAsync(Stream, string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a file to this message channel with an optional caption. public virtual Task<RestUserMessage> SendFileAsync(Stream stream, string filename, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters stream Stream The Stream of the file to be sent. filename string The name of the attachment. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. isSpoiler bool Whether the message attachment should be hidden as a spoiler. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example uploads a streamed image that will be called b1nzy.jpg embedded inside a rich embed to the channel. using (var b1nzyStream = await httpClient.GetStreamAsync(\"https://example.com/b1nzy\")) await channel.SendFileAsync(b1nzyStream, \"b1nzy.jpg\", embed: new EmbedBuilder { ImageUrl = \"attachment://b1nzy.jpg\" }.Build()); Remarks This method sends a file as if you are uploading an attachment directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. ArgumentException The only valid MessageFlags are SuppressEmbeds, SuppressNotification and None. SendFileAsync(string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a file to this message channel with an optional caption. public virtual Task<RestUserMessage> SendFileAsync(string filePath, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters filePath string The file path of the file. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. isSpoiler bool Whether the message attachment should be hidden as a spoiler. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example uploads a local file called wumpus.txt along with the text good discord boi to the channel. await channel.SendFileAsync(\"wumpus.txt\", \"good discord boi\"); The following example uploads a local image called b1nzy.jpg embedded inside a rich embed to the channel. await channel.SendFileAsync(\"b1nzy.jpg\", embed: new EmbedBuilder { ImageUrl = \"attachment://b1nzy.jpg\" }.Build()); Remarks This method sends a file as if you are uploading an attachment directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. Exceptions ArgumentException filePath is a zero-length string, contains only white space, or contains one or more invalid characters as defined by GetInvalidPathChars(). ArgumentNullException filePath is null. PathTooLongException The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. DirectoryNotFoundException The specified path is invalid, (for example, it is on an unmapped drive). UnauthorizedAccessException filePath specified a directory.-or- The caller does not have the required permission. FileNotFoundException The file specified in filePath was not found. NotSupportedException filePath is in an invalid format. IOException An I/O error occurred while opening the file. ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. ArgumentException The only valid MessageFlags are SuppressEmbeds, SuppressNotification and None. SendFilesAsync(IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a collection of files to this message channel. public virtual Task<RestUserMessage> SendFilesAsync(IEnumerable<FileAttachment> attachments, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Remarks This method sends files as if you are uploading attachments directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. ArgumentException The only valid MessageFlags are SuppressEmbeds, SuppressNotification and None. SendMessageAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a message to this message channel. public virtual Task<RestUserMessage> SendMessageAsync(string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters text string The message to be sent. isTTS bool Determines whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the message. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example sends a message with the current system time in RFC 1123 format to the channel and deletes itself after 5 seconds. var message = await channel.SendMessageAsync(DateTimeOffset.UtcNow.ToString(\"R\")); await Task.Delay(TimeSpan.FromSeconds(5)) .ContinueWith(x => message.DeleteAsync()); Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. ArgumentException The only valid MessageFlags are SuppressEmbeds, SuppressNotification and None. SyncPermissionsAsync(RequestOptions) Syncs the permissions of this nested channel with its parent's. public Task SyncPermissionsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for syncing channel permissions with its parent's. TriggerTypingAsync(RequestOptions) Broadcasts the \"user is typing\" message to all users in this channel, lasting 10 seconds. public virtual Task TriggerTypingAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation that triggers the broadcast."
  },
  "api/Discord.Rest.RestThreadChannel.html": {
    "href": "api/Discord.Rest.RestThreadChannel.html",
    "title": "Class RestThreadChannel | Discord.Net Documentation",
    "keywords": "Class RestThreadChannel Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a thread channel received over REST. public class RestThreadChannel : RestTextChannel, IUpdateable, IRestMessageChannel, IThreadChannel, ITextChannel, IMessageChannel, IMentionable, INestedChannel, IIntegrationChannel, IGuildChannel, IChannel, ISnowflakeEntity, IEntity<ulong>, IDeletable Inheritance object RestEntity<ulong> RestChannel RestGuildChannel RestTextChannel RestThreadChannel Implements IUpdateable IRestMessageChannel IThreadChannel ITextChannel IMessageChannel IMentionable INestedChannel IIntegrationChannel IGuildChannel IChannel ISnowflakeEntity IEntity<ulong> IDeletable Inherited Members RestTextChannel.Topic RestTextChannel.SlowModeInterval RestTextChannel.CategoryId RestTextChannel.Mention RestTextChannel.IsNsfw RestTextChannel.DefaultArchiveDuration RestTextChannel.DefaultSlowModeInterval RestTextChannel.GetMessageAsync(ulong, RequestOptions) RestTextChannel.GetMessagesAsync(int, RequestOptions) RestTextChannel.GetMessagesAsync(ulong, Direction, int, RequestOptions) RestTextChannel.GetMessagesAsync(IMessage, Direction, int, RequestOptions) RestTextChannel.GetPinnedMessagesAsync(RequestOptions) RestTextChannel.SendMessageAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) RestTextChannel.SendFileAsync(string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) RestTextChannel.SendFileAsync(Stream, string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) RestTextChannel.SendFileAsync(FileAttachment, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) RestTextChannel.SendFilesAsync(IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) RestTextChannel.DeleteMessageAsync(ulong, RequestOptions) RestTextChannel.DeleteMessageAsync(IMessage, RequestOptions) RestTextChannel.DeleteMessagesAsync(IEnumerable<IMessage>, RequestOptions) RestTextChannel.DeleteMessagesAsync(IEnumerable<ulong>, RequestOptions) RestTextChannel.ModifyMessageAsync(ulong, Action<MessageProperties>, RequestOptions) RestTextChannel.TriggerTypingAsync(RequestOptions) RestTextChannel.EnterTypingState(RequestOptions) RestTextChannel.CreateThreadAsync(string, ThreadType, ThreadArchiveDuration, IMessage, bool?, int?, RequestOptions) RestTextChannel.SyncPermissionsAsync(RequestOptions) RestTextChannel.CreateInviteToApplicationAsync(DefaultApplications, int?, int?, bool, bool, RequestOptions) RestGuildChannel.Name RestGuildChannel.Position RestGuildChannel.GuildId RestGuildChannel.Flags RestGuildChannel.UpdateAsync(RequestOptions) RestGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions) RestGuildChannel.DeleteAsync(RequestOptions) RestGuildChannel.ToString() RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties AppliedTags Gets ids of tags applied to a forum thread public IReadOnlyCollection<ulong> AppliedTags { get; } Property Value IReadOnlyCollection<ulong> Remarks This property is only available on forum threads. ArchiveTimestamp Gets the timestamp when the thread's archive status was last changed, used for calculating recent activity. public DateTimeOffset ArchiveTimestamp { get; } Property Value DateTimeOffset AutoArchiveDuration Gets the duration of time before the thread is automatically archived after no activity. public ThreadArchiveDuration AutoArchiveDuration { get; } Property Value ThreadArchiveDuration CreatedAt Gets when the thread was created. public override DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset Remarks This property is only populated for threads created after 2022-01-09, hence the default date of this property will be that date. HasJoined Gets whether or not the current user has joined this thread. public bool HasJoined { get; } Property Value bool IsArchived Gets whether or not the current thread is archived. public bool IsArchived { get; } Property Value bool IsInvitable Gets whether non-moderators can add other non-moderators to a thread. public bool? IsInvitable { get; } Property Value bool? Remarks This property is only available on private threads. IsLocked Gets whether or not the current thread is locked. public bool IsLocked { get; } Property Value bool MemberCount Gets an approximate count of users in a thread, stops counting after 50. public int MemberCount { get; } Property Value int MessageCount Gets an approximate count of messages in a thread, stops counting after 50. public int MessageCount { get; } Property Value int OwnerId Gets the id of the creator of the thread. public ulong OwnerId { get; } Property Value ulong ParentChannelId Gets the parent text channel id. public ulong ParentChannelId { get; } Property Value ulong PermissionOverwrites Gets a collection of permission overwrites for this channel. public override IReadOnlyCollection<Overwrite> PermissionOverwrites { get; } Property Value IReadOnlyCollection<Overwrite> A collection of overwrites associated with this channel. Remarks This method is not supported in threads. Type Gets the type of the current thread channel. public ThreadType Type { get; } Property Value ThreadType Methods AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions) Adds or updates the permission overwrite for the given role. public override Task AddPermissionOverwriteAsync(IRole role, OverwritePermissions permissions, RequestOptions options = null) Parameters role IRole The role to add the overwrite to. permissions OverwritePermissions The overwrite to add to the role. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous permission operation for adding the specified permissions to the channel. Remarks This method is not supported in threads. AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions) Adds or updates the permission overwrite for the given user. public override Task AddPermissionOverwriteAsync(IUser user, OverwritePermissions permissions, RequestOptions options = null) Parameters user IUser The user to add the overwrite to. permissions OverwritePermissions The overwrite to add to the user. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous permission operation for adding the specified permissions to the channel. Remarks This method is not supported in threads. AddUserAsync(IGuildUser, RequestOptions) Adds a user to this thread. public Task AddUserAsync(IGuildUser user, RequestOptions options = null) Parameters user IGuildUser The IGuildUser to add. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation of adding a member to a thread. CreateInviteAsync(int?, int?, bool, bool, RequestOptions) Creates a new invite to this channel. public override Task<IInviteMetadata> CreateInviteAsync(int? maxAge = 86400, int? maxUses = null, bool isTemporary = false, bool isUnique = false, RequestOptions options = null) Parameters maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. isTemporary bool If true, the user accepting this invite will be kicked from the guild after closing their client. isUnique bool If true, don't try to reuse a similar invite (useful for creating many unique one time use invites). options RequestOptions The options to be used when sending the request. Returns Task<IInviteMetadata> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. Examples The following example creates a new invite to this channel; the invite lasts for 12 hours and can only be used 3 times throughout its lifespan. await guildChannel.CreateInviteAsync(maxAge: 43200, maxUses: 3); Remarks This method is not supported in threads. CreateInviteToApplicationAsync(ulong, int?, int?, bool, bool, RequestOptions) Creates a new invite to this channel. public override Task<IInviteMetadata> CreateInviteToApplicationAsync(ulong applicationId, int? maxAge, int? maxUses = null, bool isTemporary = false, bool isUnique = false, RequestOptions options = null) Parameters applicationId ulong The id of the embedded application to open for this invite. maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. isTemporary bool If true, the user accepting this invite will be kicked from the guild after closing their client. isUnique bool If true, don't try to reuse a similar invite (useful for creating many unique one time use invites). options RequestOptions The options to be used when sending the request. Returns Task<IInviteMetadata> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. Remarks This method is not supported in threads. CreateInviteToStreamAsync(IUser, int?, int?, bool, bool, RequestOptions) Creates a new invite to this channel. public override Task<IInviteMetadata> CreateInviteToStreamAsync(IUser user, int? maxAge, int? maxUses = null, bool isTemporary = false, bool isUnique = false, RequestOptions options = null) Parameters user IUser The id of the user whose stream to display for this invite. maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. isTemporary bool If true, the user accepting this invite will be kicked from the guild after closing their client. isUnique bool If true, don't try to reuse a similar invite (useful for creating many unique one time use invites). options RequestOptions The options to be used when sending the request. Returns Task<IInviteMetadata> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. Examples The following example creates a new invite to this channel; the invite lasts for 12 hours and can only be used 3 times throughout its lifespan. await guildChannel.CreateInviteAsync(maxAge: 43200, maxUses: 3); Remarks This method is not supported in threads. CreateWebhookAsync(string, Stream, RequestOptions) Creates a webhook in this text channel. public override Task<RestWebhook> CreateWebhookAsync(string name, Stream avatar = null, RequestOptions options = null) Parameters name string The name of the webhook. avatar Stream The avatar of the webhook. options RequestOptions The options to be used when sending the request. Returns Task<RestWebhook> A task that represents the asynchronous creation operation. The task result contains the newly created webhook. Remarks This method is not supported in threads. GetActiveThreadsAsync(RequestOptions) Gets a collection of active threads within this channel. public override Task<IReadOnlyCollection<RestThreadChannel>> GetActiveThreadsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestThreadChannel>> A task that represents an asynchronous get operation for retrieving the threads. The task result contains a collection of active threads. Exceptions NotSupportedException This method is not supported in threads. GetCategoryAsync(RequestOptions) Gets the parent (category) channel of this channel. public override Task<ICategoryChannel> GetCategoryAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<ICategoryChannel> A task that represents the asynchronous get operation. The task result contains the category channel representing the parent of this channel; null if none is set. Remarks This method is not supported in threads. GetInvitesAsync(RequestOptions) Gets a collection of all invites to this channel. public override Task<IReadOnlyCollection<IInviteMetadata>> GetInvitesAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IInviteMetadata>> A task that represents the asynchronous get operation. The task result contains a read-only collection of invite metadata that are created for this channel. Examples The following example gets all of the invites that have been created in this channel and selects the most used invite. var invites = await channel.GetInvitesAsync(); if (invites.Count == 0) return; var invite = invites.OrderByDescending(x => x.Uses).FirstOrDefault(); Remarks This method is not supported in threads. GetPermissionOverwrite(IRole) Gets the permission overwrite for a specific role. public override OverwritePermissions? GetPermissionOverwrite(IRole role) Parameters role IRole The role to get the overwrite from. Returns OverwritePermissions? An overwrite object for the targeted role; null if none is set. Remarks This method is not supported in threads. GetPermissionOverwrite(IUser) Gets the permission overwrite for a specific user. public override OverwritePermissions? GetPermissionOverwrite(IUser user) Parameters user IUser The user to get the overwrite from. Returns OverwritePermissions? An overwrite object for the targeted user; null if none is set. Remarks This method is not supported in threads. GetThreadUsersAsync(int, RequestOptions) Gets a collection of users within this thread. public IAsyncEnumerable<IReadOnlyCollection<RestThreadUser>> GetThreadUsersAsync(int limit = 100, RequestOptions options = null) Parameters limit int Sets the limit of the user count for each request. 100 by default. options RequestOptions Returns IAsyncEnumerable<IReadOnlyCollection<RestThreadUser>> A task that represents the asynchronous get operation. The task result contains a collection of thread users found within this thread channel. GetUserAsync(ulong, RequestOptions) Gets a user within this thread. public Task<RestThreadUser> GetUserAsync(ulong userId, RequestOptions options = null) Parameters userId ulong The id of the user to fetch. options RequestOptions The options to be used when sending the request. Returns Task<RestThreadUser> A task representing the asynchronous get operation. The task returns a RestThreadUser if found, otherwise null. GetUsersAsync(RequestOptions) Gets a collection of users within this thread. [Obsolete(\"Please use GetThreadUsersAsync instead of this. Will be removed in next major version.\", false)] public Task<IReadOnlyCollection<RestThreadUser>> GetUsersAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestThreadUser>> A task representing the asynchronous get operation. The task returns a IReadOnlyCollection<T> of RestThreadUser's. GetWebhookAsync(ulong, RequestOptions) Gets a webhook available in this text channel. public override Task<RestWebhook> GetWebhookAsync(ulong id, RequestOptions options = null) Parameters id ulong The identifier of the webhook. options RequestOptions The options to be used when sending the request. Returns Task<RestWebhook> A task that represents the asynchronous get operation. The task result contains a webhook associated with the identifier; null if the webhook is not found. Remarks This method is not supported in threads. GetWebhooksAsync(RequestOptions) Gets the webhooks available in this text channel. public override Task<IReadOnlyCollection<RestWebhook>> GetWebhooksAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestWebhook>> A task that represents the asynchronous get operation. The task result contains a read-only collection of webhooks that is available in this channel. Remarks This method is not supported in threads. JoinAsync(RequestOptions) Joins the current thread. public Task JoinAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous join operation. LeaveAsync(RequestOptions) Leaves the current thread. public Task LeaveAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous leave operation. ModifyAsync(Action<TextChannelProperties>, RequestOptions) Modifies this text channel. public override Task ModifyAsync(Action<TextChannelProperties> func, RequestOptions options = null) Parameters func Action<TextChannelProperties> The delegate containing the properties to modify the channel with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. See Also TextChannelProperties ModifyAsync(Action<ThreadChannelProperties>, RequestOptions) Modifies this thread channel. public Task ModifyAsync(Action<ThreadChannelProperties> func, RequestOptions options = null) Parameters func Action<ThreadChannelProperties> The delegate containing the properties to modify the channel with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. See Also ThreadChannelProperties RemovePermissionOverwriteAsync(IRole, RequestOptions) Removes the permission overwrite for the given role, if one exists. public override Task RemovePermissionOverwriteAsync(IRole role, RequestOptions options = null) Parameters role IRole The role to remove the overwrite from. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel. Remarks This method is not supported in threads. RemovePermissionOverwriteAsync(IUser, RequestOptions) Removes the permission overwrite for the given user, if one exists. public override Task RemovePermissionOverwriteAsync(IUser user, RequestOptions options = null) Parameters user IUser The user to remove the overwrite from. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel. Remarks This method is not supported in threads. RemoveUserAsync(IGuildUser, RequestOptions) Removes a user from this thread. public Task RemoveUserAsync(IGuildUser user, RequestOptions options = null) Parameters user IGuildUser The IGuildUser to remove from this thread. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation of removing a user from this thread."
  },
  "api/Discord.Rest.RestThreadUser.html": {
    "href": "api/Discord.Rest.RestThreadUser.html",
    "title": "Class RestThreadUser | Discord.Net Documentation",
    "keywords": "Class RestThreadUser Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a thread user received over the REST api. public class RestThreadUser : RestEntity<ulong>, IEntity<ulong>, IThreadUser, IMentionable Inheritance object RestEntity<ulong> RestThreadUser Implements IEntity<ulong> IThreadUser IMentionable Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Guild Gets the guild this thread was created in. public IGuild Guild { get; } Property Value IGuild GuildUser Gets the IGuildUser on the server this thread was created in. public RestGuildUser GuildUser { get; } Property Value RestGuildUser Mention Returns a special string used to mention this object. public string Mention { get; } Property Value string A string that is recognized by Discord as a mention (e.g. <@168693960628371456>). Thread Gets the IThreadChannel this user is in. public IThreadChannel Thread { get; } Property Value IThreadChannel ThreadJoinedAt Gets the timestamp for when this user joined this thread. public DateTimeOffset ThreadJoinedAt { get; } Property Value DateTimeOffset Methods GetGuildUser() Gets the guild user for this thread user. public Task<IGuildUser> GetGuildUser() Returns Task<IGuildUser> A task representing the asynchronous get operation. The task returns a IGuildUser that represents the current thread user."
  },
  "api/Discord.Rest.RestUser.html": {
    "href": "api/Discord.Rest.RestUser.html",
    "title": "Class RestUser | Discord.Net Documentation",
    "keywords": "Class RestUser Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based user. public class RestUser : RestEntity<ulong>, IUser, ISnowflakeEntity, IEntity<ulong>, IMentionable, IPresence, IUpdateable Inheritance object RestEntity<ulong> RestUser Implements IUser ISnowflakeEntity IEntity<ulong> IMentionable IPresence IUpdateable Derived RestGroupUser RestGuildUser RestSelfUser RestWebhookUser Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods UserExtensions.SendFileAsync(IUser, FileAttachment, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, Stream, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFilesAsync(IUser, IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendMessageAsync(IUser, string, bool, Embed, RequestOptions, AllowedMentions, MessageComponent, Embed[]) Properties AccentColor public Color? AccentColor { get; } Property Value Color? ActiveClients Gets the set of clients where this user is currently active. public virtual IReadOnlyCollection<ClientType> ActiveClients { get; } Property Value IReadOnlyCollection<ClientType> Activities Gets the list of activities that this user currently has available. public virtual IReadOnlyCollection<IActivity> Activities { get; } Property Value IReadOnlyCollection<IActivity> Activity public virtual IActivity Activity { get; } Property Value IActivity AvatarDecorationHash Gets the hash of the avatar decoration. public string AvatarDecorationHash { get; } Property Value string Remarks null if the user has no avatar decoration set. AvatarDecorationSkuId Gets the id of the avatar decoration's SKU. public ulong? AvatarDecorationSkuId { get; } Property Value ulong? Remarks null if the user has no avatar decoration set. AvatarId Gets the identifier of this user's avatar. public string AvatarId { get; } Property Value string BannerId public string BannerId { get; } Property Value string CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. Discriminator Gets the per-username unique ID for this user. This will return \"0000\" for users who have migrated to new username system. public string Discriminator { get; } Property Value string DiscriminatorValue Gets the per-username unique ID for this user. This will return 0 for users who have migrated to new username system. public ushort DiscriminatorValue { get; } Property Value ushort GlobalName Gets the user's display name, if it is set. For bots, this will get the application name. public string GlobalName { get; } Property Value string Remarks This property will be null if user has no display name set. IsBot Gets a value that indicates whether this user is identified as a bot. public bool IsBot { get; } Property Value bool true if the user is a bot application; otherwise false. Remarks This property retrieves a value that indicates whether this user is a registered bot application (indicated by the blue BOT tag within the official chat client). IsWebhook Gets a value that indicates whether this user is a webhook user. public virtual bool IsWebhook { get; } Property Value bool true if the user is a webhook; otherwise false. Mention Returns a special string used to mention this object. public string Mention { get; } Property Value string A string that is recognized by Discord as a mention (e.g. <@168693960628371456>). PublicFlags Gets the public flags that are applied to this user's account. public UserProperties? PublicFlags { get; } Property Value UserProperties? The value of public flags for this user. Remarks This value is determined by bitwise OR-ing UserProperties values together. Status Gets the current status of this user. public virtual UserStatus Status { get; } Property Value UserStatus Username Gets the username for this user. public string Username { get; } Property Value string Methods CreateDMChannelAsync(RequestOptions) Creates a direct message channel to this user. public Task<RestDMChannel> CreateDMChannelAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<RestDMChannel> A task that represents the asynchronous get operation. The task result contains a rest DM channel where the user is the recipient. GetAvatarDecorationUrl() Gets the URL for user's avatar decoration. public string GetAvatarDecorationUrl() Returns string Remarks null if the user has no avatar decoration set. GetAvatarUrl(ImageFormat, ushort) Gets the avatar URL for this user, if it is set. public string GetAvatarUrl(ImageFormat format = ImageFormat.Auto, ushort size = 128) Parameters format ImageFormat The format of the image. size ushort The size of the image that matches any power of two, ranging from 16 to 2048. Returns string A string representing the user's avatar URL; null if the user has no avatar set. Examples The following example attempts to retrieve the user's current avatar and send it to a channel; if one is not set, a default avatar for this user will be returned instead. Remarks tip If you wish to retrieve the display avatar for this user, consider using GetDisplayAvatarUrl(ImageFormat, ushort). GetBannerUrl(ImageFormat, ushort) public string GetBannerUrl(ImageFormat format = ImageFormat.Auto, ushort size = 256) Parameters format ImageFormat size ushort Returns string GetDefaultAvatarUrl() Gets the default avatar URL for this user. public string GetDefaultAvatarUrl() Returns string A string representing the user's default avatar URL. Remarks This avatar is auto-generated by Discord and consists of their logo combined with a random background color. note The calculation is always done by taking the remainder of this user's DiscriminatorValue divided by 5. GetDisplayAvatarUrl(ImageFormat, ushort) Gets the display avatar URL for this user. public virtual string GetDisplayAvatarUrl(ImageFormat format = ImageFormat.Auto, ushort size = 128) Parameters format ImageFormat The format of the image. size ushort The size of the image that matches any power of two, ranging from 16 to 2048. Returns string A string representing the user's display avatar URL. Remarks This method will return GetDefaultAvatarUrl() if the user has no avatar set. ToString() Gets the Username#Discriminator of the user. public override string ToString() Returns string A string that resolves to Username#Discriminator of the user. UpdateAsync(RequestOptions) Updates this object's properties with its current state. public virtual Task UpdateAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task"
  },
  "api/Discord.Rest.RestUserCommand.html": {
    "href": "api/Discord.Rest.RestUserCommand.html",
    "title": "Class RestUserCommand | Discord.Net Documentation",
    "keywords": "Class RestUserCommand Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based user command. public class RestUserCommand : RestCommandBase, IUserCommandInteraction, IApplicationCommandInteraction, IDiscordInteraction, ISnowflakeEntity, IEntity<ulong> Inheritance object RestEntity<ulong> RestInteraction RestCommandBase RestUserCommand Implements IUserCommandInteraction IApplicationCommandInteraction IDiscordInteraction ISnowflakeEntity IEntity<ulong> Inherited Members RestCommandBase.CommandName RestCommandBase.CommandId RestCommandBase.Respond(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) RestCommandBase.FollowupAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) RestCommandBase.FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) RestCommandBase.FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) RestCommandBase.FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) RestCommandBase.FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) RestCommandBase.Defer(bool, RequestOptions) RestCommandBase.RespondWithModal(Modal, RequestOptions) RestInteraction.Type RestInteraction.Token RestInteraction.Version RestInteraction.User RestInteraction.UserLocale RestInteraction.GuildLocale RestInteraction.CreatedAt RestInteraction.IsValidToken RestInteraction.Channel RestInteraction.ChannelId RestInteraction.Guild RestInteraction.GuildId RestInteraction.HasResponded RestInteraction.IsDMInteraction RestInteraction.ApplicationId RestInteraction.Entitlements RestInteraction.GetChannelAsync(RequestOptions) RestInteraction.GetGuildAsync(RequestOptions) RestInteraction.GetOriginalResponseAsync(RequestOptions) RestInteraction.ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) RestInteraction.DeleteOriginalResponseAsync(RequestOptions) RestInteraction.RespondWithPremiumRequiredAsync(RequestOptions) RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, InteractionService, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, T, RequestOptions, Action<ModalBuilder>) RestExtensions.RespondWithModal<T>(RestInteraction, string, RequestOptions, Action<ModalBuilder>) RestExtensions.RespondWithModal<T>(RestInteraction, string, T, RequestOptions, Action<ModalBuilder>) Properties Data Gets the data associated with this interaction. public RestUserCommandData Data { get; } Property Value RestUserCommandData"
  },
  "api/Discord.Rest.RestUserCommandData.html": {
    "href": "api/Discord.Rest.RestUserCommandData.html",
    "title": "Class RestUserCommandData | Discord.Net Documentation",
    "keywords": "Class RestUserCommandData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents the data for a RestUserCommand. public class RestUserCommandData : RestCommandBaseData, IEntity<ulong>, IUserCommandInteractionData, IApplicationCommandInteractionData, IDiscordInteractionData Inheritance object RestEntity<ulong> RestCommandBaseData<IApplicationCommandInteractionDataOption> RestCommandBaseData RestUserCommandData Implements IEntity<ulong> IUserCommandInteractionData IApplicationCommandInteractionData IDiscordInteractionData Inherited Members RestCommandBaseData<IApplicationCommandInteractionDataOption>.Name RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Member Gets the user who this command targets. public RestUser Member { get; } Property Value RestUser Options Gets a collection of IApplicationCommandInteractionDataOption received with this interaction. public override IReadOnlyCollection<IApplicationCommandInteractionDataOption> Options { get; } Property Value IReadOnlyCollection<IApplicationCommandInteractionDataOption> Remarks Note Not implemented for RestUserCommandData"
  },
  "api/Discord.Rest.RestUserGuild.html": {
    "href": "api/Discord.Rest.RestUserGuild.html",
    "title": "Class RestUserGuild | Discord.Net Documentation",
    "keywords": "Class RestUserGuild Namespace Discord.Rest Assembly Discord.Net.Rest.dll public class RestUserGuild : RestEntity<ulong>, IUserGuild, IDeletable, ISnowflakeEntity, IEntity<ulong> Inheritance object RestEntity<ulong> RestUserGuild Implements IUserGuild IDeletable ISnowflakeEntity IEntity<ulong> Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties ApproximateMemberCount Gets the approximate number of members in this guild. public int? ApproximateMemberCount { get; } Property Value int? Remarks Only available when getting a guild via REST when with_counts is true. ApproximatePresenceCount Gets the approximate number of non-offline members in this guild. public int? ApproximatePresenceCount { get; } Property Value int? Remarks Only available when getting a guild via REST when with_counts is true. CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. Features Gets the features for this guild. public GuildFeatures Features { get; } Property Value GuildFeatures A flags enum containing all the features for the guild. IconUrl Gets the icon URL associated with this guild, or null if one is not set. public string IconUrl { get; } Property Value string IsOwner Returns true if the current user owns this guild. public bool IsOwner { get; } Property Value bool Name Gets the name of this guild. public string Name { get; } Property Value string Permissions Returns the current user's permissions for this guild. public GuildPermissions Permissions { get; } Property Value GuildPermissions Methods DeleteAsync(RequestOptions) Deletes this object and all its children. public Task DeleteAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task GetCurrentUserGuildMemberAsync(RequestOptions) public Task<RestGuildUser> GetCurrentUserGuildMemberAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task<RestGuildUser> LeaveAsync(RequestOptions) public Task LeaveAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Discord.Rest.RestUserMessage.html": {
    "href": "api/Discord.Rest.RestUserMessage.html",
    "title": "Class RestUserMessage | Discord.Net Documentation",
    "keywords": "Class RestUserMessage Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based message sent by a user. public class RestUserMessage : RestMessage, IUpdateable, IUserMessage, IMessage, ISnowflakeEntity, IEntity<ulong>, IDeletable Inheritance object RestEntity<ulong> RestMessage RestUserMessage Implements IUpdateable IUserMessage IMessage ISnowflakeEntity IEntity<ulong> IDeletable Derived RestFollowupMessage RestInteractionMessage Inherited Members RestMessage.Channel RestMessage.Author RestMessage.Source RestMessage.Content RestMessage.CleanContent RestMessage.CreatedAt RestMessage.Thread RestMessage.Timestamp RestMessage.Activity RestMessage.Application RestMessage.Reference RestMessage.Interaction RestMessage.Flags RestMessage.Type RestMessage.RoleSubscriptionData RestMessage.Components RestMessage.MentionedUsers RestMessage.UpdateAsync(RequestOptions) RestMessage.DeleteAsync(RequestOptions) RestMessage.ToString() RestMessage.Reactions RestMessage.AddReactionAsync(IEmote, RequestOptions) RestMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions) RestMessage.RemoveReactionAsync(IEmote, ulong, RequestOptions) RestMessage.RemoveAllReactionsAsync(RequestOptions) RestMessage.RemoveAllReactionsForEmoteAsync(IEmote, RequestOptions) RestMessage.GetReactionUsersAsync(IEmote, int, RequestOptions, ReactionType) RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods MessageExtensions.GetJumpUrl(IMessage) MessageExtensions.HasCharPrefix(IUserMessage, char, ref int) MessageExtensions.HasMentionPrefix(IUserMessage, IUser, ref int) MessageExtensions.HasStringPrefix(IUserMessage, string, ref int, StringComparison) MessageExtensions.AddReactionsAsync(IUserMessage, IEnumerable<IEmote>, RequestOptions) MessageExtensions.RemoveReactionsAsync(IUserMessage, IUser, IEnumerable<IEmote>, RequestOptions) MessageExtensions.ReplyAsync(IUserMessage, string, bool, Embed, AllowedMentions, RequestOptions, MessageComponent, ISticker[], Embed[], MessageFlags) Properties Attachments Gets a collection of the Attachment's on the message. public override IReadOnlyCollection<Attachment> Attachments { get; } Property Value IReadOnlyCollection<Attachment> EditedTimestamp Gets the time of this message's last edit. public override DateTimeOffset? EditedTimestamp { get; } Property Value DateTimeOffset? Time of when the message was last edited; null if the message is never edited. Embeds Gets a collection of the Embed's on the message. public override IReadOnlyCollection<Embed> Embeds { get; } Property Value IReadOnlyCollection<Embed> IsPinned Gets the value that indicates whether this message is pinned. public override bool IsPinned { get; } Property Value bool true if this message was added to its channel's pinned messages; otherwise false. IsSuppressed Gets the value that indicates whether or not this message's embeds are suppressed. public override bool IsSuppressed { get; } Property Value bool true if the embeds in this message have been suppressed (made invisible); otherwise false. IsTTS Gets the value that indicates whether this message was meant to be read-aloud by Discord. public override bool IsTTS { get; } Property Value bool true if this message was sent as a text-to-speech message; otherwise false. MentionedChannelIds Gets the IDs of channels mentioned in this message. public override IReadOnlyCollection<ulong> MentionedChannelIds { get; } Property Value IReadOnlyCollection<ulong> A read-only collection of channel IDs. MentionedEveryone Gets the value that indicates whether this message mentioned everyone. public override bool MentionedEveryone { get; } Property Value bool true if this message mentioned everyone; otherwise false. MentionedRoleIds Gets the IDs of roles mentioned in this message. public override IReadOnlyCollection<ulong> MentionedRoleIds { get; } Property Value IReadOnlyCollection<ulong> A read-only collection of role IDs. ReferencedMessage Gets the referenced message if it is a crosspost, channel follow add, pin, or reply message. public IUserMessage ReferencedMessage { get; } Property Value IUserMessage The referenced message, if any is associated and still exists. ResolvedData Gets the resolved data if the message has components. null otherwise. public MessageResolvedData ResolvedData { get; } Property Value MessageResolvedData Stickers public override IReadOnlyCollection<StickerItem> Stickers { get; } Property Value IReadOnlyCollection<StickerItem> Tags Gets all tags included in this message's content. public override IReadOnlyCollection<ITag> Tags { get; } Property Value IReadOnlyCollection<ITag> Methods CrosspostAsync(RequestOptions) Publishes (crossposts) this message. public Task CrosspostAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for publishing this message. Remarks warning This call will throw an InvalidOperationException if attempted in a non-news channel. This method will publish (crosspost) the message. Please note, publishing (crossposting), is only available in news channels. Exceptions InvalidOperationException This operation may only be called on a INewsChannel channel. ModifyAsync(Action<MessageProperties>, RequestOptions) Modifies this message. public Task ModifyAsync(Action<MessageProperties> func, RequestOptions options = null) Parameters func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Examples The following example replaces the content of the message with Hello World!. await msg.ModifyAsync(x => x.Content = \"Hello World!\"); Remarks This method modifies this message with the specified properties. To see an example of this method and what properties are available, please refer to MessageProperties. PinAsync(RequestOptions) Adds this message to its channel's pinned messages. public Task PinAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for pinning this message. Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) Transforms this message's text into a human-readable form by resolving its tags. public string Resolve(TagHandling userHandling = TagHandling.Name, TagHandling channelHandling = TagHandling.Name, TagHandling roleHandling = TagHandling.Name, TagHandling everyoneHandling = TagHandling.Ignore, TagHandling emojiHandling = TagHandling.Name) Parameters userHandling TagHandling Determines how the user tag should be handled. channelHandling TagHandling Determines how the channel tag should be handled. roleHandling TagHandling Determines how the role tag should be handled. everyoneHandling TagHandling Determines how the @everyone tag should be handled. emojiHandling TagHandling Determines how the emoji tag should be handled. Returns string Resolve(int, TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) public string Resolve(int startIndex, TagHandling userHandling = TagHandling.Name, TagHandling channelHandling = TagHandling.Name, TagHandling roleHandling = TagHandling.Name, TagHandling everyoneHandling = TagHandling.Ignore, TagHandling emojiHandling = TagHandling.Name) Parameters startIndex int userHandling TagHandling channelHandling TagHandling roleHandling TagHandling everyoneHandling TagHandling emojiHandling TagHandling Returns string UnpinAsync(RequestOptions) Removes this message from its channel's pinned messages. public Task UnpinAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for unpinning this message."
  },
  "api/Discord.Rest.RestVoiceChannel.html": {
    "href": "api/Discord.Rest.RestVoiceChannel.html",
    "title": "Class RestVoiceChannel | Discord.Net Documentation",
    "keywords": "Class RestVoiceChannel Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based voice channel in a guild. public class RestVoiceChannel : RestTextChannel, IUpdateable, IRestMessageChannel, IVoiceChannel, ITextChannel, IMessageChannel, IMentionable, INestedChannel, IIntegrationChannel, IGuildChannel, IDeletable, IRestAudioChannel, IAudioChannel, IChannel, ISnowflakeEntity, IEntity<ulong> Inheritance object RestEntity<ulong> RestChannel RestGuildChannel RestTextChannel RestVoiceChannel Implements IUpdateable IRestMessageChannel IVoiceChannel ITextChannel IMessageChannel IMentionable INestedChannel IIntegrationChannel IGuildChannel IDeletable IRestAudioChannel IAudioChannel IChannel ISnowflakeEntity IEntity<ulong> Derived RestStageChannel Inherited Members RestTextChannel.Topic RestTextChannel.SlowModeInterval RestTextChannel.CategoryId RestTextChannel.Mention RestTextChannel.IsNsfw RestTextChannel.DefaultArchiveDuration RestTextChannel.DefaultSlowModeInterval RestTextChannel.ModifyAsync(Action<TextChannelProperties>, RequestOptions) RestTextChannel.GetUserAsync(ulong, RequestOptions) RestTextChannel.GetUsersAsync(RequestOptions) RestTextChannel.GetMessageAsync(ulong, RequestOptions) RestTextChannel.GetMessagesAsync(int, RequestOptions) RestTextChannel.GetMessagesAsync(ulong, Direction, int, RequestOptions) RestTextChannel.GetMessagesAsync(IMessage, Direction, int, RequestOptions) RestTextChannel.GetPinnedMessagesAsync(RequestOptions) RestTextChannel.SendMessageAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) RestTextChannel.SendFileAsync(string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) RestTextChannel.SendFileAsync(Stream, string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) RestTextChannel.SendFileAsync(FileAttachment, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) RestTextChannel.SendFilesAsync(IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) RestTextChannel.DeleteMessageAsync(ulong, RequestOptions) RestTextChannel.DeleteMessageAsync(IMessage, RequestOptions) RestTextChannel.DeleteMessagesAsync(IEnumerable<IMessage>, RequestOptions) RestTextChannel.DeleteMessagesAsync(IEnumerable<ulong>, RequestOptions) RestTextChannel.ModifyMessageAsync(ulong, Action<MessageProperties>, RequestOptions) RestTextChannel.TriggerTypingAsync(RequestOptions) RestTextChannel.EnterTypingState(RequestOptions) RestTextChannel.CreateWebhookAsync(string, Stream, RequestOptions) RestTextChannel.GetWebhookAsync(ulong, RequestOptions) RestTextChannel.GetWebhooksAsync(RequestOptions) RestTextChannel.GetCategoryAsync(RequestOptions) RestTextChannel.SyncPermissionsAsync(RequestOptions) RestTextChannel.CreateInviteAsync(int?, int?, bool, bool, RequestOptions) RestTextChannel.CreateInviteToApplicationAsync(ulong, int?, int?, bool, bool, RequestOptions) RestTextChannel.CreateInviteToApplicationAsync(DefaultApplications, int?, int?, bool, bool, RequestOptions) RestTextChannel.CreateInviteToStreamAsync(IUser, int?, int?, bool, bool, RequestOptions) RestTextChannel.GetInvitesAsync(RequestOptions) RestGuildChannel.PermissionOverwrites RestGuildChannel.Name RestGuildChannel.Position RestGuildChannel.GuildId RestGuildChannel.Flags RestGuildChannel.UpdateAsync(RequestOptions) RestGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions) RestGuildChannel.DeleteAsync(RequestOptions) RestGuildChannel.GetPermissionOverwrite(IUser) RestGuildChannel.GetPermissionOverwrite(IRole) RestGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions) RestGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions) RestGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) RestGuildChannel.ToString() RestChannel.CreatedAt RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties Bitrate Gets the bit-rate that the clients in this voice channel are requested to use. public int Bitrate { get; } Property Value int An int representing the bit-rate (bps) that this voice channel defines and requests the client(s) to use. IsTextInVoice Gets whether or not the guild has Text-In-Voice enabled and the voice channel is a TiV channel. [Obsolete(\"This property is no longer used because Discord enabled text-in-voice for all channels.\")] public virtual bool IsTextInVoice { get; } Property Value bool RTCRegion Gets the RTC region for this audio channel. public string RTCRegion { get; } Property Value string Remarks This property can be null. UserLimit Gets the max number of users allowed to be connected to this channel at once. public int? UserLimit { get; } Property Value int? An int representing the maximum number of users that are allowed to be connected to this channel at once; null if a limit is not set. VideoQualityMode Gets the video quality mode for this channel. public VideoQualityMode VideoQualityMode { get; } Property Value VideoQualityMode Methods CreateThreadAsync(string, ThreadType, ThreadArchiveDuration, IMessage, bool?, int?, RequestOptions) Creates a thread within this ITextChannel. public override Task<RestThreadChannel> CreateThreadAsync(string name, ThreadType type = ThreadType.PublicThread, ThreadArchiveDuration autoArchiveDuration = ThreadArchiveDuration.OneDay, IMessage message = null, bool? invitable = null, int? slowmode = null, RequestOptions options = null) Parameters name string The name of the thread. type ThreadType The type of the thread. Note: This parameter is not used if the message parameter is not specified. autoArchiveDuration ThreadArchiveDuration The duration on which this thread archives after. message IMessage The message which to start the thread from. invitable bool? slowmode int? options RequestOptions The options to be used when sending the request. Returns Task<RestThreadChannel> A task that represents the asynchronous create operation. The task result contains a IThreadChannel Remarks When message is null the thread type will be based off of the channel its created in. When called on a ITextChannel, it creates a PublicThread. When called on a INewsChannel, it creates a NewsThread. The id of the created thread will be the same as the id of the message, and as such a message can only have a single thread created from it. Exceptions InvalidOperationException Cannot create a thread within a voice channel. GetActiveThreadsAsync(RequestOptions) Gets a collection of active threads within this channel. public override Task<IReadOnlyCollection<RestThreadChannel>> GetActiveThreadsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestThreadChannel>> A task that represents an asynchronous get operation for retrieving the threads. The task result contains a collection of active threads. Exceptions NotSupportedException Threads are not supported in voice channels ModifyAsync(Action<VoiceChannelProperties>, RequestOptions) Modifies this voice channel. public Task ModifyAsync(Action<VoiceChannelProperties> func, RequestOptions options = null) Parameters func Action<VoiceChannelProperties> The properties to modify the channel with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. See Also VoiceChannelProperties SetStatusAsync(string, RequestOptions) Sets the voice channel status in the current channel. public virtual Task SetStatusAsync(string status, RequestOptions options = null) Parameters status string The string to set as status. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation."
  },
  "api/Discord.Rest.RestVoiceRegion.html": {
    "href": "api/Discord.Rest.RestVoiceRegion.html",
    "title": "Class RestVoiceRegion | Discord.Net Documentation",
    "keywords": "Class RestVoiceRegion Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a REST-based voice region. public class RestVoiceRegion : RestEntity<string>, IEntity<string>, IVoiceRegion Inheritance object RestEntity<string> RestVoiceRegion Implements IEntity<string> IVoiceRegion Inherited Members RestEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties IsCustom Gets a value that indicates whether this voice region is custom-made for events. public bool IsCustom { get; } Property Value bool true if this is a custom voice region (used for events/etc); otherwise false/ IsDeprecated Gets a value that indicates whether this voice region is no longer being maintained. public bool IsDeprecated { get; } Property Value bool true if this is a deprecated voice region; otherwise false. IsOptimal Gets a value that indicates whether this voice region is optimal for your client in terms of latency. public bool IsOptimal { get; } Property Value bool true if this voice region is the closest to your machine; otherwise false . IsVip Gets a value that indicates whether or not this voice region is exclusive to partnered servers. public bool IsVip { get; } Property Value bool true if this voice region is exclusive to VIP accounts; otherwise false. Name Gets the name of this voice region. public string Name { get; } Property Value string A string that represents the human-readable name of this voice region (e.g. Central Europe). Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Discord.Rest.RestWebhook.html": {
    "href": "api/Discord.Rest.RestWebhook.html",
    "title": "Class RestWebhook | Discord.Net Documentation",
    "keywords": "Class RestWebhook Namespace Discord.Rest Assembly Discord.Net.Rest.dll public class RestWebhook : RestEntity<ulong>, IWebhook, IDeletable, ISnowflakeEntity, IEntity<ulong>, IUpdateable Inheritance object RestEntity<ulong> RestWebhook Implements IWebhook IDeletable ISnowflakeEntity IEntity<ulong> IUpdateable Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties ApplicationId Gets the ID of the application owning this webhook. public ulong? ApplicationId { get; } Property Value ulong? AvatarId Gets the ID of this webhook's default avatar. public string AvatarId { get; } Property Value string ChannelId Gets the ID of the channel for this webhook; null for Application webhooks. public ulong? ChannelId { get; } Property Value ulong? CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. Creator Gets the user that created this webhook. public IUser Creator { get; } Property Value IUser FollowedChannelId Gets the id of the followed channel. null if Type is not ChannelFollower. public ulong? FollowedChannelId { get; } Property Value ulong? FollowedChannelName Gets the name of the followed channel. null if Type is not ChannelFollower. public string FollowedChannelName { get; } Property Value string GuildId Gets the ID of the guild owning this webhook. public ulong? GuildId { get; } Property Value ulong? Name Gets the default name of this webhook. public string Name { get; } Property Value string PartialGuild Gets the partial guild of the followed channel. null if Type is not ChannelFollower. public PartialGuild PartialGuild { get; } Property Value PartialGuild Token Gets the token of this webhook; null if the Type is ChannelFollower. public string Token { get; } Property Value string Type Gets the type of this webhook. public WebhookType Type { get; } Property Value WebhookType Methods DeleteAsync(RequestOptions) Deletes this object and all its children. public Task DeleteAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task GetAvatarUrl(ImageFormat, ushort) Gets the URL to this webhook's default avatar. public string GetAvatarUrl(ImageFormat format = ImageFormat.Auto, ushort size = 128) Parameters format ImageFormat size ushort Returns string ModifyAsync(Action<WebhookProperties>, RequestOptions) public Task ModifyAsync(Action<WebhookProperties> func, RequestOptions options = null) Parameters func Action<WebhookProperties> options RequestOptions Returns Task ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. UpdateAsync(RequestOptions) Updates this object's properties with its current state. public Task UpdateAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task"
  },
  "api/Discord.Rest.RestWebhookUser.html": {
    "href": "api/Discord.Rest.RestWebhookUser.html",
    "title": "Class RestWebhookUser | Discord.Net Documentation",
    "keywords": "Class RestWebhookUser Namespace Discord.Rest Assembly Discord.Net.Rest.dll public class RestWebhookUser : RestUser, IUpdateable, IWebhookUser, IGuildUser, IUser, ISnowflakeEntity, IEntity<ulong>, IMentionable, IPresence, IVoiceState Inheritance object RestEntity<ulong> RestUser RestWebhookUser Implements IUpdateable IWebhookUser IGuildUser IUser ISnowflakeEntity IEntity<ulong> IMentionable IPresence IVoiceState Inherited Members RestUser.IsBot RestUser.Username RestUser.DiscriminatorValue RestUser.AvatarId RestUser.BannerId RestUser.AccentColor RestUser.PublicFlags RestUser.GlobalName RestUser.CreatedAt RestUser.Discriminator RestUser.Mention RestUser.Activity RestUser.Status RestUser.ActiveClients RestUser.Activities RestUser.AvatarDecorationHash RestUser.AvatarDecorationSkuId RestUser.UpdateAsync(RequestOptions) RestUser.CreateDMChannelAsync(RequestOptions) RestUser.GetAvatarUrl(ImageFormat, ushort) RestUser.GetBannerUrl(ImageFormat, ushort) RestUser.GetDefaultAvatarUrl() RestUser.GetDisplayAvatarUrl(ImageFormat, ushort) RestUser.GetAvatarDecorationUrl() RestUser.ToString() RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods UserExtensions.BanAsync(IGuildUser, int, string, RequestOptions) UserExtensions.SendFileAsync(IUser, FileAttachment, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, Stream, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFilesAsync(IUser, IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendMessageAsync(IUser, string, bool, Embed, RequestOptions, AllowedMentions, MessageComponent, Embed[]) Properties GuildId Gets the ID of the guild for this user. public ulong GuildId { get; } Property Value ulong An ulong representing the snowflake identifier of the guild that this user belongs to. IsWebhook Gets a value that indicates whether this user is a webhook user. public override bool IsWebhook { get; } Property Value bool true if the user is a webhook; otherwise false. PremiumSince Gets the date and time for when this user's guild boost began. public DateTimeOffset? PremiumSince { get; } Property Value DateTimeOffset? A DateTimeOffset for when the user began boosting this guild; null if they are not boosting the guild. WebhookId Gets the ID of a webhook. public ulong WebhookId { get; } Property Value ulong"
  },
  "api/Discord.Rest.RoleCreateAuditLogData.html": {
    "href": "api/Discord.Rest.RoleCreateAuditLogData.html",
    "title": "Class RoleCreateAuditLogData | Discord.Net Documentation",
    "keywords": "Class RoleCreateAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a role creation. public class RoleCreateAuditLogData : IAuditLogData Inheritance object RoleCreateAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Properties Gets the role information that was created. public RoleEditInfo Properties { get; } Property Value RoleEditInfo RoleId Gets the ID of the role that was created. public ulong RoleId { get; } Property Value ulong"
  },
  "api/Discord.Rest.RoleDeleteAuditLogData.html": {
    "href": "api/Discord.Rest.RoleDeleteAuditLogData.html",
    "title": "Class RoleDeleteAuditLogData | Discord.Net Documentation",
    "keywords": "Class RoleDeleteAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data relating to a role deletion. public class RoleDeleteAuditLogData : IAuditLogData Inheritance object RoleDeleteAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Properties Gets the role information that was deleted. public RoleEditInfo Properties { get; } Property Value RoleEditInfo RoleId Gets the ID of the role that was deleted. public ulong RoleId { get; } Property Value ulong"
  },
  "api/Discord.Rest.RoleEditInfo.html": {
    "href": "api/Discord.Rest.RoleEditInfo.html",
    "title": "Struct RoleEditInfo | Discord.Net Documentation",
    "keywords": "Struct RoleEditInfo Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents information for a role edit. public struct RoleEditInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Color Gets the color of this role. public readonly Color? Color { get; } Property Value Color? A color object representing the color assigned to this role; null if this role does not have a color. Hoist Gets a value that indicates whether this role is hoisted (i.e. its members will appear in a separate section on the user list). public readonly bool? Hoist { get; } Property Value bool? true if this role's members will appear in a separate section in the user list; otherwise false; null if this is not mentioned in this entry. IconId Gets the icon of this role. public readonly string IconId { get; } Property Value string A string containing the hash of this role's icon. Remarks null if the value was not updated in this entry. Mentionable Gets a value that indicates whether this role is mentionable. public readonly bool? Mentionable { get; } Property Value bool? true if other members can mention this role in a text channel; otherwise false; null if this is not mentioned in this entry. Name Gets the name of this role. public readonly string Name { get; } Property Value string A string containing the name of this role. Permissions Gets the permissions assigned to this role. public readonly GuildPermissions? Permissions { get; } Property Value GuildPermissions? A guild permissions object representing the permissions that have been assigned to this role; null if no permissions have been assigned."
  },
  "api/Discord.Rest.RoleUpdateAuditLogData.html": {
    "href": "api/Discord.Rest.RoleUpdateAuditLogData.html",
    "title": "Class RoleUpdateAuditLogData | Discord.Net Documentation",
    "keywords": "Class RoleUpdateAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a role update. public class RoleUpdateAuditLogData : IAuditLogData Inheritance object RoleUpdateAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After Gets the role information after the changes. public RoleEditInfo After { get; } Property Value RoleEditInfo A role information object containing the role information after the changes were made. Before Gets the role information before the changes. public RoleEditInfo Before { get; } Property Value RoleEditInfo A role information object containing the role information before the changes were made. RoleId Gets the ID of the role that was changed. public ulong RoleId { get; } Property Value ulong A ulong representing the snowflake identifier of the role that was changed."
  },
  "api/Discord.Rest.ScheduledEventCreateAuditLogData.html": {
    "href": "api/Discord.Rest.ScheduledEventCreateAuditLogData.html",
    "title": "Class ScheduledEventCreateAuditLogData | Discord.Net Documentation",
    "keywords": "Class ScheduledEventCreateAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a scheduled event creation. public class ScheduledEventCreateAuditLogData : IAuditLogData Inheritance object ScheduledEventCreateAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Gets the snowflake id of the channel the event is associated with. public ulong? ChannelId { get; } Property Value ulong? Description Gets the description of the event. null if none is set. public string Description { get; } Property Value string EntityId Gets the snowflake id of the entity associated with the event (stage / void / external). public ulong? EntityId { get; } Property Value ulong? EntityType Gets the type of the entity associated with the event (stage / void / external). public GuildScheduledEventType EntityType { get; } Property Value GuildScheduledEventType Id Gets the snowflake id of the event. public ulong Id { get; } Property Value ulong Image Gets the image hash of the image that was attached to the event. Null if not set. public string Image { get; } Property Value string Location Gets the metadata for the entity associated with the event. public string Location { get; } Property Value string Name Gets name of the event. public string Name { get; } Property Value string PrivacyLevel Gets the privacy level of the event. public GuildScheduledEventPrivacyLevel PrivacyLevel { get; } Property Value GuildScheduledEventPrivacyLevel ScheduledEndTime Gets the time the event was scheduled to end. public DateTimeOffset? ScheduledEndTime { get; } Property Value DateTimeOffset? ScheduledEvent Gets the scheduled event this log corresponds to. public IGuildScheduledEvent ScheduledEvent { get; } Property Value IGuildScheduledEvent ScheduledStartTime Gets the time the event was scheduled for. public DateTimeOffset? ScheduledStartTime { get; } Property Value DateTimeOffset? Status Gets the status of the event. public GuildScheduledEventStatus Status { get; } Property Value GuildScheduledEventStatus"
  },
  "api/Discord.Rest.ScheduledEventDeleteAuditLogData.html": {
    "href": "api/Discord.Rest.ScheduledEventDeleteAuditLogData.html",
    "title": "Class ScheduledEventDeleteAuditLogData | Discord.Net Documentation",
    "keywords": "Class ScheduledEventDeleteAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a scheduled event deletion. public class ScheduledEventDeleteAuditLogData : IAuditLogData Inheritance object ScheduledEventDeleteAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Gets the snowflake id of the channel the event is associated with. public ulong? ChannelId { get; } Property Value ulong? Description Gets the description of the event. null if none is set. public string Description { get; } Property Value string EntityId Gets the snowflake id of the entity associated with the event (stage / void / external). public ulong? EntityId { get; } Property Value ulong? EntityType Gets the type of the entity associated with the event (stage / void / external). public GuildScheduledEventType? EntityType { get; } Property Value GuildScheduledEventType? Id Gets the snowflake id of the event. public ulong Id { get; } Property Value ulong Image Gets the image hash of the image that was attached to the event. Null if not set. public string Image { get; } Property Value string Location Gets the metadata for the entity associated with the event. public string Location { get; } Property Value string Name Gets name of the event. public string Name { get; } Property Value string PrivacyLevel Gets the privacy level of the event. public GuildScheduledEventPrivacyLevel? PrivacyLevel { get; } Property Value GuildScheduledEventPrivacyLevel? ScheduledEndTime Gets the time the event was scheduled to end. public DateTimeOffset? ScheduledEndTime { get; } Property Value DateTimeOffset? ScheduledStartTime Gets the time the event was scheduled for. public DateTimeOffset? ScheduledStartTime { get; } Property Value DateTimeOffset? Status Gets the status of the event. public GuildScheduledEventStatus? Status { get; } Property Value GuildScheduledEventStatus?"
  },
  "api/Discord.Rest.ScheduledEventInfo.html": {
    "href": "api/Discord.Rest.ScheduledEventInfo.html",
    "title": "Class ScheduledEventInfo | Discord.Net Documentation",
    "keywords": "Class ScheduledEventInfo Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents information for a scheduled event. public class ScheduledEventInfo Inheritance object ScheduledEventInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Gets the snowflake id of the channel the event is associated with. public ulong? ChannelId { get; } Property Value ulong? Description Gets the description of the event. null if none is set. public string Description { get; } Property Value string EntityId Gets the snowflake id of the entity associated with the event (stage / void / external). public ulong? EntityId { get; } Property Value ulong? EntityType Gets the type of the entity associated with the event (stage / void / external). public GuildScheduledEventType? EntityType { get; } Property Value GuildScheduledEventType? Image Gets the image hash of the image that was attached to the event. Null if not set. public string Image { get; } Property Value string Location Gets the metadata for the entity associated with the event. public string Location { get; } Property Value string Name Gets name of the event. public string Name { get; } Property Value string PrivacyLevel Gets the privacy level of the event. public GuildScheduledEventPrivacyLevel? PrivacyLevel { get; } Property Value GuildScheduledEventPrivacyLevel? ScheduledEndTime Gets the time the event was scheduled to end. public DateTimeOffset? ScheduledEndTime { get; } Property Value DateTimeOffset? ScheduledStartTime Gets the time the event was scheduled for. public DateTimeOffset? ScheduledStartTime { get; } Property Value DateTimeOffset? Status Gets the status of the event. public GuildScheduledEventStatus? Status { get; } Property Value GuildScheduledEventStatus?"
  },
  "api/Discord.Rest.ScheduledEventUpdateAuditLogData.html": {
    "href": "api/Discord.Rest.ScheduledEventUpdateAuditLogData.html",
    "title": "Class ScheduledEventUpdateAuditLogData | Discord.Net Documentation",
    "keywords": "Class ScheduledEventUpdateAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a scheduled event updates. public class ScheduledEventUpdateAuditLogData : IAuditLogData Inheritance object ScheduledEventUpdateAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After Gets the state after the change. public ScheduledEventInfo After { get; } Property Value ScheduledEventInfo Before Gets the state before the change. public ScheduledEventInfo Before { get; } Property Value ScheduledEventInfo Id Gets the snowflake id of the event. public ulong Id { get; } Property Value ulong ScheduledEvent Gets the scheduled event this log corresponds to. public IGuildScheduledEvent ScheduledEvent { get; } Property Value IGuildScheduledEvent"
  },
  "api/Discord.Rest.StageInfo.html": {
    "href": "api/Discord.Rest.StageInfo.html",
    "title": "Class StageInfo | Discord.Net Documentation",
    "keywords": "Class StageInfo Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents information for a stage. public class StageInfo Inheritance object StageInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties PrivacyLevel Gets the privacy level of the stage channel. public StagePrivacyLevel? PrivacyLevel { get; } Property Value StagePrivacyLevel? Topic Gets the topic of the stage channel. public string Topic { get; } Property Value string User Gets the user who started the stage channel. public IUser User { get; } Property Value IUser"
  },
  "api/Discord.Rest.StageInstanceCreateAuditLogData.html": {
    "href": "api/Discord.Rest.StageInstanceCreateAuditLogData.html",
    "title": "Class StageInstanceCreateAuditLogData | Discord.Net Documentation",
    "keywords": "Class StageInstanceCreateAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a stage going live. public class StageInstanceCreateAuditLogData : IAuditLogData Inheritance object StageInstanceCreateAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties PrivacyLevel Gets the privacy level of the stage channel. public StagePrivacyLevel PrivacyLevel { get; } Property Value StagePrivacyLevel StageChannelId Gets the Id of the stage channel. public ulong StageChannelId { get; } Property Value ulong Topic Gets the topic of the stage channel. public string Topic { get; } Property Value string User Gets the user who started the stage channel. public IUser User { get; } Property Value IUser"
  },
  "api/Discord.Rest.StageInstanceDeleteAuditLogData.html": {
    "href": "api/Discord.Rest.StageInstanceDeleteAuditLogData.html",
    "title": "Class StageInstanceDeleteAuditLogData | Discord.Net Documentation",
    "keywords": "Class StageInstanceDeleteAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a stage instance deleted. public class StageInstanceDeleteAuditLogData : IAuditLogData Inheritance object StageInstanceDeleteAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties PrivacyLevel Gets the privacy level of the stage channel. public StagePrivacyLevel PrivacyLevel { get; } Property Value StagePrivacyLevel StageChannelId Gets the Id of the stage channel. public ulong StageChannelId { get; } Property Value ulong Topic Gets the topic of the stage channel. public string Topic { get; } Property Value string User Gets the user who started the stage channel. public IUser User { get; } Property Value IUser"
  },
  "api/Discord.Rest.StageInstanceUpdatedAuditLogData.html": {
    "href": "api/Discord.Rest.StageInstanceUpdatedAuditLogData.html",
    "title": "Class StageInstanceUpdatedAuditLogData | Discord.Net Documentation",
    "keywords": "Class StageInstanceUpdatedAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a stage instance update. public class StageInstanceUpdatedAuditLogData : IAuditLogData Inheritance object StageInstanceUpdatedAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After Gets the stage information after the changes. public StageInfo After { get; } Property Value StageInfo Before Gets the stage information before the changes. public StageInfo Before { get; } Property Value StageInfo StageChannelId Gets the Id of the stage channel. public ulong StageChannelId { get; } Property Value ulong"
  },
  "api/Discord.Rest.Sticker.html": {
    "href": "api/Discord.Rest.Sticker.html",
    "title": "Class Sticker | Discord.Net Documentation",
    "keywords": "Class Sticker Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a discord sticker. public class Sticker : RestEntity<ulong>, IEntity<ulong>, ISticker, IStickerItem Inheritance object RestEntity<ulong> Sticker Implements IEntity<ulong> ISticker IStickerItem Derived CustomSticker Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description Gets the description of this sticker. public string Description { get; protected set; } Property Value string A string with the description of this sticker. Format Gets the format type of this sticker. public StickerFormatType Format { get; protected set; } Property Value StickerFormatType A StickerFormatType with the format type of this sticker. IsAvailable Gets whether this guild sticker can be used, may be false due to loss of Server Boosts. public bool? IsAvailable { get; protected set; } Property Value bool? Name Gets the name of this sticker. public string Name { get; protected set; } Property Value string A string with the name of this sticker. PackId Gets the ID of the pack of this sticker. public ulong PackId { get; protected set; } Property Value ulong A snowflake ID associated with the pack of this sticker. SortOrder Gets the standard sticker's sort order within its pack. public int? SortOrder { get; protected set; } Property Value int? Tags Gets the list of tags of this sticker. public IReadOnlyCollection<string> Tags { get; protected set; } Property Value IReadOnlyCollection<string> A read-only list with the tags of this sticker. Type Gets the type of this sticker. public StickerType Type { get; protected set; } Property Value StickerType Methods GetStickerUrl() Gets the image url for this sticker. public string GetStickerUrl() Returns string"
  },
  "api/Discord.Rest.StickerCreatedAuditLogData.html": {
    "href": "api/Discord.Rest.StickerCreatedAuditLogData.html",
    "title": "Class StickerCreatedAuditLogData | Discord.Net Documentation",
    "keywords": "Class StickerCreatedAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a sticker creation. public class StickerCreatedAuditLogData : IAuditLogData Inheritance object StickerCreatedAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data Gets the sticker information after the changes. public StickerInfo Data { get; } Property Value StickerInfo"
  },
  "api/Discord.Rest.StickerDeletedAuditLogData.html": {
    "href": "api/Discord.Rest.StickerDeletedAuditLogData.html",
    "title": "Class StickerDeletedAuditLogData | Discord.Net Documentation",
    "keywords": "Class StickerDeletedAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a sticker removal. public class StickerDeletedAuditLogData : IAuditLogData Inheritance object StickerDeletedAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data Gets the sticker information before the changes. public StickerInfo Data { get; } Property Value StickerInfo"
  },
  "api/Discord.Rest.StickerInfo.html": {
    "href": "api/Discord.Rest.StickerInfo.html",
    "title": "Class StickerInfo | Discord.Net Documentation",
    "keywords": "Class StickerInfo Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents information for a guild. public class StickerInfo Inheritance object StickerInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description Gets the description of the sticker. null if the value was not updated in this entry. public string Description { get; set; } Property Value string Name Gets the name of the sticker. null if the value was not updated in this entry. public string Name { get; set; } Property Value string Tags Gets tags of the sticker. null if the value was not updated in this entry. public string Tags { get; set; } Property Value string"
  },
  "api/Discord.Rest.StickerItem.html": {
    "href": "api/Discord.Rest.StickerItem.html",
    "title": "Class StickerItem | Discord.Net Documentation",
    "keywords": "Class StickerItem Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents a partial sticker received in a message. public class StickerItem : RestEntity<ulong>, IEntity<ulong>, IStickerItem Inheritance object RestEntity<ulong> StickerItem Implements IEntity<ulong> IStickerItem Inherited Members RestEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Format The format of the sticker. public StickerFormatType Format { get; } Property Value StickerFormatType Name The name of the sticker. public string Name { get; } Property Value string Methods ResolveStickerAsync() Resolves this sticker item by fetching the Sticker from the API. public Task<Sticker> ResolveStickerAsync() Returns Task<Sticker> A task representing the download operation, the result of the task is a sticker object."
  },
  "api/Discord.Rest.StickerUpdatedAuditLogData.html": {
    "href": "api/Discord.Rest.StickerUpdatedAuditLogData.html",
    "title": "Class StickerUpdatedAuditLogData | Discord.Net Documentation",
    "keywords": "Class StickerUpdatedAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a sticker update. public class StickerUpdatedAuditLogData : IAuditLogData Inheritance object StickerUpdatedAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After Gets the sticker information after the changes. public StickerInfo After { get; } Property Value StickerInfo Before Gets the sticker information before the changes. public StickerInfo Before { get; } Property Value StickerInfo"
  },
  "api/Discord.Rest.StringExtensions.html": {
    "href": "api/Discord.Rest.StringExtensions.html",
    "title": "Class StringExtensions | Discord.Net Documentation",
    "keywords": "Class StringExtensions Namespace Discord.Rest Assembly Discord.Net.Rest.dll Responsible for formatting certain entities as Json string, to reuse later on. public static class StringExtensions Inheritance object StringExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToJsonString(Embed, Formatting) Gets a Json formatted string from an Embed. public static string ToJsonString(this Embed embed, Formatting formatting = Formatting.Indented) Parameters embed Embed The embed to format as Json string. formatting Formatting The formatting in which the Json will be returned. Returns string A Json string containing the data from the embed. Remarks See TryParse(string, out EmbedBuilder) to parse Json back into embed. ToJsonString(EmbedBuilder, Formatting) Gets a Json formatted string from an EmbedBuilder. public static string ToJsonString(this EmbedBuilder builder, Formatting formatting = Formatting.Indented) Parameters builder EmbedBuilder The builder to format as Json string. formatting Formatting The formatting in which the Json will be returned. Returns string A Json string containing the data from the builder. Remarks See TryParse(string, out EmbedBuilder) to parse Json back into embed."
  },
  "api/Discord.Rest.ThreadCreateAuditLogData.html": {
    "href": "api/Discord.Rest.ThreadCreateAuditLogData.html",
    "title": "Class ThreadCreateAuditLogData | Discord.Net Documentation",
    "keywords": "Class ThreadCreateAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a thread creation. public class ThreadCreateAuditLogData : IAuditLogData Inheritance object ThreadCreateAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AppliedTags Gets the applied tags of this thread. public IReadOnlyCollection<ulong> AppliedTags { get; } Property Value IReadOnlyCollection<ulong> Remarks null if the property was not updated. AutoArchiveDuration Gets the auto archive duration of the thread. public ThreadArchiveDuration AutoArchiveDuration { get; } Property Value ThreadArchiveDuration The thread auto archive duration of the thread. Flags Gets the flags of the thread channel. public ChannelFlags? Flags { get; } Property Value ChannelFlags? Remarks null if the property was not updated. IsArchived Gets the value that indicates whether the thread is archived. public bool IsArchived { get; } Property Value bool true if this thread has the Archived flag enabled; otherwise false. IsLocked Gets the value that indicates whether the thread is locked. public bool IsLocked { get; } Property Value bool true if this thread has the Locked flag enabled; otherwise false. SlowModeInterval Gets the slow-mode delay of the thread. public int? SlowModeInterval { get; } Property Value int? An int representing the time in seconds required before the user can send another message; 0 if disabled. null if this is not mentioned in this entry. Thread Gets the thread that was created if it still exists. public IThreadChannel Thread { get; } Property Value IThreadChannel A thread object representing the thread that was created if it still exists, otherwise returns null. ThreadId Gets the snowflake ID of the thread. public ulong ThreadId { get; } Property Value ulong A ulong representing the snowflake identifier for the thread. ThreadName Gets the name of the thread. public string ThreadName { get; } Property Value string A string containing the name of the thread. ThreadType Gets the type of the thread. public ThreadType ThreadType { get; } Property Value ThreadType The type of thread."
  },
  "api/Discord.Rest.ThreadDeleteAuditLogData.html": {
    "href": "api/Discord.Rest.ThreadDeleteAuditLogData.html",
    "title": "Class ThreadDeleteAuditLogData | Discord.Net Documentation",
    "keywords": "Class ThreadDeleteAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a thread deletion. public class ThreadDeleteAuditLogData : IAuditLogData Inheritance object ThreadDeleteAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AppliedTags Gets the applied tags of this thread. public IReadOnlyCollection<ulong> AppliedTags { get; } Property Value IReadOnlyCollection<ulong> Remarks null if this is not mentioned in this entry. AutoArchiveDuration Gets the thread auto archive duration of the deleted thread. public ThreadArchiveDuration AutoArchiveDuration { get; } Property Value ThreadArchiveDuration The thread auto archive duration of the thread that was deleted. Flags Gets the flags of the thread channel. public ChannelFlags? Flags { get; } Property Value ChannelFlags? Remarks null if this is not mentioned in this entry. IsArchived Gets the value that indicates whether the deleted thread was archived. public bool IsArchived { get; } Property Value bool true if this thread had the Archived flag enabled; otherwise false. IsLocked Gets the value that indicates whether the deleted thread was locked. public bool IsLocked { get; } Property Value bool true if this thread had the Locked flag enabled; otherwise false. SlowModeInterval Gets the slow-mode delay of the deleted thread. public int? SlowModeInterval { get; } Property Value int? An int representing the time in seconds required before the user can send another message; 0 if disabled. null if this is not mentioned in this entry. ThreadId Gets the snowflake ID of the deleted thread. public ulong ThreadId { get; } Property Value ulong A ulong representing the snowflake identifier for the deleted thread. ThreadName Gets the name of the deleted thread. public string ThreadName { get; } Property Value string A string containing the name of the deleted thread. ThreadType Gets the type of the deleted thread. public ThreadType ThreadType { get; } Property Value ThreadType The type of thread that was deleted."
  },
  "api/Discord.Rest.ThreadInfo.html": {
    "href": "api/Discord.Rest.ThreadInfo.html",
    "title": "Class ThreadInfo | Discord.Net Documentation",
    "keywords": "Class ThreadInfo Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents information for a thread. public class ThreadInfo Inheritance object ThreadInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AppliedTags Gets the applied tags of this thread. public IReadOnlyCollection<ulong> AppliedTags { get; } Property Value IReadOnlyCollection<ulong> Remarks null if the property was not updated. AutoArchiveDuration Gets the auto archive duration of thread. public ThreadArchiveDuration? AutoArchiveDuration { get; } Property Value ThreadArchiveDuration? Remarks null if the property was not updated. Flags Gets the flags of the thread channel. public ChannelFlags? Flags { get; } Property Value ChannelFlags? Remarks null if the property was not updated. IsArchived Gets the value that indicates whether the thread is archived. public bool? IsArchived { get; } Property Value bool? Remarks null if the property was not updated. IsLocked Gets the value that indicates whether the thread is locked. public bool? IsLocked { get; } Property Value bool? Remarks null if the property was not updated. Name Gets the name of the thread. public string Name { get; } Property Value string SlowModeInterval Gets the slow-mode delay of the thread. public int? SlowModeInterval { get; } Property Value int? Remarks null if the property was not updated. Type Gets the type of the thread. public ThreadType Type { get; } Property Value ThreadType Remarks null if the property was not updated."
  },
  "api/Discord.Rest.ThreadUpdateAuditLogData.html": {
    "href": "api/Discord.Rest.ThreadUpdateAuditLogData.html",
    "title": "Class ThreadUpdateAuditLogData | Discord.Net Documentation",
    "keywords": "Class ThreadUpdateAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a thread update. public class ThreadUpdateAuditLogData : IAuditLogData Inheritance object ThreadUpdateAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After Gets the thread information after the changes. public ThreadInfo After { get; } Property Value ThreadInfo A thread information object representing the thread after the changes were made. Before Gets the thread information before the changes. public ThreadInfo Before { get; } Property Value ThreadInfo A thread information object representing the thread before the changes were made. Thread Gets the thread that was created if it still exists. public IThreadChannel Thread { get; } Property Value IThreadChannel A thread object representing the thread that was created if it still exists, otherwise returns null. ThreadType Gets the type of the thread. public ThreadType ThreadType { get; } Property Value ThreadType The type of thread."
  },
  "api/Discord.Rest.UnbanAuditLogData.html": {
    "href": "api/Discord.Rest.UnbanAuditLogData.html",
    "title": "Class UnbanAuditLogData | Discord.Net Documentation",
    "keywords": "Class UnbanAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to an unban. public class UnbanAuditLogData : IAuditLogData Inheritance object UnbanAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Target Gets the user that was unbanned. public IUser Target { get; } Property Value IUser A user object representing the user that was unbanned."
  },
  "api/Discord.Rest.VoiceChannelStatusDeletedAuditLogData.html": {
    "href": "api/Discord.Rest.VoiceChannelStatusDeletedAuditLogData.html",
    "title": "Class VoiceChannelStatusDeletedAuditLogData | Discord.Net Documentation",
    "keywords": "Class VoiceChannelStatusDeletedAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a voice channel status delete. public class VoiceChannelStatusDeletedAuditLogData : IAuditLogData Inheritance object VoiceChannelStatusDeletedAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Get the id of the channel status was removed in. public ulong ChannelId { get; } Property Value ulong"
  },
  "api/Discord.Rest.VoiceChannelStatusUpdateAuditLogData.html": {
    "href": "api/Discord.Rest.VoiceChannelStatusUpdateAuditLogData.html",
    "title": "Class VoiceChannelStatusUpdateAuditLogData | Discord.Net Documentation",
    "keywords": "Class VoiceChannelStatusUpdateAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a voice channel status update. public class VoiceChannelStatusUpdateAuditLogData : IAuditLogData Inheritance object VoiceChannelStatusUpdateAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Get the id of the channel status was updated in. public ulong ChannelId { get; } Property Value ulong Status Gets the status that was set in the voice channel. public string Status { get; } Property Value string"
  },
  "api/Discord.Rest.WebhookCreateAuditLogData.html": {
    "href": "api/Discord.Rest.WebhookCreateAuditLogData.html",
    "title": "Class WebhookCreateAuditLogData | Discord.Net Documentation",
    "keywords": "Class WebhookCreateAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a webhook creation. public class WebhookCreateAuditLogData : IAuditLogData Inheritance object WebhookCreateAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Avatar Gets the hash value of the webhook's avatar. public string Avatar { get; } Property Value string A string containing the hash of the webhook's avatar. ChannelId Gets the ID of the channel that the webhook could send to. public ulong ChannelId { get; } Property Value ulong A ulong representing the snowflake identifier of the channel that the webhook could send to. Name Gets the name of the webhook. public string Name { get; } Property Value string A string containing the name of the webhook. Type Gets the type of webhook that was created. public WebhookType Type { get; } Property Value WebhookType The type of webhook that was created. Webhook Gets the webhook that was created if it still exists. public IWebhook Webhook { get; } Property Value IWebhook A webhook object representing the webhook that was created if it still exists, otherwise returns null. WebhookId Gets the webhook id. public ulong WebhookId { get; } Property Value ulong The webhook identifier."
  },
  "api/Discord.Rest.WebhookDeleteAuditLogData.html": {
    "href": "api/Discord.Rest.WebhookDeleteAuditLogData.html",
    "title": "Class WebhookDeleteAuditLogData | Discord.Net Documentation",
    "keywords": "Class WebhookDeleteAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a webhook deletion. public class WebhookDeleteAuditLogData : IAuditLogData Inheritance object WebhookDeleteAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Avatar Gets the hash value of the webhook's avatar. public string Avatar { get; } Property Value string A string containing the hash of the webhook's avatar. ChannelId Gets the ID of the channel that the webhook could send to. public ulong ChannelId { get; } Property Value ulong A ulong representing the snowflake identifier of the channel that the webhook could send to. Name Gets the name of the webhook that was deleted. public string Name { get; } Property Value string A string containing the name of the webhook that was deleted. Type Gets the type of the webhook that was deleted. public WebhookType Type { get; } Property Value WebhookType The type of webhook that was deleted. WebhookId Gets the ID of the webhook that was deleted. public ulong WebhookId { get; } Property Value ulong A ulong representing the snowflake identifier of the webhook that was deleted."
  },
  "api/Discord.Rest.WebhookInfo.html": {
    "href": "api/Discord.Rest.WebhookInfo.html",
    "title": "Struct WebhookInfo | Discord.Net Documentation",
    "keywords": "Struct WebhookInfo Namespace Discord.Rest Assembly Discord.Net.Rest.dll Represents information for a webhook. public struct WebhookInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Avatar Gets the hash value of this webhook's avatar. public readonly string Avatar { get; } Property Value string A string containing the hash of this webhook's avatar. ChannelId Gets the ID of the channel that this webhook sends to. public readonly ulong? ChannelId { get; } Property Value ulong? A ulong representing the snowflake identifier of the channel that this webhook can send to. Name Gets the name of this webhook. public readonly string Name { get; } Property Value string A string containing the name of this webhook."
  },
  "api/Discord.Rest.WebhookUpdateAuditLogData.html": {
    "href": "api/Discord.Rest.WebhookUpdateAuditLogData.html",
    "title": "Class WebhookUpdateAuditLogData | Discord.Net Documentation",
    "keywords": "Class WebhookUpdateAuditLogData Namespace Discord.Rest Assembly Discord.Net.Rest.dll Contains a piece of audit log data related to a webhook update. public class WebhookUpdateAuditLogData : IAuditLogData Inheritance object WebhookUpdateAuditLogData Implements IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After Gets the webhook information after the changes. public WebhookInfo After { get; } Property Value WebhookInfo A webhook information object representing the webhook after the changes were made. Before Gets the webhook information before the changes. public WebhookInfo Before { get; } Property Value WebhookInfo A webhook information object representing the webhook before the changes were made. Webhook Gets the webhook that was updated. public IWebhook Webhook { get; } Property Value IWebhook A webhook object representing the webhook that was updated."
  },
  "api/Discord.Rest.html": {
    "href": "api/Discord.Rest.html",
    "title": "Namespace Discord.Rest | Discord.Net Documentation",
    "keywords": "Namespace Discord.Rest Classes AutoModBlockedMessageAuditLogData Contains a piece of audit log data related to message getting blocked by automod. AutoModFlaggedMessageAuditLogData Contains a piece of audit log data related to message getting flagged by automod. AutoModRuleCreatedAuditLogData Contains a piece of audit log data related to an auto moderation rule creation. AutoModRuleDeletedAuditLogData Contains a piece of audit log data related to an auto moderation rule removal. AutoModRuleInfo Represents information for an auto moderation rule. AutoModRuleUpdatedAuditLogData Contains a piece of audit log data related to an auto moderation rule update. AutoModTimeoutUserAuditLogData Contains a piece of audit log data related to user getting in timeout by automod. BadSignatureException BanAuditLogData Contains a piece of audit log data related to a ban. BaseDiscordClient BotAddAuditLogData Contains a piece of audit log data related to a adding a bot to a guild. ChannelCreateAuditLogData Contains a piece of audit log data related to a channel creation. ChannelDeleteAuditLogData Contains a piece of audit log data related to a channel deletion. ChannelUpdateAuditLogData Contains a piece of audit log data related to a channel update. ClientExtensions CommandPermissionUpdateAuditLogData Contains a piece of audit log data related to an application command permission update. CustomSticker Represents a Rest-based custom sticker within a guild. DiscordRestClient Provides a client to send REST-based requests to Discord. DiscordRestConfig Represents a configuration class for DiscordRestClient. EmbedBuilderUtils EmoteCreateAuditLogData Contains a piece of audit log data related to an emoji creation. EmoteDeleteAuditLogData Contains a piece of audit log data related to an emoji deletion. EmoteUpdateAuditLogData Contains a piece of audit log data related to an emoji update. GuildUpdateAuditLogData Contains a piece of audit log data related to a guild update. IntegrationCreatedAuditLogData Contains a piece of audit log data related to an integration authorization. IntegrationDeletedAuditLogData Contains a piece of audit log data related to an integration removal. IntegrationInfo Represents information for an integration. IntegrationUpdatedAuditLogData Contains a piece of audit log data related to an integration update. InviteCreateAuditLogData Contains a piece of audit log data related to an invite creation. InviteDeleteAuditLogData Contains a piece of audit log data related to an invite removal. InviteUpdateAuditLogData Contains a piece of audit log data relating to an invite update. KickAuditLogData Contains a piece of audit log data related to a kick. MemberDisconnectAuditLogData Contains a piece of audit log data related to disconnecting members from voice channels. MemberMoveAuditLogData Contains a piece of audit log data related to moving members between voice channels. MemberRoleAuditLogData Contains a piece of audit log data related to a change in a guild member's roles. MemberUpdateAuditLogData Contains a piece of audit log data related to a change in a guild member. MessageBulkDeleteAuditLogData Contains a piece of audit log data related to message deletion(s). MessageDeleteAuditLogData Contains a piece of audit log data related to message deletion(s). MessagePinAuditLogData Contains a piece of audit log data related to a pinned message. MessageUnpinAuditLogData Contains a piece of audit log data related to an unpinned message. OnboardingInfo OnboardingPromptCreatedAuditLogData Contains a piece of audit log data related to an onboarding prompt creation. OnboardingPromptInfo OnboardingPromptUpdatedAuditLogData Contains a piece of audit log data related to an onboarding prompt update. OnboardingUpdatedAuditLogData Contains a piece of audit log data related to a guild update. OverwriteCreateAuditLogData Contains a piece of audit log data for a permissions overwrite creation. OverwriteDeleteAuditLogData Contains a piece of audit log data related to the deletion of a permission overwrite. OverwriteUpdateAuditLogData Contains a piece of audit log data related to the update of a permission overwrite. PruneAuditLogData Contains a piece of audit log data related to a guild prune. RestApplication Represents a REST-based entity that contains information about a Discord application created via the developer portal. RestApplicationCommand Represents a Rest-based implementation of the IApplicationCommand. RestApplicationCommandChoice Represents a Rest-based implementation of IApplicationCommandOptionChoice. RestApplicationCommandOption Represents a Rest-based implementation of IApplicationCommandOption. RestAuditLogEntry Represents a REST-based audit log entry. RestAutoModRule RestAutocompleteInteraction Represents a REST-based autocomplete interaction. RestAutocompleteInteractionData Represents the data for a RestAutocompleteInteraction. RestBan Represents a REST-based ban object. RestCategoryChannel Represents a REST-based category channel. RestChannel Represents a generic REST-based channel. RestCommandBase Represents a REST-based base command interaction. RestCommandBaseData Represents the base data tied with the RestCommandBase interaction. RestCommandBaseData<TOption> Represents the base data tied with the RestCommandBase interaction. RestConnection RestDMChannel Represents a REST-based direct-message channel. RestEntitlement RestEntity<T> RestExtensions RestFollowupMessage Represents a REST-based follow up message sent by a bot responding to an interaction. RestForumChannel Represents a REST-based forum channel in a guild. RestGlobalCommand Represents a Rest-based global application command. RestGroupChannel Represents a REST-based group-message channel. RestGroupUser Represents a REST-based group user. RestGuild Represents a REST-based guild/server. RestGuildChannel Represents a private REST-based group channel. RestGuildCommand Represents a Rest-based guild application command. RestGuildEvent RestGuildOnboarding Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. RestGuildOnboardingPrompt Represents the guild onboarding prompt. RestGuildOnboardingPromptOption Represents the guild onboarding prompt option. RestGuildUser Represents a REST-based guild user. RestIntegration Represents a Rest-based implementation of IIntegration. RestIntegrationAccount Represents a Rest-based implementation of IIntegrationAccount. RestIntegrationApplication Represents a Rest-based implementation of IIntegrationApplication. RestInteraction Represents a REST-based interaction. RestInteractionContext Represents a Rest based context of an IDiscordInteraction. RestInteractionContext<TInteraction> Represents a Rest based context of an IDiscordInteraction. RestInteractionMessage Represents the initial REST-based response to an interaction. RestInvite RestInviteMetadata Represents additional information regarding the REST-based invite object. RestMediaChannel RestMessage Represents a REST-based message. RestMessageCommand Represents a REST-based message command interaction. RestMessageCommandData Represents the data for a RestMessageCommand. RestMessageComponent Represents a REST-based message component. RestMessageComponentData Represents data for a RestMessageComponent. RestModal Represents a user submitted Modal. RestModalData Represents data sent from a ModalSubmit Interaction. RestNewsChannel Represents a REST-based news channel in a guild that has the same properties as a RestTextChannel. RestPingInteraction Represents a REST-based ping interaction. RestReaction Represents a REST reaction object. RestRole Represents a REST-based role. RestSelfUser Represents the logged-in REST-based user. RestSlashCommand Represents a REST-based slash command. RestSlashCommandData RestSlashCommandDataOption Represents a REST-based option for a slash command. RestStageChannel Represents a REST-based stage channel in a guild. RestSystemMessage Represents a REST-based system message. RestTeam RestTeamMember RestTextChannel Represents a REST-based channel in a guild that can send and receive messages. RestThreadChannel Represents a thread channel received over REST. RestThreadUser Represents a thread user received over the REST api. RestUser Represents a REST-based user. RestUserCommand Represents a REST-based user command. RestUserCommandData Represents the data for a RestUserCommand. RestUserGuild RestUserMessage Represents a REST-based message sent by a user. RestVoiceChannel Represents a REST-based voice channel in a guild. RestVoiceRegion Represents a REST-based voice region. RestWebhook RestWebhookUser RoleCreateAuditLogData Contains a piece of audit log data related to a role creation. RoleDeleteAuditLogData Contains a piece of audit log data relating to a role deletion. RoleUpdateAuditLogData Contains a piece of audit log data related to a role update. ScheduledEventCreateAuditLogData Contains a piece of audit log data related to a scheduled event creation. ScheduledEventDeleteAuditLogData Contains a piece of audit log data related to a scheduled event deletion. ScheduledEventInfo Represents information for a scheduled event. ScheduledEventUpdateAuditLogData Contains a piece of audit log data related to a scheduled event updates. StageInfo Represents information for a stage. StageInstanceCreateAuditLogData Contains a piece of audit log data related to a stage going live. StageInstanceDeleteAuditLogData Contains a piece of audit log data related to a stage instance deleted. StageInstanceUpdatedAuditLogData Contains a piece of audit log data related to a stage instance update. Sticker Represents a discord sticker. StickerCreatedAuditLogData Contains a piece of audit log data related to a sticker creation. StickerDeletedAuditLogData Contains a piece of audit log data related to a sticker removal. StickerInfo Represents information for a guild. StickerItem Represents a partial sticker received in a message. StickerUpdatedAuditLogData Contains a piece of audit log data related to a sticker update. StringExtensions Responsible for formatting certain entities as Json string, to reuse later on. ThreadCreateAuditLogData Contains a piece of audit log data related to a thread creation. ThreadDeleteAuditLogData Contains a piece of audit log data related to a thread deletion. ThreadInfo Represents information for a thread. ThreadUpdateAuditLogData Contains a piece of audit log data related to a thread update. UnbanAuditLogData Contains a piece of audit log data related to an unban. VoiceChannelStatusDeletedAuditLogData Contains a piece of audit log data related to a voice channel status delete. VoiceChannelStatusUpdateAuditLogData Contains a piece of audit log data related to a voice channel status update. WebhookCreateAuditLogData Contains a piece of audit log data related to a webhook creation. WebhookDeleteAuditLogData Contains a piece of audit log data related to a webhook deletion. WebhookUpdateAuditLogData Contains a piece of audit log data related to a webhook update. Structs ChannelInfo Represents information for a channel. GuildInfo Represents information for a guild. InteractionProperties Represents a class that contains data present in all interactions to evaluate against at rest-interaction creation. InviteInfo Represents information for an invite. MemberInfo Represents information for a member. MemberRoleEditInfo An information object representing a change in one of a guild member's roles. RestGuildWidget RoleEditInfo Represents information for a role edit. WebhookInfo Represents information for a webhook. Interfaces IRestAudioChannel IRestMessageChannel Represents a REST-based channel that can send and receive messages. IRestPrivateChannel Represents a REST-based channel that is private to select recipients."
  },
  "api/Discord.RetryMode.html": {
    "href": "api/Discord.RetryMode.html",
    "title": "Enum RetryMode | Discord.Net Documentation",
    "keywords": "Enum RetryMode Namespace Discord Assembly Discord.Net.Core.dll Specifies how a request should act in the case of an error. [Flags] public enum RetryMode Fields AlwaysFail = 0 If a request fails, an exception is thrown immediately. AlwaysRetry = RetryTimeouts | RetryRatelimit | Retry502 Continuously retry a request until it times out, its cancel token is triggered, or the server responds with a non-502 error. Retry502 = 8 Retry if a request failed due to an HTTP error 502. RetryRatelimit = 4 Retry if a request failed due to a rate-limit. RetryTimeouts = 1 Retry if a request timed out."
  },
  "api/Discord.RichGame.html": {
    "href": "api/Discord.RichGame.html",
    "title": "Class RichGame | Discord.Net Documentation",
    "keywords": "Class RichGame Namespace Discord Assembly Discord.Net.Core.dll A user's Rich Presence status. public class RichGame : Game, IActivity Inheritance object Game RichGame Implements IActivity Inherited Members Game.Name Game.Type Game.Flags Game.Details object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties ApplicationId Gets the application ID for the game. public ulong ApplicationId { get; } Property Value ulong LargeAsset Gets the large image for the presence and their hover texts. public GameAsset LargeAsset { get; } Property Value GameAsset Party Gets the information for the current party of the player. public GameParty Party { get; } Property Value GameParty Secrets Gets the secrets for Rich Presence joining and spectating. public GameSecrets Secrets { get; } Property Value GameSecrets SmallAsset Gets the small image for the presence and their hover texts. public GameAsset SmallAsset { get; } Property Value GameAsset State Gets the user's current party status. public string State { get; } Property Value string Timestamps Gets the timestamps for start and/or end of the game. public GameTimestamps Timestamps { get; } Property Value GameTimestamps Methods ToString() Returns the name of the Rich Presence. public override string ToString() Returns string"
  },
  "api/Discord.RoleConnection.html": {
    "href": "api/Discord.RoleConnection.html",
    "title": "Class RoleConnection | Discord.Net Documentation",
    "keywords": "Class RoleConnection Namespace Discord Assembly Discord.Net.Core.dll Represents the connection object that the user has attached. public class RoleConnection Inheritance object RoleConnection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Metadata Gets the object mapping RoleConnectionMetadata keys to their string-ified values. public IReadOnlyDictionary<string, string> Metadata { get; } Property Value IReadOnlyDictionary<string, string> PlatformName Gets the vanity name of the platform a bot has connected to. public string PlatformName { get; } Property Value string PlatformUsername Gets the username on the platform a bot has connected to. public string PlatformUsername { get; } Property Value string Methods ToRoleConnectionProperties() Initializes a new RoleConnectionProperties with the data from this object. public RoleConnectionProperties ToRoleConnectionProperties() Returns RoleConnectionProperties"
  },
  "api/Discord.RoleConnectionMetadata.html": {
    "href": "api/Discord.RoleConnectionMetadata.html",
    "title": "Class RoleConnectionMetadata | Discord.Net Documentation",
    "keywords": "Class RoleConnectionMetadata Namespace Discord Assembly Discord.Net.Core.dll Represents the role connection metadata object. public class RoleConnectionMetadata Inheritance object RoleConnectionMetadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description Gets the description of the metadata field. public string Description { get; } Property Value string DescriptionLocalizations Gets translations of the description. null if not set. public IReadOnlyDictionary<string, string> DescriptionLocalizations { get; } Property Value IReadOnlyDictionary<string, string> Key Gets the dictionary key for the metadata field. public string Key { get; } Property Value string Name Gets the name of the metadata field. public string Name { get; } Property Value string NameLocalizations Gets translations of the name. null if not set. public IReadOnlyDictionary<string, string> NameLocalizations { get; } Property Value IReadOnlyDictionary<string, string> Type Gets the of metadata value. public RoleConnectionMetadataType Type { get; } Property Value RoleConnectionMetadataType Methods ToRoleConnectionMetadataProperties() Initializes a new RoleConnectionMetadataProperties with the data from this object. public RoleConnectionMetadataProperties ToRoleConnectionMetadataProperties() Returns RoleConnectionMetadataProperties"
  },
  "api/Discord.RoleConnectionMetadataProperties.html": {
    "href": "api/Discord.RoleConnectionMetadataProperties.html",
    "title": "Class RoleConnectionMetadataProperties | Discord.Net Documentation",
    "keywords": "Class RoleConnectionMetadataProperties Namespace Discord Assembly Discord.Net.Core.dll Properties object used to create or modify RoleConnectionMetadata object. public class RoleConnectionMetadataProperties Inheritance object RoleConnectionMetadataProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RoleConnectionMetadataProperties() Initializes a new instance of RoleConnectionMetadataProperties. public RoleConnectionMetadataProperties() RoleConnectionMetadataProperties(RoleConnectionMetadataType, string, string, string, IDictionary<string, string>, IDictionary<string, string>) Initializes a new instance of RoleConnectionMetadataProperties. public RoleConnectionMetadataProperties(RoleConnectionMetadataType type, string key, string name, string description, IDictionary<string, string> nameLocalizations = null, IDictionary<string, string> descriptionLocalizations = null) Parameters type RoleConnectionMetadataType The type of the metadata value. key string The dictionary key for the metadata field. Max 50 characters. name string The name of the metadata visible in user profile. Max 100 characters. description string The description of the metadata visible in user profile. Max 200 characters. nameLocalizations IDictionary<string, string> Translations for the name. descriptionLocalizations IDictionary<string, string> Translations for the description. Properties Description Gets or sets the description of the metadata field. public string Description { get; set; } Property Value string DescriptionLocalizations Gets or sets translations of the description. null if not set. public IReadOnlyDictionary<string, string> DescriptionLocalizations { get; set; } Property Value IReadOnlyDictionary<string, string> Key Gets or sets the dictionary key for the metadata field. public string Key { get; set; } Property Value string Name Gets or sets the name of the metadata field. public string Name { get; set; } Property Value string NameLocalizations Gets or sets translations of the name. null if not set. public IReadOnlyDictionary<string, string> NameLocalizations { get; set; } Property Value IReadOnlyDictionary<string, string> Type Gets or sets the of metadata value. public RoleConnectionMetadataType Type { get; set; } Property Value RoleConnectionMetadataType Methods FromRoleConnectionMetadata(RoleConnectionMetadata) Initializes a new RoleConnectionMetadataProperties with the data from provided RoleConnectionMetadata. public static RoleConnectionMetadataProperties FromRoleConnectionMetadata(RoleConnectionMetadata metadata) Parameters metadata RoleConnectionMetadata Returns RoleConnectionMetadataProperties"
  },
  "api/Discord.RoleConnectionMetadataType.html": {
    "href": "api/Discord.RoleConnectionMetadataType.html",
    "title": "Enum RoleConnectionMetadataType | Discord.Net Documentation",
    "keywords": "Enum RoleConnectionMetadataType Namespace Discord Assembly Discord.Net.Core.dll Represents the type of Application Role Connection Metadata. public enum RoleConnectionMetadataType Fields BoolEqual = 7 The metadata's integer value is equal to the guild's configured value. BoolNotEqual = 8 The metadata's integer value is equal to the guild's configured value. DateTimeGreaterOrEqual = 6 The metadata's ISO8601 string value is greater to the guild's configured value. DateTimeLessOrEqual = 5 The metadata's ISO8601 string value is less or equal to the guild's configured value. IntegerEqual = 3 The metadata's integer value is equal to the guild's configured value. IntegerGreaterOrEqual = 2 The metadata's integer value is greater than or equal to the guild's configured value. IntegerLessOrEqual = 1 The metadata's integer value is less than or equal to the guild's configured value. IntegerNotEqual = 4 The metadata's integer value is not equal to the guild's configured value."
  },
  "api/Discord.RoleConnectionProperties.html": {
    "href": "api/Discord.RoleConnectionProperties.html",
    "title": "Class RoleConnectionProperties | Discord.Net Documentation",
    "keywords": "Class RoleConnectionProperties Namespace Discord Assembly Discord.Net.Core.dll Represents the properties used to modify user's RoleConnection. public class RoleConnectionProperties Inheritance object RoleConnectionProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RoleConnectionProperties() Initializes a new instance of RoleConnectionProperties. public RoleConnectionProperties() RoleConnectionProperties(string, string, IDictionary<string, string>) Initializes a new instance of RoleConnectionProperties. public RoleConnectionProperties(string platformName, string platformUsername, IDictionary<string, string> metadata = null) Parameters platformName string The name of the platform a bot has connected. platformUsername string Gets the username on the platform a bot has connected. metadata IDictionary<string, string> Object mapping RoleConnectionMetadata keys to their values. Properties Metadata Gets or sets object mapping RoleConnectionMetadata keys to their string-ified values. public Dictionary<string, string> Metadata { get; set; } Property Value Dictionary<string, string> PlatformName Gets or sets the vanity name of the platform a bot has connected. Max 50 characters. public string PlatformName { get; set; } Property Value string PlatformUsername Gets or sets the username on the platform a bot has connected. Max 100 characters. public string PlatformUsername { get; set; } Property Value string Methods FromRoleConnection(RoleConnection) Initializes a new RoleConnectionProperties with the data from provided RoleConnection. public static RoleConnectionProperties FromRoleConnection(RoleConnection roleConnection) Parameters roleConnection RoleConnection Returns RoleConnectionProperties WithBool(string, bool) Adds a metadata record with the provided key and value. public RoleConnectionProperties WithBool(string key, bool value) Parameters key string value bool Returns RoleConnectionProperties The current RoleConnectionProperties. WithDate(string, DateTimeOffset) Adds a metadata record with the provided key and value. public RoleConnectionProperties WithDate(string key, DateTimeOffset value) Parameters key string value DateTimeOffset Returns RoleConnectionProperties The current RoleConnectionProperties. WithNumber(string, int) Adds a metadata record with the provided key and value. public RoleConnectionProperties WithNumber(string key, int value) Parameters key string value int Returns RoleConnectionProperties The current RoleConnectionProperties. WithNumber(string, long) Adds a metadata record with the provided key and value. public RoleConnectionProperties WithNumber(string key, long value) Parameters key string value long Returns RoleConnectionProperties The current RoleConnectionProperties. WithNumber(string, uint) Adds a metadata record with the provided key and value. public RoleConnectionProperties WithNumber(string key, uint value) Parameters key string value uint Returns RoleConnectionProperties The current RoleConnectionProperties. WithNumber(string, ulong) Adds a metadata record with the provided key and value. public RoleConnectionProperties WithNumber(string key, ulong value) Parameters key string value ulong Returns RoleConnectionProperties The current RoleConnectionProperties."
  },
  "api/Discord.RoleFlags.html": {
    "href": "api/Discord.RoleFlags.html",
    "title": "Enum RoleFlags | Discord.Net Documentation",
    "keywords": "Enum RoleFlags Namespace Discord Assembly Discord.Net.Core.dll [Flags] public enum RoleFlags Fields InPrompt = 1 Indicates that the role can be selected by members in an onboarding. None = 0 The role has no flags."
  },
  "api/Discord.RoleProperties.html": {
    "href": "api/Discord.RoleProperties.html",
    "title": "Class RoleProperties | Discord.Net Documentation",
    "keywords": "Class RoleProperties Namespace Discord Assembly Discord.Net.Core.dll Properties that are used to modify an IRole with the specified changes. public class RoleProperties Inheritance object RoleProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples The following example uses ModifyAsync to apply changes specified in the properties, var role = guild.GetRole(id); if (role == null) return; await role.ModifyAsync(x => { x.Name = \"cool boi\"; x.Color = Color.Gold; x.Hoist = true; x.Mentionable = true; }); Properties Color Gets or sets the color of the role. public Optional<Color> Color { get; set; } Property Value Optional<Color> Remarks This value may not be set if the role is an @everyone role. See Also ModifyAsync(Action<RoleProperties>, RequestOptions) Emoji Gets or sets the unicode emoji of the role. public Optional<Emoji> Emoji { get; set; } Property Value Optional<Emoji> Remarks This value cannot be set at the same time as Icon, as they are both exclusive. Setting an Emoji will override a currently existing Icon if present. See Also ModifyAsync(Action<RoleProperties>, RequestOptions) Hoist Gets or sets whether or not this role should be displayed independently in the user list. public Optional<bool> Hoist { get; set; } Property Value Optional<bool> Remarks This value may not be set if the role is an @everyone role. See Also ModifyAsync(Action<RoleProperties>, RequestOptions) Icon Gets or sets the icon of the role. public Optional<Image?> Icon { get; set; } Property Value Optional<Image?> Remarks This value cannot be set at the same time as Emoji, as they are both exclusive. Setting an Icon will override a currently existing Emoji if present. See Also ModifyAsync(Action<RoleProperties>, RequestOptions) Mentionable Gets or sets whether or not this role can be mentioned. public Optional<bool> Mentionable { get; set; } Property Value Optional<bool> Remarks This value may not be set if the role is an @everyone role. See Also ModifyAsync(Action<RoleProperties>, RequestOptions) Name Gets or sets the name of the role. public Optional<string> Name { get; set; } Property Value Optional<string> Remarks This value may not be set if the role is an @everyone role. See Also ModifyAsync(Action<RoleProperties>, RequestOptions) Permissions Gets or sets the role's GuildPermission. public Optional<GuildPermissions> Permissions { get; set; } Property Value Optional<GuildPermissions> See Also ModifyAsync(Action<RoleProperties>, RequestOptions) Position Gets or sets the position of the role. This is 0-based! public Optional<int> Position { get; set; } Property Value Optional<int> Remarks This value may not be set if the role is an @everyone role. See Also ModifyAsync(Action<RoleProperties>, RequestOptions) See Also ModifyAsync(Action<RoleProperties>, RequestOptions)"
  },
  "api/Discord.RoleTags.html": {
    "href": "api/Discord.RoleTags.html",
    "title": "Class RoleTags | Discord.Net Documentation",
    "keywords": "Class RoleTags Namespace Discord Assembly Discord.Net.Core.dll Provides tags related to a discord role. public class RoleTags Inheritance object RoleTags Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BotId Gets the identifier of the bot that this role belongs to, if it does. public ulong? BotId { get; } Property Value ulong? A ulong if this role belongs to a bot; otherwise null. IntegrationId Gets the identifier of the integration that this role belongs to, if it does. public ulong? IntegrationId { get; } Property Value ulong? A ulong if this role belongs to an integration; otherwise null. IsPremiumSubscriberRole Gets if this role is the guild's premium subscriber (booster) role. public bool IsPremiumSubscriberRole { get; } Property Value bool true if this role is the guild's premium subscriber role; otherwise false."
  },
  "api/Discord.SKU.html": {
    "href": "api/Discord.SKU.html",
    "title": "Struct SKU | Discord.Net Documentation",
    "keywords": "Struct SKU Namespace Discord Assembly Discord.Net.Core.dll public struct SKU : ISnowflakeEntity, IEntity<ulong> Implements ISnowflakeEntity IEntity<ulong> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties ApplicationId Gets the ID of the parent application. public readonly ulong ApplicationId { get; } Property Value ulong CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. Id Gets the unique identifier for this object. public readonly ulong Id { get; } Property Value ulong Name Gets the customer-facing name of your premium offering. public readonly string Name { get; } Property Value string Slug Gets the system-generated URL slug based on the SKU's name. public readonly string Slug { get; } Property Value string Type Gets the type of the SKU. public readonly SKUType Type { get; } Property Value SKUType"
  },
  "api/Discord.SKUFlags.html": {
    "href": "api/Discord.SKUFlags.html",
    "title": "Enum SKUFlags | Discord.Net Documentation",
    "keywords": "Enum SKUFlags Namespace Discord Assembly Discord.Net.Core.dll [Flags] public enum SKUFlags Fields GuildSubscription = 128 UserSubscription = 256"
  },
  "api/Discord.SKUType.html": {
    "href": "api/Discord.SKUType.html",
    "title": "Enum SKUType | Discord.Net Documentation",
    "keywords": "Enum SKUType Namespace Discord Assembly Discord.Net.Core.dll public enum SKUType Fields Subscription = 5 Represents a recurring subscription. SubscriptionGroup = 6 System-generated group for each Subscription SKU created."
  },
  "api/Discord.SelectDefaultValueType.html": {
    "href": "api/Discord.SelectDefaultValueType.html",
    "title": "Enum SelectDefaultValueType | Discord.Net Documentation",
    "keywords": "Enum SelectDefaultValueType Namespace Discord Assembly Discord.Net.Core.dll Type of a SelectDefaultValueType. public enum SelectDefaultValueType Fields Channel = 2 The select menu default value is a channel. Role = 1 The select menu default value is a role. User = 0 The select menu default value is a user."
  },
  "api/Discord.SelectMenuBuilder.html": {
    "href": "api/Discord.SelectMenuBuilder.html",
    "title": "Class SelectMenuBuilder | Discord.Net Documentation",
    "keywords": "Class SelectMenuBuilder Namespace Discord Assembly Discord.Net.Core.dll Represents a class used to build SelectMenuComponent's. public class SelectMenuBuilder Inheritance object SelectMenuBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SelectMenuBuilder() Creates a new instance of a SelectMenuBuilder. public SelectMenuBuilder() SelectMenuBuilder(SelectMenuComponent) Creates a new instance of a SelectMenuBuilder from instance of SelectMenuComponent. public SelectMenuBuilder(SelectMenuComponent selectMenu) Parameters selectMenu SelectMenuComponent SelectMenuBuilder(string, List<SelectMenuOptionBuilder>, string, int, int, bool, ComponentType, List<ChannelType>, List<SelectMenuDefaultValue>) Creates a new instance of a SelectMenuBuilder. public SelectMenuBuilder(string customId, List<SelectMenuOptionBuilder> options = null, string placeholder = null, int maxValues = 1, int minValues = 1, bool isDisabled = false, ComponentType type = ComponentType.SelectMenu, List<ChannelType> channelTypes = null, List<SelectMenuDefaultValue> defaultValues = null) Parameters customId string The custom id of this select menu. options List<SelectMenuOptionBuilder> The options for this select menu. placeholder string The placeholder of this select menu. maxValues int The max values of this select menu. minValues int The min values of this select menu. isDisabled bool Disabled this select menu or not. type ComponentType The ComponentType of this select menu. channelTypes List<ChannelType> The types of channels this menu can select (only valid on ChannelSelects) defaultValues List<SelectMenuDefaultValue> Fields MaxOptionCount The maximum number of options a SelectMenuComponent can have. public const int MaxOptionCount = 25 Field Value int MaxPlaceholderLength The max length of a Placeholder. public const int MaxPlaceholderLength = 100 Field Value int MaxValuesCount The maximum number of values for the MinValues and MaxValues properties. public const int MaxValuesCount = 25 Field Value int Properties ChannelTypes Gets or sets the menu's channel types (only valid on ChannelSelects). public List<ChannelType> ChannelTypes { get; set; } Property Value List<ChannelType> CustomId Gets or sets the custom id of the current select menu. public string CustomId { get; set; } Property Value string Exceptions ArgumentException CustomId length exceeds MaxCustomIdLength ArgumentException CustomId length subceeds 1. DefaultValues public List<SelectMenuDefaultValue> DefaultValues { get; set; } Property Value List<SelectMenuDefaultValue> IsDisabled Gets or sets whether the current menu is disabled. public bool IsDisabled { get; set; } Property Value bool MaxValues Gets or sets the maximum values of the current select menu. public int MaxValues { get; set; } Property Value int Exceptions ArgumentException MaxValues exceeds MaxValuesCount. MinValues Gets or sets the minimum values of the current select menu. public int MinValues { get; set; } Property Value int Exceptions ArgumentException MinValues exceeds MaxValuesCount. Options Gets or sets a collection of SelectMenuOptionBuilder for this current select menu. public List<SelectMenuOptionBuilder> Options { get; set; } Property Value List<SelectMenuOptionBuilder> Exceptions ArgumentException Options count exceeds MaxOptionCount. ArgumentNullException Options is null. Placeholder Gets or sets the placeholder text of the current select menu. public string Placeholder { get; set; } Property Value string Exceptions ArgumentException Placeholder length exceeds MaxPlaceholderLength. ArgumentException Placeholder length subceeds 1. Type Gets or sets the type of the current select menu. public ComponentType Type { get; set; } Property Value ComponentType Exceptions ArgumentException Type must be a select menu type. Methods AddDefaultValue(SelectMenuDefaultValue) Add one default value to menu options. public SelectMenuBuilder AddDefaultValue(SelectMenuDefaultValue value) Parameters value SelectMenuDefaultValue The default value to add. Returns SelectMenuBuilder The current builder. Exceptions InvalidOperationException Default values count reached MaxOptionCount. AddDefaultValue(ulong, SelectDefaultValueType) Add one default value to menu options. public SelectMenuBuilder AddDefaultValue(ulong id, SelectDefaultValueType type) Parameters id ulong The id of an entity to add. type SelectDefaultValueType The type of an entity to add. Returns SelectMenuBuilder The current builder. Exceptions InvalidOperationException Default values count reached MaxOptionCount. AddOption(SelectMenuOptionBuilder) Add one option to menu options. public SelectMenuBuilder AddOption(SelectMenuOptionBuilder option) Parameters option SelectMenuOptionBuilder The option builder class containing the option properties. Returns SelectMenuBuilder The current builder. Exceptions InvalidOperationException Options count reached MaxOptionCount. AddOption(string, string, string, IEmote, bool?) Add one option to menu options. public SelectMenuBuilder AddOption(string label, string value, string description = null, IEmote emote = null, bool? isDefault = null) Parameters label string The label for this option. value string The value of this option. description string The description of this option. emote IEmote The emote of this option. isDefault bool? Render this option as selected by default or not. Returns SelectMenuBuilder The current builder. Exceptions InvalidOperationException Options count reached MaxOptionCount. Build() Builds a SelectMenuComponent public SelectMenuComponent Build() Returns SelectMenuComponent The newly built SelectMenuComponent WithChannelTypes(params ChannelType[]) Sets the menus valid channel types (only for ChannelSelects). public SelectMenuBuilder WithChannelTypes(params ChannelType[] channelTypes) Parameters channelTypes ChannelType[] The valid channel types of the menu. Returns SelectMenuBuilder The current builder. WithChannelTypes(List<ChannelType>) Sets the menus valid channel types (only for ChannelSelects). public SelectMenuBuilder WithChannelTypes(List<ChannelType> channelTypes) Parameters channelTypes List<ChannelType> The valid channel types of the menu. Returns SelectMenuBuilder The current builder. WithCustomId(string) Sets the field CustomId. public SelectMenuBuilder WithCustomId(string customId) Parameters customId string The value to set the field CustomId to. Returns SelectMenuBuilder The current builder. Exceptions ArgumentException CustomId length exceeds MaxCustomIdLength ArgumentException CustomId length subceeds 1. WithDefaultValues(params SelectMenuDefaultValue[]) Sets the field default values. public SelectMenuBuilder WithDefaultValues(params SelectMenuDefaultValue[] defaultValues) Parameters defaultValues SelectMenuDefaultValue[] The value to set the field default values to. Returns SelectMenuBuilder The current builder. WithDisabled(bool) Sets whether the current menu is disabled. public SelectMenuBuilder WithDisabled(bool isDisabled) Parameters isDisabled bool Whether the current menu is disabled or not. Returns SelectMenuBuilder The current builder. WithMaxValues(int) Sets the field maxValues. public SelectMenuBuilder WithMaxValues(int maxValues) Parameters maxValues int The value to set the field maxValues to. Returns SelectMenuBuilder The current builder. Exceptions ArgumentException MaxValues exceeds MaxValuesCount. WithMinValues(int) Sets the field minValues. public SelectMenuBuilder WithMinValues(int minValues) Parameters minValues int The value to set the field minValues to. Returns SelectMenuBuilder The current builder. Exceptions ArgumentException MinValues exceeds MaxValuesCount. WithOptions(List<SelectMenuOptionBuilder>) Sets the field options. public SelectMenuBuilder WithOptions(List<SelectMenuOptionBuilder> options) Parameters options List<SelectMenuOptionBuilder> The value to set the field options to. Returns SelectMenuBuilder The current builder. Exceptions ArgumentException Options count exceeds MaxOptionCount. ArgumentNullException Options is null. WithPlaceholder(string) Sets the field placeholder. public SelectMenuBuilder WithPlaceholder(string placeholder) Parameters placeholder string The value to set the field placeholder to. Returns SelectMenuBuilder The current builder. Exceptions ArgumentException Placeholder length exceeds MaxPlaceholderLength. ArgumentException Placeholder length subceeds 1. WithType(ComponentType) Sets the menu's current type. public SelectMenuBuilder WithType(ComponentType type) Parameters type ComponentType The type of the menu. Returns SelectMenuBuilder The current builder."
  },
  "api/Discord.SelectMenuComponent.html": {
    "href": "api/Discord.SelectMenuComponent.html",
    "title": "Class SelectMenuComponent | Discord.Net Documentation",
    "keywords": "Class SelectMenuComponent Namespace Discord Assembly Discord.Net.Core.dll Represents a select menu component defined at https://discord.com/developers/docs/interactions/message-components#select-menu-object public class SelectMenuComponent : IMessageComponent Inheritance object SelectMenuComponent Implements IMessageComponent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelTypes Gets the allowed channel types for this modal public IReadOnlyCollection<ChannelType> ChannelTypes { get; } Property Value IReadOnlyCollection<ChannelType> CustomId Gets the custom id of the component if possible; otherwise null. public string CustomId { get; } Property Value string DefaultValues Gets default values for auto-populated select menu components. public IReadOnlyCollection<SelectMenuDefaultValue> DefaultValues { get; } Property Value IReadOnlyCollection<SelectMenuDefaultValue> IsDisabled Gets whether this menu is disabled or not. public bool IsDisabled { get; } Property Value bool MaxValues Gets the maximum number of items that can be chosen. public int MaxValues { get; } Property Value int MinValues Gets the minimum number of items that must be chosen. public int MinValues { get; } Property Value int Options Gets the menus options to select from. public IReadOnlyCollection<SelectMenuOption> Options { get; } Property Value IReadOnlyCollection<SelectMenuOption> Placeholder Gets the custom placeholder text if nothing is selected. public string Placeholder { get; } Property Value string Type Gets the ComponentType of this Message Component. public ComponentType Type { get; } Property Value ComponentType Methods ToBuilder() Turns this select menu into a builder. public SelectMenuBuilder ToBuilder() Returns SelectMenuBuilder A newly create builder with the same properties as this select menu."
  },
  "api/Discord.SelectMenuDefaultValue.html": {
    "href": "api/Discord.SelectMenuDefaultValue.html",
    "title": "Struct SelectMenuDefaultValue | Discord.Net Documentation",
    "keywords": "Struct SelectMenuDefaultValue Namespace Discord Assembly Discord.Net.Core.dll Represents a default value of an auto-populated select menu. public readonly struct SelectMenuDefaultValue Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors SelectMenuDefaultValue(ulong, SelectDefaultValueType) Creates a new default value. public SelectMenuDefaultValue(ulong id, SelectDefaultValueType type) Parameters id ulong Id of the target object. type SelectDefaultValueType Type of the target entity. Properties Id Gets the id of entity this default value refers to. public ulong Id { get; } Property Value ulong Type Gets the type of this default value. public SelectDefaultValueType Type { get; } Property Value SelectDefaultValueType Methods FromChannel(IChannel) Creates a new default value from a IChannel. public static SelectMenuDefaultValue FromChannel(IChannel channel) Parameters channel IChannel Returns SelectMenuDefaultValue FromRole(IRole) Creates a new default value from a IRole. public static SelectMenuDefaultValue FromRole(IRole role) Parameters role IRole Returns SelectMenuDefaultValue FromUser(IUser) Creates a new default value from a IUser. public static SelectMenuDefaultValue FromUser(IUser user) Parameters user IUser Returns SelectMenuDefaultValue"
  },
  "api/Discord.SelectMenuOption.html": {
    "href": "api/Discord.SelectMenuOption.html",
    "title": "Class SelectMenuOption | Discord.Net Documentation",
    "keywords": "Class SelectMenuOption Namespace Discord Assembly Discord.Net.Core.dll Represents a choice for a SelectMenuComponent. public class SelectMenuOption Inheritance object SelectMenuOption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description Gets a description of the option. public string Description { get; } Property Value string Emote Gets the IEmote displayed with this menu option. public IEmote Emote { get; } Property Value IEmote IsDefault Gets whether or not this option will render as selected by default. public bool? IsDefault { get; } Property Value bool? Label Gets the user-facing name of the option. public string Label { get; } Property Value string Value Gets the dev-define value of the option. public string Value { get; } Property Value string"
  },
  "api/Discord.SelectMenuOptionBuilder.html": {
    "href": "api/Discord.SelectMenuOptionBuilder.html",
    "title": "Class SelectMenuOptionBuilder | Discord.Net Documentation",
    "keywords": "Class SelectMenuOptionBuilder Namespace Discord Assembly Discord.Net.Core.dll Represents a class used to build SelectMenuOption's. public class SelectMenuOptionBuilder Inheritance object SelectMenuOptionBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SelectMenuOptionBuilder() Creates a new instance of a SelectMenuOptionBuilder. public SelectMenuOptionBuilder() SelectMenuOptionBuilder(SelectMenuOption) Creates a new instance of a SelectMenuOptionBuilder from instance of a SelectMenuOption. public SelectMenuOptionBuilder(SelectMenuOption option) Parameters option SelectMenuOption SelectMenuOptionBuilder(string, string, string, IEmote, bool?) Creates a new instance of a SelectMenuOptionBuilder. public SelectMenuOptionBuilder(string label, string value, string description = null, IEmote emote = null, bool? isDefault = null) Parameters label string The label for this option. value string The value of this option. description string The description of this option. emote IEmote The emote of this option. isDefault bool? Render this option as selected by default or not. Fields MaxDescriptionLength The maximum length of a Description. public const int MaxDescriptionLength = 100 Field Value int MaxSelectLabelLength The maximum length of a Label. public const int MaxSelectLabelLength = 100 Field Value int MaxSelectValueLength The maximum length of a Value. public const int MaxSelectValueLength = 100 Field Value int Properties Description Gets or sets this menu options description. public string Description { get; set; } Property Value string Exceptions ArgumentException Description length exceeds MaxDescriptionLength. ArgumentException Description length subceeds 1. Emote Gets or sets the emote of this option. public IEmote Emote { get; set; } Property Value IEmote IsDefault Gets or sets the whether or not this option will render selected by default. public bool? IsDefault { get; set; } Property Value bool? Label Gets or sets the label of the current select menu. public string Label { get; set; } Property Value string Exceptions ArgumentException Label length exceeds MaxSelectLabelLength ArgumentException Label length subceeds 1. Value Gets or sets the value of the current select menu. public string Value { get; set; } Property Value string Exceptions ArgumentException Value length exceeds MaxSelectValueLength. ArgumentException Value length subceeds 1. Methods Build() Builds a SelectMenuOption. public SelectMenuOption Build() Returns SelectMenuOption The newly built SelectMenuOption. WithDefault(bool) Sets the field default. public SelectMenuOptionBuilder WithDefault(bool isDefault) Parameters isDefault bool The value to set the field default to. Returns SelectMenuOptionBuilder The current builder. WithDescription(string) Sets the field description. public SelectMenuOptionBuilder WithDescription(string description) Parameters description string The value to set the field description to. Returns SelectMenuOptionBuilder The current builder. Exceptions ArgumentException Description length exceeds MaxDescriptionLength. ArgumentException Description length subceeds 1. WithEmote(IEmote) Sets the field emote. public SelectMenuOptionBuilder WithEmote(IEmote emote) Parameters emote IEmote The value to set the field emote to. Returns SelectMenuOptionBuilder The current builder. WithLabel(string) Sets the field label. public SelectMenuOptionBuilder WithLabel(string label) Parameters label string The value to set the field label to. Returns SelectMenuOptionBuilder The current builder. Exceptions ArgumentException Label length exceeds MaxSelectLabelLength ArgumentException Label length subceeds 1. WithValue(string) Sets the field value. public SelectMenuOptionBuilder WithValue(string value) Parameters value string The value to set the field value to. Returns SelectMenuOptionBuilder The current builder. Exceptions ArgumentException Value length exceeds MaxSelectValueLength. ArgumentException Value length subceeds 1."
  },
  "api/Discord.SelfUserProperties.html": {
    "href": "api/Discord.SelfUserProperties.html",
    "title": "Class SelfUserProperties | Discord.Net Documentation",
    "keywords": "Class SelfUserProperties Namespace Discord Assembly Discord.Net.Core.dll Properties that are used to modify the ISelfUser with the specified changes. public class SelfUserProperties Inheritance object SelfUserProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples The following example uses ModifyAsync to apply changes specified in the properties, await selfUser.ModifyAsync(x => { x.Username = \"Mercy\"; }); Properties Avatar Gets or sets the avatar. public Optional<Image?> Avatar { get; set; } Property Value Optional<Image?> See Also ModifyAsync(Action<SelfUserProperties>, RequestOptions) Username Gets or sets the username. public Optional<string> Username { get; set; } Property Value Optional<string> See Also ModifyAsync(Action<SelfUserProperties>, RequestOptions) See Also ModifyAsync(Action<SelfUserProperties>, RequestOptions)"
  },
  "api/Discord.SessionStartLimit.html": {
    "href": "api/Discord.SessionStartLimit.html",
    "title": "Class SessionStartLimit | Discord.Net Documentation",
    "keywords": "Class SessionStartLimit Namespace Discord Assembly Discord.Net.Core.dll Stores the information related to the gateway identify request. public class SessionStartLimit Inheritance object SessionStartLimit Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties MaxConcurrency Gets the maximum concurrent identify requests in a time window. public int MaxConcurrency { get; } Property Value int The maximum concurrent identify requests in a time window, limited to the same rate limit key. Remaining Gets the remaining number of session starts the current user is allowed. public int Remaining { get; } Property Value int The remaining amount of session starts the current user is allowed. ResetAfter Gets the number of milliseconds after which the limit resets. public int ResetAfter { get; } Property Value int The milliseconds until the limit resets back to the Total. Total Gets the total number of session starts the current user is allowed. public int Total { get; } Property Value int The maximum amount of session starts the current user is allowed."
  },
  "api/Discord.SlashCommandBuilder.html": {
    "href": "api/Discord.SlashCommandBuilder.html",
    "title": "Class SlashCommandBuilder | Discord.Net Documentation",
    "keywords": "Class SlashCommandBuilder Namespace Discord Assembly Discord.Net.Core.dll Represents a class used to build slash commands. public class SlashCommandBuilder Inheritance object SlashCommandBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields MaxDescriptionLength Returns the maximum length of a commands description allowed by Discord. public const int MaxDescriptionLength = 100 Field Value int MaxNameLength Returns the maximum length a commands name allowed by Discord public const int MaxNameLength = 32 Field Value int MaxOptionsCount Returns the maximum count of command options allowed by Discord public const int MaxOptionsCount = 25 Field Value int Properties DefaultMemberPermissions Gets or sets the default permission required to use this slash command. public GuildPermission? DefaultMemberPermissions { get; set; } Property Value GuildPermission? Description Gets or sets a 1-100 length description of this slash command public string Description { get; set; } Property Value string DescriptionLocalizations Gets the localization dictionary for the description field of this command. public IReadOnlyDictionary<string, string> DescriptionLocalizations { get; } Property Value IReadOnlyDictionary<string, string> IsDMEnabled Gets or sets whether or not this command can be used in DMs. public bool IsDMEnabled { get; set; } Property Value bool IsDefaultPermission Gets or sets whether the command is enabled by default when the app is added to a guild public bool IsDefaultPermission { get; set; } Property Value bool IsNsfw Gets or sets whether or not this command is age restricted. public bool IsNsfw { get; set; } Property Value bool Name Gets or sets the name of this slash command. public string Name { get; set; } Property Value string NameLocalizations Gets the localization dictionary for the name field of this command. public IReadOnlyDictionary<string, string> NameLocalizations { get; } Property Value IReadOnlyDictionary<string, string> Options Gets or sets the options for this command. public List<SlashCommandOptionBuilder> Options { get; set; } Property Value List<SlashCommandOptionBuilder> Methods AddDescriptionLocalization(string, string) Adds a new entry to the Description collection. public SlashCommandBuilder AddDescriptionLocalization(string locale, string description) Parameters locale string Locale of the entry. description string Localized string for the description field. Returns SlashCommandBuilder The current builder. Exceptions ArgumentException Thrown if locale is an invalid locale string. AddNameLocalization(string, string) Adds a new entry to the NameLocalizations collection. public SlashCommandBuilder AddNameLocalization(string locale, string name) Parameters locale string Locale of the entry. name string Localized string for the name field. Returns SlashCommandBuilder The current builder. Exceptions ArgumentException Thrown if locale is an invalid locale string. AddOption(SlashCommandOptionBuilder) Adds an option to this slash command. public SlashCommandBuilder AddOption(SlashCommandOptionBuilder option) Parameters option SlashCommandOptionBuilder The option to add. Returns SlashCommandBuilder The current builder. AddOption(string, ApplicationCommandOptionType, string, bool?, bool?, bool, double?, double?, List<SlashCommandOptionBuilder>, List<ChannelType>, IDictionary<string, string>, IDictionary<string, string>, int?, int?, params ApplicationCommandOptionChoiceProperties[]) Adds an option to the current slash command. public SlashCommandBuilder AddOption(string name, ApplicationCommandOptionType type, string description, bool? isRequired = null, bool? isDefault = null, bool isAutocomplete = false, double? minValue = null, double? maxValue = null, List<SlashCommandOptionBuilder> options = null, List<ChannelType> channelTypes = null, IDictionary<string, string> nameLocalizations = null, IDictionary<string, string> descriptionLocalizations = null, int? minLength = null, int? maxLength = null, params ApplicationCommandOptionChoiceProperties[] choices) Parameters name string The name of the option to add. type ApplicationCommandOptionType The type of this option. description string The description of this option. isRequired bool? If this option is required for this command. isDefault bool? If this option is the default option. isAutocomplete bool If this option is set to autocomplete. minValue double? The smallest number value the user can input. maxValue double? The largest number value the user can input. options List<SlashCommandOptionBuilder> The options of the option to add. channelTypes List<ChannelType> The allowed channel types for this option. nameLocalizations IDictionary<string, string> Localization dictionary for the name field of this command. descriptionLocalizations IDictionary<string, string> Localization dictionary for the description field of this command. minLength int? maxLength int? choices ApplicationCommandOptionChoiceProperties[] The choices of this option. Returns SlashCommandBuilder The current builder. AddOptions(params SlashCommandOptionBuilder[]) Adds a collection of options to the current slash command. public SlashCommandBuilder AddOptions(params SlashCommandOptionBuilder[] options) Parameters options SlashCommandOptionBuilder[] The collection of options to add. Returns SlashCommandBuilder The current builder. Build() Build the current builder into a SlashCommandProperties class. public SlashCommandProperties Build() Returns SlashCommandProperties A SlashCommandProperties that can be used to create slash commands. WithDMPermission(bool) Sets whether or not this command can be used in dms. public SlashCommandBuilder WithDMPermission(bool permission) Parameters permission bool true if the command is available in dms, otherwise false. Returns SlashCommandBuilder The current builder. WithDefaultMemberPermissions(GuildPermission?) Sets the default member permissions required to use this application command. public SlashCommandBuilder WithDefaultMemberPermissions(GuildPermission? permissions) Parameters permissions GuildPermission? The permissions required to use this command. Returns SlashCommandBuilder The current builder. WithDefaultPermission(bool) Sets the default permission of the current command. public SlashCommandBuilder WithDefaultPermission(bool value) Parameters value bool The default permission value to set. Returns SlashCommandBuilder The current builder. WithDescription(string) Sets the description of the current command. public SlashCommandBuilder WithDescription(string description) Parameters description string The description of this command. Returns SlashCommandBuilder The current builder. WithDescriptionLocalizations(IDictionary<string, string>) Sets the DescriptionLocalizations collection. public SlashCommandBuilder WithDescriptionLocalizations(IDictionary<string, string> descriptionLocalizations) Parameters descriptionLocalizations IDictionary<string, string> The localization dictionary to use for the description field of this command. Returns SlashCommandBuilder Exceptions ArgumentNullException Thrown if descriptionLocalizations is null. ArgumentException Thrown if any dictionary key is an invalid locale string. WithName(string) Sets the field name. public SlashCommandBuilder WithName(string name) Parameters name string The value to set the field name to. Returns SlashCommandBuilder The current builder. WithNameLocalizations(IDictionary<string, string>) Sets the NameLocalizations collection. public SlashCommandBuilder WithNameLocalizations(IDictionary<string, string> nameLocalizations) Parameters nameLocalizations IDictionary<string, string> The localization dictionary to use for the name field of this command. Returns SlashCommandBuilder Exceptions ArgumentNullException Thrown if nameLocalizations is null. ArgumentException Thrown if any dictionary key is an invalid locale string. WithNsfw(bool) Sets whether or not this command is age restricted. public SlashCommandBuilder WithNsfw(bool permission) Parameters permission bool true if the command is age restricted, otherwise false. Returns SlashCommandBuilder The current builder."
  },
  "api/Discord.SlashCommandOptionBuilder.html": {
    "href": "api/Discord.SlashCommandOptionBuilder.html",
    "title": "Class SlashCommandOptionBuilder | Discord.Net Documentation",
    "keywords": "Class SlashCommandOptionBuilder Namespace Discord Assembly Discord.Net.Core.dll Represents a class used to build options for the SlashCommandBuilder. public class SlashCommandOptionBuilder Inheritance object SlashCommandOptionBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ChoiceNameMaxLength The max length of a choice's name allowed by Discord. public const int ChoiceNameMaxLength = 100 Field Value int MaxChoiceCount The maximum number of choices allowed by Discord. public const int MaxChoiceCount = 25 Field Value int Properties ChannelTypes Gets or sets the allowed channel types for this option. public List<ChannelType> ChannelTypes { get; set; } Property Value List<ChannelType> Choices Gets or sets the choices for string and int types for the user to pick from. public List<ApplicationCommandOptionChoiceProperties> Choices { get; set; } Property Value List<ApplicationCommandOptionChoiceProperties> Description Gets or sets the description of this option. public string Description { get; set; } Property Value string DescriptionLocalizations Gets the localization dictionary for the description field of this command. public IReadOnlyDictionary<string, string> DescriptionLocalizations { get; } Property Value IReadOnlyDictionary<string, string> IsAutocomplete Gets or sets whether or not this option supports autocomplete. public bool IsAutocomplete { get; set; } Property Value bool IsDefault Gets or sets whether or not this options is the first required option for the user to complete. only one option can be default. public bool? IsDefault { get; set; } Property Value bool? IsRequired Gets or sets if the option is required. public bool? IsRequired { get; set; } Property Value bool? MaxLength Gets or sets the maximum allowed length for a string input. public int? MaxLength { get; set; } Property Value int? MaxValue Gets or sets the largest number value the user can input. public double? MaxValue { get; set; } Property Value double? MinLength Gets or sets the minimum allowed length for a string input. public int? MinLength { get; set; } Property Value int? MinValue Gets or sets the smallest number value the user can input. public double? MinValue { get; set; } Property Value double? Name Gets or sets the name of this option. public string Name { get; set; } Property Value string NameLocalizations Gets the localization dictionary for the name field of this command. public IReadOnlyDictionary<string, string> NameLocalizations { get; } Property Value IReadOnlyDictionary<string, string> Options Gets or sets if this option is a subcommand or subcommand group type, these nested options will be the parameters. public List<SlashCommandOptionBuilder> Options { get; set; } Property Value List<SlashCommandOptionBuilder> Type Gets or sets the type of this option. public ApplicationCommandOptionType Type { get; set; } Property Value ApplicationCommandOptionType Methods AddChannelType(ChannelType) Adds a channel type to the current option. public SlashCommandOptionBuilder AddChannelType(ChannelType channelType) Parameters channelType ChannelType The ChannelType to add. Returns SlashCommandOptionBuilder The current builder. AddChoice(string, double, IDictionary<string, string>) Adds a choice to the current option. public SlashCommandOptionBuilder AddChoice(string name, double value, IDictionary<string, string> nameLocalizations = null) Parameters name string The name of the choice. value double The value of the choice. nameLocalizations IDictionary<string, string> Localization dictionary for the description field of this command. Returns SlashCommandOptionBuilder The current builder. AddChoice(string, int, IDictionary<string, string>) Adds a choice to the current option. public SlashCommandOptionBuilder AddChoice(string name, int value, IDictionary<string, string> nameLocalizations = null) Parameters name string The name of the choice. value int The value of the choice. nameLocalizations IDictionary<string, string> The localization dictionary for to use the name field of this command option choice. Returns SlashCommandOptionBuilder The current builder. AddChoice(string, long, IDictionary<string, string>) Adds a choice to the current option. public SlashCommandOptionBuilder AddChoice(string name, long value, IDictionary<string, string> nameLocalizations = null) Parameters name string The name of the choice. value long The value of the choice. nameLocalizations IDictionary<string, string> The localization dictionary to use for the name field of this command option choice. Returns SlashCommandOptionBuilder The current builder. AddChoice(string, float, IDictionary<string, string>) Adds a choice to the current option. public SlashCommandOptionBuilder AddChoice(string name, float value, IDictionary<string, string> nameLocalizations = null) Parameters name string The name of the choice. value float The value of the choice. nameLocalizations IDictionary<string, string> The localization dictionary to use for the name field of this command option choice. Returns SlashCommandOptionBuilder The current builder. AddChoice(string, string, IDictionary<string, string>) Adds a choice to the current option. public SlashCommandOptionBuilder AddChoice(string name, string value, IDictionary<string, string> nameLocalizations = null) Parameters name string The name of the choice. value string The value of the choice. nameLocalizations IDictionary<string, string> The localization dictionary for to use the name field of this command option choice. Returns SlashCommandOptionBuilder The current builder. AddDescriptionLocalization(string, string) Adds a new entry to the DescriptionLocalizations collection. public SlashCommandOptionBuilder AddDescriptionLocalization(string locale, string description) Parameters locale string Locale of the entry. description string Localized string for the description field. Returns SlashCommandOptionBuilder The current builder. Exceptions ArgumentException Thrown if locale is an invalid locale string. AddNameLocalization(string, string) Adds a new entry to the NameLocalizations collection. public SlashCommandOptionBuilder AddNameLocalization(string locale, string name) Parameters locale string Locale of the entry. name string Localized string for the name field. Returns SlashCommandOptionBuilder The current builder. Exceptions ArgumentException Thrown if locale is an invalid locale string. AddOption(SlashCommandOptionBuilder) Adds a sub option to the current option. public SlashCommandOptionBuilder AddOption(SlashCommandOptionBuilder option) Parameters option SlashCommandOptionBuilder The sub option to add. Returns SlashCommandOptionBuilder The current builder. AddOption(string, ApplicationCommandOptionType, string, bool?, bool, bool, double?, double?, List<SlashCommandOptionBuilder>, List<ChannelType>, IDictionary<string, string>, IDictionary<string, string>, int?, int?, params ApplicationCommandOptionChoiceProperties[]) Adds an option to the current slash command. public SlashCommandOptionBuilder AddOption(string name, ApplicationCommandOptionType type, string description, bool? isRequired = null, bool isDefault = false, bool isAutocomplete = false, double? minValue = null, double? maxValue = null, List<SlashCommandOptionBuilder> options = null, List<ChannelType> channelTypes = null, IDictionary<string, string> nameLocalizations = null, IDictionary<string, string> descriptionLocalizations = null, int? minLength = null, int? maxLength = null, params ApplicationCommandOptionChoiceProperties[] choices) Parameters name string The name of the option to add. type ApplicationCommandOptionType The type of this option. description string The description of this option. isRequired bool? If this option is required for this command. isDefault bool If this option is the default option. isAutocomplete bool If this option supports autocomplete. minValue double? The smallest number value the user can input. maxValue double? The largest number value the user can input. options List<SlashCommandOptionBuilder> The options of the option to add. channelTypes List<ChannelType> The allowed channel types for this option. nameLocalizations IDictionary<string, string> Localization dictionary for the description field of this command. descriptionLocalizations IDictionary<string, string> Localization dictionary for the description field of this command. minLength int? maxLength int? choices ApplicationCommandOptionChoiceProperties[] The choices of this option. Returns SlashCommandOptionBuilder The current builder. AddOptions(params SlashCommandOptionBuilder[]) Adds a collection of options to the current option. public SlashCommandOptionBuilder AddOptions(params SlashCommandOptionBuilder[] options) Parameters options SlashCommandOptionBuilder[] The collection of options to add. Returns SlashCommandOptionBuilder The current builder. Build() Builds the current option. public ApplicationCommandOptionProperties Build() Returns ApplicationCommandOptionProperties The built version of this option. WithAutocomplete(bool) Sets the current builders autocomplete field. public SlashCommandOptionBuilder WithAutocomplete(bool value) Parameters value bool The value to set. Returns SlashCommandOptionBuilder The current builder. WithDefault(bool) Sets the current builders default field. public SlashCommandOptionBuilder WithDefault(bool value) Parameters value bool The value to set. Returns SlashCommandOptionBuilder The current builder. WithDescription(string) Sets the current builders description. public SlashCommandOptionBuilder WithDescription(string description) Parameters description string The description to set. Returns SlashCommandOptionBuilder The current builder. WithDescriptionLocalizations(IDictionary<string, string>) Sets the DescriptionLocalizations collection. public SlashCommandOptionBuilder WithDescriptionLocalizations(IDictionary<string, string> descriptionLocalizations) Parameters descriptionLocalizations IDictionary<string, string> The localization dictionary to use for the description field of this command option. Returns SlashCommandOptionBuilder The current builder. Exceptions ArgumentNullException Thrown if descriptionLocalizations is null. ArgumentException Thrown if any dictionary key is an invalid locale string. WithMaxLength(int) Sets the current builders max length field. public SlashCommandOptionBuilder WithMaxLength(int length) Parameters length int The value to set. Returns SlashCommandOptionBuilder The current builder. WithMaxValue(double) Sets the current builders max value field. public SlashCommandOptionBuilder WithMaxValue(double value) Parameters value double The value to set. Returns SlashCommandOptionBuilder The current builder. WithMinLength(int) Sets the current builders min length field. public SlashCommandOptionBuilder WithMinLength(int length) Parameters length int The value to set. Returns SlashCommandOptionBuilder The current builder. WithMinValue(double) Sets the current builders min value field. public SlashCommandOptionBuilder WithMinValue(double value) Parameters value double The value to set. Returns SlashCommandOptionBuilder The current builder. WithName(string) Sets the current builders name. public SlashCommandOptionBuilder WithName(string name) Parameters name string The name to set the current option builder. Returns SlashCommandOptionBuilder The current builder. WithNameLocalizations(IDictionary<string, string>) Sets the NameLocalizations collection. public SlashCommandOptionBuilder WithNameLocalizations(IDictionary<string, string> nameLocalizations) Parameters nameLocalizations IDictionary<string, string> The localization dictionary to use for the name field of this command option. Returns SlashCommandOptionBuilder The current builder. Exceptions ArgumentNullException Thrown if nameLocalizations is null. ArgumentException Thrown if any dictionary key is an invalid locale string. WithRequired(bool) Sets the current builders required field. public SlashCommandOptionBuilder WithRequired(bool value) Parameters value bool The value to set. Returns SlashCommandOptionBuilder The current builder. WithType(ApplicationCommandOptionType) Sets the current type of this builder. public SlashCommandOptionBuilder WithType(ApplicationCommandOptionType type) Parameters type ApplicationCommandOptionType The type to set. Returns SlashCommandOptionBuilder The current builder."
  },
  "api/Discord.SlashCommandProperties.html": {
    "href": "api/Discord.SlashCommandProperties.html",
    "title": "Class SlashCommandProperties | Discord.Net Documentation",
    "keywords": "Class SlashCommandProperties Namespace Discord Assembly Discord.Net.Core.dll Represents a class used to create slash commands. public class SlashCommandProperties : ApplicationCommandProperties Inheritance object ApplicationCommandProperties SlashCommandProperties Inherited Members ApplicationCommandProperties.Name ApplicationCommandProperties.IsDefaultPermission ApplicationCommandProperties.NameLocalizations ApplicationCommandProperties.DescriptionLocalizations ApplicationCommandProperties.IsDMEnabled ApplicationCommandProperties.IsNsfw ApplicationCommandProperties.DefaultMemberPermissions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description Gets or sets the description of this command. public Optional<string> Description { get; set; } Property Value Optional<string> Options Gets or sets the options for this command. public Optional<List<ApplicationCommandOptionProperties>> Options { get; set; } Property Value Optional<List<ApplicationCommandOptionProperties>>"
  },
  "api/Discord.SnowflakeUtils.html": {
    "href": "api/Discord.SnowflakeUtils.html",
    "title": "Class SnowflakeUtils | Discord.Net Documentation",
    "keywords": "Class SnowflakeUtils Namespace Discord Assembly Discord.Net.Core.dll Provides a series of helper methods for handling snowflake identifiers. public static class SnowflakeUtils Inheritance object SnowflakeUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FromSnowflake(ulong) Resolves the time of which the snowflake is generated. public static DateTimeOffset FromSnowflake(ulong value) Parameters value ulong The snowflake identifier to resolve. Returns DateTimeOffset A DateTimeOffset representing the time for when the object is generated. ToSnowflake(DateTimeOffset) Generates a pseudo-snowflake identifier with a DateTimeOffset. public static ulong ToSnowflake(DateTimeOffset value) Parameters value DateTimeOffset The time to be used in the new snowflake. Returns ulong A ulong representing the newly generated snowflake identifier."
  },
  "api/Discord.SpotifyGame.html": {
    "href": "api/Discord.SpotifyGame.html",
    "title": "Class SpotifyGame | Discord.Net Documentation",
    "keywords": "Class SpotifyGame Namespace Discord Assembly Discord.Net.Core.dll A user's activity for listening to a song on Spotify. public class SpotifyGame : Game, IActivity Inheritance object Game SpotifyGame Implements IActivity Inherited Members Game.Name Game.Type Game.Flags Game.Details object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties AlbumArtUrl Gets the URL of the album art. public string AlbumArtUrl { get; } Property Value string A URL pointing to the album art of the track (e.g. https://i.scdn.co/image/ba2fd8823d42802c2f8738db0b33a4597f2f39e7). AlbumTitle Gets the Spotify album title of the song. public string AlbumTitle { get; } Property Value string A string containing the name of the album (e.g. AVĪCI (01)). Artists Gets the song's artist(s). public IReadOnlyCollection<string> Artists { get; } Property Value IReadOnlyCollection<string> A collection of string containing all artists featured in the track (e.g. Avicii; Rita Ora). Duration Gets the duration of the song. public TimeSpan? Duration { get; } Property Value TimeSpan? A TimeSpan containing the duration of the song. Elapsed Gets the elapsed duration of the song. public TimeSpan? Elapsed { get; } Property Value TimeSpan? A TimeSpan containing the elapsed duration of the song. EndsAt Gets the date when the track ends. public DateTimeOffset? EndsAt { get; } Property Value DateTimeOffset? A DateTimeOffset containing the finish timestamp of the song. Remaining Gets the remaining duration of the song. public TimeSpan? Remaining { get; } Property Value TimeSpan? A TimeSpan containing the remaining duration of the song. SessionId Gets the session ID of the song. public string SessionId { get; } Property Value string A string containing the session ID. Remarks The purpose of this property is currently unknown. StartedAt Gets the date when the track started playing. public DateTimeOffset? StartedAt { get; } Property Value DateTimeOffset? A DateTimeOffset containing the start timestamp of the song. TrackId Gets the track ID of the song. public string TrackId { get; } Property Value string A string containing the Spotify ID of the track (e.g. 7DoN0sCGIT9IcLrtBDm4f0). TrackTitle Gets the track title of the song. public string TrackTitle { get; } Property Value string A string containing the name of the song (e.g. Lonely Together (feat. Rita Ora)). TrackUrl Gets the direct Spotify URL of the track. public string TrackUrl { get; } Property Value string A URL pointing directly to the track on Spotify. (e.g. https://open.spotify.com/track/7DoN0sCGIT9IcLrtBDm4f0). Methods ToString() Gets the full information of the song. public override string ToString() Returns string A string containing the full information of the song (e.g. Avicii, Rita Ora - Lonely Together (feat. Rita Ora) (3:08)"
  },
  "api/Discord.StageInstanceProperties.html": {
    "href": "api/Discord.StageInstanceProperties.html",
    "title": "Class StageInstanceProperties | Discord.Net Documentation",
    "keywords": "Class StageInstanceProperties Namespace Discord Assembly Discord.Net.Core.dll Represents properties to use when modifying a stage instance. public class StageInstanceProperties Inheritance object StageInstanceProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties PrivacyLevel Gets or sets the privacy level of the stage. public Optional<StagePrivacyLevel> PrivacyLevel { get; set; } Property Value Optional<StagePrivacyLevel> Topic Gets or sets the topic of the stage. public Optional<string> Topic { get; set; } Property Value Optional<string>"
  },
  "api/Discord.StagePrivacyLevel.html": {
    "href": "api/Discord.StagePrivacyLevel.html",
    "title": "Enum StagePrivacyLevel | Discord.Net Documentation",
    "keywords": "Enum StagePrivacyLevel Namespace Discord Assembly Discord.Net.Core.dll Represents the privacy level of a stage. public enum StagePrivacyLevel Fields GuildOnly = 2 The Stage instance is visible to only guild members. Public = 1 The Stage instance is visible publicly, such as on Stage Discovery."
  },
  "api/Discord.StickerFormatType.html": {
    "href": "api/Discord.StickerFormatType.html",
    "title": "Enum StickerFormatType | Discord.Net Documentation",
    "keywords": "Enum StickerFormatType Namespace Discord Assembly Discord.Net.Core.dll Defines the types of formats for stickers. public enum StickerFormatType Fields Apng = 2 The sticker format type is apng. Lottie = 3 The sticker format type is lottie. None = 0 Default value for a sticker format type. Png = 1 The sticker format type is png."
  },
  "api/Discord.StickerPack-1.html": {
    "href": "api/Discord.StickerPack-1.html",
    "title": "Class StickerPack<TSticker> | Discord.Net Documentation",
    "keywords": "Class StickerPack<TSticker> Namespace Discord Assembly Discord.Net.Core.dll Represents a discord sticker pack. public class StickerPack<TSticker> where TSticker : ISticker Type Parameters TSticker The type of the stickers within the collection. Inheritance object StickerPack<TSticker> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BannerAssetId Gets the id of the sticker pack's banner image public ulong BannerAssetId { get; } Property Value ulong CoverStickerId Gets the id of a sticker in the pack which is shown as the pack's icon. public ulong? CoverStickerId { get; } Property Value ulong? Description Gets the description of the sticker pack. public string Description { get; } Property Value string Id Gets the id of the sticker pack. public ulong Id { get; } Property Value ulong Name Gets the name of the sticker pack. public string Name { get; } Property Value string SkuId Gets the id of the pack's SKU. public ulong SkuId { get; } Property Value ulong Stickers Gets a collection of the stickers in the pack. public IReadOnlyCollection<TSticker> Stickers { get; } Property Value IReadOnlyCollection<TSticker>"
  },
  "api/Discord.StickerProperties.html": {
    "href": "api/Discord.StickerProperties.html",
    "title": "Class StickerProperties | Discord.Net Documentation",
    "keywords": "Class StickerProperties Namespace Discord Assembly Discord.Net.Core.dll Represents a class used to modify stickers. public class StickerProperties Inheritance object StickerProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description Gets or sets the description of the sticker. public Optional<string> Description { get; set; } Property Value Optional<string> Name Gets or sets the name of the sticker. public Optional<string> Name { get; set; } Property Value Optional<string> Tags Gets or sets the tags of the sticker. public Optional<IEnumerable<string>> Tags { get; set; } Property Value Optional<IEnumerable<string>>"
  },
  "api/Discord.StickerType.html": {
    "href": "api/Discord.StickerType.html",
    "title": "Enum StickerType | Discord.Net Documentation",
    "keywords": "Enum StickerType Namespace Discord Assembly Discord.Net.Core.dll Represents a type of sticker.. public enum StickerType Fields Guild = 2 Represents a sticker that was created within a guild. Standard = 1 Represents a discord standard sticker, this type of sticker cannot be modified by an application."
  },
  "api/Discord.StreamingGame.html": {
    "href": "api/Discord.StreamingGame.html",
    "title": "Class StreamingGame | Discord.Net Documentation",
    "keywords": "Class StreamingGame Namespace Discord Assembly Discord.Net.Core.dll A user's activity for streaming on services such as Twitch. public class StreamingGame : Game, IActivity Inheritance object Game StreamingGame Implements IActivity Inherited Members Game.Name Game.Type Game.Flags Game.Details object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors StreamingGame(string, string) Creates a new StreamingGame based on the name on the stream URL. public StreamingGame(string name, string url) Parameters name string The name of the stream. url string The URL of the stream. Properties Url Gets the URL of the stream. public string Url { get; } Property Value string Methods ToString() Gets the name of the stream. public override string ToString() Returns string"
  },
  "api/Discord.SubscriptionOwnerType.html": {
    "href": "api/Discord.SubscriptionOwnerType.html",
    "title": "Enum SubscriptionOwnerType | Discord.Net Documentation",
    "keywords": "Enum SubscriptionOwnerType Namespace Discord Assembly Discord.Net.Core.dll public enum SubscriptionOwnerType Fields Guild = 1 The owner of the application subscription is a guild. User = 2 The owner of the application subscription is a user."
  },
  "api/Discord.SystemChannelMessageDeny.html": {
    "href": "api/Discord.SystemChannelMessageDeny.html",
    "title": "Enum SystemChannelMessageDeny | Discord.Net Documentation",
    "keywords": "Enum SystemChannelMessageDeny Namespace Discord Assembly Discord.Net.Core.dll [Flags] public enum SystemChannelMessageDeny Fields GuildBoost = 2 Deny the messages that are sent when a user boosts the guild. GuildSetupTip = 4 Deny the messages that are related to guild setup. None = 0 Deny none of the system channel messages. This will enable all of the system channel messages. RoleSubscriptionPurchase = 16 Deny role subscription purchase and renewal notifications in the guild. RoleSubscriptionPurchaseReplies = 32 Hide role subscription sticker reply buttons in the guild. WelcomeMessage = 1 Deny the messages that are sent when a user joins the guild. WelcomeMessageReply = 8 Deny the reply with sticker button on welcome messages."
  },
  "api/Discord.Tag-1.html": {
    "href": "api/Discord.Tag-1.html",
    "title": "Class Tag<T> | Discord.Net Documentation",
    "keywords": "Class Tag<T> Namespace Discord Assembly Discord.Net.Core.dll public class Tag<T> : ITag Type Parameters T Inheritance object Tag<T> Implements ITag Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Index public int Index { get; } Property Value int Key public ulong Key { get; } Property Value ulong Length public int Length { get; } Property Value int Type public TagType Type { get; } Property Value TagType Value public T Value { get; } Property Value T Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Discord.TagHandling.html": {
    "href": "api/Discord.TagHandling.html",
    "title": "Enum TagHandling | Discord.Net Documentation",
    "keywords": "Enum TagHandling Namespace Discord Assembly Discord.Net.Core.dll Specifies the handling type the tag should use. public enum TagHandling Fields FullName = 4 Resolves to username with discriminator value. (e.g. <@53905483156684800> -> @Voltana#8252). FullNameNoPrefix = 5 Resolves to username with discriminator value without mention prefix. (e.g. <@53905483156684800> -> Voltana#8252). Ignore = 0 Tag handling is ignored (e.g. <@53905483156684800> -> <@53905483156684800>). Name = 2 Resolves to username (e.g. <@53905483156684800> -> @Voltana). NameNoPrefix = 3 Resolves to username without mention prefix (e.g. <@53905483156684800> -> Voltana). Remove = 1 Removes the tag entirely. Sanitize = 6 Sanitizes the tag (e.g. <@53905483156684800> -> <@53905483156684800> (w/ nbsp)). See Also MentionUtils Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling)"
  },
  "api/Discord.TagType.html": {
    "href": "api/Discord.TagType.html",
    "title": "Enum TagType | Discord.Net Documentation",
    "keywords": "Enum TagType Namespace Discord Assembly Discord.Net.Core.dll Specifies the type of Discord tag. public enum TagType Fields ChannelMention = 1 The object is a channel mention. Emoji = 5 The object is an emoji. EveryoneMention = 3 The object is an everyone mention. HereMention = 4 The object is a here mention. RoleMention = 2 The object is a role mention. UserMention = 0 The object is an user mention."
  },
  "api/Discord.TargetUserType.html": {
    "href": "api/Discord.TargetUserType.html",
    "title": "Enum TargetUserType | Discord.Net Documentation",
    "keywords": "Enum TargetUserType Namespace Discord Assembly Discord.Net.Core.dll public enum TargetUserType Fields EmbeddedApplication = 2 The invite is for embedded application. Stream = 1 The invite is for a Go Live stream. Undefined = 0 The invite whose target user type is not defined."
  },
  "api/Discord.TextChannelProperties.html": {
    "href": "api/Discord.TextChannelProperties.html",
    "title": "Class TextChannelProperties | Discord.Net Documentation",
    "keywords": "Class TextChannelProperties Namespace Discord Assembly Discord.Net.Core.dll Provides properties that are used to modify an ITextChannel with the specified changes. public class TextChannelProperties : GuildChannelProperties Inheritance object GuildChannelProperties TextChannelProperties Derived ForumChannelProperties ThreadChannelProperties VoiceChannelProperties Inherited Members GuildChannelProperties.Name GuildChannelProperties.Position GuildChannelProperties.CategoryId GuildChannelProperties.PermissionOverwrites GuildChannelProperties.Flags object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples The following example uses ModifyAsync to apply changes specified in the properties, var channel = _client.GetChannel(id) as ITextChannel; if (channel == null) return; await channel.ModifyAsync(x => { x.Name = \"cool-guys-only\"; x.Topic = \"This channel is only for cool guys and adults!!!\"; x.Position = channel.Position - 1; x.IsNsfw = true; }); Properties AutoArchiveDuration Gets or sets the auto archive duration. public Optional<ThreadArchiveDuration> AutoArchiveDuration { get; set; } Property Value Optional<ThreadArchiveDuration> See Also ModifyAsync(Action<TextChannelProperties>, RequestOptions) DefaultSlowModeInterval Gets or sets the default slow-mode for threads in this channel. public Optional<int> DefaultSlowModeInterval { get; set; } Property Value Optional<int> Remarks Setting this value to anything above zero will require each user to wait X seconds before sending another message; setting this value to 0 will disable slow-mode for child threads. note Users with ManageMessages or ManageChannels will be exempt from slow-mode. Exceptions ArgumentOutOfRangeException Thrown if the value does not fall within [0, 21600]. See Also ModifyAsync(Action<TextChannelProperties>, RequestOptions) IsNsfw Gets or sets whether this channel should be flagged as NSFW. public Optional<bool> IsNsfw { get; set; } Property Value Optional<bool> Remarks Setting this value to true will mark the channel as NSFW (Not Safe For Work) and will prompt the user about its possibly mature nature before they may view the channel; setting this value to false will remove the NSFW indicator. See Also ModifyAsync(Action<TextChannelProperties>, RequestOptions) SlowModeInterval Gets or sets the slow-mode ratelimit in seconds for this channel. public Optional<int> SlowModeInterval { get; set; } Property Value Optional<int> Remarks Setting this value to anything above zero will require each user to wait X seconds before sending another message; setting this value to 0 will disable slow-mode for this channel. note Users with ManageMessages or ManageChannels will be exempt from slow-mode. Exceptions ArgumentOutOfRangeException Thrown if the value does not fall within [0, 21600]. See Also ModifyAsync(Action<TextChannelProperties>, RequestOptions) Topic Gets or sets the topic of the channel. public Optional<string> Topic { get; set; } Property Value Optional<string> Remarks Setting this value to any string other than null or Empty will set the channel topic or description to the desired value. See Also ModifyAsync(Action<TextChannelProperties>, RequestOptions) See Also ModifyAsync(Action<TextChannelProperties>, RequestOptions)"
  },
  "api/Discord.TextInputBuilder.html": {
    "href": "api/Discord.TextInputBuilder.html",
    "title": "Class TextInputBuilder | Discord.Net Documentation",
    "keywords": "Class TextInputBuilder Namespace Discord Assembly Discord.Net.Core.dll public class TextInputBuilder Inheritance object TextInputBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TextInputBuilder() Creates a new instance of a TextInputBuilder. public TextInputBuilder() TextInputBuilder(string, string, TextInputStyle, string, int?, int?, bool?, string) Creates a new instance of a TextInputBuilder. public TextInputBuilder(string label, string customId, TextInputStyle style = TextInputStyle.Short, string placeholder = null, int? minLength = null, int? maxLength = null, bool? required = null, string value = null) Parameters label string The text input's label. customId string The text input's custom id. style TextInputStyle The text input's style. placeholder string The text input's placeholder. minLength int? The text input's minimum length. maxLength int? The text input's maximum length. required bool? The text input's required value. value string Fields LargestMaxLength public const int LargestMaxLength = 4000 Field Value int MaxPlaceholderLength The max length of a Placeholder. public const int MaxPlaceholderLength = 100 Field Value int Properties CustomId Gets or sets the custom id of the current text input. public string CustomId { get; set; } Property Value string Exceptions ArgumentException CustomId length exceeds MaxCustomIdLength ArgumentException CustomId length subceeds 1. Label Gets or sets the label of the current text input. public string Label { get; set; } Property Value string MaxLength Gets or sets the maximum length of the current text input. public int? MaxLength { get; set; } Property Value int? Exceptions ArgumentOutOfRangeException MaxLength is less than 0. ArgumentOutOfRangeException MaxLength is greater than LargestMaxLength. ArgumentOutOfRangeException MaxLength is less than MinLength. MinLength Gets or sets the minimum length of the current text input. public int? MinLength { get; set; } Property Value int? Exceptions ArgumentOutOfRangeException MinLength is less than 0. ArgumentOutOfRangeException MinLength is greater than LargestMaxLength. ArgumentOutOfRangeException MinLength is greater than MaxLength. Placeholder Gets or sets the placeholder of the current text input. public string Placeholder { get; set; } Property Value string Exceptions ArgumentException Placeholder is longer than MaxPlaceholderLength characters Required Gets or sets whether the user is required to input text. public bool? Required { get; set; } Property Value bool? Style Gets or sets the style of the current text input. public TextInputStyle Style { get; set; } Property Value TextInputStyle Value Gets or sets the default value of the text input. public string Value { get; set; } Property Value string Exceptions ArgumentOutOfRangeException Value.Length is less than 0. ArgumentOutOfRangeException Value.Length is greater than LargestMaxLength or MaxLength. ArgumentException Style is Short and Value contains a new line character. Methods Build() public TextInputComponent Build() Returns TextInputComponent WithCustomId(string) Sets the custom id of the current builder. public TextInputBuilder WithCustomId(string customId) Parameters customId string The value to set. Returns TextInputBuilder The current builder. WithLabel(string) Sets the label of the current builder. public TextInputBuilder WithLabel(string label) Parameters label string The value to set. Returns TextInputBuilder The current builder. WithMaxLength(int) Sets the maximum length of the current builder. public TextInputBuilder WithMaxLength(int maxLength) Parameters maxLength int The value to set. Returns TextInputBuilder The current builder. WithMinLength(int) Sets the minimum length of the current builder. public TextInputBuilder WithMinLength(int minLength) Parameters minLength int The value to set. Returns TextInputBuilder The current builder. WithPlaceholder(string) Sets the placeholder of the current builder. public TextInputBuilder WithPlaceholder(string placeholder) Parameters placeholder string The value to set. Returns TextInputBuilder The current builder. WithRequired(bool) Sets the required value of the current builder. public TextInputBuilder WithRequired(bool required) Parameters required bool The value to set. Returns TextInputBuilder The current builder. WithStyle(TextInputStyle) Sets the style of the current builder. public TextInputBuilder WithStyle(TextInputStyle style) Parameters style TextInputStyle The value to set. Returns TextInputBuilder The current builder. WithValue(string) Sets the value of the current builder. public TextInputBuilder WithValue(string value) Parameters value string The value to set Returns TextInputBuilder The current builder."
  },
  "api/Discord.TextInputComponent.html": {
    "href": "api/Discord.TextInputComponent.html",
    "title": "Class TextInputComponent | Discord.Net Documentation",
    "keywords": "Class TextInputComponent Namespace Discord Assembly Discord.Net.Core.dll Represents a IMessageComponent text input. public class TextInputComponent : IMessageComponent Inheritance object TextInputComponent Implements IMessageComponent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CustomId Gets the custom id of the component if possible; otherwise null. public string CustomId { get; } Property Value string Label Gets the label of the component; this is the text shown above it. public string Label { get; } Property Value string MaxLength Gets the maximum length of the inputted text. public int? MaxLength { get; } Property Value int? MinLength Gets the minimum length of the inputted text. public int? MinLength { get; } Property Value int? Placeholder Gets the placeholder of the component. public string Placeholder { get; } Property Value string Required Gets whether users are required to input text. public bool? Required { get; } Property Value bool? Style Gets the style of the component. public TextInputStyle Style { get; } Property Value TextInputStyle Type Gets the ComponentType of this Message Component. public ComponentType Type { get; } Property Value ComponentType Value Gets the default value of the component. public string Value { get; } Property Value string"
  },
  "api/Discord.TextInputStyle.html": {
    "href": "api/Discord.TextInputStyle.html",
    "title": "Enum TextInputStyle | Discord.Net Documentation",
    "keywords": "Enum TextInputStyle Namespace Discord Assembly Discord.Net.Core.dll public enum TextInputStyle Fields Paragraph = 2 Intended for longer or multiline text. Short = 1 Intended for short, single-line text."
  },
  "api/Discord.ThreadArchiveDuration.html": {
    "href": "api/Discord.ThreadArchiveDuration.html",
    "title": "Enum ThreadArchiveDuration | Discord.Net Documentation",
    "keywords": "Enum ThreadArchiveDuration Namespace Discord Assembly Discord.Net.Core.dll Represents the thread auto archive duration. public enum ThreadArchiveDuration Fields OneDay = 1440 One day (1440 minutes). OneHour = 60 One hour (60 minutes). OneWeek = 10080 One week (10080 minutes). ThreeDays = 4320 Three days (4320 minutes)."
  },
  "api/Discord.ThreadChannelProperties.html": {
    "href": "api/Discord.ThreadChannelProperties.html",
    "title": "Class ThreadChannelProperties | Discord.Net Documentation",
    "keywords": "Class ThreadChannelProperties Namespace Discord Assembly Discord.Net.Core.dll Provides properties that are used to modify an IThreadChannel with the specified changes. public class ThreadChannelProperties : TextChannelProperties Inheritance object GuildChannelProperties TextChannelProperties ThreadChannelProperties Inherited Members TextChannelProperties.Topic TextChannelProperties.IsNsfw TextChannelProperties.SlowModeInterval TextChannelProperties.AutoArchiveDuration TextChannelProperties.DefaultSlowModeInterval GuildChannelProperties.Name GuildChannelProperties.Position GuildChannelProperties.CategoryId GuildChannelProperties.PermissionOverwrites GuildChannelProperties.Flags object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AppliedTags Gets or sets the tags applied to a forum thread public Optional<IEnumerable<ulong>> AppliedTags { get; set; } Property Value Optional<IEnumerable<ulong>> See Also ModifyAsync(Action<ThreadChannelProperties>, RequestOptions) Archived Gets or sets whether or not the thread is archived. public Optional<bool> Archived { get; set; } Property Value Optional<bool> See Also ModifyAsync(Action<ThreadChannelProperties>, RequestOptions) Locked Gets or sets whether or not the thread is locked. public Optional<bool> Locked { get; set; } Property Value Optional<bool> See Also ModifyAsync(Action<ThreadChannelProperties>, RequestOptions) See Also ModifyAsync(Action<ThreadChannelProperties>, RequestOptions)"
  },
  "api/Discord.ThreadType.html": {
    "href": "api/Discord.ThreadType.html",
    "title": "Enum ThreadType | Discord.Net Documentation",
    "keywords": "Enum ThreadType Namespace Discord Assembly Discord.Net.Core.dll Represents types of threads. public enum ThreadType Fields NewsThread = 10 Represents a temporary sub-channel within a GUILD_NEWS channel. PrivateThread = 12 Represents a temporary sub-channel within a GUILD_TEXT channel that is only viewable by those invited and those with the MANAGE_THREADS permission PublicThread = 11 Represents a temporary sub-channel within a GUILD_TEXT channel."
  },
  "api/Discord.TimestampTag.html": {
    "href": "api/Discord.TimestampTag.html",
    "title": "Struct TimestampTag | Discord.Net Documentation",
    "keywords": "Struct TimestampTag Namespace Discord Assembly Discord.Net.Core.dll Represents a class used to make timestamps in messages. see https://discord.com/developers/docs/reference#message-formatting-timestamp-styles. public readonly struct TimestampTag Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors TimestampTag(DateTimeOffset, TimestampTagStyles?) Creates a new TimestampTag from the provided time. public TimestampTag(DateTimeOffset time, TimestampTagStyles? style = null) Parameters time DateTimeOffset The time for this timestamp tag. style TimestampTagStyles? The style for this timestamp tag. Properties Style Gets the style of this tag. null if none was provided. public TimestampTagStyles? Style { get; } Property Value TimestampTagStyles? Time Gets the time for this timestamp tag. public DateTimeOffset Time { get; } Property Value DateTimeOffset Methods FormatFromDateTime(DateTime, TimestampTagStyles) Immediately formats the provided time and style into a timestamp string. public static string FormatFromDateTime(DateTime time, TimestampTagStyles style) Parameters time DateTime The time of this timestamp tag. style TimestampTagStyles The style for this timestamp tag. Returns string The newly create timestamp string. FormatFromDateTimeOffset(DateTimeOffset, TimestampTagStyles) Immediately formats the provided time and style into a timestamp string. public static string FormatFromDateTimeOffset(DateTimeOffset time, TimestampTagStyles style) Parameters time DateTimeOffset The time of this timestamp tag. style TimestampTagStyles The style for this timestamp tag. Returns string The newly create timestamp string. FromDateTime(DateTime, TimestampTagStyles?) Creates a new timestamp tag with the specified DateTime object. public static TimestampTag FromDateTime(DateTime time, TimestampTagStyles? style = null) Parameters time DateTime The time of this timestamp tag. style TimestampTagStyles? The style for this timestamp tag. Returns TimestampTag The newly create timestamp tag. FromDateTimeOffset(DateTimeOffset, TimestampTagStyles?) Creates a new timestamp tag with the specified DateTimeOffset object. public static TimestampTag FromDateTimeOffset(DateTimeOffset time, TimestampTagStyles? style = null) Parameters time DateTimeOffset The time of this timestamp tag. style TimestampTagStyles? The style for this timestamp tag. Returns TimestampTag The newly create timestamp tag. ToString() Converts the current timestamp tag to the string representation supported by discord. If the Time is null then the default 0 will be used. public override string ToString() Returns string A string that is compatible in a discord message, ex: <t:1625944201:f> Remarks Will use the provided Style if provided. If this value is null, it will default to ShortDateTime. ToString(TimestampTagStyles) Converts the current timestamp tag to the string representation supported by discord. If the Time is null then the default 0 will be used. public string ToString(TimestampTagStyles style) Parameters style TimestampTagStyles The formatting style for this tag. Returns string A string that is compatible in a discord message, ex: <t:1625944201:f>"
  },
  "api/Discord.TimestampTagStyles.html": {
    "href": "api/Discord.TimestampTagStyles.html",
    "title": "Enum TimestampTagStyles | Discord.Net Documentation",
    "keywords": "Enum TimestampTagStyles Namespace Discord Assembly Discord.Net.Core.dll Represents a set of styles to use with a TimestampTag public enum TimestampTagStyles Fields LongDate = 68 A long date string: 20 April 2021 LongDateTime = 70 A long datetime string: Tuesday, 20 April 2021 16:20 LongTime = 84 A long time string: 16:20:30 Relative = 82 The relative time to the user: 2 months ago ShortDate = 100 A short date string: 20/04/2021 ShortDateTime = 102 A short datetime string: 20 April 2021 16:20 ShortTime = 116 A short time string: 16:20"
  },
  "api/Discord.TokenType.html": {
    "href": "api/Discord.TokenType.html",
    "title": "Enum TokenType | Discord.Net Documentation",
    "keywords": "Enum TokenType Namespace Discord Assembly Discord.Net.Core.dll Specifies the type of token to use with the client. public enum TokenType Fields Bearer = 0 An OAuth2 token type. Bot = 1 A bot token type. Webhook = 2 A webhook token type."
  },
  "api/Discord.TokenUtils.html": {
    "href": "api/Discord.TokenUtils.html",
    "title": "Class TokenUtils | Discord.Net Documentation",
    "keywords": "Class TokenUtils Namespace Discord Assembly Discord.Net.Core.dll Provides a series of helper methods for handling Discord login tokens. public static class TokenUtils Inheritance object TokenUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ValidateToken(TokenType, string) Checks the validity of the supplied token of a specific type. public static void ValidateToken(TokenType tokenType, string token) Parameters tokenType TokenType The type of token to validate. token string The token value to validate. Exceptions ArgumentNullException Thrown when the supplied token string is null, empty, or contains only whitespace. ArgumentException Thrown when the supplied TokenType or token value is invalid."
  },
  "api/Discord.UserCommandBuilder.html": {
    "href": "api/Discord.UserCommandBuilder.html",
    "title": "Class UserCommandBuilder | Discord.Net Documentation",
    "keywords": "Class UserCommandBuilder Namespace Discord Assembly Discord.Net.Core.dll A class used to build user commands. public class UserCommandBuilder Inheritance object UserCommandBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields MaxNameLength Returns the maximum length a commands name allowed by Discord. public const int MaxNameLength = 32 Field Value int Properties DefaultMemberPermissions Gets or sets the default permission required to use this slash command. public GuildPermission? DefaultMemberPermissions { get; set; } Property Value GuildPermission? IsDMEnabled Gets or sets whether or not this command can be used in DMs. public bool IsDMEnabled { get; set; } Property Value bool IsDefaultPermission Gets or sets whether the command is enabled by default when the app is added to a guild. public bool IsDefaultPermission { get; set; } Property Value bool IsNsfw Gets or sets whether or not this command is age restricted. public bool IsNsfw { get; set; } Property Value bool Name Gets or sets the name of this User command. public string Name { get; set; } Property Value string NameLocalizations Gets the localization dictionary for the name field of this command. public IReadOnlyDictionary<string, string> NameLocalizations { get; } Property Value IReadOnlyDictionary<string, string> Methods AddNameLocalization(string, string) Adds a new entry to the NameLocalizations collection. public UserCommandBuilder AddNameLocalization(string locale, string name) Parameters locale string Locale of the entry. name string Localized string for the name field. Returns UserCommandBuilder The current builder. Exceptions ArgumentException Thrown if locale is an invalid locale string. Build() Build the current builder into a UserCommandProperties class. public UserCommandProperties Build() Returns UserCommandProperties A UserCommandProperties that can be used to create user commands. WithDMPermission(bool) Sets whether or not this command can be used in dms. public UserCommandBuilder WithDMPermission(bool permission) Parameters permission bool true if the command is available in dms, otherwise false. Returns UserCommandBuilder The current builder. WithDefaultMemberPermissions(GuildPermission?) Sets the default member permissions required to use this application command. public UserCommandBuilder WithDefaultMemberPermissions(GuildPermission? permissions) Parameters permissions GuildPermission? The permissions required to use this command. Returns UserCommandBuilder The current builder. WithDefaultPermission(bool) Sets the default permission of the current command. public UserCommandBuilder WithDefaultPermission(bool isDefaultPermission) Parameters isDefaultPermission bool The default permission value to set. Returns UserCommandBuilder The current builder. WithName(string) Sets the field name. public UserCommandBuilder WithName(string name) Parameters name string The value to set the field name to. Returns UserCommandBuilder The current builder. WithNameLocalizations(IDictionary<string, string>) Sets the NameLocalizations collection. public UserCommandBuilder WithNameLocalizations(IDictionary<string, string> nameLocalizations) Parameters nameLocalizations IDictionary<string, string> The localization dictionary to use for the name field of this command. Returns UserCommandBuilder The current builder. Exceptions ArgumentNullException Thrown if nameLocalizations is null. ArgumentException Thrown if any dictionary key is an invalid locale string. WithNsfw(bool) Sets whether or not this command is age restricted. public UserCommandBuilder WithNsfw(bool permission) Parameters permission bool true if the command is age restricted, otherwise false. Returns UserCommandBuilder The current builder."
  },
  "api/Discord.UserCommandProperties.html": {
    "href": "api/Discord.UserCommandProperties.html",
    "title": "Class UserCommandProperties | Discord.Net Documentation",
    "keywords": "Class UserCommandProperties Namespace Discord Assembly Discord.Net.Core.dll A class used to create User commands. public class UserCommandProperties : ApplicationCommandProperties Inheritance object ApplicationCommandProperties UserCommandProperties Inherited Members ApplicationCommandProperties.Name ApplicationCommandProperties.IsDefaultPermission ApplicationCommandProperties.NameLocalizations ApplicationCommandProperties.DescriptionLocalizations ApplicationCommandProperties.IsDMEnabled ApplicationCommandProperties.IsNsfw ApplicationCommandProperties.DefaultMemberPermissions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Discord.UserExtensions.html": {
    "href": "api/Discord.UserExtensions.html",
    "title": "Class UserExtensions | Discord.Net Documentation",
    "keywords": "Class UserExtensions Namespace Discord Assembly Discord.Net.Core.dll An extension class for various Discord user objects. public static class UserExtensions Inheritance object UserExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BanAsync(IGuildUser, int, string, RequestOptions) Bans the user from the guild and optionally prunes their recent messages. public static Task BanAsync(this IGuildUser user, int pruneDays = 0, string reason = null, RequestOptions options = null) Parameters user IGuildUser The user to ban. pruneDays int The number of days to remove messages from this user for - must be between [0, 7] reason string The reason of the ban to be written in the audit log. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for banning a user. Exceptions ArgumentException pruneDays is not between 0 to 7. SendFileAsync(IUser, FileAttachment, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) Sends a file via DM with an optional caption. public static Task<IUserMessage> SendFileAsync(this IUser user, FileAttachment attachment, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, MessageComponent components = null, Embed[] embeds = null) Parameters user IUser The user to send the DM to. attachment FileAttachment The attachment containing the file and description. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The Rich Embed to be sent. options RequestOptions The options to be used when sending the request. components MessageComponent The message component to be included with this message. Used for interactions. embeds Embed[] A array of Embeds to send with this response. Max 10. Returns Task<IUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Remarks This method attempts to send an attachment as a direct-message to the user. warning Please note that this method will throw an HttpException if the user cannot receive DMs due to privacy reasons or if the user has the sender blocked. You may want to consider catching for DiscordCode 50007 when using this method. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. SendFileAsync(IUser, Stream, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) Sends a file to this message channel with an optional caption. public static Task<IUserMessage> SendFileAsync(this IUser user, Stream stream, string filename, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, MessageComponent components = null, Embed[] embeds = null) Parameters user IUser The user to send the DM to. stream Stream The Stream of the file to be sent. filename string The name of the attachment. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The Rich Embed to be sent. options RequestOptions The options to be used when sending the request. components MessageComponent The message component to be included with this message. Used for interactions. embeds Embed[] A array of Embeds to send with this response. Max 10. Returns Task<IUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example uploads a streamed image that will be called b1nzy.jpg embedded inside a rich embed to the channel. await channel.SendFileAsync(b1nzyStream, \"b1nzy.jpg\", embed: new EmbedBuilder {ImageUrl = \"attachment://b1nzy.jpg\"}.Build()); Remarks This method attempts to send an attachment as a direct-message to the user. warning Please note that this method will throw an HttpException if the user cannot receive DMs due to privacy reasons or if the user has the sender blocked. You may want to consider catching for DiscordCode 50007 when using this method. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. SendFileAsync(IUser, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) Sends a file via DM with an optional caption. public static Task<IUserMessage> SendFileAsync(this IUser user, string filePath, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, MessageComponent components = null, Embed[] embeds = null) Parameters user IUser The user to send the DM to. filePath string The file path of the file. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The Rich Embed to be sent. options RequestOptions The options to be used when sending the request. components MessageComponent The message component to be included with this message. Used for interactions. embeds Embed[] A array of Embeds to send with this response. Max 10. Returns Task<IUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example uploads a local file called wumpus.txt along with the text good discord boi to the channel. await channel.SendFileAsync(\"wumpus.txt\", \"good discord boi\"); The following example uploads a local image called b1nzy.jpg embedded inside a rich embed to the channel. await channel.SendFileAsync(\"b1nzy.jpg\", embed: new EmbedBuilder {ImageUrl = \"attachment://b1nzy.jpg\"}.Build()); Remarks This method attempts to send an attachment as a direct-message to the user. warning Please note that this method will throw an HttpException if the user cannot receive DMs due to privacy reasons or if the user has the sender blocked. You may want to consider catching for DiscordCode 50007 when using this method. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. SendFilesAsync(IUser, IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) Sends a collection of files via DM. public static Task<IUserMessage> SendFilesAsync(this IUser user, IEnumerable<FileAttachment> attachments, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, MessageComponent components = null, Embed[] embeds = null) Parameters user IUser The user to send the DM to. attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The Rich Embed to be sent. options RequestOptions The options to be used when sending the request. components MessageComponent The message component to be included with this message. Used for interactions. embeds Embed[] A array of Embeds to send with this response. Max 10. Returns Task<IUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Remarks This method attempts to send an attachments as a direct-message to the user. warning Please note that this method will throw an HttpException if the user cannot receive DMs due to privacy reasons or if the user has the sender blocked. You may want to consider catching for DiscordCode 50007 when using this method. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. SendMessageAsync(IUser, string, bool, Embed, RequestOptions, AllowedMentions, MessageComponent, Embed[]) Sends a message via DM. public static Task<IUserMessage> SendMessageAsync(this IUser user, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed[] embeds = null) Parameters user IUser The user to send the DM to. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The Rich Embed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. components MessageComponent The message components to be included with this message. Used for interactions. embeds Embed[] A array of Embeds to send with this response. Max 10. Returns Task<IUserMessage> A task that represents the asynchronous send operation. The task result contains the sent message. Remarks This method attempts to send a direct-message to the user. warning Please note that this method will throw an HttpException if the user cannot receive DMs due to privacy reasons or if the user has the sender blocked. You may want to consider catching for DiscordCode 50007 when using this method."
  },
  "api/Discord.UserProperties.html": {
    "href": "api/Discord.UserProperties.html",
    "title": "Enum UserProperties | Discord.Net Documentation",
    "keywords": "Enum UserProperties Namespace Discord Assembly Discord.Net.Core.dll [Flags] public enum UserProperties Fields ActiveDeveloper = 4194304 Flag given to users that are active developers. BotHTTPInteractions = 524288 Flag given to bots that use only outgoing webhooks, exclusively. BugHunterLevel1 = 8 Flag given to users who have participated in the bug report program and are level 1. BugHunterLevel2 = 16384 Flag given to users who have participated in the bug report program and are level 2. DiscordCertifiedModerator = 262144 Flag given to users that are discord certified moderators who has give discord's exam. EarlySupporter = 512 Flag given to users who subscribed to Nitro before games were added. EarlyVerifiedBotDeveloper = 131072 Flag given to users that developed bots and early verified their accounts. HypeSquadBalance = 256 Flag given to users who are in the HypeSquad House of Balance. HypeSquadBravery = 64 Flag given to users who are in the HypeSquad House of Bravery. HypeSquadBrilliance = 128 Flag given to users who are in the HypeSquad House of Brilliance. HypeSquadEvents = 4 Flag given to users in HypeSquad events. None = 0 Default value for flags, when none are given to an account. Partner = 2 Flag given to users who are owners of a partnered Discord server. Staff = 1 Flag given to users who are a Discord employee. System = 4096 Flag given to users who represent Discord (System). TeamUser = 1024 Flag given to users who are part of a team. VerifiedBot = 65536 Flag given to users who are verified bots."
  },
  "api/Discord.UserStatus.html": {
    "href": "api/Discord.UserStatus.html",
    "title": "Enum UserStatus | Discord.Net Documentation",
    "keywords": "Enum UserStatus Namespace Discord Assembly Discord.Net.Core.dll Defines the available Discord user status. public enum UserStatus Fields AFK = 3 The user is AFK. DoNotDisturb = 4 The user is busy. Idle = 2 The user is idle. Invisible = 5 The user is invisible. Offline = 0 The user is offline. Online = 1 The user is online."
  },
  "api/Discord.Utils.ChannelTypeUtils.html": {
    "href": "api/Discord.Utils.ChannelTypeUtils.html",
    "title": "Class ChannelTypeUtils | Discord.Net Documentation",
    "keywords": "Class ChannelTypeUtils Namespace Discord.Utils Assembly Discord.Net.Core.dll public static class ChannelTypeUtils Inheritance object ChannelTypeUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AllChannelTypes() public static List<ChannelType> AllChannelTypes() Returns List<ChannelType>"
  },
  "api/Discord.Utils.ComponentTypeUtils.html": {
    "href": "api/Discord.Utils.ComponentTypeUtils.html",
    "title": "Class ComponentTypeUtils | Discord.Net Documentation",
    "keywords": "Class ComponentTypeUtils Namespace Discord.Utils Assembly Discord.Net.Core.dll public static class ComponentTypeUtils Inheritance object ComponentTypeUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsSelectType(ComponentType) public static bool IsSelectType(this ComponentType type) Parameters type ComponentType Returns bool"
  },
  "api/Discord.Utils.html": {
    "href": "api/Discord.Utils.html",
    "title": "Namespace Discord.Utils | Discord.Net Documentation",
    "keywords": "Namespace Discord.Utils Classes ChannelTypeUtils ComponentTypeUtils"
  },
  "api/Discord.VerificationLevel.html": {
    "href": "api/Discord.VerificationLevel.html",
    "title": "Enum VerificationLevel | Discord.Net Documentation",
    "keywords": "Enum VerificationLevel Namespace Discord Assembly Discord.Net.Core.dll Specifies the verification level the guild uses. public enum VerificationLevel Fields Extreme = 4 Users must fulfill the requirements of High and must have a verified phone on their Discord account. High = 3 Users must fulfill the requirements of Medium and be a member of this guild for at least 10 minutes. Low = 1 Users must have a verified email on their account. Medium = 2 Users must fulfill the requirements of Low and be registered on Discord for at least 5 minutes. None = 0 Users have no additional restrictions on sending messages to this guild."
  },
  "api/Discord.VideoQualityMode.html": {
    "href": "api/Discord.VideoQualityMode.html",
    "title": "Enum VideoQualityMode | Discord.Net Documentation",
    "keywords": "Enum VideoQualityMode Namespace Discord Assembly Discord.Net.Core.dll Represents a video quality mode for voice channels. public enum VideoQualityMode Fields Auto = 1 Discord chooses the quality for optimal performance. Full = 2 720p."
  },
  "api/Discord.VoiceChannelProperties.html": {
    "href": "api/Discord.VoiceChannelProperties.html",
    "title": "Class VoiceChannelProperties | Discord.Net Documentation",
    "keywords": "Class VoiceChannelProperties Namespace Discord Assembly Discord.Net.Core.dll Provides properties that are used to modify an IVoiceChannel with the specified changes. public class VoiceChannelProperties : TextChannelProperties Inheritance object GuildChannelProperties TextChannelProperties VoiceChannelProperties Inherited Members TextChannelProperties.IsNsfw TextChannelProperties.SlowModeInterval TextChannelProperties.AutoArchiveDuration TextChannelProperties.DefaultSlowModeInterval GuildChannelProperties.Name GuildChannelProperties.Position GuildChannelProperties.CategoryId GuildChannelProperties.PermissionOverwrites GuildChannelProperties.Flags object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples The following example uses ModifyAsync to apply changes specified in the properties, var channel = _client.GetChannel(id) as IVoiceChannel; if (channel == null) return; await channel.ModifyAsync(x => { x.UserLimit = 5; }); Properties Bitrate Gets or sets the bitrate of the voice connections in this channel. Must be greater than 8000. public Optional<int> Bitrate { get; set; } Property Value Optional<int> RTCRegion Gets or sets the channel voice region id, automatic when set to null. public Optional<string> RTCRegion { get; set; } Property Value Optional<string> Topic Gets or sets the topic of the channel. public Optional<string> Topic { get; } Property Value Optional<string> Remarks Not supported in voice channels UserLimit Gets or sets the maximum number of users that can be present in a channel, or null if none. public Optional<int?> UserLimit { get; set; } Property Value Optional<int?> VideoQualityMode Get or sets the video quality mode for this channel. public Optional<VideoQualityMode> VideoQualityMode { get; set; } Property Value Optional<VideoQualityMode>"
  },
  "api/Discord.WebSocket.AutoModActionExecutedData.html": {
    "href": "api/Discord.WebSocket.AutoModActionExecutedData.html",
    "title": "Class AutoModActionExecutedData | Discord.Net Documentation",
    "keywords": "Class AutoModActionExecutedData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll public class AutoModActionExecutedData Inheritance object AutoModActionExecutedData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AlertMessageId Gets the id of the system auto moderation messages posted as a result of this action. public ulong AlertMessageId { get; } Property Value ulong Remarks This property will be null if this event does not correspond to an action with type SendAlertMessage. Channel Gets the channel in which user content was posted. public Cacheable<ISocketMessageChannel, ulong> Channel { get; } Property Value Cacheable<ISocketMessageChannel, ulong> Content Gets the user-generated text content. public string Content { get; } Property Value string Remarks This property will be empty if MessageContent is disabled. MatchedContent Gets the substring in content that triggered the rule. public string MatchedContent { get; } Property Value string Remarks This property will be empty if MessageContent is disabled. MatchedKeyword Gets the word or phrase configured in the rule that triggered the rule. public string MatchedKeyword { get; } Property Value string Message Gets the message that triggered the action. public Cacheable<IUserMessage, ulong>? Message { get; } Property Value Cacheable<IUserMessage, ulong>? Remarks This property will be null if the message was blocked by the automod. Rule Gets the id of the rule which action belongs to. public Cacheable<IAutoModRule, ulong> Rule { get; } Property Value Cacheable<IAutoModRule, ulong> TriggerType Gets the trigger type of rule which was triggered. public AutoModTriggerType TriggerType { get; } Property Value AutoModTriggerType User Gets the user which generated the content which triggered the rule. public Cacheable<SocketGuildUser, ulong> User { get; } Property Value Cacheable<SocketGuildUser, ulong>"
  },
  "api/Discord.WebSocket.AutoModRuleUpdatedAuditLogData.html": {
    "href": "api/Discord.WebSocket.AutoModRuleUpdatedAuditLogData.html",
    "title": "Class AutoModRuleUpdatedAuditLogData | Discord.Net Documentation",
    "keywords": "Class AutoModRuleUpdatedAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to an auto moderation rule update. public class AutoModRuleUpdatedAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object AutoModRuleUpdatedAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After Gets the auto moderation rule information after the changes. public SocketAutoModRuleInfo After { get; } Property Value SocketAutoModRuleInfo Before Gets the auto moderation rule information before the changes. public SocketAutoModRuleInfo Before { get; } Property Value SocketAutoModRuleInfo"
  },
  "api/Discord.WebSocket.BaseSocketClient.html": {
    "href": "api/Discord.WebSocket.BaseSocketClient.html",
    "title": "Class BaseSocketClient | Discord.Net Documentation",
    "keywords": "Class BaseSocketClient Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents the base of a WebSocket-based Discord client. public abstract class BaseSocketClient : BaseDiscordClient, IDiscordClient, IDisposable, IAsyncDisposable Inheritance object BaseDiscordClient BaseSocketClient Implements IDiscordClient IDisposable IAsyncDisposable Derived DiscordShardedClient DiscordSocketClient Inherited Members BaseDiscordClient.Log BaseDiscordClient.LoggedIn BaseDiscordClient.LoggedOut BaseDiscordClient.LoginState BaseDiscordClient.TokenType BaseDiscordClient.LoginAsync(TokenType, string, bool) BaseDiscordClient.LogoutAsync() BaseDiscordClient.Dispose() BaseDiscordClient.DisposeAsync() BaseDiscordClient.GetRecommendedShardCountAsync(RequestOptions) BaseDiscordClient.GetBotGatewayAsync(RequestOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DiscordClientExtensions.GetDMChannelAsync(IDiscordClient, ulong) DiscordClientExtensions.GetDMChannelsAsync(IDiscordClient) DiscordClientExtensions.GetGroupChannelAsync(IDiscordClient, ulong) DiscordClientExtensions.GetGroupChannelsAsync(IDiscordClient) DiscordClientExtensions.GetOptimalVoiceRegionAsync(IDiscordClient) DiscordClientExtensions.GetPrivateChannelAsync(IDiscordClient, ulong) ClientExtensions.AddGuildUserAsync(BaseDiscordClient, ulong, ulong, string, Action<AddGuildUserProperties>, RequestOptions) Fields BaseConfig protected readonly DiscordSocketConfig BaseConfig Field Value DiscordSocketConfig Properties Activity Gets the activity for the logged-in user. public abstract IActivity Activity { get; protected set; } Property Value IActivity An activity object that represents the user's current activity. CurrentUser Gets the current logged-in user. public virtual SocketSelfUser CurrentUser { get; protected set; } Property Value SocketSelfUser DefaultStickerPacks Gets a collection of default stickers. public abstract IReadOnlyCollection<StickerPack<SocketSticker>> DefaultStickerPacks { get; } Property Value IReadOnlyCollection<StickerPack<SocketSticker>> Guilds Gets a collection of guilds that the user is currently in. public abstract IReadOnlyCollection<SocketGuild> Guilds { get; } Property Value IReadOnlyCollection<SocketGuild> A read-only collection of guilds that the current user is in. Latency Gets the estimated round-trip latency, in milliseconds, to the gateway server. public abstract int Latency { get; protected set; } Property Value int An int that represents the round-trip latency to the WebSocket server. Please note that this value does not represent a \"true\" latency for operations such as sending a message. PrivateChannels Gets a collection of private channels opened in this session. public abstract IReadOnlyCollection<ISocketPrivateChannel> PrivateChannels { get; } Property Value IReadOnlyCollection<ISocketPrivateChannel> A read-only collection of private channels that the user currently partakes in. Remarks This method will retrieve all private channels (including direct-message, group channel and such) that are currently opened in this session. warning This method will not return previously opened private channels outside of the current session! If you have just started the client, this may return an empty collection. Rest Provides access to a REST-only client with a shared state from this client. public abstract DiscordSocketRestClient Rest { get; } Property Value DiscordSocketRestClient Status Gets the status for the logged-in user. public abstract UserStatus Status { get; protected set; } Property Value UserStatus A status object that represents the user's online presence status. Methods CreateGuildAsync(string, IVoiceRegion, Stream, RequestOptions) Creates a guild for the logged-in user who is in less than 10 active guilds. public Task<RestGuild> CreateGuildAsync(string name, IVoiceRegion region, Stream jpegIcon = null, RequestOptions options = null) Parameters name string The name of the new guild. region IVoiceRegion The voice region to create the guild with. jpegIcon Stream The icon of the guild. options RequestOptions The options to be used when sending the request. Returns Task<RestGuild> A task that represents the asynchronous creation operation. The task result contains the created guild. Remarks This method creates a new guild on behalf of the logged-in user. warning Due to Discord's limitation, this method will only work for users that are in less than 10 guilds. DownloadUsersAsync(IEnumerable<IGuild>) Attempts to download users into the user cache for the selected guilds. public abstract Task DownloadUsersAsync(IEnumerable<IGuild> guilds) Parameters guilds IEnumerable<IGuild> The guilds to download the members from. Returns Task A task that represents the asynchronous download operation. GetApplicationInfoAsync(RequestOptions) Gets a Discord application information for the logged-in user. public abstract Task<RestApplication> GetApplicationInfoAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<RestApplication> A task that represents the asynchronous get operation. The task result contains the application information. Remarks This method reflects your application information you submitted when creating a Discord application via the Developer Portal. GetChannel(ulong) Gets a channel. public abstract SocketChannel GetChannel(ulong id) Parameters id ulong The snowflake identifier of the channel (e.g. 381889909113225237). Returns SocketChannel A generic WebSocket-based channel object (voice, text, category, etc.) associated with the identifier; null when the channel cannot be found. GetConnectionsAsync(RequestOptions) Gets the connections that the user has set up. public Task<IReadOnlyCollection<RestConnection>> GetConnectionsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestConnection>> A task that represents the asynchronous get operation. The task result contains a read-only collection of connections. GetGuild(ulong) Gets a guild. public abstract SocketGuild GetGuild(ulong id) Parameters id ulong The guild snowflake identifier. Returns SocketGuild A WebSocket-based guild associated with the snowflake identifier; null when the guild cannot be found. GetInviteAsync(string, RequestOptions, ulong?) Gets an invite. public Task<RestInviteMetadata> GetInviteAsync(string inviteId, RequestOptions options = null, ulong? scheduledEventId = null) Parameters inviteId string The invitation identifier. options RequestOptions The options to be used when sending the request. scheduledEventId ulong? The id of the guild scheduled event to include with the invite. Returns Task<RestInviteMetadata> A task that represents the asynchronous get operation. The task result contains the invite information. GetStickerAsync(ulong, CacheMode, RequestOptions) Gets a sticker. public abstract Task<SocketSticker> GetStickerAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters id ulong The id of the sticker to get. mode CacheMode Whether or not to allow downloading from the api. options RequestOptions The options to be used when sending the request. Returns Task<SocketSticker> A SocketSticker if found, otherwise null. GetUser(string, string) Gets a user. public abstract SocketUser GetUser(string username, string discriminator = null) Parameters username string The name of the user. discriminator string The discriminator value of the user. Returns SocketUser A generic WebSocket-based user; null when the user cannot be found. Remarks This method gets the user present in the WebSocket cache with the given condition. warning Sometimes a user may return null due to Discord not sending offline users in large guilds (i.e. guild with 100+ members) actively. To download users on startup and to see more information about this subject, see AlwaysDownloadUsers. note This method does not attempt to fetch users that the logged-in user does not have access to (i.e. users who don't share mutual guild(s) with the current user). If you wish to get a user that you do not have access to, consider using the REST implementation of GetUserAsync(ulong, RequestOptions). GetUser(ulong) Gets a generic user. public abstract SocketUser GetUser(ulong id) Parameters id ulong The user snowflake ID. Returns SocketUser A generic WebSocket-based user; null when the user cannot be found. Remarks This method gets the user present in the WebSocket cache with the given condition. warning Sometimes a user may return null due to Discord not sending offline users in large guilds (i.e. guild with 100+ members) actively. To download users on startup and to see more information about this subject, see AlwaysDownloadUsers. note This method does not attempt to fetch users that the logged-in user does not have access to (i.e. users who don't share mutual guild(s) with the current user). If you wish to get a user that you do not have access to, consider using the REST implementation of GetUserAsync(ulong, RequestOptions). GetVoiceRegionAsync(string, RequestOptions) Gets a voice region. public abstract ValueTask<RestVoiceRegion> GetVoiceRegionAsync(string id, RequestOptions options = null) Parameters id string The identifier of the voice region (e.g. eu-central ). options RequestOptions The options to be used when sending the request. Returns ValueTask<RestVoiceRegion> A task that contains a REST-based voice region associated with the identifier; null if the voice region is not found. GetVoiceRegionsAsync(RequestOptions) Gets all voice regions. public abstract ValueTask<IReadOnlyCollection<RestVoiceRegion>> GetVoiceRegionsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns ValueTask<IReadOnlyCollection<RestVoiceRegion>> A task that contains a read-only collection of REST-based voice regions. SetActivityAsync(IActivity) Sets the activity of the logged-in user. public abstract Task SetActivityAsync(IActivity activity) Parameters activity IActivity The activity to be set. Returns Task A task that represents the asynchronous set operation. Remarks This method sets the activity of the user. note Discord will only accept setting of name and the type of activity. warning Bot accounts cannot set CustomStatus as their activity type and it will have no effect. warning Rich Presence cannot be set via this method or client. Rich Presence is strictly limited to RPC clients only. SetCustomStatusAsync(string) Sets the custom status of the logged-in user. public abstract Task SetCustomStatusAsync(string status) Parameters status string The string that will be displayed as status. Returns Task A task that represents the asynchronous set operation. SetGameAsync(string, string, ActivityType) Sets the game of the user. public abstract Task SetGameAsync(string name, string streamUrl = null, ActivityType type = ActivityType.Playing) Parameters name string The name of the game. streamUrl string If streaming, the URL of the stream. Must be a valid Twitch URL. type ActivityType The type of the game. Returns Task A task that represents the asynchronous set operation. Remarks warning Bot accounts cannot set CustomStatus as their activity type and it will have no effect. SetStatusAsync(UserStatus) Sets the current status of the user (e.g. Online, Do not Disturb). public abstract Task SetStatusAsync(UserStatus status) Parameters status UserStatus The new status to be set. Returns Task A task that represents the asynchronous set operation. StartAsync() Starts the connection between Discord and the client.. public abstract Task StartAsync() Returns Task A task that represents the asynchronous start operation. Remarks This method will initialize the connection between the client and Discord. important This method will immediately return after it is called, as it will initialize the connection on another thread. StopAsync() Stops the connection between Discord and the client. public abstract Task StopAsync() Returns Task A task that represents the asynchronous stop operation. Events ApplicationCommandCreated Fired when a guild application command is created. public event Func<SocketApplicationCommand, Task> ApplicationCommandCreated Event Type Func<SocketApplicationCommand, Task> Remarks This event is fired when an application command is created. The event handler must return a Task and accept a SocketApplicationCommand as its parameter. The command that was deleted will be passed into the SocketApplicationCommand parameter. note This event is an undocumented discord event and may break at any time, its not recommended to rely on this event ApplicationCommandDeleted Fired when a guild application command is deleted. public event Func<SocketApplicationCommand, Task> ApplicationCommandDeleted Event Type Func<SocketApplicationCommand, Task> Remarks This event is fired when an application command is deleted. The event handler must return a Task and accept a SocketApplicationCommand as its parameter. The command that was deleted will be passed into the SocketApplicationCommand parameter. note This event is an undocumented discord event and may break at any time, its not recommended to rely on this event ApplicationCommandUpdated Fired when a guild application command is updated. public event Func<SocketApplicationCommand, Task> ApplicationCommandUpdated Event Type Func<SocketApplicationCommand, Task> Remarks This event is fired when an application command is updated. The event handler must return a Task and accept a SocketApplicationCommand as its parameter. The command that was deleted will be passed into the SocketApplicationCommand parameter. note This event is an undocumented discord event and may break at any time, its not recommended to rely on this event AuditLogCreated Fired when a guild audit log entry is created. public event Func<SocketAuditLogEntry, SocketGuild, Task> AuditLogCreated Event Type Func<SocketAuditLogEntry, SocketGuild, Task> AutoModActionExecuted Fired when an auto moderation rule is triggered by a user. public event Func<SocketGuild, AutoModRuleAction, AutoModActionExecutedData, Task> AutoModActionExecuted Event Type Func<SocketGuild, AutoModRuleAction, AutoModActionExecutedData, Task> AutoModRuleCreated Fired when an auto moderation rule is created. public event Func<SocketAutoModRule, Task> AutoModRuleCreated Event Type Func<SocketAutoModRule, Task> AutoModRuleDeleted Fired when an auto moderation rule is deleted. public event Func<SocketAutoModRule, Task> AutoModRuleDeleted Event Type Func<SocketAutoModRule, Task> AutoModRuleUpdated Fired when an auto moderation rule is modified. public event Func<Cacheable<SocketAutoModRule, ulong>, SocketAutoModRule, Task> AutoModRuleUpdated Event Type Func<Cacheable<SocketAutoModRule, ulong>, SocketAutoModRule, Task> AutocompleteExecuted Fired when an autocomplete is used and its interaction is received. public event Func<SocketAutocompleteInteraction, Task> AutocompleteExecuted Event Type Func<SocketAutocompleteInteraction, Task> ButtonExecuted Fired when a button is clicked and its interaction is received. public event Func<SocketMessageComponent, Task> ButtonExecuted Event Type Func<SocketMessageComponent, Task> ChannelCreated Fired when a channel is created. public event Func<SocketChannel, Task> ChannelCreated Event Type Func<SocketChannel, Task> Examples public void HookChannelCreated(BaseSocketClient client) => client.ChannelCreated += HandleChannelCreated; public Task HandleChannelCreated(SocketChannel channel) { if (channel is SocketGuildChannel guildChannel) Console.WriteLine($\"A new channel '{guildChannel.Name}'({guildChannel.Id}, {guildChannel.GetType()})\" + $\"has been created at {guildChannel.CreatedAt}.\"); return Task.CompletedTask; } Remarks This event is fired when a generic channel has been created. The event handler must return a Task and accept a SocketChannel as its parameter. The newly created channel is passed into the event handler parameter. The given channel type may include, but not limited to, Private Channels (DM, Group), Guild Channels (Text, Voice, Category); see the derived classes of SocketChannel for more details. ChannelDestroyed Fired when a channel is destroyed. public event Func<SocketChannel, Task> ChannelDestroyed Event Type Func<SocketChannel, Task> Examples public void HookChannelDestroyed(BaseSocketClient client) => client.ChannelDestroyed += HandleChannelDestroyed; public Task HandleChannelDestroyed(SocketChannel channel) { if (channel is SocketGuildChannel guildChannel) Console.WriteLine( $\"A new channel '{guildChannel.Name}'({guildChannel.Id}, {guildChannel.GetType()}) has been deleted.\"); return Task.CompletedTask; } Remarks This event is fired when a generic channel has been destroyed. The event handler must return a Task and accept a SocketChannel as its parameter. The destroyed channel is passed into the event handler parameter. The given channel type may include, but not limited to, Private Channels (DM, Group), Guild Channels (Text, Voice, Category); see the derived classes of SocketChannel for more details. ChannelUpdated Fired when a channel is updated. public event Func<SocketChannel, SocketChannel, Task> ChannelUpdated Event Type Func<SocketChannel, SocketChannel, Task> Examples public void HookChannelUpdated(BaseSocketClient client) => client.ChannelUpdated += HandleChannelRename; public Task HandleChannelRename(SocketChannel beforeChannel, SocketChannel afterChannel) { if (beforeChannel is SocketGuildChannel beforeGuildChannel && afterChannel is SocketGuildChannel afterGuildChannel) if (beforeGuildChannel.Name != afterGuildChannel.Name) Console.WriteLine( $\"A channel ({beforeChannel.Id}) is renamed from {beforeGuildChannel.Name} to {afterGuildChannel.Name}.\"); return Task.CompletedTask; } Remarks This event is fired when a generic channel has been updated. The event handler must return a Task and accept 2 SocketChannel as its parameters. The original (prior to update) channel is passed into the first SocketChannel, while the updated channel is passed into the second. The given channel type may include, but not limited to, Private Channels (DM, Group), Guild Channels (Text, Voice, Category); see the derived classes of SocketChannel for more details. CurrentUserUpdated Fired when the connected account is updated. public event Func<SocketSelfUser, SocketSelfUser, Task> CurrentUserUpdated Event Type Func<SocketSelfUser, SocketSelfUser, Task> EntitlementCreated Fired when a user subscribes to a SKU. public event Func<SocketEntitlement, Task> EntitlementCreated Event Type Func<SocketEntitlement, Task> EntitlementDeleted Fired when a user's entitlement is deleted. public event Func<Cacheable<SocketEntitlement, ulong>, Task> EntitlementDeleted Event Type Func<Cacheable<SocketEntitlement, ulong>, Task> EntitlementUpdated Fired when a subscription to a SKU is updated. public event Func<Cacheable<SocketEntitlement, ulong>, SocketEntitlement, Task> EntitlementUpdated Event Type Func<Cacheable<SocketEntitlement, ulong>, SocketEntitlement, Task> GuildAvailable Fired when a guild becomes available. public event Func<SocketGuild, Task> GuildAvailable Event Type Func<SocketGuild, Task> GuildJoinRequestDeleted Fired when a user leaves without agreeing to the member screening public event Func<Cacheable<SocketGuildUser, ulong>, SocketGuild, Task> GuildJoinRequestDeleted Event Type Func<Cacheable<SocketGuildUser, ulong>, SocketGuild, Task> GuildMemberUpdated Fired when a guild member is updated. public event Func<Cacheable<SocketGuildUser, ulong>, SocketGuildUser, Task> GuildMemberUpdated Event Type Func<Cacheable<SocketGuildUser, ulong>, SocketGuildUser, Task> GuildMembersDownloaded Fired when offline guild members are downloaded. public event Func<SocketGuild, Task> GuildMembersDownloaded Event Type Func<SocketGuild, Task> GuildScheduledEventCancelled Fired when a guild event is cancelled. public event Func<SocketGuildEvent, Task> GuildScheduledEventCancelled Event Type Func<SocketGuildEvent, Task> GuildScheduledEventCompleted Fired when a guild event is completed. public event Func<SocketGuildEvent, Task> GuildScheduledEventCompleted Event Type Func<SocketGuildEvent, Task> GuildScheduledEventCreated Fired when a guild event is created. public event Func<SocketGuildEvent, Task> GuildScheduledEventCreated Event Type Func<SocketGuildEvent, Task> GuildScheduledEventStarted Fired when a guild event is started. public event Func<SocketGuildEvent, Task> GuildScheduledEventStarted Event Type Func<SocketGuildEvent, Task> GuildScheduledEventUpdated Fired when a guild event is updated. public event Func<Cacheable<SocketGuildEvent, ulong>, SocketGuildEvent, Task> GuildScheduledEventUpdated Event Type Func<Cacheable<SocketGuildEvent, ulong>, SocketGuildEvent, Task> GuildScheduledEventUserAdd public event Func<Cacheable<SocketUser, RestUser, IUser, ulong>, SocketGuildEvent, Task> GuildScheduledEventUserAdd Event Type Func<Cacheable<SocketUser, RestUser, IUser, ulong>, SocketGuildEvent, Task> GuildScheduledEventUserRemove public event Func<Cacheable<SocketUser, RestUser, IUser, ulong>, SocketGuildEvent, Task> GuildScheduledEventUserRemove Event Type Func<Cacheable<SocketUser, RestUser, IUser, ulong>, SocketGuildEvent, Task> GuildStickerCreated Fired when a sticker in a guild is created. public event Func<SocketCustomSticker, Task> GuildStickerCreated Event Type Func<SocketCustomSticker, Task> GuildStickerDeleted Fired when a sticker in a guild is deleted. public event Func<SocketCustomSticker, Task> GuildStickerDeleted Event Type Func<SocketCustomSticker, Task> GuildStickerUpdated Fired when a sticker in a guild is updated. public event Func<SocketCustomSticker, SocketCustomSticker, Task> GuildStickerUpdated Event Type Func<SocketCustomSticker, SocketCustomSticker, Task> GuildUnavailable Fired when a guild becomes unavailable. public event Func<SocketGuild, Task> GuildUnavailable Event Type Func<SocketGuild, Task> GuildUpdated Fired when a guild is updated. public event Func<SocketGuild, SocketGuild, Task> GuildUpdated Event Type Func<SocketGuild, SocketGuild, Task> IntegrationCreated Fired when an integration is created. public event Func<IIntegration, Task> IntegrationCreated Event Type Func<IIntegration, Task> IntegrationDeleted Fired when an integration is deleted. public event Func<IGuild, ulong, Optional<ulong>, Task> IntegrationDeleted Event Type Func<IGuild, ulong, Optional<ulong>, Task> IntegrationUpdated Fired when an integration is updated. public event Func<IIntegration, Task> IntegrationUpdated Event Type Func<IIntegration, Task> InteractionCreated Fired when an Interaction is created. This event covers all types of interactions including but not limited to: buttons, select menus, slash commands, autocompletes. public event Func<SocketInteraction, Task> InteractionCreated Event Type Func<SocketInteraction, Task> Remarks This event is fired when an interaction is created. The event handler must return a Task and accept a SocketInteraction as its parameter. The interaction created will be passed into the SocketInteraction parameter. InviteCreated Fired when an invite is created. public event Func<SocketInvite, Task> InviteCreated Event Type Func<SocketInvite, Task> Remarks This event is fired when an invite is created. The event handler must return a Task and accept a SocketInvite as its parameter. The invite created will be passed into the SocketInvite parameter. InviteDeleted Fired when an invite is deleted. public event Func<SocketGuildChannel, string, Task> InviteDeleted Event Type Func<SocketGuildChannel, string, Task> Remarks This event is fired when an invite is deleted. The event handler must return a Task and accept a SocketGuildChannel and string as its parameter. The channel where this invite was created will be passed into the SocketGuildChannel parameter. The code of the deleted invite will be passed into the string parameter. JoinedGuild Fired when the connected account joins a guild. public event Func<SocketGuild, Task> JoinedGuild Event Type Func<SocketGuild, Task> LeftGuild Fired when the connected account leaves a guild. public event Func<SocketGuild, Task> LeftGuild Event Type Func<SocketGuild, Task> MessageCommandExecuted Fired when a message command is used and its interaction is received. public event Func<SocketMessageCommand, Task> MessageCommandExecuted Event Type Func<SocketMessageCommand, Task> MessageDeleted Fired when a message is deleted. public event Func<Cacheable<IMessage, ulong>, Cacheable<IMessageChannel, ulong>, Task> MessageDeleted Event Type Func<Cacheable<IMessage, ulong>, Cacheable<IMessageChannel, ulong>, Task> Examples public void HookMessageDeleted(BaseSocketClient client) => client.MessageDeleted += HandleMessageDelete; public async Task HandleMessageDelete(Cacheable<IMessage, ulong> cachedMessage, Cacheable<IMessageChannel, ulong> cachedChannel) { // check if the message exists in cache; if not, we cannot report what was removed if (!cachedMessage.HasValue) return; // gets or downloads the channel if it's not in the cache IMessageChannel channel = await cachedChannel.GetOrDownloadAsync(); var message = cachedMessage.Value; Console.WriteLine( $\"A message ({message.Id}) from {message.Author} was removed from the channel {channel.Name} ({channel.Id}):\" + Environment.NewLine + message.Content); } Remarks This event is fired when a message is deleted. The event handler must return a Task and accept a Cacheable<TEntity, TId> and ISocketMessageChannel as its parameters. important It is not possible to retrieve the message via DownloadAsync(); the message cannot be retrieved by Discord after the message has been deleted. If caching is enabled via DiscordSocketConfig, the Cacheable<TEntity, TId> entity will contain the deleted message; otherwise, in event that the message cannot be retrieved, the snowflake ID of the message is preserved in the ulong. The source channel of the removed message will be passed into the ISocketMessageChannel parameter. MessageReceived Fired when a message is received. public event Func<SocketMessage, Task> MessageReceived Event Type Func<SocketMessage, Task> Examples The example below checks if the newly received message contains the target user. private readonly ulong[] _targetUserIds = { 168693960628371456, 53905483156684800 }; public void HookMessageReceived(BaseSocketClient client) => client.MessageReceived += HandleMessageReceived; public Task HandleMessageReceived(SocketMessage message) { // check if the message is a user message as opposed to a system message (e.g. Clyde, pins, etc.) if (!(message is SocketUserMessage userMessage)) return Task.CompletedTask; // check if the message origin is a guild message channel if (!(userMessage.Channel is SocketTextChannel textChannel)) return Task.CompletedTask; // check if the target user was mentioned var targetUsers = userMessage.MentionedUsers.Where(x => _targetUserIds.Contains(x.Id)); foreach (var targetUser in targetUsers) Console.WriteLine( $\"{targetUser} was mentioned in the message '{message.Content}' by {message.Author} in {textChannel.Name}.\"); return Task.CompletedTask; } Remarks This event is fired when a message is received. The event handler must return a Task and accept a SocketMessage as its parameter. The message that is sent to the client is passed into the event handler parameter as SocketMessage. This message may be a system message (i.e. SocketSystemMessage) or a user message (i.e. SocketUserMessage. See the derived classes of SocketMessage for more details. MessageUpdated Fired when a message is updated. public event Func<Cacheable<IMessage, ulong>, SocketMessage, ISocketMessageChannel, Task> MessageUpdated Event Type Func<Cacheable<IMessage, ulong>, SocketMessage, ISocketMessageChannel, Task> Remarks This event is fired when a message is updated. The event handler must return a Task and accept a Cacheable<TEntity, TId>, SocketMessage, and ISocketMessageChannel as its parameters. If caching is enabled via DiscordSocketConfig, the Cacheable<TEntity, TId> entity will contain the original message; otherwise, in event that the message cannot be retrieved, the snowflake ID of the message is preserved in the ulong. The updated message will be passed into the SocketMessage parameter. The source channel of the updated message will be passed into the ISocketMessageChannel parameter. MessagesBulkDeleted Fired when multiple messages are bulk deleted. public event Func<IReadOnlyCollection<Cacheable<IMessage, ulong>>, Cacheable<IMessageChannel, ulong>, Task> MessagesBulkDeleted Event Type Func<IReadOnlyCollection<Cacheable<IMessage, ulong>>, Cacheable<IMessageChannel, ulong>, Task> Remarks note The MessageDeleted event will not be fired for individual messages contained in this event. This event is fired when multiple messages are bulk deleted. The event handler must return a Task and accept an IReadOnlyCollection<T> and ISocketMessageChannel as its parameters. important It is not possible to retrieve the message via DownloadAsync(); the message cannot be retrieved by Discord after the message has been deleted. If caching is enabled via DiscordSocketConfig, the Cacheable<TEntity, TId> entity will contain the deleted message; otherwise, in event that the message cannot be retrieved, the snowflake ID of the message is preserved in the ulong. The source channel of the removed message will be passed into the ISocketMessageChannel parameter. ModalSubmitted Fired when a modal is submitted. public event Func<SocketModal, Task> ModalSubmitted Event Type Func<SocketModal, Task> PresenceUpdated Fired when a users presence is updated. public event Func<SocketUser, SocketPresence, SocketPresence, Task> PresenceUpdated Event Type Func<SocketUser, SocketPresence, SocketPresence, Task> ReactionAdded Fired when a reaction is added to a message. public event Func<Cacheable<IUserMessage, ulong>, Cacheable<IMessageChannel, ulong>, SocketReaction, Task> ReactionAdded Event Type Func<Cacheable<IUserMessage, ulong>, Cacheable<IMessageChannel, ulong>, SocketReaction, Task> Examples public void HookReactionAdded(BaseSocketClient client) => client.ReactionAdded += HandleReactionAddedAsync; public async Task HandleReactionAddedAsync(Cacheable<IUserMessage, ulong> cachedMessage, Cacheable<IMessageChannel, ulong> originChannel, SocketReaction reaction) { var message = await cachedMessage.GetOrDownloadAsync(); if (message != null && reaction.User.IsSpecified) Console.WriteLine($\"{reaction.User.Value} just added a reaction '{reaction.Emote}' \" + $\"to {message.Author}'s message ({message.Id}).\"); } Remarks This event is fired when a reaction is added to a user message. The event handler must return a Task and accept a Cacheable<TEntity, TId>, an ISocketMessageChannel, and a SocketReaction as its parameter. If caching is enabled via DiscordSocketConfig, the Cacheable<TEntity, TId> entity will contain the original message; otherwise, in event that the message cannot be retrieved, the snowflake ID of the message is preserved in the ulong. The source channel of the reaction addition will be passed into the ISocketMessageChannel parameter. The reaction that was added will be passed into the SocketReaction parameter. note When fetching the reaction from this event, a user may not be provided under User. Please see the documentation of the property for more information. ReactionRemoved Fired when a reaction is removed from a message. public event Func<Cacheable<IUserMessage, ulong>, Cacheable<IMessageChannel, ulong>, SocketReaction, Task> ReactionRemoved Event Type Func<Cacheable<IUserMessage, ulong>, Cacheable<IMessageChannel, ulong>, SocketReaction, Task> ReactionsCleared Fired when all reactions to a message are cleared. public event Func<Cacheable<IUserMessage, ulong>, Cacheable<IMessageChannel, ulong>, Task> ReactionsCleared Event Type Func<Cacheable<IUserMessage, ulong>, Cacheable<IMessageChannel, ulong>, Task> ReactionsRemovedForEmote Fired when all reactions to a message with a specific emote are removed. public event Func<Cacheable<IUserMessage, ulong>, Cacheable<IMessageChannel, ulong>, IEmote, Task> ReactionsRemovedForEmote Event Type Func<Cacheable<IUserMessage, ulong>, Cacheable<IMessageChannel, ulong>, IEmote, Task> Remarks This event is fired when all reactions to a message with a specific emote are removed. The event handler must return a Task and accept a ISocketMessageChannel and a IEmote as its parameters. The channel where this message was sent will be passed into the ISocketMessageChannel parameter. The emoji that all reactions had and were removed will be passed into the IEmote parameter. RecipientAdded Fired when a user joins a group channel. public event Func<SocketGroupUser, Task> RecipientAdded Event Type Func<SocketGroupUser, Task> RecipientRemoved Fired when a user is removed from a group channel. public event Func<SocketGroupUser, Task> RecipientRemoved Event Type Func<SocketGroupUser, Task> RequestToSpeak Fired when a user requests to speak within a stage channel. public event Func<SocketStageChannel, SocketGuildUser, Task> RequestToSpeak Event Type Func<SocketStageChannel, SocketGuildUser, Task> RoleCreated Fired when a role is created. public event Func<SocketRole, Task> RoleCreated Event Type Func<SocketRole, Task> RoleDeleted Fired when a role is deleted. public event Func<SocketRole, Task> RoleDeleted Event Type Func<SocketRole, Task> RoleUpdated Fired when a role is updated. public event Func<SocketRole, SocketRole, Task> RoleUpdated Event Type Func<SocketRole, SocketRole, Task> SelectMenuExecuted Fired when a select menu is used and its interaction is received. public event Func<SocketMessageComponent, Task> SelectMenuExecuted Event Type Func<SocketMessageComponent, Task> SlashCommandExecuted Fired when a slash command is used and its interaction is received. public event Func<SocketSlashCommand, Task> SlashCommandExecuted Event Type Func<SocketSlashCommand, Task> SpeakerAdded Fired when a speaker is added in a stage channel. public event Func<SocketStageChannel, SocketGuildUser, Task> SpeakerAdded Event Type Func<SocketStageChannel, SocketGuildUser, Task> SpeakerRemoved Fired when a speaker is removed from a stage channel. public event Func<SocketStageChannel, SocketGuildUser, Task> SpeakerRemoved Event Type Func<SocketStageChannel, SocketGuildUser, Task> StageEnded Fired when a stage ends. public event Func<SocketStageChannel, Task> StageEnded Event Type Func<SocketStageChannel, Task> StageStarted Fired when a stage is started. public event Func<SocketStageChannel, Task> StageStarted Event Type Func<SocketStageChannel, Task> StageUpdated Fired when a stage is updated. public event Func<SocketStageChannel, SocketStageChannel, Task> StageUpdated Event Type Func<SocketStageChannel, SocketStageChannel, Task> ThreadCreated Fired when a thread is created within a guild, or when the current user is added to a thread. public event Func<SocketThreadChannel, Task> ThreadCreated Event Type Func<SocketThreadChannel, Task> ThreadDeleted Fired when a thread is deleted. public event Func<Cacheable<SocketThreadChannel, ulong>, Task> ThreadDeleted Event Type Func<Cacheable<SocketThreadChannel, ulong>, Task> ThreadMemberJoined Fired when a user joins a thread public event Func<SocketThreadUser, Task> ThreadMemberJoined Event Type Func<SocketThreadUser, Task> ThreadMemberLeft Fired when a user leaves a thread public event Func<SocketThreadUser, Task> ThreadMemberLeft Event Type Func<SocketThreadUser, Task> ThreadUpdated Fired when a thread is updated within a guild. public event Func<Cacheable<SocketThreadChannel, ulong>, SocketThreadChannel, Task> ThreadUpdated Event Type Func<Cacheable<SocketThreadChannel, ulong>, SocketThreadChannel, Task> UserBanned Fired when a user is banned from a guild. public event Func<SocketUser, SocketGuild, Task> UserBanned Event Type Func<SocketUser, SocketGuild, Task> UserCommandExecuted Fired when a user command is used and its interaction is received. public event Func<SocketUserCommand, Task> UserCommandExecuted Event Type Func<SocketUserCommand, Task> UserIsTyping Fired when a user starts typing. public event Func<Cacheable<IUser, ulong>, Cacheable<IMessageChannel, ulong>, Task> UserIsTyping Event Type Func<Cacheable<IUser, ulong>, Cacheable<IMessageChannel, ulong>, Task> UserJoined Fired when a user joins a guild. public event Func<SocketGuildUser, Task> UserJoined Event Type Func<SocketGuildUser, Task> UserLeft Fired when a user leaves a guild. public event Func<SocketGuild, SocketUser, Task> UserLeft Event Type Func<SocketGuild, SocketUser, Task> UserUnbanned Fired when a user is unbanned from a guild. public event Func<SocketUser, SocketGuild, Task> UserUnbanned Event Type Func<SocketUser, SocketGuild, Task> UserUpdated Fired when a user is updated. public event Func<SocketUser, SocketUser, Task> UserUpdated Event Type Func<SocketUser, SocketUser, Task> UserVoiceStateUpdated Fired when a user joins, leaves, or moves voice channels. public event Func<SocketUser, SocketVoiceState, SocketVoiceState, Task> UserVoiceStateUpdated Event Type Func<SocketUser, SocketVoiceState, SocketVoiceState, Task> VoiceChannelStatusUpdated Fired when status of a voice channel is updated. public event Func<Cacheable<SocketVoiceChannel, ulong>, string, string, Task> VoiceChannelStatusUpdated Event Type Func<Cacheable<SocketVoiceChannel, ulong>, string, string, Task> Remarks The previous state of the channel is passed into the first parameter; the updated channel is passed into the second one. VoiceServerUpdated Fired when the bot connects to a Discord voice server. public event Func<SocketVoiceServer, Task> VoiceServerUpdated Event Type Func<SocketVoiceServer, Task> WebhooksUpdated Fired when a webhook is modified, moved, or deleted. If the webhook was moved the channel represents the destination channel, not the source. public event Func<SocketGuild, SocketChannel, Task> WebhooksUpdated Event Type Func<SocketGuild, SocketChannel, Task>"
  },
  "api/Discord.WebSocket.DiscordShardedClient.html": {
    "href": "api/Discord.WebSocket.DiscordShardedClient.html",
    "title": "Class DiscordShardedClient | Discord.Net Documentation",
    "keywords": "Class DiscordShardedClient Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll public class DiscordShardedClient : BaseSocketClient, IDiscordClient, IDisposable, IAsyncDisposable Inheritance object BaseDiscordClient BaseSocketClient DiscordShardedClient Implements IDiscordClient IDisposable IAsyncDisposable Inherited Members BaseSocketClient.BaseConfig BaseSocketClient.CreateGuildAsync(string, IVoiceRegion, Stream, RequestOptions) BaseSocketClient.GetConnectionsAsync(RequestOptions) BaseSocketClient.GetInviteAsync(string, RequestOptions, ulong?) BaseSocketClient.ChannelCreated BaseSocketClient.ChannelDestroyed BaseSocketClient.ChannelUpdated BaseSocketClient.VoiceChannelStatusUpdated BaseSocketClient.MessageReceived BaseSocketClient.MessageDeleted BaseSocketClient.MessagesBulkDeleted BaseSocketClient.MessageUpdated BaseSocketClient.ReactionAdded BaseSocketClient.ReactionRemoved BaseSocketClient.ReactionsCleared BaseSocketClient.ReactionsRemovedForEmote BaseSocketClient.RoleCreated BaseSocketClient.RoleDeleted BaseSocketClient.RoleUpdated BaseSocketClient.JoinedGuild BaseSocketClient.LeftGuild BaseSocketClient.GuildAvailable BaseSocketClient.GuildUnavailable BaseSocketClient.GuildMembersDownloaded BaseSocketClient.GuildUpdated BaseSocketClient.GuildJoinRequestDeleted BaseSocketClient.GuildScheduledEventCreated BaseSocketClient.GuildScheduledEventUpdated BaseSocketClient.GuildScheduledEventCancelled BaseSocketClient.GuildScheduledEventCompleted BaseSocketClient.GuildScheduledEventStarted BaseSocketClient.GuildScheduledEventUserAdd BaseSocketClient.GuildScheduledEventUserRemove BaseSocketClient.IntegrationCreated BaseSocketClient.IntegrationUpdated BaseSocketClient.IntegrationDeleted BaseSocketClient.UserJoined BaseSocketClient.UserLeft BaseSocketClient.UserBanned BaseSocketClient.UserUnbanned BaseSocketClient.UserUpdated BaseSocketClient.GuildMemberUpdated BaseSocketClient.UserVoiceStateUpdated BaseSocketClient.VoiceServerUpdated BaseSocketClient.CurrentUserUpdated BaseSocketClient.UserIsTyping BaseSocketClient.RecipientAdded BaseSocketClient.RecipientRemoved BaseSocketClient.PresenceUpdated BaseSocketClient.InviteCreated BaseSocketClient.InviteDeleted BaseSocketClient.InteractionCreated BaseSocketClient.ButtonExecuted BaseSocketClient.SelectMenuExecuted BaseSocketClient.SlashCommandExecuted BaseSocketClient.UserCommandExecuted BaseSocketClient.MessageCommandExecuted BaseSocketClient.AutocompleteExecuted BaseSocketClient.ModalSubmitted BaseSocketClient.ApplicationCommandCreated BaseSocketClient.ApplicationCommandUpdated BaseSocketClient.ApplicationCommandDeleted BaseSocketClient.ThreadCreated BaseSocketClient.ThreadUpdated BaseSocketClient.ThreadDeleted BaseSocketClient.ThreadMemberJoined BaseSocketClient.ThreadMemberLeft BaseSocketClient.StageStarted BaseSocketClient.StageEnded BaseSocketClient.StageUpdated BaseSocketClient.RequestToSpeak BaseSocketClient.SpeakerAdded BaseSocketClient.SpeakerRemoved BaseSocketClient.GuildStickerCreated BaseSocketClient.GuildStickerUpdated BaseSocketClient.GuildStickerDeleted BaseSocketClient.WebhooksUpdated BaseSocketClient.AuditLogCreated BaseSocketClient.AutoModRuleCreated BaseSocketClient.AutoModRuleUpdated BaseSocketClient.AutoModRuleDeleted BaseSocketClient.AutoModActionExecuted BaseSocketClient.EntitlementCreated BaseSocketClient.EntitlementUpdated BaseSocketClient.EntitlementDeleted BaseDiscordClient.Log BaseDiscordClient.LoggedIn BaseDiscordClient.LoggedOut BaseDiscordClient.LoginState BaseDiscordClient.TokenType BaseDiscordClient.LoginAsync(TokenType, string, bool) BaseDiscordClient.LogoutAsync() BaseDiscordClient.Dispose() BaseDiscordClient.DisposeAsync() BaseDiscordClient.GetRecommendedShardCountAsync(RequestOptions) BaseDiscordClient.GetBotGatewayAsync(RequestOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DiscordClientExtensions.GetDMChannelAsync(IDiscordClient, ulong) DiscordClientExtensions.GetDMChannelsAsync(IDiscordClient) DiscordClientExtensions.GetGroupChannelAsync(IDiscordClient, ulong) DiscordClientExtensions.GetGroupChannelsAsync(IDiscordClient) DiscordClientExtensions.GetOptimalVoiceRegionAsync(IDiscordClient) DiscordClientExtensions.GetPrivateChannelAsync(IDiscordClient, ulong) ClientExtensions.AddGuildUserAsync(BaseDiscordClient, ulong, ulong, string, Action<AddGuildUserProperties>, RequestOptions) Constructors DiscordShardedClient() Creates a new REST/WebSocket Discord client. public DiscordShardedClient() DiscordShardedClient(DiscordSocketConfig) Creates a new REST/WebSocket Discord client. public DiscordShardedClient(DiscordSocketConfig config) Parameters config DiscordSocketConfig DiscordShardedClient(int[]) Creates a new REST/WebSocket Discord client. public DiscordShardedClient(int[] ids) Parameters ids int[] DiscordShardedClient(int[], DiscordSocketConfig) Creates a new REST/WebSocket Discord client. public DiscordShardedClient(int[] ids, DiscordSocketConfig config) Parameters ids int[] config DiscordSocketConfig Properties Activity Gets the activity for the logged-in user. public override IActivity Activity { get; protected set; } Property Value IActivity An activity object that represents the user's current activity. CurrentUser Gets the current logged-in user. public override SocketSelfUser CurrentUser { get; protected set; } Property Value SocketSelfUser DefaultStickerPacks Gets a collection of default stickers. public override IReadOnlyCollection<StickerPack<SocketSticker>> DefaultStickerPacks { get; } Property Value IReadOnlyCollection<StickerPack<SocketSticker>> Guilds Gets a collection of guilds that the user is currently in. public override IReadOnlyCollection<SocketGuild> Guilds { get; } Property Value IReadOnlyCollection<SocketGuild> A read-only collection of guilds that the current user is in. Latency Gets the estimated round-trip latency, in milliseconds, to the gateway server. public override int Latency { get; protected set; } Property Value int An int that represents the round-trip latency to the WebSocket server. Please note that this value does not represent a \"true\" latency for operations such as sending a message. PrivateChannels Gets a collection of private channels opened in this session. public override IReadOnlyCollection<ISocketPrivateChannel> PrivateChannels { get; } Property Value IReadOnlyCollection<ISocketPrivateChannel> A read-only collection of private channels that the user currently partakes in. Remarks This method will retrieve all private channels (including direct-message, group channel and such) that are currently opened in this session. warning This method will not return previously opened private channels outside of the current session! If you have just started the client, this may return an empty collection. Rest Provides access to a REST-only client with a shared state from this client. public override DiscordSocketRestClient Rest { get; } Property Value DiscordSocketRestClient Shards public IReadOnlyCollection<DiscordSocketClient> Shards { get; } Property Value IReadOnlyCollection<DiscordSocketClient> Status Gets the status for the logged-in user. public override UserStatus Status { get; protected set; } Property Value UserStatus A status object that represents the user's online presence status. Methods BulkOverwriteGlobalApplicationCommandsAsync(ApplicationCommandProperties[], RequestOptions) public Task<IReadOnlyCollection<SocketApplicationCommand>> BulkOverwriteGlobalApplicationCommandsAsync(ApplicationCommandProperties[] properties, RequestOptions options = null) Parameters properties ApplicationCommandProperties[] options RequestOptions Returns Task<IReadOnlyCollection<SocketApplicationCommand>> CreateGlobalApplicationCommandAsync(ApplicationCommandProperties, RequestOptions) public Task<SocketApplicationCommand> CreateGlobalApplicationCommandAsync(ApplicationCommandProperties properties, RequestOptions options = null) Parameters properties ApplicationCommandProperties options RequestOptions Returns Task<SocketApplicationCommand> DownloadUsersAsync(IEnumerable<IGuild>) Attempts to download users into the user cache for the selected guilds. public override Task DownloadUsersAsync(IEnumerable<IGuild> guilds) Parameters guilds IEnumerable<IGuild> The guilds to download the members from. Returns Task A task that represents the asynchronous download operation. Exceptions ArgumentNullException guilds is null GetApplicationInfoAsync(RequestOptions) Gets a Discord application information for the logged-in user. public override Task<RestApplication> GetApplicationInfoAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<RestApplication> A task that represents the asynchronous get operation. The task result contains the application information. Remarks This method reflects your application information you submitted when creating a Discord application via the Developer Portal. GetChannel(ulong) Gets a channel. public override SocketChannel GetChannel(ulong id) Parameters id ulong The snowflake identifier of the channel (e.g. 381889909113225237). Returns SocketChannel A generic WebSocket-based channel object (voice, text, category, etc.) associated with the identifier; null when the channel cannot be found. GetGuild(ulong) Gets a guild. public override SocketGuild GetGuild(ulong id) Parameters id ulong The guild snowflake identifier. Returns SocketGuild A WebSocket-based guild associated with the snowflake identifier; null when the guild cannot be found. GetShard(int) public DiscordSocketClient GetShard(int id) Parameters id int Returns DiscordSocketClient GetShardFor(IGuild) public DiscordSocketClient GetShardFor(IGuild guild) Parameters guild IGuild Returns DiscordSocketClient GetShardIdFor(IGuild) public int GetShardIdFor(IGuild guild) Parameters guild IGuild Returns int GetStickerAsync(ulong, CacheMode, RequestOptions) Gets a sticker. public override Task<SocketSticker> GetStickerAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters id ulong The id of the sticker to get. mode CacheMode Whether or not to allow downloading from the api. options RequestOptions The options to be used when sending the request. Returns Task<SocketSticker> A SocketSticker if found, otherwise null. GetUser(string, string) Gets a user. public override SocketUser GetUser(string username, string discriminator = null) Parameters username string The name of the user. discriminator string The discriminator value of the user. Returns SocketUser A generic WebSocket-based user; null when the user cannot be found. Remarks This method gets the user present in the WebSocket cache with the given condition. warning Sometimes a user may return null due to Discord not sending offline users in large guilds (i.e. guild with 100+ members) actively. To download users on startup and to see more information about this subject, see AlwaysDownloadUsers. note This method does not attempt to fetch users that the logged-in user does not have access to (i.e. users who don't share mutual guild(s) with the current user). If you wish to get a user that you do not have access to, consider using the REST implementation of GetUserAsync(ulong, RequestOptions). GetUser(ulong) Gets a generic user. public override SocketUser GetUser(ulong id) Parameters id ulong The user snowflake ID. Returns SocketUser A generic WebSocket-based user; null when the user cannot be found. Remarks This method gets the user present in the WebSocket cache with the given condition. warning Sometimes a user may return null due to Discord not sending offline users in large guilds (i.e. guild with 100+ members) actively. To download users on startup and to see more information about this subject, see AlwaysDownloadUsers. note This method does not attempt to fetch users that the logged-in user does not have access to (i.e. users who don't share mutual guild(s) with the current user). If you wish to get a user that you do not have access to, consider using the REST implementation of GetUserAsync(ulong, RequestOptions). GetVoiceRegionAsync(string, RequestOptions) Gets a voice region. public override ValueTask<RestVoiceRegion> GetVoiceRegionAsync(string id, RequestOptions options = null) Parameters id string The identifier of the voice region (e.g. eu-central ). options RequestOptions The options to be used when sending the request. Returns ValueTask<RestVoiceRegion> A task that contains a REST-based voice region associated with the identifier; null if the voice region is not found. GetVoiceRegionsAsync(RequestOptions) Gets all voice regions. public override ValueTask<IReadOnlyCollection<RestVoiceRegion>> GetVoiceRegionsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns ValueTask<IReadOnlyCollection<RestVoiceRegion>> A task that contains a read-only collection of REST-based voice regions. SetActivityAsync(IActivity) Sets the activity of the logged-in user. public override Task SetActivityAsync(IActivity activity) Parameters activity IActivity The activity to be set. Returns Task A task that represents the asynchronous set operation. Remarks This method sets the activity of the user. note Discord will only accept setting of name and the type of activity. warning Bot accounts cannot set CustomStatus as their activity type and it will have no effect. warning Rich Presence cannot be set via this method or client. Rich Presence is strictly limited to RPC clients only. SetCustomStatusAsync(string) Sets the custom status of the logged-in user. public override Task SetCustomStatusAsync(string status) Parameters status string The string that will be displayed as status. Returns Task A task that represents the asynchronous set operation. SetGameAsync(string, string, ActivityType) Sets the game of the user. public override Task SetGameAsync(string name, string streamUrl = null, ActivityType type = ActivityType.Playing) Parameters name string The name of the game. streamUrl string If streaming, the URL of the stream. Must be a valid Twitch URL. type ActivityType The type of the game. Returns Task A task that represents the asynchronous set operation. Remarks warning Bot accounts cannot set CustomStatus as their activity type and it will have no effect. SetStatusAsync(UserStatus) Sets the current status of the user (e.g. Online, Do not Disturb). public override Task SetStatusAsync(UserStatus status) Parameters status UserStatus The new status to be set. Returns Task A task that represents the asynchronous set operation. StartAsync() Starts the connection between Discord and the client.. public override Task StartAsync() Returns Task A task that represents the asynchronous start operation. Remarks This method will initialize the connection between the client and Discord. important This method will immediately return after it is called, as it will initialize the connection on another thread. StopAsync() Stops the connection between Discord and the client. public override Task StopAsync() Returns Task A task that represents the asynchronous stop operation. Events ShardConnected Fired when a shard is connected to the Discord gateway. public event Func<DiscordSocketClient, Task> ShardConnected Event Type Func<DiscordSocketClient, Task> ShardDisconnected Fired when a shard is disconnected from the Discord gateway. public event Func<Exception, DiscordSocketClient, Task> ShardDisconnected Event Type Func<Exception, DiscordSocketClient, Task> ShardLatencyUpdated Fired when a shard receives a heartbeat from the Discord gateway. public event Func<int, int, DiscordSocketClient, Task> ShardLatencyUpdated Event Type Func<int, int, DiscordSocketClient, Task> ShardReady Fired when a guild data for a shard has finished downloading. public event Func<DiscordSocketClient, Task> ShardReady Event Type Func<DiscordSocketClient, Task>"
  },
  "api/Discord.WebSocket.DiscordSocketClient.html": {
    "href": "api/Discord.WebSocket.DiscordSocketClient.html",
    "title": "Class DiscordSocketClient | Discord.Net Documentation",
    "keywords": "Class DiscordSocketClient Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a WebSocket-based Discord client. public class DiscordSocketClient : BaseSocketClient, IDiscordClient, IDisposable, IAsyncDisposable Inheritance object BaseDiscordClient BaseSocketClient DiscordSocketClient Implements IDiscordClient IDisposable IAsyncDisposable Inherited Members BaseSocketClient.BaseConfig BaseSocketClient.CurrentUser BaseSocketClient.CreateGuildAsync(string, IVoiceRegion, Stream, RequestOptions) BaseSocketClient.GetConnectionsAsync(RequestOptions) BaseSocketClient.GetInviteAsync(string, RequestOptions, ulong?) BaseSocketClient.ChannelCreated BaseSocketClient.ChannelDestroyed BaseSocketClient.ChannelUpdated BaseSocketClient.VoiceChannelStatusUpdated BaseSocketClient.MessageReceived BaseSocketClient.MessageDeleted BaseSocketClient.MessagesBulkDeleted BaseSocketClient.MessageUpdated BaseSocketClient.ReactionAdded BaseSocketClient.ReactionRemoved BaseSocketClient.ReactionsCleared BaseSocketClient.ReactionsRemovedForEmote BaseSocketClient.RoleCreated BaseSocketClient.RoleDeleted BaseSocketClient.RoleUpdated BaseSocketClient.JoinedGuild BaseSocketClient.LeftGuild BaseSocketClient.GuildAvailable BaseSocketClient.GuildUnavailable BaseSocketClient.GuildMembersDownloaded BaseSocketClient.GuildUpdated BaseSocketClient.GuildJoinRequestDeleted BaseSocketClient.GuildScheduledEventCreated BaseSocketClient.GuildScheduledEventUpdated BaseSocketClient.GuildScheduledEventCancelled BaseSocketClient.GuildScheduledEventCompleted BaseSocketClient.GuildScheduledEventStarted BaseSocketClient.GuildScheduledEventUserAdd BaseSocketClient.GuildScheduledEventUserRemove BaseSocketClient.IntegrationCreated BaseSocketClient.IntegrationUpdated BaseSocketClient.IntegrationDeleted BaseSocketClient.UserJoined BaseSocketClient.UserLeft BaseSocketClient.UserBanned BaseSocketClient.UserUnbanned BaseSocketClient.UserUpdated BaseSocketClient.GuildMemberUpdated BaseSocketClient.UserVoiceStateUpdated BaseSocketClient.VoiceServerUpdated BaseSocketClient.CurrentUserUpdated BaseSocketClient.UserIsTyping BaseSocketClient.RecipientAdded BaseSocketClient.RecipientRemoved BaseSocketClient.PresenceUpdated BaseSocketClient.InviteCreated BaseSocketClient.InviteDeleted BaseSocketClient.InteractionCreated BaseSocketClient.ButtonExecuted BaseSocketClient.SelectMenuExecuted BaseSocketClient.SlashCommandExecuted BaseSocketClient.UserCommandExecuted BaseSocketClient.MessageCommandExecuted BaseSocketClient.AutocompleteExecuted BaseSocketClient.ModalSubmitted BaseSocketClient.ApplicationCommandCreated BaseSocketClient.ApplicationCommandUpdated BaseSocketClient.ApplicationCommandDeleted BaseSocketClient.ThreadCreated BaseSocketClient.ThreadUpdated BaseSocketClient.ThreadDeleted BaseSocketClient.ThreadMemberJoined BaseSocketClient.ThreadMemberLeft BaseSocketClient.StageStarted BaseSocketClient.StageEnded BaseSocketClient.StageUpdated BaseSocketClient.RequestToSpeak BaseSocketClient.SpeakerAdded BaseSocketClient.SpeakerRemoved BaseSocketClient.GuildStickerCreated BaseSocketClient.GuildStickerUpdated BaseSocketClient.GuildStickerDeleted BaseSocketClient.WebhooksUpdated BaseSocketClient.AuditLogCreated BaseSocketClient.AutoModRuleCreated BaseSocketClient.AutoModRuleUpdated BaseSocketClient.AutoModRuleDeleted BaseSocketClient.AutoModActionExecuted BaseSocketClient.EntitlementCreated BaseSocketClient.EntitlementUpdated BaseSocketClient.EntitlementDeleted BaseDiscordClient.Log BaseDiscordClient.LoggedIn BaseDiscordClient.LoggedOut BaseDiscordClient.LoginState BaseDiscordClient.TokenType BaseDiscordClient.LoginAsync(TokenType, string, bool) BaseDiscordClient.LogoutAsync() BaseDiscordClient.Dispose() BaseDiscordClient.DisposeAsync() BaseDiscordClient.GetRecommendedShardCountAsync(RequestOptions) BaseDiscordClient.GetBotGatewayAsync(RequestOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DiscordClientExtensions.GetDMChannelAsync(IDiscordClient, ulong) DiscordClientExtensions.GetDMChannelsAsync(IDiscordClient) DiscordClientExtensions.GetGroupChannelAsync(IDiscordClient, ulong) DiscordClientExtensions.GetGroupChannelsAsync(IDiscordClient) DiscordClientExtensions.GetOptimalVoiceRegionAsync(IDiscordClient) DiscordClientExtensions.GetPrivateChannelAsync(IDiscordClient, ulong) ClientExtensions.AddGuildUserAsync(BaseDiscordClient, ulong, ulong, string, Action<AddGuildUserProperties>, RequestOptions) Constructors DiscordSocketClient() Initializes a new REST/WebSocket-based Discord client. public DiscordSocketClient() DiscordSocketClient(DiscordSocketConfig) Initializes a new REST/WebSocket-based Discord client with the provided configuration. public DiscordSocketClient(DiscordSocketConfig config) Parameters config DiscordSocketConfig The configuration to be used with the client. Properties Activity Gets the activity for the logged-in user. public override IActivity Activity { get; protected set; } Property Value IActivity An activity object that represents the user's current activity. ConnectionState Gets the current connection state of this client. public ConnectionState ConnectionState { get; } Property Value ConnectionState DMChannels Gets a collection of direct message channels opened in this session. public IReadOnlyCollection<SocketDMChannel> DMChannels { get; } Property Value IReadOnlyCollection<SocketDMChannel> A collection of DM channels that have been opened in this session. Remarks This method returns a collection of currently opened direct message channels. warning This method will not return previously opened DM channels outside of the current session! If you have just started the client, this may return an empty collection. DefaultStickerPacks Gets a collection of default stickers. public override IReadOnlyCollection<StickerPack<SocketSticker>> DefaultStickerPacks { get; } Property Value IReadOnlyCollection<StickerPack<SocketSticker>> Entitlements Gets entitlements from cache. public IReadOnlyCollection<SocketEntitlement> Entitlements { get; } Property Value IReadOnlyCollection<SocketEntitlement> GroupChannels Gets a collection of group channels opened in this session. public IReadOnlyCollection<SocketGroupChannel> GroupChannels { get; } Property Value IReadOnlyCollection<SocketGroupChannel> A collection of group channels that have been opened in this session. Remarks This method returns a collection of currently opened group channels. warning This method will not return previously opened group channels outside of the current session! If you have just started the client, this may return an empty collection. Guilds Gets a collection of guilds that the user is currently in. public override IReadOnlyCollection<SocketGuild> Guilds { get; } Property Value IReadOnlyCollection<SocketGuild> A read-only collection of guilds that the current user is in. Latency Gets the estimated round-trip latency, in milliseconds, to the gateway server. public override int Latency { get; protected set; } Property Value int An int that represents the round-trip latency to the WebSocket server. Please note that this value does not represent a \"true\" latency for operations such as sending a message. PrivateChannels Gets a collection of private channels opened in this session. public override IReadOnlyCollection<ISocketPrivateChannel> PrivateChannels { get; } Property Value IReadOnlyCollection<ISocketPrivateChannel> A read-only collection of private channels that the user currently partakes in. Remarks This method will retrieve all private channels (including direct-message, group channel and such) that are currently opened in this session. warning This method will not return previously opened private channels outside of the current session! If you have just started the client, this may return an empty collection. Rest Provides access to a REST-only client with a shared state from this client. public override DiscordSocketRestClient Rest { get; } Property Value DiscordSocketRestClient ShardId Gets the shard of this client. public int ShardId { get; } Property Value int Status Gets the status for the logged-in user. public override UserStatus Status { get; protected set; } Property Value UserStatus A status object that represents the user's online presence status. Methods BulkOverwriteGlobalApplicationCommandsAsync(ApplicationCommandProperties[], RequestOptions) public Task<IReadOnlyCollection<SocketApplicationCommand>> BulkOverwriteGlobalApplicationCommandsAsync(ApplicationCommandProperties[] properties, RequestOptions options = null) Parameters properties ApplicationCommandProperties[] options RequestOptions Returns Task<IReadOnlyCollection<SocketApplicationCommand>> CreateGlobalApplicationCommandAsync(ApplicationCommandProperties, RequestOptions) public Task<SocketApplicationCommand> CreateGlobalApplicationCommandAsync(ApplicationCommandProperties properties, RequestOptions options = null) Parameters properties ApplicationCommandProperties options RequestOptions Returns Task<SocketApplicationCommand> CreateTestEntitlementAsync(ulong, ulong, SubscriptionOwnerType, RequestOptions) Creates a test entitlement to a given SKU for a given guild or user. public Task<RestEntitlement> CreateTestEntitlementAsync(ulong skuId, ulong ownerId, SubscriptionOwnerType ownerType, RequestOptions options = null) Parameters skuId ulong ownerId ulong ownerType SubscriptionOwnerType options RequestOptions Returns Task<RestEntitlement> DeleteTestEntitlementAsync(ulong, RequestOptions) Deletes a currently-active test entitlement. public Task DeleteTestEntitlementAsync(ulong entitlementId, RequestOptions options = null) Parameters entitlementId ulong options RequestOptions Returns Task DownloadUsersAsync(IEnumerable<IGuild>) Attempts to download users into the user cache for the selected guilds. public override Task DownloadUsersAsync(IEnumerable<IGuild> guilds) Parameters guilds IEnumerable<IGuild> The guilds to download the members from. Returns Task A task that represents the asynchronous download operation. GetApplicationInfoAsync(RequestOptions) Gets a Discord application information for the logged-in user. public override Task<RestApplication> GetApplicationInfoAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<RestApplication> A task that represents the asynchronous get operation. The task result contains the application information. Remarks This method reflects your application information you submitted when creating a Discord application via the Developer Portal. GetChannel(ulong) Gets a channel. public override SocketChannel GetChannel(ulong id) Parameters id ulong The snowflake identifier of the channel (e.g. 381889909113225237). Returns SocketChannel A generic WebSocket-based channel object (voice, text, category, etc.) associated with the identifier; null when the channel cannot be found. GetChannelAsync(ulong, RequestOptions) Gets a generic channel from the cache or does a rest request if unavailable. public ValueTask<IChannel> GetChannelAsync(ulong id, RequestOptions options = null) Parameters id ulong The snowflake identifier of the channel (e.g. 381889909113225237). options RequestOptions The options to be used when sending the request. Returns ValueTask<IChannel> A task that represents the asynchronous get operation. The task result contains the channel associated with the snowflake identifier; null when the channel cannot be found. Examples var channel = await _client.GetChannelAsync(381889909113225237); if (channel != null && channel is IMessageChannel msgChannel) { await msgChannel.SendMessageAsync($\"{msgChannel} is created at {msgChannel.CreatedAt}\"); } GetEntitlement(ulong) Gets an entitlement from cache. null if not found. public SocketEntitlement GetEntitlement(ulong id) Parameters id ulong Returns SocketEntitlement GetEntitlementsAsync(BaseDiscordClient, int?, ulong?, ulong?, bool, ulong?, ulong?, ulong[], RequestOptions) Returns all entitlements for a given app, active and expired. public IAsyncEnumerable<IReadOnlyCollection<IEntitlement>> GetEntitlementsAsync(BaseDiscordClient client, int? limit = 100, ulong? afterId = null, ulong? beforeId = null, bool excludeEnded = false, ulong? guildId = null, ulong? userId = null, ulong[] skuIds = null, RequestOptions options = null) Parameters client BaseDiscordClient limit int? afterId ulong? beforeId ulong? excludeEnded bool guildId ulong? userId ulong? skuIds ulong[] options RequestOptions Returns IAsyncEnumerable<IReadOnlyCollection<IEntitlement>> GetGlobalApplicationCommandAsync(ulong, RequestOptions) Gets a global application command. public ValueTask<SocketApplicationCommand> GetGlobalApplicationCommandAsync(ulong id, RequestOptions options = null) Parameters id ulong The id of the command. options RequestOptions The options to be used when sending the request. Returns ValueTask<SocketApplicationCommand> A ValueTask that represents the asynchronous get operation. The task result contains the application command if found, otherwise null. GetGlobalApplicationCommandsAsync(bool, string, RequestOptions) Gets a collection of all global commands. public Task<IReadOnlyCollection<SocketApplicationCommand>> GetGlobalApplicationCommandsAsync(bool withLocalizations = false, string locale = null, RequestOptions options = null) Parameters withLocalizations bool Whether to include full localization dictionaries in the returned objects, instead of the name localized and description localized fields. locale string The target locale of the localized name and description fields. Sets X-Discord-Locale header, which takes precedence over Accept-Language. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<SocketApplicationCommand>> A task that represents the asynchronous get operation. The task result contains a read-only collection of global application commands. GetGuild(ulong) Gets a guild. public override SocketGuild GetGuild(ulong id) Parameters id ulong The guild snowflake identifier. Returns SocketGuild A WebSocket-based guild associated with the snowflake identifier; null when the guild cannot be found. GetSKUsAsync(RequestOptions) Returns all SKUs for a given application. public Task<IReadOnlyCollection<SKU>> GetSKUsAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task<IReadOnlyCollection<SKU>> GetSticker(ulong) Gets a sticker. public SocketSticker GetSticker(ulong id) Parameters id ulong The unique identifier of the sticker. Returns SocketSticker A sticker if found, otherwise null. GetStickerAsync(ulong, CacheMode, RequestOptions) Gets a sticker. public override Task<SocketSticker> GetStickerAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters id ulong The id of the sticker to get. mode CacheMode Whether or not to allow downloading from the api. options RequestOptions The options to be used when sending the request. Returns Task<SocketSticker> A SocketSticker if found, otherwise null. GetUser(string, string) Gets a user. public override SocketUser GetUser(string username, string discriminator = null) Parameters username string The name of the user. discriminator string The discriminator value of the user. Returns SocketUser A generic WebSocket-based user; null when the user cannot be found. Remarks This method gets the user present in the WebSocket cache with the given condition. warning Sometimes a user may return null due to Discord not sending offline users in large guilds (i.e. guild with 100+ members) actively. To download users on startup and to see more information about this subject, see AlwaysDownloadUsers. note This method does not attempt to fetch users that the logged-in user does not have access to (i.e. users who don't share mutual guild(s) with the current user). If you wish to get a user that you do not have access to, consider using the REST implementation of GetUserAsync(ulong, RequestOptions). GetUser(ulong) Gets a generic user. public override SocketUser GetUser(ulong id) Parameters id ulong The user snowflake ID. Returns SocketUser A generic WebSocket-based user; null when the user cannot be found. Remarks This method gets the user present in the WebSocket cache with the given condition. warning Sometimes a user may return null due to Discord not sending offline users in large guilds (i.e. guild with 100+ members) actively. To download users on startup and to see more information about this subject, see AlwaysDownloadUsers. note This method does not attempt to fetch users that the logged-in user does not have access to (i.e. users who don't share mutual guild(s) with the current user). If you wish to get a user that you do not have access to, consider using the REST implementation of GetUserAsync(ulong, RequestOptions). GetUserAsync(ulong, RequestOptions) Gets a user from the cache or does a rest request if unavailable. public ValueTask<IUser> GetUserAsync(ulong id, RequestOptions options = null) Parameters id ulong The snowflake identifier of the user (e.g. 168693960628371456). options RequestOptions The options to be used when sending the request. Returns ValueTask<IUser> A task that represents the asynchronous get operation. The task result contains the user associated with the snowflake identifier; null if the user is not found. Examples var user = await _client.GetUserAsync(168693960628371456); if (user != null) Console.WriteLine($\"{user} is created at {user.CreatedAt}.\"; GetVoiceRegionAsync(string, RequestOptions) Gets a voice region. public override ValueTask<RestVoiceRegion> GetVoiceRegionAsync(string id, RequestOptions options = null) Parameters id string The identifier of the voice region (e.g. eu-central ). options RequestOptions The options to be used when sending the request. Returns ValueTask<RestVoiceRegion> A task that contains a REST-based voice region associated with the identifier; null if the voice region is not found. GetVoiceRegionsAsync(RequestOptions) Gets all voice regions. public override ValueTask<IReadOnlyCollection<RestVoiceRegion>> GetVoiceRegionsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns ValueTask<IReadOnlyCollection<RestVoiceRegion>> A task that contains a read-only collection of REST-based voice regions. PurgeChannelCache() Clears all cached channels from the client. public void PurgeChannelCache() PurgeDMChannelCache() Clears cached DM channels from the client. public void PurgeDMChannelCache() PurgeUserCache() Clears cached users from the client. public void PurgeUserCache() SetActivityAsync(IActivity) Sets the activity of the logged-in user. public override Task SetActivityAsync(IActivity activity) Parameters activity IActivity The activity to be set. Returns Task A task that represents the asynchronous set operation. Remarks This method sets the activity of the user. note Discord will only accept setting of name and the type of activity. warning Bot accounts cannot set CustomStatus as their activity type and it will have no effect. warning Rich Presence cannot be set via this method or client. Rich Presence is strictly limited to RPC clients only. SetCustomStatusAsync(string) Sets the custom status of the logged-in user. public override Task SetCustomStatusAsync(string status) Parameters status string The string that will be displayed as status. Returns Task A task that represents the asynchronous set operation. SetGameAsync(string, string, ActivityType) Sets the game of the user. public override Task SetGameAsync(string name, string streamUrl = null, ActivityType type = ActivityType.Playing) Parameters name string The name of the game. streamUrl string If streaming, the URL of the stream. Must be a valid Twitch URL. type ActivityType The type of the game. Returns Task A task that represents the asynchronous set operation. Examples The following example sets the activity of the current user to the specified game name. await client.SetGameAsync(\"A Strange Game\"); The following example sets the activity of the current user to a streaming status. await client.SetGameAsync(\"Great Stream 10/10\", \"https://twitch.tv/MyAmazingStream1337\", ActivityType.Streaming); Remarks warning Bot accounts cannot set CustomStatus as their activity type and it will have no effect. SetStatusAsync(UserStatus) Sets the current status of the user (e.g. Online, Do not Disturb). public override Task SetStatusAsync(UserStatus status) Parameters status UserStatus The new status to be set. Returns Task A task that represents the asynchronous set operation. Examples The following example sets the status of the current user to Do Not Disturb. await client.SetStatusAsync(UserStatus.DoNotDisturb); StartAsync() Starts the connection between Discord and the client.. public override Task StartAsync() Returns Task A task that represents the asynchronous start operation. Remarks This method will initialize the connection between the client and Discord. important This method will immediately return after it is called, as it will initialize the connection on another thread. StopAsync() Stops the connection between Discord and the client. public override Task StopAsync() Returns Task A task that represents the asynchronous stop operation. Events Connected Fired when connected to the Discord gateway. public event Func<Task> Connected Event Type Func<Task> Disconnected Fired when disconnected to the Discord gateway. public event Func<Exception, Task> Disconnected Event Type Func<Exception, Task> LatencyUpdated Fired when a heartbeat is received from the Discord gateway. public event Func<int, int, Task> LatencyUpdated Event Type Func<int, int, Task> Ready Fired when guild data has finished downloading. public event Func<Task> Ready Event Type Func<Task> Remarks It is possible that some guilds might be unsynced if MaxWaitBetweenGuildAvailablesBeforeReady was not long enough to receive all GUILD_AVAILABLEs before READY."
  },
  "api/Discord.WebSocket.DiscordSocketConfig.html": {
    "href": "api/Discord.WebSocket.DiscordSocketConfig.html",
    "title": "Class DiscordSocketConfig | Discord.Net Documentation",
    "keywords": "Class DiscordSocketConfig Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a configuration class for DiscordSocketClient. public class DiscordSocketConfig : DiscordRestConfig Inheritance object DiscordConfig DiscordRestConfig DiscordSocketConfig Inherited Members DiscordRestConfig.RestClientProvider DiscordRestConfig.APIOnRestInteractionCreation DiscordConfig.APIVersion DiscordConfig.VoiceAPIVersion DiscordConfig.Version DiscordConfig.UserAgent DiscordConfig.APIUrl DiscordConfig.CDNUrl DiscordConfig.InviteUrl DiscordConfig.DefaultRequestTimeout DiscordConfig.MaxMessageSize DiscordConfig.MaxMessagesPerBatch DiscordConfig.MaxUsersPerBatch DiscordConfig.MaxBansPerBatch DiscordConfig.MaxGuildEventUsersPerBatch DiscordConfig.MaxGuildsPerBatch DiscordConfig.MaxUserReactionsPerBatch DiscordConfig.MaxAuditLogEntriesPerBatch DiscordConfig.MaxStickersPerMessage DiscordConfig.MaxEmbedsPerMessage DiscordConfig.DefaultRetryMode DiscordConfig.DefaultRatelimitCallback DiscordConfig.LogLevel DiscordConfig.UseSystemClock DiscordConfig.UseInteractionSnowflakeDate DiscordConfig.FormatUsersInBidirectionalUnicode DiscordConfig.MaxThreadMembersPerBatch DiscordConfig.MaxApplicationTagLength DiscordConfig.MaxApplicationDescriptionLength DiscordConfig.MaxApplicationTagCount DiscordConfig.MaxVoiceChannelStatusLength DiscordConfig.MaxEntitlementsPerBatch object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples The following config enables the message cache and configures the client to always download user upon guild availability. var config = new DiscordSocketConfig { AlwaysDownloadUsers = true, MessageCacheSize = 100 }; var client = new DiscordSocketClient(config); Remarks This configuration, based on DiscordRestConfig, helps determine several key configurations the socket client depend on. For instance, shards and connection timeout. Constructors DiscordSocketConfig() Initializes a new instance of the DiscordSocketConfig class with the default configuration. public DiscordSocketConfig() Fields GatewayEncoding Returns the encoding gateway should use. public const string GatewayEncoding = \"json\" Field Value string Properties AlwaysDownloadDefaultStickers Gets or sets whether or not the client should download the default stickers on startup. public bool AlwaysDownloadDefaultStickers { get; set; } Property Value bool Remarks When this is set to false default stickers aren't present and cannot be resolved by the client. This will make all default stickers have the type of SocketUnknownSticker. AlwaysDownloadUsers Gets or sets whether or not all users should be downloaded as guilds come available. public bool AlwaysDownloadUsers { get; set; } Property Value bool Remarks By default, the Discord gateway will only send offline members if a guild has less than a certain number of members (determined by LargeThreshold in this library). This behavior is why sometimes a user may be missing from the WebSocket cache for collections such as Users. This property ensures that whenever a guild becomes available (determined by GuildAvailable), incomplete user chunks will be downloaded to the WebSocket cache. For more information, please see Request Guild Members on the official Discord API documentation. note Please note that it can be difficult to fill the cache completely on large guilds depending on the traffic. If you are using the command system, the default user TypeReader may fail to find the user due to this issue. This may be resolved at v3 of the library. Until then, you may want to consider overriding the TypeReader and use GetUserAsync(ulong, RequestOptions) or GetGuildUserAsync(ulong, ulong, RequestOptions) as a backup. AlwaysResolveStickers Gets or sets whether or not the client should automatically resolve the stickers sent on a message. public bool AlwaysResolveStickers { get; set; } Property Value bool Remarks Note if a sticker isn't cached the client will preform a rest request to resolve it. This may be very rest heavy depending on your bots size, it isn't recommended to use this with large scale bots as you can get ratelimited easily. AuditLogCacheSize Gets or sets the number of audit logs per guild that should be kept in cache. Setting this to zero disables the audit log cache entirely. public int AuditLogCacheSize { get; set; } Property Value int ConnectionTimeout Gets or sets the time, in milliseconds, to wait for a connection to complete before aborting. public int ConnectionTimeout { get; set; } Property Value int GatewayHost Gets or sets the WebSocket host to connect to. If null, the client will use the /gateway endpoint. public string GatewayHost { get; set; } Property Value string GatewayIntents Gets or sets gateway intents to limit what events are sent from Discord. The default is AllUnprivileged. public GatewayIntents GatewayIntents { get; set; } Property Value GatewayIntents Remarks For more information, please see GatewayIntents on the official Discord API documentation. HandlerTimeout Gets or sets the timeout for event handlers, in milliseconds, after which a warning will be logged. Setting this property to nulldisables this check. public int? HandlerTimeout { get; set; } Property Value int? IdentifyMaxConcurrency Gets or sets the maximum identify concurrency. public int IdentifyMaxConcurrency { get; set; } Property Value int Remarks This information is provided by Discord. It is only used when using a DiscordShardedClient and auto-sharding is disabled. LargeThreshold Gets or sets the max number of users a guild may have for offline users to be included in the READY packet. The maximum value allowed is 250. public int LargeThreshold { get; set; } Property Value int LogGatewayIntentWarnings Gets or sets whether or not to log warnings related to guild intents and events. public bool LogGatewayIntentWarnings { get; set; } Property Value bool MaxWaitBetweenGuildAvailablesBeforeReady Gets or sets the maximum wait time in milliseconds between GUILD_AVAILABLE events before firing READY. If zero, READY will fire as soon as it is received and all guilds will be unavailable. public int MaxWaitBetweenGuildAvailablesBeforeReady { get; set; } Property Value int A int representing the maximum wait time in milliseconds between GUILD_AVAILABLE events before firing READY. Remarks This property is measured in milliseconds; negative values will throw an exception. If a guild is not received before READY, it will be unavailable. Exceptions ArgumentException Value must be at least 0. MessageCacheSize Gets or sets the number of messages per channel that should be kept in cache. Setting this to zero disables the message cache entirely. public int MessageCacheSize { get; set; } Property Value int ShardId Gets or sets the ID for this shard. Must be less than TotalShards. public int? ShardId { get; set; } Property Value int? SuppressUnknownDispatchWarnings Gets or sets whether or not Unknown Dispatch event messages should be logged. public bool SuppressUnknownDispatchWarnings { get; set; } Property Value bool TotalShards Gets or sets the total number of shards for this application. public int? TotalShards { get; set; } Property Value int? Remarks If this is left null in a sharded client the bot will get the recommended shard count from discord and use that. UdpSocketProvider Gets or sets the provider used to generate new UDP sockets. public UdpSocketProvider UdpSocketProvider { get; set; } Property Value UdpSocketProvider WebSocketProvider Gets or sets the provider used to generate new WebSocket connections. public WebSocketProvider WebSocketProvider { get; set; } Property Value WebSocketProvider"
  },
  "api/Discord.WebSocket.DiscordSocketRestClient.html": {
    "href": "api/Discord.WebSocket.DiscordSocketRestClient.html",
    "title": "Class DiscordSocketRestClient | Discord.Net Documentation",
    "keywords": "Class DiscordSocketRestClient Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll public class DiscordSocketRestClient : DiscordRestClient, IDiscordClient, IDisposable, IAsyncDisposable Inheritance object BaseDiscordClient DiscordRestClient DiscordSocketRestClient Implements IDiscordClient IDisposable IAsyncDisposable Inherited Members DiscordRestClient.CurrentUser DiscordRestClient.IsValidHttpInteraction(string, string, string, string) DiscordRestClient.IsValidHttpInteraction(string, string, string, byte[]) DiscordRestClient.ParseHttpInteractionAsync(string, string, string, string, Func<InteractionProperties, bool>) DiscordRestClient.ParseHttpInteractionAsync(string, string, string, byte[], Func<InteractionProperties, bool>) DiscordRestClient.GetCurrentUserAsync(RequestOptions) DiscordRestClient.GetCurrentUserGuildMemberAsync(ulong, RequestOptions) DiscordRestClient.GetApplicationInfoAsync(RequestOptions) DiscordRestClient.GetCurrentBotInfoAsync(RequestOptions) DiscordRestClient.ModifyCurrentBotApplicationAsync(Action<ModifyApplicationProperties>, RequestOptions) DiscordRestClient.GetChannelAsync(ulong, RequestOptions) DiscordRestClient.GetPrivateChannelsAsync(RequestOptions) DiscordRestClient.GetDMChannelsAsync(RequestOptions) DiscordRestClient.GetGroupChannelsAsync(RequestOptions) DiscordRestClient.GetConnectionsAsync(RequestOptions) DiscordRestClient.GetInviteAsync(string, RequestOptions, ulong?) DiscordRestClient.GetGuildAsync(ulong, RequestOptions) DiscordRestClient.GetGuildAsync(ulong, bool, RequestOptions) DiscordRestClient.GetGuildWidgetAsync(ulong, RequestOptions) DiscordRestClient.GetGuildSummariesAsync(RequestOptions) DiscordRestClient.GetGuildSummariesAsync(ulong, int, RequestOptions) DiscordRestClient.GetGuildsAsync(RequestOptions) DiscordRestClient.GetGuildsAsync(bool, RequestOptions) DiscordRestClient.CreateGuildAsync(string, IVoiceRegion, Stream, RequestOptions) DiscordRestClient.GetUserAsync(ulong, RequestOptions) DiscordRestClient.GetGuildUserAsync(ulong, ulong, RequestOptions) DiscordRestClient.GetVoiceRegionsAsync(RequestOptions) DiscordRestClient.GetVoiceRegionAsync(string, RequestOptions) DiscordRestClient.GetWebhookAsync(ulong, RequestOptions) DiscordRestClient.CreateGlobalCommand(ApplicationCommandProperties, RequestOptions) DiscordRestClient.CreateGuildCommand(ApplicationCommandProperties, ulong, RequestOptions) DiscordRestClient.GetGlobalApplicationCommands(bool, string, RequestOptions) DiscordRestClient.GetGuildApplicationCommands(ulong, bool, string, RequestOptions) DiscordRestClient.BulkOverwriteGlobalCommands(ApplicationCommandProperties[], RequestOptions) DiscordRestClient.BulkOverwriteGuildCommands(ApplicationCommandProperties[], ulong, RequestOptions) DiscordRestClient.BatchEditGuildCommandPermissions(ulong, IDictionary<ulong, ApplicationCommandPermission[]>, RequestOptions) DiscordRestClient.DeleteAllGlobalCommandsAsync(RequestOptions) DiscordRestClient.AddRoleAsync(ulong, ulong, ulong) DiscordRestClient.RemoveRoleAsync(ulong, ulong, ulong) DiscordRestClient.AddReactionAsync(ulong, ulong, IEmote, RequestOptions) DiscordRestClient.RemoveReactionAsync(ulong, ulong, ulong, IEmote, RequestOptions) DiscordRestClient.RemoveAllReactionsAsync(ulong, ulong, RequestOptions) DiscordRestClient.RemoveAllReactionsForEmoteAsync(ulong, ulong, IEmote, RequestOptions) DiscordRestClient.GetRoleConnectionMetadataRecordsAsync(RequestOptions) DiscordRestClient.ModifyRoleConnectionMetadataRecordsAsync(ICollection<RoleConnectionMetadataProperties>, RequestOptions) DiscordRestClient.GetUserApplicationRoleConnectionAsync(ulong, RequestOptions) DiscordRestClient.ModifyUserApplicationRoleConnectionAsync(ulong, RoleConnectionProperties, RequestOptions) DiscordRestClient.CreateTestEntitlementAsync(ulong, ulong, SubscriptionOwnerType, RequestOptions) DiscordRestClient.DeleteTestEntitlementAsync(ulong, RequestOptions) DiscordRestClient.GetEntitlementsAsync(int?, ulong?, ulong?, bool, ulong?, ulong?, ulong[], RequestOptions) DiscordRestClient.GetSKUsAsync(RequestOptions) BaseDiscordClient.Log BaseDiscordClient.LoggedIn BaseDiscordClient.LoggedOut BaseDiscordClient.LoginState BaseDiscordClient.TokenType BaseDiscordClient.Dispose() BaseDiscordClient.DisposeAsync() BaseDiscordClient.GetRecommendedShardCountAsync(RequestOptions) BaseDiscordClient.GetBotGatewayAsync(RequestOptions) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DiscordClientExtensions.GetDMChannelAsync(IDiscordClient, ulong) DiscordClientExtensions.GetDMChannelsAsync(IDiscordClient) DiscordClientExtensions.GetGroupChannelAsync(IDiscordClient, ulong) DiscordClientExtensions.GetGroupChannelsAsync(IDiscordClient) DiscordClientExtensions.GetOptimalVoiceRegionAsync(IDiscordClient) DiscordClientExtensions.GetPrivateChannelAsync(IDiscordClient, ulong) ClientExtensions.AddGuildUserAsync(BaseDiscordClient, ulong, ulong, string, Action<AddGuildUserProperties>, RequestOptions) Methods LoginAsync(TokenType, string, bool) public Task LoginAsync(TokenType tokenType, string token, bool validateToken = true) Parameters tokenType TokenType token string validateToken bool Returns Task LogoutAsync() public Task LogoutAsync() Returns Task"
  },
  "api/Discord.WebSocket.GatewayReconnectException.html": {
    "href": "api/Discord.WebSocket.GatewayReconnectException.html",
    "title": "Class GatewayReconnectException | Discord.Net Documentation",
    "keywords": "Class GatewayReconnectException Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll The exception thrown when the gateway client has been requested to reconnect. public class GatewayReconnectException : Exception, ISerializable Inheritance object Exception GatewayReconnectException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors GatewayReconnectException(string) Initializes a new instance of the GatewayReconnectException class with the reconnection message. public GatewayReconnectException(string message) Parameters message string The reason why the gateway has been requested to reconnect."
  },
  "api/Discord.WebSocket.ISocketAudioChannel.html": {
    "href": "api/Discord.WebSocket.ISocketAudioChannel.html",
    "title": "Interface ISocketAudioChannel | Discord.Net Documentation",
    "keywords": "Interface ISocketAudioChannel Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a generic WebSocket-based audio channel. public interface ISocketAudioChannel : IAudioChannel, IChannel, ISnowflakeEntity, IEntity<ulong> Inherited Members IAudioChannel.RTCRegion IAudioChannel.ConnectAsync(bool, bool, bool) IAudioChannel.DisconnectAsync() IAudioChannel.ModifyAsync(Action<AudioChannelProperties>, RequestOptions) IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) ISnowflakeEntity.CreatedAt IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel)"
  },
  "api/Discord.WebSocket.ISocketAuditLogData.html": {
    "href": "api/Discord.WebSocket.ISocketAuditLogData.html",
    "title": "Interface ISocketAuditLogData | Discord.Net Documentation",
    "keywords": "Interface ISocketAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents data applied to a SocketAuditLogEntry. public interface ISocketAuditLogData : IAuditLogData"
  },
  "api/Discord.WebSocket.ISocketMessageChannel.html": {
    "href": "api/Discord.WebSocket.ISocketMessageChannel.html",
    "title": "Interface ISocketMessageChannel | Discord.Net Documentation",
    "keywords": "Interface ISocketMessageChannel Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a generic WebSocket-based channel that can send and receive messages. public interface ISocketMessageChannel : IMessageChannel, IChannel, ISnowflakeEntity, IEntity<ulong> Inherited Members IMessageChannel.GetMessageAsync(ulong, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(ulong, Direction, int, CacheMode, RequestOptions) IMessageChannel.GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions) IMessageChannel.DeleteMessageAsync(ulong, RequestOptions) IMessageChannel.DeleteMessageAsync(IMessage, RequestOptions) IMessageChannel.ModifyMessageAsync(ulong, Action<MessageProperties>, RequestOptions) IMessageChannel.TriggerTypingAsync(RequestOptions) IMessageChannel.EnterTypingState(RequestOptions) IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) ISnowflakeEntity.CreatedAt IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties CachedMessages Gets all messages in this channel's cache. IReadOnlyCollection<SocketMessage> CachedMessages { get; } Property Value IReadOnlyCollection<SocketMessage> A read-only collection of WebSocket-based messages. Methods GetCachedMessage(ulong) Gets a cached message from this channel. SocketMessage GetCachedMessage(ulong id) Parameters id ulong The snowflake identifier of the message. Returns SocketMessage A WebSocket-based message object; null if it does not exist in the cache or if caching is not enabled. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return null. Please refer to MessageCacheSize for more details. This method retrieves the message from the local WebSocket cache and does not send any additional request to Discord. This message may be a message that has been deleted. GetCachedMessages(IMessage, Direction, int) Gets the last N cached messages starting from a certain message in this message channel. IReadOnlyCollection<SocketMessage> GetCachedMessages(IMessage fromMessage, Direction dir, int limit = 100) Parameters fromMessage IMessage The message to start the fetching from. dir Direction The direction of which the message should be gotten from. limit int The number of messages to get. Returns IReadOnlyCollection<SocketMessage> A read-only collection of WebSocket-based messages. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Discord. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set. GetCachedMessages(int) Gets the last N cached messages from this message channel. IReadOnlyCollection<SocketMessage> GetCachedMessages(int limit = 100) Parameters limit int The number of messages to get. Returns IReadOnlyCollection<SocketMessage> A read-only collection of WebSocket-based messages. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Discord. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set. GetCachedMessages(ulong, Direction, int) Gets the last N cached messages starting from a certain message in this message channel. IReadOnlyCollection<SocketMessage> GetCachedMessages(ulong fromMessageId, Direction dir, int limit = 100) Parameters fromMessageId ulong The message ID to start the fetching from. dir Direction The direction of which the message should be gotten from. limit int The number of messages to get. Returns IReadOnlyCollection<SocketMessage> A read-only collection of WebSocket-based messages. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Discord. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set. GetPinnedMessagesAsync(RequestOptions) Gets a read-only collection of pinned messages in this channel. Task<IReadOnlyCollection<RestMessage>> GetPinnedMessagesAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestMessage>> A task that represents the asynchronous get operation for retrieving pinned messages in this channel. The task result contains a read-only collection of messages found in the pinned messages. Remarks This method follows the same behavior as described in GetPinnedMessagesAsync(RequestOptions). Please visit its documentation for more details on this method. SendFileAsync(FileAttachment, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a file to this message channel with an optional caption. Task<RestUserMessage> SendFileAsync(FileAttachment attachment, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters attachment FileAttachment The attachment containing the file and description. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Remarks This method sends a file as if you are uploading an attachment directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. SendFileAsync(Stream, string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a file to this message channel with an optional caption. Task<RestUserMessage> SendFileAsync(Stream stream, string filename, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters stream Stream The Stream of the file to be sent. filename string The name of the attachment. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. isSpoiler bool Whether the message attachment should be hidden as a spoiler. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example uploads a streamed image that will be called b1nzy.jpg embedded inside a rich embed to the channel. using (var b1nzyStream = await httpClient.GetStreamAsync(\"https://example.com/b1nzy\")) await channel.SendFileAsync(b1nzyStream, \"b1nzy.jpg\", embed: new EmbedBuilder { ImageUrl = \"attachment://b1nzy.jpg\" }.Build()); Remarks This method sends a file as if you are uploading an attachment directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. SendFileAsync(string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a file to this message channel with an optional caption. Task<RestUserMessage> SendFileAsync(string filePath, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters filePath string The file path of the file. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. isSpoiler bool Whether the message attachment should be hidden as a spoiler. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example uploads a local file called wumpus.txt along with the text good discord boi to the channel. await channel.SendFileAsync(\"wumpus.txt\", \"good discord boi\"); The following example uploads a local image called b1nzy.jpg embedded inside a rich embed to the channel. await channel.SendFileAsync(\"b1nzy.jpg\", embed: new EmbedBuilder { ImageUrl = \"attachment://b1nzy.jpg\" }.Build()); Remarks This method sends a file as if you are uploading an attachment directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. SendFilesAsync(IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a collection of files to this message channel. Task<RestUserMessage> SendFilesAsync(IEnumerable<FileAttachment> attachments, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Remarks This method sends files as if you are uploading attachments directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. SendMessageAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a message to this message channel. Task<RestUserMessage> SendMessageAsync(string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters text string The message to be sent. isTTS bool Determines whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the message. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example sends a message with the current system time in RFC 1123 format to the channel and deletes itself after 5 seconds. var message = await channel.SendMessageAsync(DateTimeOffset.UtcNow.ToString(\"R\")); await Task.Delay(TimeSpan.FromSeconds(5)) .ContinueWith(x => message.DeleteAsync());"
  },
  "api/Discord.WebSocket.ISocketPrivateChannel.html": {
    "href": "api/Discord.WebSocket.ISocketPrivateChannel.html",
    "title": "Interface ISocketPrivateChannel | Discord.Net Documentation",
    "keywords": "Interface ISocketPrivateChannel Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a generic WebSocket-based channel that is private to select recipients. public interface ISocketPrivateChannel : IPrivateChannel, IChannel, ISnowflakeEntity, IEntity<ulong> Inherited Members IChannel.Name IChannel.GetUsersAsync(CacheMode, RequestOptions) IChannel.GetUserAsync(ulong, CacheMode, RequestOptions) ISnowflakeEntity.CreatedAt IEntity<ulong>.Id Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties Recipients IReadOnlyCollection<SocketUser> Recipients { get; } Property Value IReadOnlyCollection<SocketUser>"
  },
  "api/Discord.WebSocket.SocketApplicationCommand.html": {
    "href": "api/Discord.WebSocket.SocketApplicationCommand.html",
    "title": "Class SocketApplicationCommand | Discord.Net Documentation",
    "keywords": "Class SocketApplicationCommand Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a Websocket-based IApplicationCommand. public class SocketApplicationCommand : SocketEntity<ulong>, IApplicationCommand, ISnowflakeEntity, IEntity<ulong>, IDeletable Inheritance object SocketEntity<ulong> SocketApplicationCommand Implements IApplicationCommand ISnowflakeEntity IEntity<ulong> IDeletable Inherited Members SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ApplicationId Gets the unique id of the parent application. public ulong ApplicationId { get; } Property Value ulong CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. DefaultMemberPermissions Set of default GuildPermission required to invoke the command. public GuildPermissions DefaultMemberPermissions { get; } Property Value GuildPermissions Description Gets the description of the command. public string Description { get; } Property Value string DescriptionLocalizations Gets the localization dictionary for the description field of this command. public IReadOnlyDictionary<string, string> DescriptionLocalizations { get; } Property Value IReadOnlyDictionary<string, string> DescriptionLocalized Gets the localized description of this command. public string DescriptionLocalized { get; } Property Value string Remarks Only returned when the withLocalizations query parameter is set to false when requesting the command. Guild Gets the guild this command resides in; if this command is a global command then it will return null public SocketGuild Guild { get; } Property Value SocketGuild IsDefaultPermission Gets whether the command is enabled by default when the app is added to a guild. public bool IsDefaultPermission { get; } Property Value bool IsEnabledInDm Indicates whether the command is available in DMs with the app. public bool IsEnabledInDm { get; } Property Value bool Remarks Only for globally-scoped commands. IsGlobalCommand Gets whether or not this command is a global application command. public bool IsGlobalCommand { get; } Property Value bool IsNsfw Indicates whether the command is age restricted. public bool IsNsfw { get; } Property Value bool Name Gets the name of the command. public string Name { get; } Property Value string NameLocalizations Gets the localization dictionary for the name field of this command. public IReadOnlyDictionary<string, string> NameLocalizations { get; } Property Value IReadOnlyDictionary<string, string> NameLocalized Gets the localized name of this command. public string NameLocalized { get; } Property Value string Remarks Only returned when the withLocalizations query parameter is set to false when requesting the command. Options Gets a collection of SocketApplicationCommandOptions for this command. public IReadOnlyCollection<SocketApplicationCommandOption> Options { get; } Property Value IReadOnlyCollection<SocketApplicationCommandOption> Remarks If the Type is not a slash command, this field will be an empty collection. Type Gets the type of the command. public ApplicationCommandType Type { get; } Property Value ApplicationCommandType Methods DeleteAsync(RequestOptions) Deletes this object and all its children. public Task DeleteAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task ModifyAsync(Action<ApplicationCommandProperties>, RequestOptions) Modifies the current application command. public Task ModifyAsync(Action<ApplicationCommandProperties> func, RequestOptions options = null) Parameters func Action<ApplicationCommandProperties> The new properties to use when modifying the command. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. ModifyAsync<TArg>(Action<TArg>, RequestOptions) Modifies the current application command. public Task ModifyAsync<TArg>(Action<TArg> func, RequestOptions options = null) where TArg : ApplicationCommandProperties Parameters func Action<TArg> The new properties to use when modifying the command. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Type Parameters TArg Exceptions InvalidOperationException Thrown when you pass in an invalid ApplicationCommandProperties type."
  },
  "api/Discord.WebSocket.SocketApplicationCommandChoice.html": {
    "href": "api/Discord.WebSocket.SocketApplicationCommandChoice.html",
    "title": "Class SocketApplicationCommandChoice | Discord.Net Documentation",
    "keywords": "Class SocketApplicationCommandChoice Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a choice for a SocketApplicationCommandOption. public class SocketApplicationCommandChoice : IApplicationCommandOptionChoice Inheritance object SocketApplicationCommandChoice Implements IApplicationCommandOptionChoice Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets the choice name. public string Name { get; } Property Value string NameLocalizations Gets the localization dictionary for the name field of this command option choice. public IReadOnlyDictionary<string, string> NameLocalizations { get; } Property Value IReadOnlyDictionary<string, string> NameLocalized Gets the localized name of this command option choice. public string NameLocalized { get; } Property Value string Remarks Only returned when the withLocalizations query parameter is set to false when requesting the command. Value Gets the value of the choice. public object Value { get; } Property Value object"
  },
  "api/Discord.WebSocket.SocketApplicationCommandOption.html": {
    "href": "api/Discord.WebSocket.SocketApplicationCommandOption.html",
    "title": "Class SocketApplicationCommandOption | Discord.Net Documentation",
    "keywords": "Class SocketApplicationCommandOption Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents an option for a SocketApplicationCommand. public class SocketApplicationCommandOption : IApplicationCommandOption Inheritance object SocketApplicationCommandOption Implements IApplicationCommandOption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelTypes Gets the allowed channel types for this option. public IReadOnlyCollection<ChannelType> ChannelTypes { get; } Property Value IReadOnlyCollection<ChannelType> Choices Gets a collection of choices for the user to pick from. public IReadOnlyCollection<SocketApplicationCommandChoice> Choices { get; } Property Value IReadOnlyCollection<SocketApplicationCommandChoice> Description Gets the description of this command option. public string Description { get; } Property Value string DescriptionLocalizations Gets the localization dictionary for the description field of this command option. public IReadOnlyDictionary<string, string> DescriptionLocalizations { get; } Property Value IReadOnlyDictionary<string, string> DescriptionLocalized Gets the localized description of this command option. public string DescriptionLocalized { get; } Property Value string Remarks Only returned when the withLocalizations query parameter is set to false when requesting the command. IsAutocomplete Gets whether or not the option has autocomplete enabled. public bool? IsAutocomplete { get; } Property Value bool? IsDefault Gets whether or not this is the first required option for the user to complete. public bool? IsDefault { get; } Property Value bool? IsRequired Gets whether or not the parameter is required or optional. public bool? IsRequired { get; } Property Value bool? MaxLength Gets the maximum allowed length for a string input. public int? MaxLength { get; } Property Value int? MaxValue Gets the largest number value the user can input. public double? MaxValue { get; } Property Value double? MinLength Gets the minimum allowed length for a string input. public int? MinLength { get; } Property Value int? MinValue Gets the smallest number value the user can input. public double? MinValue { get; } Property Value double? Name Gets the name of this command option. public string Name { get; } Property Value string NameLocalizations Gets the localization dictionary for the name field of this command option. public IReadOnlyDictionary<string, string> NameLocalizations { get; } Property Value IReadOnlyDictionary<string, string> NameLocalized Gets the localized name of this command option. public string NameLocalized { get; } Property Value string Remarks Only returned when the withLocalizations query parameter is set to false when requesting the command. Options Gets a collection of nested options. public IReadOnlyCollection<SocketApplicationCommandOption> Options { get; } Property Value IReadOnlyCollection<SocketApplicationCommandOption> Type Gets the type of this IApplicationCommandOption. public ApplicationCommandOptionType Type { get; } Property Value ApplicationCommandOptionType"
  },
  "api/Discord.WebSocket.SocketAuditLogEntry.html": {
    "href": "api/Discord.WebSocket.SocketAuditLogEntry.html",
    "title": "Class SocketAuditLogEntry | Discord.Net Documentation",
    "keywords": "Class SocketAuditLogEntry Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a Socket-based audit log entry. public class SocketAuditLogEntry : SocketEntity<ulong>, IAuditLogEntry, ISnowflakeEntity, IEntity<ulong> Inheritance object SocketEntity<ulong> SocketAuditLogEntry Implements IAuditLogEntry ISnowflakeEntity IEntity<ulong> Inherited Members SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Action Gets the action which occurred to create this entry. public ActionType Action { get; } Property Value ActionType The type of action for this audit log entry. CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. Data Gets the data for this entry. public ISocketAuditLogData Data { get; } Property Value ISocketAuditLogData An IAuditLogData for this audit log entry; null if no data is available. Reason Gets the reason behind the change. public string Reason { get; } Property Value string A string containing the reason for the change; null if none is provided. User Gets the user responsible for causing the changes. public SocketUser User { get; } Property Value SocketUser A user object."
  },
  "api/Discord.WebSocket.SocketAutoModBlockedMessageAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketAutoModBlockedMessageAuditLogData.html",
    "title": "Class SocketAutoModBlockedMessageAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketAutoModBlockedMessageAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to message getting blocked by automod. public class SocketAutoModBlockedMessageAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketAutoModBlockedMessageAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AutoModRuleName Gets the name of the auto moderation rule that got triggered. public string AutoModRuleName { get; set; } Property Value string AutoModRuleTriggerType Gets the trigger type of the auto moderation rule that got triggered. public AutoModTriggerType AutoModRuleTriggerType { get; set; } Property Value AutoModTriggerType ChannelId Gets the channel the message was sent in. public ulong ChannelId { get; set; } Property Value ulong"
  },
  "api/Discord.WebSocket.SocketAutoModFlaggedMessageAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketAutoModFlaggedMessageAuditLogData.html",
    "title": "Class SocketAutoModFlaggedMessageAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketAutoModFlaggedMessageAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to message getting flagged by automod. public class SocketAutoModFlaggedMessageAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketAutoModFlaggedMessageAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AutoModRuleName Gets the name of the auto moderation rule that got triggered. public string AutoModRuleName { get; set; } Property Value string AutoModRuleTriggerType Gets the trigger type of the auto moderation rule that got triggered. public AutoModTriggerType AutoModRuleTriggerType { get; set; } Property Value AutoModTriggerType ChannelId Gets the channel the message was sent in. public ulong ChannelId { get; set; } Property Value ulong"
  },
  "api/Discord.WebSocket.SocketAutoModRule.html": {
    "href": "api/Discord.WebSocket.SocketAutoModRule.html",
    "title": "Class SocketAutoModRule | Discord.Net Documentation",
    "keywords": "Class SocketAutoModRule Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll public class SocketAutoModRule : SocketEntity<ulong>, IAutoModRule, ISnowflakeEntity, IEntity<ulong>, IDeletable Inheritance object SocketEntity<ulong> SocketAutoModRule Implements IAutoModRule ISnowflakeEntity IEntity<ulong> IDeletable Inherited Members SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Actions Gets a collection of actions that will be preformed if a user breaks this rule. public IReadOnlyCollection<AutoModRuleAction> Actions { get; } Property Value IReadOnlyCollection<AutoModRuleAction> AllowList Gets the allow list patterns for this rule. Empty if the rule has no allowed terms. public IReadOnlyCollection<string> AllowList { get; } Property Value IReadOnlyCollection<string> Remarks This collection will be empty if TriggerType is not Keyword. CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. Creator Gets the creator of this rule. public SocketGuildUser Creator { get; } Property Value SocketGuildUser Enabled Gets whether or not this rule is enabled. public bool Enabled { get; } Property Value bool EventType Gets the event type on which this rule is triggered. public AutoModEventType EventType { get; } Property Value AutoModEventType ExemptChannels Gets the channels that are exempt from this rule. public IReadOnlyCollection<SocketGuildChannel> ExemptChannels { get; } Property Value IReadOnlyCollection<SocketGuildChannel> ExemptRoles Gets the roles that are exempt from this rule. public IReadOnlyCollection<SocketRole> ExemptRoles { get; } Property Value IReadOnlyCollection<SocketRole> Guild Gets the guild that this rule is in. public SocketGuild Guild { get; } Property Value SocketGuild KeywordFilter Gets the keyword filter for this rule. public IReadOnlyCollection<string> KeywordFilter { get; } Property Value IReadOnlyCollection<string> Remarks This collection will be empty if TriggerType is not Keyword. MentionTotalLimit Gets the total mention limit for this rule. public int? MentionTotalLimit { get; } Property Value int? Remarks This property will be null if TriggerType is not MentionSpam. Name Get the name of this rule. public string Name { get; } Property Value string Presets Gets the preset keyword types for this rule. Empty if the rule has no presets. public IReadOnlyCollection<KeywordPresetTypes> Presets { get; } Property Value IReadOnlyCollection<KeywordPresetTypes> Remarks This collection will be empty if TriggerType is not KeywordPreset. RegexPatterns Gets regex patterns for this rule. Empty if the rule has no regexes. public IReadOnlyCollection<string> RegexPatterns { get; } Property Value IReadOnlyCollection<string> Remarks This collection will be empty if TriggerType is not Keyword. TriggerType Gets the trigger type on which this rule executes. public AutoModTriggerType TriggerType { get; } Property Value AutoModTriggerType Methods DeleteAsync(RequestOptions) Deletes this object and all its children. public Task DeleteAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task ModifyAsync(Action<AutoModRuleProperties>, RequestOptions) Modifies this rule. public Task ModifyAsync(Action<AutoModRuleProperties> func, RequestOptions options = null) Parameters func Action<AutoModRuleProperties> The delegate containing the properties to modify the rule with. options RequestOptions The options to be used when sending the request. Returns Task"
  },
  "api/Discord.WebSocket.SocketAutoModRuleCreatedAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketAutoModRuleCreatedAuditLogData.html",
    "title": "Class SocketAutoModRuleCreatedAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketAutoModRuleCreatedAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to an auto moderation rule creation. public class SocketAutoModRuleCreatedAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketAutoModRuleCreatedAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data Gets the auto moderation rule information after the changes. public SocketAutoModRuleInfo Data { get; } Property Value SocketAutoModRuleInfo"
  },
  "api/Discord.WebSocket.SocketAutoModRuleDeletedAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketAutoModRuleDeletedAuditLogData.html",
    "title": "Class SocketAutoModRuleDeletedAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketAutoModRuleDeletedAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to an auto moderation rule removal. public class SocketAutoModRuleDeletedAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketAutoModRuleDeletedAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data Gets the auto moderation rule information before the changes. public SocketAutoModRuleInfo Data { get; } Property Value SocketAutoModRuleInfo"
  },
  "api/Discord.WebSocket.SocketAutoModRuleInfo.html": {
    "href": "api/Discord.WebSocket.SocketAutoModRuleInfo.html",
    "title": "Class SocketAutoModRuleInfo | Discord.Net Documentation",
    "keywords": "Class SocketAutoModRuleInfo Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents information for an auto moderation rule. public class SocketAutoModRuleInfo Inheritance object SocketAutoModRuleInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Actions Gets a collection of actions that will be preformed if a user breaks this rule. public IReadOnlyCollection<AutoModRuleAction> Actions { get; } Property Value IReadOnlyCollection<AutoModRuleAction> Remarks null if this property is not mentioned in this entry. AllowList Gets the allow list patterns for this rule. Empty if the rule has no allowed terms. public IReadOnlyCollection<string> AllowList { get; } Property Value IReadOnlyCollection<string> Remarks This collection will be empty if TriggerType is not Keyword. Enabled Gets whether or not this rule is enabled. public bool? Enabled { get; set; } Property Value bool? Remarks null if this property is not mentioned in this entry. EventType Gets the event type on which this rule is triggered. public AutoModEventType? EventType { get; set; } Property Value AutoModEventType? Remarks null if this property is not mentioned in this entry. ExemptChannels Gets a collection of channel ids that are exempt from this rule. Empty if the rule has no exempt channels. public IReadOnlyCollection<ulong> ExemptChannels { get; set; } Property Value IReadOnlyCollection<ulong> Remarks null if this property is not mentioned in this entry. ExemptRoles Gets a collection of role ids that are exempt from this rule. Empty if the rule has no exempt roles. public IReadOnlyCollection<ulong> ExemptRoles { get; set; } Property Value IReadOnlyCollection<ulong> Remarks null if this property is not mentioned in this entry. KeywordFilter Gets the keyword filter for this rule. public IReadOnlyCollection<string> KeywordFilter { get; } Property Value IReadOnlyCollection<string> Remarks This collection will be empty if TriggerType is not Keyword. MentionTotalLimit Gets the total mention limit for this rule. public int? MentionTotalLimit { get; } Property Value int? Remarks This property will be null if TriggerType is not MentionSpam. Name Get the name of this rule. public string Name { get; set; } Property Value string Remarks null if this property is not mentioned in this entry. Presets Gets the preset keyword types for this rule. Empty if the rule has no presets. public IReadOnlyCollection<KeywordPresetTypes> Presets { get; } Property Value IReadOnlyCollection<KeywordPresetTypes> Remarks This collection will be empty if TriggerType is not KeywordPreset. RegexPatterns Gets regex patterns for this rule. Empty if the rule has no regexes. public IReadOnlyCollection<string> RegexPatterns { get; } Property Value IReadOnlyCollection<string> Remarks This collection will be empty if TriggerType is not Keyword. TriggerType Gets the trigger type on which this rule executes. public AutoModTriggerType? TriggerType { get; set; } Property Value AutoModTriggerType? Remarks null if this property is not mentioned in this entry."
  },
  "api/Discord.WebSocket.SocketAutoModTimeoutUserAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketAutoModTimeoutUserAuditLogData.html",
    "title": "Class SocketAutoModTimeoutUserAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketAutoModTimeoutUserAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to user getting in timeout by automod. public class SocketAutoModTimeoutUserAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketAutoModTimeoutUserAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AutoModRuleName Gets the name of the auto moderation rule that got triggered. public string AutoModRuleName { get; set; } Property Value string AutoModRuleTriggerType Gets the trigger type of the auto moderation rule that got triggered. public AutoModTriggerType AutoModRuleTriggerType { get; set; } Property Value AutoModTriggerType ChannelId Gets the channel the message was sent in. public ulong ChannelId { get; set; } Property Value ulong"
  },
  "api/Discord.WebSocket.SocketAutocompleteInteraction.html": {
    "href": "api/Discord.WebSocket.SocketAutocompleteInteraction.html",
    "title": "Class SocketAutocompleteInteraction | Discord.Net Documentation",
    "keywords": "Class SocketAutocompleteInteraction Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a ApplicationCommandAutocomplete received over the gateway. public class SocketAutocompleteInteraction : SocketInteraction, IAutocompleteInteraction, IDiscordInteraction, ISnowflakeEntity, IEntity<ulong> Inheritance object SocketEntity<ulong> SocketInteraction SocketAutocompleteInteraction Implements IAutocompleteInteraction IDiscordInteraction ISnowflakeEntity IEntity<ulong> Inherited Members SocketInteraction.Channel SocketInteraction.ChannelId SocketInteraction.User SocketInteraction.Type SocketInteraction.Token SocketInteraction.UserLocale SocketInteraction.GuildLocale SocketInteraction.Version SocketInteraction.CreatedAt SocketInteraction.IsValidToken SocketInteraction.IsDMInteraction SocketInteraction.GuildId SocketInteraction.ApplicationId SocketInteraction.Entitlements SocketInteraction.RespondWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.RespondWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.RespondWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.GetOriginalResponseAsync(RequestOptions) SocketInteraction.ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) SocketInteraction.DeleteOriginalResponseAsync(RequestOptions) SocketInteraction.RespondWithPremiumRequiredAsync(RequestOptions) SocketInteraction.GetChannelAsync(RequestOptions) SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, InteractionService, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, T, RequestOptions, Action<ModalBuilder>) Properties Data Gets the autocomplete data of this interaction. public SocketAutocompleteInteractionData Data { get; } Property Value SocketAutocompleteInteractionData HasResponded Gets whether or not this interaction has been responded to. public override bool HasResponded { get; } Property Value bool Remarks This property is locally set -- if you're running multiple bots off the same token then this property won't be in sync with them. Methods DeferAsync(bool, RequestOptions) Acknowledges this interaction. public override Task DeferAsync(bool ephemeral = false, RequestOptions options = null) Parameters ephemeral bool true to send this message ephemerally, otherwise false. options RequestOptions The request options for this async request. Returns Task A task that represents the asynchronous operation of acknowledging the interaction. FollowupAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupAsync(string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> The sent message. FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupWithFilesAsync(IEnumerable<FileAttachment> attachments, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. RespondAsync(RequestOptions, params AutocompleteResult[]) Responds to this interaction with a set of choices. public Task RespondAsync(RequestOptions options = null, params AutocompleteResult[] result) Parameters options RequestOptions The request options for this response. result AutocompleteResult[] The set of choices for the user to pick from. A max of 25 choices are allowed. Passing null for this argument will show the executing user that there is no choices for their autocompleted input. Returns Task A task that represents the asynchronous operation of responding to this interaction. RespondAsync(IEnumerable<AutocompleteResult>, RequestOptions) Responds to this interaction with a set of choices. public Task RespondAsync(IEnumerable<AutocompleteResult> result, RequestOptions options = null) Parameters result IEnumerable<AutocompleteResult> The set of choices for the user to pick from. A max of 25 choices are allowed. Passing null for this argument will show the executing user that there is no choices for their autocompleted input. options RequestOptions The request options for this response. Returns Task A task that represents the asynchronous operation of responding to this interaction. RespondAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Responds to an Interaction with type ChannelMessageWithSource. public override Task RespondAsync(string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. InvalidOperationException The parameters provided were invalid or the token was invalid. RespondWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Responds to this interaction with a collection of file attachments. public override Task RespondWithFilesAsync(IEnumerable<FileAttachment> attachments, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. RespondWithModalAsync(Modal, RequestOptions) Responds to this interaction with a Modal. public override Task RespondWithModalAsync(Modal modal, RequestOptions requestOptions = null) Parameters modal Modal The Modal to respond with. requestOptions RequestOptions Returns Task A task that represents the asynchronous operation of responding to the interaction."
  },
  "api/Discord.WebSocket.SocketAutocompleteInteractionData.html": {
    "href": "api/Discord.WebSocket.SocketAutocompleteInteractionData.html",
    "title": "Class SocketAutocompleteInteractionData | Discord.Net Documentation",
    "keywords": "Class SocketAutocompleteInteractionData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents data for a slash commands autocomplete interaction. public class SocketAutocompleteInteractionData : IAutocompleteInteractionData, IDiscordInteractionData Inheritance object SocketAutocompleteInteractionData Implements IAutocompleteInteractionData IDiscordInteractionData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CommandId Gets the id of the invoked command. public ulong CommandId { get; } Property Value ulong CommandName Gets the name of the invoked command. public string CommandName { get; } Property Value string Current Gets the current autocomplete option that is actively being filled out. public AutocompleteOption Current { get; } Property Value AutocompleteOption Options Gets a collection of all the other options the executing users has filled out. public IReadOnlyCollection<AutocompleteOption> Options { get; } Property Value IReadOnlyCollection<AutocompleteOption> Type Gets the type of the invoked command. public ApplicationCommandType Type { get; } Property Value ApplicationCommandType Version Gets the version of the invoked command. public ulong Version { get; } Property Value ulong"
  },
  "api/Discord.WebSocket.SocketBanAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketBanAuditLogData.html",
    "title": "Class SocketBanAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketBanAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a ban. public class SocketBanAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketBanAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Target Gets the user that was banned. public Cacheable<SocketUser, RestUser, IUser, ulong> Target { get; } Property Value Cacheable<SocketUser, RestUser, IUser, ulong> A cacheable user object representing the banned user. Remarks Download method may return null if the user is a 'Deleted User#....' because Discord does send user data for deleted users."
  },
  "api/Discord.WebSocket.SocketBotAddAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketBotAddAuditLogData.html",
    "title": "Class SocketBotAddAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketBotAddAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a adding a bot to a guild. public class SocketBotAddAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketBotAddAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Target Gets the bot that was added. public Cacheable<SocketUser, RestUser, IUser, ulong> Target { get; } Property Value Cacheable<SocketUser, RestUser, IUser, ulong> A cacheable user object representing the bot. Remarks Will be null if the bot is a 'Deleted User#....' because Discord does send user data for deleted users."
  },
  "api/Discord.WebSocket.SocketCategoryChannel.html": {
    "href": "api/Discord.WebSocket.SocketCategoryChannel.html",
    "title": "Class SocketCategoryChannel | Discord.Net Documentation",
    "keywords": "Class SocketCategoryChannel Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a WebSocket-based category channel. public class SocketCategoryChannel : SocketGuildChannel, ICategoryChannel, IGuildChannel, IChannel, ISnowflakeEntity, IEntity<ulong>, IDeletable Inheritance object SocketEntity<ulong> SocketChannel SocketGuildChannel SocketCategoryChannel Implements ICategoryChannel IGuildChannel IChannel ISnowflakeEntity IEntity<ulong> IDeletable Inherited Members SocketGuildChannel.Guild SocketGuildChannel.Name SocketGuildChannel.Position SocketGuildChannel.Flags SocketGuildChannel.PermissionOverwrites SocketGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions) SocketGuildChannel.DeleteAsync(RequestOptions) SocketGuildChannel.GetPermissionOverwrite(IUser) SocketGuildChannel.GetPermissionOverwrite(IRole) SocketGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions) SocketGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) SocketGuildChannel.ToString() SocketChannel.CreatedAt SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties Channels Gets the child channels of this category. public IReadOnlyCollection<SocketGuildChannel> Channels { get; } Property Value IReadOnlyCollection<SocketGuildChannel> A read-only collection of SocketGuildChannel whose CategoryId matches the snowflake identifier of this category channel. Users Gets a collection of users that are able to view the channel. public override IReadOnlyCollection<SocketGuildUser> Users { get; } Property Value IReadOnlyCollection<SocketGuildUser> A read-only collection of users that can access the channel (i.e. the users seen in the user list). Remarks If this channel is a voice channel, use ConnectedUsers to retrieve a collection of users who are currently connected to this channel. Methods GetUser(ulong) public override SocketGuildUser GetUser(ulong id) Parameters id ulong Returns SocketGuildUser"
  },
  "api/Discord.WebSocket.SocketChannel.html": {
    "href": "api/Discord.WebSocket.SocketChannel.html",
    "title": "Class SocketChannel | Discord.Net Documentation",
    "keywords": "Class SocketChannel Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a WebSocket-based channel. public abstract class SocketChannel : SocketEntity<ulong>, IChannel, ISnowflakeEntity, IEntity<ulong> Inheritance object SocketEntity<ulong> SocketChannel Implements IChannel ISnowflakeEntity IEntity<ulong> Derived SocketDMChannel SocketGroupChannel SocketGuildChannel Inherited Members SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties CreatedAt Gets when the channel is created. public virtual DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset Users Gets a collection of users from the WebSocket cache. public IReadOnlyCollection<SocketUser> Users { get; } Property Value IReadOnlyCollection<SocketUser> Methods GetUser(ulong) Gets a generic user from this channel. public SocketUser GetUser(ulong id) Parameters id ulong The snowflake identifier of the user. Returns SocketUser A generic WebSocket-based user associated with the snowflake identifier."
  },
  "api/Discord.WebSocket.SocketChannelCreateAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketChannelCreateAuditLogData.html",
    "title": "Class SocketChannelCreateAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketChannelCreateAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a channel creation. public class SocketChannelCreateAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketChannelCreateAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AutoArchiveDuration Gets the thread archive duration that was set in the created channel. public ThreadArchiveDuration? AutoArchiveDuration { get; } Property Value ThreadArchiveDuration? AvailableTags Gets tags available in the created forum channel. public IReadOnlyCollection<ForumTag> AvailableTags { get; } Property Value IReadOnlyCollection<ForumTag> Bitrate Gets the bit-rate that the clients in the created voice channel are requested to use. public int? Bitrate { get; } Property Value int? An int representing the bit-rate (bps) that the created voice channel defines and requests the client(s) to use. null if this is not mentioned in this entry. ChannelId Gets the snowflake ID of the created channel. public ulong ChannelId { get; } Property Value ulong A ulong representing the snowflake identifier for the created channel. ChannelName Gets the name of the created channel. public string ChannelName { get; } Property Value string A string containing the name of the created channel. ChannelType Gets the type of the created channel. public ChannelType ChannelType { get; } Property Value ChannelType The type of channel that was created. DefaultAutoArchiveDuration Gets the default thread archive duration that was set in the created channel. public ThreadArchiveDuration? DefaultAutoArchiveDuration { get; } Property Value ThreadArchiveDuration? DefaultReactionEmoji Gets the default reaction added to posts in the created forum channel. public IEmote DefaultReactionEmoji { get; } Property Value IEmote DefaultSlowModeInterval Gets the default slow mode interval that will be set in child threads in the channel. public int? DefaultSlowModeInterval { get; } Property Value int? Flags Gets channel flags configured for the created channel. public ChannelFlags? Flags { get; } Property Value ChannelFlags? IsNsfw Gets the value that indicates whether the created channel is NSFW. public bool? IsNsfw { get; } Property Value bool? true if the created channel has the NSFW flag enabled; otherwise false. null if this is not mentioned in this entry. RtcRegion Gets the region configured in the created voice channel. public string RtcRegion { get; } Property Value string SlowModeInterval Gets the current slow-mode delay of the created channel. public int? SlowModeInterval { get; } Property Value int? An int representing the time in seconds required before the user can send another message; 0 if disabled. null if this is not mentioned in this entry. Topic Gets the topic that was set in the created channel. public string Topic { get; } Property Value string UserLimit Gets the user limit configured in the created voice channel. public int? UserLimit { get; } Property Value int? VideoQualityMode Gets the video quality mode configured in the created voice channel. public VideoQualityMode? VideoQualityMode { get; } Property Value VideoQualityMode?"
  },
  "api/Discord.WebSocket.SocketChannelDeleteAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketChannelDeleteAuditLogData.html",
    "title": "Class SocketChannelDeleteAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketChannelDeleteAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a channel deletion. public class SocketChannelDeleteAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketChannelDeleteAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AutoArchiveDuration Gets the thread archive duration that was configured for the created channel. public ThreadArchiveDuration? AutoArchiveDuration { get; } Property Value ThreadArchiveDuration? Bitrate Gets the bit-rate of this channel if applicable. public int? Bitrate { get; } Property Value int? An int representing the bit-rate set of the voice channel. null if this is not mentioned in this entry. ChannelId Gets the snowflake ID of the deleted channel. public ulong ChannelId { get; } Property Value ulong A ulong representing the snowflake identifier for the deleted channel. ChannelName Gets the name of the deleted channel. public string ChannelName { get; } Property Value string A string containing the name of the deleted channel. ChannelType Gets the type of the deleted channel. public ChannelType? ChannelType { get; } Property Value ChannelType? The type of channel that was deleted. DefaultArchiveDuration Gets the default auto-archive duration for client-created threads in this channel. public ThreadArchiveDuration? DefaultArchiveDuration { get; } Property Value ThreadArchiveDuration? The default auto-archive duration for thread creation in this channel. Remarks The value of this property does not affect API thread creation, it will not respect this value. DefaultReactionEmoji Gets the emoji to show in the add reaction button on a thread in a forum channel public IEmote DefaultReactionEmoji { get; } Property Value IEmote Remarks If the emoji is Emote only the Id will be populated. Use GetEmoteAsync(ulong, RequestOptions) to get the emoji. DefaultSlowModeInterval Gets the default slow mode interval that was configured for the channel. public int? DefaultSlowModeInterval { get; } Property Value int? Flags Gets channel flags configured for the created channel. public ChannelFlags? Flags { get; } Property Value ChannelFlags? ForumTags Gets a collection of tags inside of this forum channel. public IReadOnlyCollection<ForumTag> ForumTags { get; } Property Value IReadOnlyCollection<ForumTag> Remarks null if the value was not specified in this entry.. IsNsfw Gets the value that indicates whether the deleted channel was NSFW. public bool? IsNsfw { get; } Property Value bool? true if this channel had the NSFW flag enabled; otherwise false. null if this is not mentioned in this entry. Overwrites Gets a collection of permission overwrites that was assigned to the deleted channel. public IReadOnlyCollection<Overwrite> Overwrites { get; } Property Value IReadOnlyCollection<Overwrite> A collection of permission Overwrite. RtcRegion Gets the region configured in the created voice channel. public string RtcRegion { get; } Property Value string SlowModeInterval Gets the slow-mode delay of the deleted channel. public int? SlowModeInterval { get; } Property Value int? An int representing the time in seconds required before the user can send another message; 0 if disabled. null if this is not mentioned in this entry. Topic Gets the current topic for this text channel. public string Topic { get; } Property Value string A string representing the topic set in the channel; null if none is set. Remarks null if the value was not specified in this entry.. UserLimit Gets the user limit configured in the created voice channel. public int? UserLimit { get; } Property Value int? VideoQualityMode Gets the video quality mode configured in the created voice channel. public VideoQualityMode? VideoQualityMode { get; } Property Value VideoQualityMode?"
  },
  "api/Discord.WebSocket.SocketChannelInfo.html": {
    "href": "api/Discord.WebSocket.SocketChannelInfo.html",
    "title": "Struct SocketChannelInfo | Discord.Net Documentation",
    "keywords": "Struct SocketChannelInfo Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents information for a channel. public struct SocketChannelInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties AutoArchiveDuration Gets the duration of time before the thread is automatically archived after no activity. public readonly ThreadArchiveDuration? AutoArchiveDuration { get; } Property Value ThreadArchiveDuration? Remarks null if the value was not updated in this entry. Bitrate Gets the bit-rate that the clients in this voice channel are requested to use. public readonly int? Bitrate { get; } Property Value int? An int representing the bit-rate (bps) that this voice channel defines and requests the client(s) to use. Remarks null if the value was not updated in this entry. ChannelType Gets the type of this channel. public readonly ChannelType? ChannelType { get; } Property Value ChannelType? The channel type of this channel; null if not applicable. DefaultArchiveDuration Gets the default auto-archive duration for client-created threads in this channel. public readonly ThreadArchiveDuration? DefaultArchiveDuration { get; } Property Value ThreadArchiveDuration? The default auto-archive duration for thread creation in this channel. Remarks The value of this property does not affect API thread creation, it will not respect this value. DefaultReactionEmoji Gets the emoji to show in the add reaction button on a thread in a forum channel public readonly IEmote DefaultReactionEmoji { get; } Property Value IEmote Remarks If the emoji is Emote only the Id will be populated. Use GetEmoteAsync(ulong, RequestOptions) to get the emoji. DefaultSlowModeInterval Gets the current default slow-mode delay for threads in this forum channel. public readonly int? DefaultSlowModeInterval { get; } Property Value int? An int representing the time in seconds required before the user can send another message; 0 if disabled. Remarks null if the value was not updated in this entry. Flags Gets the flags related to this channel. public readonly ChannelFlags? Flags { get; } Property Value ChannelFlags? A channel's flags, if any is associated. Remarks This value is determined by bitwise OR-ing ChannelFlags values together. ForumTags Gets a collection of tags inside of this forum channel. public readonly IReadOnlyCollection<ForumTag> ForumTags { get; } Property Value IReadOnlyCollection<ForumTag> Remarks null if the value was not updated in this entry. IsNsfw Gets a value that indicates whether the channel is NSFW. public readonly bool? IsNsfw { get; } Property Value bool? true if the channel has the NSFW flag enabled; otherwise false. Remarks null if the value was not updated in this entry. Name Gets the name of this channel. public readonly string Name { get; } Property Value string A string containing the name of this channel. Remarks null if the value was not updated in this entry. RTCRegion Gets the RTC region for this audio channel. public readonly string RTCRegion { get; } Property Value string Remarks This property can be null. SlowModeInterval Gets the current slow-mode delay for this channel. public readonly int? SlowModeInterval { get; } Property Value int? An int representing the time in seconds required before the user can send another message; 0 if disabled. Remarks null if the value was not updated in this entry. Topic Gets the current topic for this text channel. public readonly string Topic { get; } Property Value string A string representing the topic set in the channel; null if none is set. Remarks null if the value was not updated in this entry. UserLimit Gets the max number of users allowed to be connected to this channel at once. public readonly int? UserLimit { get; } Property Value int? An int representing the maximum number of users that are allowed to be connected to this channel at once; null if a limit is not set. Remarks null if the value was not updated in this entry. VideoQualityMode Gets the video quality mode for this channel. public readonly VideoQualityMode? VideoQualityMode { get; } Property Value VideoQualityMode? Remarks null if the value was not updated in this entry."
  },
  "api/Discord.WebSocket.SocketChannelUpdateAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketChannelUpdateAuditLogData.html",
    "title": "Class SocketChannelUpdateAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketChannelUpdateAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a channel update. public class SocketChannelUpdateAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketChannelUpdateAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After Gets the channel information after the changes. public SocketChannelInfo After { get; } Property Value SocketChannelInfo An information object containing the channel information after the changes were made. Before Gets the channel information before the changes. public SocketChannelInfo Before { get; } Property Value SocketChannelInfo An information object containing the original channel information before the changes were made. ChannelId Gets the snowflake ID of the updated channel. public ulong ChannelId { get; } Property Value ulong A ulong representing the snowflake identifier for the updated channel."
  },
  "api/Discord.WebSocket.SocketCommandBase.html": {
    "href": "api/Discord.WebSocket.SocketCommandBase.html",
    "title": "Class SocketCommandBase | Discord.Net Documentation",
    "keywords": "Class SocketCommandBase Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Base class for User, Message, and Slash command interactions. public class SocketCommandBase : SocketInteraction, IDiscordInteraction, ISnowflakeEntity, IEntity<ulong> Inheritance object SocketEntity<ulong> SocketInteraction SocketCommandBase Implements IDiscordInteraction ISnowflakeEntity IEntity<ulong> Derived SocketMessageCommand SocketSlashCommand SocketUserCommand Inherited Members SocketInteraction.Channel SocketInteraction.ChannelId SocketInteraction.User SocketInteraction.Type SocketInteraction.Token SocketInteraction.Data SocketInteraction.UserLocale SocketInteraction.GuildLocale SocketInteraction.Version SocketInteraction.CreatedAt SocketInteraction.IsValidToken SocketInteraction.IsDMInteraction SocketInteraction.GuildId SocketInteraction.ApplicationId SocketInteraction.Entitlements SocketInteraction.RespondWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.RespondWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.RespondWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.GetOriginalResponseAsync(RequestOptions) SocketInteraction.ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) SocketInteraction.DeleteOriginalResponseAsync(RequestOptions) SocketInteraction.RespondWithPremiumRequiredAsync(RequestOptions) SocketInteraction.GetChannelAsync(RequestOptions) SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, InteractionService, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, T, RequestOptions, Action<ModalBuilder>) Properties CommandId Gets the id of the invoked command. public ulong CommandId { get; } Property Value ulong CommandName Gets the name of the invoked command. public string CommandName { get; } Property Value string HasResponded Gets whether or not this interaction has been responded to. public override bool HasResponded { get; } Property Value bool Remarks This property is locally set -- if you're running multiple bots off the same token then this property won't be in sync with them. Methods DeferAsync(bool, RequestOptions) Acknowledges this interaction with the DeferredChannelMessageWithSource. public override Task DeferAsync(bool ephemeral = false, RequestOptions options = null) Parameters ephemeral bool options RequestOptions Returns Task A task that represents the asynchronous operation of acknowledging the interaction. FollowupAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupAsync(string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> The sent message. FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupWithFilesAsync(IEnumerable<FileAttachment> attachments, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. RespondAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Responds to an Interaction with type ChannelMessageWithSource. public override Task RespondAsync(string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. InvalidOperationException The parameters provided were invalid or the token was invalid. RespondWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Responds to this interaction with a collection of file attachments. public override Task RespondWithFilesAsync(IEnumerable<FileAttachment> attachments, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. RespondWithModalAsync(Modal, RequestOptions) Responds to this interaction with a Modal. public override Task RespondWithModalAsync(Modal modal, RequestOptions options = null) Parameters modal Modal The Modal to respond with. options RequestOptions The request options for this async request. Returns Task A task that represents the asynchronous operation of responding to the interaction."
  },
  "api/Discord.WebSocket.SocketCommandBaseData-1.html": {
    "href": "api/Discord.WebSocket.SocketCommandBaseData-1.html",
    "title": "Class SocketCommandBaseData<TOption> | Discord.Net Documentation",
    "keywords": "Class SocketCommandBaseData<TOption> Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents the base data tied with the SocketCommandBase interaction. public class SocketCommandBaseData<TOption> : SocketEntity<ulong>, IEntity<ulong>, IApplicationCommandInteractionData, IDiscordInteractionData where TOption : IApplicationCommandInteractionDataOption Type Parameters TOption Inheritance object SocketEntity<ulong> SocketCommandBaseData<TOption> Implements IEntity<ulong> IApplicationCommandInteractionData IDiscordInteractionData Derived SocketCommandBaseData SocketSlashCommandData Inherited Members SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets the name of this command. public string Name { get; } Property Value string Options Gets the TOption received with this interaction. public virtual IReadOnlyCollection<TOption> Options { get; } Property Value IReadOnlyCollection<TOption>"
  },
  "api/Discord.WebSocket.SocketCommandBaseData.html": {
    "href": "api/Discord.WebSocket.SocketCommandBaseData.html",
    "title": "Class SocketCommandBaseData | Discord.Net Documentation",
    "keywords": "Class SocketCommandBaseData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents the base data tied with the SocketCommandBase interaction. public class SocketCommandBaseData : SocketCommandBaseData<IApplicationCommandInteractionDataOption>, IEntity<ulong>, IApplicationCommandInteractionData, IDiscordInteractionData Inheritance object SocketEntity<ulong> SocketCommandBaseData<IApplicationCommandInteractionDataOption> SocketCommandBaseData Implements IEntity<ulong> IApplicationCommandInteractionData IDiscordInteractionData Derived SocketMessageCommandData SocketUserCommandData Inherited Members SocketCommandBaseData<IApplicationCommandInteractionDataOption>.Name SocketCommandBaseData<IApplicationCommandInteractionDataOption>.Options SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Discord.WebSocket.SocketCommandPermissionUpdateAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketCommandPermissionUpdateAuditLogData.html",
    "title": "Class SocketCommandPermissionUpdateAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketCommandPermissionUpdateAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to an application command permission update. public class SocketCommandPermissionUpdateAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketCommandPermissionUpdateAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After Gets values of the permissions after the change if available. public IReadOnlyCollection<ApplicationCommandPermission> After { get; } Property Value IReadOnlyCollection<ApplicationCommandPermission> ApplicationId Gets the ID of the app whose permissions were targeted. public ulong ApplicationId { get; set; } Property Value ulong Before Gets values of the permissions before the change if available. public IReadOnlyCollection<ApplicationCommandPermission> Before { get; } Property Value IReadOnlyCollection<ApplicationCommandPermission> CommandId Gets the id of the application command which permissions were updated. public ulong CommandId { get; } Property Value ulong"
  },
  "api/Discord.WebSocket.SocketCustomSticker.html": {
    "href": "api/Discord.WebSocket.SocketCustomSticker.html",
    "title": "Class SocketCustomSticker | Discord.Net Documentation",
    "keywords": "Class SocketCustomSticker Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a custom sticker within a guild received over the gateway. public class SocketCustomSticker : SocketSticker, IEntity<ulong>, ICustomSticker, ISticker, IStickerItem Inheritance object SocketEntity<ulong> SocketSticker SocketCustomSticker Implements IEntity<ulong> ICustomSticker ISticker IStickerItem Inherited Members SocketSticker.PackId SocketSticker.Name SocketSticker.Description SocketSticker.Tags SocketSticker.Type SocketSticker.Format SocketSticker.IsAvailable SocketSticker.SortOrder SocketSticker.GetStickerUrl() SocketSticker.Equals(object) SocketSticker.GetHashCode() SocketEntity<ulong>.Id object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Author Gets the user that uploaded the guild sticker. public SocketGuildUser Author { get; } Property Value SocketGuildUser Remarks note This may return null in the WebSocket implementation due to incomplete user collection in large guilds, or the bot doesn't have the MANAGE_EMOJIS_AND_STICKERS permission. AuthorId public ulong? AuthorId { get; set; } Property Value ulong? Guild Gets the guild the sticker was created in. public SocketGuild Guild { get; } Property Value SocketGuild Methods DeleteAsync(RequestOptions) Deletes the current sticker. public Task DeleteAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous deletion operation. ModifyAsync(Action<StickerProperties>, RequestOptions) Modifies this sticker. public Task ModifyAsync(Action<StickerProperties> func, RequestOptions options = null) Parameters func Action<StickerProperties> A delegate containing the properties to modify the sticker with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Examples The following example replaces the name of the sticker with kekw. await sticker.ModifyAsync(x => x.Name = \"kekw\"); Remarks This method modifies this sticker with the specified properties. To see an example of this method and what properties are available, please refer to StickerProperties. The bot needs the MANAGE_EMOJIS_AND_STICKERS permission within the guild in order to modify stickers."
  },
  "api/Discord.WebSocket.SocketDMChannel.html": {
    "href": "api/Discord.WebSocket.SocketDMChannel.html",
    "title": "Class SocketDMChannel | Discord.Net Documentation",
    "keywords": "Class SocketDMChannel Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a WebSocket-based direct-message channel. public class SocketDMChannel : SocketChannel, IDMChannel, ISocketPrivateChannel, IPrivateChannel, ISocketMessageChannel, IMessageChannel, IChannel, ISnowflakeEntity, IEntity<ulong> Inheritance object SocketEntity<ulong> SocketChannel SocketDMChannel Implements IDMChannel ISocketPrivateChannel IPrivateChannel ISocketMessageChannel IMessageChannel IChannel ISnowflakeEntity IEntity<ulong> Inherited Members SocketChannel.CreatedAt SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties CachedMessages Gets all messages in this channel's cache. public IReadOnlyCollection<SocketMessage> CachedMessages { get; } Property Value IReadOnlyCollection<SocketMessage> A read-only collection of WebSocket-based messages. Recipient Gets the recipient of the channel. public SocketUser Recipient { get; } Property Value SocketUser Users Gets a collection that is the current logged-in user and the recipient. public IReadOnlyCollection<SocketUser> Users { get; } Property Value IReadOnlyCollection<SocketUser> Methods CloseAsync(RequestOptions) Closes this private channel, removing it from your channel list. public Task CloseAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous close operation. DeleteMessageAsync(IMessage, RequestOptions) Deletes a message based on the provided message in this channel. public Task DeleteMessageAsync(IMessage message, RequestOptions options = null) Parameters message IMessage The message that would be removed. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. DeleteMessageAsync(ulong, RequestOptions) Deletes a message. public Task DeleteMessageAsync(ulong messageId, RequestOptions options = null) Parameters messageId ulong The snowflake identifier of the message that would be removed. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. EnterTypingState(RequestOptions) Continuously broadcasts the \"user is typing\" message to all users in this channel until the returned object is disposed. public IDisposable EnterTypingState(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns IDisposable A disposable object that, upon its disposal, will stop the client from broadcasting its typing state in this channel. Examples The following example keeps the client in the typing state until LongRunningAsync has finished. using (channel.EnterTypingState()) await LongRunningAsync(); GetCachedMessage(ulong) Gets a cached message from this channel. public SocketMessage GetCachedMessage(ulong id) Parameters id ulong The snowflake identifier of the message. Returns SocketMessage A WebSocket-based message object; null if it does not exist in the cache or if caching is not enabled. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return null. Please refer to MessageCacheSize for more details. This method retrieves the message from the local WebSocket cache and does not send any additional request to Discord. This message may be a message that has been deleted. GetCachedMessages(IMessage, Direction, int) Gets the last N cached messages starting from a certain message in this message channel. public IReadOnlyCollection<SocketMessage> GetCachedMessages(IMessage fromMessage, Direction dir, int limit = 100) Parameters fromMessage IMessage The message to start the fetching from. dir Direction The direction of which the message should be gotten from. limit int The number of messages to get. Returns IReadOnlyCollection<SocketMessage> A read-only collection of WebSocket-based messages. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Discord. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set. GetCachedMessages(int) Gets the last N cached messages from this message channel. public IReadOnlyCollection<SocketMessage> GetCachedMessages(int limit = 100) Parameters limit int The number of messages to get. Returns IReadOnlyCollection<SocketMessage> A read-only collection of WebSocket-based messages. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Discord. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set. GetCachedMessages(ulong, Direction, int) Gets the last N cached messages starting from a certain message in this message channel. public IReadOnlyCollection<SocketMessage> GetCachedMessages(ulong fromMessageId, Direction dir, int limit = 100) Parameters fromMessageId ulong The message ID to start the fetching from. dir Direction The direction of which the message should be gotten from. limit int The number of messages to get. Returns IReadOnlyCollection<SocketMessage> A read-only collection of WebSocket-based messages. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Discord. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set. GetMessageAsync(ulong, RequestOptions) Gets the message associated with the given id. public Task<IMessage> GetMessageAsync(ulong id, RequestOptions options = null) Parameters id ulong TThe ID of the message. options RequestOptions The options to be used when sending the request. Returns Task<IMessage> The message gotten from either the cache or the download, or null if none is found. GetMessagesAsync(IMessage, Direction, int, RequestOptions) Gets a collection of messages in this channel. public IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(IMessage fromMessage, Direction dir, int limit = 100, RequestOptions options = null) Parameters fromMessage IMessage The starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions). Please visit its documentation for more details on this method. GetMessagesAsync(int, RequestOptions) Gets the last N messages from this message channel. public IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(int limit = 100, RequestOptions options = null) Parameters limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(int, CacheMode, RequestOptions). Please visit its documentation for more details on this method. GetMessagesAsync(ulong, Direction, int, RequestOptions) Gets a collection of messages in this channel. public IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(ulong fromMessageId, Direction dir, int limit = 100, RequestOptions options = null) Parameters fromMessageId ulong The ID of the starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(ulong, Direction, int, CacheMode, RequestOptions). Please visit its documentation for more details on this method. GetPinnedMessagesAsync(RequestOptions) Gets a read-only collection of pinned messages in this channel. public Task<IReadOnlyCollection<RestMessage>> GetPinnedMessagesAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestMessage>> A task that represents the asynchronous get operation for retrieving pinned messages in this channel. The task result contains a read-only collection of messages found in the pinned messages. Remarks This method follows the same behavior as described in GetPinnedMessagesAsync(RequestOptions). Please visit its documentation for more details on this method. GetUser(ulong) Gets a user in this channel from the provided id. public SocketUser GetUser(ulong id) Parameters id ulong The snowflake identifier of the user. Returns SocketUser A SocketUser object that is a recipient of this channel; otherwise null. ModifyMessageAsync(ulong, Action<MessageProperties>, RequestOptions) Modifies a message. public Task<IUserMessage> ModifyMessageAsync(ulong messageId, Action<MessageProperties> func, RequestOptions options = null) Parameters messageId ulong The snowflake identifier of the message that would be changed. func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The options to be used when sending the request. Returns Task<IUserMessage> A task that represents the asynchronous modification operation. Remarks This method modifies this message with the specified properties. To see an example of this method and what properties are available, please refer to MessageProperties. SendFileAsync(FileAttachment, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a file to this message channel with an optional caption. public Task<RestUserMessage> SendFileAsync(FileAttachment attachment, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters attachment FileAttachment The attachment containing the file and description. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Remarks This method sends a file as if you are uploading an attachment directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. ArgumentException The only valid MessageFlags are SuppressEmbeds and None. SendFileAsync(Stream, string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a file to this message channel with an optional caption. public Task<RestUserMessage> SendFileAsync(Stream stream, string filename, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters stream Stream The Stream of the file to be sent. filename string The name of the attachment. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. isSpoiler bool Whether the message attachment should be hidden as a spoiler. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example uploads a streamed image that will be called b1nzy.jpg embedded inside a rich embed to the channel. using (var b1nzyStream = await httpClient.GetStreamAsync(\"https://example.com/b1nzy\")) await channel.SendFileAsync(b1nzyStream, \"b1nzy.jpg\", embed: new EmbedBuilder { ImageUrl = \"attachment://b1nzy.jpg\" }.Build()); Remarks This method sends a file as if you are uploading an attachment directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. ArgumentException The only valid MessageFlags are SuppressEmbeds and None. SendFileAsync(string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a file to this message channel with an optional caption. public Task<RestUserMessage> SendFileAsync(string filePath, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters filePath string The file path of the file. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. isSpoiler bool Whether the message attachment should be hidden as a spoiler. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example uploads a local file called wumpus.txt along with the text good discord boi to the channel. await channel.SendFileAsync(\"wumpus.txt\", \"good discord boi\"); The following example uploads a local image called b1nzy.jpg embedded inside a rich embed to the channel. await channel.SendFileAsync(\"b1nzy.jpg\", embed: new EmbedBuilder { ImageUrl = \"attachment://b1nzy.jpg\" }.Build()); Remarks This method sends a file as if you are uploading an attachment directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. Exceptions ArgumentException The only valid MessageFlags are SuppressEmbeds and None. SendFilesAsync(IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a collection of files to this message channel. public Task<RestUserMessage> SendFilesAsync(IEnumerable<FileAttachment> attachments, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Remarks This method sends files as if you are uploading attachments directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. ArgumentException The only valid MessageFlags are SuppressEmbeds and None. SendMessageAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a message to this message channel. public Task<RestUserMessage> SendMessageAsync(string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters text string The message to be sent. isTTS bool Determines whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the message. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example sends a message with the current system time in RFC 1123 format to the channel and deletes itself after 5 seconds. var message = await channel.SendMessageAsync(DateTimeOffset.UtcNow.ToString(\"R\")); await Task.Delay(TimeSpan.FromSeconds(5)) .ContinueWith(x => message.DeleteAsync()); Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. ArgumentException The only valid MessageFlags are SuppressEmbeds and None. ToString() Returns the recipient user. public override string ToString() Returns string TriggerTypingAsync(RequestOptions) Broadcasts the \"user is typing\" message to all users in this channel, lasting 10 seconds. public Task TriggerTypingAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation that triggers the broadcast."
  },
  "api/Discord.WebSocket.SocketEmoteCreateAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketEmoteCreateAuditLogData.html",
    "title": "Class SocketEmoteCreateAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketEmoteCreateAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to an emoji creation. public class SocketEmoteCreateAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketEmoteCreateAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties EmoteId Gets the snowflake ID of the created emoji. public ulong EmoteId { get; } Property Value ulong A ulong representing the snowflake identifier for the created emoji. Name Gets the name of the created emoji. public string Name { get; } Property Value string A string containing the name of the created emoji."
  },
  "api/Discord.WebSocket.SocketEmoteDeleteAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketEmoteDeleteAuditLogData.html",
    "title": "Class SocketEmoteDeleteAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketEmoteDeleteAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to an emoji deletion. public class SocketEmoteDeleteAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketEmoteDeleteAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties EmoteId Gets the snowflake ID of the deleted emoji. public ulong EmoteId { get; } Property Value ulong A ulong representing the snowflake identifier for the deleted emoji. Name Gets the name of the deleted emoji. public string Name { get; } Property Value string A string containing the name of the deleted emoji."
  },
  "api/Discord.WebSocket.SocketEmoteUpdateAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketEmoteUpdateAuditLogData.html",
    "title": "Class SocketEmoteUpdateAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketEmoteUpdateAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to an emoji update. public class SocketEmoteUpdateAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketEmoteUpdateAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties EmoteId Gets the snowflake ID of the updated emoji. public ulong EmoteId { get; } Property Value ulong A ulong representing the snowflake identifier of the updated emoji. NewName Gets the new name of the updated emoji. public string NewName { get; } Property Value string A string containing the new name of the updated emoji. OldName Gets the old name of the updated emoji. public string OldName { get; } Property Value string A string containing the old name of the updated emoji."
  },
  "api/Discord.WebSocket.SocketEntitlement.html": {
    "href": "api/Discord.WebSocket.SocketEntitlement.html",
    "title": "Class SocketEntitlement | Discord.Net Documentation",
    "keywords": "Class SocketEntitlement Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll public class SocketEntitlement : SocketEntity<ulong>, IEntitlement, ISnowflakeEntity, IEntity<ulong> Inheritance object SocketEntity<ulong> SocketEntitlement Implements IEntitlement ISnowflakeEntity IEntity<ulong> Inherited Members SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ApplicationId Gets the ID of the parent application. public ulong ApplicationId { get; } Property Value ulong CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. EndsAt Gets the end date at which the entitlement is no longer valid. public DateTimeOffset? EndsAt { get; } Property Value DateTimeOffset? Remarks null when using test entitlements. Guild Gets the ID of the guild that is granted access to the entitlement's SKU. public Cacheable<SocketGuild, RestGuild, IGuild, ulong>? Guild { get; } Property Value Cacheable<SocketGuild, RestGuild, IGuild, ulong>? Remarks null if the entitlement is for a user. IsConsumed Gets whether this entitlement has been consumed. public bool IsConsumed { get; } Property Value bool Remarks Not applicable for App Subscriptions. SkuId Gets the ID of the SKU this entitlement is for. public ulong SkuId { get; } Property Value ulong StartsAt Gets the start date at which the entitlement is valid. public DateTimeOffset? StartsAt { get; } Property Value DateTimeOffset? Remarks null when using test entitlements. Type Gets the type of the entitlement. public EntitlementType Type { get; } Property Value EntitlementType User Gets the ID of the user that is granted access to the entitlement's SKU. public Cacheable<SocketUser, RestUser, IUser, ulong>? User { get; } Property Value Cacheable<SocketUser, RestUser, IUser, ulong>? Remarks null if the entitlement is for a guild."
  },
  "api/Discord.WebSocket.SocketEntity-1.html": {
    "href": "api/Discord.WebSocket.SocketEntity-1.html",
    "title": "Class SocketEntity<T> | Discord.Net Documentation",
    "keywords": "Class SocketEntity<T> Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll public abstract class SocketEntity<T> : IEntity<T> where T : IEquatable<T> Type Parameters T Inheritance object SocketEntity<T> Implements IEntity<T> Derived SocketApplicationCommand SocketAuditLogEntry SocketAutoModRule SocketChannel SocketCommandBaseData<TOption> SocketEntitlement SocketGuild SocketGuildEvent SocketGuildOnboardingPrompt SocketGuildOnboardingPromptOption SocketInteraction SocketInvite SocketMessage SocketRole SocketSticker SocketUser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id Gets the unique identifier for this object. public T Id { get; } Property Value T"
  },
  "api/Discord.WebSocket.SocketForumChannel.html": {
    "href": "api/Discord.WebSocket.SocketForumChannel.html",
    "title": "Class SocketForumChannel | Discord.Net Documentation",
    "keywords": "Class SocketForumChannel Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a forum channel in a guild. public class SocketForumChannel : SocketGuildChannel, IForumChannel, IMentionable, INestedChannel, IIntegrationChannel, IGuildChannel, IChannel, ISnowflakeEntity, IEntity<ulong>, IDeletable Inheritance object SocketEntity<ulong> SocketChannel SocketGuildChannel SocketForumChannel Implements IForumChannel IMentionable INestedChannel IIntegrationChannel IGuildChannel IChannel ISnowflakeEntity IEntity<ulong> IDeletable Derived SocketMediaChannel Inherited Members SocketGuildChannel.Guild SocketGuildChannel.Name SocketGuildChannel.Position SocketGuildChannel.Flags SocketGuildChannel.PermissionOverwrites SocketGuildChannel.Users SocketGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions) SocketGuildChannel.DeleteAsync(RequestOptions) SocketGuildChannel.GetPermissionOverwrite(IUser) SocketGuildChannel.GetPermissionOverwrite(IRole) SocketGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions) SocketGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) SocketGuildChannel.GetUser(ulong) SocketGuildChannel.ToString() SocketChannel.CreatedAt SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties Category Gets the parent (category) of this channel in the guild's channel list. public ICategoryChannel Category { get; } Property Value ICategoryChannel An ICategoryChannel representing the parent of this channel; null if none is set. CategoryId Gets the parent (category) ID of this channel in the guild's channel list. public ulong? CategoryId { get; } Property Value ulong? A ulong representing the snowflake identifier of the parent of this channel; null if none is set. DefaultAutoArchiveDuration Gets the default archive duration for a newly created post. public ThreadArchiveDuration DefaultAutoArchiveDuration { get; } Property Value ThreadArchiveDuration DefaultLayout Gets the rule used to display posts in a forum channel. public ForumLayout DefaultLayout { get; } Property Value ForumLayout DefaultReactionEmoji Gets the emoji to show in the add reaction button on a thread in a forum channel public IEmote DefaultReactionEmoji { get; } Property Value IEmote Remarks If the emoji is Emote only the Id will be populated. Use GetEmoteAsync(ulong, RequestOptions) to get the emoji. DefaultSlowModeInterval Gets the current default slow-mode delay for threads in this forum channel. public int DefaultSlowModeInterval { get; } Property Value int An int representing the time in seconds required before the user can send another message; 0 if disabled. DefaultSortOrder Gets the rule used to order posts in forum channels. public ForumSortOrder? DefaultSortOrder { get; } Property Value ForumSortOrder? Remarks Defaults to null, which indicates a preferred sort order hasn't been set IsNsfw Gets a value that indicates whether the channel is NSFW. public bool IsNsfw { get; } Property Value bool true if the channel has the NSFW flag enabled; otherwise false. Mention Returns a special string used to mention this object. public string Mention { get; } Property Value string A string that is recognized by Discord as a mention (e.g. <@168693960628371456>). Tags Gets a collection of tags inside of this forum channel. public IReadOnlyCollection<ForumTag> Tags { get; } Property Value IReadOnlyCollection<ForumTag> ThreadCreationInterval Gets the current rate limit on creating posts in this forum channel. public int ThreadCreationInterval { get; } Property Value int An int representing the time in seconds required before the user can send another message; 0 if disabled. Topic Gets the current topic for this text channel. public string Topic { get; } Property Value string A string representing the topic set in the channel; null if none is set. Methods CreateInviteAsync(int?, int?, bool, bool, RequestOptions) Creates a new invite to this channel. public virtual Task<IInviteMetadata> CreateInviteAsync(int? maxAge = 86400, int? maxUses = null, bool isTemporary = false, bool isUnique = false, RequestOptions options = null) Parameters maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. isTemporary bool If true, the user accepting this invite will be kicked from the guild after closing their client. isUnique bool If true, don't try to reuse a similar invite (useful for creating many unique one time use invites). options RequestOptions The options to be used when sending the request. Returns Task<IInviteMetadata> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. Examples The following example creates a new invite to this channel; the invite lasts for 12 hours and can only be used 3 times throughout its lifespan. await guildChannel.CreateInviteAsync(maxAge: 43200, maxUses: 3); CreateInviteToApplicationAsync(DefaultApplications, int?, int?, bool, bool, RequestOptions) Creates a new invite to this channel. public virtual Task<IInviteMetadata> CreateInviteToApplicationAsync(DefaultApplications application, int? maxAge = 86400, int? maxUses = null, bool isTemporary = false, bool isUnique = false, RequestOptions options = null) Parameters application DefaultApplications The application to open for this invite. maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. isTemporary bool If true, the user accepting this invite will be kicked from the guild after closing their client. isUnique bool If true, don't try to reuse a similar invite (useful for creating many unique one time use invites). options RequestOptions The options to be used when sending the request. Returns Task<IInviteMetadata> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. CreateInviteToApplicationAsync(ulong, int?, int?, bool, bool, RequestOptions) Creates a new invite to this channel. public virtual Task<IInviteMetadata> CreateInviteToApplicationAsync(ulong applicationId, int? maxAge = 86400, int? maxUses = null, bool isTemporary = false, bool isUnique = false, RequestOptions options = null) Parameters applicationId ulong The id of the embedded application to open for this invite. maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. isTemporary bool If true, the user accepting this invite will be kicked from the guild after closing their client. isUnique bool If true, don't try to reuse a similar invite (useful for creating many unique one time use invites). options RequestOptions The options to be used when sending the request. Returns Task<IInviteMetadata> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. CreateInviteToStreamAsync(IUser, int?, int?, bool, bool, RequestOptions) Creates a new invite to this channel. public virtual Task<IInviteMetadata> CreateInviteToStreamAsync(IUser user, int? maxAge, int? maxUses = null, bool isTemporary = false, bool isUnique = false, RequestOptions options = null) Parameters user IUser The id of the user whose stream to display for this invite. maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. isTemporary bool If true, the user accepting this invite will be kicked from the guild after closing their client. isUnique bool If true, don't try to reuse a similar invite (useful for creating many unique one time use invites). options RequestOptions The options to be used when sending the request. Returns Task<IInviteMetadata> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. Examples The following example creates a new invite to this channel; the invite lasts for 12 hours and can only be used 3 times throughout its lifespan. await guildChannel.CreateInviteAsync(maxAge: 43200, maxUses: 3); CreatePostAsync(string, ThreadArchiveDuration, int?, string, Embed, RequestOptions, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) Creates a new post (thread) within the forum. public Task<RestThreadChannel> CreatePostAsync(string title, ThreadArchiveDuration archiveDuration = ThreadArchiveDuration.OneDay, int? slowmode = null, string text = null, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None, ForumTag[] tags = null) Parameters title string The title of the post. archiveDuration ThreadArchiveDuration The archive duration of the post. slowmode int? The slowmode for the posts thread. text string The message to be sent. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the message. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds is permitted. tags ForumTag[] An array of ForumTag to be applied to the post. Returns Task<RestThreadChannel> A task that represents the asynchronous creation operation. CreatePostWithFileAsync(string, FileAttachment, ThreadArchiveDuration, int?, string, Embed, RequestOptions, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) Creates a new post (thread) within the forum. public Task<RestThreadChannel> CreatePostWithFileAsync(string title, FileAttachment attachment, ThreadArchiveDuration archiveDuration = ThreadArchiveDuration.OneDay, int? slowmode = null, string text = null, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None, ForumTag[] tags = null) Parameters title string The title of the post. attachment FileAttachment The attachment containing the file and description. archiveDuration ThreadArchiveDuration The archive duration of the post. slowmode int? The slowmode for the posts thread. text string The message to be sent. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds is permitted. tags ForumTag[] An array of ForumTag to be applied to the post. Returns Task<RestThreadChannel> A task that represents the asynchronous creation operation. CreatePostWithFileAsync(string, Stream, string, ThreadArchiveDuration, int?, string, Embed, RequestOptions, bool, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) Creates a new post (thread) within the forum. public Task<RestThreadChannel> CreatePostWithFileAsync(string title, Stream stream, string filename, ThreadArchiveDuration archiveDuration = ThreadArchiveDuration.OneDay, int? slowmode = null, string text = null, Embed embed = null, RequestOptions options = null, bool isSpoiler = false, AllowedMentions allowedMentions = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None, ForumTag[] tags = null) Parameters title string The title of the post. stream Stream The Stream of the file to be sent. filename string The name of the attachment. archiveDuration ThreadArchiveDuration The archive duration of the post. slowmode int? The slowmode for the posts thread. text string The message to be sent. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. isSpoiler bool Whether the message attachment should be hidden as a spoiler. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds is permitted. tags ForumTag[] An array of ForumTag to be applied to the post. Returns Task<RestThreadChannel> A task that represents the asynchronous creation operation. CreatePostWithFileAsync(string, string, ThreadArchiveDuration, int?, string, Embed, RequestOptions, bool, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) Creates a new post (thread) within the forum. public Task<RestThreadChannel> CreatePostWithFileAsync(string title, string filePath, ThreadArchiveDuration archiveDuration = ThreadArchiveDuration.OneDay, int? slowmode = null, string text = null, Embed embed = null, RequestOptions options = null, bool isSpoiler = false, AllowedMentions allowedMentions = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None, ForumTag[] tags = null) Parameters title string The title of the post. filePath string The file path of the file. archiveDuration ThreadArchiveDuration The archive duration of the post. slowmode int? The slowmode for the posts thread. text string The message to be sent. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. isSpoiler bool Whether the message attachment should be hidden as a spoiler. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds is permitted. tags ForumTag[] An array of ForumTag to be applied to the post. Returns Task<RestThreadChannel> A task that represents the asynchronous creation operation. CreatePostWithFilesAsync(string, IEnumerable<FileAttachment>, ThreadArchiveDuration, int?, string, Embed, RequestOptions, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) Creates a new post (thread) within the forum. public Task<RestThreadChannel> CreatePostWithFilesAsync(string title, IEnumerable<FileAttachment> attachments, ThreadArchiveDuration archiveDuration = ThreadArchiveDuration.OneDay, int? slowmode = null, string text = null, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None, ForumTag[] tags = null) Parameters title string The title of the post. attachments IEnumerable<FileAttachment> A collection of attachments to upload. archiveDuration ThreadArchiveDuration The archive duration of the post. slowmode int? The slowmode for the posts thread. text string The message to be sent. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] An array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds is permitted. tags ForumTag[] An array of ForumTag to be applied to the post. Returns Task<RestThreadChannel> A task that represents the asynchronous creation operation. CreateWebhookAsync(string, Stream, RequestOptions) Creates a webhook in this channel. public Task<RestWebhook> CreateWebhookAsync(string name, Stream avatar = null, RequestOptions options = null) Parameters name string The name of the webhook. avatar Stream The avatar of the webhook. options RequestOptions The options to be used when sending the request. Returns Task<RestWebhook> A task that represents the asynchronous creation operation. The task result contains the newly created webhook. GetActiveThreadsAsync(RequestOptions) Gets a collection of active threads within this channel. public Task<IReadOnlyCollection<RestThreadChannel>> GetActiveThreadsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestThreadChannel>> A task that represents an asynchronous get operation for retrieving the threads. The task result contains a collection of active threads. GetInvitesAsync(RequestOptions) Gets a collection of all invites to this channel. public virtual Task<IReadOnlyCollection<IInviteMetadata>> GetInvitesAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IInviteMetadata>> A task that represents the asynchronous get operation. The task result contains a read-only collection of invite metadata that are created for this channel. Examples The following example gets all of the invites that have been created in this channel and selects the most used invite. var invites = await channel.GetInvitesAsync(); if (invites.Count == 0) return; var invite = invites.OrderByDescending(x => x.Uses).FirstOrDefault(); GetJoinedPrivateArchivedThreadsAsync(int?, DateTimeOffset?, RequestOptions) Gets a collection of privately archived threads that the current bot has joined within this forum channel. public Task<IReadOnlyCollection<RestThreadChannel>> GetJoinedPrivateArchivedThreadsAsync(int? limit = null, DateTimeOffset? before = null, RequestOptions options = null) Parameters limit int? The optional limit of how many to get. before DateTimeOffset? The optional date to return threads created before this timestamp. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestThreadChannel>> A task that represents an asynchronous get operation for retrieving the threads. The task result contains a collection of privately archived threads. GetPrivateArchivedThreadsAsync(int?, DateTimeOffset?, RequestOptions) Gets a collection of privately archived threads within this forum channel. public Task<IReadOnlyCollection<RestThreadChannel>> GetPrivateArchivedThreadsAsync(int? limit = null, DateTimeOffset? before = null, RequestOptions options = null) Parameters limit int? The optional limit of how many to get. before DateTimeOffset? The optional date to return threads created before this timestamp. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestThreadChannel>> A task that represents an asynchronous get operation for retrieving the threads. The task result contains a collection of privately archived threads. Remarks The bot requires the ManageThreads permission in order to execute this request. GetPublicArchivedThreadsAsync(int?, DateTimeOffset?, RequestOptions) Gets a collection of publicly archived threads within this forum channel. public Task<IReadOnlyCollection<RestThreadChannel>> GetPublicArchivedThreadsAsync(int? limit = null, DateTimeOffset? before = null, RequestOptions options = null) Parameters limit int? The optional limit of how many to get. before DateTimeOffset? The optional date to return threads created before this timestamp. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestThreadChannel>> A task that represents an asynchronous get operation for retrieving the threads. The task result contains a collection of publicly archived threads. GetWebhookAsync(ulong, RequestOptions) Creates a webhook in this channel. public Task<RestWebhook> GetWebhookAsync(ulong id, RequestOptions options = null) Parameters id ulong options RequestOptions The options to be used when sending the request. Returns Task<RestWebhook> A task that represents the asynchronous creation operation. The task result contains the newly created webhook. GetWebhooksAsync(RequestOptions) Creates a webhook in this channel. public Task<IReadOnlyCollection<RestWebhook>> GetWebhooksAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestWebhook>> A task that represents the asynchronous creation operation. The task result contains the newly created webhook. ModifyAsync(Action<ForumChannelProperties>, RequestOptions) Modifies this forum channel. public virtual Task ModifyAsync(Action<ForumChannelProperties> func, RequestOptions options = null) Parameters func Action<ForumChannelProperties> The delegate containing the properties to modify the channel with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies the current forum channel with the specified properties. To see an example of this method and what properties are available, please refer to ForumChannelProperties. SyncPermissionsAsync(RequestOptions) Syncs the permissions of this nested channel with its parent's. public virtual Task SyncPermissionsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for syncing channel permissions with its parent's."
  },
  "api/Discord.WebSocket.SocketGroupChannel.html": {
    "href": "api/Discord.WebSocket.SocketGroupChannel.html",
    "title": "Class SocketGroupChannel | Discord.Net Documentation",
    "keywords": "Class SocketGroupChannel Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a WebSocket-based private group channel. public class SocketGroupChannel : SocketChannel, IGroupChannel, ISocketPrivateChannel, IPrivateChannel, ISocketMessageChannel, IMessageChannel, ISocketAudioChannel, IAudioChannel, IChannel, ISnowflakeEntity, IEntity<ulong> Inheritance object SocketEntity<ulong> SocketChannel SocketGroupChannel Implements IGroupChannel ISocketPrivateChannel IPrivateChannel ISocketMessageChannel IMessageChannel ISocketAudioChannel IAudioChannel IChannel ISnowflakeEntity IEntity<ulong> Inherited Members SocketChannel.CreatedAt SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties CachedMessages Gets all messages in this channel's cache. public IReadOnlyCollection<SocketMessage> CachedMessages { get; } Property Value IReadOnlyCollection<SocketMessage> A read-only collection of WebSocket-based messages. Name Gets the name of this channel. public string Name { get; } Property Value string A string containing the name of this channel. RTCRegion Gets the RTC region for this audio channel. public string RTCRegion { get; } Property Value string Remarks This property can be null. Recipients Returns a collection representing all users in the group, not including the client. public IReadOnlyCollection<SocketGroupUser> Recipients { get; } Property Value IReadOnlyCollection<SocketGroupUser> Users Returns a collection representing all of the users in the group. public IReadOnlyCollection<SocketGroupUser> Users { get; } Property Value IReadOnlyCollection<SocketGroupUser> Methods ConnectAsync() public Task<IAudioClient> ConnectAsync() Returns Task<IAudioClient> Exceptions NotSupportedException Voice is not yet supported for group channels. DeleteMessageAsync(IMessage, RequestOptions) Deletes a message based on the provided message in this channel. public Task DeleteMessageAsync(IMessage message, RequestOptions options = null) Parameters message IMessage The message that would be removed. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. DeleteMessageAsync(ulong, RequestOptions) Deletes a message. public Task DeleteMessageAsync(ulong messageId, RequestOptions options = null) Parameters messageId ulong The snowflake identifier of the message that would be removed. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. EnterTypingState(RequestOptions) Continuously broadcasts the \"user is typing\" message to all users in this channel until the returned object is disposed. public IDisposable EnterTypingState(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns IDisposable A disposable object that, upon its disposal, will stop the client from broadcasting its typing state in this channel. Examples The following example keeps the client in the typing state until LongRunningAsync has finished. using (channel.EnterTypingState()) await LongRunningAsync(); GetCachedMessage(ulong) Gets a cached message from this channel. public SocketMessage GetCachedMessage(ulong id) Parameters id ulong The snowflake identifier of the message. Returns SocketMessage A WebSocket-based message object; null if it does not exist in the cache or if caching is not enabled. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return null. Please refer to MessageCacheSize for more details. This method retrieves the message from the local WebSocket cache and does not send any additional request to Discord. This message may be a message that has been deleted. GetCachedMessages(IMessage, Direction, int) Gets the last N cached messages starting from a certain message in this message channel. public IReadOnlyCollection<SocketMessage> GetCachedMessages(IMessage fromMessage, Direction dir, int limit = 100) Parameters fromMessage IMessage The message to start the fetching from. dir Direction The direction of which the message should be gotten from. limit int The number of messages to get. Returns IReadOnlyCollection<SocketMessage> A read-only collection of WebSocket-based messages. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Discord. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set. GetCachedMessages(int) Gets the last N cached messages from this message channel. public IReadOnlyCollection<SocketMessage> GetCachedMessages(int limit = 100) Parameters limit int The number of messages to get. Returns IReadOnlyCollection<SocketMessage> A read-only collection of WebSocket-based messages. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Discord. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set. GetCachedMessages(ulong, Direction, int) Gets the last N cached messages starting from a certain message in this message channel. public IReadOnlyCollection<SocketMessage> GetCachedMessages(ulong fromMessageId, Direction dir, int limit = 100) Parameters fromMessageId ulong The message ID to start the fetching from. dir Direction The direction of which the message should be gotten from. limit int The number of messages to get. Returns IReadOnlyCollection<SocketMessage> A read-only collection of WebSocket-based messages. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Discord. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set. GetMessageAsync(ulong, RequestOptions) Gets a message from this message channel. public Task<IMessage> GetMessageAsync(ulong id, RequestOptions options = null) Parameters id ulong The snowflake identifier of the message. options RequestOptions The options to be used when sending the request. Returns Task<IMessage> A task that represents an asynchronous get operation for retrieving the message. The task result contains the retrieved message; null if no message is found with the specified identifier. Remarks This method follows the same behavior as described in GetMessageAsync(ulong, CacheMode, RequestOptions). Please visit its documentation for more details on this method. GetMessagesAsync(IMessage, Direction, int, RequestOptions) Gets a collection of messages in this channel. public IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(IMessage fromMessage, Direction dir, int limit = 100, RequestOptions options = null) Parameters fromMessage IMessage The starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions). Please visit its documentation for more details on this method. GetMessagesAsync(int, RequestOptions) Gets the last N messages from this message channel. public IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(int limit = 100, RequestOptions options = null) Parameters limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(int, CacheMode, RequestOptions). Please visit its documentation for more details on this method. GetMessagesAsync(ulong, Direction, int, RequestOptions) Gets a collection of messages in this channel. public IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(ulong fromMessageId, Direction dir, int limit = 100, RequestOptions options = null) Parameters fromMessageId ulong The ID of the starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(ulong, Direction, int, CacheMode, RequestOptions). Please visit its documentation for more details on this method. GetPinnedMessagesAsync(RequestOptions) Gets a read-only collection of pinned messages in this channel. public Task<IReadOnlyCollection<RestMessage>> GetPinnedMessagesAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestMessage>> A task that represents the asynchronous get operation for retrieving pinned messages in this channel. The task result contains a read-only collection of messages found in the pinned messages. Remarks This method follows the same behavior as described in GetPinnedMessagesAsync(RequestOptions). Please visit its documentation for more details on this method. GetUser(ulong) Gets a user from this group. public SocketGroupUser GetUser(ulong id) Parameters id ulong The snowflake identifier of the user. Returns SocketGroupUser A WebSocket-based group user associated with the snowflake identifier. LeaveAsync(RequestOptions) Leaves this group. public Task LeaveAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous leave operation. ModifyMessageAsync(ulong, Action<MessageProperties>, RequestOptions) Modifies a message. public Task<IUserMessage> ModifyMessageAsync(ulong messageId, Action<MessageProperties> func, RequestOptions options = null) Parameters messageId ulong The snowflake identifier of the message that would be changed. func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The options to be used when sending the request. Returns Task<IUserMessage> A task that represents the asynchronous modification operation. Remarks This method modifies this message with the specified properties. To see an example of this method and what properties are available, please refer to MessageProperties. SendFileAsync(FileAttachment, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a file to this message channel with an optional caption. public Task<RestUserMessage> SendFileAsync(FileAttachment attachment, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters attachment FileAttachment The attachment containing the file and description. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Remarks This method sends a file as if you are uploading an attachment directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. ArgumentException The only valid MessageFlags are SuppressEmbeds and None. SendFileAsync(Stream, string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a file to this message channel with an optional caption. public Task<RestUserMessage> SendFileAsync(Stream stream, string filename, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters stream Stream The Stream of the file to be sent. filename string The name of the attachment. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. isSpoiler bool Whether the message attachment should be hidden as a spoiler. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example uploads a streamed image that will be called b1nzy.jpg embedded inside a rich embed to the channel. using (var b1nzyStream = await httpClient.GetStreamAsync(\"https://example.com/b1nzy\")) await channel.SendFileAsync(b1nzyStream, \"b1nzy.jpg\", embed: new EmbedBuilder { ImageUrl = \"attachment://b1nzy.jpg\" }.Build()); Remarks This method sends a file as if you are uploading an attachment directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. ArgumentException The only valid MessageFlags are SuppressEmbeds and None. SendFileAsync(string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a file to this message channel with an optional caption. public Task<RestUserMessage> SendFileAsync(string filePath, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters filePath string The file path of the file. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. isSpoiler bool Whether the message attachment should be hidden as a spoiler. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example uploads a local file called wumpus.txt along with the text good discord boi to the channel. await channel.SendFileAsync(\"wumpus.txt\", \"good discord boi\"); The following example uploads a local image called b1nzy.jpg embedded inside a rich embed to the channel. await channel.SendFileAsync(\"b1nzy.jpg\", embed: new EmbedBuilder { ImageUrl = \"attachment://b1nzy.jpg\" }.Build()); Remarks This method sends a file as if you are uploading an attachment directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. Exceptions ArgumentException The only valid MessageFlags are SuppressEmbeds and None. SendFilesAsync(IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a collection of files to this message channel. public Task<RestUserMessage> SendFilesAsync(IEnumerable<FileAttachment> attachments, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Remarks This method sends files as if you are uploading attachments directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. ArgumentException The only valid MessageFlags are SuppressEmbeds and None. SendMessageAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a message to this message channel. public Task<RestUserMessage> SendMessageAsync(string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters text string The message to be sent. isTTS bool Determines whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the message. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example sends a message with the current system time in RFC 1123 format to the channel and deletes itself after 5 seconds. var message = await channel.SendMessageAsync(DateTimeOffset.UtcNow.ToString(\"R\")); await Task.Delay(TimeSpan.FromSeconds(5)) .ContinueWith(x => message.DeleteAsync()); Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. ArgumentException The only valid MessageFlags are SuppressEmbeds and None. ToString() Returns the name of the group. public override string ToString() Returns string TriggerTypingAsync(RequestOptions) Broadcasts the \"user is typing\" message to all users in this channel, lasting 10 seconds. public Task TriggerTypingAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation that triggers the broadcast."
  },
  "api/Discord.WebSocket.SocketGroupUser.html": {
    "href": "api/Discord.WebSocket.SocketGroupUser.html",
    "title": "Class SocketGroupUser | Discord.Net Documentation",
    "keywords": "Class SocketGroupUser Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a WebSocket-based group user. public class SocketGroupUser : SocketUser, IGroupUser, IUser, ISnowflakeEntity, IEntity<ulong>, IMentionable, IPresence, IVoiceState Inheritance object SocketEntity<ulong> SocketUser SocketGroupUser Implements IGroupUser IUser ISnowflakeEntity IEntity<ulong> IMentionable IPresence IVoiceState Inherited Members SocketUser.PublicFlags SocketUser.CreatedAt SocketUser.Discriminator SocketUser.Mention SocketUser.Status SocketUser.ActiveClients SocketUser.Activities SocketUser.AvatarDecorationHash SocketUser.AvatarDecorationSkuId SocketUser.MutualGuilds SocketUser.CreateDMChannelAsync(RequestOptions) SocketUser.GetAvatarUrl(ImageFormat, ushort) SocketUser.GetDefaultAvatarUrl() SocketUser.GetDisplayAvatarUrl(ImageFormat, ushort) SocketUser.GetAvatarDecorationUrl() SocketUser.ToString() SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods UserExtensions.SendFileAsync(IUser, FileAttachment, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, Stream, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFilesAsync(IUser, IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendMessageAsync(IUser, string, bool, Embed, RequestOptions, AllowedMentions, MessageComponent, Embed[]) Properties AvatarId Gets the identifier of this user's avatar. public override string AvatarId { get; } Property Value string Channel Gets the group channel of the user. public SocketGroupChannel Channel { get; } Property Value SocketGroupChannel A SocketGroupChannel representing the channel of which the user belongs to. DiscriminatorValue Gets the per-username unique ID for this user. This will return 0 for users who have migrated to new username system. public override ushort DiscriminatorValue { get; } Property Value ushort GlobalName Gets the user's display name, if it is set. For bots, this will get the application name. public override string GlobalName { get; } Property Value string Remarks This property will be null if user has no display name set. IsBot Gets a value that indicates whether this user is identified as a bot. public override bool IsBot { get; } Property Value bool true if the user is a bot application; otherwise false. Remarks This property retrieves a value that indicates whether this user is a registered bot application (indicated by the blue BOT tag within the official chat client). IsWebhook Gets a value that indicates whether this user is a webhook user. public override bool IsWebhook { get; } Property Value bool true if the user is a webhook; otherwise false. Username Gets the username for this user. public override string Username { get; } Property Value string"
  },
  "api/Discord.WebSocket.SocketGuild.html": {
    "href": "api/Discord.WebSocket.SocketGuild.html",
    "title": "Class SocketGuild | Discord.Net Documentation",
    "keywords": "Class SocketGuild Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a WebSocket-based guild object. public class SocketGuild : SocketEntity<ulong>, IGuild, IDeletable, ISnowflakeEntity, IEntity<ulong>, IDisposable Inheritance object SocketEntity<ulong> SocketGuild Implements IGuild IDeletable ISnowflakeEntity IEntity<ulong> IDisposable Inherited Members SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods GuildExtensions.GetGuildBoostMessagesEnabled(IGuild) GuildExtensions.GetGuildSetupTipMessagesEnabled(IGuild) GuildExtensions.GetGuildWelcomeMessageReplyEnabled(IGuild) GuildExtensions.GetWelcomeMessagesEnabled(IGuild) Properties AFKChannel Gets the AFK voice channel in this guild. public SocketVoiceChannel AFKChannel { get; } Property Value SocketVoiceChannel A SocketVoiceChannel that the AFK users will be moved to after they have idled for too long; null if none is set. AFKTimeout Gets the amount of time (in seconds) a user must be inactive in a voice channel for until they are automatically moved to the AFK voice channel. public int AFKTimeout { get; } Property Value int An int representing the amount of time in seconds for a user to be marked as inactive and moved into the AFK voice channel. ApplicationId Gets the application ID of the guild creator if it is bot-created. public ulong? ApplicationId { get; } Property Value ulong? A ulong representing the snowflake identifier of the application ID that created this guild, or null if it was not bot-created. AudioClient Gets the IAudioClient associated with this guild. public IAudioClient AudioClient { get; } Property Value IAudioClient AutoModRules Gets the auto moderation rules defined in this guild. public IReadOnlyCollection<SocketAutoModRule> AutoModRules { get; } Property Value IReadOnlyCollection<SocketAutoModRule> Remarks This property may not always return all auto moderation rules if they haven't been cached. BannerId Gets the identifier for this guilds banner image. public string BannerId { get; } Property Value string An identifier for the banner image; null if none is set. BannerUrl Gets the URL of this guild's banner image. public string BannerUrl { get; } Property Value string A URL pointing to the guild's banner image; null if none is set. CachedAuditLogs Gets all cached audit log entries from this guild. public IReadOnlyCollection<SocketAuditLogEntry> CachedAuditLogs { get; } Property Value IReadOnlyCollection<SocketAuditLogEntry> CategoryChannels Gets a collection of all category channels in this guild. public IReadOnlyCollection<SocketCategoryChannel> CategoryChannels { get; } Property Value IReadOnlyCollection<SocketCategoryChannel> A read-only collection of category channels found within this guild. Channels Gets a collection of all channels in this guild. public IReadOnlyCollection<SocketGuildChannel> Channels { get; } Property Value IReadOnlyCollection<SocketGuildChannel> A read-only collection of generic channels found within this guild. CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. CurrentUser Gets the current logged-in user. public SocketGuildUser CurrentUser { get; } Property Value SocketGuildUser DefaultChannel Gets the default channel in this guild. public SocketTextChannel DefaultChannel { get; } Property Value SocketTextChannel A SocketTextChannel representing the first viewable channel that the user has access to. Remarks This property retrieves the first viewable text channel for this guild. warning This channel does not guarantee the user can send message to it, as it only looks for the first viewable text channel. DefaultMessageNotifications Gets the default message notifications for users who haven't explicitly set their notification settings. public DefaultMessageNotifications DefaultMessageNotifications { get; } Property Value DefaultMessageNotifications Description Gets the description for the guild. public string Description { get; } Property Value string The description for the guild; null if none is set. DiscoverySplashId Gets the ID of this guild's discovery splash image. public string DiscoverySplashId { get; } Property Value string An identifier for the discovery splash image; null if none is set. DiscoverySplashUrl Gets the URL of this guild's discovery splash image. public string DiscoverySplashUrl { get; } Property Value string A URL pointing to the guild's discovery splash image; null if none is set. DownloadedMemberCount Gets the number of members downloaded to the local guild cache. public int DownloadedMemberCount { get; } Property Value int DownloaderPromise public Task DownloaderPromise { get; } Property Value Task Emotes Gets a collection of all custom emotes for this guild. public IReadOnlyCollection<GuildEmote> Emotes { get; } Property Value IReadOnlyCollection<GuildEmote> A read-only collection of all custom emotes for this guild. Events Gets a collection of all events within this guild. public IReadOnlyCollection<SocketGuildEvent> Events { get; } Property Value IReadOnlyCollection<SocketGuildEvent> A read-only collection of guild events found within this guild. Remarks This field is based off of caching alone, since there is no events returned on the guild model. EveryoneRole Gets the built-in role containing all users in this guild. public SocketRole EveryoneRole { get; } Property Value SocketRole A role object that represents an @everyone role in this guild. ExplicitContentFilter Gets the level of content filtering applied to user's content in a Guild. public ExplicitContentFilterLevel ExplicitContentFilter { get; } Property Value ExplicitContentFilterLevel The level of explicit content filtering. Features Gets the features for this guild. public GuildFeatures Features { get; } Property Value GuildFeatures A flags enum containing all the features for the guild. ForumChannels Gets a collection of all forum channels in this guild. public IReadOnlyCollection<SocketForumChannel> ForumChannels { get; } Property Value IReadOnlyCollection<SocketForumChannel> A read-only collection of forum channels found within this guild. HasAllMembers Indicates whether the client has all the members downloaded to the local guild cache. public bool HasAllMembers { get; } Property Value bool IconId Gets the ID of this guild's icon. public string IconId { get; } Property Value string An identifier for the splash image; null if none is set. IconUrl Gets the URL of this guild's icon. public string IconUrl { get; } Property Value string A URL pointing to the guild's icon; null if none is set. IncidentsData Gets the incidents data for this guild. public GuildIncidentsData IncidentsData { get; } Property Value GuildIncidentsData InventorySettings Get the inventory settings on the guild. null if not available in the guild. public GuildInventorySettings? InventorySettings { get; } Property Value GuildInventorySettings? IsBoostProgressBarEnabled Gets whether the guild has the boost progress bar enabled. public bool IsBoostProgressBarEnabled { get; } Property Value bool true if the boost progress bar is enabled; otherwise false. IsConnected Indicates whether the client is connected to this guild. public bool IsConnected { get; } Property Value bool IsSynced Indicates whether the guild cache is synced to this guild. public bool IsSynced { get; } Property Value bool IsWidgetEnabled Gets a value that indicates whether this guild has the widget enabled. public bool IsWidgetEnabled { get; } Property Value bool true if this guild has a widget enabled; otherwise false. MaxBitrate Gets the max bitrate for voice channels in this guild. public int MaxBitrate { get; } Property Value int A int representing the maximum bitrate value allowed by Discord in this guild. MaxMembers Gets the maximum number of members for the guild. public int? MaxMembers { get; } Property Value int? The maximum number of members for the guild. MaxPresences Gets the maximum number of presences for the guild. public int? MaxPresences { get; } Property Value int? The maximum number of presences for the guild. MaxStageVideoChannelUsers Gets the maximum amount of users in a stage video channel. public int? MaxStageVideoChannelUsers { get; } Property Value int? The maximum amount of users in a stage video channel. MaxUploadLimit Gets the upload limit in bytes for this guild. This number is dependent on the guild's boost status. public ulong MaxUploadLimit { get; } Property Value ulong MaxVideoChannelUsers Gets the maximum amount of users in a video channel. public int? MaxVideoChannelUsers { get; } Property Value int? The maximum amount of users in a video channel. MediaChannels Gets a collection of all media channels in this guild. public IReadOnlyCollection<SocketMediaChannel> MediaChannels { get; } Property Value IReadOnlyCollection<SocketMediaChannel> A read-only collection of forum channels found within this guild. MemberCount Gets the number of members. public int MemberCount { get; } Property Value int Remarks This property retrieves the number of members returned by Discord. tip Due to how this property is returned by Discord instead of relying on the WebSocket cache, the number here is the most accurate in terms of counting the number of users within this guild. Use this instead of enumerating the count of the Users collection, as you may see discrepancy between that and this property. MfaLevel Gets the level of Multi-Factor Authentication requirements a user must fulfill before being allowed to perform administrative actions in this guild. public MfaLevel MfaLevel { get; } Property Value MfaLevel The level of MFA requirement. Name Gets the name of this guild. public string Name { get; } Property Value string A string containing the name of this guild. NsfwLevel Gets the NSFW level of this guild. public NsfwLevel NsfwLevel { get; } Property Value NsfwLevel The NSFW level of this guild. Owner Gets the user that owns this guild. public SocketGuildUser Owner { get; } Property Value SocketGuildUser OwnerId Gets the ID of the user that owns this guild. public ulong OwnerId { get; } Property Value ulong A ulong representing the snowflake identifier of the user that owns this guild. PreferredCulture Gets the preferred culture of this guild. public CultureInfo PreferredCulture { get; } Property Value CultureInfo The preferred culture information of this guild. PreferredLocale Gets the preferred locale of this guild in IETF BCP 47 language tag format. public string PreferredLocale { get; } Property Value string The preferred locale of the guild in IETF BCP 47 language tag format. PremiumSubscriptionCount Gets the number of premium subscribers of this guild. public int PremiumSubscriptionCount { get; } Property Value int The number of premium subscribers of this guild. Remarks This is the number of users who have boosted this guild. PremiumTier Gets the tier of guild boosting in this guild. public PremiumTier PremiumTier { get; } Property Value PremiumTier The tier of guild boosting in this guild. PublicUpdatesChannel Gets the channel where admins and moderators of Community guilds receive notices from Discord. public SocketTextChannel PublicUpdatesChannel { get; } Property Value SocketTextChannel A text channel where admins and moderators of Community guilds receive notices from Discord; null if none is set. Roles Gets a collection of all roles in this guild. public IReadOnlyCollection<SocketRole> Roles { get; } Property Value IReadOnlyCollection<SocketRole> A read-only collection of roles found within this guild. RulesChannel Gets the channel with the guild rules. public SocketTextChannel RulesChannel { get; } Property Value SocketTextChannel A text channel with the guild rules; null if none is set. SafetyAlertsChannel Gets the safety alerts channel in this guild. public SocketGuildChannel SafetyAlertsChannel { get; } Property Value SocketGuildChannel The channel set for receiving safety alerts channel; null if none is set. SplashId Gets the ID of this guild's splash image. public string SplashId { get; } Property Value string An identifier for the splash image; null if none is set. SplashUrl Gets the URL of this guild's splash image. public string SplashUrl { get; } Property Value string A URL pointing to the guild's splash image; null if none is set. StageChannels Gets a collection of all stage channels in this guild. public IReadOnlyCollection<SocketStageChannel> StageChannels { get; } Property Value IReadOnlyCollection<SocketStageChannel> A read-only collection of stage channels found within this guild. Stickers Gets a collection of all custom stickers for this guild. public IReadOnlyCollection<SocketCustomSticker> Stickers { get; } Property Value IReadOnlyCollection<SocketCustomSticker> SyncPromise public Task SyncPromise { get; } Property Value Task SystemChannel Gets the system channel where randomized welcome messages are sent in this guild. public SocketTextChannel SystemChannel { get; } Property Value SocketTextChannel A text channel where randomized welcome messages will be sent to; null if none is set. SystemChannelFlags Gets the flags for the types of system channel messages that are disabled. public SystemChannelMessageDeny SystemChannelFlags { get; } Property Value SystemChannelMessageDeny The flags for the types of system channel messages that are disabled. TextChannels Gets a collection of all text channels in this guild. public IReadOnlyCollection<SocketTextChannel> TextChannels { get; } Property Value IReadOnlyCollection<SocketTextChannel> A read-only collection of message channels found within this guild. ThreadChannels Gets a collection of all thread channels in this guild. public IReadOnlyCollection<SocketThreadChannel> ThreadChannels { get; } Property Value IReadOnlyCollection<SocketThreadChannel> A read-only collection of thread channels found within this guild. Users Gets a collection of users in this guild. public IReadOnlyCollection<SocketGuildUser> Users { get; } Property Value IReadOnlyCollection<SocketGuildUser> A collection of guild users found within this guild. Remarks This property retrieves all users found within this guild. warning This property may not always return all the members for large guilds (i.e. guilds containing 100+ users). If you are simply looking to get the number of users present in this guild, consider using MemberCount instead. Otherwise, you may need to enable AlwaysDownloadUsers to fetch the full user list upon startup, or use DownloadUsersAsync() to manually download the users. VanityURLCode Gets the code for this guild's vanity invite URL. public string VanityURLCode { get; } Property Value string A string containing the vanity invite code for this guild; null if none is set. VerificationLevel Gets the level of requirements a user must fulfill before being allowed to post messages in this guild. public VerificationLevel VerificationLevel { get; } Property Value VerificationLevel The level of requirements. VoiceChannels Gets a collection of all voice channels in this guild. public IReadOnlyCollection<SocketVoiceChannel> VoiceChannels { get; } Property Value IReadOnlyCollection<SocketVoiceChannel> A read-only collection of voice channels found within this guild. VoiceRegionId Gets the ID of the region hosting this guild's voice channels. public string VoiceRegionId { get; } Property Value string A string containing the identifier for the voice region that this guild uses (e.g. eu-central). WidgetChannel Gets the widget channel (i.e. the channel set in the guild's widget settings) in this guild. public SocketGuildChannel WidgetChannel { get; } Property Value SocketGuildChannel A channel set within the server's widget settings; null if none is set. Methods AddBanAsync(IUser, int, string, RequestOptions) Bans the user from this guild and optionally prunes their recent messages. public Task AddBanAsync(IUser user, int pruneDays = 0, string reason = null, RequestOptions options = null) Parameters user IUser The user to ban. pruneDays int The number of days to remove messages from this user for, and this number must be between [0, 7]. reason string The reason of the ban to be written in the audit log. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous add operation for the ban. Exceptions ArgumentException pruneDays is not between 0 to 7. AddBanAsync(ulong, int, string, RequestOptions) Bans the user from this guild and optionally prunes their recent messages. public Task AddBanAsync(ulong userId, int pruneDays = 0, string reason = null, RequestOptions options = null) Parameters userId ulong The snowflake ID of the user to ban. pruneDays int The number of days to remove messages from this user for, and this number must be between [0, 7]. reason string The reason of the ban to be written in the audit log. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous add operation for the ban. Exceptions ArgumentException pruneDays is not between 0 to 7. AddGuildUserAsync(ulong, string, Action<AddGuildUserProperties>, RequestOptions) public Task<RestGuildUser> AddGuildUserAsync(ulong id, string accessToken, Action<AddGuildUserProperties> func = null, RequestOptions options = null) Parameters id ulong accessToken string func Action<AddGuildUserProperties> options RequestOptions Returns Task<RestGuildUser> BulkOverwriteApplicationCommandAsync(ApplicationCommandProperties[], RequestOptions) Overwrites the application commands within this guild. public Task<IReadOnlyCollection<SocketApplicationCommand>> BulkOverwriteApplicationCommandAsync(ApplicationCommandProperties[] properties, RequestOptions options = null) Parameters properties ApplicationCommandProperties[] A collection of properties to use when creating the commands. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<SocketApplicationCommand>> A task that represents the asynchronous creation operation. The task result contains a collection of commands that was created. CreateApplicationCommandAsync(ApplicationCommandProperties, RequestOptions) Creates an application command within this guild. public Task<SocketApplicationCommand> CreateApplicationCommandAsync(ApplicationCommandProperties properties, RequestOptions options = null) Parameters properties ApplicationCommandProperties The properties to use when creating the command. options RequestOptions The options to be used when sending the request. Returns Task<SocketApplicationCommand> A task that represents the asynchronous creation operation. The task result contains the command that was created. CreateAutoModRuleAsync(Action<AutoModRuleProperties>, RequestOptions) Creates a new auto moderation rule. public Task<SocketAutoModRule> CreateAutoModRuleAsync(Action<AutoModRuleProperties> props, RequestOptions options = null) Parameters props Action<AutoModRuleProperties> options RequestOptions Returns Task<SocketAutoModRule> A task that represents the asynchronous creation operation. The task result contains the created IAutoModRule. CreateCategoryChannelAsync(string, Action<GuildChannelProperties>, RequestOptions) Creates a new channel category in this guild. public Task<RestCategoryChannel> CreateCategoryChannelAsync(string name, Action<GuildChannelProperties> func = null, RequestOptions options = null) Parameters name string The new name for the category. func Action<GuildChannelProperties> The delegate containing the properties to be applied to the channel upon its creation. options RequestOptions The options to be used when sending the request. Returns Task<RestCategoryChannel> A task that represents the asynchronous creation operation. The task result contains the newly created category channel. Exceptions ArgumentNullException name is null. CreateEmoteAsync(string, Image, Optional<IEnumerable<IRole>>, RequestOptions) Creates a new GuildEmote in this guild. public Task<GuildEmote> CreateEmoteAsync(string name, Image image, Optional<IEnumerable<IRole>> roles = default, RequestOptions options = null) Parameters name string The name of the guild emote. image Image The image of the new emote. roles Optional<IEnumerable<IRole>> The roles to limit the emote usage to. options RequestOptions The options to be used when sending the request. Returns Task<GuildEmote> A task that represents the asynchronous creation operation. The task result contains the created emote. CreateEventAsync(string, DateTimeOffset, GuildScheduledEventType, GuildScheduledEventPrivacyLevel, string, DateTimeOffset?, ulong?, string, Image?, RequestOptions) Creates an event within this guild. public Task<RestGuildEvent> CreateEventAsync(string name, DateTimeOffset startTime, GuildScheduledEventType type, GuildScheduledEventPrivacyLevel privacyLevel = GuildScheduledEventPrivacyLevel.Private, string description = null, DateTimeOffset? endTime = null, ulong? channelId = null, string location = null, Image? coverImage = null, RequestOptions options = null) Parameters name string The name of the event. startTime DateTimeOffset The start time of the event. type GuildScheduledEventType The type of the event. privacyLevel GuildScheduledEventPrivacyLevel The privacy level of the event. description string The description of the event. endTime DateTimeOffset? The end time of the event. channelId ulong? The channel id of the event. The event must have a type of Stage or Voice in order to use this property. location string The location of the event; links are supported coverImage Image? The optional banner image for the event. options RequestOptions The options to be used when sending the request. Returns Task<RestGuildEvent> A task that represents the asynchronous create operation. CreateForumChannelAsync(string, Action<ForumChannelProperties>, RequestOptions) Creates a new forum channel in this guild. public Task<RestForumChannel> CreateForumChannelAsync(string name, Action<ForumChannelProperties> func = null, RequestOptions options = null) Parameters name string The new name for the forum. func Action<ForumChannelProperties> The delegate containing the properties to be applied to the channel upon its creation. options RequestOptions The options to be used when sending the request. Returns Task<RestForumChannel> A task that represents the asynchronous creation operation. The task result contains the newly created forum channel. Exceptions ArgumentNullException name is null. CreateMediaChannelAsync(string, Action<ForumChannelProperties>, RequestOptions) Creates a new media channel in this guild. public Task<RestMediaChannel> CreateMediaChannelAsync(string name, Action<ForumChannelProperties> func = null, RequestOptions options = null) Parameters name string The new name for the media channel. func Action<ForumChannelProperties> The delegate containing the properties to be applied to the channel upon its creation. options RequestOptions The options to be used when sending the request. Returns Task<RestMediaChannel> A task that represents the asynchronous creation operation. The task result contains the newly created media channel. Exceptions ArgumentNullException name is null. CreateRoleAsync(string, GuildPermissions?, Color?, bool, bool, RequestOptions, Image?, Emoji) Creates a new role with the provided name. public Task<RestRole> CreateRoleAsync(string name, GuildPermissions? permissions = null, Color? color = null, bool isHoisted = false, bool isMentionable = false, RequestOptions options = null, Image? icon = null, Emoji emoji = null) Parameters name string The new name for the role. permissions GuildPermissions? The guild permission that the role should possess. color Color? The color of the role. isHoisted bool Whether the role is separated from others on the sidebar. isMentionable bool Whether the role can be mentioned. options RequestOptions The options to be used when sending the request. icon Image? The icon for the role. emoji Emoji The unicode emoji to be used as an icon for the role. Returns Task<RestRole> A task that represents the asynchronous creation operation. The task result contains the newly created role. Exceptions ArgumentNullException name is null. CreateStageChannelAsync(string, Action<VoiceChannelProperties>, RequestOptions) Creates a new stage channel in this guild. public Task<RestStageChannel> CreateStageChannelAsync(string name, Action<VoiceChannelProperties> func = null, RequestOptions options = null) Parameters name string The new name for the stage channel. func Action<VoiceChannelProperties> The delegate containing the properties to be applied to the channel upon its creation. options RequestOptions The options to be used when sending the request. Returns Task<RestStageChannel> A task that represents the asynchronous creation operation. The task result contains the newly created stage channel. CreateStickerAsync(string, Image, IEnumerable<string>, string, RequestOptions) Creates a new sticker in this guild. public Task<SocketCustomSticker> CreateStickerAsync(string name, Image image, IEnumerable<string> tags, string description = null, RequestOptions options = null) Parameters name string The name of the sticker. image Image The image of the new emote. tags IEnumerable<string> The tags of the sticker. description string The description of the sticker. options RequestOptions The options to be used when sending the request. Returns Task<SocketCustomSticker> A task that represents the asynchronous creation operation. The task result contains the created sticker. CreateStickerAsync(string, Stream, string, IEnumerable<string>, string, RequestOptions) Creates a new sticker in this guild public Task<SocketCustomSticker> CreateStickerAsync(string name, Stream stream, string filename, IEnumerable<string> tags, string description = null, RequestOptions options = null) Parameters name string The name of the sticker. stream Stream The stream containing the file data. filename string The name of the file with the extension, ex: image.png. tags IEnumerable<string> The tags of the sticker. description string The description of the sticker. options RequestOptions The options to be used when sending the request. Returns Task<SocketCustomSticker> A task that represents the asynchronous creation operation. The task result contains the created sticker. CreateStickerAsync(string, string, IEnumerable<string>, string, RequestOptions) Creates a new sticker in this guild public Task<SocketCustomSticker> CreateStickerAsync(string name, string path, IEnumerable<string> tags, string description = null, RequestOptions options = null) Parameters name string The name of the sticker. path string The path of the file to upload. tags IEnumerable<string> The tags of the sticker. description string The description of the sticker. options RequestOptions The options to be used when sending the request. Returns Task<SocketCustomSticker> A task that represents the asynchronous creation operation. The task result contains the created sticker. CreateTextChannelAsync(string, Action<TextChannelProperties>, RequestOptions) Creates a new text channel in this guild. public Task<RestTextChannel> CreateTextChannelAsync(string name, Action<TextChannelProperties> func = null, RequestOptions options = null) Parameters name string The new name for the text channel. func Action<TextChannelProperties> The delegate containing the properties to be applied to the channel upon its creation. options RequestOptions The options to be used when sending the request. Returns Task<RestTextChannel> A task that represents the asynchronous creation operation. The task result contains the newly created text channel. Examples The following example creates a new text channel under an existing category named Wumpus with a set topic. var categories = await guild.GetCategoriesAsync(); var targetCategory = categories.FirstOrDefault(x => x.Name == \"wumpus\"); if (targetCategory == null) return; await Context.Guild.CreateTextChannelAsync(name, x => { x.CategoryId = targetCategory.Id; x.Topic = $\"This channel was created at {DateTimeOffset.UtcNow} by {user}.\"; }); CreateVoiceChannelAsync(string, Action<VoiceChannelProperties>, RequestOptions) Creates a new voice channel in this guild. public Task<RestVoiceChannel> CreateVoiceChannelAsync(string name, Action<VoiceChannelProperties> func = null, RequestOptions options = null) Parameters name string The new name for the voice channel. func Action<VoiceChannelProperties> The delegate containing the properties to be applied to the channel upon its creation. options RequestOptions The options to be used when sending the request. Returns Task<RestVoiceChannel> A task that represents the asynchronous creation operation. The task result contains the newly created voice channel. Exceptions ArgumentNullException name is null. DeleteApplicationCommandsAsync(RequestOptions) Deletes all application commands in the current guild. public Task DeleteApplicationCommandsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous delete operation. DeleteAsync(RequestOptions) Deletes this object and all its children. public Task DeleteAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task DeleteEmoteAsync(GuildEmote, RequestOptions) Deletes an existing GuildEmote from this guild. public Task DeleteEmoteAsync(GuildEmote emote, RequestOptions options = null) Parameters emote GuildEmote The emote to delete. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. DeleteIntegrationAsync(ulong, RequestOptions) public Task DeleteIntegrationAsync(ulong id, RequestOptions options = null) Parameters id ulong options RequestOptions Returns Task DeleteStickerAsync(SocketCustomSticker, RequestOptions) Deletes a sticker within this guild. public Task DeleteStickerAsync(SocketCustomSticker sticker, RequestOptions options = null) Parameters sticker SocketCustomSticker The sticker to delete. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. DownloadUsersAsync() Downloads all users for this guild if the current list is incomplete. public Task DownloadUsersAsync() Returns Task A task that represents the asynchronous download operation. Remarks This method downloads all users found within this guild through the Gateway and caches them. GetApplicationCommandAsync(ulong, CacheMode, RequestOptions) Gets an application command within this guild with the specified id. public ValueTask<SocketApplicationCommand> GetApplicationCommandAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters id ulong The id of the application command to get. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns ValueTask<SocketApplicationCommand> A ValueTask that represents the asynchronous get operation. The task result contains a IApplicationCommand if found, otherwise null. GetApplicationCommandsAsync(bool, string, RequestOptions) Gets a collection of slash commands created by the current user in this guild. public Task<IReadOnlyCollection<SocketApplicationCommand>> GetApplicationCommandsAsync(bool withLocalizations = false, string locale = null, RequestOptions options = null) Parameters withLocalizations bool Whether to include full localization dictionaries in the returned objects, instead of the name localized and description localized fields. locale string The target locale of the localized name and description fields. Sets X-Discord-Locale header, which takes precedence over Accept-Language. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<SocketApplicationCommand>> A task that represents the asynchronous get operation. The task result contains a read-only collection of slash commands created by the current user. GetAuditLogsAsync(int, RequestOptions, ulong?, ulong?, ActionType?, ulong?) Gets the specified number of audit log entries for this guild. public IAsyncEnumerable<IReadOnlyCollection<RestAuditLogEntry>> GetAuditLogsAsync(int limit, RequestOptions options = null, ulong? beforeId = null, ulong? userId = null, ActionType? actionType = null, ulong? afterId = null) Parameters limit int The number of audit log entries to fetch. options RequestOptions The options to be used when sending the request. beforeId ulong? The audit log entry ID to filter entries before. userId ulong? The user ID to filter entries for. actionType ActionType? The type of actions to filter. afterId ulong? The audit log entry ID to filter entries after. Returns IAsyncEnumerable<IReadOnlyCollection<RestAuditLogEntry>> A task that represents the asynchronous get operation. The task result contains a read-only collection of the requested audit log entries. GetAutoModRule(ulong) Gets a single rule configured in a guild from cache. Returns null if the rule was not found. public SocketAutoModRule GetAutoModRule(ulong id) Parameters id ulong Returns SocketAutoModRule GetAutoModRuleAsync(ulong, RequestOptions) Gets a single rule configured in a guild. Returns null if the rule was not found. public Task<SocketAutoModRule> GetAutoModRuleAsync(ulong ruleId, RequestOptions options = null) Parameters ruleId ulong options RequestOptions Returns Task<SocketAutoModRule> A task that represents the asynchronous creation operation. The task result contains a IAutoModRule. GetAutoModRulesAsync(RequestOptions) Get a list of all rules currently configured for the guild. public Task<SocketAutoModRule[]> GetAutoModRulesAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task<SocketAutoModRule[]> A task that represents the asynchronous creation operation. The task result contains a collection of IAutoModRule. GetBanAsync(IUser, RequestOptions) Gets a ban object for a banned user. public Task<RestBan> GetBanAsync(IUser user, RequestOptions options = null) Parameters user IUser The banned user. options RequestOptions The options to be used when sending the request. Returns Task<RestBan> A task that represents the asynchronous get operation. The task result contains a ban object, which contains the user information and the reason for the ban; null if the ban entry cannot be found. GetBanAsync(ulong, RequestOptions) Gets a ban object for a banned user. public Task<RestBan> GetBanAsync(ulong userId, RequestOptions options = null) Parameters userId ulong The snowflake identifier for the banned user. options RequestOptions The options to be used when sending the request. Returns Task<RestBan> A task that represents the asynchronous get operation. The task result contains a ban object, which contains the user information and the reason for the ban; null if the ban entry cannot be found. GetBansAsync(IUser, Direction, int, RequestOptions) Gets limit amount of bans from the guild starting at the provided fromUser ordered by user ID. public IAsyncEnumerable<IReadOnlyCollection<RestBan>> GetBansAsync(IUser fromUser, Direction dir, int limit = 1000, RequestOptions options = null) Parameters fromUser IUser The user to start to get bans from. dir Direction The direction of the bans to be gotten. limit int The number of bans to get. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestBan>> A paged collection of bans. Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the individual messages as a collection. warning Do not fetch too many bans at once! This may cause unwanted preemptive rate limit or even actual rate limit, causing your bot to freeze! GetBansAsync(int, RequestOptions) Gets limit amount of bans from the guild ordered by user ID. public IAsyncEnumerable<IReadOnlyCollection<RestBan>> GetBansAsync(int limit = 1000, RequestOptions options = null) Parameters limit int The amount of bans to get from the guild. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestBan>> A paged collection of bans. Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the individual messages as a collection. warning Do not fetch too many bans at once! This may cause unwanted preemptive rate limit or even actual rate limit, causing your bot to freeze! GetBansAsync(ulong, Direction, int, RequestOptions) Gets limit amount of bans from the guild starting at the provided fromUserId ordered by user ID. public IAsyncEnumerable<IReadOnlyCollection<RestBan>> GetBansAsync(ulong fromUserId, Direction dir, int limit = 1000, RequestOptions options = null) Parameters fromUserId ulong The ID of the user to start to get bans from. dir Direction The direction of the bans to be gotten. limit int The number of bans to get. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestBan>> A paged collection of bans. Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the individual messages as a collection. warning Do not fetch too many bans at once! This may cause unwanted preemptive rate limit or even actual rate limit, causing your bot to freeze! GetCachedAuditLog(ulong) Gets cached audit log entry with the provided id. public SocketAuditLogEntry GetCachedAuditLog(ulong id) Parameters id ulong Returns SocketAuditLogEntry Remarks Returns null if no entry with provided id was found in cache. GetCachedAuditLogs(int, ActionType?, ulong?, Direction) Gets audit log entries with the specified type from cache. public IReadOnlyCollection<SocketAuditLogEntry> GetCachedAuditLogs(int limit = 100, ActionType? action = null, ulong? fromEntryId = null, Direction direction = Direction.Before) Parameters limit int action ActionType? fromEntryId ulong? direction Direction Returns IReadOnlyCollection<SocketAuditLogEntry> GetCategoryChannel(ulong) Gets a category channel in this guild. public SocketCategoryChannel GetCategoryChannel(ulong id) Parameters id ulong The snowflake identifier for the category channel. Returns SocketCategoryChannel A category channel associated with the specified id; null if none is found. GetChannel(ulong) Gets a channel in this guild. public SocketGuildChannel GetChannel(ulong id) Parameters id ulong The snowflake identifier for the channel. Returns SocketGuildChannel A generic channel associated with the specified id; null if none is found. GetEmoteAsync(ulong, RequestOptions) Gets a specific emote from this guild. public Task<GuildEmote> GetEmoteAsync(ulong id, RequestOptions options = null) Parameters id ulong The snowflake identifier for the guild emote. options RequestOptions The options to be used when sending the request. Returns Task<GuildEmote> A task that represents the asynchronous get operation. The task result contains the emote found with the specified id; null if none is found. GetEmotesAsync(RequestOptions) Gets a collection of emotes from this guild. public Task<IReadOnlyCollection<GuildEmote>> GetEmotesAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<GuildEmote>> A task that represents the asynchronous get operation. The task result contains a read-only collection of emotes found within the guild. GetEvent(ulong) Gets an event in this guild. public SocketGuildEvent GetEvent(ulong id) Parameters id ulong The snowflake identifier for the event. Returns SocketGuildEvent An event that is associated with the specified id; null if none is found. GetEventAsync(ulong, RequestOptions) Gets an event within this guild. public Task<RestGuildEvent> GetEventAsync(ulong id, RequestOptions options = null) Parameters id ulong The snowflake identifier for the event. options RequestOptions The options to be used when sending the request. Returns Task<RestGuildEvent> A task that represents the asynchronous get operation. GetEventsAsync(RequestOptions) Gets all active events within this guild. public Task<IReadOnlyCollection<RestGuildEvent>> GetEventsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestGuildEvent>> A task that represents the asynchronous get operation. GetForumChannel(ulong) Gets a forum channel in this guild. public SocketForumChannel GetForumChannel(ulong id) Parameters id ulong The snowflake identifier for the forum channel. Returns SocketForumChannel A forum channel associated with the specified id; null if none is found. GetIntegrationsAsync(RequestOptions) public Task<IReadOnlyCollection<RestIntegration>> GetIntegrationsAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task<IReadOnlyCollection<RestIntegration>> GetInvitesAsync(RequestOptions) Gets a collection of all invites in this guild. public Task<IReadOnlyCollection<RestInviteMetadata>> GetInvitesAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestInviteMetadata>> A task that represents the asynchronous get operation. The task result contains a read-only collection of invite metadata, each representing information for an invite found within this guild. GetMediaChannel(ulong) Gets a media channel in this guild. public SocketMediaChannel GetMediaChannel(ulong id) Parameters id ulong The snowflake identifier for the stage channel. Returns SocketMediaChannel A stage channel associated with the specified id; null if none is found. GetOnboardingAsync(RequestOptions) Gets the onboarding object configured for the guild. public Task<SocketGuildOnboarding> GetOnboardingAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task<SocketGuildOnboarding> A task that represents the asynchronous creation operation. The task result contains the created IGuildOnboarding. GetRole(ulong) Gets a role in this guild. public SocketRole GetRole(ulong id) Parameters id ulong The snowflake identifier for the role. Returns SocketRole A role that is associated with the specified id; null if none is found. GetStageChannel(ulong) Gets a stage channel in this guild. public SocketStageChannel GetStageChannel(ulong id) Parameters id ulong The snowflake identifier for the stage channel. Returns SocketStageChannel A stage channel associated with the specified id; null if none is found. GetSticker(ulong) Gets a specific sticker within this guild. public SocketCustomSticker GetSticker(ulong id) Parameters id ulong The id of the sticker to get. Returns SocketCustomSticker A sticker, if none is found then null. GetStickerAsync(ulong, CacheMode, RequestOptions) Gets a specific sticker within this guild. public ValueTask<SocketCustomSticker> GetStickerAsync(ulong id, CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters id ulong The id of the sticker to get. mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns ValueTask<SocketCustomSticker> A task that represents the asynchronous get operation. The task result contains the sticker found with the specified id; null if none is found. GetStickersAsync(CacheMode, RequestOptions) Gets a collection of all stickers within this guild. public ValueTask<IReadOnlyCollection<SocketCustomSticker>> GetStickersAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters mode CacheMode The CacheMode that determines whether the object should be fetched from cache. options RequestOptions The options to be used when sending the request. Returns ValueTask<IReadOnlyCollection<SocketCustomSticker>> A task that represents the asynchronous get operation. The task result contains a read-only collection of stickers found within the guild. GetTextChannel(ulong) Gets a text channel in this guild. public SocketTextChannel GetTextChannel(ulong id) Parameters id ulong The snowflake identifier for the text channel. Returns SocketTextChannel A text channel associated with the specified id; null if none is found. GetThreadChannel(ulong) Gets a thread in this guild. public SocketThreadChannel GetThreadChannel(ulong id) Parameters id ulong The snowflake identifier for the thread. Returns SocketThreadChannel A thread channel associated with the specified id; null if none is found. GetUser(ulong) Gets a user from this guild. public SocketGuildUser GetUser(ulong id) Parameters id ulong The snowflake identifier of the user. Returns SocketGuildUser A guild user associated with the specified id; null if none is found. Remarks This method retrieves a user found within this guild. note This may return null in the WebSocket implementation due to incomplete user collection in large guilds. GetUsersAsync(RequestOptions) Gets a collection of all users in this guild. public IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> GetUsersAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IGuildUser>> A task that represents the asynchronous get operation. The task result contains a collection of guild users found within this guild. Remarks This method retrieves all users found within this guild through REST. Users returned by this method are not cached. GetVanityInviteAsync(RequestOptions) Gets the vanity invite URL of this guild. public Task<RestInviteMetadata> GetVanityInviteAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<RestInviteMetadata> A task that represents the asynchronous get operation. The task result contains the partial metadata of the vanity invite found within this guild; null if none is found. GetVoiceChannel(ulong) Gets a voice channel in this guild. public SocketVoiceChannel GetVoiceChannel(ulong id) Parameters id ulong The snowflake identifier for the voice channel. Returns SocketVoiceChannel A voice channel associated with the specified id; null if none is found. GetVoiceRegionsAsync(RequestOptions) Gets a collection of all the voice regions this guild can access. public Task<IReadOnlyCollection<RestVoiceRegion>> GetVoiceRegionsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestVoiceRegion>> A task that represents the asynchronous get operation. The task result contains a read-only collection of voice regions the guild can access. GetWebhookAsync(ulong, RequestOptions) Gets a webhook found within this guild. public Task<RestWebhook> GetWebhookAsync(ulong id, RequestOptions options = null) Parameters id ulong The identifier for the webhook. options RequestOptions The options to be used when sending the request. Returns Task<RestWebhook> A task that represents the asynchronous get operation. The task result contains the webhook with the specified id; null if none is found. GetWebhooksAsync(RequestOptions) Gets a collection of all webhook from this guild. public Task<IReadOnlyCollection<RestWebhook>> GetWebhooksAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestWebhook>> A task that represents the asynchronous get operation. The task result contains a read-only collection of webhooks found within the guild. GetWelcomeScreenAsync(RequestOptions) Gets the welcome screen of the guild. Returns null if the welcome channel is not set. public Task<WelcomeScreen> GetWelcomeScreenAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task<WelcomeScreen> A task that represents the asynchronous creation operation. The task result contains a WelcomeScreen. LeaveAsync(RequestOptions) Leaves this guild. public Task LeaveAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous leave operation. Remarks This method will make the currently logged-in user leave the guild. note If the user is the owner of this guild, use DeleteAsync(RequestOptions) instead. ModifyAsync(Action<GuildProperties>, RequestOptions) Modifies this guild. public Task ModifyAsync(Action<GuildProperties> func, RequestOptions options = null) Parameters func Action<GuildProperties> The delegate containing the properties to modify the guild with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Exceptions ArgumentNullException func is null. ModifyEmoteAsync(GuildEmote, Action<EmoteProperties>, RequestOptions) Modifies an existing GuildEmote in this guild. public Task<GuildEmote> ModifyEmoteAsync(GuildEmote emote, Action<EmoteProperties> func, RequestOptions options = null) Parameters emote GuildEmote The emote to be modified. func Action<EmoteProperties> The delegate containing the properties to modify the emote with. options RequestOptions The options to be used when sending the request. Returns Task<GuildEmote> A task that represents the asynchronous modification operation. The task result contains the modified emote. Exceptions ArgumentNullException func is null. ModifyIncidentActionsAsync(Action<GuildIncidentsDataProperties>, RequestOptions) Modifies the incident actions of the guild. public Task<GuildIncidentsData> ModifyIncidentActionsAsync(Action<GuildIncidentsDataProperties> props, RequestOptions options = null) Parameters props Action<GuildIncidentsDataProperties> options RequestOptions Returns Task<GuildIncidentsData> A task that represents the asynchronous creation operation. The task result contains the modified IncidentsData. ModifyOnboardingAsync(Action<GuildOnboardingProperties>, RequestOptions) Modifies the onboarding object configured for the guild. public Task<SocketGuildOnboarding> ModifyOnboardingAsync(Action<GuildOnboardingProperties> props, RequestOptions options = null) Parameters props Action<GuildOnboardingProperties> options RequestOptions Returns Task<SocketGuildOnboarding> A task that represents the asynchronous creation operation. The task result contains the modified IGuildOnboarding. ModifyWelcomeScreenAsync(bool, WelcomeScreenChannelProperties[], string, RequestOptions) Modifies the welcome screen of the guild. Returns null if welcome screen is removed. public Task<WelcomeScreen> ModifyWelcomeScreenAsync(bool enabled, WelcomeScreenChannelProperties[] channels, string description = null, RequestOptions options = null) Parameters enabled bool channels WelcomeScreenChannelProperties[] description string options RequestOptions Returns Task<WelcomeScreen> A task that represents the asynchronous creation operation. The task result contains a WelcomeScreen. ModifyWidgetAsync(Action<GuildWidgetProperties>, RequestOptions) Modifies this guild's widget. public Task ModifyWidgetAsync(Action<GuildWidgetProperties> func, RequestOptions options = null) Parameters func Action<GuildWidgetProperties> The delegate containing the properties to modify the guild widget with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Exceptions ArgumentNullException func is null. MoveAsync(IGuildUser, IVoiceChannel) Moves the user to the voice channel. public Task MoveAsync(IGuildUser user, IVoiceChannel targetChannel) Parameters user IGuildUser The user to move. targetChannel IVoiceChannel the channel where the user gets moved to. Returns Task A task that represents the asynchronous operation for moving a user. PruneUsersAsync(int, bool, RequestOptions, IEnumerable<ulong>) Prunes inactive users. public Task<int> PruneUsersAsync(int days = 30, bool simulate = false, RequestOptions options = null, IEnumerable<ulong> includeRoleIds = null) Parameters days int The number of days required for the users to be kicked. simulate bool Whether this prune action is a simulation. options RequestOptions The options to be used when sending the request. includeRoleIds IEnumerable<ulong> An array of role IDs to be included in the prune of users who do not have any additional roles. Returns Task<int> A task that represents the asynchronous prune operation. The task result contains the number of users to be or has been removed from this guild. Remarks This method removes all users that have not logged on in the provided number of days. If simulate is true, this method will only return the number of users that would be removed without kicking the users. PurgeUserCache() Purges this guild's user cache. public void PurgeUserCache() PurgeUserCache(Func<SocketGuildUser, bool>) Purges this guild's user cache. public void PurgeUserCache(Func<SocketGuildUser, bool> predicate) Parameters predicate Func<SocketGuildUser, bool> The predicate used to select which users to clear. RemoveBanAsync(IUser, RequestOptions) Unbans the user if they are currently banned. public Task RemoveBanAsync(IUser user, RequestOptions options = null) Parameters user IUser The user to be unbanned. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation for the ban. RemoveBanAsync(ulong, RequestOptions) Unbans the user if they are currently banned. public Task RemoveBanAsync(ulong userId, RequestOptions options = null) Parameters userId ulong The snowflake identifier of the user to be unbanned. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation for the ban. ReorderChannelsAsync(IEnumerable<ReorderChannelProperties>, RequestOptions) Bulk-modifies the order of channels in this guild. public Task ReorderChannelsAsync(IEnumerable<ReorderChannelProperties> args, RequestOptions options = null) Parameters args IEnumerable<ReorderChannelProperties> The properties used to modify the channel positions with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous reorder operation. ReorderRolesAsync(IEnumerable<ReorderRoleProperties>, RequestOptions) Bulk-modifies the order of roles in this guild. public Task ReorderRolesAsync(IEnumerable<ReorderRoleProperties> args, RequestOptions options = null) Parameters args IEnumerable<ReorderRoleProperties> The properties used to modify the role positions with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous reorder operation. SearchUsersAsync(string, int, RequestOptions) Gets a collection of users in this guild that the name or nickname starts with the provided string at query. public Task<IReadOnlyCollection<RestGuildUser>> SearchUsersAsync(string query, int limit = 1000, RequestOptions options = null) Parameters query string The partial name or nickname to search. limit int The maximum number of users to be gotten. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestGuildUser>> A task that represents the asynchronous get operation. The task result contains a collection of guild users that the name or nickname starts with the provided string at query. Remarks The limit can not be higher than MaxUsersPerBatch. ToString() Gets the name of the guild. public override string ToString() Returns string A string that resolves to Name."
  },
  "api/Discord.WebSocket.SocketGuildChannel.html": {
    "href": "api/Discord.WebSocket.SocketGuildChannel.html",
    "title": "Class SocketGuildChannel | Discord.Net Documentation",
    "keywords": "Class SocketGuildChannel Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a WebSocket-based guild channel. public class SocketGuildChannel : SocketChannel, IGuildChannel, IChannel, ISnowflakeEntity, IEntity<ulong>, IDeletable Inheritance object SocketEntity<ulong> SocketChannel SocketGuildChannel Implements IGuildChannel IChannel ISnowflakeEntity IEntity<ulong> IDeletable Derived SocketCategoryChannel SocketForumChannel SocketTextChannel Inherited Members SocketChannel.CreatedAt SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties Flags Gets the flags related to this channel. public ChannelFlags Flags { get; } Property Value ChannelFlags A channel's flags, if any is associated. Remarks This value is determined by bitwise OR-ing ChannelFlags values together. Guild Gets the guild associated with this channel. public SocketGuild Guild { get; } Property Value SocketGuild A guild object that this channel belongs to. Name public string Name { get; } Property Value string PermissionOverwrites Gets a collection of permission overwrites for this channel. public virtual IReadOnlyCollection<Overwrite> PermissionOverwrites { get; } Property Value IReadOnlyCollection<Overwrite> A collection of overwrites associated with this channel. Position Gets the position of this channel. public int Position { get; } Property Value int An int representing the position of this channel in the guild's channel list relative to others of the same type. Users Gets a collection of users that are able to view the channel. public virtual IReadOnlyCollection<SocketGuildUser> Users { get; } Property Value IReadOnlyCollection<SocketGuildUser> A read-only collection of users that can access the channel (i.e. the users seen in the user list). Remarks If this channel is a voice channel, use ConnectedUsers to retrieve a collection of users who are currently connected to this channel. Methods AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions) Adds or updates the permission overwrite for the given role. public virtual Task AddPermissionOverwriteAsync(IRole role, OverwritePermissions permissions, RequestOptions options = null) Parameters role IRole The role to add the overwrite to. permissions OverwritePermissions The overwrite to add to the role. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous permission operation for adding the specified permissions to the channel. AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions) Adds or updates the permission overwrite for the given user. public virtual Task AddPermissionOverwriteAsync(IUser user, OverwritePermissions permissions, RequestOptions options = null) Parameters user IUser The user to add the overwrite to. permissions OverwritePermissions The overwrite to add to the user. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous permission operation for adding the specified permissions to the channel. DeleteAsync(RequestOptions) Deletes this object and all its children. public Task DeleteAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task GetPermissionOverwrite(IRole) Gets the permission overwrite for a specific role. public virtual OverwritePermissions? GetPermissionOverwrite(IRole role) Parameters role IRole The role to get the overwrite from. Returns OverwritePermissions? An overwrite object for the targeted role; null if none is set. GetPermissionOverwrite(IUser) Gets the permission overwrite for a specific user. public virtual OverwritePermissions? GetPermissionOverwrite(IUser user) Parameters user IUser The user to get the overwrite from. Returns OverwritePermissions? An overwrite object for the targeted user; null if none is set. GetUser(ulong) public virtual SocketGuildUser GetUser(ulong id) Parameters id ulong Returns SocketGuildUser ModifyAsync(Action<GuildChannelProperties>, RequestOptions) Modifies this guild channel. public Task ModifyAsync(Action<GuildChannelProperties> func, RequestOptions options = null) Parameters func Action<GuildChannelProperties> The delegate containing the properties to modify the channel with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies the current guild channel with the specified properties. To see an example of this method and what properties are available, please refer to GuildChannelProperties. RemovePermissionOverwriteAsync(IRole, RequestOptions) Removes the permission overwrite for the given role, if one exists. public virtual Task RemovePermissionOverwriteAsync(IRole role, RequestOptions options = null) Parameters role IRole The role to remove the overwrite from. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel. RemovePermissionOverwriteAsync(IUser, RequestOptions) Removes the permission overwrite for the given user, if one exists. public virtual Task RemovePermissionOverwriteAsync(IUser user, RequestOptions options = null) Parameters user IUser The user to remove the overwrite from. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel. ToString() Gets the name of the channel. public override string ToString() Returns string A string that resolves to Name."
  },
  "api/Discord.WebSocket.SocketGuildEvent.html": {
    "href": "api/Discord.WebSocket.SocketGuildEvent.html",
    "title": "Class SocketGuildEvent | Discord.Net Documentation",
    "keywords": "Class SocketGuildEvent Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a WebSocket-based guild event. public class SocketGuildEvent : SocketEntity<ulong>, IGuildScheduledEvent, IEntity<ulong> Inheritance object SocketEntity<ulong> SocketGuildEvent Implements IGuildScheduledEvent IEntity<ulong> Inherited Members SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Channel Gets the channel of the event. public SocketGuildChannel Channel { get; } Property Value SocketGuildChannel CoverImageId Gets the banner asset id of the event. public string CoverImageId { get; } Property Value string Creator Gets the user who created the event. public SocketGuildUser Creator { get; } Property Value SocketGuildUser Description Gets the description of the event. public string Description { get; } Property Value string Remarks This field is null when the event doesn't have a description. EndTime Gets the optional end time of the event. public DateTimeOffset? EndTime { get; } Property Value DateTimeOffset? EntityId Gets the optional entity id of the event. The \"entity\" of the event can be a stage instance event as is separate from ChannelId. public ulong? EntityId { get; } Property Value ulong? Guild Gets the guild of the event. public SocketGuild Guild { get; } Property Value SocketGuild GuildId Gets the id of the guild this event is scheduled in. public ulong GuildId { get; } Property Value ulong Location Gets the location of the event if the Type is external. public string Location { get; } Property Value string Name Gets the name of the event. public string Name { get; } Property Value string PrivacyLevel Gets the privacy level of the event. public GuildScheduledEventPrivacyLevel PrivacyLevel { get; } Property Value GuildScheduledEventPrivacyLevel StartTime Gets the start time of the event. public DateTimeOffset StartTime { get; } Property Value DateTimeOffset Status Gets the status of the event. public GuildScheduledEventStatus Status { get; } Property Value GuildScheduledEventStatus Type Gets the type of the event. public GuildScheduledEventType Type { get; } Property Value GuildScheduledEventType UserCount Gets the user count of the event. public int? UserCount { get; } Property Value int? Methods DeleteAsync(RequestOptions) Deletes the current event. public Task DeleteAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous delete operation. EndAsync(RequestOptions) Ends or cancels the event. public Task EndAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous end operation. GetCoverImageUrl(ImageFormat, ushort) Gets this events banner image url. public string GetCoverImageUrl(ImageFormat format = ImageFormat.Auto, ushort size = 1024) Parameters format ImageFormat The format to return. size ushort The size of the image to return in. This can be any power of two between 16 and 2048. Returns string The cover images url. GetUsersAsync(RequestOptions) Gets a collection of N users interested in the event. public IAsyncEnumerable<IReadOnlyCollection<RestUser>> GetUsersAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestUser>> Paged collection of users. Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the individual messages as a collection. This method will attempt to fetch all users that are interested in the event. The library will attempt to split up the requests according to and MaxGuildEventUsersPerBatch. In other words, if there are 300 users, and the MaxGuildEventUsersPerBatch constant is 100, the request will be split into 3 individual requests; thus returning 3 individual asynchronous responses, hence the need of flattening. GetUsersAsync(int, RequestOptions) Gets a collection of users that are interested in this event. public Task<IReadOnlyCollection<RestUser>> GetUsersAsync(int limit = 100, RequestOptions options = null) Parameters limit int The amount of users to fetch. options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestUser>> A read-only collection of users. GetUsersAsync(ulong, Direction, int, RequestOptions) Gets a collection of N users interested in the event. public IAsyncEnumerable<IReadOnlyCollection<RestUser>> GetUsersAsync(ulong fromUserId, Direction dir, int limit = 100, RequestOptions options = null) Parameters fromUserId ulong The ID of the starting user to get the users from. dir Direction The direction of the users to be gotten from. limit int The numbers of users to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<RestUser>> Paged collection of users. Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the individual users as a collection. warning Do not fetch too many users at once! This may cause unwanted preemptive rate limit or even actual rate limit, causing your bot to freeze! This method will attempt to fetch the number of users specified under limit around the user fromUserId depending on the dir. The library will attempt to split up the requests according to your limit and MaxGuildEventUsersPerBatch. In other words, should the user request 500 users, and the MaxGuildEventUsersPerBatch constant is 100, the request will be split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need of flattening. ModifyAsync(Action<GuildScheduledEventsProperties>, RequestOptions) Modifies the guild event. public Task ModifyAsync(Action<GuildScheduledEventsProperties> func, RequestOptions options = null) Parameters func Action<GuildScheduledEventsProperties> The delegate containing the properties to modify the event with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. StartAsync(RequestOptions) Starts the event. public Task StartAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous start operation."
  },
  "api/Discord.WebSocket.SocketGuildInfo.html": {
    "href": "api/Discord.WebSocket.SocketGuildInfo.html",
    "title": "Class SocketGuildInfo | Discord.Net Documentation",
    "keywords": "Class SocketGuildInfo Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents information for a guild. public class SocketGuildInfo Inheritance object SocketGuildInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AfkChannelId Gets the ID of the AFK voice channel for this guild. public ulong? AfkChannelId { get; } Property Value ulong? A ulong representing the snowflake identifier of the AFK voice channel; null if none is set. Remarks null if the value was not updated in this entry. AfkTimeout Gets the amount of time (in seconds) a user must be inactive in a voice channel for until they are automatically moved to the AFK voice channel. public int? AfkTimeout { get; } Property Value int? An int representing the amount of time in seconds for a user to be marked as inactive and moved into the AFK voice channel. Remarks null if the value was not updated in this entry. ApplicationId Gets the application ID of the guild creator if it is bot-created. public ulong? ApplicationId { get; } Property Value ulong? A ulong representing the snowflake identifier of the application ID that created this guild, or null if it was not bot-created. Remarks null if the value was not updated in this entry. BannerId Gets the identifier for this guilds banner image. public string BannerId { get; } Property Value string An identifier for the banner image; null if none is set. Remarks null if the value was not updated in this entry. DefaultMessageNotifications Gets the default message notifications for users who haven't explicitly set their notification settings. public DefaultMessageNotifications? DefaultMessageNotifications { get; } Property Value DefaultMessageNotifications? Remarks null if the value was not updated in this entry. Description Gets the description for the guild. public string Description { get; } Property Value string The description for the guild; null if none is set. Remarks null if the value was not updated in this entry. DiscoverySplashId Gets the ID of this guild's discovery splash image. public string DiscoverySplashId { get; } Property Value string An identifier for the discovery splash image; null if none is set. Remarks null if the value was not updated in this entry. EmbedChannelId Gets the ID of the channel assigned to the widget of this guild. public ulong? EmbedChannelId { get; } Property Value ulong? A ulong representing the snowflake identifier of the channel assigned to the widget found within the widget settings of this guild; null if none is set. Remarks null if the value was not updated in this entry. ExplicitContentFilter Gets the level of content filtering applied to user's content in a Guild. public ExplicitContentFilterLevel? ExplicitContentFilter { get; } Property Value ExplicitContentFilterLevel? The level of explicit content filtering. Remarks null if the value was not updated in this entry. IconHash Gets the ID of this guild's icon. public string IconHash { get; } Property Value string An identifier for the splash image; null if none is set. Remarks null if the value was not updated in this entry. IsBoostProgressBarEnabled Gets whether the guild has the boost progress bar enabled. public bool? IsBoostProgressBarEnabled { get; } Property Value bool? true if the boost progress bar is enabled; otherwise false. Remarks null if the value was not updated in this entry. IsEmbeddable Gets a value that indicates whether this guild has the widget enabled. public bool? IsEmbeddable { get; } Property Value bool? true if this guild has a widget enabled; otherwise false. Remarks null if the value was not updated in this entry. MfaLevel Gets the level of Multi-Factor Authentication requirements a user must fulfill before being allowed to perform administrative actions in this guild. public MfaLevel? MfaLevel { get; } Property Value MfaLevel? The level of MFA requirement. Remarks null if the value was not updated in this entry. Name Gets the name of this guild. public string Name { get; } Property Value string A string containing the name of this guild. Remarks null if the value was not updated in this entry. NsfwLevel Gets the NSFW level of this guild. public NsfwLevel? NsfwLevel { get; } Property Value NsfwLevel? The NSFW level of this guild. Remarks null if the value was not updated in this entry. OwnerId Gets the ID of the user that owns this guild. public ulong? OwnerId { get; } Property Value ulong? A ulong representing the snowflake identifier of the user that owns this guild. Remarks null if the value was not updated in this entry. PreferredLocale Gets the preferred locale of this guild in IETF BCP 47 language tag format. public string PreferredLocale { get; } Property Value string The preferred locale of the guild in IETF BCP 47 language tag format. Remarks null if the value was not updated in this entry. PublicUpdatesChannelId Gets the ID of the channel where admins and moderators of Community guilds receive notices from Discord. public ulong? PublicUpdatesChannelId { get; } Property Value ulong? A ulong representing the snowflake identifier of the channel where admins and moderators of Community guilds receive notices from Discord; null if none is set. Remarks null if the value was not updated in this entry. RegionId Gets the ID of the region hosting this guild's voice channels. public string RegionId { get; } Property Value string A string containing the identifier for the voice region that this guild uses (e.g. eu-central). Remarks null if the value was not updated in this entry. RulesChannelId Gets the ID of the channel with the rules. public ulong? RulesChannelId { get; } Property Value ulong? A ulong representing the snowflake identifier of the channel that contains the rules; null if none is set. Remarks null if the value was not updated in this entry. SplashId Gets the ID of this guild's splash image. public string SplashId { get; } Property Value string An identifier for the splash image; null if none is set. Remarks null if the value was not updated in this entry. SystemChannelFlags Gets the flags for the types of system channel messages that are disabled. public SystemChannelMessageDeny? SystemChannelFlags { get; } Property Value SystemChannelMessageDeny? The flags for the types of system channel messages that are disabled. Remarks null if the value was not updated in this entry. SystemChannelId Gets the ID of the channel where randomized welcome messages are sent. public ulong? SystemChannelId { get; } Property Value ulong? A ulong representing the snowflake identifier of the system channel where randomized welcome messages are sent; null if none is set. Remarks null if the value was not updated in this entry. VanityURLCode Gets the code for this guild's vanity invite URL. public string VanityURLCode { get; } Property Value string A string containing the vanity invite code for this guild; null if none is set. Remarks null if the value was not updated in this entry. VerificationLevel Gets the level of requirements a user must fulfill before being allowed to post messages in this guild. public VerificationLevel? VerificationLevel { get; } Property Value VerificationLevel? The level of requirements. Remarks null if the value was not updated in this entry."
  },
  "api/Discord.WebSocket.SocketGuildOnboarding.html": {
    "href": "api/Discord.WebSocket.SocketGuildOnboarding.html",
    "title": "Class SocketGuildOnboarding | Discord.Net Documentation",
    "keywords": "Class SocketGuildOnboarding Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. public class SocketGuildOnboarding : IGuildOnboarding Inheritance object SocketGuildOnboarding Implements IGuildOnboarding Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods GuildOnboardingExtensions.ToProperties(IGuildOnboarding) Properties DefaultChannelIds Gets IDs of channels that members get opted into automatically. public IReadOnlyCollection<ulong> DefaultChannelIds { get; } Property Value IReadOnlyCollection<ulong> DefaultChannels Gets channels members get opted in automatically. public IReadOnlyCollection<SocketGuildChannel> DefaultChannels { get; } Property Value IReadOnlyCollection<SocketGuildChannel> Guild Gets the guild this onboarding is part of. public SocketGuild Guild { get; } Property Value SocketGuild GuildId Gets the ID of the guild this onboarding is part of. public ulong GuildId { get; } Property Value ulong IsBelowRequirements Gets whether the server does not meet requirements to enable guild onboarding. public bool IsBelowRequirements { get; } Property Value bool IsEnabled Gets whether onboarding is enabled in the guild. public bool IsEnabled { get; } Property Value bool Mode Gets the current mode of onboarding. public GuildOnboardingMode Mode { get; } Property Value GuildOnboardingMode Prompts Gets prompts shown during onboarding and in customize community. public IReadOnlyCollection<SocketGuildOnboardingPrompt> Prompts { get; } Property Value IReadOnlyCollection<SocketGuildOnboardingPrompt> Methods ModifyAsync(Action<GuildOnboardingProperties>, RequestOptions) Modifies the onboarding object. public Task ModifyAsync(Action<GuildOnboardingProperties> props, RequestOptions options = null) Parameters props Action<GuildOnboardingProperties> options RequestOptions Returns Task"
  },
  "api/Discord.WebSocket.SocketGuildOnboardingPrompt.html": {
    "href": "api/Discord.WebSocket.SocketGuildOnboardingPrompt.html",
    "title": "Class SocketGuildOnboardingPrompt | Discord.Net Documentation",
    "keywords": "Class SocketGuildOnboardingPrompt Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents the guild onboarding prompt. public class SocketGuildOnboardingPrompt : SocketEntity<ulong>, IGuildOnboardingPrompt, ISnowflakeEntity, IEntity<ulong> Inheritance object SocketEntity<ulong> SocketGuildOnboardingPrompt Implements IGuildOnboardingPrompt ISnowflakeEntity IEntity<ulong> Inherited Members SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods GuildOnboardingExtensions.ToProperties(IGuildOnboardingPrompt) Properties CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. IsInOnboarding Indicates whether the prompt is present in the onboarding flow. If false, the prompt will only appear in the Channels and Roles tab. public bool IsInOnboarding { get; } Property Value bool IsRequired Indicates whether the prompt is required before a user completes the onboarding flow. public bool IsRequired { get; } Property Value bool IsSingleSelect Indicates whether users are limited to selecting one option for the prompt. public bool IsSingleSelect { get; } Property Value bool Options Gets options available within the prompt. public IReadOnlyCollection<SocketGuildOnboardingPromptOption> Options { get; } Property Value IReadOnlyCollection<SocketGuildOnboardingPromptOption> Title Gets the title of the prompt. public string Title { get; } Property Value string Type Gets the type of the prompt. public GuildOnboardingPromptType Type { get; } Property Value GuildOnboardingPromptType"
  },
  "api/Discord.WebSocket.SocketGuildOnboardingPromptOption.html": {
    "href": "api/Discord.WebSocket.SocketGuildOnboardingPromptOption.html",
    "title": "Class SocketGuildOnboardingPromptOption | Discord.Net Documentation",
    "keywords": "Class SocketGuildOnboardingPromptOption Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents the guild onboarding prompt option. public class SocketGuildOnboardingPromptOption : SocketEntity<ulong>, IGuildOnboardingPromptOption, ISnowflakeEntity, IEntity<ulong> Inheritance object SocketEntity<ulong> SocketGuildOnboardingPromptOption Implements IGuildOnboardingPromptOption ISnowflakeEntity IEntity<ulong> Inherited Members SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods GuildOnboardingExtensions.ToProperties(IGuildOnboardingPromptOption) Properties ChannelIds Gets IDs of channels a member is added to when the option is selected. public IReadOnlyCollection<ulong> ChannelIds { get; } Property Value IReadOnlyCollection<ulong> Channels Gets channels a member is added to when the option is selected. public IReadOnlyCollection<SocketGuildChannel> Channels { get; } Property Value IReadOnlyCollection<SocketGuildChannel> CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. Description Gets the description of the option. null if none is set. public string Description { get; } Property Value string Emoji Gets the emoji of the option. null if none is set. public IEmote Emoji { get; } Property Value IEmote RoleIds Gets IDs of roles assigned to a member when the option is selected. public IReadOnlyCollection<ulong> RoleIds { get; } Property Value IReadOnlyCollection<ulong> Roles Gets roles assigned to a member when the option is selected. public IReadOnlyCollection<SocketRole> Roles { get; } Property Value IReadOnlyCollection<SocketRole> Title Gets the title of the option. public string Title { get; } Property Value string"
  },
  "api/Discord.WebSocket.SocketGuildUpdateAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketGuildUpdateAuditLogData.html",
    "title": "Class SocketGuildUpdateAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketGuildUpdateAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a guild update. public class SocketGuildUpdateAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketGuildUpdateAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After Gets the guild information after the changes. public SocketGuildInfo After { get; } Property Value SocketGuildInfo An information object containing the guild information after the changes were made. Before Gets the guild information before the changes. public SocketGuildInfo Before { get; } Property Value SocketGuildInfo An information object containing the original guild information before the changes were made."
  },
  "api/Discord.WebSocket.SocketGuildUser.html": {
    "href": "api/Discord.WebSocket.SocketGuildUser.html",
    "title": "Class SocketGuildUser | Discord.Net Documentation",
    "keywords": "Class SocketGuildUser Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a WebSocket-based guild user. public class SocketGuildUser : SocketUser, IGuildUser, IUser, ISnowflakeEntity, IEntity<ulong>, IMentionable, IPresence, IVoiceState Inheritance object SocketEntity<ulong> SocketUser SocketGuildUser Implements IGuildUser IUser ISnowflakeEntity IEntity<ulong> IMentionable IPresence IVoiceState Inherited Members SocketUser.PublicFlags SocketUser.CreatedAt SocketUser.Discriminator SocketUser.Mention SocketUser.Status SocketUser.ActiveClients SocketUser.Activities SocketUser.AvatarDecorationHash SocketUser.AvatarDecorationSkuId SocketUser.MutualGuilds SocketUser.CreateDMChannelAsync(RequestOptions) SocketUser.GetAvatarUrl(ImageFormat, ushort) SocketUser.GetDefaultAvatarUrl() SocketUser.GetAvatarDecorationUrl() SocketUser.ToString() SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods UserExtensions.BanAsync(IGuildUser, int, string, RequestOptions) UserExtensions.SendFileAsync(IUser, FileAttachment, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, Stream, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFilesAsync(IUser, IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendMessageAsync(IUser, string, bool, Embed, RequestOptions, AllowedMentions, MessageComponent, Embed[]) Properties AudioStream public AudioInStream AudioStream { get; } Property Value AudioInStream AvatarId Gets the identifier of this user's avatar. public override string AvatarId { get; } Property Value string DiscriminatorValue Gets the per-username unique ID for this user. This will return 0 for users who have migrated to new username system. public override ushort DiscriminatorValue { get; } Property Value ushort DisplayAvatarId Gets the displayed avatar for this user. public string DisplayAvatarId { get; } Property Value string The users displayed avatar hash. If the user does not have a guild avatar, this will be the regular avatar. If the user also does not have a regular avatar, this will be null. DisplayName Gets the displayed name for this user. public string DisplayName { get; } Property Value string A string representing the display name of the user; If the nickname is null, this will be the username. Flags Gets the public flags for this guild member. public GuildUserFlags Flags { get; } Property Value GuildUserFlags GlobalName Gets the user's display name, if it is set. For bots, this will get the application name. public override string GlobalName { get; } Property Value string Remarks This property will be null if user has no display name set. Guild Gets the guild the user is in. public SocketGuild Guild { get; } Property Value SocketGuild GuildAvatarId Gets the guild specific avatar for this user. public string GuildAvatarId { get; } Property Value string The users guild avatar hash if they have one; otherwise null. GuildPermissions Gets the guild-level permissions for this user. public GuildPermissions GuildPermissions { get; } Property Value GuildPermissions A GuildPermissions structure for this user, representing what permissions this user has in the guild. Hierarchy Returns the position of the user within the role hierarchy. public int Hierarchy { get; } Property Value int Remarks The returned value equal to the position of the highest role the user has, or MaxValue if user is the server owner. IsBot Gets a value that indicates whether this user is identified as a bot. public override bool IsBot { get; } Property Value bool true if the user is a bot application; otherwise false. Remarks This property retrieves a value that indicates whether this user is a registered bot application (indicated by the blue BOT tag within the official chat client). IsDeafened Gets a value that indicates whether this user is deafened by the guild. public bool IsDeafened { get; } Property Value bool true if the user is deafened (i.e. not permitted to listen to or speak to others) by the guild; otherwise false. IsMuted Gets a value that indicates whether this user is muted (i.e. not permitted to speak via voice) by the guild. public bool IsMuted { get; } Property Value bool true if this user is muted by the guild; otherwise false. IsPending Whether the user has passed the guild's Membership Screening requirements. public bool? IsPending { get; } Property Value bool? IsSelfDeafened Gets a value that indicates whether this user has marked themselves as deafened. public bool IsSelfDeafened { get; } Property Value bool true if this user has deafened themselves (i.e. not permitted to listen to or speak to others); otherwise false. IsSelfMuted Gets a value that indicates whether this user has marked themselves as muted (i.e. not permitted to speak via voice). public bool IsSelfMuted { get; } Property Value bool true if this user has muted themselves; otherwise false. IsStreaming Gets a value that indicates if this user is streaming in a voice channel. public bool IsStreaming { get; } Property Value bool true if the user is streaming; otherwise false. IsSuppressed Gets a value that indicates whether the user is muted by the current user. public bool IsSuppressed { get; } Property Value bool true if the guild is temporarily blocking audio to/from this user; otherwise false. IsVideoing Gets a value that indicates if the user is videoing in a voice channel. public bool IsVideoing { get; } Property Value bool true if the user has their camera turned on; otherwise false. IsWebhook Gets a value that indicates whether this user is a webhook user. public override bool IsWebhook { get; } Property Value bool true if the user is a webhook; otherwise false. JoinedAt Gets when this user joined the guild. public DateTimeOffset? JoinedAt { get; } Property Value DateTimeOffset? A DateTimeOffset representing the time of which the user has joined the guild; null when it cannot be obtained. Nickname Gets the nickname for this user. public string Nickname { get; } Property Value string A string representing the nickname of the user; null if none is set. PremiumSince Gets the date and time for when this user's guild boost began. public DateTimeOffset? PremiumSince { get; } Property Value DateTimeOffset? A DateTimeOffset for when the user began boosting this guild; null if they are not boosting the guild. RequestToSpeakTimestamp Gets the time on which the user requested to speak. public DateTimeOffset? RequestToSpeakTimestamp { get; } Property Value DateTimeOffset? Roles Returns a collection of roles that the user possesses. public IReadOnlyCollection<SocketRole> Roles { get; } Property Value IReadOnlyCollection<SocketRole> TimedOutUntil Gets the date and time that indicates if and for how long a user has been timed out. public DateTimeOffset? TimedOutUntil { get; } Property Value DateTimeOffset? A DateTimeOffset indicating how long the user will be timed out for. Remarks null or a timestamp in the past if the user is not timed out. Username Gets the username for this user. public override string Username { get; } Property Value string VoiceChannel Returns the voice channel the user is in, or null if none. public SocketVoiceChannel VoiceChannel { get; } Property Value SocketVoiceChannel VoiceSessionId Gets the unique identifier for this user's voice session. public string VoiceSessionId { get; } Property Value string VoiceState Gets the voice connection status of the user if any. public SocketVoiceState? VoiceState { get; } Property Value SocketVoiceState? A SocketVoiceState representing the user's voice status; null if the user is not connected to a voice channel. Methods AddRoleAsync(IRole, RequestOptions) Adds the specified role to this user in the guild. public Task AddRoleAsync(IRole role, RequestOptions options = null) Parameters role IRole The role to be added to the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. AddRoleAsync(ulong, RequestOptions) Adds the specified role to this user in the guild. public Task AddRoleAsync(ulong roleId, RequestOptions options = null) Parameters roleId ulong The role to be added to the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. AddRolesAsync(IEnumerable<IRole>, RequestOptions) Adds the specified roles to this user in the guild. public Task AddRolesAsync(IEnumerable<IRole> roles, RequestOptions options = null) Parameters roles IEnumerable<IRole> The roles to be added to the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. AddRolesAsync(IEnumerable<ulong>, RequestOptions) Adds the specified roleIds to this user in the guild. public Task AddRolesAsync(IEnumerable<ulong> roleIds, RequestOptions options = null) Parameters roleIds IEnumerable<ulong> The roles to be added to the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. GetDisplayAvatarUrl(ImageFormat, ushort) Gets the display avatar URL for this user. public override string GetDisplayAvatarUrl(ImageFormat format = ImageFormat.Auto, ushort size = 128) Parameters format ImageFormat The format of the image. size ushort The size of the image that matches any power of two, ranging from 16 to 2048. Returns string A string representing the user's display avatar URL. Remarks This method will return GetDefaultAvatarUrl() if the user has no avatar set. GetGuildAvatarUrl(ImageFormat, ushort) Gets the guild-specific avatar URL for this user, if it is set. public string GetGuildAvatarUrl(ImageFormat format = ImageFormat.Auto, ushort size = 128) Parameters format ImageFormat The format of the image. size ushort The size of the image that matches any power of two, ranging from 16 to 2048. Returns string A string representing the user's guild-specific avatar URL; null if the user has no guild avatar set. Remarks tip If you wish to retrieve the display avatar for this user, consider using GetDisplayAvatarUrl(ImageFormat, ushort). GetPermissions(IGuildChannel) Gets the level permissions granted to this user to a given channel. public ChannelPermissions GetPermissions(IGuildChannel channel) Parameters channel IGuildChannel The channel to get the permission from. Returns ChannelPermissions A ChannelPermissions structure representing the permissions that a user has in the specified channel. Examples The following example checks if the current user has the ability to send a message with attachment in this channel; if so, uploads a file via SendFileAsync(string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags). if (currentUser?.GetPermissions(targetChannel)?.AttachFiles) await targetChannel.SendFileAsync(\"fortnite.png\"); KickAsync(string, RequestOptions) Kicks this user from this guild. public Task KickAsync(string reason = null, RequestOptions options = null) Parameters reason string The reason for the kick which will be recorded in the audit log. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous kick operation. ModifyAsync(Action<GuildUserProperties>, RequestOptions) Modifies this user's properties in this guild. public Task ModifyAsync(Action<GuildUserProperties> func, RequestOptions options = null) Parameters func Action<GuildUserProperties> The delegate containing the properties to modify the user with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies the current guild user with the specified properties. To see an example of this method and what properties are available, please refer to GuildUserProperties. RemoveRoleAsync(IRole, RequestOptions) Removes the specified role from this user in the guild. public Task RemoveRoleAsync(IRole role, RequestOptions options = null) Parameters role IRole The role to be removed from the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. RemoveRoleAsync(ulong, RequestOptions) Removes the specified roleId from this user in the guild. public Task RemoveRoleAsync(ulong roleId, RequestOptions options = null) Parameters roleId ulong The role to be removed from the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. RemoveRolesAsync(IEnumerable<IRole>, RequestOptions) Removes the specified roles from this user in the guild. public Task RemoveRolesAsync(IEnumerable<IRole> roles, RequestOptions options = null) Parameters roles IEnumerable<IRole> The roles to be removed from the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. RemoveRolesAsync(IEnumerable<ulong>, RequestOptions) Removes the specified roleIds from this user in the guild. public Task RemoveRolesAsync(IEnumerable<ulong> roleIds, RequestOptions options = null) Parameters roleIds IEnumerable<ulong> The roles to be removed from the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. RemoveTimeOutAsync(RequestOptions) Removes the current timeout from the user in this guild if one exists. public Task RemoveTimeOutAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous timeout removal operation. SetTimeOutAsync(TimeSpan, RequestOptions) Sets a timeout based on provided TimeSpan to this user in the guild. public Task SetTimeOutAsync(TimeSpan span, RequestOptions options = null) Parameters span TimeSpan The TimeSpan indicating how long a user should be timed out for. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous timeout creation operation."
  },
  "api/Discord.WebSocket.SocketIntegrationCreatedAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketIntegrationCreatedAuditLogData.html",
    "title": "Class SocketIntegrationCreatedAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketIntegrationCreatedAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to an integration authorization. public class SocketIntegrationCreatedAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketIntegrationCreatedAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data Gets the integration information after the changes. public SocketIntegrationInfo Data { get; } Property Value SocketIntegrationInfo"
  },
  "api/Discord.WebSocket.SocketIntegrationDeletedAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketIntegrationDeletedAuditLogData.html",
    "title": "Class SocketIntegrationDeletedAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketIntegrationDeletedAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to an integration removal. public class SocketIntegrationDeletedAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketIntegrationDeletedAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data Gets the integration information before the changes. public SocketIntegrationInfo Data { get; } Property Value SocketIntegrationInfo"
  },
  "api/Discord.WebSocket.SocketIntegrationInfo.html": {
    "href": "api/Discord.WebSocket.SocketIntegrationInfo.html",
    "title": "Class SocketIntegrationInfo | Discord.Net Documentation",
    "keywords": "Class SocketIntegrationInfo Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents information for an integration. public class SocketIntegrationInfo Inheritance object SocketIntegrationInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties EnableEmojis Gets whether emoticons should be synced for this integration. if the property was not mentioned in this audit log. public bool? EnableEmojis { get; set; } Property Value bool? Enabled Gets if the integration is enabled. if the property was not mentioned in this audit log. public bool? Enabled { get; set; } Property Value bool? ExpireBehavior Gets the behavior of expiring subscribers. if the property was not mentioned in this audit log. public IntegrationExpireBehavior? ExpireBehavior { get; set; } Property Value IntegrationExpireBehavior? ExpireGracePeriod Gets the grace period (in days) before expiring subscribers. if the property was not mentioned in this audit log. public int? ExpireGracePeriod { get; set; } Property Value int? Name Gets the name of the integration. if the property was not mentioned in this audit log. public string Name { get; set; } Property Value string RoleId Gets the id of the role that this integration uses for subscribers. if the property was not mentioned in this audit log. public ulong? RoleId { get; set; } Property Value ulong? Scopes Gets the scopes the application has been authorized for. if the property was not mentioned in this audit log. public IReadOnlyCollection<string> Scopes { get; set; } Property Value IReadOnlyCollection<string> Syncing Gets if syncing is enabled for this integration. if the property was not mentioned in this audit log. public bool? Syncing { get; set; } Property Value bool? Type Gets the type of the integration. if the property was not mentioned in this audit log. public string Type { get; set; } Property Value string"
  },
  "api/Discord.WebSocket.SocketIntegrationUpdatedAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketIntegrationUpdatedAuditLogData.html",
    "title": "Class SocketIntegrationUpdatedAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketIntegrationUpdatedAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to an integration update. public class SocketIntegrationUpdatedAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketIntegrationUpdatedAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After Gets the integration information after the changes. public SocketIntegrationInfo After { get; } Property Value SocketIntegrationInfo Before Gets the integration information before the changes. public SocketIntegrationInfo Before { get; } Property Value SocketIntegrationInfo"
  },
  "api/Discord.WebSocket.SocketInteraction.html": {
    "href": "api/Discord.WebSocket.SocketInteraction.html",
    "title": "Class SocketInteraction | Discord.Net Documentation",
    "keywords": "Class SocketInteraction Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents an Interaction received over the gateway. public abstract class SocketInteraction : SocketEntity<ulong>, IDiscordInteraction, ISnowflakeEntity, IEntity<ulong> Inheritance object SocketEntity<ulong> SocketInteraction Implements IDiscordInteraction ISnowflakeEntity IEntity<ulong> Derived SocketAutocompleteInteraction SocketCommandBase SocketMessageComponent SocketModal Inherited Members SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, InteractionService, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, T, RequestOptions, Action<ModalBuilder>) Properties ApplicationId Gets the ID of the application this interaction is for. public ulong ApplicationId { get; } Property Value ulong Channel Gets the ISocketMessageChannel this interaction was used in. public ISocketMessageChannel Channel { get; } Property Value ISocketMessageChannel Remarks If the channel isn't cached, the bot scope isn't used, or the bot doesn't have access to it then this property will be null. ChannelId Gets the ID of the channel this interaction was executed in. public ulong? ChannelId { get; } Property Value ulong? Remarks This property returns null if the interaction is a REST ping interaction. CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. Data Gets the data sent within this interaction. public IDiscordInteractionData Data { get; } Property Value IDiscordInteractionData Entitlements Gets entitlements for the invoking user. public IReadOnlyCollection<RestEntitlement> Entitlements { get; } Property Value IReadOnlyCollection<RestEntitlement> GuildId Gets the ID of the guild this interaction was executed in. public ulong? GuildId { get; } Property Value ulong? Remarks This property returns null if the interaction was not executed in a guild. GuildLocale Gets the preferred locale of the guild this interaction was executed in. null if not executed in a guild. public string GuildLocale { get; } Property Value string Remarks Non-community guilds (With no locale setting available) will have en-US as the default value sent by Discord. HasResponded Gets whether or not this interaction has been responded to. public abstract bool HasResponded { get; } Property Value bool Remarks This property is locally set -- if you're running multiple bots off the same token then this property won't be in sync with them. IsDMInteraction Gets whether or not this interaction was executed in a dm channel. public bool IsDMInteraction { get; } Property Value bool IsValidToken Gets whether or not the token used to respond to this interaction is valid. public bool IsValidToken { get; } Property Value bool Token Gets the continuation token for responding to the interaction. public string Token { get; } Property Value string Type Gets the type of this IDiscordInteraction. public InteractionType Type { get; } Property Value InteractionType User Gets the SocketUser who triggered this interaction. public SocketUser User { get; } Property Value SocketUser UserLocale Gets the preferred locale of the invoking User. public string UserLocale { get; } Property Value string Remarks This property returns null if the interaction is a REST ping interaction. Version Gets the version of the interaction, always 1. public int Version { get; } Property Value int Methods DeferAsync(bool, RequestOptions) Acknowledges this interaction. public abstract Task DeferAsync(bool ephemeral = false, RequestOptions options = null) Parameters ephemeral bool true to send this message ephemerally, otherwise false. options RequestOptions The request options for this async request. Returns Task A task that represents the asynchronous operation of acknowledging the interaction. DeleteOriginalResponseAsync(RequestOptions) Deletes the original response to this interaction. public Task DeleteOriginalResponseAsync(RequestOptions options = null) Parameters options RequestOptions The request options for this async request. Returns Task A task that represents an asynchronous deletion operation. FollowupAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public abstract Task<RestFollowupMessage> FollowupAsync(string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> The sent message. FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public Task<RestFollowupMessage> FollowupWithFileAsync(FileAttachment attachment, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachment FileAttachment The attachment containing the file and description. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public Task<RestFollowupMessage> FollowupWithFileAsync(Stream fileStream, string fileName, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters fileStream Stream The file to upload. fileName string The file name of the attachment. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> The sent message. FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public Task<RestFollowupMessage> FollowupWithFileAsync(string filePath, string fileName = null, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters filePath string The file to upload. fileName string The file name of the attachment. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> The sent message. FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public abstract Task<RestFollowupMessage> FollowupWithFilesAsync(IEnumerable<FileAttachment> attachments, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. GetChannelAsync(RequestOptions) Attempts to get the channel this interaction was executed in. public ValueTask<IMessageChannel> GetChannelAsync(RequestOptions options = null) Parameters options RequestOptions The request options for this async request. Returns ValueTask<IMessageChannel> A task that represents the asynchronous operation of fetching the channel. GetOriginalResponseAsync(RequestOptions) Gets the original response for this interaction. public Task<RestInteractionMessage> GetOriginalResponseAsync(RequestOptions options = null) Parameters options RequestOptions The request options for this async request. Returns Task<RestInteractionMessage> A RestInteractionMessage that represents the initial response. ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) Edits original response for this interaction. public Task<RestInteractionMessage> ModifyOriginalResponseAsync(Action<MessageProperties> func, RequestOptions options = null) Parameters func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The request options for this async request. Returns Task<RestInteractionMessage> A RestInteractionMessage that represents the initial response. RespondAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Responds to an Interaction with type ChannelMessageWithSource. public abstract Task RespondAsync(string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. InvalidOperationException The parameters provided were invalid or the token was invalid. RespondWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Responds to this interaction with a file attachment. public Task RespondWithFileAsync(FileAttachment attachment, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachment FileAttachment The attachment containing the file and description. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. RespondWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Responds to this interaction with a file attachment. public Task RespondWithFileAsync(Stream fileStream, string fileName, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters fileStream Stream The file to upload. fileName string The file name of the attachment. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. RespondWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Responds to this interaction with a file attachment. public Task RespondWithFileAsync(string filePath, string fileName = null, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters filePath string The file to upload. fileName string The file name of the attachment. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. RespondWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Responds to this interaction with a collection of file attachments. public abstract Task RespondWithFilesAsync(IEnumerable<FileAttachment> attachments, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. RespondWithModalAsync(Modal, RequestOptions) Responds to this interaction with a Modal. public abstract Task RespondWithModalAsync(Modal modal, RequestOptions options = null) Parameters modal Modal The Modal to respond with. options RequestOptions The request options for this async request. Returns Task A task that represents the asynchronous operation of responding to the interaction. RespondWithPremiumRequiredAsync(RequestOptions) Responds to the interaction with an ephemeral message the invoking user, instructing them that whatever they tried to do requires the premium benefits of your app. public Task RespondWithPremiumRequiredAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task A task that represents the asynchronous operation of responding to the interaction."
  },
  "api/Discord.WebSocket.SocketInvite.html": {
    "href": "api/Discord.WebSocket.SocketInvite.html",
    "title": "Class SocketInvite | Discord.Net Documentation",
    "keywords": "Class SocketInvite Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a WebSocket-based invite to a guild. public class SocketInvite : SocketEntity<string>, IInviteMetadata, IInvite, IEntity<string>, IDeletable Inheritance object SocketEntity<string> SocketInvite Implements IInviteMetadata IInvite IEntity<string> IDeletable Inherited Members SocketEntity<string>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Application Gets the embedded application to open for this voice channel embedded application invite. public RestApplication Application { get; } Property Value RestApplication A partial IApplication object. null if TargetUserType is not EmbeddedApplication. Channel Gets the channel where this invite was created. public SocketGuildChannel Channel { get; } Property Value SocketGuildChannel ChannelId Gets the ID of the channel this invite is linked to. public ulong ChannelId { get; } Property Value ulong An ulong representing the channel snowflake identifier that the invite points to. Code Gets the unique identifier for this invite. public string Code { get; } Property Value string A string containing the invite code (e.g. FTqNnyS). CreatedAt Gets when this invite was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset ExpiresAt Gets the expiration date of this invite. null if the invite never expires. public DateTimeOffset? ExpiresAt { get; } Property Value DateTimeOffset? Guild Gets the guild where this invite was created. public SocketGuild Guild { get; } Property Value SocketGuild GuildId Gets the ID of the guild this invite is linked to. public ulong? GuildId { get; } Property Value ulong? An ulong representing the guild snowflake identifier that the invite points to. Inviter Gets the user that created this invite if available. public SocketGuildUser Inviter { get; } Property Value SocketGuildUser IsTemporary Gets a value that indicates whether the invite is a temporary one. public bool IsTemporary { get; } Property Value bool true if users accepting this invite will be removed from the guild when they log off; otherwise false. MaxAge Gets the time (in seconds) until the invite expires. public int MaxAge { get; } Property Value int MaxUses Gets the max number of uses this invite may have. public int MaxUses { get; } Property Value int TargetUser Gets the user targeted by this invite if available. public SocketUser TargetUser { get; } Property Value SocketUser TargetUserType Gets the type of the user targeted by this invite. public TargetUserType TargetUserType { get; } Property Value TargetUserType Url Gets the URL used to accept this invite using Code. public string Url { get; } Property Value string A string containing the full invite URL (e.g. https://discord.gg/FTqNnyS). Uses Gets the number of times this invite has been used. public int Uses { get; } Property Value int Methods DeleteAsync(RequestOptions) Deletes this object and all its children. public Task DeleteAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task ToString() Gets the URL of the invite. public override string ToString() Returns string A string that resolves to the Url of the invite."
  },
  "api/Discord.WebSocket.SocketInviteCreateAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketInviteCreateAuditLogData.html",
    "title": "Class SocketInviteCreateAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketInviteCreateAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to an invite creation. public class SocketInviteCreateAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketInviteCreateAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Gets the ID of the channel this invite is linked to. public ulong ChannelId { get; } Property Value ulong A ulong representing the channel snowflake identifier that the invite points to. Code Gets the unique identifier for this invite. public string Code { get; } Property Value string A string containing the invite code (e.g. FTqNnyS). Creator Gets the user that created this invite if available. public Cacheable<SocketUser, RestUser, IUser, ulong>? Creator { get; } Property Value Cacheable<SocketUser, RestUser, IUser, ulong>? A user that created this invite or null. Remarks Will be null if the user is a 'Deleted User#....' because Discord does send user data for deleted users. MaxAge Gets the time (in seconds) until the invite expires. public int MaxAge { get; } Property Value int An int representing the time in seconds until this invite expires. MaxUses Gets the max number of uses this invite may have. public int MaxUses { get; } Property Value int An int representing the number of uses this invite may be accepted until it is removed from the guild; null if none is set. Temporary Gets a value that determines whether the invite is a temporary one. public bool Temporary { get; } Property Value bool true if users accepting this invite will be removed from the guild when they log off; otherwise false. Uses Gets the number of times this invite has been used. public int Uses { get; } Property Value int An int representing the number of times this invite was used."
  },
  "api/Discord.WebSocket.SocketInviteDeleteAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketInviteDeleteAuditLogData.html",
    "title": "Class SocketInviteDeleteAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketInviteDeleteAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to an invite removal. public class SocketInviteDeleteAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketInviteDeleteAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Gets the ID of the channel this invite is linked to. public ulong ChannelId { get; } Property Value ulong A ulong representing the channel snowflake identifier that the invite points to. Code Gets the unique identifier for this invite. public string Code { get; } Property Value string A string containing the invite code (e.g. FTqNnyS). Creator Gets the user that created this invite if available. public Cacheable<SocketUser, RestUser, IUser, ulong>? Creator { get; } Property Value Cacheable<SocketUser, RestUser, IUser, ulong>? A user that created this invite or null. Remarks Will be null if the user is a 'Deleted User#....' because Discord does send user data for deleted users. MaxAge Gets the time (in seconds) until the invite expires. public int MaxAge { get; } Property Value int An int representing the time in seconds until this invite expires. MaxUses Gets the max number of uses this invite may have. public int MaxUses { get; } Property Value int An int representing the number of uses this invite may be accepted until it is removed from the guild; null if none is set. Temporary Gets a value that indicates whether the invite is a temporary one. public bool Temporary { get; } Property Value bool true if users accepting this invite will be removed from the guild when they log off; otherwise false. Uses Gets the number of times this invite has been used. public int Uses { get; } Property Value int An int representing the number of times this invite has been used."
  },
  "api/Discord.WebSocket.SocketInviteInfo.html": {
    "href": "api/Discord.WebSocket.SocketInviteInfo.html",
    "title": "Struct SocketInviteInfo | Discord.Net Documentation",
    "keywords": "Struct SocketInviteInfo Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents information for an invite. public struct SocketInviteInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties ChannelId Gets the ID of the channel this invite is linked to. public readonly ulong? ChannelId { get; } Property Value ulong? A ulong representing the channel snowflake identifier that the invite points to; null if not specified. Code Gets the unique identifier for this invite. public readonly string Code { get; } Property Value string A string containing the invite code (e.g. FTqNnyS). CreatorId Gets the id of the user created this invite. public readonly ulong? CreatorId { get; } Property Value ulong? MaxAge Gets the time (in seconds) until the invite expires. public readonly int? MaxAge { get; } Property Value int? An int representing the time in seconds until this invite expires; null if this invite never expires or not specified. MaxUses Gets the max number of uses this invite may have. public readonly int? MaxUses { get; } Property Value int? An int representing the number of uses this invite may be accepted until it is removed from the guild; null if none is specified. Temporary Gets a value that indicates whether the invite is a temporary one. public readonly bool? Temporary { get; } Property Value bool? true if users accepting this invite will be removed from the guild when they log off, false if not; null if not specified."
  },
  "api/Discord.WebSocket.SocketInviteUpdateAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketInviteUpdateAuditLogData.html",
    "title": "Class SocketInviteUpdateAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketInviteUpdateAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data relating to an invite update. public class SocketInviteUpdateAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketInviteUpdateAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After Gets the invite information after the changes. public SocketInviteInfo After { get; } Property Value SocketInviteInfo An information object containing the invite information after the changes were made. Before Gets the invite information before the changes. public SocketInviteInfo Before { get; } Property Value SocketInviteInfo An information object containing the original invite information before the changes were made."
  },
  "api/Discord.WebSocket.SocketKickAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketKickAuditLogData.html",
    "title": "Class SocketKickAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketKickAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a kick. public class SocketKickAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketKickAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IntegrationType Gets the type of integration which performed the action. null if the action was performed by a user. public string IntegrationType { get; } Property Value string Target Gets the user that was kicked. public Cacheable<SocketUser, RestUser, IUser, ulong> Target { get; } Property Value Cacheable<SocketUser, RestUser, IUser, ulong> A cacheable user object representing the kicked user. Remarks Download method may return null if the user is a 'Deleted User#....' because Discord does send user data for deleted users."
  },
  "api/Discord.WebSocket.SocketMediaChannel.html": {
    "href": "api/Discord.WebSocket.SocketMediaChannel.html",
    "title": "Class SocketMediaChannel | Discord.Net Documentation",
    "keywords": "Class SocketMediaChannel Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll public class SocketMediaChannel : SocketForumChannel, IMediaChannel, IForumChannel, IMentionable, INestedChannel, IIntegrationChannel, IGuildChannel, IChannel, ISnowflakeEntity, IEntity<ulong>, IDeletable Inheritance object SocketEntity<ulong> SocketChannel SocketGuildChannel SocketForumChannel SocketMediaChannel Implements IMediaChannel IForumChannel IMentionable INestedChannel IIntegrationChannel IGuildChannel IChannel ISnowflakeEntity IEntity<ulong> IDeletable Inherited Members SocketForumChannel.IsNsfw SocketForumChannel.Topic SocketForumChannel.DefaultAutoArchiveDuration SocketForumChannel.Tags SocketForumChannel.ThreadCreationInterval SocketForumChannel.DefaultSlowModeInterval SocketForumChannel.Mention SocketForumChannel.CategoryId SocketForumChannel.DefaultReactionEmoji SocketForumChannel.DefaultSortOrder SocketForumChannel.DefaultLayout SocketForumChannel.Category SocketForumChannel.ModifyAsync(Action<ForumChannelProperties>, RequestOptions) SocketForumChannel.CreatePostAsync(string, ThreadArchiveDuration, int?, string, Embed, RequestOptions, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) SocketForumChannel.CreatePostWithFileAsync(string, string, ThreadArchiveDuration, int?, string, Embed, RequestOptions, bool, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) SocketForumChannel.CreatePostWithFileAsync(string, Stream, string, ThreadArchiveDuration, int?, string, Embed, RequestOptions, bool, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) SocketForumChannel.CreatePostWithFileAsync(string, FileAttachment, ThreadArchiveDuration, int?, string, Embed, RequestOptions, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) SocketForumChannel.CreatePostWithFilesAsync(string, IEnumerable<FileAttachment>, ThreadArchiveDuration, int?, string, Embed, RequestOptions, AllowedMentions, MessageComponent, ISticker[], Embed[], MessageFlags, ForumTag[]) SocketForumChannel.GetActiveThreadsAsync(RequestOptions) SocketForumChannel.GetJoinedPrivateArchivedThreadsAsync(int?, DateTimeOffset?, RequestOptions) SocketForumChannel.GetPrivateArchivedThreadsAsync(int?, DateTimeOffset?, RequestOptions) SocketForumChannel.GetPublicArchivedThreadsAsync(int?, DateTimeOffset?, RequestOptions) SocketForumChannel.CreateWebhookAsync(string, Stream, RequestOptions) SocketForumChannel.GetWebhookAsync(ulong, RequestOptions) SocketForumChannel.GetWebhooksAsync(RequestOptions) SocketForumChannel.CreateInviteAsync(int?, int?, bool, bool, RequestOptions) SocketForumChannel.CreateInviteToApplicationAsync(ulong, int?, int?, bool, bool, RequestOptions) SocketForumChannel.CreateInviteToApplicationAsync(DefaultApplications, int?, int?, bool, bool, RequestOptions) SocketForumChannel.CreateInviteToStreamAsync(IUser, int?, int?, bool, bool, RequestOptions) SocketForumChannel.GetInvitesAsync(RequestOptions) SocketForumChannel.SyncPermissionsAsync(RequestOptions) SocketGuildChannel.Guild SocketGuildChannel.Name SocketGuildChannel.Position SocketGuildChannel.Flags SocketGuildChannel.PermissionOverwrites SocketGuildChannel.Users SocketGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions) SocketGuildChannel.DeleteAsync(RequestOptions) SocketGuildChannel.GetPermissionOverwrite(IUser) SocketGuildChannel.GetPermissionOverwrite(IRole) SocketGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions) SocketGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) SocketGuildChannel.GetUser(ulong) SocketGuildChannel.ToString() SocketChannel.CreatedAt SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel)"
  },
  "api/Discord.WebSocket.SocketMemberDisconnectAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketMemberDisconnectAuditLogData.html",
    "title": "Class SocketMemberDisconnectAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketMemberDisconnectAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to disconnecting members from voice channels. public class SocketMemberDisconnectAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketMemberDisconnectAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties MemberCount Gets the number of members that were disconnected. public int MemberCount { get; } Property Value int An int representing the number of members that were disconnected from a voice channel."
  },
  "api/Discord.WebSocket.SocketMemberMoveAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketMemberMoveAuditLogData.html",
    "title": "Class SocketMemberMoveAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketMemberMoveAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to moving members between voice channels. public class SocketMemberMoveAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketMemberMoveAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Gets the ID of the channel that the members were moved to. public ulong ChannelId { get; } Property Value ulong A ulong representing the snowflake identifier for the channel that the members were moved to. MemberCount Gets the number of members that were moved. public int MemberCount { get; } Property Value int An int representing the number of members that were moved to another voice channel."
  },
  "api/Discord.WebSocket.SocketMemberRoleAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketMemberRoleAuditLogData.html",
    "title": "Class SocketMemberRoleAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketMemberRoleAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a change in a guild member's roles. public class SocketMemberRoleAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketMemberRoleAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IntegrationType Gets the type of integration which performed the action. null if the action was performed by a user. public string IntegrationType { get; } Property Value string Roles Gets a collection of role changes that were performed on the member. public IReadOnlyCollection<SocketMemberRoleEditInfo> Roles { get; } Property Value IReadOnlyCollection<SocketMemberRoleEditInfo> A read-only collection of SocketMemberRoleEditInfo, containing the roles that were changed on the member. Target Gets the user that the roles changes were performed on. public Cacheable<SocketUser, RestUser, IUser, ulong> Target { get; } Property Value Cacheable<SocketUser, RestUser, IUser, ulong> A cacheable user object representing the user that the role changes were performed on."
  },
  "api/Discord.WebSocket.SocketMemberRoleEditInfo.html": {
    "href": "api/Discord.WebSocket.SocketMemberRoleEditInfo.html",
    "title": "Struct SocketMemberRoleEditInfo | Discord.Net Documentation",
    "keywords": "Struct SocketMemberRoleEditInfo Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll An information object representing a change in one of a guild member's roles. public struct SocketMemberRoleEditInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Added Gets a value that indicates whether the role was added to the user. public readonly bool Added { get; } Property Value bool true if the role was added to the user; otherwise false. Name Gets the name of the role that was changed. public readonly string Name { get; } Property Value string A string containing the name of the role that was changed. Removed Gets a value indicating that the user role has been removed. public readonly bool Removed { get; } Property Value bool true if the role has been removed from the user; otherwise false. RoleId Gets the ID of the role that was changed. public readonly ulong RoleId { get; } Property Value ulong A ulong representing the snowflake identifier of the role that was changed."
  },
  "api/Discord.WebSocket.SocketMemberUpdateAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketMemberUpdateAuditLogData.html",
    "title": "Class SocketMemberUpdateAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketMemberUpdateAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a change in a guild member. public class SocketMemberUpdateAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketMemberUpdateAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After Gets the member information after the changes. public MemberInfo After { get; } Property Value MemberInfo An information object containing the member information after the changes were made. Before Gets the member information before the changes. public MemberInfo Before { get; } Property Value MemberInfo An information object containing the original member information before the changes were made. Target Gets the user that the changes were performed on. public Cacheable<SocketUser, RestUser, IUser, ulong> Target { get; } Property Value Cacheable<SocketUser, RestUser, IUser, ulong> A user object representing the user who the changes were performed on. Remarks Will be null if the user is a 'Deleted User#....' because Discord does send user data for deleted users."
  },
  "api/Discord.WebSocket.SocketMessage.html": {
    "href": "api/Discord.WebSocket.SocketMessage.html",
    "title": "Class SocketMessage | Discord.Net Documentation",
    "keywords": "Class SocketMessage Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a WebSocket-based message. public abstract class SocketMessage : SocketEntity<ulong>, IMessage, ISnowflakeEntity, IEntity<ulong>, IDeletable Inheritance object SocketEntity<ulong> SocketMessage Implements IMessage ISnowflakeEntity IEntity<ulong> IDeletable Derived SocketSystemMessage SocketUserMessage Inherited Members SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods MessageExtensions.GetJumpUrl(IMessage) Properties Activity Gets the activity associated with a message. public MessageActivity Activity { get; } Property Value MessageActivity A message's activity, if any is associated. Remarks Sent with Rich Presence-related chat embeds. This often refers to activity that requires end-user's interaction, such as a Spotify Invite activity. Application Gets the application associated with a message. public MessageApplication Application { get; } Property Value MessageApplication A message's application, if any is associated. Remarks Sent with Rich-Presence-related chat embeds. Attachments Returns all attachments included in this message. public virtual IReadOnlyCollection<Attachment> Attachments { get; } Property Value IReadOnlyCollection<Attachment> Collection of attachments. Author Gets the author of this message. public SocketUser Author { get; } Property Value SocketUser A WebSocket-based user object. Channel Gets the source channel of the message. public ISocketMessageChannel Channel { get; } Property Value ISocketMessageChannel A WebSocket-based message channel. CleanContent Gets the clean content for this message. public string CleanContent { get; } Property Value string A string that contains the body of the message stripped of mentions, markdown, emojis and pings; note that this field may be empty if there is an embed. Remarks This will be empty if the privileged MessageContent is disabled. Components public IReadOnlyCollection<ActionRowComponent> Components { get; } Property Value IReadOnlyCollection<ActionRowComponent> Content Gets the content for this message. public string Content { get; } Property Value string A string that contains the body of the message; note that this field may be empty if there is an embed. Remarks This will be empty if the privileged MessageContent is disabled. CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. EditedTimestamp Gets the time of this message's last edit. public virtual DateTimeOffset? EditedTimestamp { get; } Property Value DateTimeOffset? Time of when the message was last edited; null if the message is never edited. Embeds Returns all embeds included in this message. public virtual IReadOnlyCollection<Embed> Embeds { get; } Property Value IReadOnlyCollection<Embed> Collection of embed objects. Flags Gets the flags related to this message. public MessageFlags? Flags { get; } Property Value MessageFlags? A message's flags, if any is associated. Remarks This value is determined by bitwise OR-ing MessageFlags values together. Interaction Gets the interaction this message is a response to. public MessageInteraction<SocketUser> Interaction { get; } Property Value MessageInteraction<SocketUser> IsPinned Gets the value that indicates whether this message is pinned. public virtual bool IsPinned { get; } Property Value bool true if this message was added to its channel's pinned messages; otherwise false. IsSuppressed Gets the value that indicates whether or not this message's embeds are suppressed. public virtual bool IsSuppressed { get; } Property Value bool true if the embeds in this message have been suppressed (made invisible); otherwise false. IsTTS Gets the value that indicates whether this message was meant to be read-aloud by Discord. public virtual bool IsTTS { get; } Property Value bool true if this message was sent as a text-to-speech message; otherwise false. MentionedChannels Returns the channels mentioned in this message. public virtual IReadOnlyCollection<SocketGuildChannel> MentionedChannels { get; } Property Value IReadOnlyCollection<SocketGuildChannel> Collection of WebSocket-based guild channels. MentionedEveryone Gets the value that indicates whether this message mentioned everyone. public virtual bool MentionedEveryone { get; } Property Value bool true if this message mentioned everyone; otherwise false. MentionedRoles Returns the roles mentioned in this message. public virtual IReadOnlyCollection<SocketRole> MentionedRoles { get; } Property Value IReadOnlyCollection<SocketRole> Collection of WebSocket-based roles. MentionedUsers Returns the users mentioned in this message. public IReadOnlyCollection<SocketUser> MentionedUsers { get; } Property Value IReadOnlyCollection<SocketUser> Collection of WebSocket-based users. Reactions Gets all reactions included in this message. public IReadOnlyDictionary<IEmote, ReactionMetadata> Reactions { get; } Property Value IReadOnlyDictionary<IEmote, ReactionMetadata> Reference Gets the reference to the original message if it is a crosspost, channel follow add, pin, or reply message. public MessageReference Reference { get; } Property Value MessageReference A message's reference, if any is associated. Remarks Sent with cross-posted messages, meaning they were published from news channels and received by subscriber channels, channel follow adds, pins, and message replies. RoleSubscriptionData Gets the data of the role subscription purchase or renewal that prompted this RoleSubscriptionPurchase message. public MessageRoleSubscriptionData RoleSubscriptionData { get; } Property Value MessageRoleSubscriptionData A MessageRoleSubscriptionData if the message is a role subscription purchase message; otherwise null. Source Gets the source type of this message. public MessageSource Source { get; } Property Value MessageSource Stickers public virtual IReadOnlyCollection<SocketSticker> Stickers { get; } Property Value IReadOnlyCollection<SocketSticker> Tags Gets all tags included in this message's content. public virtual IReadOnlyCollection<ITag> Tags { get; } Property Value IReadOnlyCollection<ITag> Thread Gets the thread that was started from this message. public SocketThreadChannel Thread { get; } Property Value SocketThreadChannel An IThreadChannel object if this message has thread attached; otherwise null. Timestamp Gets the time this message was sent. public DateTimeOffset Timestamp { get; } Property Value DateTimeOffset Time of when the message was sent. Type Gets the type of this message. public MessageType Type { get; } Property Value MessageType Methods AddReactionAsync(IEmote, RequestOptions) Adds a reaction to this message. public Task AddReactionAsync(IEmote emote, RequestOptions options = null) Parameters emote IEmote The emoji used to react to this message. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for adding a reaction to this message. Examples The following example adds the reaction, 💕, to the message. await msg.AddReactionAsync(new Emoji(\"\\U0001f495\")); See Also IEmote DeleteAsync(RequestOptions) Deletes this object and all its children. public Task DeleteAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task GetReactionUsersAsync(IEmote, int, RequestOptions, ReactionType) Gets all users that reacted to a message with a given emote. public IAsyncEnumerable<IReadOnlyCollection<IUser>> GetReactionUsersAsync(IEmote emote, int limit, RequestOptions options = null, ReactionType type = ReactionType.Normal) Parameters emote IEmote limit int The number of users to request. options RequestOptions The options to be used when sending the request. type ReactionType The type of the reaction you wish to get users for. Returns IAsyncEnumerable<IReadOnlyCollection<IUser>> Paged collection of users. Examples The following example gets the users that have reacted with the emoji 💕 to the message. var emoji = new Emoji(\"\\U0001f495\"); var reactedUsers = await message.GetReactionUsersAsync(emoji, 100).FlattenAsync(); Remarks important The returned collection is an asynchronous enumerable object; one must call FlattenAsync<T>(IAsyncEnumerable<IEnumerable<T>>) to access the users as a collection. warning Do not fetch too many users at once! This may cause unwanted preemptive rate limit or even actual rate limit, causing your bot to freeze! This method will attempt to fetch the number of reactions specified under limit. The library will attempt to split up the requests according to your limit and MaxUserReactionsPerBatch. In other words, should the user request 500 reactions, and the MaxUserReactionsPerBatch constant is 100, the request will be split into 5 individual requests; thus returning 5 individual asynchronous responses, hence the need of flattening. RemoveAllReactionsAsync(RequestOptions) Removes all reactions from this message. public Task RemoveAllReactionsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. RemoveAllReactionsForEmoteAsync(IEmote, RequestOptions) Removes all reactions with a specific emoji from this message. public Task RemoveAllReactionsForEmoteAsync(IEmote emote, RequestOptions options = null) Parameters emote IEmote The emoji used to react to this message. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. RemoveReactionAsync(IEmote, IUser, RequestOptions) Removes a reaction from message. public Task RemoveReactionAsync(IEmote emote, IUser user, RequestOptions options = null) Parameters emote IEmote The emoji used to react to this message. user IUser The user that added the emoji. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for removing a reaction to this message. Examples The following example removes the reaction, 💕, added by the message author from the message. await msg.RemoveReactionAsync(new Emoji(\"\\U0001f495\"), msg.Author); See Also IEmote RemoveReactionAsync(IEmote, ulong, RequestOptions) Removes a reaction from message. public Task RemoveReactionAsync(IEmote emote, ulong userId, RequestOptions options = null) Parameters emote IEmote The emoji used to react to this message. userId ulong The ID of the user that added the emoji. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for removing a reaction to this message. Examples The following example removes the reaction, 💕, added by the user with ID 84291986575613952 from the message. await msg.RemoveReactionAsync(new Emoji(\"\\U0001f495\"), 84291986575613952); See Also IEmote ToString() Gets the content of the message. public override string ToString() Returns string Content of the message."
  },
  "api/Discord.WebSocket.SocketMessageBulkDeleteAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketMessageBulkDeleteAuditLogData.html",
    "title": "Class SocketMessageBulkDeleteAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketMessageBulkDeleteAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to message deletion(s). public class SocketMessageBulkDeleteAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketMessageBulkDeleteAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Gets the ID of the channel that the messages were deleted from. public ulong ChannelId { get; } Property Value ulong A ulong representing the snowflake identifier for the channel that the messages were deleted from. MessageCount Gets the number of messages that were deleted. public int MessageCount { get; } Property Value int An int representing the number of messages that were deleted from the channel."
  },
  "api/Discord.WebSocket.SocketMessageCommand.html": {
    "href": "api/Discord.WebSocket.SocketMessageCommand.html",
    "title": "Class SocketMessageCommand | Discord.Net Documentation",
    "keywords": "Class SocketMessageCommand Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a Websocket-based slash command received over the gateway. public class SocketMessageCommand : SocketCommandBase, IMessageCommandInteraction, IApplicationCommandInteraction, IDiscordInteraction, ISnowflakeEntity, IEntity<ulong> Inheritance object SocketEntity<ulong> SocketInteraction SocketCommandBase SocketMessageCommand Implements IMessageCommandInteraction IApplicationCommandInteraction IDiscordInteraction ISnowflakeEntity IEntity<ulong> Inherited Members SocketCommandBase.CommandName SocketCommandBase.CommandId SocketCommandBase.HasResponded SocketCommandBase.RespondAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketCommandBase.RespondWithModalAsync(Modal, RequestOptions) SocketCommandBase.RespondWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketCommandBase.FollowupAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketCommandBase.FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketCommandBase.DeferAsync(bool, RequestOptions) SocketInteraction.Channel SocketInteraction.ChannelId SocketInteraction.User SocketInteraction.Type SocketInteraction.Token SocketInteraction.UserLocale SocketInteraction.GuildLocale SocketInteraction.Version SocketInteraction.CreatedAt SocketInteraction.IsValidToken SocketInteraction.IsDMInteraction SocketInteraction.GuildId SocketInteraction.ApplicationId SocketInteraction.Entitlements SocketInteraction.RespondWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.RespondWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.RespondWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.GetOriginalResponseAsync(RequestOptions) SocketInteraction.ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) SocketInteraction.DeleteOriginalResponseAsync(RequestOptions) SocketInteraction.RespondWithPremiumRequiredAsync(RequestOptions) SocketInteraction.GetChannelAsync(RequestOptions) SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, InteractionService, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, T, RequestOptions, Action<ModalBuilder>) Properties Data Gets the data associated with this interaction. public SocketMessageCommandData Data { get; } Property Value SocketMessageCommandData"
  },
  "api/Discord.WebSocket.SocketMessageCommandData.html": {
    "href": "api/Discord.WebSocket.SocketMessageCommandData.html",
    "title": "Class SocketMessageCommandData | Discord.Net Documentation",
    "keywords": "Class SocketMessageCommandData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents the data tied with the SocketMessageCommand interaction. public class SocketMessageCommandData : SocketCommandBaseData, IEntity<ulong>, IMessageCommandInteractionData, IApplicationCommandInteractionData, IDiscordInteractionData Inheritance object SocketEntity<ulong> SocketCommandBaseData<IApplicationCommandInteractionDataOption> SocketCommandBaseData SocketMessageCommandData Implements IEntity<ulong> IMessageCommandInteractionData IApplicationCommandInteractionData IDiscordInteractionData Inherited Members SocketCommandBaseData<IApplicationCommandInteractionDataOption>.Name SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Message Gets the message associated with this message command. public SocketMessage Message { get; } Property Value SocketMessage Options Gets the IApplicationCommandInteractionDataOption received with this interaction. public override IReadOnlyCollection<IApplicationCommandInteractionDataOption> Options { get; } Property Value IReadOnlyCollection<IApplicationCommandInteractionDataOption> Remarks Note Not implemented for SocketMessageCommandData"
  },
  "api/Discord.WebSocket.SocketMessageComponent.html": {
    "href": "api/Discord.WebSocket.SocketMessageComponent.html",
    "title": "Class SocketMessageComponent | Discord.Net Documentation",
    "keywords": "Class SocketMessageComponent Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a Websocket-based interaction type for Message Components. public class SocketMessageComponent : SocketInteraction, IComponentInteraction, IDiscordInteraction, ISnowflakeEntity, IEntity<ulong> Inheritance object SocketEntity<ulong> SocketInteraction SocketMessageComponent Implements IComponentInteraction IDiscordInteraction ISnowflakeEntity IEntity<ulong> Inherited Members SocketInteraction.Channel SocketInteraction.ChannelId SocketInteraction.User SocketInteraction.Type SocketInteraction.Token SocketInteraction.UserLocale SocketInteraction.GuildLocale SocketInteraction.Version SocketInteraction.CreatedAt SocketInteraction.IsValidToken SocketInteraction.IsDMInteraction SocketInteraction.GuildId SocketInteraction.ApplicationId SocketInteraction.Entitlements SocketInteraction.RespondWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.RespondWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.RespondWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.GetOriginalResponseAsync(RequestOptions) SocketInteraction.ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) SocketInteraction.DeleteOriginalResponseAsync(RequestOptions) SocketInteraction.RespondWithPremiumRequiredAsync(RequestOptions) SocketInteraction.GetChannelAsync(RequestOptions) SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, InteractionService, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, T, RequestOptions, Action<ModalBuilder>) Properties Data Gets the data received with this interaction, contains the button that was clicked. public SocketMessageComponentData Data { get; } Property Value SocketMessageComponentData HasResponded Gets whether or not this interaction has been responded to. public override bool HasResponded { get; } Property Value bool Remarks This property is locally set -- if you're running multiple bots off the same token then this property won't be in sync with them. Message Gets the message that contained the trigger for this interaction. public SocketUserMessage Message { get; } Property Value SocketUserMessage Methods DeferAsync(bool, RequestOptions) Acknowledges this interaction. public override Task DeferAsync(bool ephemeral = false, RequestOptions options = null) Parameters ephemeral bool true to send this message ephemerally, otherwise false. options RequestOptions The request options for this async request. Returns Task A task that represents the asynchronous operation of acknowledging the interaction. DeferLoadingAsync(bool, RequestOptions) Defers an interaction with the response type 5 (DeferredChannelMessageWithSource). public Task DeferLoadingAsync(bool ephemeral = false, RequestOptions options = null) Parameters ephemeral bool true to defer ephemerally, otherwise false. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation of acknowledging the interaction. FollowupAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupAsync(string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> The sent message. FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupWithFilesAsync(IEnumerable<FileAttachment> attachments, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. RespondAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Responds to an Interaction with type ChannelMessageWithSource. public override Task RespondAsync(string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. InvalidOperationException The parameters provided were invalid or the token was invalid. RespondWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Responds to this interaction with a collection of file attachments. public override Task RespondWithFilesAsync(IEnumerable<FileAttachment> attachments, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. RespondWithModalAsync(Modal, RequestOptions) Responds to this interaction with a Modal. public override Task RespondWithModalAsync(Modal modal, RequestOptions options = null) Parameters modal Modal The Modal to respond with. options RequestOptions The request options for this async request. Returns Task A task that represents the asynchronous operation of responding to the interaction. UpdateAsync(Action<MessageProperties>, RequestOptions) Updates the message which this component resides in with the type UpdateMessage public Task UpdateAsync(Action<MessageProperties> func, RequestOptions options = null) Parameters func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation of updating the message."
  },
  "api/Discord.WebSocket.SocketMessageComponentData.html": {
    "href": "api/Discord.WebSocket.SocketMessageComponentData.html",
    "title": "Class SocketMessageComponentData | Discord.Net Documentation",
    "keywords": "Class SocketMessageComponentData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents the data sent with a MessageComponent. public class SocketMessageComponentData : IComponentInteractionData, IDiscordInteractionData Inheritance object SocketMessageComponentData Implements IComponentInteractionData IDiscordInteractionData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Channels Gets the channels(s) of a ChannelSelect interaction response. null if select type is different. public IReadOnlyCollection<SocketChannel> Channels { get; } Property Value IReadOnlyCollection<SocketChannel> CustomId Gets the component's Custom Id that was clicked. public string CustomId { get; } Property Value string Members Gets the guild member(s) of a UserSelect or MentionableSelect interaction response. null if type select is different. public IReadOnlyCollection<SocketGuildUser> Members { get; } Property Value IReadOnlyCollection<SocketGuildUser> Roles Gets the roles(s) of a RoleSelect or MentionableSelect interaction response. null if select type is different. public IReadOnlyCollection<SocketRole> Roles { get; } Property Value IReadOnlyCollection<SocketRole> Type Gets the type of the component clicked. public ComponentType Type { get; } Property Value ComponentType Users Gets the user(s) of a UserSelect or MentionableSelect interaction response. null if select type is different. public IReadOnlyCollection<IUser> Users { get; } Property Value IReadOnlyCollection<IUser> Remarks Returns SocketUser if user is cached, RestUser otherwise. Value Gets the value of a TextInput interaction response. public string Value { get; } Property Value string Values Gets the value(s) of a SelectMenu interaction response. null if select type is different. public IReadOnlyCollection<string> Values { get; } Property Value IReadOnlyCollection<string>"
  },
  "api/Discord.WebSocket.SocketMessageDeleteAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketMessageDeleteAuditLogData.html",
    "title": "Class SocketMessageDeleteAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketMessageDeleteAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to message deletion(s). public class SocketMessageDeleteAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketMessageDeleteAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Gets the ID of the channel that the messages were deleted from. public ulong ChannelId { get; } Property Value ulong A ulong representing the snowflake identifier for the channel that the messages were deleted from. MessageCount Gets the number of messages that were deleted. public int MessageCount { get; } Property Value int An int representing the number of messages that were deleted from the channel. Target Gets the user of the messages that were deleted. public Cacheable<SocketUser, RestUser, IUser, ulong> Target { get; } Property Value Cacheable<SocketUser, RestUser, IUser, ulong> A user object representing the user that created the deleted messages. Remarks Will be null if the user is a 'Deleted User#....' because Discord does send user data for deleted users."
  },
  "api/Discord.WebSocket.SocketMessagePinAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketMessagePinAuditLogData.html",
    "title": "Class SocketMessagePinAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketMessagePinAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a pinned message. public class SocketMessagePinAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketMessagePinAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Gets the ID of the channel that the message was pinned from. public ulong ChannelId { get; } Property Value ulong A ulong representing the snowflake identifier for the channel that the message was pinned from. MessageId Gets the ID of the messages that was pinned. public ulong MessageId { get; } Property Value ulong A ulong representing the snowflake identifier for the messages that was pinned. Target Gets the user of the message that was pinned if available. public Cacheable<SocketUser, RestUser, IUser, ulong>? Target { get; } Property Value Cacheable<SocketUser, RestUser, IUser, ulong>? A user object representing the user that created the pinned message or null. Remarks Will be null if the user is a 'Deleted User#....' because Discord does send user data for deleted users."
  },
  "api/Discord.WebSocket.SocketMessageUnpinAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketMessageUnpinAuditLogData.html",
    "title": "Class SocketMessageUnpinAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketMessageUnpinAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to an unpinned message. public class SocketMessageUnpinAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketMessageUnpinAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Gets the ID of the channel that the message was unpinned from. public ulong ChannelId { get; } Property Value ulong A ulong representing the snowflake identifier for the channel that the message was unpinned from. MessageId Gets the ID of the messages that was unpinned. public ulong MessageId { get; } Property Value ulong A ulong representing the snowflake identifier for the messages that was unpinned. Target Gets the user of the message that was unpinned if available. public Cacheable<SocketUser, RestUser, IUser, ulong>? Target { get; } Property Value Cacheable<SocketUser, RestUser, IUser, ulong>? A user object representing the user that created the unpinned message or null. Remarks Will be null if the user is a 'Deleted User#....' because Discord does send user data for deleted users."
  },
  "api/Discord.WebSocket.SocketModal.html": {
    "href": "api/Discord.WebSocket.SocketModal.html",
    "title": "Class SocketModal | Discord.Net Documentation",
    "keywords": "Class SocketModal Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a user submitted Modal received via GateWay. public class SocketModal : SocketInteraction, IModalInteraction, IDiscordInteraction, ISnowflakeEntity, IEntity<ulong> Inheritance object SocketEntity<ulong> SocketInteraction SocketModal Implements IModalInteraction IDiscordInteraction ISnowflakeEntity IEntity<ulong> Inherited Members SocketInteraction.Channel SocketInteraction.ChannelId SocketInteraction.User SocketInteraction.Type SocketInteraction.Token SocketInteraction.UserLocale SocketInteraction.GuildLocale SocketInteraction.Version SocketInteraction.CreatedAt SocketInteraction.IsValidToken SocketInteraction.IsDMInteraction SocketInteraction.GuildId SocketInteraction.ApplicationId SocketInteraction.Entitlements SocketInteraction.RespondWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.RespondWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.RespondWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.GetOriginalResponseAsync(RequestOptions) SocketInteraction.ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) SocketInteraction.DeleteOriginalResponseAsync(RequestOptions) SocketInteraction.RespondWithPremiumRequiredAsync(RequestOptions) SocketInteraction.GetChannelAsync(RequestOptions) SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, InteractionService, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, T, RequestOptions, Action<ModalBuilder>) Properties Data Gets the data for this Modal interaction. public SocketModalData Data { get; set; } Property Value SocketModalData HasResponded Gets whether or not this interaction has been responded to. public override bool HasResponded { get; } Property Value bool Remarks This property is locally set -- if you're running multiple bots off the same token then this property won't be in sync with them. Message Gets the message the modal originates from. public SocketUserMessage Message { get; } Property Value SocketUserMessage Remarks This property is only populated if the modal was created from a message component. Methods DeferAsync(bool, RequestOptions) Acknowledges this interaction. public override Task DeferAsync(bool ephemeral = false, RequestOptions options = null) Parameters ephemeral bool true to send this message ephemerally, otherwise false. options RequestOptions The request options for this async request. Returns Task A task that represents the asynchronous operation of acknowledging the interaction. Remarks Acknowledges this interaction with the DeferredUpdateMessage if the modal was created in a response to a message component interaction, DeferredChannelMessageWithSource otherwise. DeferLoadingAsync(bool, RequestOptions) Defers an interaction with the response type 5 (DeferredChannelMessageWithSource). public Task DeferLoadingAsync(bool ephemeral = false, RequestOptions options = null) Parameters ephemeral bool true to defer ephemerally, otherwise false. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation of acknowledging the interaction. FollowupAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupAsync(string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> The sent message. FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Sends a followup message for this interaction. public override Task<RestFollowupMessage> FollowupWithFilesAsync(IEnumerable<FileAttachment> attachments, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task<RestFollowupMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. RespondAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Responds to an Interaction with type ChannelMessageWithSource. public override Task RespondAsync(string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. InvalidOperationException The parameters provided were invalid or the token was invalid. RespondWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) Responds to this interaction with a collection of file attachments. public override Task RespondWithFilesAsync(IEnumerable<FileAttachment> attachments, string text = null, Embed[] embeds = null, bool isTTS = false, bool ephemeral = false, AllowedMentions allowedMentions = null, MessageComponent components = null, Embed embed = null, RequestOptions options = null) Parameters attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The text of the message to be sent. embeds Embed[] A array of embeds to send with this response. Max 10. isTTS bool true if the message should be read out by a text-to-speech reader, otherwise false. ephemeral bool true if the response should be hidden to everyone besides the invoker of the command, otherwise false. allowedMentions AllowedMentions The allowed mentions for this response. components MessageComponent A MessageComponent to be sent with this response. embed Embed A single embed to send with this response. If this is passed alongside an array of embeds, the single embed will be ignored. options RequestOptions The request options for this response. Returns Task A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. RespondWithModalAsync(Modal, RequestOptions) Responds to this interaction with a Modal. public override Task RespondWithModalAsync(Modal modal, RequestOptions options = null) Parameters modal Modal The Modal to respond with. options RequestOptions The request options for this async request. Returns Task A task that represents the asynchronous operation of responding to the interaction. UpdateAsync(Action<MessageProperties>, RequestOptions) Updates the message which this modal originates from with the type UpdateMessage public Task UpdateAsync(Action<MessageProperties> func, RequestOptions options = null) Parameters func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation of updating the message. Remarks This method can be used only if the modal was created from a message component."
  },
  "api/Discord.WebSocket.SocketModalData.html": {
    "href": "api/Discord.WebSocket.SocketModalData.html",
    "title": "Class SocketModalData | Discord.Net Documentation",
    "keywords": "Class SocketModalData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents data sent from a ModalSubmit. public class SocketModalData : IModalInteractionData, IDiscordInteractionData Inheritance object SocketModalData Implements IModalInteractionData IDiscordInteractionData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Components Gets the Modal's components submitted by the user. public IReadOnlyCollection<SocketMessageComponentData> Components { get; } Property Value IReadOnlyCollection<SocketMessageComponentData> CustomId Gets the Modal's Custom Id. public string CustomId { get; } Property Value string"
  },
  "api/Discord.WebSocket.SocketNewsChannel.html": {
    "href": "api/Discord.WebSocket.SocketNewsChannel.html",
    "title": "Class SocketNewsChannel | Discord.Net Documentation",
    "keywords": "Class SocketNewsChannel Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a WebSocket-based news channel in a guild that has the same properties as a SocketTextChannel. public class SocketNewsChannel : SocketTextChannel, ISocketMessageChannel, INewsChannel, ITextChannel, IMessageChannel, IMentionable, INestedChannel, IIntegrationChannel, IGuildChannel, IChannel, ISnowflakeEntity, IEntity<ulong>, IDeletable Inheritance object SocketEntity<ulong> SocketChannel SocketGuildChannel SocketTextChannel SocketNewsChannel Implements ISocketMessageChannel INewsChannel ITextChannel IMessageChannel IMentionable INestedChannel IIntegrationChannel IGuildChannel IChannel ISnowflakeEntity IEntity<ulong> IDeletable Inherited Members SocketTextChannel.Topic SocketTextChannel.CategoryId SocketTextChannel.DefaultSlowModeInterval SocketTextChannel.Category SocketTextChannel.SyncPermissionsAsync(RequestOptions) SocketTextChannel.IsNsfw SocketTextChannel.DefaultArchiveDuration SocketTextChannel.Mention SocketTextChannel.CachedMessages SocketTextChannel.Users SocketTextChannel.Threads SocketTextChannel.ModifyAsync(Action<TextChannelProperties>, RequestOptions) SocketTextChannel.CreateThreadAsync(string, ThreadType, ThreadArchiveDuration, IMessage, bool?, int?, RequestOptions) SocketTextChannel.GetActiveThreadsAsync(RequestOptions) SocketTextChannel.GetCachedMessage(ulong) SocketTextChannel.GetMessageAsync(ulong, RequestOptions) SocketTextChannel.GetMessagesAsync(int, RequestOptions) SocketTextChannel.GetMessagesAsync(ulong, Direction, int, RequestOptions) SocketTextChannel.GetMessagesAsync(IMessage, Direction, int, RequestOptions) SocketTextChannel.GetCachedMessages(int) SocketTextChannel.GetCachedMessages(ulong, Direction, int) SocketTextChannel.GetCachedMessages(IMessage, Direction, int) SocketTextChannel.GetPinnedMessagesAsync(RequestOptions) SocketTextChannel.SendMessageAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) SocketTextChannel.SendFileAsync(string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) SocketTextChannel.SendFileAsync(Stream, string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) SocketTextChannel.SendFileAsync(FileAttachment, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) SocketTextChannel.SendFilesAsync(IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) SocketTextChannel.DeleteMessagesAsync(IEnumerable<IMessage>, RequestOptions) SocketTextChannel.DeleteMessagesAsync(IEnumerable<ulong>, RequestOptions) SocketTextChannel.ModifyMessageAsync(ulong, Action<MessageProperties>, RequestOptions) SocketTextChannel.DeleteMessageAsync(ulong, RequestOptions) SocketTextChannel.DeleteMessageAsync(IMessage, RequestOptions) SocketTextChannel.TriggerTypingAsync(RequestOptions) SocketTextChannel.EnterTypingState(RequestOptions) SocketTextChannel.GetUser(ulong) SocketTextChannel.CreateWebhookAsync(string, Stream, RequestOptions) SocketTextChannel.GetWebhookAsync(ulong, RequestOptions) SocketTextChannel.GetWebhooksAsync(RequestOptions) SocketTextChannel.CreateInviteAsync(int?, int?, bool, bool, RequestOptions) SocketTextChannel.CreateInviteToApplicationAsync(ulong, int?, int?, bool, bool, RequestOptions) SocketTextChannel.CreateInviteToApplicationAsync(DefaultApplications, int?, int?, bool, bool, RequestOptions) SocketTextChannel.CreateInviteToStreamAsync(IUser, int?, int?, bool, bool, RequestOptions) SocketTextChannel.GetInvitesAsync(RequestOptions) SocketGuildChannel.Guild SocketGuildChannel.Name SocketGuildChannel.Position SocketGuildChannel.Flags SocketGuildChannel.PermissionOverwrites SocketGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions) SocketGuildChannel.DeleteAsync(RequestOptions) SocketGuildChannel.GetPermissionOverwrite(IUser) SocketGuildChannel.GetPermissionOverwrite(IRole) SocketGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions) SocketGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) SocketGuildChannel.ToString() SocketChannel.CreatedAt SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) Remarks warning The SlowModeInterval property is not supported for news channels. Properties SlowModeInterval Gets the current slow-mode delay for this channel. public override int SlowModeInterval { get; } Property Value int An int representing the time in seconds required before the user can send another message; 0 if disabled. Remarks important This property is not supported by this type. Attempting to use this property will result in a NotSupportedException. Methods FollowAnnouncementChannelAsync(ITextChannel, RequestOptions) Follow this channel to send messages to a target channel. public Task<ulong> FollowAnnouncementChannelAsync(ITextChannel channel, RequestOptions options = null) Parameters channel ITextChannel options RequestOptions Returns Task<ulong> The Id of the created webhook. FollowAnnouncementChannelAsync(ulong, RequestOptions) Follow this channel to send messages to a target channel. public Task<ulong> FollowAnnouncementChannelAsync(ulong channelId, RequestOptions options = null) Parameters channelId ulong options RequestOptions Returns Task<ulong> The Id of the created webhook."
  },
  "api/Discord.WebSocket.SocketOnboardingInfo.html": {
    "href": "api/Discord.WebSocket.SocketOnboardingInfo.html",
    "title": "Class SocketOnboardingInfo | Discord.Net Documentation",
    "keywords": "Class SocketOnboardingInfo Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll public class SocketOnboardingInfo Inheritance object SocketOnboardingInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Discord.WebSocket.SocketOnboardingPromptCreatedAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketOnboardingPromptCreatedAuditLogData.html",
    "title": "Class SocketOnboardingPromptCreatedAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketOnboardingPromptCreatedAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to an onboarding prompt creation. public class SocketOnboardingPromptCreatedAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketOnboardingPromptCreatedAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Discord.WebSocket.SocketOnboardingPromptInfo.html": {
    "href": "api/Discord.WebSocket.SocketOnboardingPromptInfo.html",
    "title": "Class SocketOnboardingPromptInfo | Discord.Net Documentation",
    "keywords": "Class SocketOnboardingPromptInfo Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll public class SocketOnboardingPromptInfo Inheritance object SocketOnboardingPromptInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Discord.WebSocket.SocketOnboardingPromptUpdatedAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketOnboardingPromptUpdatedAuditLogData.html",
    "title": "Class SocketOnboardingPromptUpdatedAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketOnboardingPromptUpdatedAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to an onboarding prompt update. public class SocketOnboardingPromptUpdatedAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketOnboardingPromptUpdatedAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Discord.WebSocket.SocketOnboardingUpdatedAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketOnboardingUpdatedAuditLogData.html",
    "title": "Class SocketOnboardingUpdatedAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketOnboardingUpdatedAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a guild update. public class SocketOnboardingUpdatedAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketOnboardingUpdatedAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Discord.WebSocket.SocketOverwriteCreateAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketOverwriteCreateAuditLogData.html",
    "title": "Class SocketOverwriteCreateAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketOverwriteCreateAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data for a permissions overwrite creation. public class SocketOverwriteCreateAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketOverwriteCreateAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Gets the ID of the channel that the overwrite was created from. public ulong ChannelId { get; } Property Value ulong A ulong representing the snowflake identifier for the channel that the overwrite was created from. Overwrite Gets the permission overwrite object that was created. public Overwrite Overwrite { get; } Property Value Overwrite An Overwrite object representing the overwrite that was created."
  },
  "api/Discord.WebSocket.SocketOverwriteDeleteAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketOverwriteDeleteAuditLogData.html",
    "title": "Class SocketOverwriteDeleteAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketOverwriteDeleteAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to the deletion of a permission overwrite. public class SocketOverwriteDeleteAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketOverwriteDeleteAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Gets the ID of the channel that the overwrite was deleted from. public ulong ChannelId { get; } Property Value ulong A ulong representing the snowflake identifier for the channel that the overwrite was deleted from. Overwrite Gets the permission overwrite object that was deleted. public Overwrite Overwrite { get; } Property Value Overwrite An Overwrite object representing the overwrite that was deleted."
  },
  "api/Discord.WebSocket.SocketOverwriteUpdateAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketOverwriteUpdateAuditLogData.html",
    "title": "Class SocketOverwriteUpdateAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketOverwriteUpdateAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to the update of a permission overwrite. public class SocketOverwriteUpdateAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketOverwriteUpdateAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Gets the ID of the channel that the overwrite was updated from. public ulong ChannelId { get; } Property Value ulong A ulong representing the snowflake identifier for the channel that the overwrite was updated from. NewPermissions Gets the overwrite permissions after the changes. public OverwritePermissions NewPermissions { get; } Property Value OverwritePermissions An overwrite permissions object representing the overwrite permissions that the overwrite had after the changes. OldPermissions Gets the overwrite permissions before the changes. public OverwritePermissions OldPermissions { get; } Property Value OverwritePermissions An overwrite permissions object representing the overwrite permissions that the overwrite had before the changes were made. OverwriteTargetId Gets the ID of the overwrite that was updated. public ulong OverwriteTargetId { get; } Property Value ulong A ulong representing the snowflake identifier of the overwrite that was updated. OverwriteType Gets the target of the updated permission overwrite. public PermissionTarget OverwriteType { get; } Property Value PermissionTarget The target of the updated permission overwrite."
  },
  "api/Discord.WebSocket.SocketPresence.html": {
    "href": "api/Discord.WebSocket.SocketPresence.html",
    "title": "Class SocketPresence | Discord.Net Documentation",
    "keywords": "Class SocketPresence Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents the WebSocket user's presence status. This may include their online status and their activity. public class SocketPresence : IPresence Inheritance object SocketPresence Implements IPresence Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties ActiveClients Gets the set of clients where this user is currently active. public IReadOnlyCollection<ClientType> ActiveClients { get; } Property Value IReadOnlyCollection<ClientType> Activities Gets the list of activities that this user currently has available. public IReadOnlyCollection<IActivity> Activities { get; } Property Value IReadOnlyCollection<IActivity> Status Gets the current status of this user. public UserStatus Status { get; } Property Value UserStatus Methods ToString() Gets the status of the user. public override string ToString() Returns string A string that resolves to Status."
  },
  "api/Discord.WebSocket.SocketPruneAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketPruneAuditLogData.html",
    "title": "Class SocketPruneAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketPruneAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a guild prune. public class SocketPruneAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketPruneAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties MembersRemoved Gets the number of members that were kicked during the purge. public int MembersRemoved { get; } Property Value int An int representing the number of members that were removed from this guild for having not been seen within . PruneDays Gets the threshold for a guild member to not be kicked. public int PruneDays { get; } Property Value int An int representing the amount of days that a member must have been seen in the server, to avoid being kicked. (i.e. If a user has not been seen for more than , they will be kicked from the server)"
  },
  "api/Discord.WebSocket.SocketReaction.html": {
    "href": "api/Discord.WebSocket.SocketReaction.html",
    "title": "Class SocketReaction | Discord.Net Documentation",
    "keywords": "Class SocketReaction Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a WebSocket-based reaction object. public class SocketReaction : IReaction Inheritance object SocketReaction Implements IReaction Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BurstColors Gets colors used for the super reaction. public IReadOnlyCollection<Color> BurstColors { get; } Property Value IReadOnlyCollection<Color> Remarks The collection will be empty if the reaction is a normal reaction. Channel Gets the channel where the reaction takes place in. public ISocketMessageChannel Channel { get; } Property Value ISocketMessageChannel A WebSocket-based message channel. Emote The IEmote used in the reaction. public IEmote Emote { get; } Property Value IEmote IsBurst Gets whether the reaction is a super reaction. public bool IsBurst { get; } Property Value bool Message Gets the message that has been reacted to if possible. public Optional<SocketUserMessage> Message { get; } Property Value Optional<SocketUserMessage> A WebSocket-based message where possible; a value is not always returned. See Also Optional<T> MessageId Gets the ID of the message that has been reacted to. public ulong MessageId { get; } Property Value ulong A message snowflake identifier associated with the message. ReactionType Gets the type of the reaction. public ReactionType ReactionType { get; } Property Value ReactionType User Gets the user who added the reaction if possible. public Optional<IUser> User { get; } Property Value Optional<IUser> A user object where possible; a value is not always returned. Remarks This property attempts to retrieve a WebSocket-cached user that is responsible for this reaction from the client. In other words, when the user is not in the WebSocket cache, this property may not contain a value, leaving the only identifiable information to be UserId. If you wish to obtain an identifiable user object, consider utilizing DiscordRestClient which will attempt to retrieve the user from REST. See Also Optional<T> UserId Gets the ID of the user who added the reaction. public ulong UserId { get; } Property Value ulong A user snowflake identifier associated with the user. Remarks This property retrieves the snowflake identifier of the user responsible for this reaction. This property will always contain the user identifier in event that User cannot be retrieved. Methods Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object other) Parameters other object Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/Discord.WebSocket.SocketRole.html": {
    "href": "api/Discord.WebSocket.SocketRole.html",
    "title": "Class SocketRole | Discord.Net Documentation",
    "keywords": "Class SocketRole Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a WebSocket-based role to be given to a guild user. public class SocketRole : SocketEntity<ulong>, IRole, ISnowflakeEntity, IEntity<ulong>, IDeletable, IMentionable, IComparable<IRole> Inheritance object SocketEntity<ulong> SocketRole Implements IRole ISnowflakeEntity IEntity<ulong> IDeletable IMentionable IComparable<IRole> Inherited Members SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Color Gets the color given to users of this role. public Color Color { get; } Property Value Color A Color struct representing the color of this role. CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. Emoji Gets the unicode emoji of this role. public Emoji Emoji { get; } Property Value Emoji Remarks This field is mutually exclusive with Icon, either icon is set or emoji is set. Flags Gets flags related to this role. public RoleFlags Flags { get; } Property Value RoleFlags Guild Gets the guild that owns this role. public SocketGuild Guild { get; } Property Value SocketGuild A SocketGuild representing the parent guild of this role. Icon Gets the icon of this role. public string Icon { get; } Property Value string A string containing the hash of this role's icon. IsEveryone Returns a value that determines if the role is an @everyone role. public bool IsEveryone { get; } Property Value bool true if the role is @everyone; otherwise false. IsHoisted Gets a value that indicates whether the role can be separated in the user list. public bool IsHoisted { get; } Property Value bool true if users of this role are separated in the user list; otherwise false. IsManaged Gets a value that indicates whether the role is managed by Discord. public bool IsManaged { get; } Property Value bool true if this role is automatically managed by Discord; otherwise false. IsMentionable Gets a value that indicates whether the role is mentionable. public bool IsMentionable { get; } Property Value bool true if this role may be mentioned in messages; otherwise false. Members Returns an IEnumerable containing all SocketGuildUser that have this role. public IEnumerable<SocketGuildUser> Members { get; } Property Value IEnumerable<SocketGuildUser> Mention Returns a special string used to mention this object. public string Mention { get; } Property Value string A string that is recognized by Discord as a mention (e.g. <@168693960628371456>). Name Gets the name of this role. public string Name { get; } Property Value string A string containing the name of this role. Permissions Gets the permissions granted to members of this role. public GuildPermissions Permissions { get; } Property Value GuildPermissions A GuildPermissions struct that this role possesses. Position Gets this role's position relative to other roles in the same guild. public int Position { get; } Property Value int An int representing the position of the role in the role list of the guild. Tags Gets the tags related to this role. public RoleTags Tags { get; } Property Value RoleTags A RoleTags object containing all tags related to this role. Methods CompareTo(IRole) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(IRole role) Parameters role IRole Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. DeleteAsync(RequestOptions) Deletes this object and all its children. public Task DeleteAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task GetIconUrl() Gets the image url of the icon role. public string GetIconUrl() Returns string An image url of the icon role. ModifyAsync(Action<RoleProperties>, RequestOptions) Modifies this role. public Task ModifyAsync(Action<RoleProperties> func, RequestOptions options = null) Parameters func Action<RoleProperties> A delegate containing the properties to modify the role with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies this role with the specified properties. To see an example of this method and what properties are available, please refer to RoleProperties. ToString() Gets the name of the role. public override string ToString() Returns string A string that resolves to Name."
  },
  "api/Discord.WebSocket.SocketRoleCreateAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketRoleCreateAuditLogData.html",
    "title": "Class SocketRoleCreateAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketRoleCreateAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a role creation. public class SocketRoleCreateAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketRoleCreateAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Properties Gets the role information that was created. public SocketRoleEditInfo Properties { get; } Property Value SocketRoleEditInfo RoleId Gets the ID of the role that was created. public ulong RoleId { get; } Property Value ulong"
  },
  "api/Discord.WebSocket.SocketRoleDeleteAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketRoleDeleteAuditLogData.html",
    "title": "Class SocketRoleDeleteAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketRoleDeleteAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data relating to a role deletion. public class SocketRoleDeleteAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketRoleDeleteAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Properties Gets the role information that was deleted. public SocketRoleEditInfo Properties { get; } Property Value SocketRoleEditInfo RoleId Gets the ID of the role that was deleted. public ulong RoleId { get; } Property Value ulong"
  },
  "api/Discord.WebSocket.SocketRoleEditInfo.html": {
    "href": "api/Discord.WebSocket.SocketRoleEditInfo.html",
    "title": "Struct SocketRoleEditInfo | Discord.Net Documentation",
    "keywords": "Struct SocketRoleEditInfo Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents information for a role edit. public struct SocketRoleEditInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Color Gets the color of this role. public readonly Color? Color { get; } Property Value Color? A color object representing the color assigned to this role; null if this role does not have a color. Hoist Gets a value that indicates whether this role is hoisted (i.e. its members will appear in a separate section on the user list). public readonly bool? Hoist { get; } Property Value bool? true if this role's members will appear in a separate section in the user list; otherwise false; null if this is not mentioned in this entry. IconId Gets the icon of this role. public readonly string IconId { get; } Property Value string A string containing the hash of this role's icon. Remarks null if the value was not updated in this entry. Mentionable Gets a value that indicates whether this role is mentionable. public readonly bool? Mentionable { get; } Property Value bool? true if other members can mention this role in a text channel; otherwise false; null if this is not mentioned in this entry. Name Gets the name of this role. public readonly string Name { get; } Property Value string A string containing the name of this role. Permissions Gets the permissions assigned to this role. public readonly GuildPermissions? Permissions { get; } Property Value GuildPermissions? A guild permissions object representing the permissions that have been assigned to this role; null if no permissions have been assigned."
  },
  "api/Discord.WebSocket.SocketRoleUpdateAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketRoleUpdateAuditLogData.html",
    "title": "Class SocketRoleUpdateAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketRoleUpdateAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a role update. public class SocketRoleUpdateAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketRoleUpdateAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After Gets the role information after the changes. public SocketRoleEditInfo After { get; } Property Value SocketRoleEditInfo A role information object containing the role information after the changes were made. Before Gets the role information before the changes. public SocketRoleEditInfo Before { get; } Property Value SocketRoleEditInfo A role information object containing the role information before the changes were made. RoleId Gets the ID of the role that was changed. public ulong RoleId { get; } Property Value ulong A ulong representing the snowflake identifier of the role that was changed."
  },
  "api/Discord.WebSocket.SocketScheduledEventCreateAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketScheduledEventCreateAuditLogData.html",
    "title": "Class SocketScheduledEventCreateAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketScheduledEventCreateAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a scheduled event creation. public class SocketScheduledEventCreateAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketScheduledEventCreateAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Gets the snowflake id of the channel the event is associated with. public ulong? ChannelId { get; } Property Value ulong? Description Gets the description of the event. null if none is set. public string Description { get; } Property Value string EntityId Gets the snowflake id of the entity associated with the event (stage / void / external). public ulong? EntityId { get; } Property Value ulong? EntityType Gets the type of the entity associated with the event (stage / void / external). public GuildScheduledEventType EntityType { get; } Property Value GuildScheduledEventType Id Gets the snowflake id of the event. public ulong Id { get; } Property Value ulong Image Gets the image hash of the image that was attached to the event. Null if not set. public string Image { get; } Property Value string Location Gets the metadata for the entity associated with the event. public string Location { get; } Property Value string Name Gets name of the event. public string Name { get; } Property Value string PrivacyLevel Gets the privacy level of the event. public GuildScheduledEventPrivacyLevel PrivacyLevel { get; } Property Value GuildScheduledEventPrivacyLevel ScheduledEndTime Gets the time the event was scheduled to end. public DateTimeOffset? ScheduledEndTime { get; } Property Value DateTimeOffset? ScheduledStartTime Gets the time the event was scheduled for. public DateTimeOffset? ScheduledStartTime { get; } Property Value DateTimeOffset? Status Gets the status of the event. public GuildScheduledEventStatus Status { get; } Property Value GuildScheduledEventStatus"
  },
  "api/Discord.WebSocket.SocketScheduledEventDeleteAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketScheduledEventDeleteAuditLogData.html",
    "title": "Class SocketScheduledEventDeleteAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketScheduledEventDeleteAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a scheduled event deletion. public class SocketScheduledEventDeleteAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketScheduledEventDeleteAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Gets the snowflake id of the channel the event is associated with. public ulong? ChannelId { get; } Property Value ulong? Description Gets the description of the event. null if none is set. public string Description { get; } Property Value string EntityId Gets the snowflake id of the entity associated with the event (stage / void / external). public ulong? EntityId { get; } Property Value ulong? EntityType Gets the type of the entity associated with the event (stage / void / external). public GuildScheduledEventType? EntityType { get; } Property Value GuildScheduledEventType? Id Gets the snowflake id of the event. public ulong Id { get; } Property Value ulong Image Gets the image hash of the image that was attached to the event. Null if not set. public string Image { get; } Property Value string Location Gets the metadata for the entity associated with the event. public string Location { get; } Property Value string Name Gets name of the event. public string Name { get; } Property Value string PrivacyLevel Gets the privacy level of the event. public GuildScheduledEventPrivacyLevel? PrivacyLevel { get; } Property Value GuildScheduledEventPrivacyLevel? ScheduledEndTime Gets the time the event was scheduled to end. public DateTimeOffset? ScheduledEndTime { get; } Property Value DateTimeOffset? ScheduledStartTime Gets the time the event was scheduled for. public DateTimeOffset? ScheduledStartTime { get; } Property Value DateTimeOffset? Status Gets the status of the event. public GuildScheduledEventStatus? Status { get; } Property Value GuildScheduledEventStatus?"
  },
  "api/Discord.WebSocket.SocketScheduledEventInfo.html": {
    "href": "api/Discord.WebSocket.SocketScheduledEventInfo.html",
    "title": "Class SocketScheduledEventInfo | Discord.Net Documentation",
    "keywords": "Class SocketScheduledEventInfo Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents information for a scheduled event. public class SocketScheduledEventInfo Inheritance object SocketScheduledEventInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Gets the snowflake id of the channel the event is associated with. public ulong? ChannelId { get; } Property Value ulong? Description Gets the description of the event. null if none is set. public string Description { get; } Property Value string EntityId Gets the snowflake id of the entity associated with the event (stage / void / external). public ulong? EntityId { get; } Property Value ulong? EntityType Gets the type of the entity associated with the event (stage / void / external). public GuildScheduledEventType? EntityType { get; } Property Value GuildScheduledEventType? Image Gets the image hash of the image that was attached to the event. Null if not set. public string Image { get; } Property Value string Location Gets the metadata for the entity associated with the event. public string Location { get; } Property Value string Name Gets name of the event. public string Name { get; } Property Value string PrivacyLevel Gets the privacy level of the event. public GuildScheduledEventPrivacyLevel? PrivacyLevel { get; } Property Value GuildScheduledEventPrivacyLevel? ScheduledEndTime Gets the time the event was scheduled to end. public DateTimeOffset? ScheduledEndTime { get; } Property Value DateTimeOffset? ScheduledStartTime Gets the time the event was scheduled for. public DateTimeOffset? ScheduledStartTime { get; } Property Value DateTimeOffset? Status Gets the status of the event. public GuildScheduledEventStatus? Status { get; } Property Value GuildScheduledEventStatus?"
  },
  "api/Discord.WebSocket.SocketScheduledEventUpdateAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketScheduledEventUpdateAuditLogData.html",
    "title": "Class SocketScheduledEventUpdateAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketScheduledEventUpdateAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a scheduled event updates. public class SocketScheduledEventUpdateAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketScheduledEventUpdateAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After Gets the state after the change. public SocketScheduledEventInfo After { get; } Property Value SocketScheduledEventInfo Before Gets the state before the change. public SocketScheduledEventInfo Before { get; } Property Value SocketScheduledEventInfo Id Gets the snowflake id of the event. public ulong Id { get; } Property Value ulong"
  },
  "api/Discord.WebSocket.SocketSelfUser.html": {
    "href": "api/Discord.WebSocket.SocketSelfUser.html",
    "title": "Class SocketSelfUser | Discord.Net Documentation",
    "keywords": "Class SocketSelfUser Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents the logged-in WebSocket-based user. public class SocketSelfUser : SocketUser, ISelfUser, IUser, ISnowflakeEntity, IEntity<ulong>, IMentionable, IPresence Inheritance object SocketEntity<ulong> SocketUser SocketSelfUser Implements ISelfUser IUser ISnowflakeEntity IEntity<ulong> IMentionable IPresence Inherited Members SocketUser.PublicFlags SocketUser.CreatedAt SocketUser.Discriminator SocketUser.Mention SocketUser.Status SocketUser.ActiveClients SocketUser.Activities SocketUser.AvatarDecorationHash SocketUser.AvatarDecorationSkuId SocketUser.MutualGuilds SocketUser.CreateDMChannelAsync(RequestOptions) SocketUser.GetAvatarUrl(ImageFormat, ushort) SocketUser.GetDefaultAvatarUrl() SocketUser.GetDisplayAvatarUrl(ImageFormat, ushort) SocketUser.GetAvatarDecorationUrl() SocketUser.ToString() SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods UserExtensions.SendFileAsync(IUser, FileAttachment, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, Stream, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFilesAsync(IUser, IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendMessageAsync(IUser, string, bool, Embed, RequestOptions, AllowedMentions, MessageComponent, Embed[]) Properties AvatarId Gets the identifier of this user's avatar. public override string AvatarId { get; } Property Value string DiscriminatorValue Gets the per-username unique ID for this user. This will return 0 for users who have migrated to new username system. public override ushort DiscriminatorValue { get; } Property Value ushort Email Gets the email associated with this user. public string Email { get; } Property Value string Flags Gets the flags that are applied to a user's account. public UserProperties Flags { get; } Property Value UserProperties The value of flags for this user. Remarks This value is determined by bitwise OR-ing UserProperties values together. GlobalName Gets the user's display name, if it is set. For bots, this will get the application name. public override string GlobalName { get; } Property Value string Remarks This property will be null if user has no display name set. IsBot Gets a value that indicates whether this user is identified as a bot. public override bool IsBot { get; } Property Value bool true if the user is a bot application; otherwise false. Remarks This property retrieves a value that indicates whether this user is a registered bot application (indicated by the blue BOT tag within the official chat client). IsMfaEnabled Indicates whether or not this user has MFA enabled on their account. public bool IsMfaEnabled { get; } Property Value bool true if this user has enabled multi-factor authentication on their account; false if not. IsVerified Indicates whether or not this user has their email verified. public bool IsVerified { get; } Property Value bool true if this user's email has been verified; false if not. IsWebhook Gets a value that indicates whether this user is a webhook user. public override bool IsWebhook { get; } Property Value bool true if the user is a webhook; otherwise false. Locale Gets the user's chosen language option. public string Locale { get; } Property Value string The IETF language tag of the user's chosen region, if provided. For example, a locale of \"English, US\" is \"en-US\", \"Chinese (Taiwan)\" is \"zh-TW\", etc. PremiumType Gets the type of Nitro subscription that is active on this user's account. public PremiumType PremiumType { get; } Property Value PremiumType The type of Nitro subscription the user subscribes to, if any. Remarks This information may only be available with the identify OAuth scope. Username Gets the username for this user. public override string Username { get; } Property Value string Methods ModifyAsync(Action<SelfUserProperties>, RequestOptions) Modifies the user's properties. public Task ModifyAsync(Action<SelfUserProperties> func, RequestOptions options = null) Parameters func Action<SelfUserProperties> options RequestOptions Returns Task"
  },
  "api/Discord.WebSocket.SocketSlashCommand.html": {
    "href": "api/Discord.WebSocket.SocketSlashCommand.html",
    "title": "Class SocketSlashCommand | Discord.Net Documentation",
    "keywords": "Class SocketSlashCommand Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a Websocket-based slash command received over the gateway. public class SocketSlashCommand : SocketCommandBase, ISlashCommandInteraction, IApplicationCommandInteraction, IDiscordInteraction, ISnowflakeEntity, IEntity<ulong> Inheritance object SocketEntity<ulong> SocketInteraction SocketCommandBase SocketSlashCommand Implements ISlashCommandInteraction IApplicationCommandInteraction IDiscordInteraction ISnowflakeEntity IEntity<ulong> Inherited Members SocketCommandBase.CommandName SocketCommandBase.CommandId SocketCommandBase.HasResponded SocketCommandBase.RespondAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketCommandBase.RespondWithModalAsync(Modal, RequestOptions) SocketCommandBase.RespondWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketCommandBase.FollowupAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketCommandBase.FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketCommandBase.DeferAsync(bool, RequestOptions) SocketInteraction.Channel SocketInteraction.ChannelId SocketInteraction.User SocketInteraction.Type SocketInteraction.Token SocketInteraction.UserLocale SocketInteraction.GuildLocale SocketInteraction.Version SocketInteraction.CreatedAt SocketInteraction.IsValidToken SocketInteraction.IsDMInteraction SocketInteraction.GuildId SocketInteraction.ApplicationId SocketInteraction.Entitlements SocketInteraction.RespondWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.RespondWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.RespondWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.GetOriginalResponseAsync(RequestOptions) SocketInteraction.ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) SocketInteraction.DeleteOriginalResponseAsync(RequestOptions) SocketInteraction.RespondWithPremiumRequiredAsync(RequestOptions) SocketInteraction.GetChannelAsync(RequestOptions) SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, InteractionService, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, T, RequestOptions, Action<ModalBuilder>) Properties Data Gets the data associated with this interaction. public SocketSlashCommandData Data { get; } Property Value SocketSlashCommandData"
  },
  "api/Discord.WebSocket.SocketSlashCommandData.html": {
    "href": "api/Discord.WebSocket.SocketSlashCommandData.html",
    "title": "Class SocketSlashCommandData | Discord.Net Documentation",
    "keywords": "Class SocketSlashCommandData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents the data tied with the SocketSlashCommand interaction. public class SocketSlashCommandData : SocketCommandBaseData<SocketSlashCommandDataOption>, IEntity<ulong>, IApplicationCommandInteractionData, IDiscordInteractionData Inheritance object SocketEntity<ulong> SocketCommandBaseData<SocketSlashCommandDataOption> SocketSlashCommandData Implements IEntity<ulong> IApplicationCommandInteractionData IDiscordInteractionData Inherited Members SocketCommandBaseData<SocketSlashCommandDataOption>.Name SocketCommandBaseData<SocketSlashCommandDataOption>.Options SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Discord.WebSocket.SocketSlashCommandDataOption.html": {
    "href": "api/Discord.WebSocket.SocketSlashCommandDataOption.html",
    "title": "Class SocketSlashCommandDataOption | Discord.Net Documentation",
    "keywords": "Class SocketSlashCommandDataOption Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a Websocket-based IApplicationCommandInteractionDataOption received by the gateway. public class SocketSlashCommandDataOption : IApplicationCommandInteractionDataOption Inheritance object SocketSlashCommandDataOption Implements IApplicationCommandInteractionDataOption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets the name of the parameter. public string Name { get; } Property Value string Options Gets the sub command options received for this sub command group. public IReadOnlyCollection<SocketSlashCommandDataOption> Options { get; } Property Value IReadOnlyCollection<SocketSlashCommandDataOption> Type Gets the type of this data's option. public ApplicationCommandOptionType Type { get; } Property Value ApplicationCommandOptionType Value Gets the value of the pair. note This objects type can be any one of the option types in ApplicationCommandOptionType. public object Value { get; } Property Value object Operators explicit operator bool(SocketSlashCommandDataOption) public static explicit operator bool(SocketSlashCommandDataOption option) Parameters option SocketSlashCommandDataOption Returns bool explicit operator int(SocketSlashCommandDataOption) public static explicit operator int(SocketSlashCommandDataOption option) Parameters option SocketSlashCommandDataOption Returns int explicit operator string(SocketSlashCommandDataOption) public static explicit operator string(SocketSlashCommandDataOption option) Parameters option SocketSlashCommandDataOption Returns string"
  },
  "api/Discord.WebSocket.SocketStageChannel.html": {
    "href": "api/Discord.WebSocket.SocketStageChannel.html",
    "title": "Class SocketStageChannel | Discord.Net Documentation",
    "keywords": "Class SocketStageChannel Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a stage channel received over the gateway. public class SocketStageChannel : SocketVoiceChannel, ISocketMessageChannel, ISocketAudioChannel, IStageChannel, IVoiceChannel, ITextChannel, IMessageChannel, IMentionable, INestedChannel, IIntegrationChannel, IGuildChannel, IDeletable, IAudioChannel, IChannel, ISnowflakeEntity, IEntity<ulong> Inheritance object SocketEntity<ulong> SocketChannel SocketGuildChannel SocketTextChannel SocketVoiceChannel SocketStageChannel Implements ISocketMessageChannel ISocketAudioChannel IStageChannel IVoiceChannel ITextChannel IMessageChannel IMentionable INestedChannel IIntegrationChannel IGuildChannel IDeletable IAudioChannel IChannel ISnowflakeEntity IEntity<ulong> Inherited Members SocketVoiceChannel.Bitrate SocketVoiceChannel.UserLimit SocketVoiceChannel.RTCRegion SocketVoiceChannel.VideoQualityMode SocketVoiceChannel.ConnectedUsers SocketVoiceChannel.ModifyAsync(Action<VoiceChannelProperties>, RequestOptions) SocketVoiceChannel.ConnectAsync(bool, bool, bool) SocketVoiceChannel.DisconnectAsync() SocketVoiceChannel.ModifyAsync(Action<AudioChannelProperties>, RequestOptions) SocketVoiceChannel.GetUser(ulong) SocketVoiceChannel.CreateThreadAsync(string, ThreadType, ThreadArchiveDuration, IMessage, bool?, int?, RequestOptions) SocketVoiceChannel.GetActiveThreadsAsync(RequestOptions) SocketTextChannel.Topic SocketTextChannel.SlowModeInterval SocketTextChannel.CategoryId SocketTextChannel.DefaultSlowModeInterval SocketTextChannel.Category SocketTextChannel.SyncPermissionsAsync(RequestOptions) SocketTextChannel.IsNsfw SocketTextChannel.DefaultArchiveDuration SocketTextChannel.Mention SocketTextChannel.CachedMessages SocketTextChannel.Users SocketTextChannel.Threads SocketTextChannel.ModifyAsync(Action<TextChannelProperties>, RequestOptions) SocketTextChannel.GetCachedMessage(ulong) SocketTextChannel.GetMessageAsync(ulong, RequestOptions) SocketTextChannel.GetMessagesAsync(int, RequestOptions) SocketTextChannel.GetMessagesAsync(ulong, Direction, int, RequestOptions) SocketTextChannel.GetMessagesAsync(IMessage, Direction, int, RequestOptions) SocketTextChannel.GetCachedMessages(int) SocketTextChannel.GetCachedMessages(ulong, Direction, int) SocketTextChannel.GetCachedMessages(IMessage, Direction, int) SocketTextChannel.GetPinnedMessagesAsync(RequestOptions) SocketTextChannel.SendMessageAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) SocketTextChannel.SendFileAsync(string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) SocketTextChannel.SendFileAsync(Stream, string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) SocketTextChannel.SendFileAsync(FileAttachment, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) SocketTextChannel.SendFilesAsync(IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) SocketTextChannel.DeleteMessagesAsync(IEnumerable<IMessage>, RequestOptions) SocketTextChannel.DeleteMessagesAsync(IEnumerable<ulong>, RequestOptions) SocketTextChannel.ModifyMessageAsync(ulong, Action<MessageProperties>, RequestOptions) SocketTextChannel.DeleteMessageAsync(ulong, RequestOptions) SocketTextChannel.DeleteMessageAsync(IMessage, RequestOptions) SocketTextChannel.TriggerTypingAsync(RequestOptions) SocketTextChannel.EnterTypingState(RequestOptions) SocketTextChannel.CreateWebhookAsync(string, Stream, RequestOptions) SocketTextChannel.GetWebhookAsync(ulong, RequestOptions) SocketTextChannel.GetWebhooksAsync(RequestOptions) SocketTextChannel.CreateInviteAsync(int?, int?, bool, bool, RequestOptions) SocketTextChannel.CreateInviteToApplicationAsync(ulong, int?, int?, bool, bool, RequestOptions) SocketTextChannel.CreateInviteToApplicationAsync(DefaultApplications, int?, int?, bool, bool, RequestOptions) SocketTextChannel.CreateInviteToStreamAsync(IUser, int?, int?, bool, bool, RequestOptions) SocketTextChannel.GetInvitesAsync(RequestOptions) SocketGuildChannel.Guild SocketGuildChannel.Name SocketGuildChannel.Position SocketGuildChannel.Flags SocketGuildChannel.PermissionOverwrites SocketGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions) SocketGuildChannel.DeleteAsync(RequestOptions) SocketGuildChannel.GetPermissionOverwrite(IUser) SocketGuildChannel.GetPermissionOverwrite(IRole) SocketGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions) SocketGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) SocketGuildChannel.ToString() SocketChannel.CreatedAt SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties IsDiscoverableDisabled Gets whether or not stage discovery is disabled. public bool? IsDiscoverableDisabled { get; } Property Value bool? IsLive Gets whether or not the stage is live. public bool IsLive { get; } Property Value bool IsSpeaker Returns true if the current user is a speaker within the stage, otherwise false. public bool IsSpeaker { get; } Property Value bool IsTextInVoice Gets whether or not the guild has Text-In-Voice enabled and the voice channel is a TiV channel. [Obsolete(\"This property is no longer used because Discord enabled text-in-stage for all channels.\")] public override bool IsTextInVoice { get; } Property Value bool Remarks Discord currently doesn't have a way to disable Text-In-Voice yet so this field is always true on SocketVoiceChannels and true on SocketStageChannels. PrivacyLevel Gets the StagePrivacyLevel of the current stage. public StagePrivacyLevel? PrivacyLevel { get; } Property Value StagePrivacyLevel? Remarks If the stage isn't live then this property will be set to null. Speakers Gets a collection of users who are speakers within the stage. public IReadOnlyCollection<SocketGuildUser> Speakers { get; } Property Value IReadOnlyCollection<SocketGuildUser> Status Gets the voice channel status set in this channel. null if it is not set. public override string Status { get; } Property Value string Remarks This property is not supported in stage channels and will always return Empty. Methods BecomeSpeakerAsync(RequestOptions) Makes the current user become a speaker within a stage. public Task BecomeSpeakerAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous speaker modify operation. ModifyInstanceAsync(Action<StageInstanceProperties>, RequestOptions) Modifies the current stage instance. public Task ModifyInstanceAsync(Action<StageInstanceProperties> func, RequestOptions options = null) Parameters func Action<StageInstanceProperties> The properties to modify the stage instance with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modify operation. MoveToSpeakerAsync(IGuildUser, RequestOptions) Makes a user a speaker within a stage. public Task MoveToSpeakerAsync(IGuildUser user, RequestOptions options = null) Parameters user IGuildUser The user to make the speaker. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous move operation. RemoveFromSpeakerAsync(IGuildUser, RequestOptions) Removes a user from speaking. public Task RemoveFromSpeakerAsync(IGuildUser user, RequestOptions options = null) Parameters user IGuildUser The user to remove from speaking. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous remove operation. RequestToSpeakAsync(RequestOptions) Indicates that the bot would like to speak within a stage channel. public Task RequestToSpeakAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous request to speak operation. SetStatusAsync(string, RequestOptions) Sets the voice channel status in the current channel. public override Task SetStatusAsync(string status, RequestOptions options = null) Parameters status string The string to set as status. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks Setting voice channel status is not supported in stage channels. Exceptions NotSupportedException Setting voice channel status is not supported in stage channels. StartStageAsync(string, StagePrivacyLevel, RequestOptions) Starts the stage, creating a stage instance. public Task StartStageAsync(string topic, StagePrivacyLevel privacyLevel = StagePrivacyLevel.GuildOnly, RequestOptions options = null) Parameters topic string The topic for the stage/ privacyLevel StagePrivacyLevel The privacy level of the stage. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous start operation. StopSpeakingAsync(RequestOptions) Makes the current user a listener. public Task StopSpeakingAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous stop operation. StopStageAsync(RequestOptions) Stops the stage, deleting the stage instance. public Task StopStageAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous stop operation."
  },
  "api/Discord.WebSocket.SocketStageInfo.html": {
    "href": "api/Discord.WebSocket.SocketStageInfo.html",
    "title": "Class SocketStageInfo | Discord.Net Documentation",
    "keywords": "Class SocketStageInfo Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents information for a stage. public class SocketStageInfo Inheritance object SocketStageInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties PrivacyLevel Gets the privacy level of the stage channel. public StagePrivacyLevel? PrivacyLevel { get; } Property Value StagePrivacyLevel? Topic Gets the topic of the stage channel. public string Topic { get; } Property Value string"
  },
  "api/Discord.WebSocket.SocketStageInstanceCreateAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketStageInstanceCreateAuditLogData.html",
    "title": "Class SocketStageInstanceCreateAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketStageInstanceCreateAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a stage going live. public class SocketStageInstanceCreateAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketStageInstanceCreateAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties PrivacyLevel Gets the privacy level of the stage channel. public StagePrivacyLevel PrivacyLevel { get; } Property Value StagePrivacyLevel StageChannelId Gets the Id of the stage channel. public ulong StageChannelId { get; } Property Value ulong Topic Gets the topic of the stage channel. public string Topic { get; } Property Value string"
  },
  "api/Discord.WebSocket.SocketStageInstanceDeleteAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketStageInstanceDeleteAuditLogData.html",
    "title": "Class SocketStageInstanceDeleteAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketStageInstanceDeleteAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a stage instance deleted. public class SocketStageInstanceDeleteAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketStageInstanceDeleteAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties PrivacyLevel Gets the privacy level of the stage channel. public StagePrivacyLevel PrivacyLevel { get; } Property Value StagePrivacyLevel StageChannelId Gets the Id of the stage channel. public ulong StageChannelId { get; } Property Value ulong Topic Gets the topic of the stage channel. public string Topic { get; } Property Value string"
  },
  "api/Discord.WebSocket.SocketStageInstanceUpdatedAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketStageInstanceUpdatedAuditLogData.html",
    "title": "Class SocketStageInstanceUpdatedAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketStageInstanceUpdatedAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a stage instance update. public class SocketStageInstanceUpdatedAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketStageInstanceUpdatedAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After Gets the stage information after the changes. public SocketStageInfo After { get; } Property Value SocketStageInfo Before Gets the stage information before the changes. public SocketStageInfo Before { get; } Property Value SocketStageInfo StageChannelId Gets the Id of the stage channel. public ulong StageChannelId { get; } Property Value ulong"
  },
  "api/Discord.WebSocket.SocketSticker.html": {
    "href": "api/Discord.WebSocket.SocketSticker.html",
    "title": "Class SocketSticker | Discord.Net Documentation",
    "keywords": "Class SocketSticker Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a general sticker received over the gateway. public class SocketSticker : SocketEntity<ulong>, IEntity<ulong>, ISticker, IStickerItem Inheritance object SocketEntity<ulong> SocketSticker Implements IEntity<ulong> ISticker IStickerItem Derived SocketCustomSticker SocketUnknownSticker Inherited Members SocketEntity<ulong>.Id object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description Gets the description of this sticker. public virtual string Description { get; } Property Value string A string with the description of this sticker. Format Gets the format type of this sticker. public StickerFormatType Format { get; protected set; } Property Value StickerFormatType A StickerFormatType with the format type of this sticker. IsAvailable Gets whether this guild sticker can be used, may be false due to loss of Server Boosts. public virtual bool? IsAvailable { get; protected set; } Property Value bool? Name Gets the name of this sticker. public string Name { get; protected set; } Property Value string A string with the name of this sticker. PackId Gets the ID of the pack of this sticker. public virtual ulong PackId { get; } Property Value ulong A snowflake ID associated with the pack of this sticker. SortOrder Gets the standard sticker's sort order within its pack. public virtual int? SortOrder { get; } Property Value int? Tags Gets the list of tags of this sticker. public virtual IReadOnlyCollection<string> Tags { get; } Property Value IReadOnlyCollection<string> A read-only list with the tags of this sticker. Type Gets the type of this sticker. public virtual StickerType Type { get; } Property Value StickerType Methods Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetStickerUrl() Gets the image url for this sticker. public string GetStickerUrl() Returns string"
  },
  "api/Discord.WebSocket.SocketStickerCreatedAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketStickerCreatedAuditLogData.html",
    "title": "Class SocketStickerCreatedAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketStickerCreatedAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a sticker creation. public class SocketStickerCreatedAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketStickerCreatedAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data Gets the sticker information after the changes. public SocketStickerInfo Data { get; } Property Value SocketStickerInfo"
  },
  "api/Discord.WebSocket.SocketStickerDeletedAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketStickerDeletedAuditLogData.html",
    "title": "Class SocketStickerDeletedAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketStickerDeletedAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a sticker removal. public class SocketStickerDeletedAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketStickerDeletedAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data Gets the sticker information before the changes. public SocketStickerInfo Data { get; } Property Value SocketStickerInfo"
  },
  "api/Discord.WebSocket.SocketStickerInfo.html": {
    "href": "api/Discord.WebSocket.SocketStickerInfo.html",
    "title": "Class SocketStickerInfo | Discord.Net Documentation",
    "keywords": "Class SocketStickerInfo Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents information for a guild. public class SocketStickerInfo Inheritance object SocketStickerInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description Gets the description of the sticker. null if the value was not updated in this entry. public string Description { get; set; } Property Value string Name Gets the name of the sticker. null if the value was not updated in this entry. public string Name { get; set; } Property Value string Tags Gets tags of the sticker. null if the value was not updated in this entry. public string Tags { get; set; } Property Value string"
  },
  "api/Discord.WebSocket.SocketStickerUpdatedAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketStickerUpdatedAuditLogData.html",
    "title": "Class SocketStickerUpdatedAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketStickerUpdatedAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a sticker update. public class SocketStickerUpdatedAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketStickerUpdatedAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After Gets the sticker information after the changes. public SocketStickerInfo After { get; } Property Value SocketStickerInfo Before Gets the sticker information before the changes. public SocketStickerInfo Before { get; } Property Value SocketStickerInfo"
  },
  "api/Discord.WebSocket.SocketSystemMessage.html": {
    "href": "api/Discord.WebSocket.SocketSystemMessage.html",
    "title": "Class SocketSystemMessage | Discord.Net Documentation",
    "keywords": "Class SocketSystemMessage Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a WebSocket-based message sent by the system. public class SocketSystemMessage : SocketMessage, ISystemMessage, IMessage, ISnowflakeEntity, IEntity<ulong>, IDeletable Inheritance object SocketEntity<ulong> SocketMessage SocketSystemMessage Implements ISystemMessage IMessage ISnowflakeEntity IEntity<ulong> IDeletable Inherited Members SocketMessage.Author SocketMessage.Channel SocketMessage.Source SocketMessage.Content SocketMessage.CleanContent SocketMessage.CreatedAt SocketMessage.IsTTS SocketMessage.IsPinned SocketMessage.IsSuppressed SocketMessage.EditedTimestamp SocketMessage.MentionedEveryone SocketMessage.Activity SocketMessage.Application SocketMessage.Reference SocketMessage.Components SocketMessage.Interaction SocketMessage.Flags SocketMessage.Type SocketMessage.RoleSubscriptionData SocketMessage.Thread SocketMessage.Attachments SocketMessage.Embeds SocketMessage.MentionedChannels SocketMessage.MentionedRoles SocketMessage.Tags SocketMessage.Stickers SocketMessage.Reactions SocketMessage.MentionedUsers SocketMessage.Timestamp SocketMessage.DeleteAsync(RequestOptions) SocketMessage.ToString() SocketMessage.AddReactionAsync(IEmote, RequestOptions) SocketMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions) SocketMessage.RemoveReactionAsync(IEmote, ulong, RequestOptions) SocketMessage.RemoveAllReactionsAsync(RequestOptions) SocketMessage.RemoveAllReactionsForEmoteAsync(IEmote, RequestOptions) SocketMessage.GetReactionUsersAsync(IEmote, int, RequestOptions, ReactionType) SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods MessageExtensions.GetJumpUrl(IMessage)"
  },
  "api/Discord.WebSocket.SocketTextChannel.html": {
    "href": "api/Discord.WebSocket.SocketTextChannel.html",
    "title": "Class SocketTextChannel | Discord.Net Documentation",
    "keywords": "Class SocketTextChannel Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a WebSocket-based channel in a guild that can send and receive messages. public class SocketTextChannel : SocketGuildChannel, ITextChannel, IMentionable, INestedChannel, IIntegrationChannel, IGuildChannel, IDeletable, ISocketMessageChannel, IMessageChannel, IChannel, ISnowflakeEntity, IEntity<ulong> Inheritance object SocketEntity<ulong> SocketChannel SocketGuildChannel SocketTextChannel Implements ITextChannel IMentionable INestedChannel IIntegrationChannel IGuildChannel IDeletable ISocketMessageChannel IMessageChannel IChannel ISnowflakeEntity IEntity<ulong> Derived SocketNewsChannel SocketThreadChannel SocketVoiceChannel Inherited Members SocketGuildChannel.Guild SocketGuildChannel.Name SocketGuildChannel.Position SocketGuildChannel.Flags SocketGuildChannel.PermissionOverwrites SocketGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions) SocketGuildChannel.DeleteAsync(RequestOptions) SocketGuildChannel.GetPermissionOverwrite(IUser) SocketGuildChannel.GetPermissionOverwrite(IRole) SocketGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions) SocketGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) SocketGuildChannel.ToString() SocketChannel.CreatedAt SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties CachedMessages Gets all messages in this channel's cache. public IReadOnlyCollection<SocketMessage> CachedMessages { get; } Property Value IReadOnlyCollection<SocketMessage> A read-only collection of WebSocket-based messages. Category Gets the parent (category) of this channel in the guild's channel list. public ICategoryChannel Category { get; } Property Value ICategoryChannel An ICategoryChannel representing the parent of this channel; null if none is set. CategoryId Gets the parent (category) ID of this channel in the guild's channel list. public ulong? CategoryId { get; } Property Value ulong? A ulong representing the snowflake identifier of the parent of this channel; null if none is set. DefaultArchiveDuration Gets the default auto-archive duration for client-created threads in this channel. public ThreadArchiveDuration DefaultArchiveDuration { get; } Property Value ThreadArchiveDuration The default auto-archive duration for thread creation in this channel. Remarks The value of this property does not affect API thread creation, it will not respect this value. DefaultSlowModeInterval Gets the current default slow-mode delay for threads in this channel. public int DefaultSlowModeInterval { get; } Property Value int An int representing the time in seconds required before the user can send another message; 0 if disabled. IsNsfw Gets a value that indicates whether the channel is NSFW. public bool IsNsfw { get; } Property Value bool true if the channel has the NSFW flag enabled; otherwise false. Mention Returns a special string used to mention this object. public string Mention { get; } Property Value string A string that is recognized by Discord as a mention (e.g. <@168693960628371456>). SlowModeInterval Gets the current slow-mode delay for this channel. public virtual int SlowModeInterval { get; } Property Value int An int representing the time in seconds required before the user can send another message; 0 if disabled. Threads Gets a collection of threads within this text channel. public IReadOnlyCollection<SocketThreadChannel> Threads { get; } Property Value IReadOnlyCollection<SocketThreadChannel> Topic Gets the current topic for this text channel. public string Topic { get; } Property Value string A string representing the topic set in the channel; null if none is set. Users Gets a collection of users that are able to view the channel. public override IReadOnlyCollection<SocketGuildUser> Users { get; } Property Value IReadOnlyCollection<SocketGuildUser> A read-only collection of users that can access the channel (i.e. the users seen in the user list). Remarks If this channel is a voice channel, use ConnectedUsers to retrieve a collection of users who are currently connected to this channel. Methods CreateInviteAsync(int?, int?, bool, bool, RequestOptions) Creates a new invite to this channel. public virtual Task<IInviteMetadata> CreateInviteAsync(int? maxAge = 86400, int? maxUses = null, bool isTemporary = false, bool isUnique = false, RequestOptions options = null) Parameters maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. isTemporary bool If true, the user accepting this invite will be kicked from the guild after closing their client. isUnique bool If true, don't try to reuse a similar invite (useful for creating many unique one time use invites). options RequestOptions The options to be used when sending the request. Returns Task<IInviteMetadata> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. Examples The following example creates a new invite to this channel; the invite lasts for 12 hours and can only be used 3 times throughout its lifespan. await guildChannel.CreateInviteAsync(maxAge: 43200, maxUses: 3); CreateInviteToApplicationAsync(DefaultApplications, int?, int?, bool, bool, RequestOptions) Creates a new invite to this channel. public virtual Task<IInviteMetadata> CreateInviteToApplicationAsync(DefaultApplications application, int? maxAge = 86400, int? maxUses = null, bool isTemporary = false, bool isUnique = false, RequestOptions options = null) Parameters application DefaultApplications The application to open for this invite. maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. isTemporary bool If true, the user accepting this invite will be kicked from the guild after closing their client. isUnique bool If true, don't try to reuse a similar invite (useful for creating many unique one time use invites). options RequestOptions The options to be used when sending the request. Returns Task<IInviteMetadata> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. CreateInviteToApplicationAsync(ulong, int?, int?, bool, bool, RequestOptions) Creates a new invite to this channel. public virtual Task<IInviteMetadata> CreateInviteToApplicationAsync(ulong applicationId, int? maxAge, int? maxUses = null, bool isTemporary = false, bool isUnique = false, RequestOptions options = null) Parameters applicationId ulong The id of the embedded application to open for this invite. maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. isTemporary bool If true, the user accepting this invite will be kicked from the guild after closing their client. isUnique bool If true, don't try to reuse a similar invite (useful for creating many unique one time use invites). options RequestOptions The options to be used when sending the request. Returns Task<IInviteMetadata> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. CreateInviteToStreamAsync(IUser, int?, int?, bool, bool, RequestOptions) Creates a new invite to this channel. public virtual Task<IInviteMetadata> CreateInviteToStreamAsync(IUser user, int? maxAge, int? maxUses = null, bool isTemporary = false, bool isUnique = false, RequestOptions options = null) Parameters user IUser The id of the user whose stream to display for this invite. maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. isTemporary bool If true, the user accepting this invite will be kicked from the guild after closing their client. isUnique bool If true, don't try to reuse a similar invite (useful for creating many unique one time use invites). options RequestOptions The options to be used when sending the request. Returns Task<IInviteMetadata> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. Examples The following example creates a new invite to this channel; the invite lasts for 12 hours and can only be used 3 times throughout its lifespan. await guildChannel.CreateInviteAsync(maxAge: 43200, maxUses: 3); CreateThreadAsync(string, ThreadType, ThreadArchiveDuration, IMessage, bool?, int?, RequestOptions) Creates a thread within this ITextChannel. public virtual Task<SocketThreadChannel> CreateThreadAsync(string name, ThreadType type = ThreadType.PublicThread, ThreadArchiveDuration autoArchiveDuration = ThreadArchiveDuration.OneDay, IMessage message = null, bool? invitable = null, int? slowmode = null, RequestOptions options = null) Parameters name string The name of the thread. type ThreadType The type of the thread. Note: This parameter is not used if the message parameter is not specified. autoArchiveDuration ThreadArchiveDuration The duration on which this thread archives after. message IMessage The message which to start the thread from. invitable bool? slowmode int? options RequestOptions The options to be used when sending the request. Returns Task<SocketThreadChannel> A task that represents the asynchronous create operation. The task result contains a IThreadChannel Remarks When message is null the thread type will be based off of the channel its created in. When called on a ITextChannel, it creates a PublicThread. When called on a INewsChannel, it creates a NewsThread. The id of the created thread will be the same as the id of the message, and as such a message can only have a single thread created from it. CreateWebhookAsync(string, Stream, RequestOptions) Creates a webhook in this text channel. public virtual Task<RestWebhook> CreateWebhookAsync(string name, Stream avatar = null, RequestOptions options = null) Parameters name string The name of the webhook. avatar Stream The avatar of the webhook. options RequestOptions The options to be used when sending the request. Returns Task<RestWebhook> A task that represents the asynchronous creation operation. The task result contains the newly created webhook. DeleteMessageAsync(IMessage, RequestOptions) Deletes a message based on the provided message in this channel. public virtual Task DeleteMessageAsync(IMessage message, RequestOptions options = null) Parameters message IMessage The message that would be removed. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. DeleteMessageAsync(ulong, RequestOptions) Deletes a message. public virtual Task DeleteMessageAsync(ulong messageId, RequestOptions options = null) Parameters messageId ulong The snowflake identifier of the message that would be removed. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous removal operation. DeleteMessagesAsync(IEnumerable<IMessage>, RequestOptions) Bulk-deletes multiple messages. public virtual Task DeleteMessagesAsync(IEnumerable<IMessage> messages, RequestOptions options = null) Parameters messages IEnumerable<IMessage> The messages to be bulk-deleted. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous bulk-removal operation. Examples The following example gets 250 messages from the channel and deletes them. var messages = await textChannel.GetMessagesAsync(250).FlattenAsync(); await textChannel.DeleteMessagesAsync(messages); Remarks This method attempts to remove the messages specified in bulk. important Due to the limitation set by Discord, this method can only remove messages that are posted within 14 days! DeleteMessagesAsync(IEnumerable<ulong>, RequestOptions) Bulk-deletes multiple messages. public virtual Task DeleteMessagesAsync(IEnumerable<ulong> messageIds, RequestOptions options = null) Parameters messageIds IEnumerable<ulong> The snowflake identifier of the messages to be bulk-deleted. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous bulk-removal operation. Remarks This method attempts to remove the messages specified in bulk. important Due to the limitation set by Discord, this method can only remove messages that are posted within 14 days! EnterTypingState(RequestOptions) Continuously broadcasts the \"user is typing\" message to all users in this channel until the returned object is disposed. public virtual IDisposable EnterTypingState(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns IDisposable A disposable object that, upon its disposal, will stop the client from broadcasting its typing state in this channel. Examples The following example keeps the client in the typing state until LongRunningAsync has finished. using (channel.EnterTypingState()) await LongRunningAsync(); GetActiveThreadsAsync(RequestOptions) Gets a collection of active threads within this channel. public virtual Task<IReadOnlyCollection<RestThreadChannel>> GetActiveThreadsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestThreadChannel>> A task that represents an asynchronous get operation for retrieving the threads. The task result contains a collection of active threads. GetCachedMessage(ulong) Gets a cached message from this channel. public virtual SocketMessage GetCachedMessage(ulong id) Parameters id ulong The snowflake identifier of the message. Returns SocketMessage A WebSocket-based message object; null if it does not exist in the cache or if caching is not enabled. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return null. Please refer to MessageCacheSize for more details. This method retrieves the message from the local WebSocket cache and does not send any additional request to Discord. This message may be a message that has been deleted. GetCachedMessages(IMessage, Direction, int) Gets the last N cached messages starting from a certain message in this message channel. public virtual IReadOnlyCollection<SocketMessage> GetCachedMessages(IMessage fromMessage, Direction dir, int limit = 100) Parameters fromMessage IMessage The message to start the fetching from. dir Direction The direction of which the message should be gotten from. limit int The number of messages to get. Returns IReadOnlyCollection<SocketMessage> A read-only collection of WebSocket-based messages. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Discord. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set. GetCachedMessages(int) Gets the last N cached messages from this message channel. public virtual IReadOnlyCollection<SocketMessage> GetCachedMessages(int limit = 100) Parameters limit int The number of messages to get. Returns IReadOnlyCollection<SocketMessage> A read-only collection of WebSocket-based messages. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Discord. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set. GetCachedMessages(ulong, Direction, int) Gets the last N cached messages starting from a certain message in this message channel. public virtual IReadOnlyCollection<SocketMessage> GetCachedMessages(ulong fromMessageId, Direction dir, int limit = 100) Parameters fromMessageId ulong The message ID to start the fetching from. dir Direction The direction of which the message should be gotten from. limit int The number of messages to get. Returns IReadOnlyCollection<SocketMessage> A read-only collection of WebSocket-based messages. Remarks warning This method requires the use of cache, which is not enabled by default; if caching is not enabled, this method will always return an empty collection. Please refer to MessageCacheSize for more details. This method retrieves the message(s) from the local WebSocket cache and does not send any additional request to Discord. This read-only collection may include messages that have been deleted. The maximum number of messages that can be retrieved from this method depends on the MessageCacheSize set. GetInvitesAsync(RequestOptions) Gets a collection of all invites to this channel. public virtual Task<IReadOnlyCollection<IInviteMetadata>> GetInvitesAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IInviteMetadata>> A task that represents the asynchronous get operation. The task result contains a read-only collection of invite metadata that are created for this channel. Examples The following example gets all of the invites that have been created in this channel and selects the most used invite. var invites = await channel.GetInvitesAsync(); if (invites.Count == 0) return; var invite = invites.OrderByDescending(x => x.Uses).FirstOrDefault(); GetMessageAsync(ulong, RequestOptions) Gets a message from this message channel. public virtual Task<IMessage> GetMessageAsync(ulong id, RequestOptions options = null) Parameters id ulong The snowflake identifier of the message. options RequestOptions The options to be used when sending the request. Returns Task<IMessage> A task that represents an asynchronous get operation for retrieving the message. The task result contains the retrieved message; null if no message is found with the specified identifier. Remarks This method follows the same behavior as described in GetMessageAsync(ulong, CacheMode, RequestOptions). Please visit its documentation for more details on this method. GetMessagesAsync(IMessage, Direction, int, RequestOptions) Gets a collection of messages in this channel. public virtual IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(IMessage fromMessage, Direction dir, int limit = 100, RequestOptions options = null) Parameters fromMessage IMessage The starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(IMessage, Direction, int, CacheMode, RequestOptions). Please visit its documentation for more details on this method. GetMessagesAsync(int, RequestOptions) Gets the last N messages from this message channel. public virtual IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(int limit = 100, RequestOptions options = null) Parameters limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(int, CacheMode, RequestOptions). Please visit its documentation for more details on this method. GetMessagesAsync(ulong, Direction, int, RequestOptions) Gets a collection of messages in this channel. public virtual IAsyncEnumerable<IReadOnlyCollection<IMessage>> GetMessagesAsync(ulong fromMessageId, Direction dir, int limit = 100, RequestOptions options = null) Parameters fromMessageId ulong The ID of the starting message to get the messages from. dir Direction The direction of the messages to be gotten from. limit int The numbers of message to be gotten from. options RequestOptions The options to be used when sending the request. Returns IAsyncEnumerable<IReadOnlyCollection<IMessage>> Paged collection of messages. Remarks This method follows the same behavior as described in GetMessagesAsync(ulong, Direction, int, CacheMode, RequestOptions). Please visit its documentation for more details on this method. GetPinnedMessagesAsync(RequestOptions) Gets a read-only collection of pinned messages in this channel. public virtual Task<IReadOnlyCollection<RestMessage>> GetPinnedMessagesAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestMessage>> A task that represents the asynchronous get operation for retrieving pinned messages in this channel. The task result contains a read-only collection of messages found in the pinned messages. Remarks This method follows the same behavior as described in GetPinnedMessagesAsync(RequestOptions). Please visit its documentation for more details on this method. GetUser(ulong) public override SocketGuildUser GetUser(ulong id) Parameters id ulong Returns SocketGuildUser GetWebhookAsync(ulong, RequestOptions) Gets a webhook available in this text channel. public virtual Task<RestWebhook> GetWebhookAsync(ulong id, RequestOptions options = null) Parameters id ulong The identifier of the webhook. options RequestOptions The options to be used when sending the request. Returns Task<RestWebhook> A task that represents the asynchronous get operation. The task result contains a webhook associated with the identifier; null if the webhook is not found. GetWebhooksAsync(RequestOptions) Gets the webhooks available in this text channel. public virtual Task<IReadOnlyCollection<RestWebhook>> GetWebhooksAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestWebhook>> A task that represents the asynchronous get operation. The task result contains a read-only collection of webhooks that is available in this channel. ModifyAsync(Action<TextChannelProperties>, RequestOptions) Modifies this text channel. public virtual Task ModifyAsync(Action<TextChannelProperties> func, RequestOptions options = null) Parameters func Action<TextChannelProperties> The delegate containing the properties to modify the channel with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. See Also TextChannelProperties ModifyMessageAsync(ulong, Action<MessageProperties>, RequestOptions) Modifies a message. public virtual Task<IUserMessage> ModifyMessageAsync(ulong messageId, Action<MessageProperties> func, RequestOptions options = null) Parameters messageId ulong The snowflake identifier of the message that would be changed. func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The options to be used when sending the request. Returns Task<IUserMessage> A task that represents the asynchronous modification operation. Remarks This method modifies this message with the specified properties. To see an example of this method and what properties are available, please refer to MessageProperties. SendFileAsync(FileAttachment, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a file to this message channel with an optional caption. public virtual Task<RestUserMessage> SendFileAsync(FileAttachment attachment, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters attachment FileAttachment The attachment containing the file and description. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Remarks This method sends a file as if you are uploading an attachment directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. ArgumentException The only valid MessageFlags are SuppressEmbeds, SuppressNotification and None. SendFileAsync(Stream, string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a file to this message channel with an optional caption. public virtual Task<RestUserMessage> SendFileAsync(Stream stream, string filename, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters stream Stream The Stream of the file to be sent. filename string The name of the attachment. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. isSpoiler bool Whether the message attachment should be hidden as a spoiler. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example uploads a streamed image that will be called b1nzy.jpg embedded inside a rich embed to the channel. using (var b1nzyStream = await httpClient.GetStreamAsync(\"https://example.com/b1nzy\")) await channel.SendFileAsync(b1nzyStream, \"b1nzy.jpg\", embed: new EmbedBuilder { ImageUrl = \"attachment://b1nzy.jpg\" }.Build()); Remarks This method sends a file as if you are uploading an attachment directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. ArgumentException The only valid MessageFlags are SuppressEmbeds, SuppressNotification and None. SendFileAsync(string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a file to this message channel with an optional caption. public virtual Task<RestUserMessage> SendFileAsync(string filePath, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, bool isSpoiler = false, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters filePath string The file path of the file. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. isSpoiler bool Whether the message attachment should be hidden as a spoiler. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example uploads a local file called wumpus.txt along with the text good discord boi to the channel. await channel.SendFileAsync(\"wumpus.txt\", \"good discord boi\"); The following example uploads a local image called b1nzy.jpg embedded inside a rich embed to the channel. await channel.SendFileAsync(\"b1nzy.jpg\", embed: new EmbedBuilder { ImageUrl = \"attachment://b1nzy.jpg\" }.Build()); Remarks This method sends a file as if you are uploading an attachment directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. Exceptions ArgumentException The only valid MessageFlags are SuppressEmbeds, SuppressNotification and None. SendFilesAsync(IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a collection of files to this message channel. public virtual Task<RestUserMessage> SendFilesAsync(IEnumerable<FileAttachment> attachments, string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters attachments IEnumerable<FileAttachment> A collection of attachments to upload. text string The message to be sent. isTTS bool Whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the file. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Remarks This method sends files as if you are uploading attachments directly from your Discord client. note If you wish to upload an image and have it embedded in a Rich embed, you may upload the file and refer to the file with \"attachment://filename.ext\" in the ImageUrl. See the example section for its usage. Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. ArgumentException The only valid MessageFlags are SuppressEmbeds, SuppressNotification and None. SendMessageAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) Sends a message to this message channel. public virtual Task<RestUserMessage> SendMessageAsync(string text = null, bool isTTS = false, Embed embed = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageReference messageReference = null, MessageComponent components = null, ISticker[] stickers = null, Embed[] embeds = null, MessageFlags flags = MessageFlags.None) Parameters text string The message to be sent. isTTS bool Determines whether the message should be read aloud by Discord or not. embed Embed The RichEmbed to be sent. options RequestOptions The options to be used when sending the request. allowedMentions AllowedMentions Specifies if notifications are sent for mentioned users and roles in the message text. If null, all mentioned roles and users will be notified. messageReference MessageReference The message references to be included. Used to reply to specific messages. components MessageComponent The message components to be included with this message. Used for interactions. stickers ISticker[] A collection of stickers to send with the message. embeds Embed[] A array of Embeds to send with this response. Max 10. flags MessageFlags A message flag to be applied to the sent message, only SuppressEmbeds and SuppressNotification is permitted. Returns Task<RestUserMessage> A task that represents an asynchronous send operation for delivering the message. The task result contains the sent message. Examples The following example sends a message with the current system time in RFC 1123 format to the channel and deletes itself after 5 seconds. var message = await channel.SendMessageAsync(DateTimeOffset.UtcNow.ToString(\"R\")); await Task.Delay(TimeSpan.FromSeconds(5)) .ContinueWith(x => message.DeleteAsync()); Exceptions ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. ArgumentException The only valid MessageFlags are SuppressEmbeds, SuppressNotification and None. SyncPermissionsAsync(RequestOptions) Syncs the permissions of this nested channel with its parent's. public virtual Task SyncPermissionsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for syncing channel permissions with its parent's. TriggerTypingAsync(RequestOptions) Broadcasts the \"user is typing\" message to all users in this channel, lasting 10 seconds. public virtual Task TriggerTypingAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation that triggers the broadcast."
  },
  "api/Discord.WebSocket.SocketThreadChannel.html": {
    "href": "api/Discord.WebSocket.SocketThreadChannel.html",
    "title": "Class SocketThreadChannel | Discord.Net Documentation",
    "keywords": "Class SocketThreadChannel Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a thread channel inside of a guild. public class SocketThreadChannel : SocketTextChannel, ISocketMessageChannel, IThreadChannel, ITextChannel, IMessageChannel, IMentionable, INestedChannel, IIntegrationChannel, IGuildChannel, IChannel, ISnowflakeEntity, IEntity<ulong>, IDeletable Inheritance object SocketEntity<ulong> SocketChannel SocketGuildChannel SocketTextChannel SocketThreadChannel Implements ISocketMessageChannel IThreadChannel ITextChannel IMessageChannel IMentionable INestedChannel IIntegrationChannel IGuildChannel IChannel ISnowflakeEntity IEntity<ulong> IDeletable Inherited Members SocketTextChannel.Topic SocketTextChannel.SlowModeInterval SocketTextChannel.CategoryId SocketTextChannel.DefaultSlowModeInterval SocketTextChannel.Category SocketTextChannel.IsNsfw SocketTextChannel.DefaultArchiveDuration SocketTextChannel.Mention SocketTextChannel.CachedMessages SocketTextChannel.Threads SocketTextChannel.CreateThreadAsync(string, ThreadType, ThreadArchiveDuration, IMessage, bool?, int?, RequestOptions) SocketTextChannel.GetCachedMessage(ulong) SocketTextChannel.GetMessageAsync(ulong, RequestOptions) SocketTextChannel.GetMessagesAsync(int, RequestOptions) SocketTextChannel.GetMessagesAsync(ulong, Direction, int, RequestOptions) SocketTextChannel.GetMessagesAsync(IMessage, Direction, int, RequestOptions) SocketTextChannel.GetCachedMessages(int) SocketTextChannel.GetCachedMessages(ulong, Direction, int) SocketTextChannel.GetCachedMessages(IMessage, Direction, int) SocketTextChannel.GetPinnedMessagesAsync(RequestOptions) SocketTextChannel.SendMessageAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) SocketTextChannel.SendFileAsync(string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) SocketTextChannel.SendFileAsync(Stream, string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) SocketTextChannel.SendFileAsync(FileAttachment, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) SocketTextChannel.SendFilesAsync(IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) SocketTextChannel.DeleteMessagesAsync(IEnumerable<IMessage>, RequestOptions) SocketTextChannel.DeleteMessagesAsync(IEnumerable<ulong>, RequestOptions) SocketTextChannel.ModifyMessageAsync(ulong, Action<MessageProperties>, RequestOptions) SocketTextChannel.DeleteMessageAsync(ulong, RequestOptions) SocketTextChannel.DeleteMessageAsync(IMessage, RequestOptions) SocketTextChannel.TriggerTypingAsync(RequestOptions) SocketTextChannel.EnterTypingState(RequestOptions) SocketTextChannel.CreateInviteToApplicationAsync(DefaultApplications, int?, int?, bool, bool, RequestOptions) SocketGuildChannel.Guild SocketGuildChannel.Name SocketGuildChannel.Position SocketGuildChannel.Flags SocketGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions) SocketGuildChannel.DeleteAsync(RequestOptions) SocketGuildChannel.ToString() SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties AppliedTags Gets ids of tags applied to a forum thread public IReadOnlyCollection<ulong> AppliedTags { get; } Property Value IReadOnlyCollection<ulong> Remarks This property is only available on forum threads. ArchiveTimestamp Gets the timestamp when the thread's archive status was last changed, used for calculating recent activity. public DateTimeOffset ArchiveTimestamp { get; } Property Value DateTimeOffset AutoArchiveDuration Gets the duration of time before the thread is automatically archived after no activity. public ThreadArchiveDuration AutoArchiveDuration { get; } Property Value ThreadArchiveDuration CreatedAt Gets when the thread was created. public override DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset Remarks This property is only populated for threads created after 2022-01-09, hence the default date of this property will be that date. CurrentUser Gets the current users within this thread. public SocketThreadUser CurrentUser { get; } Property Value SocketThreadUser HasJoined Gets whether or not the current user has joined this thread. public bool HasJoined { get; } Property Value bool IsArchived Gets whether or not the current thread is archived. public bool IsArchived { get; } Property Value bool IsInvitable Gets whether non-moderators can add other non-moderators to a thread. public bool? IsInvitable { get; } Property Value bool? Remarks This property is only available on private threads. IsLocked Gets whether or not the current thread is locked. public bool IsLocked { get; } Property Value bool IsPrivateThread true if this thread is private, otherwise false public bool IsPrivateThread { get; } Property Value bool MemberCount Gets an approximate count of users in a thread, stops counting after 50. public int MemberCount { get; } Property Value int MessageCount Gets an approximate count of messages in a thread, stops counting after 50. public int MessageCount { get; } Property Value int Owner Gets the owner of the current thread. public SocketThreadUser Owner { get; } Property Value SocketThreadUser ParentChannel Gets the parent channel this thread resides in. public SocketGuildChannel ParentChannel { get; } Property Value SocketGuildChannel PermissionOverwrites Gets a collection of permission overwrites for this channel. public override IReadOnlyCollection<Overwrite> PermissionOverwrites { get; } Property Value IReadOnlyCollection<Overwrite> A collection of overwrites associated with this channel. Remarks This method is not supported in threads. Type Gets the type of the current thread channel. public ThreadType Type { get; } Property Value ThreadType Users Gets a collection of cached users within this thread. public IReadOnlyCollection<SocketThreadUser> Users { get; } Property Value IReadOnlyCollection<SocketThreadUser> Methods AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions) Adds or updates the permission overwrite for the given role. public override Task AddPermissionOverwriteAsync(IRole role, OverwritePermissions permissions, RequestOptions options = null) Parameters role IRole The role to add the overwrite to. permissions OverwritePermissions The overwrite to add to the role. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous permission operation for adding the specified permissions to the channel. Remarks This method is not supported in threads. AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions) Adds or updates the permission overwrite for the given user. public override Task AddPermissionOverwriteAsync(IUser user, OverwritePermissions permissions, RequestOptions options = null) Parameters user IUser The user to add the overwrite to. permissions OverwritePermissions The overwrite to add to the user. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous permission operation for adding the specified permissions to the channel. Remarks This method is not supported in threads. AddUserAsync(IGuildUser, RequestOptions) Adds a user to this thread. public Task AddUserAsync(IGuildUser user, RequestOptions options = null) Parameters user IGuildUser The IGuildUser to add. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation of adding a member to a thread. CreateInviteAsync(int?, int?, bool, bool, RequestOptions) Creates a new invite to this channel. public override Task<IInviteMetadata> CreateInviteAsync(int? maxAge = 86400, int? maxUses = null, bool isTemporary = false, bool isUnique = false, RequestOptions options = null) Parameters maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. isTemporary bool If true, the user accepting this invite will be kicked from the guild after closing their client. isUnique bool If true, don't try to reuse a similar invite (useful for creating many unique one time use invites). options RequestOptions The options to be used when sending the request. Returns Task<IInviteMetadata> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. Examples The following example creates a new invite to this channel; the invite lasts for 12 hours and can only be used 3 times throughout its lifespan. await guildChannel.CreateInviteAsync(maxAge: 43200, maxUses: 3); Remarks This method is not supported in threads. CreateInviteToApplicationAsync(ulong, int?, int?, bool, bool, RequestOptions) Creates a new invite to this channel. public override Task<IInviteMetadata> CreateInviteToApplicationAsync(ulong applicationId, int? maxAge, int? maxUses = null, bool isTemporary = false, bool isUnique = false, RequestOptions options = null) Parameters applicationId ulong The id of the embedded application to open for this invite. maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. isTemporary bool If true, the user accepting this invite will be kicked from the guild after closing their client. isUnique bool If true, don't try to reuse a similar invite (useful for creating many unique one time use invites). options RequestOptions The options to be used when sending the request. Returns Task<IInviteMetadata> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. Remarks This method is not supported in threads. CreateInviteToStreamAsync(IUser, int?, int?, bool, bool, RequestOptions) Creates a new invite to this channel. public override Task<IInviteMetadata> CreateInviteToStreamAsync(IUser user, int? maxAge, int? maxUses = null, bool isTemporary = false, bool isUnique = false, RequestOptions options = null) Parameters user IUser The id of the user whose stream to display for this invite. maxAge int? The time (in seconds) until the invite expires. Set to null to never expire. maxUses int? The max amount of times this invite may be used. Set to null to have unlimited uses. isTemporary bool If true, the user accepting this invite will be kicked from the guild after closing their client. isUnique bool If true, don't try to reuse a similar invite (useful for creating many unique one time use invites). options RequestOptions The options to be used when sending the request. Returns Task<IInviteMetadata> A task that represents the asynchronous invite creation operation. The task result contains an invite metadata object containing information for the created invite. Examples The following example creates a new invite to this channel; the invite lasts for 12 hours and can only be used 3 times throughout its lifespan. await guildChannel.CreateInviteAsync(maxAge: 43200, maxUses: 3); Remarks This method is not supported in threads. CreateWebhookAsync(string, Stream, RequestOptions) Creates a webhook in this text channel. public override Task<RestWebhook> CreateWebhookAsync(string name, Stream avatar = null, RequestOptions options = null) Parameters name string The name of the webhook. avatar Stream The avatar of the webhook. options RequestOptions The options to be used when sending the request. Returns Task<RestWebhook> A task that represents the asynchronous creation operation. The task result contains the newly created webhook. Remarks This method is not supported in threads. DownloadUsersAsync(RequestOptions) Downloads all users that have access to this thread. public Task DownloadUsersAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous download operation. GetActiveThreadsAsync(RequestOptions) Gets a collection of active threads within this channel. public override Task<IReadOnlyCollection<RestThreadChannel>> GetActiveThreadsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestThreadChannel>> A task that represents an asynchronous get operation for retrieving the threads. The task result contains a collection of active threads. Exceptions NotSupportedException This method is not supported in threads. GetInvitesAsync(RequestOptions) Gets a collection of all invites to this channel. public override Task<IReadOnlyCollection<IInviteMetadata>> GetInvitesAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<IInviteMetadata>> A task that represents the asynchronous get operation. The task result contains a read-only collection of invite metadata that are created for this channel. Examples The following example gets all of the invites that have been created in this channel and selects the most used invite. var invites = await channel.GetInvitesAsync(); if (invites.Count == 0) return; var invite = invites.OrderByDescending(x => x.Uses).FirstOrDefault(); Remarks This method is not supported in threads. GetPermissionOverwrite(IRole) Gets the permission overwrite for a specific role. public override OverwritePermissions? GetPermissionOverwrite(IRole role) Parameters role IRole The role to get the overwrite from. Returns OverwritePermissions? An overwrite object for the targeted role; null if none is set. Remarks This method is not supported in threads. GetPermissionOverwrite(IUser) Gets the permission overwrite for a specific user. public override OverwritePermissions? GetPermissionOverwrite(IUser user) Parameters user IUser The user to get the overwrite from. Returns OverwritePermissions? An overwrite object for the targeted user; null if none is set. Remarks This method is not supported in threads. GetUser(ulong) public SocketThreadUser GetUser(ulong id) Parameters id ulong Returns SocketThreadUser GetUsersAsync(RequestOptions) Gets all users inside this thread. public Task<IReadOnlyCollection<SocketThreadUser>> GetUsersAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<SocketThreadUser>> A task representing the download operation. Remarks If all users are not downloaded then this method will call DownloadUsersAsync(RequestOptions) and return the result. GetWebhookAsync(ulong, RequestOptions) Gets a webhook available in this text channel. public override Task<RestWebhook> GetWebhookAsync(ulong id, RequestOptions options = null) Parameters id ulong The identifier of the webhook. options RequestOptions The options to be used when sending the request. Returns Task<RestWebhook> A task that represents the asynchronous get operation. The task result contains a webhook associated with the identifier; null if the webhook is not found. Remarks This method is not supported in threads. GetWebhooksAsync(RequestOptions) Gets the webhooks available in this text channel. public override Task<IReadOnlyCollection<RestWebhook>> GetWebhooksAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestWebhook>> A task that represents the asynchronous get operation. The task result contains a read-only collection of webhooks that is available in this channel. Remarks This method is not supported in threads. JoinAsync(RequestOptions) Joins the current thread. public Task JoinAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous join operation. LeaveAsync(RequestOptions) Leaves the current thread. public Task LeaveAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous leave operation. ModifyAsync(Action<TextChannelProperties>, RequestOptions) Modifies this text channel. public override Task ModifyAsync(Action<TextChannelProperties> func, RequestOptions options = null) Parameters func Action<TextChannelProperties> The delegate containing the properties to modify the channel with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. See Also TextChannelProperties ModifyAsync(Action<ThreadChannelProperties>, RequestOptions) Modifies this thread channel. public Task ModifyAsync(Action<ThreadChannelProperties> func, RequestOptions options = null) Parameters func Action<ThreadChannelProperties> The delegate containing the properties to modify the channel with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. See Also ThreadChannelProperties RemovePermissionOverwriteAsync(IRole, RequestOptions) Removes the permission overwrite for the given role, if one exists. public override Task RemovePermissionOverwriteAsync(IRole role, RequestOptions options = null) Parameters role IRole The role to remove the overwrite from. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel. Remarks This method is not supported in threads. RemovePermissionOverwriteAsync(IUser, RequestOptions) Removes the permission overwrite for the given user, if one exists. public override Task RemovePermissionOverwriteAsync(IUser user, RequestOptions options = null) Parameters user IUser The user to remove the overwrite from. options RequestOptions The options to be used when sending the request. Returns Task A task representing the asynchronous operation for removing the specified permissions from the channel. Remarks This method is not supported in threads. RemoveUserAsync(IGuildUser, RequestOptions) Removes a user from this thread. public Task RemoveUserAsync(IGuildUser user, RequestOptions options = null) Parameters user IGuildUser The IGuildUser to remove from this thread. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation of removing a user from this thread. SyncPermissionsAsync(RequestOptions) Syncs the permissions of this nested channel with its parent's. public override Task SyncPermissionsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for syncing channel permissions with its parent's. Remarks This method is not supported in threads."
  },
  "api/Discord.WebSocket.SocketThreadCreateAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketThreadCreateAuditLogData.html",
    "title": "Class SocketThreadCreateAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketThreadCreateAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a thread creation. public class SocketThreadCreateAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketThreadCreateAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AppliedTags Gets the applied tags of this thread. public IReadOnlyCollection<ulong> AppliedTags { get; } Property Value IReadOnlyCollection<ulong> Remarks null if the property was not updated. AutoArchiveDuration Gets the auto archive duration of the thread. public ThreadArchiveDuration AutoArchiveDuration { get; } Property Value ThreadArchiveDuration The thread auto archive duration of the thread. Flags Gets the flags of the thread channel. public ChannelFlags? Flags { get; } Property Value ChannelFlags? Remarks null if the property was not updated. IsArchived Gets the value that indicates whether the thread is archived. public bool IsArchived { get; } Property Value bool true if this thread has the Archived flag enabled; otherwise false. IsLocked Gets the value that indicates whether the thread is locked. public bool IsLocked { get; } Property Value bool true if this thread has the Locked flag enabled; otherwise false. SlowModeInterval Gets the slow-mode delay of the thread. public int? SlowModeInterval { get; } Property Value int? An int representing the time in seconds required before the user can send another message; 0 if disabled. null if this is not mentioned in this entry. ThreadId Gets the snowflake ID of the thread. public ulong ThreadId { get; } Property Value ulong A ulong representing the snowflake identifier for the thread. ThreadName Gets the name of the thread. public string ThreadName { get; } Property Value string A string containing the name of the thread. ThreadType Gets the type of the thread. public ThreadType ThreadType { get; } Property Value ThreadType The type of thread."
  },
  "api/Discord.WebSocket.SocketThreadDeleteAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketThreadDeleteAuditLogData.html",
    "title": "Class SocketThreadDeleteAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketThreadDeleteAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a thread deletion. public class SocketThreadDeleteAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketThreadDeleteAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AppliedTags Gets the applied tags of this thread. public IReadOnlyCollection<ulong> AppliedTags { get; } Property Value IReadOnlyCollection<ulong> Remarks null if this is not mentioned in this entry. AutoArchiveDuration Gets the thread auto archive duration of the deleted thread. public ThreadArchiveDuration AutoArchiveDuration { get; } Property Value ThreadArchiveDuration The thread auto archive duration of the thread that was deleted. Flags Gets the flags of the thread channel. public ChannelFlags? Flags { get; } Property Value ChannelFlags? Remarks null if this is not mentioned in this entry. IsArchived Gets the value that indicates whether the deleted thread was archived. public bool IsArchived { get; } Property Value bool true if this thread had the Archived flag enabled; otherwise false. IsLocked Gets the value that indicates whether the deleted thread was locked. public bool IsLocked { get; } Property Value bool true if this thread had the Locked flag enabled; otherwise false. SlowModeInterval Gets the slow-mode delay of the deleted thread. public int? SlowModeInterval { get; } Property Value int? An int representing the time in seconds required before the user can send another message; 0 if disabled. null if this is not mentioned in this entry. ThreadId Gets the snowflake ID of the deleted thread. public ulong ThreadId { get; } Property Value ulong A ulong representing the snowflake identifier for the deleted thread. ThreadName Gets the name of the deleted thread. public string ThreadName { get; } Property Value string A string containing the name of the deleted thread. ThreadType Gets the type of the deleted thread. public ThreadType ThreadType { get; } Property Value ThreadType The type of thread that was deleted."
  },
  "api/Discord.WebSocket.SocketThreadInfo.html": {
    "href": "api/Discord.WebSocket.SocketThreadInfo.html",
    "title": "Class SocketThreadInfo | Discord.Net Documentation",
    "keywords": "Class SocketThreadInfo Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents information for a thread. public class SocketThreadInfo Inheritance object SocketThreadInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AppliedTags Gets the applied tags of this thread. public IReadOnlyCollection<ulong> AppliedTags { get; } Property Value IReadOnlyCollection<ulong> Remarks null if the property was not updated. AutoArchiveDuration Gets the auto archive duration of thread. public ThreadArchiveDuration? AutoArchiveDuration { get; } Property Value ThreadArchiveDuration? Remarks null if the property was not updated. Flags Gets the flags of the thread channel. public ChannelFlags? Flags { get; } Property Value ChannelFlags? Remarks null if the property was not updated. IsArchived Gets the value that indicates whether the thread is archived. public bool? IsArchived { get; } Property Value bool? Remarks null if the property was not updated. IsLocked Gets the value that indicates whether the thread is locked. public bool? IsLocked { get; } Property Value bool? Remarks null if the property was not updated. Name Gets the name of the thread. public string Name { get; } Property Value string SlowModeInterval Gets the slow-mode delay of the thread. public int? SlowModeInterval { get; } Property Value int? Remarks null if the property was not updated. Type Gets the type of the thread. public ThreadType Type { get; } Property Value ThreadType Remarks null if the property was not updated."
  },
  "api/Discord.WebSocket.SocketThreadUpdateAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketThreadUpdateAuditLogData.html",
    "title": "Class SocketThreadUpdateAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketThreadUpdateAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a thread update. public class SocketThreadUpdateAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketThreadUpdateAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After Gets the thread information after the changes. public ThreadInfo After { get; } Property Value ThreadInfo A thread information object representing the thread after the changes were made. Before Gets the thread information before the changes. public ThreadInfo Before { get; } Property Value ThreadInfo A thread information object representing the thread before the changes were made. ThreadType Gets the type of the thread. public ThreadType ThreadType { get; } Property Value ThreadType The type of thread."
  },
  "api/Discord.WebSocket.SocketThreadUser.html": {
    "href": "api/Discord.WebSocket.SocketThreadUser.html",
    "title": "Class SocketThreadUser | Discord.Net Documentation",
    "keywords": "Class SocketThreadUser Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a thread user received over the gateway. public class SocketThreadUser : SocketUser, IThreadUser, IGuildUser, IUser, ISnowflakeEntity, IEntity<ulong>, IMentionable, IPresence, IVoiceState Inheritance object SocketEntity<ulong> SocketUser SocketThreadUser Implements IThreadUser IGuildUser IUser ISnowflakeEntity IEntity<ulong> IMentionable IPresence IVoiceState Inherited Members SocketUser.PublicFlags SocketUser.CreatedAt SocketUser.Discriminator SocketUser.Mention SocketUser.Status SocketUser.ActiveClients SocketUser.Activities SocketUser.AvatarDecorationHash SocketUser.AvatarDecorationSkuId SocketUser.MutualGuilds SocketUser.CreateDMChannelAsync(RequestOptions) SocketUser.GetAvatarUrl(ImageFormat, ushort) SocketUser.GetDefaultAvatarUrl() SocketUser.GetAvatarDecorationUrl() SocketUser.ToString() SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods UserExtensions.BanAsync(IGuildUser, int, string, RequestOptions) UserExtensions.SendFileAsync(IUser, FileAttachment, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, Stream, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFilesAsync(IUser, IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendMessageAsync(IUser, string, bool, Embed, RequestOptions, AllowedMentions, MessageComponent, Embed[]) Properties AvatarId Gets the identifier of this user's avatar. public override string AvatarId { get; } Property Value string DiscriminatorValue Gets the per-username unique ID for this user. This will return 0 for users who have migrated to new username system. public override ushort DiscriminatorValue { get; } Property Value ushort DisplayAvatarId Gets the displayed avatar for this user. public string DisplayAvatarId { get; } Property Value string The users displayed avatar hash. If the user does not have a guild avatar, this will be the regular avatar. If the user also does not have a regular avatar, this will be null. DisplayName Gets the displayed name for this user. public string DisplayName { get; } Property Value string A string representing the display name of the user; If the nickname is null, this will be the username. Flags Gets the public flags for this guild member. public GuildUserFlags Flags { get; } Property Value GuildUserFlags GlobalName Gets the user's display name, if it is set. For bots, this will get the application name. public override string GlobalName { get; } Property Value string Remarks This property will be null if user has no display name set. Guild Gets the guild this user is in. public SocketGuild Guild { get; } Property Value SocketGuild GuildAvatarId Gets the guild specific avatar for this user. public string GuildAvatarId { get; } Property Value string The users guild avatar hash if they have one; otherwise null. GuildUser Gets the IGuildUser on the server this thread was created in. public SocketGuildUser GuildUser { get; } Property Value SocketGuildUser Hierarchy Gets the users position within the role hierarchy. public int Hierarchy { get; } Property Value int IsBot Gets a value that indicates whether this user is identified as a bot. public override bool IsBot { get; } Property Value bool true if the user is a bot application; otherwise false. Remarks This property retrieves a value that indicates whether this user is a registered bot application (indicated by the blue BOT tag within the official chat client). IsDeafened Gets a value that indicates whether this user is deafened by the guild. public bool IsDeafened { get; } Property Value bool true if the user is deafened (i.e. not permitted to listen to or speak to others) by the guild; otherwise false. IsMuted Gets a value that indicates whether this user is muted (i.e. not permitted to speak via voice) by the guild. public bool IsMuted { get; } Property Value bool true if this user is muted by the guild; otherwise false. IsPending Whether the user has passed the guild's Membership Screening requirements. public bool? IsPending { get; } Property Value bool? IsSelfDeafened Gets a value that indicates whether this user has marked themselves as deafened. public bool IsSelfDeafened { get; } Property Value bool true if this user has deafened themselves (i.e. not permitted to listen to or speak to others); otherwise false. IsSelfMuted Gets a value that indicates whether this user has marked themselves as muted (i.e. not permitted to speak via voice). public bool IsSelfMuted { get; } Property Value bool true if this user has muted themselves; otherwise false. IsStreaming Gets a value that indicates if this user is streaming in a voice channel. public bool IsStreaming { get; } Property Value bool true if the user is streaming; otherwise false. IsSuppressed Gets a value that indicates whether the user is muted by the current user. public bool IsSuppressed { get; } Property Value bool true if the guild is temporarily blocking audio to/from this user; otherwise false. IsVideoing Gets a value that indicates if the user is videoing in a voice channel. public bool IsVideoing { get; } Property Value bool true if the user has their camera turned on; otherwise false. IsWebhook Gets a value that indicates whether this user is a webhook user. public override bool IsWebhook { get; } Property Value bool true if the user is a webhook; otherwise false. JoinedAt Gets when this user joined the guild. public DateTimeOffset? JoinedAt { get; } Property Value DateTimeOffset? A DateTimeOffset representing the time of which the user has joined the guild; null when it cannot be obtained. Nickname Gets the nickname for this user. public string Nickname { get; } Property Value string A string representing the nickname of the user; null if none is set. PremiumSince Gets the date and time for when this user's guild boost began. public DateTimeOffset? PremiumSince { get; } Property Value DateTimeOffset? A DateTimeOffset for when the user began boosting this guild; null if they are not boosting the guild. RequestToSpeakTimestamp Gets the time on which the user requested to speak. public DateTimeOffset? RequestToSpeakTimestamp { get; } Property Value DateTimeOffset? Thread Gets the SocketThreadChannel this user is in. public SocketThreadChannel Thread { get; } Property Value SocketThreadChannel ThreadJoinedAt Gets the timestamp for when this user joined this thread. public DateTimeOffset ThreadJoinedAt { get; } Property Value DateTimeOffset TimedOutUntil Gets the date and time that indicates if and for how long a user has been timed out. public DateTimeOffset? TimedOutUntil { get; } Property Value DateTimeOffset? A DateTimeOffset indicating how long the user will be timed out for. Remarks null or a timestamp in the past if the user is not timed out. Username Gets the username for this user. public override string Username { get; } Property Value string VoiceChannel Gets the voice channel this user is currently in. public IVoiceChannel VoiceChannel { get; } Property Value IVoiceChannel A generic voice channel object representing the voice channel that the user is currently in; null if none. VoiceSessionId Gets the unique identifier for this user's voice session. public string VoiceSessionId { get; } Property Value string Methods AddRoleAsync(IRole, RequestOptions) Adds the specified role to this user in the guild. public Task AddRoleAsync(IRole role, RequestOptions options = null) Parameters role IRole The role to be added to the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. AddRoleAsync(ulong, RequestOptions) Adds the specified role to this user in the guild. public Task AddRoleAsync(ulong roleId, RequestOptions options = null) Parameters roleId ulong The role to be added to the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. AddRolesAsync(IEnumerable<IRole>, RequestOptions) Adds the specified roles to this user in the guild. public Task AddRolesAsync(IEnumerable<IRole> roles, RequestOptions options = null) Parameters roles IEnumerable<IRole> The roles to be added to the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. AddRolesAsync(IEnumerable<ulong>, RequestOptions) Adds the specified roleIds to this user in the guild. public Task AddRolesAsync(IEnumerable<ulong> roleIds, RequestOptions options = null) Parameters roleIds IEnumerable<ulong> The roles to be added to the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role addition operation. GetDisplayAvatarUrl(ImageFormat, ushort) Gets the display avatar URL for this user. public override string GetDisplayAvatarUrl(ImageFormat format = ImageFormat.Auto, ushort size = 128) Parameters format ImageFormat The format of the image. size ushort The size of the image that matches any power of two, ranging from 16 to 2048. Returns string A string representing the user's display avatar URL. Remarks This method will return GetDefaultAvatarUrl() if the user has no avatar set. GetPermissions(IGuildChannel) Gets the level permissions granted to this user to a given channel. public ChannelPermissions GetPermissions(IGuildChannel channel) Parameters channel IGuildChannel The channel to get the permission from. Returns ChannelPermissions A ChannelPermissions structure representing the permissions that a user has in the specified channel. Examples The following example checks if the current user has the ability to send a message with attachment in this channel; if so, uploads a file via SendFileAsync(string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags). if (currentUser?.GetPermissions(targetChannel)?.AttachFiles) await targetChannel.SendFileAsync(\"fortnite.png\"); KickAsync(string, RequestOptions) Kicks this user from this guild. public Task KickAsync(string reason = null, RequestOptions options = null) Parameters reason string The reason for the kick which will be recorded in the audit log. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous kick operation. ModifyAsync(Action<GuildUserProperties>, RequestOptions) Modifies this user's properties in this guild. public Task ModifyAsync(Action<GuildUserProperties> func, RequestOptions options = null) Parameters func Action<GuildUserProperties> The delegate containing the properties to modify the user with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Remarks This method modifies the current guild user with the specified properties. To see an example of this method and what properties are available, please refer to GuildUserProperties. RemoveRoleAsync(IRole, RequestOptions) Removes the specified role from this user in the guild. public Task RemoveRoleAsync(IRole role, RequestOptions options = null) Parameters role IRole The role to be removed from the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. RemoveRoleAsync(ulong, RequestOptions) Removes the specified roleId from this user in the guild. public Task RemoveRoleAsync(ulong roleId, RequestOptions options = null) Parameters roleId ulong The role to be removed from the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. RemoveRolesAsync(IEnumerable<IRole>, RequestOptions) Removes the specified roles from this user in the guild. public Task RemoveRolesAsync(IEnumerable<IRole> roles, RequestOptions options = null) Parameters roles IEnumerable<IRole> The roles to be removed from the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. RemoveRolesAsync(IEnumerable<ulong>, RequestOptions) Removes the specified roleIds from this user in the guild. public Task RemoveRolesAsync(IEnumerable<ulong> roleIds, RequestOptions options = null) Parameters roleIds IEnumerable<ulong> The roles to be removed from the user. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous role removal operation. RemoveTimeOutAsync(RequestOptions) Removes the current timeout from the user in this guild if one exists. public Task RemoveTimeOutAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous timeout removal operation. SetTimeOutAsync(TimeSpan, RequestOptions) Sets a timeout based on provided TimeSpan to this user in the guild. public Task SetTimeOutAsync(TimeSpan span, RequestOptions options = null) Parameters span TimeSpan The TimeSpan indicating how long a user should be timed out for. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous timeout creation operation. Operators explicit operator SocketGuildUser(SocketThreadUser) Gets the guild user of this thread user. public static explicit operator SocketGuildUser(SocketThreadUser user) Parameters user SocketThreadUser Returns SocketGuildUser"
  },
  "api/Discord.WebSocket.SocketUnbanAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketUnbanAuditLogData.html",
    "title": "Class SocketUnbanAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketUnbanAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to an unban. public class SocketUnbanAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketUnbanAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Target Gets the user that was unbanned. public Cacheable<SocketUser, RestUser, IUser, ulong> Target { get; } Property Value Cacheable<SocketUser, RestUser, IUser, ulong> A cacheable user object representing the user that was unbanned."
  },
  "api/Discord.WebSocket.SocketUnknownSticker.html": {
    "href": "api/Discord.WebSocket.SocketUnknownSticker.html",
    "title": "Class SocketUnknownSticker | Discord.Net Documentation",
    "keywords": "Class SocketUnknownSticker Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents an unknown sticker received over the gateway. public class SocketUnknownSticker : SocketSticker, IEntity<ulong>, ISticker, IStickerItem Inheritance object SocketEntity<ulong> SocketSticker SocketUnknownSticker Implements IEntity<ulong> ISticker IStickerItem Inherited Members SocketSticker.Name SocketSticker.Format SocketSticker.GetStickerUrl() SocketSticker.Equals(object) SocketSticker.GetHashCode() SocketEntity<ulong>.Id object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description Gets the description of this sticker. public override string Description { get; } Property Value string A string with the description of this sticker. IsAvailable Gets whether this guild sticker can be used, may be false due to loss of Server Boosts. public override bool? IsAvailable { get; } Property Value bool? PackId Gets the ID of the pack of this sticker. public override ulong PackId { get; } Property Value ulong A snowflake ID associated with the pack of this sticker. SortOrder Gets the standard sticker's sort order within its pack. public override int? SortOrder { get; } Property Value int? Tags Gets the list of tags of this sticker. public override IReadOnlyCollection<string> Tags { get; } Property Value IReadOnlyCollection<string> A read-only list with the tags of this sticker. Type public StickerType? Type { get; } Property Value StickerType? Methods ResolveAsync(CacheMode, RequestOptions) Attempts to try to find the sticker. public Task<SocketSticker> ResolveAsync(CacheMode mode = CacheMode.AllowDownload, RequestOptions options = null) Parameters mode CacheMode options RequestOptions Returns Task<SocketSticker> The sticker representing this unknown stickers Id, if none is found then null."
  },
  "api/Discord.WebSocket.SocketUnknownUser.html": {
    "href": "api/Discord.WebSocket.SocketUnknownUser.html",
    "title": "Class SocketUnknownUser | Discord.Net Documentation",
    "keywords": "Class SocketUnknownUser Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a WebSocket-based user that is yet to be recognized by the client. public class SocketUnknownUser : SocketUser, IUser, ISnowflakeEntity, IEntity<ulong>, IMentionable, IPresence Inheritance object SocketEntity<ulong> SocketUser SocketUnknownUser Implements IUser ISnowflakeEntity IEntity<ulong> IMentionable IPresence Inherited Members SocketUser.PublicFlags SocketUser.CreatedAt SocketUser.Discriminator SocketUser.Mention SocketUser.Status SocketUser.ActiveClients SocketUser.Activities SocketUser.AvatarDecorationHash SocketUser.AvatarDecorationSkuId SocketUser.MutualGuilds SocketUser.CreateDMChannelAsync(RequestOptions) SocketUser.GetAvatarUrl(ImageFormat, ushort) SocketUser.GetDefaultAvatarUrl() SocketUser.GetDisplayAvatarUrl(ImageFormat, ushort) SocketUser.GetAvatarDecorationUrl() SocketUser.ToString() SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods UserExtensions.SendFileAsync(IUser, FileAttachment, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, Stream, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFilesAsync(IUser, IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendMessageAsync(IUser, string, bool, Embed, RequestOptions, AllowedMentions, MessageComponent, Embed[]) Remarks A user may not be recognized due to the user missing from the cache or failed to be recognized properly. Properties AvatarId Gets the identifier of this user's avatar. public override string AvatarId { get; } Property Value string DiscriminatorValue Gets the per-username unique ID for this user. This will return 0 for users who have migrated to new username system. public override ushort DiscriminatorValue { get; } Property Value ushort GlobalName Gets the user's display name, if it is set. For bots, this will get the application name. public override string GlobalName { get; } Property Value string Remarks This property will be null if user has no display name set. IsBot Gets a value that indicates whether this user is identified as a bot. public override bool IsBot { get; } Property Value bool true if the user is a bot application; otherwise false. Remarks This property retrieves a value that indicates whether this user is a registered bot application (indicated by the blue BOT tag within the official chat client). IsWebhook Gets a value that indicates whether this user is a webhook user. public override bool IsWebhook { get; } Property Value bool true if the user is a webhook; otherwise false. Username Gets the username for this user. public override string Username { get; } Property Value string"
  },
  "api/Discord.WebSocket.SocketUser.html": {
    "href": "api/Discord.WebSocket.SocketUser.html",
    "title": "Class SocketUser | Discord.Net Documentation",
    "keywords": "Class SocketUser Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a WebSocket-based user. public abstract class SocketUser : SocketEntity<ulong>, IUser, ISnowflakeEntity, IEntity<ulong>, IMentionable, IPresence Inheritance object SocketEntity<ulong> SocketUser Implements IUser ISnowflakeEntity IEntity<ulong> IMentionable IPresence Derived SocketGroupUser SocketGuildUser SocketSelfUser SocketThreadUser SocketUnknownUser SocketWebhookUser Inherited Members SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods UserExtensions.SendFileAsync(IUser, FileAttachment, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, Stream, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFilesAsync(IUser, IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendMessageAsync(IUser, string, bool, Embed, RequestOptions, AllowedMentions, MessageComponent, Embed[]) Properties ActiveClients Gets the set of clients where this user is currently active. public IReadOnlyCollection<ClientType> ActiveClients { get; } Property Value IReadOnlyCollection<ClientType> Activities Gets the list of activities that this user currently has available. public IReadOnlyCollection<IActivity> Activities { get; } Property Value IReadOnlyCollection<IActivity> AvatarDecorationHash Gets the hash of the avatar decoration. public string AvatarDecorationHash { get; } Property Value string Remarks null if the user has no avatar decoration set. AvatarDecorationSkuId Gets the id of the avatar decoration's SKU. public ulong? AvatarDecorationSkuId { get; } Property Value ulong? Remarks null if the user has no avatar decoration set. AvatarId Gets the identifier of this user's avatar. public abstract string AvatarId { get; } Property Value string CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. Discriminator Gets the per-username unique ID for this user. This will return \"0000\" for users who have migrated to new username system. public string Discriminator { get; } Property Value string DiscriminatorValue Gets the per-username unique ID for this user. This will return 0 for users who have migrated to new username system. public abstract ushort DiscriminatorValue { get; } Property Value ushort GlobalName Gets the user's display name, if it is set. For bots, this will get the application name. public abstract string GlobalName { get; } Property Value string Remarks This property will be null if user has no display name set. IsBot Gets a value that indicates whether this user is identified as a bot. public abstract bool IsBot { get; } Property Value bool true if the user is a bot application; otherwise false. Remarks This property retrieves a value that indicates whether this user is a registered bot application (indicated by the blue BOT tag within the official chat client). IsWebhook Gets a value that indicates whether this user is a webhook user. public abstract bool IsWebhook { get; } Property Value bool true if the user is a webhook; otherwise false. Mention Returns a special string used to mention this object. public string Mention { get; } Property Value string A string that is recognized by Discord as a mention (e.g. <@168693960628371456>). MutualGuilds Gets mutual guilds shared with this user. public IReadOnlyCollection<SocketGuild> MutualGuilds { get; } Property Value IReadOnlyCollection<SocketGuild> Remarks This property will only include guilds in the same DiscordSocketClient. PublicFlags Gets the public flags that are applied to this user's account. public UserProperties? PublicFlags { get; } Property Value UserProperties? The value of public flags for this user. Remarks This value is determined by bitwise OR-ing UserProperties values together. Status Gets the current status of this user. public UserStatus Status { get; } Property Value UserStatus Username Gets the username for this user. public abstract string Username { get; } Property Value string Methods CreateDMChannelAsync(RequestOptions) Creates the direct message channel of this user. public Task<IDMChannel> CreateDMChannelAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IDMChannel> A task that represents the asynchronous operation for getting or creating a DM channel. The task result contains the DM channel associated with this user. Examples The following example attempts to send a direct message to the target user and logs the incident should it fail. public async Task MessageUserAsync(IUser user) { var channel = await user.CreateDMChannelAsync(); try { await channel.SendMessageAsync(\"Awesome stuff!\"); } catch (Discord.Net.HttpException ex) when (ex.HttpCode == HttpStatusCode.Forbidden) { Console.WriteLine($\"Boo, I cannot message {user}.\"); } } Remarks This method is used to obtain or create a channel used to send a direct message. warning In event that the current user cannot send a message to the target user, a channel can and will still be created by Discord. However, attempting to send a message will yield a HttpException with a 403 as its HttpCode. There are currently no official workarounds by Discord. GetAvatarDecorationUrl() Gets the URL for user's avatar decoration. public string GetAvatarDecorationUrl() Returns string Remarks null if the user has no avatar decoration set. GetAvatarUrl(ImageFormat, ushort) Gets the avatar URL for this user, if it is set. public string GetAvatarUrl(ImageFormat format = ImageFormat.Auto, ushort size = 128) Parameters format ImageFormat The format of the image. size ushort The size of the image that matches any power of two, ranging from 16 to 2048. Returns string A string representing the user's avatar URL; null if the user has no avatar set. Examples The following example attempts to retrieve the user's current avatar and send it to a channel; if one is not set, a default avatar for this user will be returned instead. Remarks tip If you wish to retrieve the display avatar for this user, consider using GetDisplayAvatarUrl(ImageFormat, ushort). GetDefaultAvatarUrl() Gets the default avatar URL for this user. public string GetDefaultAvatarUrl() Returns string A string representing the user's default avatar URL. Remarks This avatar is auto-generated by Discord and consists of their logo combined with a random background color. note The calculation is always done by taking the remainder of this user's DiscriminatorValue divided by 5. GetDisplayAvatarUrl(ImageFormat, ushort) Gets the display avatar URL for this user. public virtual string GetDisplayAvatarUrl(ImageFormat format = ImageFormat.Auto, ushort size = 128) Parameters format ImageFormat The format of the image. size ushort The size of the image that matches any power of two, ranging from 16 to 2048. Returns string A string representing the user's display avatar URL. Remarks This method will return GetDefaultAvatarUrl() if the user has no avatar set. ToString() Gets the full name of the user (e.g. Example#0001). public override string ToString() Returns string The full name of the user."
  },
  "api/Discord.WebSocket.SocketUserCommand.html": {
    "href": "api/Discord.WebSocket.SocketUserCommand.html",
    "title": "Class SocketUserCommand | Discord.Net Documentation",
    "keywords": "Class SocketUserCommand Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a Websocket-based slash command received over the gateway. public class SocketUserCommand : SocketCommandBase, IUserCommandInteraction, IApplicationCommandInteraction, IDiscordInteraction, ISnowflakeEntity, IEntity<ulong> Inheritance object SocketEntity<ulong> SocketInteraction SocketCommandBase SocketUserCommand Implements IUserCommandInteraction IApplicationCommandInteraction IDiscordInteraction ISnowflakeEntity IEntity<ulong> Inherited Members SocketCommandBase.CommandName SocketCommandBase.CommandId SocketCommandBase.HasResponded SocketCommandBase.RespondAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketCommandBase.RespondWithModalAsync(Modal, RequestOptions) SocketCommandBase.RespondWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketCommandBase.FollowupAsync(string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketCommandBase.FollowupWithFilesAsync(IEnumerable<FileAttachment>, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketCommandBase.DeferAsync(bool, RequestOptions) SocketInteraction.Channel SocketInteraction.ChannelId SocketInteraction.User SocketInteraction.Type SocketInteraction.Token SocketInteraction.UserLocale SocketInteraction.GuildLocale SocketInteraction.Version SocketInteraction.CreatedAt SocketInteraction.IsValidToken SocketInteraction.IsDMInteraction SocketInteraction.GuildId SocketInteraction.ApplicationId SocketInteraction.Entitlements SocketInteraction.RespondWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.RespondWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.RespondWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.FollowupWithFileAsync(Stream, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.FollowupWithFileAsync(string, string, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.FollowupWithFileAsync(FileAttachment, string, Embed[], bool, bool, AllowedMentions, MessageComponent, Embed, RequestOptions) SocketInteraction.GetOriginalResponseAsync(RequestOptions) SocketInteraction.ModifyOriginalResponseAsync(Action<MessageProperties>, RequestOptions) SocketInteraction.DeleteOriginalResponseAsync(RequestOptions) SocketInteraction.RespondWithPremiumRequiredAsync(RequestOptions) SocketInteraction.GetChannelAsync(RequestOptions) SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, InteractionService, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, RequestOptions, Action<ModalBuilder>) IDiscordInteractionExtentions.RespondWithModalAsync<T>(IDiscordInteraction, string, T, RequestOptions, Action<ModalBuilder>) Properties Data The data associated with this interaction. public SocketUserCommandData Data { get; } Property Value SocketUserCommandData"
  },
  "api/Discord.WebSocket.SocketUserCommandData.html": {
    "href": "api/Discord.WebSocket.SocketUserCommandData.html",
    "title": "Class SocketUserCommandData | Discord.Net Documentation",
    "keywords": "Class SocketUserCommandData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents the data tied with the SocketUserCommand interaction. public class SocketUserCommandData : SocketCommandBaseData, IEntity<ulong>, IUserCommandInteractionData, IApplicationCommandInteractionData, IDiscordInteractionData Inheritance object SocketEntity<ulong> SocketCommandBaseData<IApplicationCommandInteractionDataOption> SocketCommandBaseData SocketUserCommandData Implements IEntity<ulong> IUserCommandInteractionData IApplicationCommandInteractionData IDiscordInteractionData Inherited Members SocketCommandBaseData<IApplicationCommandInteractionDataOption>.Name SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Member Gets the user who this command targets. public SocketUser Member { get; } Property Value SocketUser Options Gets the IApplicationCommandInteractionDataOption received with this interaction. public override IReadOnlyCollection<IApplicationCommandInteractionDataOption> Options { get; } Property Value IReadOnlyCollection<IApplicationCommandInteractionDataOption> Remarks Note Not implemented for SocketUserCommandData"
  },
  "api/Discord.WebSocket.SocketUserMessage.html": {
    "href": "api/Discord.WebSocket.SocketUserMessage.html",
    "title": "Class SocketUserMessage | Discord.Net Documentation",
    "keywords": "Class SocketUserMessage Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a WebSocket-based message sent by a user. public class SocketUserMessage : SocketMessage, IUserMessage, IMessage, ISnowflakeEntity, IEntity<ulong>, IDeletable Inheritance object SocketEntity<ulong> SocketMessage SocketUserMessage Implements IUserMessage IMessage ISnowflakeEntity IEntity<ulong> IDeletable Inherited Members SocketMessage.Author SocketMessage.Channel SocketMessage.Source SocketMessage.Content SocketMessage.CleanContent SocketMessage.CreatedAt SocketMessage.Activity SocketMessage.Application SocketMessage.Reference SocketMessage.Components SocketMessage.Interaction SocketMessage.Flags SocketMessage.Type SocketMessage.RoleSubscriptionData SocketMessage.Thread SocketMessage.Reactions SocketMessage.MentionedUsers SocketMessage.Timestamp SocketMessage.DeleteAsync(RequestOptions) SocketMessage.ToString() SocketMessage.AddReactionAsync(IEmote, RequestOptions) SocketMessage.RemoveReactionAsync(IEmote, IUser, RequestOptions) SocketMessage.RemoveReactionAsync(IEmote, ulong, RequestOptions) SocketMessage.RemoveAllReactionsAsync(RequestOptions) SocketMessage.RemoveAllReactionsForEmoteAsync(IEmote, RequestOptions) SocketMessage.GetReactionUsersAsync(IEmote, int, RequestOptions, ReactionType) SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods MessageExtensions.GetJumpUrl(IMessage) MessageExtensions.HasCharPrefix(IUserMessage, char, ref int) MessageExtensions.HasMentionPrefix(IUserMessage, IUser, ref int) MessageExtensions.HasStringPrefix(IUserMessage, string, ref int, StringComparison) MessageExtensions.AddReactionsAsync(IUserMessage, IEnumerable<IEmote>, RequestOptions) MessageExtensions.RemoveReactionsAsync(IUserMessage, IUser, IEnumerable<IEmote>, RequestOptions) MessageExtensions.ReplyAsync(IUserMessage, string, bool, Embed, AllowedMentions, RequestOptions, MessageComponent, ISticker[], Embed[], MessageFlags) Properties Attachments Returns all attachments included in this message. public override IReadOnlyCollection<Attachment> Attachments { get; } Property Value IReadOnlyCollection<Attachment> Collection of attachments. EditedTimestamp Gets the time of this message's last edit. public override DateTimeOffset? EditedTimestamp { get; } Property Value DateTimeOffset? Time of when the message was last edited; null if the message is never edited. Embeds Returns all embeds included in this message. public override IReadOnlyCollection<Embed> Embeds { get; } Property Value IReadOnlyCollection<Embed> Collection of embed objects. IsPinned Gets the value that indicates whether this message is pinned. public override bool IsPinned { get; } Property Value bool true if this message was added to its channel's pinned messages; otherwise false. IsSuppressed Gets the value that indicates whether or not this message's embeds are suppressed. public override bool IsSuppressed { get; } Property Value bool true if the embeds in this message have been suppressed (made invisible); otherwise false. IsTTS Gets the value that indicates whether this message was meant to be read-aloud by Discord. public override bool IsTTS { get; } Property Value bool true if this message was sent as a text-to-speech message; otherwise false. MentionedChannels Returns the channels mentioned in this message. public override IReadOnlyCollection<SocketGuildChannel> MentionedChannels { get; } Property Value IReadOnlyCollection<SocketGuildChannel> Collection of WebSocket-based guild channels. MentionedEveryone Gets the value that indicates whether this message mentioned everyone. public override bool MentionedEveryone { get; } Property Value bool true if this message mentioned everyone; otherwise false. MentionedRoles Returns the roles mentioned in this message. public override IReadOnlyCollection<SocketRole> MentionedRoles { get; } Property Value IReadOnlyCollection<SocketRole> Collection of WebSocket-based roles. ReferencedMessage Gets the referenced message if it is a crosspost, channel follow add, pin, or reply message. public IUserMessage ReferencedMessage { get; } Property Value IUserMessage The referenced message, if any is associated and still exists. ResolvedData Gets the resolved data if the message has components. null otherwise. public MessageResolvedData ResolvedData { get; } Property Value MessageResolvedData Stickers public override IReadOnlyCollection<SocketSticker> Stickers { get; } Property Value IReadOnlyCollection<SocketSticker> Tags Gets all tags included in this message's content. public override IReadOnlyCollection<ITag> Tags { get; } Property Value IReadOnlyCollection<ITag> Methods CrosspostAsync(RequestOptions) Publishes (crossposts) this message. public Task CrosspostAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for publishing this message. Remarks warning This call will throw an InvalidOperationException if attempted in a non-news channel. This method will publish (crosspost) the message. Please note, publishing (crossposting), is only available in news channels. Exceptions InvalidOperationException This operation may only be called on a INewsChannel channel. ModifyAsync(Action<MessageProperties>, RequestOptions) Modifies this message. public Task ModifyAsync(Action<MessageProperties> func, RequestOptions options = null) Parameters func Action<MessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. Examples The following example replaces the content of the message with Hello World!. await msg.ModifyAsync(x => x.Content = \"Hello World!\"); Remarks This method modifies this message with the specified properties. To see an example of this method and what properties are available, please refer to MessageProperties. Exceptions InvalidOperationException Only the author of a message may modify the message. ArgumentOutOfRangeException Message content is too long, length must be less or equal to MaxMessageSize. PinAsync(RequestOptions) Adds this message to its channel's pinned messages. public Task PinAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for pinning this message. Resolve(TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) Transforms this message's text into a human-readable form by resolving its tags. public string Resolve(TagHandling userHandling = TagHandling.Name, TagHandling channelHandling = TagHandling.Name, TagHandling roleHandling = TagHandling.Name, TagHandling everyoneHandling = TagHandling.Ignore, TagHandling emojiHandling = TagHandling.Name) Parameters userHandling TagHandling Determines how the user tag should be handled. channelHandling TagHandling Determines how the channel tag should be handled. roleHandling TagHandling Determines how the role tag should be handled. everyoneHandling TagHandling Determines how the @everyone tag should be handled. emojiHandling TagHandling Determines how the emoji tag should be handled. Returns string Resolve(int, TagHandling, TagHandling, TagHandling, TagHandling, TagHandling) public string Resolve(int startIndex, TagHandling userHandling = TagHandling.Name, TagHandling channelHandling = TagHandling.Name, TagHandling roleHandling = TagHandling.Name, TagHandling everyoneHandling = TagHandling.Ignore, TagHandling emojiHandling = TagHandling.Name) Parameters startIndex int userHandling TagHandling channelHandling TagHandling roleHandling TagHandling everyoneHandling TagHandling emojiHandling TagHandling Returns string UnpinAsync(RequestOptions) Removes this message from its channel's pinned messages. public Task UnpinAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous operation for unpinning this message."
  },
  "api/Discord.WebSocket.SocketVoiceChannel.html": {
    "href": "api/Discord.WebSocket.SocketVoiceChannel.html",
    "title": "Class SocketVoiceChannel | Discord.Net Documentation",
    "keywords": "Class SocketVoiceChannel Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a WebSocket-based voice channel in a guild. public class SocketVoiceChannel : SocketTextChannel, ISocketMessageChannel, IVoiceChannel, ITextChannel, IMessageChannel, IMentionable, INestedChannel, IIntegrationChannel, IGuildChannel, IDeletable, ISocketAudioChannel, IAudioChannel, IChannel, ISnowflakeEntity, IEntity<ulong> Inheritance object SocketEntity<ulong> SocketChannel SocketGuildChannel SocketTextChannel SocketVoiceChannel Implements ISocketMessageChannel IVoiceChannel ITextChannel IMessageChannel IMentionable INestedChannel IIntegrationChannel IGuildChannel IDeletable ISocketAudioChannel IAudioChannel IChannel ISnowflakeEntity IEntity<ulong> Derived SocketStageChannel Inherited Members SocketTextChannel.Topic SocketTextChannel.SlowModeInterval SocketTextChannel.CategoryId SocketTextChannel.DefaultSlowModeInterval SocketTextChannel.Category SocketTextChannel.SyncPermissionsAsync(RequestOptions) SocketTextChannel.IsNsfw SocketTextChannel.DefaultArchiveDuration SocketTextChannel.Mention SocketTextChannel.CachedMessages SocketTextChannel.Users SocketTextChannel.Threads SocketTextChannel.ModifyAsync(Action<TextChannelProperties>, RequestOptions) SocketTextChannel.GetCachedMessage(ulong) SocketTextChannel.GetMessageAsync(ulong, RequestOptions) SocketTextChannel.GetMessagesAsync(int, RequestOptions) SocketTextChannel.GetMessagesAsync(ulong, Direction, int, RequestOptions) SocketTextChannel.GetMessagesAsync(IMessage, Direction, int, RequestOptions) SocketTextChannel.GetCachedMessages(int) SocketTextChannel.GetCachedMessages(ulong, Direction, int) SocketTextChannel.GetCachedMessages(IMessage, Direction, int) SocketTextChannel.GetPinnedMessagesAsync(RequestOptions) SocketTextChannel.SendMessageAsync(string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) SocketTextChannel.SendFileAsync(string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) SocketTextChannel.SendFileAsync(Stream, string, string, bool, Embed, RequestOptions, bool, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) SocketTextChannel.SendFileAsync(FileAttachment, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) SocketTextChannel.SendFilesAsync(IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, AllowedMentions, MessageReference, MessageComponent, ISticker[], Embed[], MessageFlags) SocketTextChannel.DeleteMessagesAsync(IEnumerable<IMessage>, RequestOptions) SocketTextChannel.DeleteMessagesAsync(IEnumerable<ulong>, RequestOptions) SocketTextChannel.ModifyMessageAsync(ulong, Action<MessageProperties>, RequestOptions) SocketTextChannel.DeleteMessageAsync(ulong, RequestOptions) SocketTextChannel.DeleteMessageAsync(IMessage, RequestOptions) SocketTextChannel.TriggerTypingAsync(RequestOptions) SocketTextChannel.EnterTypingState(RequestOptions) SocketTextChannel.CreateWebhookAsync(string, Stream, RequestOptions) SocketTextChannel.GetWebhookAsync(ulong, RequestOptions) SocketTextChannel.GetWebhooksAsync(RequestOptions) SocketTextChannel.CreateInviteAsync(int?, int?, bool, bool, RequestOptions) SocketTextChannel.CreateInviteToApplicationAsync(ulong, int?, int?, bool, bool, RequestOptions) SocketTextChannel.CreateInviteToApplicationAsync(DefaultApplications, int?, int?, bool, bool, RequestOptions) SocketTextChannel.CreateInviteToStreamAsync(IUser, int?, int?, bool, bool, RequestOptions) SocketTextChannel.GetInvitesAsync(RequestOptions) SocketGuildChannel.Guild SocketGuildChannel.Name SocketGuildChannel.Position SocketGuildChannel.Flags SocketGuildChannel.PermissionOverwrites SocketGuildChannel.ModifyAsync(Action<GuildChannelProperties>, RequestOptions) SocketGuildChannel.DeleteAsync(RequestOptions) SocketGuildChannel.GetPermissionOverwrite(IUser) SocketGuildChannel.GetPermissionOverwrite(IRole) SocketGuildChannel.AddPermissionOverwriteAsync(IUser, OverwritePermissions, RequestOptions) SocketGuildChannel.AddPermissionOverwriteAsync(IRole, OverwritePermissions, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IUser, RequestOptions) SocketGuildChannel.RemovePermissionOverwriteAsync(IRole, RequestOptions) SocketGuildChannel.ToString() SocketChannel.CreatedAt SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ChannelExtensions.GetChannelType(IChannel) Properties Bitrate Gets the bit-rate that the clients in this voice channel are requested to use. public int Bitrate { get; } Property Value int An int representing the bit-rate (bps) that this voice channel defines and requests the client(s) to use. ConnectedUsers Gets a collection of users that are currently connected to this voice channel. public IReadOnlyCollection<SocketGuildUser> ConnectedUsers { get; } Property Value IReadOnlyCollection<SocketGuildUser> A read-only collection of users that are currently connected to this voice channel. IsTextInVoice Gets whether or not the guild has Text-In-Voice enabled and the voice channel is a TiV channel. [Obsolete(\"This property is no longer used because Discord enabled text-in-voice for all channels.\")] public virtual bool IsTextInVoice { get; } Property Value bool Remarks Discord currently doesn't have a way to disable Text-In-Voice yet so this field is always true on SocketVoiceChannels and true on SocketStageChannels. RTCRegion Gets the RTC region for this audio channel. public string RTCRegion { get; } Property Value string Remarks This property can be null. Status Gets the voice channel status set in this channel. null if it is not set. public virtual string Status { get; } Property Value string UserLimit Gets the max number of users allowed to be connected to this channel at once. public int? UserLimit { get; } Property Value int? An int representing the maximum number of users that are allowed to be connected to this channel at once; null if a limit is not set. VideoQualityMode Gets the video quality mode for this channel. public VideoQualityMode VideoQualityMode { get; } Property Value VideoQualityMode Methods ConnectAsync(bool, bool, bool) Connects to this audio channel. public Task<IAudioClient> ConnectAsync(bool selfDeaf = false, bool selfMute = false, bool external = false) Parameters selfDeaf bool Determines whether the client should deaf itself upon connection. selfMute bool Determines whether the client should mute itself upon connection. external bool Determines whether the audio client is an external one or not. Returns Task<IAudioClient> A task representing the asynchronous connection operation. The task result contains the IAudioClient responsible for the connection. CreateThreadAsync(string, ThreadType, ThreadArchiveDuration, IMessage, bool?, int?, RequestOptions) Creates a thread within this ITextChannel. public override Task<SocketThreadChannel> CreateThreadAsync(string name, ThreadType type = ThreadType.PublicThread, ThreadArchiveDuration autoArchiveDuration = ThreadArchiveDuration.OneDay, IMessage message = null, bool? invitable = null, int? slowmode = null, RequestOptions options = null) Parameters name string The name of the thread. type ThreadType The type of the thread. Note: This parameter is not used if the message parameter is not specified. autoArchiveDuration ThreadArchiveDuration The duration on which this thread archives after. message IMessage The message which to start the thread from. invitable bool? slowmode int? options RequestOptions The options to be used when sending the request. Returns Task<SocketThreadChannel> A task that represents the asynchronous create operation. The task result contains a IThreadChannel Remarks When message is null the thread type will be based off of the channel its created in. When called on a ITextChannel, it creates a PublicThread. When called on a INewsChannel, it creates a NewsThread. The id of the created thread will be the same as the id of the message, and as such a message can only have a single thread created from it. Exceptions InvalidOperationException Cannot create threads in voice channels. DisconnectAsync() Disconnects from this audio channel. public Task DisconnectAsync() Returns Task A task representing the asynchronous operation for disconnecting from the audio channel. GetActiveThreadsAsync(RequestOptions) Gets a collection of active threads within this channel. public override Task<IReadOnlyCollection<RestThreadChannel>> GetActiveThreadsAsync(RequestOptions options = null) Parameters options RequestOptions The options to be used when sending the request. Returns Task<IReadOnlyCollection<RestThreadChannel>> A task that represents an asynchronous get operation for retrieving the threads. The task result contains a collection of active threads. Exceptions NotSupportedException Threads are not supported in voice channels GetUser(ulong) public override SocketGuildUser GetUser(ulong id) Parameters id ulong Returns SocketGuildUser ModifyAsync(Action<AudioChannelProperties>, RequestOptions) Modifies this audio channel. public Task ModifyAsync(Action<AudioChannelProperties> func, RequestOptions options = null) Parameters func Action<AudioChannelProperties> The properties to modify the channel with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. See Also AudioChannelProperties ModifyAsync(Action<VoiceChannelProperties>, RequestOptions) Modifies this voice channel. public Task ModifyAsync(Action<VoiceChannelProperties> func, RequestOptions options = null) Parameters func Action<VoiceChannelProperties> The properties to modify the channel with. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation. See Also VoiceChannelProperties SetStatusAsync(string, RequestOptions) Sets the voice channel status in the current channel. public virtual Task SetStatusAsync(string status, RequestOptions options = null) Parameters status string The string to set as status. options RequestOptions The options to be used when sending the request. Returns Task A task that represents the asynchronous modification operation."
  },
  "api/Discord.WebSocket.SocketVoiceChannelStatusDeleteAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketVoiceChannelStatusDeleteAuditLogData.html",
    "title": "Class SocketVoiceChannelStatusDeleteAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketVoiceChannelStatusDeleteAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a voice channel status delete. public class SocketVoiceChannelStatusDeleteAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketVoiceChannelStatusDeleteAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Get the id of the channel status was removed in. public ulong ChannelId { get; } Property Value ulong"
  },
  "api/Discord.WebSocket.SocketVoiceChannelStatusUpdatedAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketVoiceChannelStatusUpdatedAuditLogData.html",
    "title": "Class SocketVoiceChannelStatusUpdatedAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketVoiceChannelStatusUpdatedAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a voice channel status update. public class SocketVoiceChannelStatusUpdatedAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketVoiceChannelStatusUpdatedAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChannelId Get the id of the channel status was updated in. public ulong ChannelId { get; } Property Value ulong Status Gets the status that was set in the voice channel. public string Status { get; } Property Value string"
  },
  "api/Discord.WebSocket.SocketVoiceServer.html": {
    "href": "api/Discord.WebSocket.SocketVoiceServer.html",
    "title": "Class SocketVoiceServer | Discord.Net Documentation",
    "keywords": "Class SocketVoiceServer Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a WebSocket-based voice server. public class SocketVoiceServer Inheritance object SocketVoiceServer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Endpoint Gets the endpoint URL of the voice server host. public string Endpoint { get; } Property Value string An URL representing the voice server host. Guild Gets the guild associated with the voice server. public Cacheable<IGuild, ulong> Guild { get; } Property Value Cacheable<IGuild, ulong> A cached entity of the guild. Token Gets the voice connection token. public string Token { get; } Property Value string A voice connection token."
  },
  "api/Discord.WebSocket.SocketVoiceState.html": {
    "href": "api/Discord.WebSocket.SocketVoiceState.html",
    "title": "Struct SocketVoiceState | Discord.Net Documentation",
    "keywords": "Struct SocketVoiceState Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a WebSocket user's voice connection status. public struct SocketVoiceState : IVoiceState Implements IVoiceState Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Default Initializes a default SocketVoiceState with everything set to null or false. public static readonly SocketVoiceState Default Field Value SocketVoiceState Properties IsDeafened Gets a value that indicates whether this user is deafened by the guild. public bool IsDeafened { get; } Property Value bool true if the user is deafened (i.e. not permitted to listen to or speak to others) by the guild; otherwise false. IsMuted Gets a value that indicates whether this user is muted (i.e. not permitted to speak via voice) by the guild. public bool IsMuted { get; } Property Value bool true if this user is muted by the guild; otherwise false. IsSelfDeafened Gets a value that indicates whether this user has marked themselves as deafened. public bool IsSelfDeafened { get; } Property Value bool true if this user has deafened themselves (i.e. not permitted to listen to or speak to others); otherwise false. IsSelfMuted Gets a value that indicates whether this user has marked themselves as muted (i.e. not permitted to speak via voice). public bool IsSelfMuted { get; } Property Value bool true if this user has muted themselves; otherwise false. IsStreaming Gets a value that indicates if this user is streaming in a voice channel. public bool IsStreaming { get; } Property Value bool true if the user is streaming; otherwise false. IsSuppressed Gets a value that indicates whether the user is muted by the current user. public bool IsSuppressed { get; } Property Value bool true if the guild is temporarily blocking audio to/from this user; otherwise false. IsVideoing Gets a value that indicates if the user is videoing in a voice channel. public bool IsVideoing { get; } Property Value bool true if the user has their camera turned on; otherwise false. RequestToSpeakTimestamp Gets the time on which the user requested to speak. public readonly DateTimeOffset? RequestToSpeakTimestamp { get; } Property Value DateTimeOffset? VoiceChannel Gets the voice channel that the user is currently in; or null if none. public readonly SocketVoiceChannel VoiceChannel { get; } Property Value SocketVoiceChannel VoiceSessionId Gets the unique identifier for this user's voice session. public readonly string VoiceSessionId { get; } Property Value string Methods ToString() Gets the name of this voice channel. public override string ToString() Returns string A string that resolves to name of this voice channel; otherwise \"Unknown\"."
  },
  "api/Discord.WebSocket.SocketWebhookCreateAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketWebhookCreateAuditLogData.html",
    "title": "Class SocketWebhookCreateAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketWebhookCreateAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a webhook creation. public class SocketWebhookCreateAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketWebhookCreateAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Avatar Gets the hash value of the webhook's avatar. public string Avatar { get; } Property Value string A string containing the hash of the webhook's avatar. ChannelId Gets the ID of the channel that the webhook could send to. public ulong ChannelId { get; } Property Value ulong A ulong representing the snowflake identifier of the channel that the webhook could send to. Name Gets the name of the webhook. public string Name { get; } Property Value string A string containing the name of the webhook. Type Gets the type of webhook that was created. public WebhookType Type { get; } Property Value WebhookType The type of webhook that was created. WebhookId Gets the webhook id. public ulong WebhookId { get; } Property Value ulong The webhook identifier."
  },
  "api/Discord.WebSocket.SocketWebhookDeletedAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketWebhookDeletedAuditLogData.html",
    "title": "Class SocketWebhookDeletedAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketWebhookDeletedAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a webhook deletion. public class SocketWebhookDeletedAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketWebhookDeletedAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Avatar Gets the hash value of the webhook's avatar. public string Avatar { get; } Property Value string A string containing the hash of the webhook's avatar. ChannelId Gets the ID of the channel that the webhook could send to. public ulong ChannelId { get; } Property Value ulong A ulong representing the snowflake identifier of the channel that the webhook could send to. Name Gets the name of the webhook that was deleted. public string Name { get; } Property Value string A string containing the name of the webhook that was deleted. Type Gets the type of the webhook that was deleted. public WebhookType Type { get; } Property Value WebhookType The type of webhook that was deleted. WebhookId Gets the ID of the webhook that was deleted. public ulong WebhookId { get; } Property Value ulong A ulong representing the snowflake identifier of the webhook that was deleted."
  },
  "api/Discord.WebSocket.SocketWebhookInfo.html": {
    "href": "api/Discord.WebSocket.SocketWebhookInfo.html",
    "title": "Struct SocketWebhookInfo | Discord.Net Documentation",
    "keywords": "Struct SocketWebhookInfo Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents information for a webhook. public struct SocketWebhookInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Avatar Gets the hash value of this webhook's avatar. public readonly string Avatar { get; } Property Value string A string containing the hash of this webhook's avatar. ChannelId Gets the ID of the channel that this webhook sends to. public readonly ulong? ChannelId { get; } Property Value ulong? A ulong representing the snowflake identifier of the channel that this webhook can send to. Name Gets the name of this webhook. public readonly string Name { get; } Property Value string A string containing the name of this webhook."
  },
  "api/Discord.WebSocket.SocketWebhookUpdateAuditLogData.html": {
    "href": "api/Discord.WebSocket.SocketWebhookUpdateAuditLogData.html",
    "title": "Class SocketWebhookUpdateAuditLogData | Discord.Net Documentation",
    "keywords": "Class SocketWebhookUpdateAuditLogData Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Contains a piece of audit log data related to a webhook update. public class SocketWebhookUpdateAuditLogData : ISocketAuditLogData, IAuditLogData Inheritance object SocketWebhookUpdateAuditLogData Implements ISocketAuditLogData IAuditLogData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties After Gets the webhook information after the changes. public SocketWebhookInfo After { get; } Property Value SocketWebhookInfo A webhook information object representing the webhook after the changes were made. Before Gets the webhook information before the changes. public SocketWebhookInfo Before { get; } Property Value SocketWebhookInfo A webhook information object representing the webhook before the changes were made."
  },
  "api/Discord.WebSocket.SocketWebhookUser.html": {
    "href": "api/Discord.WebSocket.SocketWebhookUser.html",
    "title": "Class SocketWebhookUser | Discord.Net Documentation",
    "keywords": "Class SocketWebhookUser Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents a WebSocket-based webhook user. public class SocketWebhookUser : SocketUser, IWebhookUser, IGuildUser, IUser, ISnowflakeEntity, IEntity<ulong>, IMentionable, IPresence, IVoiceState Inheritance object SocketEntity<ulong> SocketUser SocketWebhookUser Implements IWebhookUser IGuildUser IUser ISnowflakeEntity IEntity<ulong> IMentionable IPresence IVoiceState Inherited Members SocketUser.PublicFlags SocketUser.CreatedAt SocketUser.Discriminator SocketUser.Mention SocketUser.Status SocketUser.ActiveClients SocketUser.Activities SocketUser.AvatarDecorationHash SocketUser.AvatarDecorationSkuId SocketUser.MutualGuilds SocketUser.CreateDMChannelAsync(RequestOptions) SocketUser.GetAvatarUrl(ImageFormat, ushort) SocketUser.GetDefaultAvatarUrl() SocketUser.GetDisplayAvatarUrl(ImageFormat, ushort) SocketUser.GetAvatarDecorationUrl() SocketUser.ToString() SocketEntity<ulong>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods UserExtensions.BanAsync(IGuildUser, int, string, RequestOptions) UserExtensions.SendFileAsync(IUser, FileAttachment, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, Stream, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFileAsync(IUser, string, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendFilesAsync(IUser, IEnumerable<FileAttachment>, string, bool, Embed, RequestOptions, MessageComponent, Embed[]) UserExtensions.SendMessageAsync(IUser, string, bool, Embed, RequestOptions, AllowedMentions, MessageComponent, Embed[]) Properties AvatarId Gets the identifier of this user's avatar. public override string AvatarId { get; } Property Value string DiscriminatorValue Gets the per-username unique ID for this user. This will return 0 for users who have migrated to new username system. public override ushort DiscriminatorValue { get; } Property Value ushort GlobalName Gets the user's display name, if it is set. For bots, this will get the application name. public override string GlobalName { get; } Property Value string Remarks This property will be null if user has no display name set. Guild Gets the guild of this webhook. public SocketGuild Guild { get; } Property Value SocketGuild IsBot Gets a value that indicates whether this user is identified as a bot. public override bool IsBot { get; } Property Value bool true if the user is a bot application; otherwise false. Remarks This property retrieves a value that indicates whether this user is a registered bot application (indicated by the blue BOT tag within the official chat client). IsWebhook Gets a value that indicates whether this user is a webhook user. public override bool IsWebhook { get; } Property Value bool true if the user is a webhook; otherwise false. Username Gets the username for this user. public override string Username { get; } Property Value string WebhookId Gets the ID of a webhook. public ulong WebhookId { get; } Property Value ulong"
  },
  "api/Discord.WebSocket.VoiceCloseCode.html": {
    "href": "api/Discord.WebSocket.VoiceCloseCode.html",
    "title": "Enum VoiceCloseCode | Discord.Net Documentation",
    "keywords": "Enum VoiceCloseCode Namespace Discord.WebSocket Assembly Discord.Net.WebSocket.dll Represents generic op codes for voice disconnect. public enum VoiceCloseCode Fields AlreadyAuthenticated = 4005 You sent more than one identify payload. Stahp. AuthenticationFailed = 4004 The token you sent in your identify payload is incorrect. DecodeFailure = 4002 You sent an invalid payload in your identifying to the Gateway. Disconnected = 4014 Channel was deleted, you were kicked, voice server changed, or the main gateway session was dropped. Should not reconnect. NotAuthenticated = 4003 You sent a payload before identifying with the Gateway. ServerNotFound = 4011 We can't find the server you're trying to connect to. SessionNolongerValid = 4006 Your session is no longer valid. SessionTimeout = 4009 Your session has timed out. UnknownEncryptionMode = 4016 We didn't recognize your encryption. UnknownOpcode = 4001 You sent an invalid opcode. UnknownProtocol = 4012 We didn't recognize the protocol you sent. VoiceServerCrashed = 4015 The server crashed. Our bad! Try resuming."
  },
  "api/Discord.WebSocket.html": {
    "href": "api/Discord.WebSocket.html",
    "title": "Namespace Discord.WebSocket | Discord.Net Documentation",
    "keywords": "Namespace Discord.WebSocket Classes AutoModActionExecutedData AutoModRuleUpdatedAuditLogData Contains a piece of audit log data related to an auto moderation rule update. BaseSocketClient Represents the base of a WebSocket-based Discord client. DiscordShardedClient DiscordSocketClient Represents a WebSocket-based Discord client. DiscordSocketConfig Represents a configuration class for DiscordSocketClient. DiscordSocketRestClient GatewayReconnectException The exception thrown when the gateway client has been requested to reconnect. SocketApplicationCommand Represents a Websocket-based IApplicationCommand. SocketApplicationCommandChoice Represents a choice for a SocketApplicationCommandOption. SocketApplicationCommandOption Represents an option for a SocketApplicationCommand. SocketAuditLogEntry Represents a Socket-based audit log entry. SocketAutoModBlockedMessageAuditLogData Contains a piece of audit log data related to message getting blocked by automod. SocketAutoModFlaggedMessageAuditLogData Contains a piece of audit log data related to message getting flagged by automod. SocketAutoModRule SocketAutoModRuleCreatedAuditLogData Contains a piece of audit log data related to an auto moderation rule creation. SocketAutoModRuleDeletedAuditLogData Contains a piece of audit log data related to an auto moderation rule removal. SocketAutoModRuleInfo Represents information for an auto moderation rule. SocketAutoModTimeoutUserAuditLogData Contains a piece of audit log data related to user getting in timeout by automod. SocketAutocompleteInteraction Represents a ApplicationCommandAutocomplete received over the gateway. SocketAutocompleteInteractionData Represents data for a slash commands autocomplete interaction. SocketBanAuditLogData Contains a piece of audit log data related to a ban. SocketBotAddAuditLogData Contains a piece of audit log data related to a adding a bot to a guild. SocketCategoryChannel Represents a WebSocket-based category channel. SocketChannel Represents a WebSocket-based channel. SocketChannelCreateAuditLogData Contains a piece of audit log data related to a channel creation. SocketChannelDeleteAuditLogData Contains a piece of audit log data related to a channel deletion. SocketChannelUpdateAuditLogData Contains a piece of audit log data related to a channel update. SocketCommandBase Base class for User, Message, and Slash command interactions. SocketCommandBaseData Represents the base data tied with the SocketCommandBase interaction. SocketCommandBaseData<TOption> Represents the base data tied with the SocketCommandBase interaction. SocketCommandPermissionUpdateAuditLogData Contains a piece of audit log data related to an application command permission update. SocketCustomSticker Represents a custom sticker within a guild received over the gateway. SocketDMChannel Represents a WebSocket-based direct-message channel. SocketEmoteCreateAuditLogData Contains a piece of audit log data related to an emoji creation. SocketEmoteDeleteAuditLogData Contains a piece of audit log data related to an emoji deletion. SocketEmoteUpdateAuditLogData Contains a piece of audit log data related to an emoji update. SocketEntitlement SocketEntity<T> SocketForumChannel Represents a forum channel in a guild. SocketGroupChannel Represents a WebSocket-based private group channel. SocketGroupUser Represents a WebSocket-based group user. SocketGuild Represents a WebSocket-based guild object. SocketGuildChannel Represents a WebSocket-based guild channel. SocketGuildEvent Represents a WebSocket-based guild event. SocketGuildInfo Represents information for a guild. SocketGuildOnboarding Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. SocketGuildOnboardingPrompt Represents the guild onboarding prompt. SocketGuildOnboardingPromptOption Represents the guild onboarding prompt option. SocketGuildUpdateAuditLogData Contains a piece of audit log data related to a guild update. SocketGuildUser Represents a WebSocket-based guild user. SocketIntegrationCreatedAuditLogData Contains a piece of audit log data related to an integration authorization. SocketIntegrationDeletedAuditLogData Contains a piece of audit log data related to an integration removal. SocketIntegrationInfo Represents information for an integration. SocketIntegrationUpdatedAuditLogData Contains a piece of audit log data related to an integration update. SocketInteraction Represents an Interaction received over the gateway. SocketInvite Represents a WebSocket-based invite to a guild. SocketInviteCreateAuditLogData Contains a piece of audit log data related to an invite creation. SocketInviteDeleteAuditLogData Contains a piece of audit log data related to an invite removal. SocketInviteUpdateAuditLogData Contains a piece of audit log data relating to an invite update. SocketKickAuditLogData Contains a piece of audit log data related to a kick. SocketMediaChannel SocketMemberDisconnectAuditLogData Contains a piece of audit log data related to disconnecting members from voice channels. SocketMemberMoveAuditLogData Contains a piece of audit log data related to moving members between voice channels. SocketMemberRoleAuditLogData Contains a piece of audit log data related to a change in a guild member's roles. SocketMemberUpdateAuditLogData Contains a piece of audit log data related to a change in a guild member. SocketMessage Represents a WebSocket-based message. SocketMessageBulkDeleteAuditLogData Contains a piece of audit log data related to message deletion(s). SocketMessageCommand Represents a Websocket-based slash command received over the gateway. SocketMessageCommandData Represents the data tied with the SocketMessageCommand interaction. SocketMessageComponent Represents a Websocket-based interaction type for Message Components. SocketMessageComponentData Represents the data sent with a MessageComponent. SocketMessageDeleteAuditLogData Contains a piece of audit log data related to message deletion(s). SocketMessagePinAuditLogData Contains a piece of audit log data related to a pinned message. SocketMessageUnpinAuditLogData Contains a piece of audit log data related to an unpinned message. SocketModal Represents a user submitted Modal received via GateWay. SocketModalData Represents data sent from a ModalSubmit. SocketNewsChannel Represents a WebSocket-based news channel in a guild that has the same properties as a SocketTextChannel. SocketOnboardingInfo SocketOnboardingPromptCreatedAuditLogData Contains a piece of audit log data related to an onboarding prompt creation. SocketOnboardingPromptInfo SocketOnboardingPromptUpdatedAuditLogData Contains a piece of audit log data related to an onboarding prompt update. SocketOnboardingUpdatedAuditLogData Contains a piece of audit log data related to a guild update. SocketOverwriteCreateAuditLogData Contains a piece of audit log data for a permissions overwrite creation. SocketOverwriteDeleteAuditLogData Contains a piece of audit log data related to the deletion of a permission overwrite. SocketOverwriteUpdateAuditLogData Contains a piece of audit log data related to the update of a permission overwrite. SocketPresence Represents the WebSocket user's presence status. This may include their online status and their activity. SocketPruneAuditLogData Contains a piece of audit log data related to a guild prune. SocketReaction Represents a WebSocket-based reaction object. SocketRole Represents a WebSocket-based role to be given to a guild user. SocketRoleCreateAuditLogData Contains a piece of audit log data related to a role creation. SocketRoleDeleteAuditLogData Contains a piece of audit log data relating to a role deletion. SocketRoleUpdateAuditLogData Contains a piece of audit log data related to a role update. SocketScheduledEventCreateAuditLogData Contains a piece of audit log data related to a scheduled event creation. SocketScheduledEventDeleteAuditLogData Contains a piece of audit log data related to a scheduled event deletion. SocketScheduledEventInfo Represents information for a scheduled event. SocketScheduledEventUpdateAuditLogData Contains a piece of audit log data related to a scheduled event updates. SocketSelfUser Represents the logged-in WebSocket-based user. SocketSlashCommand Represents a Websocket-based slash command received over the gateway. SocketSlashCommandData Represents the data tied with the SocketSlashCommand interaction. SocketSlashCommandDataOption Represents a Websocket-based IApplicationCommandInteractionDataOption received by the gateway. SocketStageChannel Represents a stage channel received over the gateway. SocketStageInfo Represents information for a stage. SocketStageInstanceCreateAuditLogData Contains a piece of audit log data related to a stage going live. SocketStageInstanceDeleteAuditLogData Contains a piece of audit log data related to a stage instance deleted. SocketStageInstanceUpdatedAuditLogData Contains a piece of audit log data related to a stage instance update. SocketSticker Represents a general sticker received over the gateway. SocketStickerCreatedAuditLogData Contains a piece of audit log data related to a sticker creation. SocketStickerDeletedAuditLogData Contains a piece of audit log data related to a sticker removal. SocketStickerInfo Represents information for a guild. SocketStickerUpdatedAuditLogData Contains a piece of audit log data related to a sticker update. SocketSystemMessage Represents a WebSocket-based message sent by the system. SocketTextChannel Represents a WebSocket-based channel in a guild that can send and receive messages. SocketThreadChannel Represents a thread channel inside of a guild. SocketThreadCreateAuditLogData Contains a piece of audit log data related to a thread creation. SocketThreadDeleteAuditLogData Contains a piece of audit log data related to a thread deletion. SocketThreadInfo Represents information for a thread. SocketThreadUpdateAuditLogData Contains a piece of audit log data related to a thread update. SocketThreadUser Represents a thread user received over the gateway. SocketUnbanAuditLogData Contains a piece of audit log data related to an unban. SocketUnknownSticker Represents an unknown sticker received over the gateway. SocketUnknownUser Represents a WebSocket-based user that is yet to be recognized by the client. SocketUser Represents a WebSocket-based user. SocketUserCommand Represents a Websocket-based slash command received over the gateway. SocketUserCommandData Represents the data tied with the SocketUserCommand interaction. SocketUserMessage Represents a WebSocket-based message sent by a user. SocketVoiceChannel Represents a WebSocket-based voice channel in a guild. SocketVoiceChannelStatusDeleteAuditLogData Contains a piece of audit log data related to a voice channel status delete. SocketVoiceChannelStatusUpdatedAuditLogData Contains a piece of audit log data related to a voice channel status update. SocketVoiceServer Represents a WebSocket-based voice server. SocketWebhookCreateAuditLogData Contains a piece of audit log data related to a webhook creation. SocketWebhookDeletedAuditLogData Contains a piece of audit log data related to a webhook deletion. SocketWebhookUpdateAuditLogData Contains a piece of audit log data related to a webhook update. SocketWebhookUser Represents a WebSocket-based webhook user. Structs SocketChannelInfo Represents information for a channel. SocketInviteInfo Represents information for an invite. SocketMemberRoleEditInfo An information object representing a change in one of a guild member's roles. SocketRoleEditInfo Represents information for a role edit. SocketVoiceState Represents a WebSocket user's voice connection status. SocketWebhookInfo Represents information for a webhook. Interfaces ISocketAudioChannel Represents a generic WebSocket-based audio channel. ISocketAuditLogData Represents data applied to a SocketAuditLogEntry. ISocketMessageChannel Represents a generic WebSocket-based channel that can send and receive messages. ISocketPrivateChannel Represents a generic WebSocket-based channel that is private to select recipients. Enums VoiceCloseCode Represents generic op codes for voice disconnect."
  },
  "api/Discord.Webhook.DiscordWebhookClient.html": {
    "href": "api/Discord.Webhook.DiscordWebhookClient.html",
    "title": "Class DiscordWebhookClient | Discord.Net Documentation",
    "keywords": "Class DiscordWebhookClient Namespace Discord.Webhook Assembly Discord.Net.Webhook.dll A client responsible for connecting as a Webhook. public class DiscordWebhookClient : IDisposable Inheritance object DiscordWebhookClient Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DiscordWebhookClient(IWebhook) Creates a new Webhook Discord client. public DiscordWebhookClient(IWebhook webhook) Parameters webhook IWebhook DiscordWebhookClient(IWebhook, DiscordRestConfig) Creates a new Webhook Discord client. public DiscordWebhookClient(IWebhook webhook, DiscordRestConfig config) Parameters webhook IWebhook config DiscordRestConfig DiscordWebhookClient(string) Creates a new Webhook Discord client. public DiscordWebhookClient(string webhookUrl) Parameters webhookUrl string DiscordWebhookClient(string, DiscordRestConfig) Creates a new Webhook Discord client. public DiscordWebhookClient(string webhookUrl, DiscordRestConfig config) Parameters webhookUrl string The url of the webhook. config DiscordRestConfig The configuration options to use for this client. Exceptions ArgumentException Thrown if the webhookUrl is an invalid format. ArgumentNullException Thrown if the webhookUrl is null or whitespace. DiscordWebhookClient(ulong, string) Creates a new Webhook Discord client. public DiscordWebhookClient(ulong webhookId, string webhookToken) Parameters webhookId ulong webhookToken string DiscordWebhookClient(ulong, string, DiscordRestConfig) Creates a new Webhook Discord client. public DiscordWebhookClient(ulong webhookId, string webhookToken, DiscordRestConfig config) Parameters webhookId ulong webhookToken string config DiscordRestConfig Methods DeleteMessageAsync(ulong, RequestOptions, ulong?) Deletes a message posted using this webhook. public Task DeleteMessageAsync(ulong messageId, RequestOptions options = null, ulong? threadId = null) Parameters messageId ulong ID of the deleted message. options RequestOptions The options to be used when sending the request. threadId ulong? Returns Task A task that represents the asynchronous deletion operation. Remarks This method can only delete messages that were sent using the same webhook. DeleteWebhookAsync(RequestOptions) Deletes this webhook from Discord and disposes the client. public Task DeleteWebhookAsync(RequestOptions options = null) Parameters options RequestOptions Returns Task Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() ModifyMessageAsync(ulong, Action<WebhookMessageProperties>, RequestOptions, ulong?) Modifies a message posted using this webhook. public Task ModifyMessageAsync(ulong messageId, Action<WebhookMessageProperties> func, RequestOptions options = null, ulong? threadId = null) Parameters messageId ulong ID of the modified message. func Action<WebhookMessageProperties> A delegate containing the properties to modify the message with. options RequestOptions The options to be used when sending the request. threadId ulong? Returns Task A task that represents the asynchronous modification operation. Remarks This method can only modify messages that were sent using the same webhook. ModifyWebhookAsync(Action<WebhookProperties>, RequestOptions) Modifies the properties of this webhook. public Task ModifyWebhookAsync(Action<WebhookProperties> func, RequestOptions options = null) Parameters func Action<WebhookProperties> options RequestOptions Returns Task SendFileAsync(FileAttachment, string, bool, IEnumerable<Embed>, string, string, RequestOptions, AllowedMentions, MessageComponent, MessageFlags, ulong?, string, ulong[]) Sends a message to the channel for this webhook with an attachment. public Task<ulong> SendFileAsync(FileAttachment attachment, string text, bool isTTS = false, IEnumerable<Embed> embeds = null, string username = null, string avatarUrl = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageComponent components = null, MessageFlags flags = MessageFlags.None, ulong? threadId = null, string threadName = null, ulong[] appliedTags = null) Parameters attachment FileAttachment text string isTTS bool embeds IEnumerable<Embed> username string avatarUrl string options RequestOptions allowedMentions AllowedMentions components MessageComponent flags MessageFlags threadId ulong? threadName string appliedTags ulong[] Returns Task<ulong> Returns the ID of the created message. SendFileAsync(Stream, string, string, bool, IEnumerable<Embed>, string, string, RequestOptions, bool, AllowedMentions, MessageComponent, MessageFlags, ulong?, string, ulong[]) Sends a message to the channel for this webhook with an attachment. public Task<ulong> SendFileAsync(Stream stream, string filename, string text, bool isTTS = false, IEnumerable<Embed> embeds = null, string username = null, string avatarUrl = null, RequestOptions options = null, bool isSpoiler = false, AllowedMentions allowedMentions = null, MessageComponent components = null, MessageFlags flags = MessageFlags.None, ulong? threadId = null, string threadName = null, ulong[] appliedTags = null) Parameters stream Stream filename string text string isTTS bool embeds IEnumerable<Embed> username string avatarUrl string options RequestOptions isSpoiler bool allowedMentions AllowedMentions components MessageComponent flags MessageFlags threadId ulong? threadName string appliedTags ulong[] Returns Task<ulong> Returns the ID of the created message. SendFileAsync(string, string, bool, IEnumerable<Embed>, string, string, RequestOptions, bool, AllowedMentions, MessageComponent, MessageFlags, ulong?, string, ulong[]) Sends a message to the channel for this webhook with an attachment. public Task<ulong> SendFileAsync(string filePath, string text, bool isTTS = false, IEnumerable<Embed> embeds = null, string username = null, string avatarUrl = null, RequestOptions options = null, bool isSpoiler = false, AllowedMentions allowedMentions = null, MessageComponent components = null, MessageFlags flags = MessageFlags.None, ulong? threadId = null, string threadName = null, ulong[] appliedTags = null) Parameters filePath string text string isTTS bool embeds IEnumerable<Embed> username string avatarUrl string options RequestOptions isSpoiler bool allowedMentions AllowedMentions components MessageComponent flags MessageFlags threadId ulong? threadName string appliedTags ulong[] Returns Task<ulong> Returns the ID of the created message. SendFilesAsync(IEnumerable<FileAttachment>, string, bool, IEnumerable<Embed>, string, string, RequestOptions, AllowedMentions, MessageComponent, MessageFlags, ulong?, string, ulong[]) Sends a message to the channel for this webhook with an attachment. public Task<ulong> SendFilesAsync(IEnumerable<FileAttachment> attachments, string text, bool isTTS = false, IEnumerable<Embed> embeds = null, string username = null, string avatarUrl = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageComponent components = null, MessageFlags flags = MessageFlags.None, ulong? threadId = null, string threadName = null, ulong[] appliedTags = null) Parameters attachments IEnumerable<FileAttachment> text string isTTS bool embeds IEnumerable<Embed> username string avatarUrl string options RequestOptions allowedMentions AllowedMentions components MessageComponent flags MessageFlags threadId ulong? threadName string appliedTags ulong[] Returns Task<ulong> Returns the ID of the created message. SendMessageAsync(string, bool, IEnumerable<Embed>, string, string, RequestOptions, AllowedMentions, MessageComponent, MessageFlags, ulong?, string, ulong[]) Sends a message to the channel for this webhook. public Task<ulong> SendMessageAsync(string text = null, bool isTTS = false, IEnumerable<Embed> embeds = null, string username = null, string avatarUrl = null, RequestOptions options = null, AllowedMentions allowedMentions = null, MessageComponent components = null, MessageFlags flags = MessageFlags.None, ulong? threadId = null, string threadName = null, ulong[] appliedTags = null) Parameters text string isTTS bool embeds IEnumerable<Embed> username string avatarUrl string options RequestOptions allowedMentions AllowedMentions components MessageComponent flags MessageFlags threadId ulong? threadName string appliedTags ulong[] Returns Task<ulong> Returns the ID of the created message. Events Log public event Func<LogMessage, Task> Log Event Type Func<LogMessage, Task>"
  },
  "api/Discord.Webhook.WebhookMessageProperties.html": {
    "href": "api/Discord.Webhook.WebhookMessageProperties.html",
    "title": "Class WebhookMessageProperties | Discord.Net Documentation",
    "keywords": "Class WebhookMessageProperties Namespace Discord.Webhook Assembly Discord.Net.Webhook.dll Properties that are used to modify an Webhook message with the specified changes. public class WebhookMessageProperties Inheritance object WebhookMessageProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AllowedMentions Gets or sets the allowed mentions of the message. public Optional<AllowedMentions> AllowedMentions { get; set; } Property Value Optional<AllowedMentions> Attachments Gets or sets the attachments for the message. public Optional<IEnumerable<FileAttachment>> Attachments { get; set; } Property Value Optional<IEnumerable<FileAttachment>> Components Gets or sets the components that the message should display. public Optional<MessageComponent> Components { get; set; } Property Value Optional<MessageComponent> Content Gets or sets the content of the message. public Optional<string> Content { get; set; } Property Value Optional<string> Remarks This must be less than the constant defined by MaxMessageSize. Embeds Gets or sets the embed array that the message should display. public Optional<IEnumerable<Embed>> Embeds { get; set; } Property Value Optional<IEnumerable<Embed>>"
  },
  "api/Discord.Webhook.html": {
    "href": "api/Discord.Webhook.html",
    "title": "Namespace Discord.Webhook | Discord.Net Documentation",
    "keywords": "Namespace Discord.Webhook Classes DiscordWebhookClient A client responsible for connecting as a Webhook. WebhookMessageProperties Properties that are used to modify an Webhook message with the specified changes."
  },
  "api/Discord.WebhookProperties.html": {
    "href": "api/Discord.WebhookProperties.html",
    "title": "Class WebhookProperties | Discord.Net Documentation",
    "keywords": "Class WebhookProperties Namespace Discord Assembly Discord.Net.Core.dll Properties used to modify an IWebhook with the specified changes. public class WebhookProperties Inheritance object WebhookProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Examples The following example uses ModifyAsync to apply changes specified in the properties, await webhook.ModifyAsync(x => { x.Name = \"very fast fox\"; x.ChannelId = newChannelId; }); Properties Channel Gets or sets the channel for this webhook. public Optional<ITextChannel> Channel { get; set; } Property Value Optional<ITextChannel> Remarks This field is not used when authenticated with Webhook. See Also ModifyAsync(Action<WebhookProperties>, RequestOptions) ChannelId Gets or sets the channel ID for this webhook. public Optional<ulong> ChannelId { get; set; } Property Value Optional<ulong> Remarks This field is not used when authenticated with Webhook. See Also ModifyAsync(Action<WebhookProperties>, RequestOptions) Image Gets or sets the default avatar of the webhook. public Optional<Image?> Image { get; set; } Property Value Optional<Image?> See Also ModifyAsync(Action<WebhookProperties>, RequestOptions) Name Gets or sets the default name of the webhook. public Optional<string> Name { get; set; } Property Value Optional<string> See Also ModifyAsync(Action<WebhookProperties>, RequestOptions) See Also ModifyAsync(Action<WebhookProperties>, RequestOptions)"
  },
  "api/Discord.WebhookType.html": {
    "href": "api/Discord.WebhookType.html",
    "title": "Enum WebhookType | Discord.Net Documentation",
    "keywords": "Enum WebhookType Namespace Discord Assembly Discord.Net.Core.dll Represents the type of a webhook. public enum WebhookType Fields Application = 3 An application (interaction) webhook. ChannelFollower = 2 A channel follower webhook. Incoming = 1 An incoming webhook. Remarks This type is currently unused, and is only returned in audit log responses."
  },
  "api/Discord.WelcomeScreen.html": {
    "href": "api/Discord.WelcomeScreen.html",
    "title": "Class WelcomeScreen | Discord.Net Documentation",
    "keywords": "Class WelcomeScreen Namespace Discord Assembly Discord.Net.Core.dll public class WelcomeScreen Inheritance object WelcomeScreen Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Channels Gets the channels shown in the welcome screen, up to 5 channels. public IReadOnlyCollection<WelcomeScreenChannel> Channels { get; } Property Value IReadOnlyCollection<WelcomeScreenChannel> Description Gets the server description shown in the welcome screen. null if not set. public string Description { get; } Property Value string"
  },
  "api/Discord.WelcomeScreenChannel.html": {
    "href": "api/Discord.WelcomeScreenChannel.html",
    "title": "Class WelcomeScreenChannel | Discord.Net Documentation",
    "keywords": "Class WelcomeScreenChannel Namespace Discord Assembly Discord.Net.Core.dll public class WelcomeScreenChannel : ISnowflakeEntity, IEntity<ulong> Inheritance object WelcomeScreenChannel Implements ISnowflakeEntity IEntity<ulong> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. Description Gets the description shown for the channel. public string Description { get; } Property Value string Emoji Gets the emoji for this channel. Emoji if it is unicode emoji, Emote if it is a custom one and null if none is set. public IEmote Emoji { get; } Property Value IEmote Remarks If the emoji is Emote only the Id will be populated. Use GetEmoteAsync(ulong, RequestOptions) to get the emoji. Id Gets the channel's id. public ulong Id { get; } Property Value ulong"
  },
  "api/Discord.WelcomeScreenChannelProperties.html": {
    "href": "api/Discord.WelcomeScreenChannelProperties.html",
    "title": "Class WelcomeScreenChannelProperties | Discord.Net Documentation",
    "keywords": "Class WelcomeScreenChannelProperties Namespace Discord Assembly Discord.Net.Core.dll public class WelcomeScreenChannelProperties : ISnowflakeEntity, IEntity<ulong> Inheritance object WelcomeScreenChannelProperties Implements ISnowflakeEntity IEntity<ulong> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WelcomeScreenChannelProperties() Initializes a new instance of WelcomeScreenChannelProperties. public WelcomeScreenChannelProperties() WelcomeScreenChannelProperties(ulong, string, IEmote) Initializes a new instance of WelcomeScreenChannelProperties. public WelcomeScreenChannelProperties(ulong id, string description, IEmote emoji = null) Parameters id ulong Id if a channel. description string Description for the channel in the welcome screen. emoji IEmote The emoji for the channel in the welcome screen. Properties CreatedAt Gets when the snowflake was created. public DateTimeOffset CreatedAt { get; } Property Value DateTimeOffset A DateTimeOffset representing when the entity was first created. Description Gets or sets the description shown for the channel. public string Description { get; set; } Property Value string Emoji Gets or sets the emoji for this channel. Emoji if it is unicode emoji, Emote if it is a custom one and null if none is set. public IEmote Emoji { get; set; } Property Value IEmote Remarks If the emoji is Emote only the Id will be populated. Use GetEmoteAsync(ulong, RequestOptions) to get the emoji. Id Gets or sets the channel's id. public ulong Id { get; set; } Property Value ulong Methods FromWelcomeScreenChannel(WelcomeScreenChannel) Initializes a new instance of WelcomeScreenChannelProperties. public static WelcomeScreenChannelProperties FromWelcomeScreenChannel(WelcomeScreenChannel channel) Parameters channel WelcomeScreenChannel A welcome screen channel to modify. Returns WelcomeScreenChannelProperties A new instance of WelcomeScreenChannelProperties."
  },
  "api/Discord.html": {
    "href": "api/Discord.html",
    "title": "Namespace Discord | Discord.Net Documentation",
    "keywords": "Namespace Discord Classes ActionRowBuilder Represents a class used to build Action rows. ActionRowComponent Represents a IMessageComponent Row for child components to live in. AddGuildUserProperties Properties that are used to add a new IGuildUser to the guild with the following parameters. AllowedMentions Defines which mentions and types of mentions that will notify users from the message content. ApplicationCommandOptionChoiceProperties Represents a choice for a IApplicationCommandInteractionDataOption. This class is used when making new commands. ApplicationCommandOptionProperties Represents a IApplicationCommandOption for making slash commands. ApplicationCommandPermission Application command permissions allow you to enable or disable commands for specific users or roles within a guild. ApplicationCommandProperties Represents the base class to create/modify application commands. ApplicationInstallParams Represents install parameters for an application. AsyncEnumerableExtensions An extension class for squashing IAsyncEnumerable<T>. Attachment Represents a message attachment found in a IUserMessage. AttachmentExtensions AudioChannelProperties Provides properties that are used to modify an IAudioChannel with the specified changes. AutoModRuleAction Represents an action that will be preformed if a user breaks an IAutoModRule. AutoModRuleActionProperties Provides properties used to modify a AutoModRuleAction. AutoModRuleProperties Provides properties used to modify a IAutoModRule. AutocompleteOption Represents an autocomplete option. AutocompleteResult Represents a result to an autocomplete interaction. BotGateway Stores the gateway information related to the current bot. ButtonBuilder Represents a class used to build ButtonComponent's. ButtonComponent Represents a IMessageComponent Button. CDN Represents a class containing the strings related to various Content Delivery Networks (CDNs). ChannelExtensions ComponentBuilder Represents a builder for creating a MessageComponent. CustomStatusGame A user's activity for their custom status. DiscordClientExtensions An extension class for the Discord client. DiscordComparers Represents a collection of IEqualityComparer<T> for various Discord objects. DiscordConfig Defines various behaviors of Discord.Net. Embed Represents an embed object seen in an IUserMessage. EmbedAuthorBuilder Represents a builder class for a author field. EmbedBuilder Represents a builder class for creating a Rich Embed. EmbedBuilderExtensions An extension class for building an embed. EmbedFieldBuilder Represents a builder class for an embed field. EmbedFooterBuilder Represents a builder class for an embed footer. Emoji A Unicode emoji. Emote A custom image-based emote. EmoteProperties Provides properties that are used to modify an Emote with the specified changes. Format A helper class for formatting characters. ForumChannelProperties ForumTagBuilder ForumTagBuilderExtensions ForumTagProperties Game A user's game status. GameAsset An asset for a RichGame object containing the text and image. GameParty Party information for a RichGame object. GameSecrets Party secret for a RichGame object. GameTimestamps Timestamps for a RichGame object. GuildApplicationCommandPermission Returned when fetching the permissions for a command in a guild. GuildChannelProperties Properties that are used to modify an IGuildChannel with the specified changes. GuildEmote An image-based emote that is attached to a guild. GuildExtensions An extension class for IGuild. GuildFeatures GuildIncidentsData GuildIncidentsDataProperties GuildOnboardingExtensions GuildOnboardingPromptOptionProperties Represents properties used to create or modify guild onboarding prompt option. GuildOnboardingPromptProperties Represents properties used to create or modify guild onboarding prompt. GuildOnboardingProperties Represents properties used to create or modify guild onboarding. GuildProperties Provides properties that are used to modify an IGuild with the specified changes. GuildScheduledEventsProperties Provides properties that are used to modify an IGuildScheduledEvent with the specified changes. GuildUserProperties Properties that are used to modify an IGuildUser with the following parameters. GuildWidgetProperties Provides properties that are used to modify the widget of an IGuild with the specified changes. MentionUtils Provides a series of helper methods for parsing mentions. MessageActivity An activity object found in a sent message. MessageApplication MessageCommandBuilder A class used to build Message commands. MessageCommandProperties A class used to create message commands. MessageComponent Represents a component object used to send components with messages. MessageExtensions Provides extension methods for IMessage. MessageInteraction<TUser> Represents a partial IDiscordInteraction within a message. MessageProperties Properties that are used to modify an IUserMessage with the specified changes. MessageReference Contains the IDs sent from a crossposted message or inline reply. MessageResolvedData MessageRoleSubscriptionData Represents a role subscription data in IMessage. Modal Represents a modal interaction. ModalBuilder Represents a builder for creating a Modal. ModalComponent Represents a component object used in Modals. ModalComponentBuilder Represents a builder for creating a ModalComponent. ModifyApplicationProperties Represents properties used to modify current application's bot. Optional PartialGuild Represents a partial guild object. ReorderChannelProperties Provides properties that are used to reorder an IGuildChannel. ReorderRoleProperties Properties that are used to reorder an IRole. RequestOptions Represents options that should be used when sending a request. RichGame A user's Rich Presence status. RoleConnection Represents the connection object that the user has attached. RoleConnectionMetadata Represents the role connection metadata object. RoleConnectionMetadataProperties Properties object used to create or modify RoleConnectionMetadata object. RoleConnectionProperties Represents the properties used to modify user's RoleConnection. RoleProperties Properties that are used to modify an IRole with the specified changes. RoleTags Provides tags related to a discord role. SelectMenuBuilder Represents a class used to build SelectMenuComponent's. SelectMenuComponent Represents a select menu component defined at https://discord.com/developers/docs/interactions/message-components#select-menu-object SelectMenuOption Represents a choice for a SelectMenuComponent. SelectMenuOptionBuilder Represents a class used to build SelectMenuOption's. SelfUserProperties Properties that are used to modify the ISelfUser with the specified changes. SessionStartLimit Stores the information related to the gateway identify request. SlashCommandBuilder Represents a class used to build slash commands. SlashCommandOptionBuilder Represents a class used to build options for the SlashCommandBuilder. SlashCommandProperties Represents a class used to create slash commands. SnowflakeUtils Provides a series of helper methods for handling snowflake identifiers. SpotifyGame A user's activity for listening to a song on Spotify. StageInstanceProperties Represents properties to use when modifying a stage instance. StickerPack<TSticker> Represents a discord sticker pack. StickerProperties Represents a class used to modify stickers. StreamingGame A user's activity for streaming on services such as Twitch. Tag<T> TextChannelProperties Provides properties that are used to modify an ITextChannel with the specified changes. TextInputBuilder TextInputComponent Represents a IMessageComponent text input. ThreadChannelProperties Provides properties that are used to modify an IThreadChannel with the specified changes. TokenUtils Provides a series of helper methods for handling Discord login tokens. UserCommandBuilder A class used to build user commands. UserCommandProperties A class used to create User commands. UserExtensions An extension class for various Discord user objects. VoiceChannelProperties Provides properties that are used to modify an IVoiceChannel with the specified changes. WebhookProperties Properties used to modify an IWebhook with the specified changes. WelcomeScreen WelcomeScreenChannel WelcomeScreenChannelProperties Structs Cacheable<TEntity, TId> Represents a cached entity. Cacheable<TCachedEntity, TDownloadableEntity, TRelationship, TId> ChannelPermissions Color Represents a color used in Discord. DiscordError Represents an error with a property. DiscordJsonError Represents a generic parsed json error received from discord after performing a rest request. EmbedAuthor A author field of an Embed. EmbedField A field for an Embed. EmbedFooter A footer field for an Embed. EmbedImage An image for an Embed. EmbedProvider A provider field for an Embed. EmbedThumbnail A thumbnail featured in an Embed. EmbedVideo A video featured in an Embed. FileAttachment Represents an outgoing file attachment used to send a file to discord. ForumTag A struct representing a forum channel tag. GuildInventorySettings GuildPermissions Image An image that will be uploaded to Discord. LogMessage Provides a message object used for logging purposes. Optional<T> Overwrite Represent a permission object. OverwritePermissions Represents a container for a series of overwrite permissions. ReactionMetadata A metadata containing reaction information. SKU SelectMenuDefaultValue Represents a default value of an auto-populated select menu. TimestampTag Represents a class used to make timestamps in messages. see https://discord.com/developers/docs/reference#message-formatting-timestamp-styles. Interfaces IActivity A user's activity status, typically a Game. IApplication Represents a Discord application created via the developer portal. IApplicationCommand The base command model that belongs to an application. IApplicationCommandInteraction Represents an application command interaction. IApplicationCommandInteractionData Represents data of an Interaction Command, see https://discord.com/developers/docs/interactions/slash-commands#interaction-applicationcommandinteractiondata. IApplicationCommandInteractionDataOption Represents a option group for a command. IApplicationCommandOption Options for the IApplicationCommand. IApplicationCommandOptionChoice Specifies choices for command group. IAttachment Represents a message attachment found in a IUserMessage. IAudioChannel Represents a generic audio channel. IAuditLogData Represents data applied to an IAuditLogEntry. IAuditLogEntry Represents a generic audit log entry. IAuditLogInfoModel IAutoModRule Represents a auto mod rule within a guild. IAutocompleteInteraction Represents a ApplicationCommandAutocomplete. IAutocompleteInteractionData Represents data for a slash commands autocomplete interaction. IBan Represents a generic ban object. ICategoryChannel Represents a generic category channel. IChannel Represents a generic channel. IComponentInteraction Represents an interaction type for Message Components. IComponentInteractionData Represents the data sent with the IComponentInteraction. IConnection ICustomSticker Represents a custom sticker within a guild. IDMChannel Represents a generic direct-message channel. IDeletable Determines whether the object is deletable or not. IDiscordClient Represents a generic Discord client. IDiscordInteraction Represents a discord interaction. IDiscordInteractionData Represents an interface used to specify classes that they are a valid data type of a IDiscordInteraction class. IEmbed Represents a Discord embed object. IEmote Represents a general container for any type of emote in a message. IEntitlement IEntity<TId> IForumChannel Represents a forum channel in a guild that can create posts. IForumTag Represents a Discord forum tag IGroupChannel Represents a generic private group channel. IGroupUser Represents a Discord user that is in a group. IGuild Represents a generic guild/server. IGuildChannel Represents a generic guild channel. IGuildOnboarding Represents the guild onboarding flow. IGuildOnboardingPrompt Represents the guild onboarding prompt. IGuildOnboardingPromptOption Represents the guild onboarding prompt option. IGuildScheduledEvent Represents a generic guild scheduled event. IGuildUser Represents a generic guild user. IIntegration Holds information for an integration feature. Nullable fields not provided for Discord bot integrations, but are for Twitch etc. IIntegrationAccount Provides the account information for an IIntegration. IIntegrationApplication Provides the bot/OAuth2 application for an IIntegration. IIntegrationChannel Represents a channel in a guild that can create webhooks. IInteractionContext Represents the context of an Interaction. IInvite Represents a generic invite object. IInviteMetadata Represents additional information regarding the generic invite object. IMediaChannel Represents a media channel in a guild that can create posts. IMentionable Determines whether the object is mentionable or not. IMessage Represents a message object. IMessageChannel Represents a generic channel that can send and receive messages. IMessageCommandInteraction Represents a Message Command interaction. IMessageCommandInteractionData Represents the data tied with the IMessageCommandInteraction interaction. IMessageComponent Represents a message component on a message. IMessageInteraction Represents a partial IDiscordInteraction within a message. IModalInteraction Represents an interaction type for Modals. IModalInteractionData Represents the data sent with the IModalInteraction. INestedChannel Represents a type of guild channel that can be nested within a category. INewsChannel Represents a generic news channel in a guild that can send and receive messages. IPresence Represents the user's presence status. This may include their online status and their activity. IPrivateChannel Represents a generic channel that is private to select recipients. IRateLimitInfo Represents a generic ratelimit info. IReaction Represents a generic reaction object. IRestInteractionContext IRole Represents a generic role object to be given to a guild user. IRouteMatchContainer Represents a container for temporarily storing CustomId wild card matches of a component. IRouteSegmentMatch Represents an object for storing a CustomId wild card match. ISelfUser Represents the logged-in Discord user. ISlashCommandInteraction Represents a slash command interaction. ISnowflakeEntity Represents a Discord snowflake entity. IStageChannel Represents a generic Stage Channel. ISticker Represents a discord sticker. IStickerItem Represents a partial sticker item received with a message. ISystemMessage Represents a generic message sent by the system. ITag ITeam Represents a Discord Team. ITeamMember Represents a Discord Team member. ITextChannel Represents a generic channel in a guild that can send and receive messages. IThreadChannel Represents a thread channel inside of a guild. IThreadUser Represents a Discord thread user. IUpdateable Defines whether the object is updateable or not. IUser Represents a generic user. IUserCommandInteraction Represents a User Command interaction. IUserCommandInteractionData Represents the data tied with the IUserCommandInteraction interaction. IUserGuild IUserMessage Represents a generic message sent by a user. IVoiceChannel Represents a generic voice channel in a guild. IVoiceRegion Represents a region of which the user connects to when using voice. IVoiceState Represents a user's voice connection status. IWebhook Represents a webhook object on Discord. IWebhookUser Represents a Webhook Discord user. Enums ActionType Representing a type of action within an IAuditLogEntry. ActivityProperties Flags for the Flags property, that are ORd together. These describe what the activity payload includes. ActivityType Specifies a Discord user's activity type. AllowedMentionTypes Specifies the type of mentions that will be notified from the message content. ApplicationCommandOptionType The option type of the Slash command parameter, See the discord docs. ApplicationCommandPermissionTarget Specifies the target of the permission. ApplicationCommandType Represents the types of application commands. ApplicationDiscoverabilityState ApplicationExplicitContentFilterLevel ApplicationFlags Represents public flags for an application. ApplicationInteractionsVersion ApplicationMonetizationEligibilityFlags Gets the monetization eligibility flags for the application combined as a bitfield. ApplicationMonetizationState ApplicationRpcState ApplicationStoreState ApplicationVerificationState AttachmentFlags AutoModActionType AutoModEventType An enum indecating in what event context a rule should be checked. AutoModTriggerType An enum representing the type of content which can trigger the rule. ButtonStyle Represents different styles to use with buttons. You can see an example of the different styles at https://discord.com/developers/docs/interactions/message-components#buttons-button-styles CacheMode Specifies the cache mode that should be used. ChannelFlags Represents public flags for a channel. ChannelPermission Defines the available permissions for a channel. ChannelType Defines the types of channels. ClientType Defines the types of clients a user can be active on. ComponentType Represents a type of a component. ConnectionState Specifies the connection state of a client. ConnectionVisibility The visibility of the connected account. DefaultApplications DefaultMessageNotifications Specifies the default message notification behavior the guild uses. Direction Specifies the direction of where entities (e.g. bans/messages) should be retrieved from. DiscordErrorCode Represents a set of json error codes received by discord. DiscoveryEligibilityFlags Gets the discovery eligibility flags for the application combined as a bitfield. EmbedType Specifies the type of embed. EntitlementType ExplicitContentFilterLevel ForumLayout Represents the layout type used to display posts in a forum channel. ForumSortOrder Defines the rule used to order posts in forum channels. GatewayIntents GuildFeature GuildOnboardingMode Defines the criteria used to satisfy Onboarding constraints that are required for enabling. GuildOnboardingPromptType Represents the guild onboarding option type. GuildPermission Defines the available permissions for a channel. GuildScheduledEventPrivacyLevel Represents the privacy level of a guild scheduled event. GuildScheduledEventStatus Represents the status of a guild event. GuildScheduledEventType Represents the type of a guild scheduled event. GuildUserFlags Represents public flags for a guild member. ImageFormat Specifies the type of format the image should return in. IntegrationExpireBehavior The behavior of expiring subscribers for an IIntegration. InteractionResponseType The response type for an IDiscordInteraction. InteractionType Represents a type of Interaction from discord. KeywordPresetTypes An enum representing preset filter types. LogSeverity Specifies the severity of the log message. LoginState Specifies the state of the client's login status. MembershipState Represents the membership state of a team member. MessageActivityType MessageFlags MessageSource Specifies the source of the Discord message. MessageType Specifies the type of message. MfaLevel Specifies the guild's Multi-Factor Authentication (MFA) level requirement. NsfwLevel PermValue Specifies the permission value. PermissionTarget Specifies the target of the permission. PremiumTier PremiumType Specifies the type of subscription a user is subscribed to. ReactionType RetryMode Specifies how a request should act in the case of an error. RoleConnectionMetadataType Represents the type of Application Role Connection Metadata. RoleFlags SKUFlags SKUType SelectDefaultValueType Type of a SelectDefaultValueType. StagePrivacyLevel Represents the privacy level of a stage. StickerFormatType Defines the types of formats for stickers. StickerType Represents a type of sticker.. SubscriptionOwnerType SystemChannelMessageDeny TagHandling Specifies the handling type the tag should use. TagType Specifies the type of Discord tag. TargetUserType TextInputStyle ThreadArchiveDuration Represents the thread auto archive duration. ThreadType Represents types of threads. TimestampTagStyles Represents a set of styles to use with a TimestampTag TokenType Specifies the type of token to use with the client. UserProperties UserStatus Defines the available Discord user status. VerificationLevel Specifies the verification level the guild uses. VideoQualityMode Represents a video quality mode for voice channels. WebhookType Represents the type of a webhook."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Documentation | Discord.Net Documentation",
    "keywords": "API Documentation This is where you will find documentation for all members and objects in Discord.Net. Commonly Used Entities Discord.WebSocket DiscordSocketClient SocketGuildChannel SocketGuildUser SocketMessage SocketRole"
  },
  "faq/basics/basic-operations.html": {
    "href": "faq/basics/basic-operations.html",
    "title": "Questions about Basic Operations | Discord.Net Documentation",
    "keywords": "Basic Operations Questions In the following section, you will find commonly asked questions and answers regarding basic usage of the library, as well as language-specific tips when using this library. How should I safely check a type? Warning Direct casting (e.g., (Type)type) is the least recommended way of casting, as it can throw an InvalidCastException when the object isn't the desired type. Please refer to this post for more details. In Discord.Net, the idea of polymorphism is used throughout. You may need to cast the object as a certain type before you can perform any action. A good and safe casting example: public async Task MessageReceivedHandler(SocketMessage msg) { // Option 1: // Using the `as` keyword, which will return `null` if the object isn't the desired type. var usermsg = msg as SocketUserMessage; // We bail when the message isn't the desired type. if (msg == null) return; // Option 2: // Using the `is` keyword to cast (C#7 or above only) if (msg is SocketUserMessage usermsg) { // Do things } } How do I send a message? Tip The GetChannel method by default returns an IChannel, allowing channel types such as IVoiceChannel, ICategoryChannel to be returned; consequently, you cannot send a message to channels like those. Any implementation of IMessageChannel has a SendMessageAsync method. You can get the channel via GetChannel under the client. Remember, when using Discord.Net, polymorphism is a common recurring theme. This means an object may take in many shapes or form, which means casting is your friend. You should attempt to cast the channel as an IMessageChannel or any other entity that implements it to be able to message. How can I tell if a message is from X, Y, Z channel? You may check the message channel type. Visit Glossary to see the various types of channels. How can I get the guild from a message? There are 2 ways to do this. You can do either of the following, Cast the user as an IGuildUser and use its IGuild property. Cast the channel as an IGuildChannel and use its IGuild property. How do I add hyperlink text to an embed? Embeds can use standard markdown in the description field as well as in field values. With that in mind, links can be added with [text](link). How do I add reactions to a message? Any entity that implements IUserMessage has an AddReactionAsync method. This method expects an IEmote as a parameter. In Discord.Net, an Emote represents a custom-image emote, while an Emoji is a Unicode emoji (standard emoji). Both Emoji and Emote implement IEmote and are valid options. Adding a reaction to another message Adding a reaction to a sent message // bail if the message is not a user one (system messages cannot have reactions) var usermsg = msg as IUserMessage; if (usermsg == null) return; // standard Unicode emojis Emoji emoji = new Emoji(\"👍\"); // or // Emoji emoji = new Emoji(\"\\uD83D\\uDC4D\"); // custom guild emotes Emote emote = Emote.Parse(\"<:dotnet:232902710280716288>\"); // using Emote.TryParse may be safer in regards to errors being thrown; // please note that the method does not verify if the emote exists, // it simply creates the Emote object for you. // add the reaction to the message await usermsg.AddReactionAsync(emoji); await usermsg.AddReactionAsync(emote); // capture the message you're sending in a variable var msg = await channel.SendMessageAsync(\"This will have reactions added.\"); // standard Unicode emojis Emoji emoji = new Emoji(\"👍\"); // or // Emoji emoji = new Emoji(\"\\uD83D\\uDC4D\"); // custom guild emotes Emote emote = Emote.Parse(\"<:dotnet:232902710280716288>\"); // using Emote.TryParse may be safer in regards to errors being thrown; // please note that the method does not verify if the emote exists, // it simply creates the Emote object for you. // add the reaction to the message await msg.AddReactionAsync(emoji); await msg.AddReactionAsync(emote); What is a \"preemptive rate limit?\" A preemptive rate limit is Discord.Net's way of telling you to slow down before you get hit by the real rate limit. Hitting a real rate limit might prevent your entire client from sending any requests for a period of time. This is calculated based on the HTTP header returned by a Discord response. Why am I getting so many preemptive rate limits when I try to add more than one reactions? This is due to how HTML header works, mistreating 0.25sec/action to 1sec. This causes the lib to throw preemptive rate limit more frequently than it should for methods such as adding reactions. Can I opt-out of preemptive rate limits? Unfortunately, not at the moment. See #401."
  },
  "faq/basics/client-basics.html": {
    "href": "faq/basics/client-basics.html",
    "title": "Basic Questions about Client | Discord.Net Documentation",
    "keywords": "Client Basics Questions In the following section, you will find commonly asked questions and answers about common issues that you may face when utilizing the various clients offered by the library. I keep having trouble with intents! As Discord.NET has upgraded from Discord API v6 to API v9, GatewayIntents must now be specified in the socket config, as well as on the developer portal. // Where ever you declared your websocket client. DiscordSocketClient _client; ... var config = new DiscordSocketConfig() { .. // Other config options can be presented here. GatewayIntents = GatewayIntents.All } _client = new DiscordSocketClient(config); Common intents: AllUnprivileged: This is a group of most common intents, that do NOT require any developer portal intents to be enabled. This includes intents that receive messages such as: GatewayIntents.GuildMessages, GatewayIntents.DirectMessages GuildMembers: An intent disabled by default, as you need to enable it in the developer portal. GuildPresences: Also disabled by default, this intent together with GuildMembers are the only intents not included in AllUnprivileged. All: All intents, it is ill advised to use this without care, as it can cause a memory leak from presence. The library will give responsive warnings if you specify unnecessary intents. Note All gateway intents, their Discord API counterpart and their enum value are listed HERE Stacking intents: It is common that you require several intents together. The example below shows how this can be done. GatewayIntents = GatewayIntents.AllUnprivileged | GatewayIntents.GuildMembers | .. Note Further documentation on the | operator can be found HERE My client keeps returning 401 upon logging in! Warning Userbot/selfbot (logging in with a user token) is no longer supported with this library starting from 2.0, as logging in under a user account may result in account termination. For more information, see issue 827 & 958, as well as the official Discord API Terms of Service. There are few possible reasons why this may occur. You are not using the appropriate TokenType. If you are using a bot account created from the Discord Developer portal, you should be using TokenType.Bot. You are not using the correct login credentials. Please keep in mind that a token is different from a client secret. How do I do X, Y, Z when my bot connects/logs on? Why do I get a NullReferenceException upon calling any client methods after connect? Your bot should not attempt to interact in any way with guilds/servers until the Ready event fires. When the bot connects, it first has to download guild information from Discord for you to get access to any server information; the client is not ready at this point. Technically, the GuildAvailable event fires once the data for a particular guild has downloaded; however, it is best to wait for all guilds to be downloaded. Once all downloads are complete, the Ready event is triggered, then you can proceed to do whatever you like. How do I get a message's previous content when that message is edited? If you need to do anything with messages (e.g., checking Reactions, checking the content of edited/deleted messages), you must set the MessageCacheSize in your DiscordSocketConfig settings in order to use the cached message entity. Read more about it here. Message Cache must be enabled. Hook the MessageUpdated event. This event provides a before and after object. Only messages received after the bot comes online will be available in the cache. What is a shard/sharded client, and how is it different from the DiscordSocketClient? As your bot grows in popularity, it is recommended that you should section your bot off into separate processes. The DiscordShardedClient is essentially a class that allows you to easily create and manage multiple DiscordSocketClient instances, with each one serving a different amount of guilds. There are very few differences from the DiscordSocketClient class, and it is very straightforward to modify your existing code to use a DiscordShardedClient when necessary. You can specify the total amount of shards, or shard ids, via DiscordShardedClient's constructors. If the total shards are not specified then the library will get the recommended shard count via the Get Gateway Bot route. The Connected, Disconnected, Ready, and LatencyUpdated events are replaced with ShardConnected, ShardDisconnected, ShardReady, and ShardLatencyUpdated. Every event handler you apply/remove to the DiscordShardedClient is applied/removed to each shard. If you wish to control a specific shard's events, you can access an individual shard through the Shards property. If you do not wish to use the DiscordShardedClient and instead reuse the same DiscordSocketClient code and manually shard them, you can do so by specifying the ShardId for the DiscordSocketConfig and pass that to the DiscordSocketClient's constructor."
  },
  "faq/basics/dependency-injection.html": {
    "href": "faq/basics/dependency-injection.html",
    "title": "Questions about Dependency Injection. | Discord.Net Documentation",
    "keywords": "Dependency-injection-related Questions In the following section, you will find common questions and answers to utilizing dependency injection with Discord.Commands and Discord.Interactions, as well as common troubleshooting steps regarding DI. What is a service? Why does my module not hold any data after execution? In Discord.Net, modules are created similarly to ASP.NET, meaning that they have a transient nature; modules are spawned whenever a request is received, and are killed from memory when the execution finishes. In other words, you cannot store persistent data inside a module. Consider using a service if you wish to workaround this. Service is often used to hold data externally so that they persist throughout execution. Think of it like a chest that holds whatever you throw at it that won't be affected by anything unless you want it to. Note that you should also learn Microsoft's implementation of Dependency Injection (video) before proceeding. A brief example of service and dependency injection can be seen below. public class MyService { public string MyCoolString { get; set; } } public class Setup { public IServiceProvider BuildProvider() => new ServiceCollection() .AddSingleton<MyService>() .BuildServiceProvider(); } public class MyModule : ModuleBase<SocketCommandContext> { // Inject via public settable prop public MyService MyService { get; set; } // ...or via the module's constructor // private readonly MyService _myService; // public MyModule (MyService myService) => _myService = myService; [Command(\"string\")] public Task GetOrSetStringAsync(string input) { if (string.IsNullOrEmpty(_myService.MyCoolString)) _myService.MyCoolString = input; return ReplyAsync(_myService.MyCoolString); } } Why is my Command/Interaction Service complaining about a missing dependency? If you encounter an error similar to Failed to create MyModule, dependency MyExternalDependency was not found., you may have forgotten to add the external dependency to the dependency container. For example, if your module, MyModule, requests a DatabaseService in its constructor, the DatabaseService must be present in the IServiceProvider when registering MyModule. public class MyModule : ModuleBase<SocketCommandContext> { private readonly DatabaseService _dbService; public MyModule(DatabaseService dbService) => _dbService = dbService; } public class CommandHandler { private readonly CommandService _commands; private readonly IServiceProvider _services; public CommandHandler(DiscordSocketClient client) { _services = new ServiceCollection() .AddSingleton<CommandService>() .AddSingleton(client) // We are missing DatabaseService! .BuildServiceProvider(); } public async Task RegisterCommandsAsync() { // ... // The method fails here because DatabaseService is a required // dependency and cannot be resolved by the dependency // injection service at runtime since the service is not // registered in this instance of _services. await _commands.AddModulesAsync(Assembly.GetEntryAssembly(), _services); // ... // The same approach applies to the interaction service. // Make sure to resolve these issues! } }"
  },
  "faq/basics/getting-started.html": {
    "href": "faq/basics/getting-started.html",
    "title": "Beginner Questions / How to Get Started | Discord.Net Documentation",
    "keywords": "Basic Concepts / Getting Started In this following section, you will find commonly asked questions and answers about how to get started with Discord.Net, as well as basic introduction to the Discord API ecosystem. How do I add my bot to my server/guild? Inviting your bot can be done by using the OAuth2 url generator provided by the Discord Developer Portal. Permissions can be granted by selecting the bot scope in the scopes section. A permissions tab will appear below the scope selection, from which you can pick any permissions your bot may require to function. When invited, the role this bot is granted will include these permissions. If you grant no permissions, no role will be created for your bot upon invitation as there is no need for one. When done selecting permissions, you can use the link below in your browser to invite the bot to servers where you have the Manage Server permission. If you are planning to play around with slash/context commands, make sure to check the application commands scope before inviting your bot! Note You do not have to kick and reinvite your bot to update permissions/scopes later on. Simply reusing the invite link with provided scopes/perms will update it accordingly. What is a token? A token is a credential used to log into an account. This information should be kept private and for your eyes only. Anyone with your token can log into your account. This risk applies to both user and bot accounts. That also means that you should never hardcode your token or add it into source control, as your identity may be stolen by scrape bots on the internet that scours through constantly to obtain a token. What is a client/user/object ID? Each user and object on Discord has its own snowflake ID generated based on various conditions. Anyone can see the ID; it is public. It is merely used to identify an object in the Discord ecosystem. Many things in the Discord ecosystem require an ID to retrieve or identify the said object. There are 2 common ways to obtain the said ID. Discord Developer Mode Escape Character By enabling the developer mode you can right click on most objects to obtain their snowflake IDs (please note that this may not apply to all objects, such as role IDs, or DM channel IDs). You can escape an object by using \\ in front the object in the Discord client. For example, when you do \\@Example#1234 in chat, it will return the user ID of the aforementioned user. How do I get the role ID? Warning Right-clicking on the role and copying the ID will not work. This will only copy the message ID. Several common ways to do this: (Easiest) Right click on the role either in the Server Settings or in the user's role list. Make the role mentionable and mention the role, and escape it using the \\ character in front. Inspect the roles collection within the guild via your debugger."
  },
  "faq/build_overrides/what-are-they.html": {
    "href": "faq/build_overrides/what-are-they.html",
    "title": "Build Overrides, What are they? | Discord.Net Documentation",
    "keywords": "Build Overrides Build overrides are a way for library developers to override the default behavior of the library on the fly. Adding them to your code is really simple. Installing the package The build override package can be installed on nuget here or by using the package manager PM> Install-Package Discord.Net.BuildOverrides Adding an override public async Task MainAsync() { // hook into the log function BuildOverrides.Log += (buildOverride, message) => { Console.WriteLine($\"{buildOverride.Name}: {message}\"); return Task.CompletedTask; }; // add your overrides await BuildOverrides.AddOverrideAsync(\"example-override-name\"); } Overrides are normally built for specific problems, for example if someone is having an issue and we think we might have a fix then we can create a build override for them to test out the fix. Security and Transparency Overrides can only be created and updated by library developers, you should only apply an override if a library developer asks you to. Code for the overrides server and the overrides themselves can be found here."
  },
  "faq/int_framework/framework.html": {
    "href": "faq/int_framework/framework.html",
    "title": "Interaction Framework | Discord.Net Documentation",
    "keywords": "The Interaction Framework Common misconceptions and questions about the Interaction Framework. How can I restrict some of my commands so only specific users can execute them? Based on how you want to implement the restrictions, you can use the built-in RequireUserPermission precondition, which allows you to restrict the command based on the user's current permissions in the guild or channel (e.g., GuildPermission.Administrator, ChannelPermission.ManageMessages). Note There are many more preconditions to use, including being able to make some yourself. Examples on self-made preconditions can be found here Why do preconditions not hide my commands? In the current permission design by Discord, it is not very straight forward to limit vision of slash/context commands to users. If you want to hide commands, you should take a look at the commands' DefaultPermissions parameter. Module dependencies aren't getting populated by Property Injection? Make sure the properties are publicly accessible and publicly settable. public class MyModule { // Intended. public InteractionService Service { get; set; } // Will not work. A private setter cannot be accessed by the serviceprovider. private InteractionService Service { get; private set; } } InteractionService.ExecuteAsync() always returns a successful result, how do i access the failed command execution results? If you are using RunMode.Async you need to setup your post-execution pipeline around ..Executed events exposed by the Interaction Service. How do I check if the executing user has * permission? Refer to the documentation about preconditions How do I send the HTTP Response from inside the command modules. Set the RestResponseCallback property of [InteractionServiceConfig] with a delegate for handling HTTP Responses and use RestInteractionModuleBase to create your command modules. RespondWithModalAsync(), RespondAsync() and DeferAsync() methods of this module base will use the RestResponseCallback to create interaction responses. Is there a cleaner way of creating parameter choices other than using [Choice]? The default enum TypeConverter of the Interaction Service will automatically register enums as multiple choice options. How do I add an optional enum parameter but make the default value not visible to the user? The default enum TypeConverter of the Interaction Service comes with [Hide] attribute that can be used to prevent certain enum values from getting registered. How does the InteractionService determine the generic TypeConverter to use for a parameter type? It compares the target base type key of the TypeConverter and chooses the one that sits highest on the inheritance hierarchy. [Interactions FAQ]: xref: FAQ.Basics.Interactions [InteractionServiceConfig]: xref:Discord.Interactions.InteractionServiceConfig"
  },
  "faq/int_framework/general.html": {
    "href": "faq/int_framework/general.html",
    "title": "Interactions | Discord.Net Documentation",
    "keywords": "Interaction basics This chapter mostly refers to interactions in general, and will include questions that are common among users of the Interaction Framework as well as users that register and handle commands manually. What's the difference between RespondAsync, DeferAsync and FollowupAsync? The difference between these 3 functions is in how you handle the command response. RespondAsync and DeferAsync let the API know you have successfully received the command. This is also called 'acknowledging' a command. DeferAsync will not send out a response, RespondAsync will. FollowupAsync follows up on successful acknowledgement. Warning If you have not acknowledged the command FollowupAsync will not work! the interaction has not been responded to, so you cannot follow it up! Im getting System.TimeoutException: 'Cannot respond to an interaction after 3 seconds!' This happens because your computer's clock is out of sync or you're trying to respond after 3 seconds. If your clock is out of sync and you can't fix it, you can set the UseInteractionSnowflakeDate to false in the [DiscordSocketConfig]. DiscordSocketConfig config = new() { UseInteractionSnowflakeDate = false }; DiscordSocketclient client = new(config); How do I use this * interaction specific method/property? If your interaction context holds a down-casted version of the interaction object, you need to up-cast it. Ideally, use pattern matching to make sure its the type of interaction you are expecting it to be. Note Further documentation on pattern matching can be found here. My interaction commands are not showing up? If you registered your commands globally, it can take up to 1 hour for them to register. Did you register a guild command (should be instant), or waited more than an hour and still don't have them show up? Try to check for any errors in the console, there is a good chance something might have been thrown. Register your commands after the Ready event in the client. The client is not configured to register commands before this moment. Check if no bad form exception is thrown; If so, refer to the above question. Do you have the application commands scope checked when adding your bot to guilds? Do I need to create commands on startup? If you are registering your commands for the first time, it is required to create them once. After this, commands will exist indefinitely until you overwrite them. Overwriting is only required if you make changes to existing commands, or add new ones. I can't see all of my user/message commands, why? Message and user commands have a limit of 5 per guild, and another 5 globally. If you have more than 5 guild-only message commands being registered, no more than 5 will actually show up. You can get up to 10 entries to show if you register 5 per guild, and another 5 globally."
  },
  "faq/int_framework/manual.html": {
    "href": "faq/int_framework/manual.html",
    "title": "Manual handling | Discord.Net Documentation",
    "keywords": "Manually handing interactions. This section talks about the manual building and responding to interactions. If you are using the interaction framework (highly recommended) this section does not apply to you. Bad form Exception when I try to create my commands, why do I get this? Bad form exceptions are thrown if the slash, user or message command builder has invalid values. The following options could resolve your error. Is your command name lowercase? If your command name is not lowercase, it is not seen as a valid command entry. Avatar is invalid; avatar is valid. Are your values below or above the required amount? (This also applies to message components) Discord expects all values to be below maximum allowed. Going over this maximum amount of characters causes an exception. Note All maximum and minimum value requirements can be found in the Discord Developer Docs. For components, structure documentation is found here. Is your subcommand branching correct? Branching structure is covered properly here: xref:Guides.SlashCommands.SubCommand There are many options for creating commands, which do I use? private async Task ReadyAsync() { // pull your commands from some array, everyone has a different approach for this. var commands = _builders.ToArray(); // write your list of commands globally in one go. await _client.Rest.BulkOverwriteGlobalCommands(commands); // write your array of commands to one guild in one go. // You can do a foreach (... in _client.Guilds) approach to write to all guilds. await _client.Rest.BulkOverwriteGuildCommands(commands, /* some guild ID */); foreach (var c in commands) { // Create a global command, repeating usage for multiple commands. await _client.Rest.CreateGlobalCommand(c); // Create a guild command, repeating usage for multiple commands. await _client.Rest.CreateGuildCommand(c, guildId); } } Note You can use bulkoverwrite even if there are no commands in guild, nor globally. The bulkoverwrite method disposes the old set of commands and replaces it with the new."
  },
  "faq/int_framework/respondings-schemes.html": {
    "href": "faq/int_framework/respondings-schemes.html",
    "title": "Interaction response schemes | Discord.Net Documentation",
    "keywords": "Interaction Response Schemes Working with interactions can appear hard and confusing - you might accidentally miss a cast or use a wrong method. These schemes should help you create efficient interaction response flows. Responding to a slash command interaction Slash command interactions support the most commonly used response methods. Note Same scheme applies to context command interactions. Responding to a component interaction Component interactions share a lot of response mwthods with slash command interactions, but they also provide a way to update the message components were attached to. Note Some followup methods change their behavior depending on what initial response you've sent. Responding to a modal interaction While being similar to Component Interaction Scheme, modal interactions lack the option of responding with a modal."
  },
  "faq/misc/legacy.html": {
    "href": "faq/misc/legacy.html",
    "title": "Questions about Legacy Versions | Discord.Net Documentation",
    "keywords": "Legacy Questions This section refers to legacy library-related questions that do not apply to the latest or recent version of the Discord.Net library. Migrating your commands to application commands. The new interaction service was designed to act like the previous service for text-based commands. Your pre-existing code will continue to work, but you will need to migrate your modules and response functions to use the new interaction service methods. Documentation on this can be found in the Guides. Gateway event parameters changed, why? With 3.0, a higher focus on Cacheable's was introduced. Cacheable's get an entity from cache, rather than making an API call to retrieve it's data. The entity can be retrieved from cache by calling GetOrDownloadAsync() on the Cacheable type. Note GetOrDownloadAsync will download the entity if its not available directly from the cache. X, Y, Z does not work! It doesn't return a valid value anymore. If you are currently using an older version of the stable branch, please upgrade to the latest release version to ensure maximum compatibility. Several features may be broken in older versions and will likely not be fixed in the version branch due to their breaking nature. Visit the repo's release tag to see the latest public release. I came from an earlier version of Discord.Net 1.0, and DependencyMap doesn't seem to exist anymore in the later revision? What happened to it? The DependencyMap has been replaced with Microsoft's DependencyInjection Abstractions. An example usage can be seen here."
  },
  "faq/text_commands/general.html": {
    "href": "faq/text_commands/general.html",
    "title": "General Questions about Text Commands | Discord.Net Documentation",
    "keywords": "Chat Command-related Questions In the following section, you will find commonly asked questions and answered regarding general command usage when using Discord.Commands. How can I restrict some of my commands so only specific users can execute them? You can use the built-in RequireUserPermission precondition, which allows you to restrict the command based on the user's current permissions in the guild or channel (e.g., GuildPermission.Administrator, ChannelPermission.ManageMessages). Note There are many more preconditions to use, including being able to make some yourself. Precondition documentation is covered here Why am I getting an error about Assembly.GetEntryAssembly? You may be confusing AddModulesAsync with AddModuleAsync. The former is used to add modules via the assembly, while the latter is used to add a single module. What does [Remainder] do in the command signature? The RemainderAttribute leaves the string unparsed, meaning you do not have to add quotes around the text for the text to be recognized as a single object. Please note that if your method has multiple parameters, the remainder attribute can only be applied to the last parameter. // Input: // !echo Coffee Cake // Output: // Coffee Cake [Command(\"echo\")] public Task EchoRemainderAsync([Remainder]string text) => ReplyAsync(text); // Output: // CommandError.BadArgCount [Command(\"echo-hassle\")] public Task EchoAsync(string text) => ReplyAsync(text); // The message would be seen as having multiple parameters, // while the method only accepts one. // Wrapping the message in quotes solves this. // This way, the system knows the entire message is to be parsed as a // single String. // e.g., // !echo \"Coffee Cake\" Discord.Net keeps saying that a MessageReceived handler is blocking the gateway, what should I do? By default, the library warns the user about any long-running event handler that persists for more than 3 seconds. Any event handlers that are run on the same thread as the gateway task, the task in charge of keeping the connection alive, may block the processing of heartbeat, and thus terminating the connection. In this case, the library detects that a MessageReceived event handler is blocking the gateway thread. This warning is typically associated with the command handler as it listens for that particular event. If the command handler is blocking the thread, then this might mean that you have a long-running command. Note In rare cases, runtime errors can also cause blockage, usually associated with Mono, which is not supported by this library. To prevent a long-running command from blocking the gateway thread, a flag called RunMode is explicitly designed to resolve this issue. There are 2 main RunModes. RunMode.Sync RunMode.Async Sync is the default behavior and makes the command to be run on the same thread as the gateway one. Async will spin the task off to a different thread from the gateway one. Important While specifying RunMode.Async allows the command to be spun off to a different thread, keep in mind that by doing so, there will be potentially unwanted consequences. Before applying this flag, please consider whether it is necessary to do so. Further details regarding RunMode.Async can be found below. You can set the RunMode either by specifying it individually via the CommandAttribute or by setting the global default with the DefaultRunMode flag under CommandServiceConfig. CommandAttribute CommandServiceConfig [Command(\"process\", RunMode = RunMode.Async)] public async Task ProcessAsync(string input) { // Does heavy calculation here. await Task.Delay(TimeSpan.FromMinute(1)); await ReplyAsync(input); } public class Setup { private readonly CommandService _command; public Setup() { var config = new CommandServiceConfig{ DefaultRunMode = RunMode.Async }; _command = new CommandService(config); } } How does RunMode.Async work, and why is Discord.Net not using it by default? RunMode.Async works by spawning a new Task with an unawaited Task.Run, essentially making the task that is used to invoke the command task to be finished on a different thread. This design means that ExecuteAsync will be forced to return a successful ExecuteResult regardless of the actual execution result. The following are the known caveats with RunMode.Async, You can potentially introduce a race condition. Unnecessary overhead caused by the async state machine. ExecuteAsync will immediately return ExecuteResult instead of other result types (this is particularly important for those who wish to utilize RuntimeResult in 2.0). Exceptions are swallowed in the ExecuteAsync result. However, there are ways to remedy some of these. For #3, in Discord.Net 2.0, the library introduces a new event called CommandService.CommandExecuted, which is raised whenever the command is executed. This event will be raised regardless of the RunMode type and will return the appropriate execution result and the associated CommandInfo if applicable. For #4, exceptions are caught in CommandService.Log event under LogMessage.Exception as CommandException and in the CommandService.CommandExecuted event under the IResult as ExecuteResult.Exception."
  },
  "guides/bearer_token/bearer_token_guide.html": {
    "href": "guides/bearer_token/bearer_token_guide.html",
    "title": "Working with Bearer token | Discord.Net Documentation",
    "keywords": "Working with Bearer token Some endpoints in Discord API require a Bearer token, which can be obtained through OAuth2 flow. Discord.Net allows you to interact with these endpoints using the DiscordRestClient. Initializing a new instance of the client using Discord; using Discord.Rest; await using var client = new DiscordRestClient(); await client.LoginAsync(TokenType.Bearer, \"bearer token obtained through oauth2 flow\"); Getting current user The DiscordRestClient gets the current user when LoginAsync() is called. The user object can be found in the CurrentUser property. If you need to fetch the user again, the GetCurrentUserAsync() method can be used. // gets the user object stored in the DiscordRestClient. var user = client.CurrentUser; // fetches the current user with a REST call & updates the CurrentUser property. var refreshedUser = await client.GetCurrentUserAsync(); Note Some properties might be null depending on which scopes users authorized your app with. For example: email scope is required to fetch current user's email address. Fetching current user's guilds The GetGuildSummariesAsync() method is used to fetch current user's guilds. Since it returns an IAsyncEnumerable you need to call FlattenAsync() to get a plain IEnumerable containing RestUserGuild objects. // fetches the guilds the current user participate in. var guilds = await client.GetGuildSummariesAsync().FlattenAsync(); Warning This method requires guilds scope Fetching current user's guild member object To fetch the current user's guild member object, the GetCurrentUserGuildMemberAsync() method can be used. // fetches the current user's guild member object in a guild with provided id. var member = await client.GetCurrentUserGuildMemberAsync(guildId); // fetches the current user's guild member object in a RestUserGuild. var guild = await client.GetGuildSummariesAsync().FlattenAsync().First(); var member = await guild.GetCurrentUserGuildMemberAsync(); Warning This method requires guilds.members.read scope Get user connections The GetConnectionsAsync method can be used to fetch current user's connections to other platforms. // fetches the current user's connections. var connections = await client.GetConnectionsAsync(); Warning This method requires connections scope Application role connection In addition to previous features, Discord.Net supports fetching & updating user's application role connection metadata values. GetUserApplicationRoleConnectionAsync() returns a RoleConnection object of the current user for the given application id. The ModifyUserApplicationRoleConnectionAsync() method is used to update current user's role connection metadata values. A new set of values can be created with RoleConnectionProperties object. // fetch application role connection of the current user for the app with provided id. var roleConnection = await client.GetUserApplicationRoleConnectionAsync(applicationid); // create a new role connection metadata properties object & set some values. var properties = new RoleConnectionProperties(\"Discord.Net Docs\", \"Cool Coding Guy\") .WithNumber(\"eaten_cookies\", 69) .WithBool(\"loves_cookies\", true) .WithDate(\"last_eaten_cookie\", DateTimeOffset.UtcNow); // update current user's values with the given properties. await client.ModifyUserApplicationRoleConnectionAsync(applicationId, properties); Warning This method requires role_connections.write scope"
  },
  "guides/concepts/connections.html": {
    "href": "guides/concepts/connections.html",
    "title": "Managing Connections | Discord.Net Documentation",
    "keywords": "Managing Connections with Discord.Net In Discord.Net, once a client has been started, it will automatically maintain a connection to Discord's gateway until it is manually stopped. Usage To start a connection, invoke the StartAsync method on a client that supports a WebSocket connection; to end a connection, invoke the StopAsync method, which gracefully closes any open WebSocket or UdpSocket connections. Since the Start/Stop methods only signal to an underlying connection manager that a connection needs to be started, they return before a connection is made. As a result, you need to hook into one of the connection-state based events to have an accurate representation of when a client is ready for use. All clients provide a Connected and Disconnected event, which is raised respectively when a connection opens or closes. In the case of the DiscordSocketClient, this does not mean that the client is ready to be used. A separate event, Ready, is provided on DiscordSocketClient, which is raised only when the client has finished guild stream or guild sync and has a completed guild cache. Reconnection Tip Avoid running long-running code on the gateway! If you deadlock the gateway (as explained in events), the connection manager will NOT be able to recover and reconnect. Assuming the client disconnected because of a fault on Discord's end, and not a deadlock on your end, we will always attempt to reconnect and resume a connection. Don't worry about trying to maintain your own connections, the connection manager is designed to be bulletproof and never fail - if your client does not manage to reconnect, you have found a bug!"
  },
  "guides/concepts/events.html": {
    "href": "guides/concepts/events.html",
    "title": "Working with Events | Discord.Net Documentation",
    "keywords": "Events in Discord.Net Events in Discord.Net are consumed in a similar manner to the standard convention, with the exception that every event must be of the type Task and instead of using @System.EventArgs, the event's parameters are passed directly into the handler. This allows for events to be handled in an async context directly instead of relying on async void. Usage To receive data from an event, hook into it using C#'s delegate event pattern. You may either opt to hook an event to an anonymous function (lambda) or a named function. Safety All events are designed to be thread-safe; events are executed synchronously off the gateway task in the same context as the gateway task. As a side effect, this makes it possible to deadlock the gateway task and kill a connection. As a general rule of thumb, any task that takes longer than three seconds should not be awaited directly in the context of an event, but should be wrapped in a Task.Run or offloaded to another task. This also means that you should not await a task that requests data from Discord's gateway in the same context of an event. Since the gateway will wait on all invoked event handlers to finish before processing any additional data from the gateway, this will create a deadlock that will be impossible to recover from. Exceptions in commands will be swallowed by the gateway and logged out through the client's log method. Common Patterns As you may know, events in Discord.Net are only given a signature of Func<T1, ..., Task>. There is no room for predefined argument names, so you must either consult IntelliSense, or view the API documentation directly. That being said, there are a variety of common patterns that allow you to infer what the parameters in an event mean. Entity, Entity An event handler with a signature of Func<Entity, Entity, Task> typically means that the first object will be a clone of the entity before a change was made, and the latter object will be an attached model of the entity after the change was made. This pattern is typically only found on EntityUpdated events. Cacheable An event handler with a signature of Func<Cacheable, Entity, Task> means that the before state of the entity was not provided by the API, so it can either be pulled from the client's cache or downloaded from the API. See the documentation for Cacheable for more information on this object. Note Many events relating to a Message entity (i.e., MessageUpdated and ReactionAdded) rely on the client's message cache, which is not enabled by default. Set the MessageCacheSize flag in DiscordSocketConfig to enable it. Sample using Discord; using Discord.WebSocket; public class Program { private static DiscordSocketClient _client; public static async Task MainAsync() { // When working with events that have Cacheable<IMessage, ulong> parameters, // you must enable the message cache in your config settings if you plan to // use the cached message entity. var _config = new DiscordSocketConfig { MessageCacheSize = 100 }; _client = new DiscordSocketClient(_config); await _client.LoginAsync(TokenType.Bot, Environment.GetEnvironmentVariable(\"DiscordToken\")); await _client.StartAsync(); _client.MessageUpdated += MessageUpdated; _client.Ready += () => { Console.WriteLine(\"Bot is connected!\"); return Task.CompletedTask; }; await Task.Delay(-1); } private static async Task MessageUpdated(Cacheable<IMessage, ulong> before, SocketMessage after, ISocketMessageChannel channel) { // If the message was not in the cache, downloading it will result in getting a copy of `after`. var message = await before.GetOrDownloadAsync(); Console.WriteLine($\"{message} -> {after}\"); } }"
  },
  "guides/concepts/logging.html": {
    "href": "guides/concepts/logging.html",
    "title": "Logging Events/Data | Discord.Net Documentation",
    "keywords": "Logging in Discord.Net Discord.Net's clients provide a log event that all messages will be dispatched over. For more information about events in Discord.Net, see the Events section. Warning Due to the nature of Discord.Net's event system, all log event handlers will be executed synchronously on the gateway thread. If your log output will be dumped to a Web API (e.g., Sentry), you are advised to wrap your output in a Task.Run so the gateway thread does not become blocked while waiting for logging data to be written. Usage in Client(s) To receive log events, simply hook the Discord client's Log to a Task with a single parameter of type LogMessage. It is recommended that you use an established function instead of a lambda for handling logs, because most addons accept a reference to a logging function to write their own messages. Usage in Commands Discord.Net's CommandService also provides a Log event, identical in signature to other log events. Data logged through this event is typically coupled with a CommandException, where information about the command's context and error can be found and handled. Sample using Discord; using Discord.WebSocket; public class LoggingService { public LoggingService(DiscordSocketClient client, CommandService command) { client.Log += LogAsync; command.Log += LogAsync; } private Task LogAsync(LogMessage message) { if (message.Exception is CommandException cmdException) { Console.WriteLine($\"[Command/{message.Severity}] {cmdException.Command.Aliases.First()}\" + $\" failed to execute in {cmdException.Context.Channel}.\"); Console.WriteLine(cmdException); } else Console.WriteLine($\"[General/{message.Severity}] {message}\"); return Task.CompletedTask; } }"
  },
  "guides/concepts/ratelimits.html": {
    "href": "guides/concepts/ratelimits.html",
    "title": "Ratelimits | Discord.Net Documentation",
    "keywords": "Ratelimits Ratelimits are a core concept of any API - Discords API is no exception. Each verified library must follow the ratelimit guidelines. Using the ratelimit callback There is a new property within RequestOptions called RatelimitCallback. This callback is called when a request is made via the rest api. The callback is called with a IRateLimitInfo parameter: Name Type Description IsGlobal bool Whether or not this ratelimit info is global. Limit int? The number of requests that can be made. Remaining int? The number of remaining requests that can be made. RetryAfter int? The total time (in seconds) of when the current rate limit bucket will reset. Can have decimals to match previous millisecond ratelimit precision. Reset DateTimeOffset? The time at which the rate limit resets. ResetAfter TimeSpan? The absolute time when this ratelimit resets. Bucket string A unique string denoting the rate limit being encountered (non-inclusive of major parameters in the route path). Lag TimeSpan? The amount of lag for the request. This is used to denote the precise time of when the ratelimit expires. Endpoint string The endpoint that this ratelimit info came from. Let's set up a ratelimit callback that will print out the ratelimit info to the console. public async Task MyRatelimitCallback(IRateLimitInfo info) { Console.WriteLine($\"{info.IsGlobal} {info.Limit} {info.Remaining} {info.RetryAfter} {info.Reset} {info.ResetAfter} {info.Bucket} {info.Lag} {info.Endpoint}\"); } Let's use this callback in a send message function [Command(\"ping\")] public async Task ping() { var options = new RequestOptions() { RatelimitCallback = MyRatelimitCallback }; await Context.Channel.SendMessageAsync(\"Pong!\", options: options); } Running this produces the following output: False 5 4 2021-09-09 3:48:14 AM +00:00 00:00:05 a06de0de4a08126315431cc0c55ee3dc 00:00:00.9891364 channels/848511736872828929/messages"
  },
  "guides/dependency_injection/basics.html": {
    "href": "guides/dependency_injection/basics.html",
    "title": "Introduction | Discord.Net Documentation",
    "keywords": "Dependency Injection Dependency injection is a feature not required in Discord.Net, but makes it a lot easier to use. It can be combined with a large number of other libraries, and gives you better control over your application. Further into the documentation, Dependency Injection will be referred to as 'DI'. Installation DI is not native to .NET. You need to install the extension packages to your project in order to use it: Meta. Abstractions. Warning Downloading the abstractions package alone will not give you access to required classes to use DI properly. Please install both packages, or choose to only install the meta package to implicitly install both. Visual Package Manager: Installing Command Line: PM> Install-Package Microsoft.Extensions.DependencyInjection. Tip ASP.NET already comes packed with all the necessary assemblies in its framework. You do not require to install any additional NuGet packages to make full use of all features of DI in ASP.NET projects. Getting started First of all, you will need to create an application based around dependency injection, which in order will be able to access and inject them across the project. public class Program { private static IServiceProvider _serviceProvider; static IServiceProvider CreateProvider() { var collection = new ServiceCollection(); //... return collection.BuildServiceProvider(); } static async Task Main(string[] args) { _serviceProvider = CreateProvider(); } } In order to freely pass around your dependencies in different classes, you will need to register them to a new ServiceCollection and build them into an IServiceProvider as seen above. The IServiceProvider then needs to be accessible by the startup file, so you can access your provider and manage them. static IServiceProvider CreateServices() { var config = new DiscordSocketConfig() { //... }; var collection = new ServiceCollection() .AddSingleton(config) .AddSingleton<DiscordSocketClient>(); return collection.BuildServiceProvider(); } As shown above, an instance of DiscordSocketConfig is created, and added before the client itself is. Because the collection will prefer to create the highest populated constructor available with the services already present, it will prefer the constructor with the configuration, because you already added it. Using your dependencies After building your provider in the Program class constructor, the provider is now available inside the instance you're actively using. Through the provider, we can ask for the DiscordSocketClient we registered earlier. async Task RunAsync(string[] args) { // Request the instance from the client. // Because we're requesting it here first, its targetted constructor will be called and we will receive an active instance. var client = _services.GetRequiredService<DiscordSocketClient>(); client.Log += async (msg) => { await Task.CompletedTask; Console.WriteLine(msg); } await client.LoginAsync(TokenType.Bot, \"\"); await client.StartAsync(); await Task.Delay(Timeout.Infinite); } Warning Service constructors are not activated until the service is first requested. An 'endpoint' service will have to be requested from the provider before it is activated. If a service is requested with dependencies, its dependencies (if not already active) will be activated before the service itself is. Injecting dependencies You can not only directly access the provider from a field or property, but you can also pass around instances to classes registered in the provider. There are multiple ways to do this. Please refer to the Injection Documentation for further information."
  },
  "guides/dependency_injection/injection.html": {
    "href": "guides/dependency_injection/injection.html",
    "title": "Injection | Discord.Net Documentation",
    "keywords": "Injecting instances within the provider You can inject registered services into any class that is registered to the IServiceProvider. This can be done through property or constructor. Note As mentioned above, the dependency and the target class have to be registered in order for the serviceprovider to resolve it. Injecting through a constructor Services can be injected from the constructor of the class. This is the preferred approach, because it automatically locks the readonly field in place with the provided service and isn't accessible outside of the class. public class ClientHandler { private readonly DiscordSocketClient _client; public ClientHandler(DiscordSocketClient client) { _client = client; } public async Task ConfigureAsync() { //... } } Injecting through properties Injecting through properties is also allowed as follows. public class ClientHandler { public DiscordSocketClient Client { get; set; } public async Task ConfigureAsync() { //... } } Warning Dependency Injection will not resolve missing services in property injection, and it will not pick a constructor instead. If a publicly accessible property is attempted to be injected and its service is missing, the application will throw an error. Using the provider itself You can also access the provider reference itself from injecting it into a class. There are multiple use cases for this: Allowing libraries (Like Discord.Net) to access your provider internally. Injecting optional dependencies. Calling methods on the provider itself if necessary, this is often done for creating scopes. public class UtilizingProvider { private readonly IServiceProvider _provider; private readonly AnyService _service; // This service is allowed to be null because it is only populated if the service is actually available in the provider. private readonly AnyOtherService? _otherService; // This constructor injects only the service provider, // and uses it to populate the other dependencies. public UtilizingProvider(IServiceProvider provider) { _provider = provider; _service = provider.GetRequiredService<AnyService>(); _otherService = provider.GetService<AnyOtherService>(); } // This constructor injects the service provider, and AnyService, // making sure that AnyService is not null without having to call GetRequiredService public UtilizingProvider(IServiceProvider provider, AnyService service) { _provider = provider; _service = service; _otherService = provider.GetService<AnyOtherService>(); } } Note It is important to keep in mind that the provider will pick the 'biggest' available constructor. If you choose to introduce multiple constructors, keep in mind that services missing from one constructor may have the provider pick another one that is available instead of throwing an exception."
  },
  "guides/dependency_injection/scaling.html": {
    "href": "guides/dependency_injection/scaling.html",
    "title": "Scaling your DI | Discord.Net Documentation",
    "keywords": "Scaling your DI Dependency injection has a lot of use cases, and is very suitable for scaled applications. There are a few ways to make registering & using services easier in large amounts. Using a range of services. If you have a lot of services that all have the same use such as handling an event or serving a module, you can register and inject them all at once by some requirements: All classes need to inherit a single interface or abstract type. While not required, it is preferred if the interface and types share a method to call on request. You need to register a class that all the types can be injected into. Registering implicitly Registering all the types is done through getting all types in the assembly and checking if they inherit the target interface. public static ServiceCollection RegisterImplicitServices(this ServiceCollection collection, Type interfaceType, Type activatorType) { // Get all types in the executing assembly. There are many ways to do this, but this is fastest. foreach (var type in typeof(Program).Assembly.GetTypes()) { if (interfaceType.IsAssignableFrom(type) && !type.IsAbstract) collection.AddSingleton(interfaceType, type); } // Register the activator so you can activate the instances. collection.AddSingleton(activatorType); } Note As seen above, the interfaceType and activatorType are undefined. For our usecase below, these are IService and ServiceActivator in order. Using implicit dependencies In order to use the implicit dependencies, you have to get access to the activator you registered earlier. async Task RunAsync() { //... await _serviceProvider.GetRequiredService<ServiceActivator>() .ActivateAsync(); //... } When the activator is accessed and the ActivateAsync() method is called, the following code will be executed: public class ServiceActivator { // This contains *all* registered services of serviceType IService private readonly IEnumerable<IService> _services; public ServiceActivator(IEnumerable<IService> services) { _services = services; } public async Task ActivateAsync() { foreach(var service in _services) { await service.StartAsync(); } } } As a result of this, all the services that were registered with IService as its implementation type will execute their starting code, and start up."
  },
  "guides/dependency_injection/services.html": {
    "href": "guides/dependency_injection/services.html",
    "title": "Using DI in Interaction & Command Frameworks | Discord.Net Documentation",
    "keywords": "DI in the Interaction- & Command Service For both the Interaction- and Command Service modules, DI is quite straight-forward to use. You can inject any service into modules without the modules having to be registered to the provider. Discord.Net resolves your dependencies internally. Warning The way DI is used in the Interaction- & Command Service are nearly identical, except for one detail: Resolving Module Dependencies Registering the Service Thanks to earlier described behavior of allowing already registered members as parameters of the available ctors, The socket client & configuration will automatically be acknowledged and the XService(client, config) overload will be used. static IServiceProvider CreateServices() { var config = new DiscordSocketConfig() { //... }; // X represents either Interaction or Command, as it functions the exact same for both types. var servConfig = new XServiceConfig() { //... } var collection = new ServiceCollection() .AddSingleton(config) .AddSingleton<DiscordSocketClient>() .AddSingleton(servConfig) .AddSingleton<XService>(); return collection.BuildServiceProvider(); } Usage in modules In the constructor of your module, any parameters will be filled in by the IServiceProvider that you've passed. Any publicly settable properties will also be filled in the same manner. public class MyModule : InteractionModuleBase { private readonly MyService _service; public MyModule(MyService service) { _service = service; } [SlashCommand(\"things\", \"Shows things\")] public async Task ThingsAsync() { var str = string.Join(\"\\n\", _service.Things) await RespondAsync(str); } } If you accept Command/InteractionService or IServiceProvider as a parameter in your constructor or as an injectable property, these entries will be filled by the Command/InteractionService that the module is loaded from and the IServiceProvider that is passed into it respectively. Note Annotating a property with a [DontInjectAttribute] attribute will prevent the property from being injected. Services Because modules are transient of nature and will reinstantiate on every request, it is suggested to create a singleton service behind it to hold values across multiple command executions. public class MyService { public List<string> Things { get; } public MyService() { Things = new(); } }"
  },
  "guides/dependency_injection/types.html": {
    "href": "guides/dependency_injection/types.html",
    "title": "Types of Dependencies | Discord.Net Documentation",
    "keywords": "Dependency Types There are 3 types of dependencies to learn to use. Several different usecases apply for each. Warning When registering types with a serviceType & implementationType, only the serviceType will be available for injection, and the implementationType will be used for the underlying instance. Singleton A singleton service creates a single instance when first requested, and maintains that instance across the lifetime of the application. Any values that are changed within a singleton will be changed across all instances that depend on it, as they all have the same reference to it. Registration: // With serviceType: collection.AddSingleton<ISingletonService, SingletonService>(); // Without serviceType: collection.AddSingleton<SingletonService>(); Note Types like the Discord client and Interaction/Command services are intended to be singleton, as they should last across the entire app and share their state with all references to the object. Scoped A scoped service creates a new instance every time a new service is requested, but is kept across the 'scope'. As long as the service is in view for the created scope, the same instance is used for all references to the type. This means that you can reuse the same instance during execution, and keep the services' state for as long as the request is active. Registration: // With serviceType: collection.AddScoped<IScopedService, ScopedService>(); // Without serviceType: collection.AddScoped<ScopedService>(); Note Without using HTTP or libraries like EFCORE, scopes are often unused in Discord bots. They are most commonly used for handling HTTP and database requests. Transient A transient service is created every time it is requested, and does not share its state between references within the target service. It is intended for lightweight types that require little state, to be disposed quickly after execution. Registration: // With serviceType: collection.AddTransient<ITransientService, TransientService>(); // Without serviceType: collection.AddTransient<TransientService>(); Note Discord.Net modules behave exactly as transient types, and are intended to only last as long as the command execution takes. This is why it is suggested for apps to use singleton services to keep track of cross-execution data."
  },
  "guides/deployment/deployment.html": {
    "href": "guides/deployment/deployment.html",
    "title": "Deploying the Bot | Discord.Net Documentation",
    "keywords": "Deploying a Discord.Net Bot After finishing your application, you may want to deploy your bot to a remote location such as a Virtual Private Server (VPS) or another computer so you can keep the bot up and running 24/7. Recommended VPS For small-medium scaled bots, a cheap VPS (~$5) might be sufficient enough. Here is a list of recommended VPS provider. DigitalOcean Description: American cloud infrastructure provider headquartered in New York City with data centers worldwide. Location(s): Asia: Singapore, India America: Canada, United States Europe: Netherlands, Germany, United Kingdom Based in: United States Vultr Description: DigitalOcean-like Location(s): Asia: Japan, Australia, Singapore America: United States Europe: United Kingdom, France, Netherlands, Germany Based in: United States OVH Description: French cloud computing company that offers VPS, dedicated servers and other web services. Location(s): Asia: Australia, Singapore America: United States, Canada Europe: United Kingdom, Poland, Germany Based in: Europe Scaleway Description: Cheap but powerful VPS owned by Online.net. Location(s): Europe: France, Netherlands Based in: Europe Time4VPS Description: Affordable and powerful VPS Hosting in Europe. Location(s): Europe: Lithuania Based in: Europe ServerStarter.Host Description: Bot hosting with a panel for quick deployment and no Linux knowledge required. Location(s): America: United States Based in: United States .NET Core Deployment Note This section only covers the very basics of .NET Core deployment. To learn more about .NET Core deployment, visit .NET Core application deployment by Microsoft. When redistributing the application - whether for deployment on a remote machine or for sharing with another user - you may want to publish the application; in other words, to create a self-contained package without installing the dependencies and the runtime on the target platform. Framework-dependent Deployment To deploy a framework-dependent package (i.e. files to be used on a remote machine with the dotnet command), simply publish the package with: dotnet publish -c Release This will create a package with the least dependencies included with the application; however, the remote machine must have dotnet runtime installed before the remote could run the program. Tip Do not know how to run a .NET Core application with the dotnet runtime? Navigate to the folder of the program (typically under $projFolder/bin/Release) and enter dotnet program.dll where program.dll is your compiled binaries. Self-contained Deployment To deploy a self-contained package (i.e. files to be used on a remote machine without the dotnet runtime), publish with a specific Runtime ID with the -r switch. This will create a package with dependencies compiled for the target platform, meaning that all the required dependencies will be included with the program. This will result in larger package size; however, that means the copy of the runtime that can be run natively on the target platform. For example, the following command will create a Windows executable (.exe) that is ready to be executed on any Windows 10 x64 based machine: dotnet publish -c Release -r win10-x64"
  },
  "guides/emoji/emoji.html": {
    "href": "guides/emoji/emoji.html",
    "title": "Emoji | Discord.Net Documentation",
    "keywords": "Emoji in Discord.Net Before we delve into the difference between an Emoji and an Emote in Discord.Net, it is crucial to understand what they both look like behind the scene. When the end-users are sending or receiving an emoji or emote, they are typically in the form of :ok_hand: or :reeee:; however, what goes under the hood is that, depending on the type of emoji, they are sent in an entirely different format. What does this all mean? It means that you should know that by reacting with a string like “:ok_hand:” will NOT automatically translate to 👌; rather, it will be treated as-is, like :ok_hand:, thus the server will return a 400 Bad Request. Emoji An emoji is a standard emoji that can be found anywhere else outside of Discord, which means strings like 👌, ♥, 👀 are all considered an emoji in Discord. However, from the introduction paragraph we have learned that we cannot simply send :ok_hand: and have Discord take care of it, but what do we need to send exactly? To send an emoji correctly, one must send the emoji in its Unicode form; this can be obtained in several different ways. (Easiest) Escape the emoji by using the escape character, \\, in your Discord chat client; this will reveal the emoji’s pure Unicode form, which will allow you to copy-paste into your code. Look it up on Emojipedia, from which you can copy the emoji easily into your code. (Recommended) Look it up in the Emoji list from FileFormat.Info; this will give you the .NET-compatible code that represents the emoji. This is the most recommended method because some systems or IDE sometimes do not render the Unicode emoji correctly. Emoji Declaration After obtaining the Unicode representation of the emoji, you may create the Emoji object by passing the string with unicode into its constructor (e.g. new Emoji(\"👌\"); or new Emoji(\"\\uD83D\\uDC4C\");). Your method of declaring an Emoji should look similar to this: public async Task ReactAsync(SocketUserMessage userMsg) { // equivalent to \"👌\" var emoji = new Emoji(\"\\uD83D\\uDC4C\"); await userMsg.AddReactionAsync(emoji); } Also you can use Emoji.Parse() or Emoji.TryParse() methods for parsing emojis from strings like :heart:, <3 or ❤. Emote The meat of the debate is here; what is an emote and how does it differ from an emoji? An emote refers to a custom emoji created on Discord. The underlying structure of an emote also differs drastically; an emote looks sort-of like a mention on Discord. It consists of two main elements as illustrated below: As you can see, emote uses a completely different format. To obtain the raw string as shown above for your emote, you would need to escape the emote using the escape character \\ in chat somewhere. Emote Declaration After obtaining the raw emote string, you would need to use Parse or TryParse to create a valid emote object. Your method of declaring an Emote should look similar to this: public async Task ReactWithEmoteAsync(SocketUserMessage userMsg, string escapedEmote) { if (Emote.TryParse(escapedEmote, out var emote)) { await userMsg.AddReactionAsync(emote); } } Tip For WebSocket users, you may also consider fetching the Emote via the Emotes collection. private readonly DiscordSocketClient _client; public async Task ReactAsync(SocketUserMessage userMsg, string emoteName) { var emote = _client.Guilds .SelectMany(x => x.Emotes) .FirstOrDefault(x => x.Name.IndexOf( emoteName, StringComparison.OrdinalIgnoreCase) != -1); if (emote == null) return; await userMsg.AddReactionAsync(emote); } Tip On Discord, any user with Discord Nitro subscription may use custom emotes from any guilds they are currently in. This is also true for any standard bot accounts; this does not require the bot owner to have a Nitro subscription. Additional Information To learn more about emote and emojis and how they could be used, see the documentation of IEmote."
  },
  "guides/entities/casting.html": {
    "href": "guides/entities/casting.html",
    "title": "Casting & Unboxing | Discord.Net Documentation",
    "keywords": "Casting Casting can be done in many ways, and is the only method to box and unbox types to/from their base definition. Casting only works for types that inherit the base type that you want to unbox from. IUser cannot be cast to IMessage. Note Interfaces can be cast to other interfaces, as long as they inherit each other. The same goes for reverse casting. As long as some entity can be simplified into what it inherits, your cast will pass. Boxing A boxed object is the definition of an object that was simplified (or trimmed) by incoming traffic, but still owns the data of the originally constructed type. Boxing is an implicit operation. Through casting, we can unbox this type, and access the properties that were inaccessible before. Unboxing Unboxing is the most direct way to access the real definition of an object. If we want to return a type from its interface, we can unbox it directly. IUser user; // Here we use inline unboxing to make a call to its member (if available) only once. // Note that if the entity we're trying to cast to is null, this will throw a NullReferenceException. Console.WriteLine(((IGuildUser)user).Nickname); // In case you are certain the entity IS said member, you can also use unboxing to declare variables. IGuildUser guildUser = (IGuildUser)user; Regular casting In 'regular' casting, we use the as keyword to assign the given type to the object. If the boxed type can indeed be cast into given type, it will become said type, and its properties can be accessed. // Say we have an entity; for the simplicity of this example, it will appear from thin air. IChannel channel; // If we want this to be an ITextChannel so we can access the properties of a text channel inside of a guild, an approach would be: ITextChannel textChannel = channel as ITextChannel; await textChannel.DoSomethingICantWithIChannelAsync(); Warning If the type you're casting to is null, a NullReferenceException will be thrown when it's called. This makes safety casting much more interesting to use, as it prevents this exception from being thrown. Safety casting Safety casting makes sure that the type you're trying to cast to can never be null, as it passes checks upon calling them. There are 3 different ways to safety cast an object: Basic safety casting: To safety cast an object, all we need to do is check if it is of the member type in a statement. If this check fails, it will continue below, making sure we don't try to access null. IUser user; // Here we check if the user is an IGuildUser, if not, let it pass. This ensures its not null. if (user is IGuildUser) { Console.WriteLine(\"This user is in a guild!\"); } // Check failed. Object declaration: Here we declare the object we are casting to, making it so that you can immediately work with its properties without reassigning through regular casting. IUser user; // Here we can pre-define the actual declaration of said IGuildUser object, // so we don't need to cast additionally inside of the statement. if (user is IGuildUser guildUser) { Console.WriteLine(guildUser.JoinedAt); } // Check failed. Reverse passage: In previous examples, we want to let code continue running after the check, or if the check fails. In this example, the cast will return the entire method (ignoring the latter) upon failure, and declare the variable for further use into the method: private void MyFunction(IMessage message) { // Here we do the reverse as in the previous examples, and let it continue the code below if it IS an IUserMessage if (message is not IUserMessage userMessage) return; // Because we do the above check inline (don't give the statement a body), // the code will still declare `userMessage` as available outside of the above statement. Console.WriteLine(userMessage.Author); } Note Usage of is, not and as is required in cast assignment and/or type checks. ==, != and = are invalid assignment, as these operators only apply to initialized objects and not their types."
  },
  "guides/entities/glossary.html": {
    "href": "guides/entities/glossary.html",
    "title": "Glossary & Flowcharts | Discord.Net Documentation",
    "keywords": "Entity Types A list of all Discord.Net entities, what they can be cast to and what their properties are. Note All interfaces have the same inheritance tree for both Socket and Rest entities. Entities with that have been marked red are exclusive to the project they source from. Channels Message Channels A Text Channel (ITextChannel) is a message channel from a Guild. A Thread Channel (IThreadChannel) is a thread channel from a Guild. A News Channel (INewsChannel) (also goes as announcement channel) is a news channel from a Guild. A DM Channel (IDMChannel) is a message channel from a DM. A Group Channel (IGroupChannel) is a message channel from a Group. This is rarely used due to the bot's inability to join groups. A Private Channel (IPrivateChannel) is a DM or a Group. A Message Channel (IMessageChannel) can be any of the above. Misc Channels A Guild Channel (IGuildChannel) is a guild channel in a guild. This can be any channels that may exist in a guild. A Voice Channel (IVoiceChannel) is a voice channel in a guild. A Stage Channel (IStageChannel) is a stage channel in a guild. A Category Channel (ICategoryChannel) is a category that holds one or more sub-channels. A Nested Channel (INestedChannel) is a channel that can exist under a category. Messages A Rest Followup Message (RestFollowupMessage) is a message returned by followup on on an interaction. A Rest Interaction Message (RestInteractionMessage) is a message returned by the interaction's original response. A Rest User Message (RestUserMessage) is a message sent over rest; it can be any of the above. An User Message (IUserMessage) is a message sent by a user. A System Message (ISystemMessage) is a message sent by Discord itself. A Message (IMessage) can be any of the above. Users A Guild User (IGuildUser) is a user available inside a guild. A Group User (IGroupUser) is a user available inside a group. This is rarely used due to the bot's inability to join groups. A Self User (ISelfUser) is the bot user the client is currently logged in as. An User (IUser) can be any of the above. Interactions A Slash command (ISlashCommandInteraction) is an application command executed in the text box, with provided parameters. A Message Command (IMessageCommandInteraction) is an application command targeting a message. An User Command (IUserCommandInteraction) is an application command targeting a user. An Application Command (IApplicationCommandInteraction) is any of the above. A Message component (IMessageComponent) is the interaction of a button being clicked/dropdown option(s) entered. An Autocomplete Interaction (IAutocompleteinteraction) is an interaction that has been automatically completed. An Interaction (IDiscordInteraction) is any of the above. Other types: Emoji An Emote (Emote) is a custom emote from a guild. Example: <:dotnet:232902710280716288> An Emoji (Emoji) is a Unicode emoji. Example: 👍 Stickers A Sticker (ISticker) is a standard Discord sticker. A Custom Sticker (ICustomSticker) is a Guild-unique sticker. Activity A Game (Game) refers to a user's game activity. A Rich Presence (RichGame) refers to a user's detailed gameplay status. Visit Rich Presence Intro on Discord docs for more info. A Streaming Status (StreamingGame) refers to user's activity for streaming on services such as Twitch. A Spotify Status (SpotifyGame) (2.0+) refers to a user's activity for listening to a song on Spotify."
  },
  "guides/entities/introduction.html": {
    "href": "guides/entities/introduction.html",
    "title": "Introduction | Discord.Net Documentation",
    "keywords": "Entities in Discord.Net Discord.Net provides a versatile entity system for navigating the Discord API. Tip It is vital that you use the proper IDs for an entity when using a GetXXX method. It is recommended that you enable Discord's developer mode to allow easy access to entity IDs, found in Settings > Appearance > Advanced. Read more about it in the FAQ page. Inheritance Due to the nature of the Discord API, some entities are designed with multiple variants; for example, IUser and IGuildUser. All models will contain the most detailed version of an entity possible, even if the type is less detailed. Socket & REST REST entities are retrieved over REST, and will be disposed after use. It is suggested to limit the amount of REST calls as much as possible, as calls over REST interact with the API, and are thus prone to rate-limits. Learn more about REST Socket entities are created through the gateway, most commonly through DiscordSocketClient events. These entities will enter the clients' global cache for later use. In the case of the MessageReceived event, a SocketMessage is passed in with a channel property of type SocketMessageChannel. All messages come from channels capable of messaging, so this is the only variant of a channel that can cover every single case. But that doesn't mean a message can't come from a SocketTextChannel, which is a message channel in a guild. To retrieve information about a guild from a message entity, you will need to cast its channel object to a SocketTextChannel. Note You can find out the inheritance tree & definitions of various entities here Navigation All socket entities have navigation properties on them, which allow you to easily navigate to an entity's parent or children. As explained above, you will sometimes need to cast to a more detailed version of an entity to navigate to its parent. Accessing Socket Entities The most basic forms of entities, SocketGuild, SocketUser, and SocketChannel can be pulled from the DiscordSocketClient's global cache, and can be retrieved using the respective GetXXX method on DiscordSocketClient. More detailed versions of entities can be pulled from the basic entities, e.g., SocketGuild.GetUser, which returns a SocketGuildUser, or SocketGuild.GetChannel, which returns a SocketGuildChannel. Again, you may need to cast these objects to get a variant of the type that you need. Sample public string GetChannelTopic(ulong id) { var channel = client.GetChannel(81384956881809408) as SocketTextChannel; return channel?.Topic; } public SocketGuildUser GetGuildOwner(SocketChannel channel) { var guild = (channel as SocketGuildChannel)?.Guild; return guild?.Owner; } Accessing REST Entities REST entities work almost the same as Socket entities, but are much less frequently used. To access REST entities, the DiscordSocketClient's Rest property is required. Another option here is to create your own DiscordRestClient, independent of the Socket gateway. Sample // RestUser entities expose the accent color and banner of a user. // This being one of the few use-cases for requesting a RestUser instead of depending on the Socket counterpart. public static EmbedBuilder WithUserColor(this EmbedBuilder builder, IUser user) { var restUser = await _client.Rest.GetUserAsync(user.Id); return builder.WithColor(restUser.AccentColor ?? Color.Blue); // The accent color can still be null, so a check for this needs to be done to prevent an exception to be thrown. }"
  },
  "guides/getting_started/first-bot.html": {
    "href": "guides/getting_started/first-bot.html",
    "title": "Start making a bot | Discord.Net Documentation",
    "keywords": "Making Your First Bot with Discord.Net One of the ways to get started with the Discord API is to write a basic ping-pong bot. This bot will respond to a simple command \"ping.\" We will expand on this to create more diverse commands later, but for now, it is a good starting point. Creating a Discord Bot Before writing your bot, it is necessary to create a bot account via the Discord Applications Portal first. Visit the Discord Applications Portal. Create a new application. Give the application a name (this will be the bot's initial username). On the left-hand side, under Settings, click Bot. Click on Add Bot. Confirm the popup. (Optional) If this bot will be public, tick Public Bot. Adding your bot to a server Bots cannot use invite links; they must be explicitly invited through the OAuth2 flow. Open your bot's application on the Discord Applications Portal. On the left-hand side, under Settings, click OAuth2. Scroll down to OAuth2 URL Generator and under Scopes tick bot. Scroll down further to Bot Permissions and select the permissions that you wish to assign your bot with. Note This will assign the bot with a special \"managed\" role that no one else can use. The permissions can be changed later in the roles settings if you ever change your mind! Open the generated authorization URL in your browser. Select a server. Click on Authorize. Note Only servers where you have the MANAGE_SERVER permission will be present in this list. Connecting to Discord If you have not already created a project and installed Discord.Net, do that now. For more information, see Installing Discord.Net. Async Discord.Net uses .NET's Task-based Asynchronous Pattern (TAP) extensively - nearly every operation is asynchronous. It is highly recommended for these operations to be awaited in a properly established async context whenever possible. To establish an async context, we will be creating an async main method in your console application. public class Program { public static async Task Main() { } } As a result of this, your program will now start into an async context. Warning If your application throws any exceptions within an async context, they will be thrown all the way back up to the first non-async method; since our first non-async method is the program's Main method, this means that all unhandled exceptions will be thrown up there, which will crash your application. Discord.Net will prevent exceptions in event handlers from crashing your program, but any exceptions in your async main will cause the application to crash. Creating a logging method Before we create and configure a Discord client, we will add a method to handle Discord.Net's log events. To allow agnostic support of as many log providers as possible, we log information through a Log event with a proprietary LogMessage parameter. See the API Documentation for this event. If you are using your own logging framework, this is where you would invoke it. For the sake of simplicity, we will only be logging to the console. You may learn more about this concept in Logging Events/Data. private static Task Log(LogMessage msg) { Console.WriteLine(msg.ToString()); return Task.CompletedTask; } Creating a Discord Client Finally, we can create a new connection to Discord. Since we are writing a bot, we will be using a DiscordSocketClient along with socket entities. See Terminology if you are unsure of the differences. To establish a new connection, we will create an instance of DiscordSocketClient in the new async main. You may pass in an optional DiscordSocketConfig if necessary. For most users, the default will work fine. Before connecting, we should hook the client's Log event to the log handler that we had just created. Events in Discord.Net work similarly to any other events in C#. Next, you will need to \"log in to Discord\" with the LoginAsync method with the application's \"token.\" Note Pay attention to what you are copying from the developer portal! A token is not the same as the application's \"client secret.\" We may now invoke the client's StartAsync method, which will start connection/reconnection logic. It is important to note that this method will return as soon as connection logic has been started! Any methods that rely on the client's state should go in an event handler. This means that you should not directly be interacting with the client before it is fully ready. Finally, we will want to block the async main method from returning when running the application. To do this, we can await an infinite delay or any other blocking method, such as reading from the console. Important Your bot's token can be used to gain total access to your bot, so do not share this token with anyone else! You should store this token in an external source if you plan on distributing the source code for your bot. In the following example, we retrieve the token from a pre-defined variable, which is NOT secure, especially if you plan on distributing the application in any shape or form. We recommend alternative storage such as Environment Variables, an external configuration file, or a secrets manager for safe-handling of secrets. The following lines can now be added: private static DiscordSocketClient _client; public static async Task Main() { _client = new DiscordSocketClient(); _client.Log += Log; // You can assign your bot token to a string, and pass that in to connect. // This is, however, insecure, particularly if you plan to have your code hosted in a public repository. var token = \"token\"; // Some alternative options would be to keep your token in an Environment Variable or a standalone file. // var token = Environment.GetEnvironmentVariable(\"NameOfYourEnvironmentVariable\"); // var token = File.ReadAllText(\"token.txt\"); // var token = JsonConvert.DeserializeObject<AConfigurationClass>(File.ReadAllText(\"config.json\")).Token; await _client.LoginAsync(TokenType.Bot, token); await _client.StartAsync(); // Block this task until the program is closed. await Task.Delay(-1); } At this point, feel free to start your program and see your bot come online in Discord. Warning Getting a warning about A supplied token was invalid. and/or having trouble logging in? Double-check whether you have put in the correct credentials and make sure that it is not a client secret, which is different from a token. Warning Encountering a PlatformNotSupportedException when starting your bot? This means that you are targeting a platform where .NET's default WebSocket client is not supported. Refer to the installation guide for how to fix this. Note For your reference, you may view the completed program. Building a bot with commands To create commands for your bot, you may choose from a variety of command processors available. Throughout the guides, we will be using the one that Discord.Net ships with. Introduction to the Chat Command Service will guide you through how to setup a program that is ready for CommandService. For reference, view an annotated example of this structure. It is important to know that the recommended design pattern of bots should be to separate... the program (initialization and command handler) the modules (handle commands) the services (persistent storage, pure functions, data manipulation)"
  },
  "guides/getting_started/installing.html": {
    "href": "guides/getting_started/installing.html",
    "title": "Installing Discord.Net | Discord.Net Documentation",
    "keywords": "Discord.Net Installation Discord.Net is distributed through the NuGet package manager; the most recommended way for you to install this library. Alternatively, you may also compile this library yourself should you so desire. Supported Platforms Discord.Net targets .NET 6.0 and .NET 5.0, but is also available on older versions, like .NET Standard and .NET Core; this still means that creating applications using the latest version of .NET (6.0) is most recommended. If you are bound by Windows-specific APIs or other limitations, you may also consider targeting .NET Framework 4.6.1 or higher. Warning Using this library with Mono is not supported until further notice. It is known to have issues with the library's WebSockets implementation and may crash the application upon startup. Installing Release builds of Discord.Net will be published to the official NuGet feed. Experimental/Development Development builds of Discord.Net will be published to our MyGet feed. The MyGet feed can be used to run the latest dev branch builds. It is not advised to use MyGet packages in a production environment, as changes may be made that negatively affect certain library functions. Labs This exterior branch of Discord.Net has been deprecated and is no longer supported. If you have used Discord.Net-Labs in the past, you are advised to update to the latest version of Discord.Net. All features in Labs are implemented in the main repository. Using Visual Studio Using JetBrains Rider Using Visual Studio Code Using dotnet CLI Create a new solution for your bot In the Solution Explorer, find the \"Dependencies\" element under your bot's project Right click on \"Dependencies\", and select \"Manage NuGet packages\" In the \"Browse\" tab, search for Discord.Net Install the Discord.Net package Create a new solution for your bot Open the NuGet window (Tools > NuGet > Manage NuGet packages for Solution) In the \"Packages\" tab, search for Discord.Net Install by adding the package to your project Create a new project for your bot Add Discord.Net to your *.csproj <Project Sdk=\"Microsoft.NET.Sdk\"> <!-- The following may differ depending on the latest version of .NET Core or Discord.Net. --> <PropertyGroup> <OutputType>Exe</OutputType> <TargetFramework>net6.0</TargetFramework> </PropertyGroup> <ItemGroup> <PackageReference Include=\"Discord.Net\" Version=\"3.13.0\" /> </ItemGroup> </Project> Launch a terminal of your choice Navigate to where your *.csproj is located Enter dotnet add package Discord.Net Compiling from Source In order to compile Discord.Net, you will need the following: Using Visual Studio Visual Studio 2019 or later. .NET 5 SDK The .NET 5 workload is required during Visual Studio installation. Using Command Line .NET 5 SDK Additional Information Installing on Unsupported WebSocket Platform When running any Discord.Net-powered bot on an older operating system (e.g. Windows 7) that does not natively support WebSocket, you may encounter a @System.PlatformNotSupportedException upon connecting. You may resolve this by either targeting .NET Core 2.1 or higher, or by installing one or more custom packages as listed below. Targeting .NET Core 2.1 Custom Packages Download the latest [.NET Core SDK]. Create or move your existing project to use .NET Core. Modify your <TargetFramework> tag to at least netcoreapp2.1, or by adding the --framework netcoreapp2.1 switch when building. Install or compile the following packages: Discord.Net.Providers.WS4Net Discord.Net.Providers.UDPClient (Optional) This is only required if your bot will be utilizing voice chat. Configure your DiscordSocketClient to use these custom providers over the default ones. * To do this, set the `WebSocketProvider` and the optional `UdpSocketProvider` properties on the [DiscordSocketConfig] that you are passing into your client. using Discord.Providers.WS4Net; using Discord.Providers.UDPClient; using Discord.WebSocket; // ... var client = new DiscordSocketClient(new DiscordSocketConfig { WebSocketProvider = WS4NetProvider.Instance, UdpSocketProvider = UDPClientProvider.Instance, });"
  },
  "guides/getting_started/terminology.html": {
    "href": "guides/getting_started/terminology.html",
    "title": "Terminology | Discord.Net Documentation",
    "keywords": "Terminology Preface Most terms for objects remain the same between 0.9 and 1.0 and above. The major difference is that the Server is now called Guild to stay in line with Discord internally. Implementation Specific Entities Discord.Net is split into a core library and two different implementations - Discord.Net.Core, Discord.Net.Rest, and Discord.Net.WebSocket. You will typically only need to use Discord.Net.WebSocket, but you should be aware of the differences between them. Tip If you are looking to implement Rest based interactions, or handle calls over REST in any other way, Discord.Net.Rest is the resource most applicable to you. Discord.Net.Core provides a set of interfaces that models Discord's API. These interfaces are consistent throughout all implementations of Discord.Net, and if you are writing an implementation-agnostic library or addon, you can rely on the core interfaces to ensure that your addon will run on all platforms. Discord.Net.Rest provides a set of concrete classes to be used strictly with the REST portion of Discord's API. Entities in this implementation are prefixed with Rest (e.g., RestChannel). Discord.Net.WebSocket provides a set of concrete classes that are used primarily with Discord's WebSocket API or entities that are kept in cache. When developing bots, you will be using this implementation. All entities are prefixed with Socket (e.g., SocketChannel)."
  },
  "guides/guild_events/creating-guild-events.html": {
    "href": "guides/guild_events/creating-guild-events.html",
    "title": "Creating Guild Events | Discord.Net Documentation",
    "keywords": "Creating guild events You can create new guild events by using the CreateEventAsync function on a guild. Parameters Name Type Summary name string Sets the name of the event. startTime DateTimeOffset Sets the start time of the event. type GuildScheduledEventType Sets the type of the event. privacyLevel? GuildScheduledEventPrivacyLevel Sets the privacy level of the event description? string Sets the description of the event. endTime? DateTimeOffset? Sets the end time of the event. channelId? ulong? Sets the channel id of the event, only valid on stage or voice channel types location? string Sets the location of the event, only valid on external types Lets create a basic test event. var guild = client.GetGuild(guildId); var guildEvent = await guild.CreateEventAsync(\"test event\", DateTimeOffset.UtcNow.AddDays(1), GuildScheduledEventType.External, endTime: DateTimeOffset.UtcNow.AddDays(2), location: \"Space\"); This code will create an event that lasts a day and starts tomorrow. It will be an external event that's in space."
  },
  "guides/guild_events/getting-event-users.html": {
    "href": "guides/guild_events/getting-event-users.html",
    "title": "Getting Guild Event Users | Discord.Net Documentation",
    "keywords": "Getting Event Users You can get a collection of users who are currently interested in the event by calling GetUsersAsync. This method works like any other get users method as in it returns an async enumerable. This method also supports pagination by user id. // get all users and flatten the result into one collection. var users = await event.GetUsersAsync().FlattenAsync(); // get users around the 613425648685547541 id. var aroundUsers = await event.GetUsersAsync(613425648685547541, Direction.Around).FlattenAsync();"
  },
  "guides/guild_events/intro.html": {
    "href": "guides/guild_events/intro.html",
    "title": "Introduction to Guild Events | Discord.Net Documentation",
    "keywords": "Guild Events Guild events are a way to host events within a guild. They offer a lot of features and flexibility. Getting started with guild events You can access any events within a guild by calling GetEventsAsync on a guild. var guildEvents = await guild.GetEventsAsync(); If your working with socket guilds you can just use the Events property: var guildEvents = guild.Events; There are also new gateway events that you can hook to receive guild scheduled events on. // Fired when a guild event is cancelled. client.GuildScheduledEventCancelled += ... // Fired when a guild event is completed. client.GuildScheduledEventCompleted += ... // Fired when a guild event is started. client.GuildScheduledEventStarted += ... // Fired when a guild event is created. client.GuildScheduledEventCreated += ... // Fired when a guild event is updated. client.GuildScheduledEventUpdated += ... // Fired when a guild event has someone mark themselves as interested. client.GuildScheduledEventUserAdd += ... // Fired when a guild event has someone remove their interested status. client.GuildScheduledEventUserRemove += ..."
  },
  "guides/guild_events/modifying-events.html": {
    "href": "guides/guild_events/modifying-events.html",
    "title": "Modifying Guild Events | Discord.Net Documentation",
    "keywords": "Modifying Events You can modify events using the ModifyAsync method to modify the event. Here are the properties you can modify: Name Type Description ChannelId ulong? Gets or sets the channel id of the event. string string Gets or sets the location of this event. Name string Gets or sets the name of the event. PrivacyLevel GuildScheduledEventPrivacyLevel Gets or sets the privacy level of the event. StartTime DateTimeOffset Gets or sets the start time of the event. EndTime DateTimeOffset Gets or sets the end time of the event. Description string Gets or sets the description of the event. Type GuildScheduledEventType Gets or sets the type of the event. Status GuildScheduledEventStatus Gets or sets the status of the event. Note All of these properties are optional."
  },
  "guides/int_basics/application-commands/context-menu-commands/creating-context-menu-commands.html": {
    "href": "guides/int_basics/application-commands/context-menu-commands/creating-context-menu-commands.html",
    "title": "Creating Context Commands | Discord.Net Documentation",
    "keywords": "Creating context menu commands. There are two kinds of Context Menu Commands: User Commands and Message Commands. Each of these have a Global and Guild variant. Global menu commands are available for every guild that adds your app. An individual app's global commands are also available in DMs if that app has a bot that shares a mutual guild with the user. Guild commands are specific to the guild you specify when making them. Guild commands are not available in DMs. Command names are unique per application within each scope (global and guild). That means: Your app cannot have two global commands with the same name Your app cannot have two guild commands within the same name on the same guild Your app can have a global and guild command with the same name Multiple apps can have commands with the same names [!IMPORTANT] Apps can have a maximum of 5 global context menu commands, and an additional 5 guild-specific context menu commands per guild. UserCommandBuilder The context menu user command builder will help you create user commands. The builder has these available fields and methods: Name Type Description Name string The name of this context menu command. WithName Function Sets the field name. Build Function Builds the builder into the appropriate UserCommandProperties class used to make Menu commands MessageCommandBuilder The context menu message command builder will help you create message commands. The builder has these available fields and methods: Name Type Description Name string The name of this context menu command. WithName Function Sets the field name. Build Function Builds the builder into the appropriate MessageCommandProperties class used to make Menu commands Note Context Menu command names can be upper and lowercase, and use spaces. They cannot be registered pre-ready. Let's use the user command builder to make a global and guild command. // Let's hook the ready event for creating our commands in. client.Ready += Client_Ready; ... public async Task Client_Ready() { // Let's build a guild command! We're going to need a guild so lets just put that in a variable. var guild = client.GetGuild(guildId); // Next, lets create our user and message command builder. This is like the embed builder but for context menu commands. var guildUserCommand = new UserCommandBuilder(); var guildMessageCommand = new MessageCommandBuilder(); // Note: Names have to be all lowercase and match the regular expression ^[\\w -]{3,32}$ guildUserCommand.WithName(\"Guild User Command\"); guildMessageCommand.WithName(\"Guild Message Command\"); // Descriptions are not used with User and Message commands //guildCommand.WithDescription(\"\"); // Let's do our global commands var globalUserCommand = new UserCommandBuilder(); globalUserCommand.WithName(\"Global User Command\"); var globalMessageCommand = new MessageCommandBuilder(); globalMessageCommand.WithName(\"Global Message Command\"); try { // Now that we have our builder, we can call the BulkOverwriteApplicationCommandAsync to make our context commands. Note: this will overwrite all your previous commands with this array. await guild.BulkOverwriteApplicationCommandAsync(new ApplicationCommandProperties[] { guildUserCommand.Build(), guildMessageCommand.Build() }); // With global commands we dont need the guild. await client.BulkOverwriteGlobalApplicationCommandsAsync(new ApplicationCommandProperties[] { globalUserCommand.Build(), globalMessageCommand.Build() }); } catch(ApplicationCommandException exception) { // If our command was invalid, we should catch an ApplicationCommandException. This exception contains the path of the error as well as the error message. You can serialize the Error field in the exception to get a visual of where your error is. var json = JsonConvert.SerializeObject(exception.Error, Formatting.Indented); // You can send this error somewhere or just print it to the console, for this example we're just going to print it. Console.WriteLine(json); } } Note Application commands only need to be created once. They do not have to be 'created' on every startup or connection. The example simple shows creating them in the ready event as it's simpler than creating normal bot commands to register application commands."
  },
  "guides/int_basics/application-commands/context-menu-commands/receiving-context-menu-command-events.html": {
    "href": "guides/int_basics/application-commands/context-menu-commands/receiving-context-menu-command-events.html",
    "title": "Receiving Context Commands | Discord.Net Documentation",
    "keywords": "Receiving Context Menu events User commands and Message commands have their own unique event just like the other interaction types. For user commands the event is UserCommandExecuted and for message commands the event is MessageCommandExecuted. // For message commands client.MessageCommandExecuted += MessageCommandHandler; // For user commands client.UserCommandExecuted += UserCommandHandler; ... public async Task MessageCommandHandler(SocketMessageCommand arg) { Console.WriteLine(\"Message command received!\"); } public async Task UserCommandHandler(SocketUserCommand arg) { Console.WriteLine(\"User command received!\"); } User commands contain a SocketUser object called Member in their data class, showing the user that was clicked to run the command. Message commands contain a SocketMessage object called Message in their data class, showing the message that was clicked to run the command. Both return the user who ran the command, the guild (if any), channel, etc."
  },
  "guides/int_basics/application-commands/intro.html": {
    "href": "guides/int_basics/application-commands/intro.html",
    "title": "Introduction to slash commands | Discord.Net Documentation",
    "keywords": "Getting started with application commands. This guide will show you how to use application commands. If you have extra questions that aren't covered here you can come to our Discord server and ask around there. What is an application command? Application commands consist of three different types. Slash commands, context menu User commands and context menu Message commands. Slash commands are made up of a name, description, and a block of options, which you can think of like arguments to a function. The name and description help users find your command among many others, and the options validate user input as they fill out your command. Message and User commands are only a name, to the user. So try to make the name descriptive. They're accessed by right clicking (or long press, on mobile) a user or a message, respectively. All three varieties of application commands have both Global and Guild variants. Your global commands are available in every guild that adds your application. You can also make commands for a specific guild; they're only available in that guild. The User and Message commands are more limited in quantity than the slash commands. For specifics, check out their respective guide pages. An Interaction is the message that your application receives when a user uses a command. It includes the values that the user submitted, as well as some metadata about this particular instance of the command being used: the guild_id, channel_id, member and other fields. You can find all the values in our data models. Authorizing your bot for application commands There is a new special OAuth2 scope for applications called applications.commands. In order to make Application Commands work within a guild, the guild must authorize your application with the applications.commands scope. The bot scope is not enough. Head over to your discord applications OAuth2 screen and make sure to select the application.commands scope. From there you can then use the link to add your bot to a server. Note In order for users in your guild to use your slash commands, they need to have the \"Use Application Commands\" permission on the guild."
  },
  "guides/int_basics/application-commands/slash-commands/bulk-overwrite-of-global-slash-commands.html": {
    "href": "guides/int_basics/application-commands/slash-commands/bulk-overwrite-of-global-slash-commands.html",
    "title": "Slash Command Bulk Overwrites | Discord.Net Documentation",
    "keywords": "If you have too many global commands then you might want to consider using the bulk overwrite function. public async Task Client_Ready() { List<ApplicationCommandProperties> applicationCommandProperties = new(); try { // Simple help slash command. SlashCommandBuilder globalCommandHelp = new SlashCommandBuilder(); globalCommandHelp.WithName(\"help\"); globalCommandHelp.WithDescription(\"Shows information about the bot.\"); applicationCommandProperties.Add(globalCommandHelp.Build()); // Slash command with name as its parameter. SlashCommandOptionBuilder slashCommandOptionBuilder = new(); slashCommandOptionBuilder.WithName(\"name\"); slashCommandOptionBuilder.WithType(ApplicationCommandOptionType.String); slashCommandOptionBuilder.WithDescription(\"Add a family\"); slashCommandOptionBuilder.WithRequired(true); // Only add this if you want it to be required SlashCommandBuilder globalCommandAddFamily = new SlashCommandBuilder(); globalCommandAddFamily.WithName(\"add-family\"); globalCommandAddFamily.WithDescription(\"Add a family\"); globalCommandAddFamily.AddOptions(slashCommandOptionBuilder); applicationCommandProperties.Add(globalCommandAddFamily.Build()); await _client.BulkOverwriteGlobalApplicationCommandsAsync(applicationCommandProperties.ToArray()); } catch (ApplicationCommandException exception) { var json = JsonConvert.SerializeObject(exception.Error, Formatting.Indented); Console.WriteLine(json); } }"
  },
  "guides/int_basics/application-commands/slash-commands/choice-slash-command.html": {
    "href": "guides/int_basics/application-commands/slash-commands/choice-slash-command.html",
    "title": "Slash Command Choices | Discord.Net Documentation",
    "keywords": "Slash Command Choices. With slash command options you can add choices, making the user select between some set values. Lets create a command that asks how much they like our bot! Let's set up our slash command: private async Task Client_Ready() { ulong guildId = 848176216011046962; var guildCommand = new SlashCommandBuilder() .WithName(\"feedback\") .WithDescription(\"Tell us how much you are enjoying this bot!\") .AddOption(new SlashCommandOptionBuilder() .WithName(\"rating\") .WithDescription(\"The rating your willing to give our bot\") .WithRequired(true) .AddChoice(\"Terrible\", 1) .AddChoice(\"Meh\", 2) .AddChoice(\"Good\", 3) .AddChoice(\"Lovely\", 4) .AddChoice(\"Excellent!\", 5) .WithType(ApplicationCommandOptionType.Integer) ); try { await client.Rest.CreateGuildCommand(guildCommand.Build(), guildId); } catch(ApplicationCommandException exception) { var json = JsonConvert.SerializeObject(exception.Error, Formatting.Indented); Console.WriteLine(json); } } Note Your ApplicationCommandOptionType specifies which type your choices are, you need to use ApplicationCommandOptionType.Integer for choices whos values are whole numbers, ApplicationCommandOptionType.Number for choices whos values are doubles, and ApplicationCommandOptionType.String for string values. We have defined 5 choices for the user to pick from, each choice has a value assigned to it. The value can either be a string or an int. In our case we're going to use an int. This is what the command looks like: Lets add our code for handling the interaction. private async Task SlashCommandHandler(SocketSlashCommand command) { // Let's add a switch statement for the command name so we can handle multiple commands in one event. switch(command.Data.Name) { case \"list-roles\": await HandleListRoleCommand(command); break; case \"settings\": await HandleSettingsCommand(command); break; case \"feedback\": await HandleFeedbackCommand(command); break; } } private async Task HandleFeedbackCommand(SocketSlashCommand command) { var embedBuilder = new EmbedBuilder() .WithAuthor(command.User) .WithTitle(\"Feedback\") .WithDescription($\"Thanks for your feedback! You rated us {command.Data.Options.First().Value}/5\") .WithColor(Color.Green) .WithCurrentTimestamp(); await command.RespondAsync(embed: embedBuilder.Build()); } And this is the result:"
  },
  "guides/int_basics/application-commands/slash-commands/creating-slash-commands.html": {
    "href": "guides/int_basics/application-commands/slash-commands/creating-slash-commands.html",
    "title": "Creating Slash Commands | Discord.Net Documentation",
    "keywords": "Creating your first slash commands. There are two kinds of Slash Commands: global commands and guild commands. Global commands are available for every guild that adds your app. An individual app's global commands are also available in DMs if that app has a bot that shares a mutual guild with the user. Guild commands are specific to the guild you specify when making them. Guild commands are not available in DMs. Command names are unique per application within each scope (global and guild). That means: Your app cannot have two global commands with the same name Your app cannot have two guild commands within the same name on the same guild Your app can have a global and guild command with the same name Multiple apps can have commands with the same names Note: Apps can have a maximum of 100 global commands, and an additional 100 guild-specific commands per guild. Note: Global commands will take up to 1 hour to create, delete or modify on guilds. If you need to update a command quickly for testing you can create it as a guild command. If you don't have the code for a bot ready yet please follow this guide. SlashCommandBuilder The slash command builder will help you create slash commands. The builder has these available fields and methods: Name Type Description MaxNameLength const int The maximum length of a name for a slash command allowed by Discord. MaxDescriptionLength const int The maximum length of a commands description allowed by Discord. MaxOptionsCount const int The maximum count of command options allowed by Discord Name string The name of this slash command. Description string A 1-100 length description of this slash command Options List<SlashCommandOptionBuilder> The options for this command. DefaultPermission bool Whether the command is enabled by default when the app is added to a guild. WithName Function Sets the field name. WithDescription Function Sets the description of the current command. WithDefaultPermission Function Sets the default permission of the current command. AddOption Function Adds an option to the current slash command. Build Function Builds the builder into a SlashCommandCreationProperties class used to make slash commands Note Slash command names must be all lowercase! Creating a Slash Command Let's use the slash command builder to make a global and guild command. // Let's hook the ready event for creating our commands in. client.Ready += Client_Ready; ... public async Task Client_Ready() { // Let's build a guild command! We're going to need a guild so lets just put that in a variable. var guild = client.GetGuild(guildId); // Next, lets create our slash command builder. This is like the embed builder but for slash commands. var guildCommand = new SlashCommandBuilder(); // Note: Names have to be all lowercase and match the regular expression ^[\\w-]{3,32}$ guildCommand.WithName(\"first-command\"); // Descriptions can have a max length of 100. guildCommand.WithDescription(\"This is my first guild slash command!\"); // Let's do our global command var globalCommand = new SlashCommandBuilder(); globalCommand.WithName(\"first-global-command\"); globalCommand.WithDescription(\"This is my first global slash command\"); try { // Now that we have our builder, we can call the CreateApplicationCommandAsync method to make our slash command. await guild.CreateApplicationCommandAsync(guildCommand.Build()); // With global commands we don't need the guild. await client.CreateGlobalApplicationCommandAsync(globalCommand.Build()); // Using the ready event is a simple implementation for the sake of the example. Suitable for testing and development. // For a production bot, it is recommended to only run the CreateGlobalApplicationCommandAsync() once for each command. } catch(ApplicationCommandException exception) { // If our command was invalid, we should catch an ApplicationCommandException. This exception contains the path of the error as well as the error message. You can serialize the Error field in the exception to get a visual of where your error is. var json = JsonConvert.SerializeObject(exception.Errors, Formatting.Indented); // You can send this error somewhere or just print it to the console, for this example we're just going to print it. Console.WriteLine(json); } } Note Slash commands only need to be created once. They do not have to be 'created' on every startup or connection. The example simple shows creating them in the ready event as it's simpler than creating normal bot commands to register slash commands. The global commands take up to an hour to register every time the CreateGlobalApplicationCommandAsync() is called for a given command."
  },
  "guides/int_basics/application-commands/slash-commands/parameters.html": {
    "href": "guides/int_basics/application-commands/slash-commands/parameters.html",
    "title": "Slash Command Parameters | Discord.Net Documentation",
    "keywords": "Slash command parameters Slash commands can have a bunch of parameters, each their own type. Let's first go over the types of parameters we can have. Name Description SubCommand A subcommand inside of a subcommand group. SubCommandGroup The parent command group of subcommands. String A string of text. Integer A number. Boolean True or False. User A user Role A role. Channel A channel, this includes voice text and categories Mentionable A role or a user. File A file Each one of the parameter types has its own DNET type in the SocketSlashCommandDataOption's Value field: | Name | C# Type | | --------------- | ------------------------------------------------ | | SubCommand | NA | | SubCommandGroup | NA | | String | string | | Integer | int | | Boolean | bool | | User | SocketGuildUser or SocketUser | | Role | SocketRole | | Channel | SocketChannel | | Mentionable | SocketUser, SocketGuildUser, or SocketRole | | File | IAttachment | Let's start by making a command that takes in a user and lists their roles. client.Ready += Client_Ready; ... public async Task Client_Ready() { ulong guildId = 848176216011046962; var guildCommand = new Discord.SlashCommandBuilder() .WithName(\"list-roles\") .WithDescription(\"Lists all roles of a user.\") .AddOption(\"user\", ApplicationCommandOptionType.User, \"The users whos roles you want to be listed\", isRequired: true); try { await client.Rest.CreateGuildCommand(guildCommand.Build(), guildId); } catch(ApplicationCommandException exception) { var json = JsonConvert.SerializeObject(exception.Error, Formatting.Indented); Console.WriteLine(json); } } That seems to be working, now Let's handle the interaction. private async Task SlashCommandHandler(SocketSlashCommand command) { // Let's add a switch statement for the command name so we can handle multiple commands in one event. switch(command.Data.Name) { case \"list-roles\": await HandleListRoleCommand(command); break; } } private async Task HandleListRoleCommand(SocketSlashCommand command) { // We need to extract the user parameter from the command. since we only have one option and it's required, we can just use the first option. var guildUser = (SocketGuildUser)command.Data.Options.First().Value; // We remove the everyone role and select the mention of each role. var roleList = string.Join(\",\\n\", guildUser.Roles.Where(x => !x.IsEveryone).Select(x => x.Mention)); var embedBuiler = new EmbedBuilder() .WithAuthor(guildUser.ToString(), guildUser.GetAvatarUrl() ?? guildUser.GetDefaultAvatarUrl()) .WithTitle(\"Roles\") .WithDescription(roleList) .WithColor(Color.Green) .WithCurrentTimestamp(); // Now, Let's respond with the embed. await command.RespondAsync(embed: embedBuiler.Build()); } That has worked! Next, we will go over responding ephemerally."
  },
  "guides/int_basics/application-commands/slash-commands/responding-ephemerally.html": {
    "href": "guides/int_basics/application-commands/slash-commands/responding-ephemerally.html",
    "title": "Ephemeral Responses | Discord.Net Documentation",
    "keywords": "Responding ephemerally What is an ephemeral response? Basically, only the user who executed the command can see the result of it, this is pretty simple to implement. Note You don't have to run arg.DeferAsync() to capture the interaction, you can use arg.RespondAsync() with a message to capture it, this also follows the ephemeral rule. When responding with either FollowupAsync or RespondAsync you can pass in an ephemeral property. When setting it to true it will respond ephemerally, false and it will respond non-ephemerally. Let's use this in our list role command. await command.RespondAsync(embed: embedBuilder.Build(), ephemeral: true); Running the command now only shows the message to us!"
  },
  "guides/int_basics/application-commands/slash-commands/responding-to-slash-commands.html": {
    "href": "guides/int_basics/application-commands/slash-commands/responding-to-slash-commands.html",
    "title": "Receiving and Responding to Slash Commands | Discord.Net Documentation",
    "keywords": "Responding to interactions. Interactions are the base thing sent over by Discord. Slash commands are one of the interaction types. We can listen to the SlashCommandExecuted event to respond to them. Lets add this to our code: client.SlashCommandExecuted += SlashCommandHandler; ... private async Task SlashCommandHandler(SocketSlashCommand command) { } With every type of interaction there is a Data field. This is where the relevant information lives about our command that was executed. In our case, Data is a SocketSlashCommandData instance. In the data class, we can access the name of the command triggered as well as the options if there were any. For this example, we're just going to respond with the name of the command executed. private async Task SlashCommandHandler(SocketSlashCommand command) { await command.RespondAsync($\"You executed {command.Data.Name}\"); } Let's try this out! Note After receiving an interaction, you must respond to acknowledge it. You can choose to respond with a message immediately using RespondAsync() or you can choose to send a deferred response with DeferAsync(). If choosing a deferred response, the user will see a loading state for the interaction, and you'll have up to 15 minutes to edit the original deferred response using ModifyOriginalResponseAsync(). You can read more about response types here This seems to be working! Next, we will look at parameters for slash commands."
  },
  "guides/int_basics/application-commands/slash-commands/subcommands.html": {
    "href": "guides/int_basics/application-commands/slash-commands/subcommands.html",
    "title": "Sub Commands | Discord.Net Documentation",
    "keywords": "Subcommands Subcommands allow you to have multiple commands available in a single command. They can be useful for representing sub options for a command. For example: A settings command. Let's first look at some limitations with subcommands set by discord. An app can have up to 25 subcommand groups on a top-level command An app can have up to 25 subcommands within a subcommand group commands can have up to 25 options options can have up to 25 choices VALID command | |__ subcommand | |__ subcommand ---- command | |__ subcommand-group | |__ subcommand | |__ subcommand-group | |__ subcommand ------- INVALID command | |__ subcommand-group | |__ subcommand-group | |__ subcommand-group | |__ subcommand-group ---- INVALID command | |__ subcommand | |__ subcommand-group | |__ subcommand | |__ subcommand-group Let's write a settings command that can change 3 fields in our bot. public string FieldA { get; set; } = \"test\"; public int FieldB { get; set; } = 10; public bool FieldC { get; set; } = true; public async Task Client_Ready() { ulong guildId = 848176216011046962; var guildCommand = new SlashCommandBuilder() .WithName(\"settings\") .WithDescription(\"Changes some settings within the bot.\") .AddOption(new SlashCommandOptionBuilder() .WithName(\"field-a\") .WithDescription(\"Gets or sets the field A\") .WithType(ApplicationCommandOptionType.SubCommandGroup) .AddOption(new SlashCommandOptionBuilder() .WithName(\"set\") .WithDescription(\"Sets the field A\") .WithType(ApplicationCommandOptionType.SubCommand) .AddOption(\"value\", ApplicationCommandOptionType.String, \"the value to set the field\", isRequired: true) ).AddOption(new SlashCommandOptionBuilder() .WithName(\"get\") .WithDescription(\"Gets the value of field A.\") .WithType(ApplicationCommandOptionType.SubCommand) ) ).AddOption(new SlashCommandOptionBuilder() .WithName(\"field-b\") .WithDescription(\"Gets or sets the field B\") .WithType(ApplicationCommandOptionType.SubCommandGroup) .AddOption(new SlashCommandOptionBuilder() .WithName(\"set\") .WithDescription(\"Sets the field B\") .WithType(ApplicationCommandOptionType.SubCommand) .AddOption(\"value\", ApplicationCommandOptionType.Integer, \"the value to set the fie to.\", isRequired: true) ).AddOption(new SlashCommandOptionBuilder() .WithName(\"get\") .WithDescription(\"Gets the value of field B.\") .WithType(ApplicationCommandOptionType.SubCommand) ) ).AddOption(new SlashCommandOptionBuilder() .WithName(\"field-c\") .WithDescription(\"Gets or sets the field C\") .WithType(ApplicationCommandOptionType.SubCommandGroup) .AddOption(new SlashCommandOptionBuilder() .WithName(\"set\") .WithDescription(\"Sets the field C\") .WithType(ApplicationCommandOptionType.SubCommand) .AddOption(\"value\", ApplicationCommandOptionType.Boolean, \"the value to set the fie to.\", isRequired: true) ).AddOption(new SlashCommandOptionBuilder() .WithName(\"get\") .WithDescription(\"Gets the value of field C.\") .WithType(ApplicationCommandOptionType.SubCommand) ) ); try { await client.Rest.CreateGuildCommand(guildCommand.Build(), guildId); } catch(ApplicationCommandException exception) { var json = JsonConvert.SerializeObject(exception.Error, Formatting.Indented); Console.WriteLine(json); } } All that code generates a command that looks like this: Now that we have our command made, we need to handle the multiple options with this command. So lets add this into our handler: private async Task SlashCommandHandler(SocketSlashCommand command) { // Let's add a switch statement for the command name so we can handle multiple commands in one event. switch(command.Data.Name) { case \"list-roles\": await HandleListRoleCommand(command); break; case \"settings\": await HandleSettingsCommand(command); break; } } private async Task HandleSettingsCommand(SocketSlashCommand command) { // First lets extract our variables var fieldName = command.Data.Options.First().Name; var getOrSet = command.Data.Options.First().Options.First().Name; // Since there is no value on a get command, we use the ? operator because \"Options\" can be null. var value = command.Data.Options.First().Options.First().Options?.FirstOrDefault().Value; switch (fieldName) { case \"field-a\": { if(getOrSet == \"get\") { await command.RespondAsync($\"The value of `field-a` is `{FieldA}`\"); } else if (getOrSet == \"set\") { this.FieldA = (string)value; await command.RespondAsync($\"`field-a` has been set to `{FieldA}`\"); } } break; case \"field-b\": { if (getOrSet == \"get\") { await command.RespondAsync($\"The value of `field-b` is `{FieldB}`\"); } else if (getOrSet == \"set\") { this.FieldB = (int)value; await command.RespondAsync($\"`field-b` has been set to `{FieldB}`\"); } } break; case \"field-c\": { if (getOrSet == \"get\") { await command.RespondAsync($\"The value of `field-c` is `{FieldC}`\"); } else if (getOrSet == \"set\") { this.FieldC = (bool)value; await command.RespondAsync($\"`field-c` has been set to `{FieldC}`\"); } } break; } } Now, let's try this out! Running the 3 get commands seems to get the default values we set. Now let's try changing each to a different value. That has worked! Next, let't look at choices in commands."
  },
  "guides/int_basics/message-components/advanced.html": {
    "href": "guides/int_basics/message-components/advanced.html",
    "title": "Advanced Concepts | Discord.Net Documentation",
    "keywords": "Advanced Lets say you have some components on an ephemeral slash command, and you want to modify the message that the button is on. The issue with this is that ephemeral messages are not stored and can not be get via rest or other means. Luckily, Discord thought of this and introduced a way to modify them with interactions. Using the UpdateAsync method Components come with an UpdateAsync method that can update the message that the component was on. You can use it like a ModifyAsync method. Lets use it with a command, we first create our command, in this example im just going to use a message command: var command = new MessageCommandBuilder() .WithName(\"testing\").Build(); await client.GetGuild(guildId).BulkOverwriteApplicationCommandAsync(new [] { command, buttonCommand }); Next, we listen for this command, and respond with some components when its used: var menu = new SelectMenuBuilder() { CustomId = \"select-1\", Placeholder = \"Select Somthing!\", MaxValues = 1, MinValues = 1, }; menu.AddOption(\"Meh\", \"1\", \"Its not gaming.\") .AddOption(\"Ish\", \"2\", \"Some would say that this is gaming.\") .AddOption(\"Moderate\", \"3\", \"It could pass as gaming\") .AddOption(\"Confirmed\", \"4\", \"We are gaming\") .AddOption(\"Excellent\", \"5\", \"It is renowned as gaming nation wide\", new Emoji(\"🔥\")); var components = new ComponentBuilder() .WithSelectMenu(menu); await arg.RespondAsync(\"On a scale of one to five, how gaming is this?\", component: components.Build(), ephemeral: true); break; Now, let's listen to the select menu executed event and add a case for select-1 client.SelectMenuExecuted += SelectMenuHandler; ... public async Task SelectMenuHandler(SocketMessageComponent arg) { switch (arg.Data.CustomId) { case \"select-1\": var value = arg.Data.Values.First(); var menu = new SelectMenuBuilder() { CustomId = \"select-1\", Placeholder = $\"{(arg.Message.Components.First().Components.First() as SelectMenu).Options.FirstOrDefault(x => x.Value == value).Label}\", MaxValues = 1, MinValues = 1, Disabled = true }; menu.AddOption(\"Meh\", \"1\", \"Its not gaming.\") .AddOption(\"Ish\", \"2\", \"Some would say that this is gaming.\") .AddOption(\"Moderate\", \"3\", \"It could pass as gaming\") .AddOption(\"Confirmed\", \"4\", \"We are gaming\") .AddOption(\"Excellent\", \"5\", \"It is renowned as gaming nation wide\", new Emoji(\"🔥\")); // We use UpdateAsync to update the message and its original content and components. await arg.UpdateAsync(x => { x.Content = $\"Thank you {arg.User.Mention} for rating us {value}/5 on the gaming scale\"; x.Components = new ComponentBuilder().WithSelectMenu(menu).Build(); }); break; } }"
  },
  "guides/int_basics/message-components/buttons-in-depth.html": {
    "href": "guides/int_basics/message-components/buttons-in-depth.html",
    "title": "Buttons in Depth | Discord.Net Documentation",
    "keywords": "Buttons in depth There are many changes you can make to buttons, lets take a look at the parameters in the WithButton function\" | Name | Type | Description | |----------|---------------|----------------------------------------------------------------| | label | string | The label text for the button. | | customId | string | The custom id of the button. | | style | ButtonStyle | The style of the button. | | emote | IEmote | A IEmote to be used with this button. | | url | string | A URL to be used only if the ButtonStyle is a Link. | | disabled | bool | Whether or not the button is disabled. | | row | int | The row to place the button if it has enough room, otherwise 0 | Label This is the front facing text that the user sees. The maximum length is 80 characters. CustomId This is the property sent to you by discord when a button is clicked. It is not required for link buttons as they do not emit an event. The maximum length is 100 characters. Style Styling your buttons are important for indicating different actions: You can do this by using the ButtonStyle which has all the styles defined. Emote You can specify an IEmote when creating buttons to add them to your button. They have the same restrictions as putting guild based emotes in messages. Url If you use the link style with your button you can specify a url. When this button is clicked the user is taken to that url. Disabled You can specify if your button is disabled, meaning users won't be able to click on it."
  },
  "guides/int_basics/message-components/intro.html": {
    "href": "guides/int_basics/message-components/intro.html",
    "title": "Getting Started with Components | Discord.Net Documentation",
    "keywords": "Message Components Message components are a framework for adding interactive elements to a message your app or bot sends. They're accessible, customizable, and easy to use. What is a Component Components are a new parameter you can use when sending messages with your bot. There are currently 2 different types of components you can use: Buttons and Select Menus. Creating components Lets create a simple component that has a button. First thing we need is a way to trigger the message, this can be done via commands or simply a ready event. Lets make a command that triggers our button message. [Command(\"spawner\")] public async Task Spawn() { // Reply with some components } We now have our command, but we need to actually send the buttons with the command. To do that, lets look at the ComponentBuilder class: Name Description FromMessage Creates a new builder from a message. FromComponents Creates a new builder from the provided list of components. WithSelectMenu Adds a SelectMenuBuilder to the ComponentBuilder at the specific row. WithButton Adds a ButtonBuilder to the ComponentBuilder at the specific row. Build Builds this builder into a MessageComponent used to send your components. We see that we can use the WithButton function so lets do that. looking at its parameters it takes: label - The display text of the button. customId - The custom id of the button, this is whats sent by discord when your button is clicked. style - The discord defined style of the button. emote - An emote to be displayed with the button. url - The url of the button if its a link button. disabled - Whether or not the button is disabled. row - The row the button will occupy. Since were just making a busic button, we dont have to specify anything else besides the label and custom id. var builder = new ComponentBuilder() .WithButton(\"label\", \"custom-id\"); Lets add this to our command: [Command(\"spawner\")] public async Task Spawn() { var builder = new ComponentBuilder() .WithButton(\"label\", \"custom-id\"); await ReplyAsync(\"Here is a button!\", components: builder.Build()); }"
  },
  "guides/int_basics/message-components/responding-to-buttons.html": {
    "href": "guides/int_basics/message-components/responding-to-buttons.html",
    "title": "Responding to Components | Discord.Net Documentation",
    "keywords": "Responding to button clicks Responding to buttons is pretty simple, there are a couple ways of doing it and we can cover both. Method 1: Hooking the InteractionCreated Event We can hook the ButtonExecuted event for button type interactions: client.ButtonExecuted += MyButtonHandler; Now, lets write our handler. public async Task MyButtonHandler(SocketMessageComponent component) { // We can now check for our custom id switch(component.Data.CustomId) { // Since we set our buttons custom id as 'custom-id', we can check for it like this: case \"custom-id\": // Lets respond by sending a message saying they clicked the button await component.RespondAsync($\"{component.User.Mention} has clicked the button!\"); break; } } Running it and clicking the button:"
  },
  "guides/int_basics/message-components/select-menus.html": {
    "href": "guides/int_basics/message-components/select-menus.html",
    "title": "Select Menus | Discord.Net Documentation",
    "keywords": "Select menus Select menus allow users to select from a range of options, this can be quite useful with configuration commands etc. Creating a select menu We can use a SelectMenuBuilder to create our menu. var menuBuilder = new SelectMenuBuilder() .WithPlaceholder(\"Select an option\") .WithCustomId(\"menu-1\") .WithMinValues(1) .WithMaxValues(1) .AddOption(\"Option A\", \"opt-a\", \"Option B is lying!\") .AddOption(\"Option B\", \"opt-b\", \"Option A is telling the truth!\"); var builder = new ComponentBuilder() .WithSelectMenu(menuBuilder); Lets add this to a command: [Command(\"spawner\")] public async Task Spawn() { var menuBuilder = new SelectMenuBuilder() .WithPlaceholder(\"Select an option\") .WithCustomId(\"menu-1\") .WithMinValues(1) .WithMaxValues(1) .AddOption(\"Option A\", \"opt-a\", \"Option B is lying!\") .AddOption(\"Option B\", \"opt-b\", \"Option A is telling the truth!\"); var builder = new ComponentBuilder() .WithSelectMenu(menuBuilder); await ReplyAsync(\"Whos really lying?\", components: builder.Build()); } Running this produces this result: And opening the menu we see: Lets handle the selection of an option, We can hook the SelectMenuExecuted event to handle our select menu: client.SelectMenuExecuted += MyMenuHandler; The SelectMenuExecuted also supplies a SocketMessageComponent argument, we can confirm that its a select menu by checking the ComponentType inside of the data field if we need, but the library will do that for us and only execute our handler if its a select menu. The values that the user has selected will be inside of the Values collection in the Data field. we can list all of them back to the user for this example. public async Task MyMenuHandler(SocketMessageComponent arg) { var text = string.Join(\", \", arg.Data.Values); await arg.RespondAsync($\"You have selected {text}\"); } Running this produces this result:"
  },
  "guides/int_basics/message-components/text-input.html": {
    "href": "guides/int_basics/message-components/text-input.html",
    "title": "Text Input Components | Discord.Net Documentation",
    "keywords": "Text Input Components Warning Text input components can only be used in modals. Text input components are a type of MessageComponents that can only be used in modals. Texts inputs can be longer (the Paragraph) style or shorter (the Short style). Text inputs have a variable min and max length. Creating text inputs Text input components can be built using the TextInputBuilder. The simplest text input can built with: var tb = new TextInputBuilder() .WithLabel(\"My Text\") .WithCustomId(\"text_input\"); and would produce a component that looks like: Additional options can be specified to control the placeholder, style, and min/max length of the input: var tb = new TextInputBuilder() .WithLabel(\"Labeled\") .WithCustomId(\"text_input\") .WithStyle(TextInputStyle.Paragraph) .WithMinLength(6) .WithMaxLength(42) .WithRequired(true) .WithPlaceholder(\"Consider this place held.\");"
  },
  "guides/int_basics/modals/intro.html": {
    "href": "guides/int_basics/modals/intro.html",
    "title": "Getting Started with Modals | Discord.Net Documentation",
    "keywords": "Modals Getting started with modals This guide will show you how to use modals and give a few examples of valid use cases. If your question is not covered by this guide ask in the Discord.Net Discord Server. What is a modal? Modals are forms bots can send when responding to interactions. Modals are sent to Discord as an array of message components and converted into the form layout by user's clients. Modals are required to have a custom id, title, and at least one component. When users submit modals, your client fires the ModalSubmitted event. You can get the components of the modal from the Data.Components property on the SocketModal: Using modals Lets create a simple modal with an entry field for users to tell us their favorite food. We can start by creating a slash command that will respond with the modal. [SlashCommand(\"food\", \"Tell us about your favorite food!\")] public async Task FoodPreference() { // send a modal } Now that we have our command set up, we need to build a modal. We can use the aptly named ModalBuilder for that: Method Description WithTitle Sets the modal's title. WithCustomId Sets the modal's custom id. AddTextInput Adds a TextInputBuilder to the modal. AddComponents Adds multiple components to the modal. Build Builds the ModalBuilder into a Modal. We know we need to add a text input to the modal, so let's look at that method's parameters. Parameter Description label Sets the input's label. customId Sets the input's custom id. style Sets the input's style. placeholder Sets the input's placeholder. minLength Sets the minimum input length. maxLength Sets the maximum input length. required Sets whether or not the modal is required. value Sets the input's default value. To make a basic text input we would only need to set the label and customId, but in this example we will also use the placeholder parameter. Next we can build our modal: var mb = new ModalBuilder() .WithTitle(\"Fav Food\") .WithCustomId(\"food_menu\") .AddTextInput(\"What??\", \"food_name\", placeholder:\"Pizza\") .AddTextInput(\"Why??\", \"food_reason\", TextInputStyle.Paragraph, \"Kus it's so tasty\"); Now that we have a ModalBuilder we can update our command to respond with the modal. [SlashCommand(\"food\", \"Tell us about your favorite food!\")] public async Task FoodPreference() { var mb = new ModalBuilder() .WithTitle(\"Fav Food\") .WithCustomId(\"food_menu\") .AddTextInput(\"What??\", \"food_name\", placeholder:\"Pizza\") .AddTextInput(\"Why??\", \"food_reason\", TextInputStyle.Paragraph, \"Kus it's so tasty\"); await Context.Interaction.RespondWithModalAsync(mb.Build()); } When we run the command, our modal should pop up: Respond to modals Warning Modals can not be sent when responding to a modal. Once a user has submitted the modal, we need to let everyone know what their favorite food is. We can start by hooking a task to the client's ModalSubmitted event. _client.ModalSubmitted += async modal => { // Get the values of components. List<SocketMessageComponentData> components = modal.Data.Components.ToList(); string food = components .First(x => x.CustomId == \"food_name\").Value; string reason = components .First(x => x.CustomId == \"food_reason\").Value; // Build the message to send. string message = \"hey @everyone; I just learned \" + $\"{modal.User.Mention}'s favorite food is \" + $\"{food} because {reason}.\"; // Specify the AllowedMentions so we don't actually ping everyone. AllowedMentions mentions = new AllowedMentions(); mentions.AllowedTypes = AllowedMentionTypes.Users; // Respond to the modal. await modal.RespondAsync(message, allowedMentions:mentions); } Now responding to the modal should inform everyone of our tasty choices."
  },
  "guides/int_framework/autocompletion.html": {
    "href": "guides/int_framework/autocompletion.html",
    "title": "Command Autocompletion | Discord.Net Documentation",
    "keywords": "AutocompleteHandlers [Autocompleters] provide a similar pattern to TypeConverters. [Autocompleters] are cached, singleton services and they are used by the Interaction Service to handle Autocomplete Interactions targeted to a specific Slash Command parameter. To start using AutocompleteHandlers, use the [AutocompleteAttribute(Type type)] overload of the [AutocompleteAttribute]. This will dynamically link the parameter to the AutocompleteHandler type. AutocompleteHandlers raise the AutocompleteHandlerExecuted event on execution. This event can be also used to create a post-execution logic, just like the *CommandExecuted events. Creating AutocompleteHandlers A valid AutocompleteHandlers must inherit AutocompleteHandler base type and implement all of its abstract methods. // you need to add `Autocomplete` attribute before parameter to add autocompletion to it [SlashCommand(\"command_name\", \"command_description\")] public async Task ExampleCommand([Summary(\"parameter_name\"), Autocomplete(typeof(ExampleAutocompleteHandler))] string parameterWithAutocompletion) => await RespondAsync($\"Your choice: {parameterWithAutocompletion}\"); public class ExampleAutocompleteHandler : AutocompleteHandler { public override async Task<AutocompletionResult> GenerateSuggestionsAsync(IInteractionContext context, IAutocompleteInteraction autocompleteInteraction, IParameterInfo parameter, IServiceProvider services) { // Create a collection with suggestions for autocomplete IEnumerable<AutocompleteResult> results = new[] { new AutocompleteResult(\"Name1\", \"value111\"), new AutocompleteResult(\"Name2\", \"value2\") }; // max - 25 suggestions at a time (API limit) return AutocompletionResult.FromSuccess(results.Take(25)); } } GenerateSuggestionsAsync() The Interactions Service uses this method to generate a response of an Autocomplete Interaction. This method should return AutocompletionResult.FromSuccess(IEnumerable<AutocompleteResult>) to display parameter suggestions to the user. If there are no suggestions to be presented to the user, you have two results: Returning the parameterless AutocompletionResult.FromSuccess() will display a \"No options match your search.\" message to the user. Returning AutocompleteResult.FromError() will make the Interaction Service not respond to the interaction, consequently displaying the user a \"Loading options failed.\" message. AutocompletionResult.FromError() is solely used for error handling purposes. Discord currently doesn't allow you to display custom error messages. This result type will be directly returned to the AutocompleteHandlerExecuted method. Resolving AutocompleteHandler Dependencies AutocompleteHandler dependencies are resolved using the same dependency injection pattern as the Interaction Modules. Property injection and constructor injection are both valid ways to get service dependencies. Because [AutocompleterHandlers] are constructed at service startup, class dependencies are resolved only once. Note If you need to access per-request dependencies you can use the IServiceProvider parameter of the GenerateSuggestionsAsync() method. [AutoCompleteAttribute]:"
  },
  "guides/int_framework/intro.html": {
    "href": "guides/int_framework/intro.html",
    "title": "Introduction to the Interaction Service | Discord.Net Documentation",
    "keywords": "Getting Started The Interaction Service provides an attribute based framework for creating Discord Interaction handlers. To start using the Interaction Service, you need to create a service instance. Optionally you can provide the InteractionService constructor with a InteractionServiceConfig to change the services behaviour to suit your needs. ... // _client here is DiscordSocketClient. // A different approach to passing in a restclient is also possible. var _interactionService = new InteractionService(_client.Rest); ... Modules Attribute based Interaction handlers must be defined within a command module class. Command modules are responsible for executing the Interaction handlers and providing them with the necessary execution info and helper functions. Command modules are transient objects. A new module instance is created before a command execution starts then it will be disposed right after the method returns. Every module class must: be public inherit InteractionModuleBase Optionally you can override the included : OnModuleBuilding (executed after the module is built) BeforeExecute (executed before a command execution starts) AfterExecute (executed after a command execution concludes) methods to configure the modules behaviour. Every command module exposes a set of helper methods, namely: RespondAsync() => Respond to the interaction FollowupAsync() => Create a followup message for an interaction ReplyAsync() => Send a message to the origin channel of the interaction DeleteOriginalResponseAsync() => Delete the original interaction response Commands Valid Interaction Commands must comply with the following requirements: return type max parameter count allowed parameter types attribute Slash Command Task/Task<RuntimeResult> 25 any* [SlashCommand] User Command Task/Task<RuntimeResult> 1 Implementations of IUser [UserCommand] Message Command Task/Task<RuntimeResult> 1 Implementations of IMessage [MessageCommand] Component Interaction Command Task/Task<RuntimeResult> inf string or string[] [ComponentInteraction] Autocomplete Command Task/Task<RuntimeResult> - - [AutocompleteCommand] Note a TypeConverter that is capable of parsing type in question must be registered to the InteractionService instance. You should avoid using long running code in your command module. Depending on your setup, long running code may block the Gateway thread of your bot, interrupting its connection to Discord. Slash Commands Slash Commands are created using the SlashCommandAttribute. Every Slash Command must declare a name and a description. You can check Discords Application Command Naming Guidelines here. [SlashCommand(\"echo\", \"Echo an input\")] public async Task Echo(string input) { await RespondAsync(input); } Parameters Slash Commands can have up to 25 method parameters. You must name your parameters in accordance with Discords Naming Guidelines. InteractionService also features a pascal casing seperator for formatting parameter names with pascal casing into Discord compliant parameter names('parameterName' => 'parameter-name'). By default, your methods can feature the following parameter types: Implementations of IUser Implementations of IChannel Implementations of IRole Implementations of IMentionable Implementations of [IAttachment] string float, double, decimal bool char sbyte, byte int16, int32, int64 uint16, uint32, uint64 enum (Values are registered as multiple choice options and are enforced by Discord. Use the [Hide] attribute on enum values to prevent them from getting registered.) DateTime TimeSpan *You can use more specialized implementations of IChannel to restrict the allowed channel types for a channel type option. | interface | Channel Type | |---------------------|-------------------------------| | IStageChannel | Stage Channels | | IVoiceChannel | Voice Channels | | IDMChannel | DM Channels | | IGroupChannel | Group Channels | | ICategoryChannel | Category Channels | | INewsChannel | News Channels | | IThreadChannel | Public, Private, News Threads | | ITextChannel | Text Channels | Optional Parameters Parameters with default values (ie. int count = 0) will be displayed as optional parameters on Discord Client. Parameter Summary By using the SummaryAttribute you can customize the displayed name and description of a parameter [Summary(description: \"this is a parameter description\")] string input Parameter Choices ChoiceAttribute can be used to add choices to a parameter. [SlashCommand(\"blep\", \"Send a random adorable animal photo\")] public async Task Blep([Choice(\"Dog\", \"dog\"), Choice(\"Cat\", \"cat\"), Choice(\"Guinea pig\", \"GuineaPig\")] string animal) { ... } // In most cases, you can use an enum to replace the separate choice attributes in a command. public enum Animal { Cat, Dog, // You can also use the ChoiceDisplay attribute to change how they appear in the choice menu. [ChoiceDisplay(\"Guinea pig\")] GuineaPig } [SlashCommand(\"blep\", \"Send a random adorable animal photo\")] public async Task Blep(Animal animal) { ... } ``` This Slash Command will be displayed exactly the same as the previous example. Channel Types Channel types for an IChannel parameter can also be restricted using the ChannelTypesAttribute. [SlashCommand(\"name\", \"Description\")] public async Task Command([ChannelTypes(ChannelType.Stage, ChannelType.Text)] IChannel channel) { ... } In this case, user can only input Stage Channels and Text Channels to this parameter. Min/Max Value You can specify the permitted max/min value for a number type parameter using the MaxValueAttribute and MinValueAttribute. Complex Parameters This allows users to create slash command options using an object's constructor allowing complex objects to be created which cannot be infered from only one input value. Constructor methods support every attribute type that can be used with the regular slash commands ([Autocomplete], [Summary] etc. ). Preferred constructor of a Type can be specified either by passing a Type[] to the [ComplexParameterAttribute] or tagging a type constructor with the [ComplexParameterCtorAttribute]. If nothing is specified, the InteractionService defaults to the only public constructor of the type. TypeConverter pattern is used to parse the constructor methods objects. public class Vector3 { public int X {get;} public int Y {get;} public int Z {get;} public Vector3() { X = 0; Y = 0; Z = 0; } [ComplexParameterCtor] public Vector3(int x, int y, int z) { X = x; Y = y; Z = z; } } // Both of the commands below are displayed to the users identically. // With complex parameter [SlashCommand(\"create-vector\", \"Create a 3D vector.\")] public async Task CreateVector([ComplexParameter]Vector3 vector3) { ... } // Without complex parameter [SlashCommand(\"create-vector\", \"Create a 3D vector.\")] public async Task CreateVector(int x, int y, int z) { ... } Interaction service complex parameter constructors are prioritized in the following order: Constructor matching the signature provided in the [ComplexParameter(Type[])] overload. Constuctor tagged with [ComplexParameterCtor]. Type's only public constuctor. DM Permissions You can use the [EnabledInDmAttribute] to configure whether a globally-scoped top level command should be enabled in Dms or not. Only works on top level commands. Default Member Permissions [DefaultMemberPermissionsAttribute] can be used when creating a command to set the permissions a user must have to use the command. Permission overwrites can be configured from the Integrations page of Guild Settings. [DefaultMemberPermissionsAttribute] cumulatively propagates down the class hierarchy until it reaches a top level command. This attribute can be only used on top level commands and will not work on commands that are nested in command groups. User Commands A valid User Command must have the following structure: [UserCommand(\"Say Hello\")] public async Task SayHello(IUser user) { ... } Warning User commands can only have one parameter and its type must be an implementation of IUser. Message Commands A valid Message Command must have the following structure: [MessageCommand(\"Bookmark\")] public async Task Bookmark(IMessage msg) { ... } Warning Message commands can only have one parameter and its type must be an implementation of IMessage. Component Interaction Commands Component Interaction Commands are used to handle interactions that originate from Discord Message Components. This pattern is particularly useful if you will be reusing a set a Custom IDs. Component Interaction Commands support wild card matching, by default * character can be used to create a wild card pattern. Interaction Service will use lazy matching to capture the words corresponding to the wild card character. And the captured words will be passed on to the command method in the same order they were captured. [ComponentInteraction(\"player:*,*\")] public async Task Play(string op, string name) { ... } You may use as many wild card characters as you want. Note If Interaction Service receives a component interaction with player:play,rickroll custom id, op will be play and name will be rickroll Select Menus Unlike button interactions, select menu interactions also contain the values of the selected menu items. In this case, you should structure your method to accept a string array. Note Use arrays of IUser, IChannel, IRole, IMentionable or their implementations to get data from a select menu with respective type. [ComponentInteraction(\"role_selection\")] public async Task RoleSelection(string[] selectedRoles) { ... } [ComponentInteraction(\"role_selection_*\")] public async Task RoleSelection(string id, string[] selectedRoles) { ... } Note Wildcards may also be used to match a select menu ID, though keep in mind that the array containing the select menu values should be the last parameter. Autocomplete Commands Autocomplete commands must be parameterless methods. A valid Autocomplete command must have the following structure: [AutocompleteCommand(\"parameter_name\", \"command_name\")] public async Task Autocomplete() { string userInput = (Context.Interaction as SocketAutocompleteInteraction).Data.Current.Value.ToString(); IEnumerable<AutocompleteResult> results = new[] { new AutocompleteResult(\"foo\", \"foo_value\"), new AutocompleteResult(\"bar\", \"bar_value\"), new AutocompleteResult(\"baz\", \"baz_value\"), }.Where(x => x.Name.StartsWith(userInput, StringComparison.InvariantCultureIgnoreCase)); // only send suggestions that starts with user's input; use case insensitive matching // max - 25 suggestions at a time await (Context.Interaction as SocketAutocompleteInteraction).RespondAsync(results.Take(25)); } // you need to add `Autocomplete` attribute before parameter to add autocompletion to it [SlashCommand(\"command_name\", \"command_description\")] public async Task ExampleCommand([Summary(\"parameter_name\"), Autocomplete] string parameterWithAutocompletion) => await RespondAsync($\"Your choice: {parameterWithAutocompletion}\"); Alternatively, you can use the AutocompleteHandlers to simplify this workflow. Modals Modal commands last parameter must be an implementation of IModal. A Modal implementation would look like this: // Registers a command that will respond with a modal. [SlashCommand(\"food\", \"Tell us about your favorite food.\")] public async Task Command() => await Context.Interaction.RespondWithModalAsync<FoodModal>(\"food_menu\"); // Defines the modal that will be sent. public class FoodModal : IModal { public string Title => \"Fav Food\"; // Strings with the ModalTextInput attribute will automatically become components. [InputLabel(\"What??\")] [ModalTextInput(\"food_name\", placeholder: \"Pizza\", maxLength: 20)] public string Food { get; set; } // Additional paremeters can be specified to further customize the input. // Parameters can be optional [RequiredInput(false)] [InputLabel(\"Why??\")] [ModalTextInput(\"food_reason\", TextInputStyle.Paragraph, \"Kuz it's tasty\", maxLength: 500)] public string Reason { get; set; } } // Responds to the modal. [ModalInteraction(\"food_menu\")] public async Task ModalResponse(FoodModal modal) { // Check if \"Why??\" field is populated string reason = string.IsNullOrWhiteSpace(modal.Reason) ? \".\" : $\" because {modal.Reason}\"; // Build the message to send. string message = \"hey @everyone, I just learned \" + $\"{Context.User.Mention}'s favorite food is \" + $\"{modal.Food}{reason}\"; // Specify the AllowedMentions so we don't actually ping everyone. AllowedMentions mentions = new(); mentions.AllowedTypes = AllowedMentionTypes.Users; // Respond to the modal. await RespondAsync(message, allowedMentions: mentions, ephemeral: true); } Note If you are using Modals in the interaction service it is highly recommended that you enable PreCompiledLambdas in your config to prevent performance issues. Interaction Context Every command module provides its commands with an execution context. This context property includes general information about the underlying interaction that triggered the command execution. The base command context. You can design your modules to work with different implementation types of [IInteractionContext]. To achieve this, make sure your module classes inherit from the generic variant of the InteractionModuleBase. Note Context type must be consistent throughout the project, or you will run into issues during runtime. The InteractionService ships with 4 different kinds of InteractionContext: InteractionContext]: A bare-bones execution context consisting of only implementation neutral interfaces SocketInteractionContext: An execution context for use with DiscordSocketClient. Socket entities are exposed in this context without the need of casting them. ShardedInteractionContext: [DiscordShardedClient] variant of the SocketInteractionContext RestInteractionContext: An execution context designed to be used with a DiscordRestClient and webhook based interactions pattern You can create custom Interaction Contexts by implementing the [IInteractionContext] interface. One problem with using the concrete type InteractionContexts is that you cannot access the information that is specific to different interaction types without casting. Concrete type interaction contexts are great for creating shared interaction modules but you can also use the generic variants of the built-in interaction contexts to create interaction specific interaction modules. [!INFO] Message component interactions have access to a special method called UpdateAsync() to update the body of the method the interaction originated from. Normally this wouldn't be accessible without casting the Context.Interaction. discordClient.ButtonExecuted += async (interaction) => { var ctx = new SocketInteractionContext<SocketMessageComponent>(discordClient, interaction); await _interactionService.ExecuteCommandAsync(ctx, serviceProvider); }; public class MessageComponentModule : InteractionModuleBase<SocketInteractionContext<SocketMessageComponent>> { [ComponentInteraction(\"custom_id\")] public async Task Command() { await Context.Interaction.UpdateAsync(...); } } Loading Modules InteractionService can automatically discover and load modules that inherit InteractionModuleBase from an Assembly. Call InteractionService.AddModulesAsync() to use this functionality. Note You can also manually add Interaction modules using the InteractionService.AddModuleAsync() method by providing the module type you want to load. Resolving Module Dependencies Module dependencies are resolved using the Constructor Injection and Property Injection patterns. Meaning, the constructor parameters and public settable properties of a module will be assigned using the IServiceProvider. For more information on dependency injection, read the DependencyInjection guides. Note On every command execution, if the 'AutoServiceScopes' option is enabled in the config , module dependencies are resolved using a new service scope which allows you to utilize scoped service instances, just like in Asp.Net. Including the precondition checks, every module method is executed using the same service scope and service scopes are disposed right after the AfterExecute method returns. This doesn't apply to methods other than ExecuteAsync(). Module Groups Module groups allow you to create sub-commands and sub-commands groups. By nesting commands inside a module that is tagged with GroupAttribute you can create prefixed commands. Warning Although creating nested module structures are allowed, you are not permitted to use more than 2 GroupAttribute's in module hierarchy. Note To not use the command group's name as a prefix for component or modal interaction's custom id set ignoreGroupNames parameter to true in classes with GroupAttribute However, you have to be careful to prevent overlapping ids of buttons and modals. // You can put commands in groups [Group(\"group-name\", \"Group description\")] public class CommandGroupModule : InteractionModuleBase<SocketInteractionContext> { // This command will look like // group-name ping [SlashCommand(\"ping\", \"Get a pong\")] public async Task PongSubcommand() => await RespondAsync(\"Pong!\"); // And even in sub-command groups [Group(\"subcommand-group-name\", \"Subcommand group description\")] public class SubСommandGroupModule : InteractionModuleBase<SocketInteractionContext> { // This command will look like // group-name subcommand-group-name echo [SlashCommand(\"echo\", \"Echo an input\")] public async Task EchoSubcommand(string input) => await RespondAsync(input, components: new ComponentBuilder().WithButton(\"Echo\", $\"echoButton_{input}\").Build()); // Component interaction with ignoreGroupNames set to true [ComponentInteraction(\"echoButton_*\", true)] public async Task EchoButton(string input) => await RespondAsync(input); } } Executing Commands Any of the following socket events can be used to execute commands: InteractionCreated ButtonExecuted SelectMenuExecuted AutocompleteExecuted UserCommandExecuted MessageCommandExecuted ModalExecuted These events will trigger for the specific type of interaction they inherit their name from. The InteractionCreated event will trigger for all. An example of executing a command from an event can be seen here: // Theres multiple ways to subscribe to the event, depending on your application. Please use the approach fit to your type of client. // DiscordSocketClient: _socketClient.InteractionCreated += async (x) => { var ctx = new SocketInteractionContext(_socketClient, x); await _interactionService.ExecuteCommandAsync(ctx, _serviceProvider); } // DiscordShardedClient: _shardedClient.InteractionCreated += async (x) => { var ctx = new ShardedInteractionContext(_shardedClient, x); await _interactionService.ExecuteCommandAsync(ctx, _serviceProvider); } Commands can be either executed on the gateway thread or on a separate thread from the thread pool. This behaviour can be configured by changing the RunMode property of InteractionServiceConfig or by setting the runMode parameter of a command attribute. Warning In the example above, no form of post-execution is presented. Please carefully read the [Post Execution Documentation] for the best approach in resolving the result based on your RunMode. You can also configure the way InteractionService executes the commands. By default, commands are executed using ConstructorInfo.Invoke() to create module instances and MethodInfo.Invoke() method for executing the method bodies. By setting, InteractionServiceConfig.UseCompiledLambda to true, you can make InteractionService create module instances and execute commands using Compiled Lambda expressions. This cuts down on command execution time but it might add some memory overhead. Time it takes to create a module instance and execute a Task.Delay(0) method using the Reflection methods compared to Compiled Lambda expressions: Method Mean Error StdDev ReflectionInvoke 225.93 ns 4.522 ns 7.040 ns CompiledLambda 48.79 ns 0.981 ns 1.276 ns Registering Commands to Discord Application commands loaded to the Interaction Service can be registered to Discord using a number of different methods. In most cases RegisterCommandsGloballyAsync() and RegisterCommandsToGuildAsync() are the methods to use. Command registration methods can only be used after the gateway client is ready or the rest client is logged in. #if DEBUG await interactionService.RegisterCommandsToGuildAsync(<test_guild_id>); #else await interactionService.RegisterCommandsGloballyAsync(); #endif Methods like AddModulesToGuildAsync(), AddCommandsToGuildAsync(), AddModulesGloballyAsync() and AddCommandsGloballyAsync() can be used to register cherry picked modules or commands to global/guild scopes. Note DontAutoRegisterAttribute can be used on module classes to prevent RegisterCommandsGloballyAsync() and RegisterCommandsToGuildAsync() from registering them to the Discord. Note In debug environment, since Global commands can take up to 1 hour to register/update, it is advised to register your commands to a test guild for your changes to take effect immediately. You can use preprocessor directives to create a simple logic for registering commands as seen above. Interaction Utility Interaction Service ships with a static InteractionUtility class which contains some helper methods to asynchronously waiting for Discord Interactions. For instance, WaitForInteractionAsync() method allows you to wait for an Interaction for a given amount of time. This method returns the first encountered Interaction that satisfies the provided predicate. Warning If you are running the Interaction Service on RunMode.Sync you should avoid using this method in your commands, as it will block the gateway thread and interrupt your bots connection. Webhook Based Interactions Instead of using the gateway to receive Discord Interactions, Discord allows you to receive Interaction events over Webhooks. Interaction Service also supports this Interaction type but to be able to respond to the Interactions within your command modules you need to perform the following: Make your modules inherit RestInteractionModuleBase Set the ResponseCallback property of InteractionServiceConfig so that the ResponseCallback delegate can be used to create HTTP responses from a deserialized json object string. Use the interaction endpoints of the module base instead of the interaction object (ie. RespondAsync(), FollowupAsync()...). Localization Discord Slash Commands support name/description localization. Localization is available for names and descriptions of Slash Command Groups (GroupAttribute), Slash Commands (SlashCommandAttribute), Slash Command parameters and Slash Command Parameter Choices. Interaction Service can be initialized with an ILocalizationManager instance in its config which is used to create the necessary localization dictionaries on command registration. Interaction Service has two built-in ILocalizationManager implementations: ResxLocalizationManager and JsonLocalizationManager. ResXLocalizationManager ResxLocalizationManager uses . delimited key names to traverse the resource files and get the localized strings (group1.group2.command.parameter.name). A ResxLocalizationManager instance must be initialized with a base resource name, a target assembly and a collection of CultureInfos. Every key path must end with either .name or .description, including parameter choice strings. Discord.Tools.LocalizationTemplate.Resx dotnet tool can be used to create localization file templates. JsonLocalizationManager JsonLocalizationManager uses a nested data structure similar to Discord's Application Commands schema. You can get the Json schema here. JsonLocalizationManager accepts a base path and a base file name and automatically discovers every resource file ( \\basePath\\fileName.locale.json ). A Json resource file should have a structure similar to: { \"command_1\":{ \"name\": \"localized_name\", \"description\": \"localized_description\", \"parameter_1\":{ \"name\": \"localized_name\", \"description\": \"localized_description\" } }, \"group_1\":{ \"name\": \"localized_name\", \"description\": \"localized_description\", \"command_1\":{ \"name\": \"localized_name\", \"description\": \"localized_description\", \"parameter_1\":{ \"name\": \"localized_name\", \"description\": \"localized_description\" }, \"parameter_2\":{ \"name\": \"localized_name\", \"description\": \"localized_description\" } } } }"
  },
  "guides/int_framework/permissions.html": {
    "href": "guides/int_framework/permissions.html",
    "title": "How to handle permissions. | Discord.Net Documentation",
    "keywords": "Permissions This page covers everything to know about setting up permissions for Slash & context commands. Application command (Slash, User & Message) permissions are set up at creation. When you add your commands to a guild or globally, the permissions will be set up from the attributes you defined. Commands that are added will only show up for members that meet the required permissions. There is no further internal handling, as Discord deals with this on its own. Warning Permissions can only be configured at top level commands. Not in subcommands. Disallowing commands in DM Commands can be blocked from being executed in DM if a guild is required to execute them in as followed: [EnabledInDm(false)] [SlashCommand(\"ban\", \"Bans a user in this guild\")] public async Task BanAsync(...) { ... } Tip This attribute only works on global-level commands. Commands that are registered in guilds alone do not have a need for it. Server permissions As previously shown, a command like ban can be blocked from being executed inside DMs, as there are no members to ban inside of a DM. However, for a command like this, we'll also want to make block it from being used by members that do not have the permissions. To do this, we can use the DefaultMemberPermissions attribute: [EnabledInDm(false)] [DefaultMemberPermissions(GuildPermission.BanMembers)] [SlashCommand(\"ban\", \"Bans a user in this guild\")] public async Task BanAsync(...) { ... } Stacking permissions If you want a user to have multiple permissions in order to execute a command, you can use the | operator, just like with setting up intents: [DefaultMemberPermissions(GuildPermission.SendMessages | GuildPermission.ViewChannels)] [SlashCommand(\"ping\", \"Pong!\")] public async Task Ping() => await RespondAsync(\"pong\"); Nesting permissions Alternatively, permissions can also be nested. It will look for all uses of DefaultMemberPermissions up until the highest level class. The EnabledInDm attribute can be defined at top level as well, and will be set up for all of the commands & nested modules inside this class. [EnabledInDm(true)] [DefaultMemberPermissions(GuildPermission.ViewChannels)] public class Module : InteractionModuleBase<SocketInteractionContext> { [DefaultMemberPermissions(GuildPermission.SendMessages)] public class NestedModule : InteractionModuleBase<SocketInteractionContext> { // While looking for more permissions, it has found 'ViewChannels' and 'SendMessages'. The result of this lookup will be: // ViewChannels + SendMessages + ManageMessages. // If these together are not found for target user, the command will not show up for them. [DefaultMemberPermissions(GuildPermission.ManageMessages)] [SlashCommand(\"ping\", \"Pong!\")] public async Task Ping() => await RespondAsync(\"pong\"); } } The amount of nesting you can do is realistically endless. Note If the nested class is marked with Group, as required for setting up subcommands, this example will not work. As mentioned before, subcommands cannot have seperate permissions from the top level command. NSFW Commands Commands can be limited to only age restricted channels and DMs: [NsfwCommand(true)] [SlashCommand(\"beautiful-code\", \"Get an image of perfect code\")] public async Task BeautifulCodeAsync(...) { ... }"
  },
  "guides/int_framework/post-execution.html": {
    "href": "guides/int_framework/post-execution.html",
    "title": "Post-Command execution | Discord.Net Documentation",
    "keywords": "Post-Execution Logic Interaction Service uses IResult to provide information about the state of command execution. These can be used to log internal exceptions or provide some insight to the command user. If you are running your commands using RunMode.Sync these command results can be retrieved from the return value of InteractionService.ExecuteCommandAsync method or by registering delegates to Interaction Service events. If you are using the RunMode.Async to run your commands, you must use the Interaction Service events to get the execution results. When using RunMode.Async, InteractionService.ExecuteCommandAsync will always return a successful result. Results Interaction Result come in a handful of different flavours: AutocompletionResult: returned by Autocompleters ExecuteResult: contains the result of method body execution process PreconditionGroupResult: returned by Precondition groups PreconditionResult: returned by preconditions RuntimeResult: a user implementable result for returning user defined results SearchResult: returned by command lookup map TypeConverterResult: returned by TypeConverters Note You can either use the IResult.Error property of an Interaction result or create type check for the aforementioned result types to branch out your post-execution logic to handle different situations. CommandExecuted Events Every time a command gets executed, Interaction Service raises a CommandExecuted event. These events can be used to create a post-execution pipeline. interactionService.SlashCommandExecuted += SlashCommandExecuted; async Task SlashCommandExecuted(SlashCommandInfo arg1, Discord.IInteractionContext arg2, IResult arg3) { if (!arg3.IsSuccess) { switch (arg3.Error) { case InteractionCommandError.UnmetPrecondition: await arg2.Interaction.RespondAsync($\"Unmet Precondition: {arg3.ErrorReason}\"); break; case InteractionCommandError.UnknownCommand: await arg2.Interaction.RespondAsync(\"Unknown command\"); break; case InteractionCommandError.BadArgs: await arg2.Interaction.RespondAsync(\"Invalid number or arguments\"); break; case InteractionCommandError.Exception: await arg2.Interaction.RespondAsync($\"Command exception: {arg3.ErrorReason}\"); break; case InteractionCommandError.Unsuccessful: await arg2.Interaction.RespondAsync(\"Command could not be executed\"); break; default: break; } } } Log Event InteractionService regularly outputs information about the occuring events to keep the developer informed. Runtime Result Interaction commands allow you to return Task<RuntimeResult> to pass on additional information about the command execution process back to your post-execution logic. Custom RuntimeResult classes can be created by inheriting the base RuntimeResult class. If command execution process reaches the method body of the command and no exceptions are thrown during the execution of the method body, RuntimeResult returned by your command will be accessible by casting/type-checking the IResult parameter of the CommandExecuted event delegate."
  },
  "guides/int_framework/preconditions.html": {
    "href": "guides/int_framework/preconditions.html",
    "title": "Preconditions | Discord.Net Documentation",
    "keywords": "Preconditions Precondition logic is the same as it is for Text-based commands. A list of attributes and usage is still given for people who are new to both. There are two types of Preconditions you can use: PreconditionAttribute can be applied to Modules, Groups, or Commands. ParameterPreconditionAttribute can be applied to Parameters. You may visit their respective API documentation to find out more. Bundled Preconditions Discord.Interactions ships with several bundled Preconditions for you to use. RequireContextAttribute RequireOwnerAttribute RequireBotPermissionAttribute RequireUserPermissionAttribute RequireNsfwAttribute RequireRoleAttribute Using Preconditions To use a precondition, simply apply any valid precondition candidate to a command method signature as an attribute. [RequireOwner] [SlashCommand(\"hi\")] public Task SayHiAsync() => RespondAsync(\"hello owner!\"); ORing Preconditions When writing commands, you may want to allow some of them to be executed when only some of the precondition checks are passed. This is where the Group property of a precondition attribute comes in handy. By assigning two or more preconditions to a group, the command system will allow the command to be executed when one of the precondition passes. Example - ORing Preconditions // The following example only requires the user to either have the // Administrator permission in this guild or own the bot application. [RequireUserPermission(GuildPermission.Administrator, Group = \"Permission\")] [RequireOwner(Group = \"Permission\")] public class AdminModule : ModuleBase<SocketCommandContext> { [Command(\"ban\")] public Task BanAsync(IUser user) => Context.Guild.AddBanAsync(user); } Custom Preconditions To write your own Precondition, create a new class that inherits from either PreconditionAttribute or ParameterPreconditionAttribute depending on your use. In order for your Precondition to function, you will need to override the CheckPermissionsAsync method. If the context meets the required parameters, return PreconditionResult.FromSuccess, otherwise return PreconditionResult.FromError and include an error message if necessary. Note Visual Studio can help you implement missing members from the abstract class by using the \"Implement Abstract Class\" IntelliSense hint."
  },
  "guides/int_framework/typeconverters.html": {
    "href": "guides/int_framework/typeconverters.html",
    "title": "Parameter Type Converters | Discord.Net Documentation",
    "keywords": "TypeConverters [TypeConverters] are responsible for registering command parameters to Discord and parsing the user inputs into method parameters. By default, TypeConverters for the following types are provided with Discord.Interactions library. Implementations of IUser Implementations of IChannel Implementations of IRole Implementations of IMentionable string float, double, decimal bool char sbyte, byte int16, int32, int64 uint16, uint32, uint64 enum DateTime TimeSpan Creating TypeConverters Depending on your needs, there are two types of TypeConverters you can create: Concrete type Generic type A valid converter must inherit TypeConverter base type. And override the abstract base methods. CanConvertTo() Method This method is used by Interaction Service to search for alternative Type Converters. Interaction Services determines the most suitable TypeConverter for a parameter type in the following order: It searches for a TypeConverter that is registered to specifically target that parameter type It searches for a TypeConverter that returns true when its CanConvertTo() method is invoked for thaty parameter type. It searches for a generic TypeConverter<T> with a matching type constraint. If there are more multiple matches, the one whose type constraint is the most specialized will be chosen. [!NOTE} Alternatively, you can use the generic variant (TypeConverter<T>) of the TypeConverter base class which implements the following method body for CanConvertTo() method public sealed override bool CanConvertTo (Type type) => typeof(T).IsAssignableFrom(type); GetDiscordType() Method This method is used by InteractionService to determine the Discord Application Command Option type of a parameter type. ReadAsync() Method This method is used by InteractionService to parse the user input. This method should return FromSuccess if the parsing operation is successful, otherwise it should return FromError . The inner logic of this method is totally up to you, however you should avoid using long running code. Write() Method This method is used to configure the Discord Application Command Option before it gets registered to Discord. Command Option is configured by modifying the ApplicationCommandOptionProperties instance. Warning The default parameter building pipeline is isolated and will not be disturbed by the TypeConverter workflow. But changes made in this method will override the values generated by the InteractionService for a Discord Application Command Option. Example Enum TypeConverter internal sealed class EnumConverter<T> : TypeConverter<T> where T : struct, Enum { public override ApplicationCommandOptionType GetDiscordType() => ApplicationCommandOptionType.String; public override Task<TypeConverterResult> ReadAsync(IInteractionCommandContext context, SocketSlashCommandDataOption option, IServiceProvider services) { if (Enum.TryParse<T>((string)option.Value, out var result)) return Task.FromResult(TypeConverterResult.FromSuccess(result)); else return Task.FromResult(TypeConverterResult.FromError(InteractionCommandError.ConvertFailed, $\"Value {option.Value} cannot be converted to {nameof(T)}\")); } public override void Write(ApplicationCommandOptionProperties properties, IParameterInfo parameterInfo) { var names = Enum.GetNames(typeof(T)); if (names.Length <= 25) { var choices = new List<ApplicationCommandOptionChoiceProperties>(); foreach (var name in names) choices.Add(new ApplicationCommandOptionChoiceProperties { Name = name, Value = name }); properties.Choices = choices; } } } Important TypeConverters must be registered prior to module discovery. If Interaction Service encounters a parameter type that doesn't belong to any of the registered [TypeConverters] during this phase, it will throw an exception. Concrete TypeConverters Registering Concrete TypeConverters are as simple as creating an instance of your custom converter and invoking AddTypeConverter() method. interactionService.AddTypeConverter<string[]>(new StringArrayConverter()); Generic TypeConverters To register a generic TypeConverter<T>, you need to invoke the AddGenericTypeConverter() method of the Interaction Service class. You need to pass the type of your TypeConverter<T> and a target base type to this method. For instance, to register the previously mentioned enum converter the following can be used: interactionService.AddGenericTypeConverter<Enum>(typeof(EnumConverter<>)); Interaction service checks if the target base type satisfies the type constraints of the Generic TypeConverter class. Note Dependencies of Generic TypeConverters are also resolved using the Dependency Injection pattern."
  },
  "guides/introduction/intro.html": {
    "href": "guides/introduction/intro.html",
    "title": "Introduction to Discord.Net | Discord.Net Documentation",
    "keywords": "Introduction Looking to get started? Welcome! Before you dive into this library, however, you should have some decent understanding of the language you are about to use. This library touches on Task-based Asynchronous Pattern (TAP), polymorphism, interface and many more advanced topics extensively. Please make sure that you understand these topics to some extent before proceeding. With all that being said, feel free to visit us on Discord at the link below if you have any questions! An official collection of samples can be found in our GitHub repository. Note Please note that you should not try to blindly copy paste the code. The examples are meant to be a template or a guide. New to .NET/C#? All examples or snippets featured in this guide and all API documentation will be written in C#. If you are new to the language, using this wrapper may prove to be difficult, but don't worry! There are many resources online that can help you get started in the wonderful world of .NET. Here are some resources to get you started. C# Programming Guide (MSDN/Microsoft, Free) C# Fundamentals For Absolute Beginners (Channel9/Microsoft, Free) C# Path (Pluralsight, Paid) Still have questions? Please visit us at our Discord server. Describe the problem in details to us, what you've tried and what you need help with."
  },
  "guides/other_libs/efcore.html": {
    "href": "guides/other_libs/efcore.html",
    "title": "EFCore | Discord.Net Documentation",
    "keywords": "Entity Framework Core In this guide we will set up EFCore with a PostgreSQL database. Information on other databases will be at the bottom of this page. Prerequisites A simple bot with dependency injection configured A running PostgreSQL instance EFCore CLI tools Downloading the required packages You can install the following packages through your IDE or go to the nuget link to grab the dotnet cli command. Name Link Microsoft.EntityFrameworkCore link Npgsql.EntityFrameworkCore.PostgreSQL link Configuring the DbContext To use EFCore, you need a DbContext to access everything in your database. The DbContext will look like this. Here is an example entity to show you how you can add more entities yourself later on. // ApplicationDbContext.cs using Microsoft.EntityFrameworkCore; public class ApplicationDbContext : DbContext { public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) { } public DbSet<UserEntity> Users { get; set; } = null!; } // UserEntity.cs public class UserEntity { public ulong Id { get; set; } public string Name { get; set; } } Note To learn more about creating the EFCore model, visit the following link Adding the DbContext to your Dependency Injection container To add your newly created DbContext to your Dependency Injection container, simply use the extension method provided by EFCore to add the context to your container. It should look something like this private static ServiceProvider ConfigureServices() { return new ServiceCollection() .AddDbContext<ApplicationDbContext>( options => options.UseNpgsql(\"Your connection string\") ) [...] .BuildServiceProvider(); } Note You can find out how to get your connection string here Migrations Before you can start using your DbContext, you have to migrate the changes you've made in your code to your actual database. To learn more about migrations, visit the official Microsoft documentation here Using the DbContext You can now use the DbContext wherever you can inject it. Here's an example on injecting it into an interaction command module. using Discord; public class SampleModule : InteractionModuleBase<SocketInteractionContext> { private readonly ApplicationDbContext _db; public SampleModule(ApplicationDbContext db) { _db = db; } [SlashCommand(\"sample\", \"sample\")] public async Task Sample() { // Do stuff with your injected DbContext var user = _db.Users.FirstOrDefault(x => x.Id == Context.User.Id); ... } } Using a different database provider Here's a couple of popular database providers for EFCore and links to tutorials on how to set them up. The only thing that usually changes is the provider inside of your DbContextOptions Provider Link MySQL link SQLite link"
  },
  "guides/other_libs/mediatr.html": {
    "href": "guides/other_libs/mediatr.html",
    "title": "MediatR | Discord.Net Documentation",
    "keywords": "Configuring MediatR Prerequisites A simple bot with dependency injection configured Downloading the required packages You can install the following packages through your IDE or go to the NuGet link to grab the dotnet cli command. Name Link MediatR link MediatR.Extensions.Microsoft.DependencyInjection link Adding MediatR to your dependency injection container Adding MediatR to your dependency injection is made easy by the MediatR.Extensions.Microsoft.DependencyInjection package. You can use the following piece of code to configure it. The parameter of .AddMediatR() can be any type that is inside of the assembly you will have your event handlers in. .AddMediatR(typeof(Bot)) Creating notifications The way MediatR publishes events throughout your applications is through notifications and notification handlers. For this guide we will create a notification to handle the MessageReceived event on the DiscordSocketClient. // MessageReceivedNotification.cs using Discord.WebSocket; using MediatR; namespace MediatRSample.Notifications; public class MessageReceivedNotification : INotification { public MessageReceivedNotification(SocketMessage message) { Message = message ?? throw new ArgumentNullException(nameof(message)); } public SocketMessage Message { get; } } Creating the notification publisher / event listener For MediatR to actually publish the events we need a way to listen for them. We will create a class to listen for discord events like so: // DiscordEventListener.cs using Discord.WebSocket; using MediatR; using MediatRSample.Notifications; using Microsoft.Extensions.DependencyInjection; using System.Threading; using System.Threading.Tasks; namespace MediatRSample; public class DiscordEventListener { private readonly CancellationToken _cancellationToken; private readonly DiscordSocketClient _client; private readonly IServiceScopeFactory _serviceScope; public DiscordEventListener(DiscordSocketClient client, IServiceScopeFactory serviceScope) { _client = client; _serviceScope = serviceScope; _cancellationToken = new CancellationTokenSource().Token; } private IMediator Mediator { get { var scope = _serviceScope.CreateScope(); return scope.ServiceProvider.GetRequiredService<IMediator>(); } } public async Task StartAsync() { _client.MessageReceived += OnMessageReceivedAsync; await Task.CompletedTask; } private Task OnMessageReceivedAsync(SocketMessage arg) { return Mediator.Publish(new MessageReceivedNotification(arg), _cancellationToken); } } The code above does a couple of things. First it receives the DiscordSocketClient from the dependency injection container. It can then use this client to register events. In this guide we will be focusing on the MessageReceived event. You register the event like any ordinary event, but inside of the handler method we will use MediatR to publish our event to all of our notification handlers. Adding the event listener to your dependency injection container To start the listener we have to call the StartAsync() method on our DiscordEventListener class from inside of our main function. To do this, first register the DiscordEventListener class in your dependency injection container and get a reference to it in your main method. // Program.cs var listener = services.GetRequiredService<DiscordEventListener>(); await listener.StartAsync(); Creating your notification handler MediatR publishes notifications to all of your notification handlers that are listening for a specific notification. We will create a handler for our newly created MessageReceivedNotification like this: // MessageReceivedHandler.cs using System; using MediatR; using MediatRSample.Notifications; namespace MediatRSample; public class MessageReceivedHandler : INotificationHandler<MessageReceivedNotification> { public async Task Handle(MessageReceivedNotification notification, CancellationToken cancellationToken) { Console.WriteLine($\"MediatR works! (Received a message by {notification.Message.Author.Username})\"); // Your implementation } } The code above implements the INotificationHandler<> interface provided by MediatR, this tells MediatR to dispatch MessageReceivedNotification notifications to this handler class. Note You can create as many notification handlers for the same notification as you desire. That's the beauty of MediatR! Testing To test if we have successfully implemented MediatR, we can start up the bot and send a message to a server the bot is in. It should print out the message we defined earlier in our MessageReceivedHandler. Adding more event types To add more event types you can follow these steps: Create a new notification class for the event. it should contain all of the parameters that the event would send. (Ex: the MessageReceived event takes one SocketMessage as an argument. The notification class should also map this argument) Register the event in your DiscordEventListener class. Create a notification handler for your new notification."
  },
  "guides/other_libs/serilog.html": {
    "href": "guides/other_libs/serilog.html",
    "title": "Serilog | Discord.Net Documentation",
    "keywords": "Configuring serilog Prerequisites A basic working bot with a logging method as described in Creating your first bot Installing the Serilog package You can install the following packages through your IDE or go to the nuget link to grab the dotnet cli command. Name Link Serilog.Extensions.Logging link Serilog.Sinks.Console link Configuring Serilog Serilog will be configured at the top of your async Main method, it looks like this using Discord; using Serilog; using Serilog.Events; public class Program { static void Main(string[] args) => new Program().MainAsync().GetAwaiter().GetResult(); public async Task MainAsync() { Log.Logger = new LoggerConfiguration() .MinimumLevel.Verbose() .Enrich.FromLogContext() .WriteTo.Console() .CreateLogger(); _client = new DiscordSocketClient(); _client.Log += LogAsync; // You can assign your bot token to a string, and pass that in to connect. // This is, however, insecure, particularly if you plan to have your code hosted in a public repository. var token = \"token\"; // Some alternative options would be to keep your token in an Environment Variable or a standalone file. // var token = Environment.GetEnvironmentVariable(\"NameOfYourEnvironmentVariable\"); // var token = File.ReadAllText(\"token.txt\"); // var token = JsonConvert.DeserializeObject<AConfigurationClass>(File.ReadAllText(\"config.json\")).Token; await _client.LoginAsync(TokenType.Bot, token); await _client.StartAsync(); // Block this task until the program is closed. await Task.Delay(Timeout.Infinite); } } Modifying your logging method For Serilog to log Discord events correctly, we have to map the Discord LogSeverity to the Serilog LogEventLevel. You can modify your log method to look like this. private static async Task LogAsync(LogMessage message) { var severity = message.Severity switch { LogSeverity.Critical => LogEventLevel.Fatal, LogSeverity.Error => LogEventLevel.Error, LogSeverity.Warning => LogEventLevel.Warning, LogSeverity.Info => LogEventLevel.Information, LogSeverity.Verbose => LogEventLevel.Verbose, LogSeverity.Debug => LogEventLevel.Debug, _ => LogEventLevel.Information }; Log.Write(severity, message.Exception, \"[{Source}] {Message}\", message.Source, message.Message); await Task.CompletedTask; } Testing If you run your application now, you should see something similar to this Using your new logger in other places Now that you have set up Serilog, you can use it everywhere in your application by simply calling Log.Debug(\"Your log message, with {Variables}!\", 10); // This will output \"[21:51:00 DBG] Your log message, with 10!\" Note Depending on your configured log level, the log messages may or may not show up in your console. Refer to Serilog's github page for more information about log levels."
  },
  "guides/text_commands/intro.html": {
    "href": "guides/text_commands/intro.html",
    "title": "Introduction to the Chat Command Service | Discord.Net Documentation",
    "keywords": "The Text Command Service Discord.Commands provides an attribute-based command parser. Important The 'Message Content' intent, required for text commands, is now a privileged intent. Please use Slash commands instead for making commands. For more information about this change please check this announcement made by discord Get Started To use commands, you must create a Command Service and a command handler. Included below is a barebone command handler. You can extend your command handler as much as you like; however, the below is the bare minimum. Note The CommandService will optionally accept a CommandServiceConfig, which does set a few default values for you. It is recommended to look over the properties in CommandServiceConfig and their default values. public class CommandHandler { private readonly DiscordSocketClient _client; private readonly CommandService _commands; // Retrieve client and CommandService instance via ctor public CommandHandler(DiscordSocketClient client, CommandService commands) { _commands = commands; _client = client; } public async Task InstallCommandsAsync() { // Hook the MessageReceived event into our command handler _client.MessageReceived += HandleCommandAsync; // Here we discover all of the command modules in the entry // assembly and load them. Starting from Discord.NET 2.0, a // service provider is required to be passed into the // module registration method to inject the // required dependencies. // // If you do not use Dependency Injection, pass null. // See Dependency Injection guide for more information. await _commands.AddModulesAsync(assembly: Assembly.GetEntryAssembly(), services: null); } private async Task HandleCommandAsync(SocketMessage messageParam) { // Don't process the command if it was a system message var message = messageParam as SocketUserMessage; if (message == null) return; // Create a number to track where the prefix ends and the command begins int argPos = 0; // Determine if the message is a command based on the prefix and make sure no bots trigger commands if (!(message.HasCharPrefix('!', ref argPos) || message.HasMentionPrefix(_client.CurrentUser, ref argPos)) || message.Author.IsBot) return; // Create a WebSocket-based command context based on the message var context = new SocketCommandContext(_client, message); // Execute the command with the command context we just // created, along with the service provider for precondition checks. await _commands.ExecuteAsync( context: context, argPos: argPos, services: null); } } With Attributes Starting from 1.0, commands can be defined ahead of time with attributes, or at runtime with builders. For most bots, ahead-of-time commands should be all you need, and this is the recommended method of defining commands. Modules The first step to creating commands is to create a module. A module is an organizational pattern that allows you to write your commands in different classes and have them automatically loaded. Discord.Net's implementation of \"modules\" is influenced heavily by the ASP.NET Core's Controller pattern. This means that the lifetime of a module instance is only as long as the command is being invoked. Before we create a module, it is crucial for you to remember that in order to create a module and have it automatically discovered, your module must: Be public Inherit ModuleBase By now, your module should look like this: using Discord.Commands; // Keep in mind your module **must** be public and inherit ModuleBase. // If it isn't, it will not be discovered by AddModulesAsync! public class InfoModule : ModuleBase<SocketCommandContext> { } Note ModuleBase is an abstract class, meaning that you may extend it or override it as you see fit. Your module may inherit from any extension of ModuleBase. Adding/Creating Commands Warning Avoid using long-running code in your modules wherever possible. Long-running code, by default, within a command module can cause gateway thread to be blocked; therefore, interrupting the bot's connection to Discord. You may read more about it in @FAQ.Commands.General . The next step to creating commands is actually creating the commands. For a command to be valid, it must have a return type of Task or Task<RuntimeResult>. Typically, you might want to mark this method as async, although it is not required. Then, flag your command with the CommandAttribute. Note that you must specify a name for this command, except for when it is part of a Module Group. Command Parameters Adding parameters to a command is done by adding parameters to the parent Task. For example: To take an integer as an argument from the user, add int num. To take a user as an argument from the user, add IUser user. ...etc. Starting from 1.0, a command can accept nearly any type of argument; a full list of types that are parsed by default can be found in @Guides.Commands.TypeReaders. Optional Parameters Parameters, by default, are always required. To make a parameter optional, give it a default value (i.e., int num = 0). Parameters with Spaces To accept a space-separated list, set the parameter to params Type[]. Should a parameter include spaces, the parameter must be wrapped in quotes. For example, for a command with a parameter string food, you would execute it with !favoritefood \"Key Lime Pie\". If you would like a parameter to parse until the end of a command, flag the parameter with the RemainderAttribute. This will allow a user to invoke a command without wrapping a parameter in quotes. Command Overloads You may add overloads to your commands, and the command parser will automatically pick up on it. If, for whatever reason, you have two commands which are ambiguous to each other, you may use the PriorityAttribute to specify which should be tested before the other. The Priority attributes are sorted in descending order; the higher priority will be called first. Command Context Every command can access the execution context through the Context property on ModuleBase. ICommandContext allows you to access the message, channel, guild, user, and the underlying Discord client that the command was invoked from. Different types of Context may be specified using the generic variant of ModuleBase. When using a SocketCommandContext, for example, the properties on this context will already be Socket entities, so you will not need to cast them. To reply to messages, you may also invoke ReplyAsync, instead of accessing the channel through the Context and sending a message. Warning Contexts should NOT be mixed! You cannot have one module that uses CommandContext and another that uses SocketCommandContext. Tip At this point, your module should look comparable to this example: // Create a module with no prefix public class InfoModule : ModuleBase<SocketCommandContext> { // ~say hello world -> hello world [Command(\"say\")] [Summary(\"Echoes a message.\")] public Task SayAsync([Remainder] [Summary(\"The text to echo\")] string echo) => ReplyAsync(echo); // ReplyAsync is a method on ModuleBase } // Create a module with the 'sample' prefix [Group(\"sample\")] public class SampleModule : ModuleBase<SocketCommandContext> { // ~sample square 20 -> 400 [Command(\"square\")] [Summary(\"Squares a number.\")] public async Task SquareAsync( [Summary(\"The number to square.\")] int num) { // We can also access the channel from the Command Context. await Context.Channel.SendMessageAsync($\"{num}^2 = {Math.Pow(num, 2)}\"); } // ~sample userinfo --> foxbot#0282 // ~sample userinfo @Khionu --> Khionu#8708 // ~sample userinfo Khionu#8708 --> Khionu#8708 // ~sample userinfo Khionu --> Khionu#8708 // ~sample userinfo 96642168176807936 --> Khionu#8708 // ~sample whois 96642168176807936 --> Khionu#8708 [Command(\"userinfo\")] [Summary (\"Returns info about the current user, or the user parameter, if one passed.\")] [Alias(\"user\", \"whois\")] public async Task UserInfoAsync( [Summary(\"The (optional) user to get info from\")] SocketUser user = null) { var userInfo = user ?? Context.Client.CurrentUser; await ReplyAsync($\"{userInfo.Username}#{userInfo.Discriminator}\"); } } Loading Modules Automatically The Command Service can automatically discover all classes in an Assembly that inherit ModuleBase and load them. Invoke CommandService.AddModulesAsync to discover modules and install them. To opt a module out of auto-loading, flag it with DontAutoLoadAttribute. Loading Modules Manually To manually load a module, invoke CommandService.AddModuleAsync by passing in the generic type of your module and optionally, a service provider. Module Constructors Modules are constructed using Dependency Injection. Any parameters that are placed in the Module's constructor must be injected into an IServiceProvider first. Tip Alternatively, you may accept an IServiceProvider as an argument and extract services yourself, although this is discouraged. Module Properties Modules with public settable properties will have the dependencies injected after the construction of the module. See @Guides.Commands.DI to learn more. Module Groups Module Groups allow you to create a module where commands are prefixed. To create a group, flag a module with the GroupAttribute. Module Groups also allow you to create nameless Commands, where the CommandAttribute is configured with no name. In this case, the command will inherit the name of the group it belongs to. Submodules Submodules are \"modules\" that reside within another one. Typically, submodules are used to create nested groups (although not required to create nested groups). [Group(\"admin\")] public class AdminModule : ModuleBase<SocketCommandContext> { [Group(\"clean\")] public class CleanModule : ModuleBase<SocketCommandContext> { // ~admin clean [Command] public async Task DefaultCleanAsync() { // ... } // ~admin clean messages 15 [Command(\"messages\")] public async Task CleanAsync(int count) { // ... } } // ~admin ban foxbot#0282 [Command(\"ban\")] public Task BanAsync(IGuildUser user) => Context.Guild.AddBanAsync(user); }"
  },
  "guides/text_commands/namedarguments.html": {
    "href": "guides/text_commands/namedarguments.html",
    "title": "Named Arguments | Discord.Net Documentation",
    "keywords": "Named Arguments By default, arguments for commands are parsed positionally, meaning that the order matters. But sometimes you may want to define a command with many optional parameters, and it'd be easier for end-users to only specify what they want to set, instead of needing them to specify everything by hand. Setting up Named Arguments In order to be able to specify different arguments by name, you have to create a new class that contains all of the optional values that the command will use, and apply an instance of NamedArgumentTypeAttribute on it. Example - Creating a Named Arguments Type [NamedArgumentType] public class NamableArguments { public string First { get; set; } public string Second { get; set; } public string Third { get; set; } public string Fourth { get; set; } } Usage in a Command The command where you want to use these values can be declared like so: [Command(\"act\")] public async Task Act(int requiredArg, NamableArguments namedArgs) The command can now be invoked as .act 42 first: Hello fourth: \"A string with spaces must be wrapped in quotes\" second: World. A TypeReader for the named arguments container type is automatically registered. It's important that any other arguments that would be required are placed before the container type. Important A single command can have only one parameter of a type annotated with NamedArgumentTypeAttribute, and it MUST be the last parameter in the list. A command parameter of such an annotated type is automatically treated as if that parameter has RemainderAttribute applied. Complex Types The TypeReader for Named Argument Types will look for a TypeReader of every property type, meaning any other command parameter type will work just the same. You can also read multiple values into a single property by making that property an IEnumerable<T>. So for example, if your Named Argument Type has the following field, public IEnumerable<int> Numbers { get; set; } then the command can be invoked as .cmd numbers: \"1, 2, 4, 8, 16, 32\" Additional Notes The use of [OverrideTypeReader] is also supported on the properties of a Named Argument Type."
  },
  "guides/text_commands/post-execution.html": {
    "href": "guides/text_commands/post-execution.html",
    "title": "Post-command Execution Handling | Discord.Net Documentation",
    "keywords": "Post-execution Handling for Text Commands When developing commands, you may want to consider building a post-execution handling system so you can have finer control over commands. Discord.Net offers several post-execution workflows for you to work with. If you recall, in the Command Guide, we have shown the following example for executing and handling commands, public class CommandHandler { private readonly DiscordSocketClient _client; private readonly CommandService _commands; // Retrieve client and CommandService instance via ctor public CommandHandler(DiscordSocketClient client, CommandService commands) { _commands = commands; _client = client; } public async Task InstallCommandsAsync() { // Hook the MessageReceived event into our command handler _client.MessageReceived += HandleCommandAsync; // Here we discover all of the command modules in the entry // assembly and load them. Starting from Discord.NET 2.0, a // service provider is required to be passed into the // module registration method to inject the // required dependencies. // // If you do not use Dependency Injection, pass null. // See Dependency Injection guide for more information. await _commands.AddModulesAsync(assembly: Assembly.GetEntryAssembly(), services: null); } private async Task HandleCommandAsync(SocketMessage messageParam) { // Don't process the command if it was a system message var message = messageParam as SocketUserMessage; if (message == null) return; // Create a number to track where the prefix ends and the command begins int argPos = 0; // Determine if the message is a command based on the prefix and make sure no bots trigger commands if (!(message.HasCharPrefix('!', ref argPos) || message.HasMentionPrefix(_client.CurrentUser, ref argPos)) || message.Author.IsBot) return; // Create a WebSocket-based command context based on the message var context = new SocketCommandContext(_client, message); // Execute the command with the command context we just // created, along with the service provider for precondition checks. await _commands.ExecuteAsync( context: context, argPos: argPos, services: null); } } You may notice that after we perform ExecuteAsync, we store the result and print it to the chat, essentially creating the most fundamental form of a post-execution handler. With this in mind, we could start doing things like the following, // Bad code!!! var result = await _commands.ExecuteAsync(context, argPos, _services); if (result.CommandError != null) switch(result.CommandError) { case CommandError.BadArgCount: await context.Channel.SendMessageAsync( \"Parameter count does not match any command's.\"); break; default: await context.Channel.SendMessageAsync( $\"An error has occurred {result.ErrorReason}\"); break; } However, this may not always be preferred, because you are creating your post-execution logic with the essential command handler. This design could lead to messy code and could potentially be a violation of the SRP (Single Responsibility Principle). Another major issue is if your command is marked with RunMode.Async, ExecuteAsync will always return a successful ExecuteResult instead of the actual result. You can learn more about the impact in @FAQ.Commands.General. CommandExecuted Event Enter CommandExecuted, an event that was introduced in Discord.Net 2.0. This event is raised whenever a command is executed regardless of its execution status. This means this event can be used to streamline your post-execution design, is not prone to RunMode.Async's ExecuteAsync drawbacks. Thus, we can begin working on code such as: public async Task SetupAsync() { await _command.AddModulesAsync(Assembly.GetEntryAssembly(), _services); // Hook the execution event _command.CommandExecuted += OnCommandExecutedAsync; // Hook the command handler _client.MessageReceived += HandleCommandAsync; } public async Task OnCommandExecutedAsync(Optional<CommandInfo> command, ICommandContext context, IResult result) { // We have access to the information of the command executed, // the context of the command, and the result returned from the // execution in this event. // We can tell the user what went wrong if (!string.IsNullOrEmpty(result?.ErrorReason)) { await context.Channel.SendMessageAsync(result.ErrorReason); } // ...or even log the result (the method used should fit into // your existing log handler) var commandName = command.IsSpecified ? command.Value.Name : \"A command\"; await _log.LogAsync(new LogMessage(LogSeverity.Info, \"CommandExecution\", $\"{commandName} was executed at {DateTime.UtcNow}.\")); } public async Task HandleCommandAsync(SocketMessage msg) { var message = messageParam as SocketUserMessage; if (message == null) return; int argPos = 0; if (!(message.HasCharPrefix('!', ref argPos) || message.HasMentionPrefix(_client.CurrentUser, ref argPos)) || message.Author.IsBot) return; var context = new SocketCommandContext(_client, message); await _commands.ExecuteAsync(context, argPos, _services); } So now we have a streamlined post-execution pipeline, great! What's next? We can take this further by using RuntimeResult. RuntimeResult RuntimeResult was initially introduced in 1.0 to allow developers to centralize their command result logic. In other words, it is a result type that is designed to be returned when the command has finished its execution. However, it wasn't widely adopted due to the aforementioned ExecuteAsync drawback. Since we now have access to a proper result-handler via the CommandExecuted event, we can start making use of this class. The best way to make use of it is to create your version of RuntimeResult. You can achieve this by inheriting the RuntimeResult class. The following creates a bare-minimum required for a sub-class of RuntimeResult, public class MyCustomResult : RuntimeResult { public MyCustomResult(CommandError? error, string reason) : base(error, reason) { } } The sky is the limit from here. You can add any additional information you would like regarding the execution result. For example, you may want to add your result type or other helpful information regarding the execution, or something simple like static methods to help you create return types easily. public class MyCustomResult : RuntimeResult { public MyCustomResult(CommandError? error, string reason) : base(error, reason) { } public static MyCustomResult FromError(string reason) => new MyCustomResult(CommandError.Unsuccessful, reason); public static MyCustomResult FromSuccess(string reason = null) => new MyCustomResult(null, reason); } After you're done creating your RuntimeResult, you can implement it in your command by marking the command return type to Task<RuntimeResult>. Note You must mark the return type as Task<RuntimeResult> instead of Task<MyCustomResult>. Only the former will be picked up when building the module. Here's an example of a command that utilizes such logic: public class MyModule : ModuleBase<SocketCommandContext> { [Command(\"eat\")] public async Task<RuntimeResult> ChooseAsync(string food) { if (food == \"salad\") return MyCustomResult.FromError(\"No, I don't want that!\"); return MyCustomResult.FromSuccess($\"Give me the {food}!\"). } } And now we can check for it in our CommandExecuted handler: public async Task OnCommandExecutedAsync(Optional<CommandInfo> command, ICommandContext context, IResult result) { switch(result) { case MyCustomResult customResult: // do something extra with it break; default: if (!string.IsNullOrEmpty(result.ErrorReason)) await context.Channel.SendMessageAsync(result.ErrorReason); break; } } CommandService.Log Event We have so far covered the handling of various result types, but we have not talked about what to do if the command enters a catastrophic failure (i.e., exceptions). To resolve this, we can make use of the CommandService.Log event. All exceptions thrown during a command execution are caught and sent to the Log event under the LogMessage.Exception property as a CommandException type. The CommandException class allows us to access the exception thrown, as well as the context of the command. public async Task LogAsync(LogMessage logMessage) { if (logMessage.Exception is CommandException cmdException) { // We can tell the user that something unexpected has happened await cmdException.Context.Channel.SendMessageAsync(\"Something went catastrophically wrong!\"); // We can also log this incident Console.WriteLine($\"{cmdException.Context.User} failed to execute '{cmdException.Command.Name}' in {cmdException.Context.Channel}.\"); Console.WriteLine(cmdException.ToString()); } }"
  },
  "guides/text_commands/preconditions.html": {
    "href": "guides/text_commands/preconditions.html",
    "title": "Preconditions | Discord.Net Documentation",
    "keywords": "Preconditions Preconditions serve as a permissions system for your Commands. Keep in mind, however, that they are not limited to just permissions and can be as complex as you want them to be. There are two types of Preconditions you can use: PreconditionAttribute can be applied to Modules, Groups, or Commands. ParameterPreconditionAttribute can be applied to Parameters. You may visit their respective API documentation to find out more. Bundled Preconditions Discord.Commands ships with several bundled Preconditions for you to use. RequireContextAttribute RequireOwnerAttribute RequireBotPermissionAttribute RequireUserPermissionAttribute RequireNsfwAttribute Using Preconditions To use a precondition, simply apply any valid precondition candidate to a command method signature as an attribute. Example - Using a Precondition [RequireOwner] [Command(\"echo\")] public Task EchoAsync(string input) => ReplyAsync(input); ORing Preconditions When writing commands, you may want to allow some of them to be executed when only some of the precondition checks are passed. This is where the Group property of a precondition attribute comes in handy. By assigning two or more preconditions to a group, the command system will allow the command to be executed when one of the precondition passes. Example - ORing Preconditions // The following example only requires the user to either have the // Administrator permission in this guild or own the bot application. [RequireUserPermission(GuildPermission.Administrator, Group = \"Permission\")] [RequireOwner(Group = \"Permission\")] public class AdminModule : ModuleBase<SocketCommandContext> { [Command(\"ban\")] public Task BanAsync(IUser user) => Context.Guild.AddBanAsync(user); } Custom Preconditions To write your own Precondition, create a new class that inherits from either PreconditionAttribute or ParameterPreconditionAttribute depending on your use. In order for your Precondition to function, you will need to override the CheckPermissionsAsync method. If the context meets the required parameters, return PreconditionResult.FromSuccess, otherwise return PreconditionResult.FromError and include an error message if necessary. Note Visual Studio can help you implement missing members from the abstract class by using the \"Implement Abstract Class\" IntelliSense hint. Example - Creating a Custom Precondition using System; using System.Linq; using System.Threading.Tasks; using Discord.Commands; using Discord.WebSocket; // Inherit from PreconditionAttribute public class RequireRoleAttribute : PreconditionAttribute { // Create a field to store the specified name private readonly string _name; // Create a constructor so the name can be specified public RequireRoleAttribute(string name) => _name = name; // Override the CheckPermissions method public override Task<PreconditionResult> CheckPermissionsAsync(ICommandContext context, CommandInfo command, IServiceProvider services) { // Check if this user is a Guild User, which is the only context where roles exist if (context.User is SocketGuildUser gUser) { // If this command was executed by a user with the appropriate role, return a success if (gUser.Roles.Any(r => r.Name == _name)) // Since no async work is done, the result has to be wrapped with `Task.FromResult` to avoid compiler errors return Task.FromResult(PreconditionResult.FromSuccess()); // Since it wasn't, fail else return Task.FromResult(PreconditionResult.FromError($\"You must have a role named {_name} to run this command.\")); } else return Task.FromResult(PreconditionResult.FromError(\"You must be in a guild to run this command.\")); } }"
  },
  "guides/text_commands/typereaders.html": {
    "href": "guides/text_commands/typereaders.html",
    "title": "Type Readers | Discord.Net Documentation",
    "keywords": "Type Readers Type Readers allow you to parse different types of arguments in your commands. By default, the following Types are supported arguments: bool char sbyte/byte ushort/short uint/int ulong/long float, double, decimal string enum DateTime/DateTimeOffset/TimeSpan Any nullable value-type (e.g. int?, bool?) Any implementation of IChannel/IMessage/IUser/IRole Creating a Type Reader To create a TypeReader, create a new class that imports Discord and Discord.Commands and ensure the class inherits from TypeReader. Next, satisfy the TypeReader class by overriding the ReadAsync method. Inside this Task, add whatever logic you need to parse the input string. If you are able to successfully parse the input, return TypeReaderResult.FromSuccess with the parsed input, otherwise return TypeReaderResult.FromError and include an error message if necessary. Note Visual Studio can help you implement missing members from the abstract class by using the \"Implement Abstract Class\" IntelliSense hint. Example - Creating a Type Reader // Please note that the library already supports type reading // primitive types such as bool. This example is merely used // to demonstrate how one could write a simple TypeReader. using Discord; using Discord.Commands; public class BooleanTypeReader : TypeReader { public override Task<TypeReaderResult> ReadAsync(ICommandContext context, string input, IServiceProvider services) { bool result; if (bool.TryParse(input, out result)) return Task.FromResult(TypeReaderResult.FromSuccess(result)); return Task.FromResult(TypeReaderResult.FromError(CommandError.ParseFailed, \"Input could not be parsed as a boolean.\")); } } Registering a Type Reader TypeReaders are not automatically discovered by the Command Service and must be explicitly added. To register a TypeReader, invoke CommandService.AddTypeReader. Important TypeReaders must be added prior to module discovery, otherwise your TypeReaders may not work! Example - Adding a Type Reader public class CommandHandler { private readonly CommandService _commands; private readonly DiscordSocketClient _client; private readonly IServiceProvider _services; public CommandHandler(CommandService commands, DiscordSocketClient client, IServiceProvider services) { _commands = commands; _client = client; _services = services; } public async Task SetupAsync() { _client.MessageReceived += CommandHandleAsync; // Add BooleanTypeReader to type read for the type \"bool\" _commands.AddTypeReader(typeof(bool), new BooleanTypeReader()); // Then register the modules await _commands.AddModulesAsync(Assembly.GetEntryAssembly(), _services); } public async Task CommandHandleAsync(SocketMessage msg) { // ... } }"
  },
  "guides/v2_v3_guide/v2_to_v3_guide.html": {
    "href": "guides/v2_v3_guide/v2_to_v3_guide.html",
    "title": "V2 -> V3 Guide | Discord.Net Documentation",
    "keywords": "V2 to V3 Guide V3 is designed to be a more feature complete, more reliable, and more flexible library than any previous version. Below are the most notable breaking changes that you would need to update your code to work with V3. GatewayIntents As Discord.NET has upgraded from Discord API v6 to API v9, GatewayIntents must now be specified in the socket config, as well as on the developer portal. // Where ever you declared your websocket client. DiscordSocketClient _client; ... var config = new DiscordSocketConfig() { .. // Other config options can be presented here. GatewayIntents = GatewayIntents.All } _client = new DiscordSocketClient(config); Common intents: AllUnprivileged: This is a group of most common intents, that do NOT require any developer portal intents to be enabled. This includes intents that receive messages such as: GatewayIntents.GuildMessages, GatewayIntents.DirectMessages GuildMembers: An intent disabled by default, as you need to enable it in the developer portal. MessageContent: An intent also disabled by default as you also need to enable it in the developer portal. GuildPresences: Also disabled by default, this intent together with GuildMembers are the only intents not included in AllUnprivileged. All: All intents, it is ill advised to use this without care, as it can cause a memory leak from presence. The library will give responsive warnings if you specify unnecessary intents. Note All gateway intents, their Discord API counterpart and their enum value are listed HERE Stacking intents: It is common that you require several intents together. The example below shows how this can be done. GatewayIntents = GatewayIntents.AllUnprivileged | GatewayIntents.GuildMembers | .. Note Further documentation on the | operator can be found HERE UserLeft event UserLeft has been changed to have the SocketUser and SocketGuild parameters instead of a SocketGuildUser parameter. Because of this, guild-only user data cannot be retrieved from this user anymore, as this user is not part of the guild. ReactionAdded event The reaction added event has been changed to have both parameters cacheable. This allows you to download the channel and message if they aren't cached instead of them being null. UserIsTyping Event The user is typing event has been changed to have both parameters cacheable. This allows you to download the user and channel if they aren't cached instead of them being null. Presence There is a new event called PresenceUpdated that is called when a user's presence changes, instead of GuildMemberUpdated or UserUpdated. If your code relied on these events to get presence data then you need to update it to work with the new event. Migrating your commands to application commands The new interaction service was designed to act like the previous service for text-based commands. Your pre-existing code will continue to work, but you will need to migrate your modules and response functions to use the new interaction service methods. Documentation on this can be found in the Guides."
  },
  "guides/voice/sending-voice.html": {
    "href": "guides/voice/sending-voice.html",
    "title": "Sending Voice | Discord.Net Documentation",
    "keywords": "Information on this page is subject to change! Warning This article is out of date, and has not been rewritten yet. Information is not guaranteed to be accurate. Installing Audio requires two native libraries, libsodium and opus. Both of these libraries must be placed in the runtime directory of your bot. (When developing on .NET Framework, this would be bin/debug, when developing on .NET Core, this is where you execute dotnet run from; typically the same directory as your csproj). For Windows users, precompiled binaries are available for your convenience here. For Linux users, you will need to compile Sodium and Opus from source, or install them from your package manager. Joining a Channel Joining a channel is the first step to sending audio, and will return an IAudioClient to send data with. To join a channel, simply await ConnectAsync on any instance of an IAudioChannel. // The command's Run Mode MUST be set to RunMode.Async, otherwise, being connected to a voice channel will block the gateway thread. [Command(\"join\", RunMode = RunMode.Async)] public async Task JoinChannel(IVoiceChannel channel = null) { // Get the audio channel channel = channel ?? (Context.User as IGuildUser)?.VoiceChannel; if (channel == null) { await Context.Channel.SendMessageAsync(\"User must be in a voice channel, or a voice channel must be passed as an argument.\"); return; } // For the next step with transmitting audio, you would want to pass this Audio Client in to a service. var audioClient = await channel.ConnectAsync(); } Warning Commands which mutate voice states, such as those where you join/leave an audio channel, or send audio, should use RunMode.Async. RunMode.Async is necessary to prevent a feedback loop which will deadlock clients in their default configuration. If you know that you're running your commands in a different task than the gateway task, RunMode.Async is not required. The client will sustain a connection to this channel until it is kicked, disconnected from Discord, or told to disconnect. It should be noted that voice connections are created on a per-guild basis; only one audio connection may be open by the bot in a single guild. To switch channels within a guild, invoke ConnectAsync on another voice channel in the guild. Transmitting Audio With FFmpeg FFmpeg is an open source, highly versatile AV-muxing tool. This is the recommended method of transmitting audio. Before you begin, you will need to have a version of FFmpeg downloaded and placed somewhere in your PATH (or alongside the bot, in the same location as libsodium and opus). Windows binaries are available on FFmpeg's download page. First, you will need to create a Process that starts FFmpeg. An example of how to do this is included below, though it is important that you return PCM at 48000hz. Note As of the time of this writing, Discord.Audio struggles significantly with processing audio that is already opus-encoded; you will need to use the PCM write streams. private Process CreateStream(string path) { return Process.Start(new ProcessStartInfo { FileName = \"ffmpeg\", Arguments = $\"-hide_banner -loglevel panic -i \\\"{path}\\\" -ac 2 -f s16le -ar 48000 pipe:1\", UseShellExecute = false, RedirectStandardOutput = true, }); } Next, to transmit audio from FFmpeg to Discord, you will need to pull an AudioOutStream from your IAudioClient. Since we're using PCM audio, use IAudioClient.CreatePCMStream. The sample rate argument doesn't particularly matter, so long as it is a valid rate (120, 240, 480, 960, 1920, or 2880). For the sake of simplicity, I recommend using 1920. Channels should be left at 2, unless you specified a different value for -ac 2 when creating FFmpeg. Finally, audio will need to be piped from FFmpeg's stdout into your AudioOutStream. This step can be as complex as you'd like it to be, but for the majority of cases, you can just use Stream.CopyToAsync, as shown below. If you are implementing a queue for sending songs, it's likely that you will want to wait for audio to stop playing before continuing on to the next song. You can await AudioOutStream.FlushAsync to wait for the audio client's internal buffer to clear out. private async Task SendAsync(IAudioClient client, string path) { // Create FFmpeg using the previous example using (var ffmpeg = CreateStream(path)) using (var output = ffmpeg.StandardOutput.BaseStream) using (var discord = client.CreatePCMStream(AudioApplication.Mixed)) { try { await output.CopyToAsync(discord); } finally { await discord.FlushAsync(); } } }"
  },
  "index.html": {
    "href": "index.html",
    "title": "Home | Discord.Net Documentation",
    "keywords": "Discord.NET Documentation What is Discord.NET? Discord.Net is an asynchronous, multi-platform .NET Library used to interface with the Discord API. Where to begin? If this is your first time using Discord.Net, you should refer to the Intro for tutorials. If you're coming from Discord.Net V2, you should refer to the V2 -> V3 guides. More experienced users might want to refer to the API Documentation for a breakdown of the individual objects in the library. Nightlies Nightlies are builds of Discord.NET that are still in an experimental phase, and have not been released. They are available through Discord.NET's MyGet feed. Questions? Frequently asked questions are covered in the FAQ. Read it thoroughly because most common questions are already answered there. If you still have unanswered questions after reading the FAQ, further support is available on Discord. Supporting Discord.Net Discord.Net is an MIT-licensed open source project with its development made possible entirely by volunteers. If you'd like to support our efforts financially, please consider: Contributing on Open Collective. New in V3 Interaction Framework A counterpart to the well-known command service of Discord.Net, the Interaction Framework implements the same feature-rich structure to register & handle interactions like application commands & buttons. Read about the Interaction Framework here Slash Commands Slash commands are purposed to take over the normal prefixed commands in Discord and comes with good functionality to serve as a replacement. Being interactions, they are handled as SocketInteractions. Creating and receiving slash commands is covered below. Find out more about slash commands in the Slash Command Guides Context Message & User Commands These commands can be pointed at messages and users, in custom application tabs. Being interactions as well, they are able to be handled just like slash commands. They do not have options however. Learn how to create and handle these commands in the Context Command Guides Message Components Components of a message such as buttons and dropdowns, which can be interacted with and responded to. Message components can be set in rows and multiple can exist on a single message! Explanation on how to add & respond to message components can be found in the Message Component Guides"
  }
}